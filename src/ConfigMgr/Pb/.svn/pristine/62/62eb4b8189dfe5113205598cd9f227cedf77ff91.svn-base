// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Alliance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Alliance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TAllianceUserTaskType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceUserTaskType_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceUserTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceUserTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceUserPractice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceUserPractice_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceTip_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceSimpleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceSimpleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceSimpleInfoWithApplyStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceSimpleInfoWithApplyStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceVoteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceVoteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceScience_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceScience_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceGuildUserMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceGuildUserMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceGuildMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceGuildMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceGuildMemberInfoWithUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceGuildMemberInfoWithUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceApplyGuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceApplyGuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInnerAllianceGetServerTeamInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInnerAllianceGetServerTeamInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInnerAllianceGetAllianceInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInnerAllianceGetAllianceInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInnerAllianceRefreshTaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInnerAllianceRefreshTaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInnerAllianceUpgradeTaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInnerAllianceUpgradeTaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInnerAllianceUpgradeToLv6TaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInnerAllianceUpgradeToLv6TaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInnerAllianceCommitTaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInnerAllianceCommitTaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInnerAllianceCommitTaskRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInnerAllianceCommitTaskRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInnerAllianceReceiveTaskRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInnerAllianceReceiveTaskRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInnerAllianceReceiveTaskRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInnerAllianceReceiveTaskRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInnerAllianceReceiveSignRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInnerAllianceReceiveSignRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInnerAllianceUpgradePracticeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInnerAllianceUpgradePracticeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceUserInfoChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceUserInfoChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceGetAllianceListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceGetAllianceListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceGetAllianceListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceGetAllianceListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceSearchAllianceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceSearchAllianceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceSearchAllianceRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceSearchAllianceRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceGetAllianceMemberListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceGetAllianceMemberListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceGetAllianceMemberListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceGetAllianceMemberListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceGetAllianceApplyListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceGetAllianceApplyListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceCreateAllianceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceCreateAllianceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceApplyAllianceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceApplyAllianceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceApplyAllianceRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceApplyAllianceRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceCancelApplyAllianceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceCancelApplyAllianceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceExamineApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceExamineApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceModifyInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceModifyInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceChangeNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceChangeNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceKickGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceKickGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceAppointPostReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceAppointPostReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceInitiateVoteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceInitiateVoteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceCancelVoteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceCancelVoteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceVoteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceVoteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceUpgradeScienceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceUpgradeScienceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceInfoChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceInfoChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceJoinNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceJoinNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAllianceLeaveNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAllianceLeaveNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EAllianceTipType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAllianceVoteType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAlliancePost_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAllianceVoteResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAllianceResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fAlliance_2eproto() {
  protobuf_AddDesc_net_2fAlliance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Alliance.proto");
  GOOGLE_CHECK(file != NULL);
  TAllianceUserTaskType_descriptor_ = file->message_type(0);
  static const int TAllianceUserTaskType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserTaskType, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserTaskType, num_),
  };
  TAllianceUserTaskType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceUserTaskType_descriptor_,
      TAllianceUserTaskType::default_instance_,
      TAllianceUserTaskType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserTaskType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserTaskType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceUserTaskType));
  TAllianceUserTask_descriptor_ = file->message_type(1);
  static const int TAllianceUserTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserTask, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserTask, committime_),
  };
  TAllianceUserTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceUserTask_descriptor_,
      TAllianceUserTask::default_instance_,
      TAllianceUserTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceUserTask));
  TAllianceUserPractice_descriptor_ = file->message_type(2);
  static const int TAllianceUserPractice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserPractice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserPractice, level_),
  };
  TAllianceUserPractice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceUserPractice_descriptor_,
      TAllianceUserPractice::default_instance_,
      TAllianceUserPractice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserPractice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserPractice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceUserPractice));
  TAllianceUserInfo_descriptor_ = file->message_type(3);
  static const int TAllianceUserInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserInfo, taskrefreshnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserInfo, taskupgradenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserInfo, arrtasktypeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserInfo, arrtaskinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserInfo, signrewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserInfo, taskrewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserInfo, arrpractice_),
  };
  TAllianceUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceUserInfo_descriptor_,
      TAllianceUserInfo::default_instance_,
      TAllianceUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceUserInfo));
  TAllianceTip_descriptor_ = file->message_type(4);
  static const int TAllianceTip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceTip, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceTip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceTip, paramarr_),
  };
  TAllianceTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceTip_descriptor_,
      TAllianceTip::default_instance_,
      TAllianceTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceTip));
  TAllianceSimpleInfo_descriptor_ = file->message_type(5);
  static const int TAllianceSimpleInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, bannername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, bannerbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, bannerfigure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, guildmembernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, guildusernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, reviewmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, guildlvlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, qq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, totalfightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, leaderuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, arrguildmember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, addmembernum_),
  };
  TAllianceSimpleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceSimpleInfo_descriptor_,
      TAllianceSimpleInfo::default_instance_,
      TAllianceSimpleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceSimpleInfo));
  TAllianceSimpleInfoWithApplyStatus_descriptor_ = file->message_type(6);
  static const int TAllianceSimpleInfoWithApplyStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfoWithApplyStatus, alliancesimpleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfoWithApplyStatus, apply_),
  };
  TAllianceSimpleInfoWithApplyStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceSimpleInfoWithApplyStatus_descriptor_,
      TAllianceSimpleInfoWithApplyStatus::default_instance_,
      TAllianceSimpleInfoWithApplyStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfoWithApplyStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceSimpleInfoWithApplyStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceSimpleInfoWithApplyStatus));
  TAllianceVoteInfo_descriptor_ = file->message_type(7);
  static const int TAllianceVoteInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceVoteInfo, voteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceVoteInfo, sponsoruserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceVoteInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceVoteInfo, votetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceVoteInfo, aimuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceVoteInfo, agreenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceVoteInfo, againstnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceVoteInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceVoteInfo, closetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceVoteInfo, selfvote_),
  };
  TAllianceVoteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceVoteInfo_descriptor_,
      TAllianceVoteInfo::default_instance_,
      TAllianceVoteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceVoteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceVoteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceVoteInfo));
  TAllianceScience_descriptor_ = file->message_type(8);
  static const int TAllianceScience_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceScience, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceScience, level_),
  };
  TAllianceScience_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceScience_descriptor_,
      TAllianceScience::default_instance_,
      TAllianceScience_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceScience, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceScience, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceScience));
  TAllianceDetailInfo_descriptor_ = file->message_type(9);
  static const int TAllianceDetailInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceDetailInfo, alliancesimpleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceDetailInfo, weekstartlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceDetailInfo, weektaskscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceDetailInfo, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceDetailInfo, arrtip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceDetailInfo, arrsignguildleaderuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceDetailInfo, arrvoteinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceDetailInfo, applynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceDetailInfo, lastimpeachtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceDetailInfo, materialnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceDetailInfo, daydonatenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceDetailInfo, arrscience_),
  };
  TAllianceDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceDetailInfo_descriptor_,
      TAllianceDetailInfo::default_instance_,
      TAllianceDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceDetailInfo));
  TAllianceGuildUserMemberInfo_descriptor_ = file->message_type(10);
  static const int TAllianceGuildUserMemberInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildUserMemberInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildUserMemberInfo, rpgpost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildUserMemberInfo, totaldonate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildUserMemberInfo, weektaskscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildUserMemberInfo, daytaskstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildUserMemberInfo, committaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildUserMemberInfo, onlinestatus_),
  };
  TAllianceGuildUserMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceGuildUserMemberInfo_descriptor_,
      TAllianceGuildUserMemberInfo::default_instance_,
      TAllianceGuildUserMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildUserMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildUserMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceGuildUserMemberInfo));
  TAllianceGuildMemberInfo_descriptor_ = file->message_type(11);
  static const int TAllianceGuildMemberInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfo, bannername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfo, bannerbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfo, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfo, membernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfo, leaderuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfo, leaderuname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfo, post_),
  };
  TAllianceGuildMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceGuildMemberInfo_descriptor_,
      TAllianceGuildMemberInfo::default_instance_,
      TAllianceGuildMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceGuildMemberInfo));
  TAllianceGuildMemberInfoWithUser_descriptor_ = file->message_type(12);
  static const int TAllianceGuildMemberInfoWithUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfoWithUser, guildinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfoWithUser, arruser_),
  };
  TAllianceGuildMemberInfoWithUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceGuildMemberInfoWithUser_descriptor_,
      TAllianceGuildMemberInfoWithUser::default_instance_,
      TAllianceGuildMemberInfoWithUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfoWithUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceGuildMemberInfoWithUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceGuildMemberInfoWithUser));
  TAllianceApplyGuildInfo_descriptor_ = file->message_type(13);
  static const int TAllianceApplyGuildInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceApplyGuildInfo, leaderuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceApplyGuildInfo, membernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceApplyGuildInfo, guildfightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceApplyGuildInfo, guildlevel_),
  };
  TAllianceApplyGuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceApplyGuildInfo_descriptor_,
      TAllianceApplyGuildInfo::default_instance_,
      TAllianceApplyGuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceApplyGuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceApplyGuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceApplyGuildInfo));
  TInnerAllianceGetServerTeamInfoRsp_descriptor_ = file->message_type(14);
  static const int TInnerAllianceGetServerTeamInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceGetServerTeamInfoRsp, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceGetServerTeamInfoRsp, needopenday_),
  };
  TInnerAllianceGetServerTeamInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInnerAllianceGetServerTeamInfoRsp_descriptor_,
      TInnerAllianceGetServerTeamInfoRsp::default_instance_,
      TInnerAllianceGetServerTeamInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceGetServerTeamInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceGetServerTeamInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInnerAllianceGetServerTeamInfoRsp));
  TInnerAllianceGetAllianceInfoRsp_descriptor_ = file->message_type(15);
  static const int TInnerAllianceGetAllianceInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceGetAllianceInfoRsp, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceGetAllianceInfoRsp, alliancedetailinfo_),
  };
  TInnerAllianceGetAllianceInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInnerAllianceGetAllianceInfoRsp_descriptor_,
      TInnerAllianceGetAllianceInfoRsp::default_instance_,
      TInnerAllianceGetAllianceInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceGetAllianceInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceGetAllianceInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInnerAllianceGetAllianceInfoRsp));
  TInnerAllianceRefreshTaskReq_descriptor_ = file->message_type(16);
  static const int TInnerAllianceRefreshTaskReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceRefreshTaskReq, taskid_),
  };
  TInnerAllianceRefreshTaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInnerAllianceRefreshTaskReq_descriptor_,
      TInnerAllianceRefreshTaskReq::default_instance_,
      TInnerAllianceRefreshTaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceRefreshTaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceRefreshTaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInnerAllianceRefreshTaskReq));
  TInnerAllianceUpgradeTaskReq_descriptor_ = file->message_type(17);
  static const int TInnerAllianceUpgradeTaskReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceUpgradeTaskReq, taskid_),
  };
  TInnerAllianceUpgradeTaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInnerAllianceUpgradeTaskReq_descriptor_,
      TInnerAllianceUpgradeTaskReq::default_instance_,
      TInnerAllianceUpgradeTaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceUpgradeTaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceUpgradeTaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInnerAllianceUpgradeTaskReq));
  TInnerAllianceUpgradeToLv6TaskReq_descriptor_ = file->message_type(18);
  static const int TInnerAllianceUpgradeToLv6TaskReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceUpgradeToLv6TaskReq, taskid_),
  };
  TInnerAllianceUpgradeToLv6TaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInnerAllianceUpgradeToLv6TaskReq_descriptor_,
      TInnerAllianceUpgradeToLv6TaskReq::default_instance_,
      TInnerAllianceUpgradeToLv6TaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceUpgradeToLv6TaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceUpgradeToLv6TaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInnerAllianceUpgradeToLv6TaskReq));
  TInnerAllianceCommitTaskReq_descriptor_ = file->message_type(19);
  static const int TInnerAllianceCommitTaskReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceCommitTaskReq, taskid_),
  };
  TInnerAllianceCommitTaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInnerAllianceCommitTaskReq_descriptor_,
      TInnerAllianceCommitTaskReq::default_instance_,
      TInnerAllianceCommitTaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceCommitTaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceCommitTaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInnerAllianceCommitTaskReq));
  TInnerAllianceCommitTaskRsp_descriptor_ = file->message_type(20);
  static const int TInnerAllianceCommitTaskRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceCommitTaskRsp, rewardarray_),
  };
  TInnerAllianceCommitTaskRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInnerAllianceCommitTaskRsp_descriptor_,
      TInnerAllianceCommitTaskRsp::default_instance_,
      TInnerAllianceCommitTaskRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceCommitTaskRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceCommitTaskRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInnerAllianceCommitTaskRsp));
  TInnerAllianceReceiveTaskRewardReq_descriptor_ = file->message_type(21);
  static const int TInnerAllianceReceiveTaskRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceReceiveTaskRewardReq, id_),
  };
  TInnerAllianceReceiveTaskRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInnerAllianceReceiveTaskRewardReq_descriptor_,
      TInnerAllianceReceiveTaskRewardReq::default_instance_,
      TInnerAllianceReceiveTaskRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceReceiveTaskRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceReceiveTaskRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInnerAllianceReceiveTaskRewardReq));
  TInnerAllianceReceiveTaskRewardRsp_descriptor_ = file->message_type(22);
  static const int TInnerAllianceReceiveTaskRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceReceiveTaskRewardRsp, rewardarray_),
  };
  TInnerAllianceReceiveTaskRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInnerAllianceReceiveTaskRewardRsp_descriptor_,
      TInnerAllianceReceiveTaskRewardRsp::default_instance_,
      TInnerAllianceReceiveTaskRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceReceiveTaskRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceReceiveTaskRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInnerAllianceReceiveTaskRewardRsp));
  TInnerAllianceReceiveSignRewardRsp_descriptor_ = file->message_type(23);
  static const int TInnerAllianceReceiveSignRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceReceiveSignRewardRsp, rewardarray_),
  };
  TInnerAllianceReceiveSignRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInnerAllianceReceiveSignRewardRsp_descriptor_,
      TInnerAllianceReceiveSignRewardRsp::default_instance_,
      TInnerAllianceReceiveSignRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceReceiveSignRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceReceiveSignRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInnerAllianceReceiveSignRewardRsp));
  TInnerAllianceUpgradePracticeReq_descriptor_ = file->message_type(24);
  static const int TInnerAllianceUpgradePracticeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceUpgradePracticeReq, type_),
  };
  TInnerAllianceUpgradePracticeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInnerAllianceUpgradePracticeReq_descriptor_,
      TInnerAllianceUpgradePracticeReq::default_instance_,
      TInnerAllianceUpgradePracticeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceUpgradePracticeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInnerAllianceUpgradePracticeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInnerAllianceUpgradePracticeReq));
  TAllianceUserInfoChange_descriptor_ = file->message_type(25);
  static const int TAllianceUserInfoChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserInfoChange, userinfo_),
  };
  TAllianceUserInfoChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceUserInfoChange_descriptor_,
      TAllianceUserInfoChange::default_instance_,
      TAllianceUserInfoChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserInfoChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceUserInfoChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceUserInfoChange));
  TCrossAllianceGetAllianceListReq_descriptor_ = file->message_type(26);
  static const int TCrossAllianceGetAllianceListReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceListReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceListReq, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceListReq, onlycanapply_),
  };
  TCrossAllianceGetAllianceListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceGetAllianceListReq_descriptor_,
      TCrossAllianceGetAllianceListReq::default_instance_,
      TCrossAllianceGetAllianceListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceGetAllianceListReq));
  TCrossAllianceGetAllianceListRsp_descriptor_ = file->message_type(27);
  static const int TCrossAllianceGetAllianceListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceListRsp, arrallianceinfo_),
  };
  TCrossAllianceGetAllianceListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceGetAllianceListRsp_descriptor_,
      TCrossAllianceGetAllianceListRsp::default_instance_,
      TCrossAllianceGetAllianceListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceGetAllianceListRsp));
  TCrossAllianceSearchAllianceReq_descriptor_ = file->message_type(28);
  static const int TCrossAllianceSearchAllianceReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceSearchAllianceReq, name_),
  };
  TCrossAllianceSearchAllianceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceSearchAllianceReq_descriptor_,
      TCrossAllianceSearchAllianceReq::default_instance_,
      TCrossAllianceSearchAllianceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceSearchAllianceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceSearchAllianceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceSearchAllianceReq));
  TCrossAllianceSearchAllianceRsp_descriptor_ = file->message_type(29);
  static const int TCrossAllianceSearchAllianceRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceSearchAllianceRsp, arralliancesimpleinfo_),
  };
  TCrossAllianceSearchAllianceRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceSearchAllianceRsp_descriptor_,
      TCrossAllianceSearchAllianceRsp::default_instance_,
      TCrossAllianceSearchAllianceRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceSearchAllianceRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceSearchAllianceRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceSearchAllianceRsp));
  TCrossAllianceGetAllianceMemberListReq_descriptor_ = file->message_type(30);
  static const int TCrossAllianceGetAllianceMemberListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceMemberListReq, guildid_),
  };
  TCrossAllianceGetAllianceMemberListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceGetAllianceMemberListReq_descriptor_,
      TCrossAllianceGetAllianceMemberListReq::default_instance_,
      TCrossAllianceGetAllianceMemberListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceMemberListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceMemberListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceGetAllianceMemberListReq));
  TCrossAllianceGetAllianceMemberListRsp_descriptor_ = file->message_type(31);
  static const int TCrossAllianceGetAllianceMemberListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceMemberListRsp, guildinfo_),
  };
  TCrossAllianceGetAllianceMemberListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceGetAllianceMemberListRsp_descriptor_,
      TCrossAllianceGetAllianceMemberListRsp::default_instance_,
      TCrossAllianceGetAllianceMemberListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceMemberListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceMemberListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceGetAllianceMemberListRsp));
  TCrossAllianceGetAllianceApplyListRsp_descriptor_ = file->message_type(32);
  static const int TCrossAllianceGetAllianceApplyListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceApplyListRsp, arrapply_),
  };
  TCrossAllianceGetAllianceApplyListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceGetAllianceApplyListRsp_descriptor_,
      TCrossAllianceGetAllianceApplyListRsp::default_instance_,
      TCrossAllianceGetAllianceApplyListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceApplyListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceGetAllianceApplyListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceGetAllianceApplyListRsp));
  TCrossAllianceCreateAllianceReq_descriptor_ = file->message_type(33);
  static const int TCrossAllianceCreateAllianceReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceCreateAllianceReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceCreateAllianceReq, summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceCreateAllianceReq, bannerbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceCreateAllianceReq, bannerfigure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceCreateAllianceReq, bannername_),
  };
  TCrossAllianceCreateAllianceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceCreateAllianceReq_descriptor_,
      TCrossAllianceCreateAllianceReq::default_instance_,
      TCrossAllianceCreateAllianceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceCreateAllianceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceCreateAllianceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceCreateAllianceReq));
  TCrossAllianceApplyAllianceReq_descriptor_ = file->message_type(34);
  static const int TCrossAllianceApplyAllianceReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceApplyAllianceReq, allianceid_),
  };
  TCrossAllianceApplyAllianceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceApplyAllianceReq_descriptor_,
      TCrossAllianceApplyAllianceReq::default_instance_,
      TCrossAllianceApplyAllianceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceApplyAllianceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceApplyAllianceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceApplyAllianceReq));
  TCrossAllianceApplyAllianceRsp_descriptor_ = file->message_type(35);
  static const int TCrossAllianceApplyAllianceRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceApplyAllianceRsp, joinallianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceApplyAllianceRsp, applyallianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceApplyAllianceRsp, leavetime_),
  };
  TCrossAllianceApplyAllianceRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceApplyAllianceRsp_descriptor_,
      TCrossAllianceApplyAllianceRsp::default_instance_,
      TCrossAllianceApplyAllianceRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceApplyAllianceRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceApplyAllianceRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceApplyAllianceRsp));
  TCrossAllianceCancelApplyAllianceReq_descriptor_ = file->message_type(36);
  static const int TCrossAllianceCancelApplyAllianceReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceCancelApplyAllianceReq, allianceid_),
  };
  TCrossAllianceCancelApplyAllianceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceCancelApplyAllianceReq_descriptor_,
      TCrossAllianceCancelApplyAllianceReq::default_instance_,
      TCrossAllianceCancelApplyAllianceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceCancelApplyAllianceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceCancelApplyAllianceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceCancelApplyAllianceReq));
  TCrossAllianceExamineApplyReq_descriptor_ = file->message_type(37);
  static const int TCrossAllianceExamineApplyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceExamineApplyReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceExamineApplyReq, agree_),
  };
  TCrossAllianceExamineApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceExamineApplyReq_descriptor_,
      TCrossAllianceExamineApplyReq::default_instance_,
      TCrossAllianceExamineApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceExamineApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceExamineApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceExamineApplyReq));
  TCrossAllianceModifyInfoReq_descriptor_ = file->message_type(38);
  static const int TCrossAllianceModifyInfoReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceModifyInfoReq, bannername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceModifyInfoReq, bannerbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceModifyInfoReq, bannerfigure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceModifyInfoReq, summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceModifyInfoReq, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceModifyInfoReq, reviewmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceModifyInfoReq, guildlvlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceModifyInfoReq, qq_),
  };
  TCrossAllianceModifyInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceModifyInfoReq_descriptor_,
      TCrossAllianceModifyInfoReq::default_instance_,
      TCrossAllianceModifyInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceModifyInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceModifyInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceModifyInfoReq));
  TCrossAllianceChangeNameReq_descriptor_ = file->message_type(39);
  static const int TCrossAllianceChangeNameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceChangeNameReq, name_),
  };
  TCrossAllianceChangeNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceChangeNameReq_descriptor_,
      TCrossAllianceChangeNameReq::default_instance_,
      TCrossAllianceChangeNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceChangeNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceChangeNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceChangeNameReq));
  TCrossAllianceKickGuildReq_descriptor_ = file->message_type(40);
  static const int TCrossAllianceKickGuildReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceKickGuildReq, guildid_),
  };
  TCrossAllianceKickGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceKickGuildReq_descriptor_,
      TCrossAllianceKickGuildReq::default_instance_,
      TCrossAllianceKickGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceKickGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceKickGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceKickGuildReq));
  TCrossAllianceAppointPostReq_descriptor_ = file->message_type(41);
  static const int TCrossAllianceAppointPostReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceAppointPostReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceAppointPostReq, post_),
  };
  TCrossAllianceAppointPostReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceAppointPostReq_descriptor_,
      TCrossAllianceAppointPostReq::default_instance_,
      TCrossAllianceAppointPostReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceAppointPostReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceAppointPostReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceAppointPostReq));
  TCrossAllianceInitiateVoteReq_descriptor_ = file->message_type(42);
  static const int TCrossAllianceInitiateVoteReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceInitiateVoteReq, votetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceInitiateVoteReq, guildid_),
  };
  TCrossAllianceInitiateVoteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceInitiateVoteReq_descriptor_,
      TCrossAllianceInitiateVoteReq::default_instance_,
      TCrossAllianceInitiateVoteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceInitiateVoteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceInitiateVoteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceInitiateVoteReq));
  TCrossAllianceCancelVoteReq_descriptor_ = file->message_type(43);
  static const int TCrossAllianceCancelVoteReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceCancelVoteReq, voteid_),
  };
  TCrossAllianceCancelVoteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceCancelVoteReq_descriptor_,
      TCrossAllianceCancelVoteReq::default_instance_,
      TCrossAllianceCancelVoteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceCancelVoteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceCancelVoteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceCancelVoteReq));
  TCrossAllianceVoteReq_descriptor_ = file->message_type(44);
  static const int TCrossAllianceVoteReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceVoteReq, voteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceVoteReq, voteresult_),
  };
  TCrossAllianceVoteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceVoteReq_descriptor_,
      TCrossAllianceVoteReq::default_instance_,
      TCrossAllianceVoteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceVoteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceVoteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceVoteReq));
  TCrossAllianceUpgradeScienceReq_descriptor_ = file->message_type(45);
  static const int TCrossAllianceUpgradeScienceReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceUpgradeScienceReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceUpgradeScienceReq, level_),
  };
  TCrossAllianceUpgradeScienceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceUpgradeScienceReq_descriptor_,
      TCrossAllianceUpgradeScienceReq::default_instance_,
      TCrossAllianceUpgradeScienceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceUpgradeScienceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceUpgradeScienceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceUpgradeScienceReq));
  TAllianceInfoChange_descriptor_ = file->message_type(46);
  static const int TAllianceInfoChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceInfoChange, alliancedetailinfo_),
  };
  TAllianceInfoChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceInfoChange_descriptor_,
      TAllianceInfoChange::default_instance_,
      TAllianceInfoChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceInfoChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceInfoChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceInfoChange));
  TAllianceJoinNotify_descriptor_ = file->message_type(47);
  static const int TAllianceJoinNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceJoinNotify, allianceid_),
  };
  TAllianceJoinNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceJoinNotify_descriptor_,
      TAllianceJoinNotify::default_instance_,
      TAllianceJoinNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceJoinNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceJoinNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceJoinNotify));
  TAllianceLeaveNotify_descriptor_ = file->message_type(48);
  static const int TAllianceLeaveNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceLeaveNotify, allianceid_),
  };
  TAllianceLeaveNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAllianceLeaveNotify_descriptor_,
      TAllianceLeaveNotify::default_instance_,
      TAllianceLeaveNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceLeaveNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAllianceLeaveNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAllianceLeaveNotify));
  EAllianceTipType_descriptor_ = file->enum_type(0);
  EAllianceVoteType_descriptor_ = file->enum_type(1);
  EAlliancePost_descriptor_ = file->enum_type(2);
  EAllianceVoteResult_descriptor_ = file->enum_type(3);
  EAllianceResult_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fAlliance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceUserTaskType_descriptor_, &TAllianceUserTaskType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceUserTask_descriptor_, &TAllianceUserTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceUserPractice_descriptor_, &TAllianceUserPractice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceUserInfo_descriptor_, &TAllianceUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceTip_descriptor_, &TAllianceTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceSimpleInfo_descriptor_, &TAllianceSimpleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceSimpleInfoWithApplyStatus_descriptor_, &TAllianceSimpleInfoWithApplyStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceVoteInfo_descriptor_, &TAllianceVoteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceScience_descriptor_, &TAllianceScience::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceDetailInfo_descriptor_, &TAllianceDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceGuildUserMemberInfo_descriptor_, &TAllianceGuildUserMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceGuildMemberInfo_descriptor_, &TAllianceGuildMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceGuildMemberInfoWithUser_descriptor_, &TAllianceGuildMemberInfoWithUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceApplyGuildInfo_descriptor_, &TAllianceApplyGuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInnerAllianceGetServerTeamInfoRsp_descriptor_, &TInnerAllianceGetServerTeamInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInnerAllianceGetAllianceInfoRsp_descriptor_, &TInnerAllianceGetAllianceInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInnerAllianceRefreshTaskReq_descriptor_, &TInnerAllianceRefreshTaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInnerAllianceUpgradeTaskReq_descriptor_, &TInnerAllianceUpgradeTaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInnerAllianceUpgradeToLv6TaskReq_descriptor_, &TInnerAllianceUpgradeToLv6TaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInnerAllianceCommitTaskReq_descriptor_, &TInnerAllianceCommitTaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInnerAllianceCommitTaskRsp_descriptor_, &TInnerAllianceCommitTaskRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInnerAllianceReceiveTaskRewardReq_descriptor_, &TInnerAllianceReceiveTaskRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInnerAllianceReceiveTaskRewardRsp_descriptor_, &TInnerAllianceReceiveTaskRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInnerAllianceReceiveSignRewardRsp_descriptor_, &TInnerAllianceReceiveSignRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInnerAllianceUpgradePracticeReq_descriptor_, &TInnerAllianceUpgradePracticeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceUserInfoChange_descriptor_, &TAllianceUserInfoChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceGetAllianceListReq_descriptor_, &TCrossAllianceGetAllianceListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceGetAllianceListRsp_descriptor_, &TCrossAllianceGetAllianceListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceSearchAllianceReq_descriptor_, &TCrossAllianceSearchAllianceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceSearchAllianceRsp_descriptor_, &TCrossAllianceSearchAllianceRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceGetAllianceMemberListReq_descriptor_, &TCrossAllianceGetAllianceMemberListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceGetAllianceMemberListRsp_descriptor_, &TCrossAllianceGetAllianceMemberListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceGetAllianceApplyListRsp_descriptor_, &TCrossAllianceGetAllianceApplyListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceCreateAllianceReq_descriptor_, &TCrossAllianceCreateAllianceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceApplyAllianceReq_descriptor_, &TCrossAllianceApplyAllianceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceApplyAllianceRsp_descriptor_, &TCrossAllianceApplyAllianceRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceCancelApplyAllianceReq_descriptor_, &TCrossAllianceCancelApplyAllianceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceExamineApplyReq_descriptor_, &TCrossAllianceExamineApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceModifyInfoReq_descriptor_, &TCrossAllianceModifyInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceChangeNameReq_descriptor_, &TCrossAllianceChangeNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceKickGuildReq_descriptor_, &TCrossAllianceKickGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceAppointPostReq_descriptor_, &TCrossAllianceAppointPostReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceInitiateVoteReq_descriptor_, &TCrossAllianceInitiateVoteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceCancelVoteReq_descriptor_, &TCrossAllianceCancelVoteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceVoteReq_descriptor_, &TCrossAllianceVoteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceUpgradeScienceReq_descriptor_, &TCrossAllianceUpgradeScienceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceInfoChange_descriptor_, &TAllianceInfoChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceJoinNotify_descriptor_, &TAllianceJoinNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAllianceLeaveNotify_descriptor_, &TAllianceLeaveNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fAlliance_2eproto() {
  delete TAllianceUserTaskType::default_instance_;
  delete TAllianceUserTaskType_reflection_;
  delete TAllianceUserTask::default_instance_;
  delete TAllianceUserTask_reflection_;
  delete TAllianceUserPractice::default_instance_;
  delete TAllianceUserPractice_reflection_;
  delete TAllianceUserInfo::default_instance_;
  delete TAllianceUserInfo_reflection_;
  delete TAllianceTip::default_instance_;
  delete TAllianceTip_reflection_;
  delete TAllianceSimpleInfo::default_instance_;
  delete TAllianceSimpleInfo_reflection_;
  delete TAllianceSimpleInfoWithApplyStatus::default_instance_;
  delete TAllianceSimpleInfoWithApplyStatus_reflection_;
  delete TAllianceVoteInfo::default_instance_;
  delete TAllianceVoteInfo_reflection_;
  delete TAllianceScience::default_instance_;
  delete TAllianceScience_reflection_;
  delete TAllianceDetailInfo::default_instance_;
  delete TAllianceDetailInfo_reflection_;
  delete TAllianceGuildUserMemberInfo::default_instance_;
  delete TAllianceGuildUserMemberInfo_reflection_;
  delete TAllianceGuildMemberInfo::default_instance_;
  delete TAllianceGuildMemberInfo_reflection_;
  delete TAllianceGuildMemberInfoWithUser::default_instance_;
  delete TAllianceGuildMemberInfoWithUser_reflection_;
  delete TAllianceApplyGuildInfo::default_instance_;
  delete TAllianceApplyGuildInfo_reflection_;
  delete TInnerAllianceGetServerTeamInfoRsp::default_instance_;
  delete TInnerAllianceGetServerTeamInfoRsp_reflection_;
  delete TInnerAllianceGetAllianceInfoRsp::default_instance_;
  delete TInnerAllianceGetAllianceInfoRsp_reflection_;
  delete TInnerAllianceRefreshTaskReq::default_instance_;
  delete TInnerAllianceRefreshTaskReq_reflection_;
  delete TInnerAllianceUpgradeTaskReq::default_instance_;
  delete TInnerAllianceUpgradeTaskReq_reflection_;
  delete TInnerAllianceUpgradeToLv6TaskReq::default_instance_;
  delete TInnerAllianceUpgradeToLv6TaskReq_reflection_;
  delete TInnerAllianceCommitTaskReq::default_instance_;
  delete TInnerAllianceCommitTaskReq_reflection_;
  delete TInnerAllianceCommitTaskRsp::default_instance_;
  delete TInnerAllianceCommitTaskRsp_reflection_;
  delete TInnerAllianceReceiveTaskRewardReq::default_instance_;
  delete TInnerAllianceReceiveTaskRewardReq_reflection_;
  delete TInnerAllianceReceiveTaskRewardRsp::default_instance_;
  delete TInnerAllianceReceiveTaskRewardRsp_reflection_;
  delete TInnerAllianceReceiveSignRewardRsp::default_instance_;
  delete TInnerAllianceReceiveSignRewardRsp_reflection_;
  delete TInnerAllianceUpgradePracticeReq::default_instance_;
  delete TInnerAllianceUpgradePracticeReq_reflection_;
  delete TAllianceUserInfoChange::default_instance_;
  delete TAllianceUserInfoChange_reflection_;
  delete TCrossAllianceGetAllianceListReq::default_instance_;
  delete TCrossAllianceGetAllianceListReq_reflection_;
  delete TCrossAllianceGetAllianceListRsp::default_instance_;
  delete TCrossAllianceGetAllianceListRsp_reflection_;
  delete TCrossAllianceSearchAllianceReq::default_instance_;
  delete TCrossAllianceSearchAllianceReq_reflection_;
  delete TCrossAllianceSearchAllianceRsp::default_instance_;
  delete TCrossAllianceSearchAllianceRsp_reflection_;
  delete TCrossAllianceGetAllianceMemberListReq::default_instance_;
  delete TCrossAllianceGetAllianceMemberListReq_reflection_;
  delete TCrossAllianceGetAllianceMemberListRsp::default_instance_;
  delete TCrossAllianceGetAllianceMemberListRsp_reflection_;
  delete TCrossAllianceGetAllianceApplyListRsp::default_instance_;
  delete TCrossAllianceGetAllianceApplyListRsp_reflection_;
  delete TCrossAllianceCreateAllianceReq::default_instance_;
  delete TCrossAllianceCreateAllianceReq_reflection_;
  delete TCrossAllianceApplyAllianceReq::default_instance_;
  delete TCrossAllianceApplyAllianceReq_reflection_;
  delete TCrossAllianceApplyAllianceRsp::default_instance_;
  delete TCrossAllianceApplyAllianceRsp_reflection_;
  delete TCrossAllianceCancelApplyAllianceReq::default_instance_;
  delete TCrossAllianceCancelApplyAllianceReq_reflection_;
  delete TCrossAllianceExamineApplyReq::default_instance_;
  delete TCrossAllianceExamineApplyReq_reflection_;
  delete TCrossAllianceModifyInfoReq::default_instance_;
  delete TCrossAllianceModifyInfoReq_reflection_;
  delete TCrossAllianceChangeNameReq::default_instance_;
  delete TCrossAllianceChangeNameReq_reflection_;
  delete TCrossAllianceKickGuildReq::default_instance_;
  delete TCrossAllianceKickGuildReq_reflection_;
  delete TCrossAllianceAppointPostReq::default_instance_;
  delete TCrossAllianceAppointPostReq_reflection_;
  delete TCrossAllianceInitiateVoteReq::default_instance_;
  delete TCrossAllianceInitiateVoteReq_reflection_;
  delete TCrossAllianceCancelVoteReq::default_instance_;
  delete TCrossAllianceCancelVoteReq_reflection_;
  delete TCrossAllianceVoteReq::default_instance_;
  delete TCrossAllianceVoteReq_reflection_;
  delete TCrossAllianceUpgradeScienceReq::default_instance_;
  delete TCrossAllianceUpgradeScienceReq_reflection_;
  delete TAllianceInfoChange::default_instance_;
  delete TAllianceInfoChange_reflection_;
  delete TAllianceJoinNotify::default_instance_;
  delete TAllianceJoinNotify_reflection_;
  delete TAllianceLeaveNotify::default_instance_;
  delete TAllianceLeaveNotify_reflection_;
}

void protobuf_AddDesc_net_2fAlliance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fGuild_2eproto();
  ::pb::protobuf_AddDesc_net_2fGuildUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022net/Alliance.proto\022\002pb\032\016net/User.proto"
    "\032\026net/CommonReward.proto\032\017net/Guild.prot"
    "o\032\023net/GuildUser.proto\"6\n\025TAllianceUserT"
    "askType\022\020\n\010TaskType\030\001 \001(\r\022\013\n\003Num\030\002 \001(\r\"7"
    "\n\021TAllianceUserTask\022\016\n\006TaskId\030\001 \001(\r\022\022\n\nC"
    "ommitTime\030\002 \001(\004\"4\n\025TAllianceUserPractice"
    "\022\014\n\004Type\030\001 \001(\r\022\r\n\005Level\030\002 \001(\r\"\203\002\n\021TAllia"
    "nceUserInfo\022\026\n\016TaskRefreshNum\030\001 \001(\r\022\026\n\016T"
    "askUpgradeNum\030\002 \001(\r\0222\n\017ArrTaskTypeInfo\030\003"
    " \003(\0132\031.pb.TAllianceUserTaskType\022*\n\013ArrTa"
    "skInfo\030\004 \003(\0132\025.pb.TAllianceUserTask\022\026\n\016S"
    "ignRewardTime\030\005 \001(\004\022\026\n\016TaskRewardTime\030\006 "
    "\003(\004\022.\n\013ArrPractice\030\007 \003(\0132\031.pb.TAllianceU"
    "serPractice\"R\n\014TAllianceTip\022\014\n\004Time\030\001 \001("
    "\004\022\"\n\004Type\030\002 \001(\0162\024.pb.EAllianceTipType\022\020\n"
    "\010ParamArr\030\003 \003(\t\"\275\003\n\023TAllianceSimpleInfo\022"
    "\022\n\nAllianceId\030\001 \001(\004\022\014\n\004Name\030\002 \001(\t\022\022\n\nBan"
    "nerName\030\003 \001(\t\022\022\n\nBannerBase\030\004 \001(\r\022\024\n\014Ban"
    "nerFigure\030\005 \001(\r\022\r\n\005Level\030\006 \001(\r\022\013\n\003Exp\030\007 "
    "\001(\r\022\026\n\016GuildMemberNum\030\010 \001(\r\022\024\n\014GuildUser"
    "Num\030\t \001(\r\022#\n\nReviewMode\030\n \001(\0162\017.pb.ERevi"
    "ewMode\022\024\n\014GuildLvLimit\030\013 \001(\r\022\017\n\007Summary\030"
    "\014 \001(\t\022\n\n\002QQ\030\r \001(\t\022\022\n\nCreateTime\030\016 \001(\004\022\027\n"
    "\017TotalFightForce\030\017 \001(\004\022+\n\016LeaderUserInfo"
    "\030\020 \001(\0132\023.pb.TUserSimpleInfo\0224\n\016ArrGuildM"
    "ember\030\021 \003(\0132\034.pb.TAllianceGuildMemberInf"
    "o\022\024\n\014AddMemberNum\030\022 \001(\r\"h\n\"TAllianceSimp"
    "leInfoWithApplyStatus\0223\n\022AllianceSimpleI"
    "nfo\030\001 \001(\0132\027.pb.TAllianceSimpleInfo\022\r\n\005Ap"
    "ply\030\002 \001(\010\"\300\002\n\021TAllianceVoteInfo\022\016\n\006VoteI"
    "d\030\001 \001(\004\022,\n\017SponsorUserInfo\030\002 \001(\0132\023.pb.TU"
    "serSimpleInfo\022\021\n\tStartTime\030\003 \001(\004\022\'\n\010Vote"
    "Type\030\004 \001(\0162\025.pb.EAllianceVoteType\022(\n\013Aim"
    "UserInfo\030\005 \001(\0132\023.pb.TUserSimpleInfo\022\020\n\010A"
    "greeNum\030\006 \001(\r\022\022\n\nAgainstNum\030\007 \001(\r\022#\n\006Res"
    "ult\030\010 \001(\0162\023.pb.EAllianceResult\022\021\n\tCloseT"
    "ime\030\t \001(\004\022)\n\010SelfVote\030\n \001(\0162\027.pb.EAllian"
    "ceVoteResult\"-\n\020TAllianceScience\022\n\n\002Id\030\001"
    " \001(\r\022\r\n\005Level\030\002 \001(\r\"\215\003\n\023TAllianceDetailI"
    "nfo\0223\n\022AllianceSimpleInfo\030\001 \001(\0132\027.pb.TAl"
    "lianceSimpleInfo\022\023\n\013WeekStartLv\030\002 \001(\r\022\025\n"
    "\rWeekTaskScore\030\003 \001(\004\022\016\n\006Notice\030\004 \001(\t\022 \n\006"
    "ArrTip\030\005 \003(\0132\020.pb.TAllianceTip\0227\n\032ArrSig"
    "nGuildLeaderUserInfo\030\006 \003(\0132\023.pb.TUserSim"
    "pleInfo\022*\n\013ArrVoteInfo\030\007 \003(\0132\025.pb.TAllia"
    "nceVoteInfo\022\020\n\010ApplyNum\030\010 \001(\r\022\027\n\017LastImp"
    "eachTime\030\t \001(\004\022\023\n\013MaterialNum\030\n \001(\004\022\024\n\014D"
    "ayDonateNum\030\013 \001(\r\022(\n\nArrScience\030\014 \003(\0132\024."
    "pb.TAllianceScience\"\325\001\n\034TAllianceGuildUs"
    "erMemberInfo\022%\n\010UserInfo\030\001 \001(\0132\023.pb.TUse"
    "rSimpleInfo\022\037\n\007RPGPost\030\002 \001(\0162\016.pb.EGuild"
    "Post\022\023\n\013TotalDonate\030\003 \001(\004\022\025\n\rWeekTaskSco"
    "re\030\004 \001(\004\022\025\n\rDayTaskStatus\030\005 \001(\r\022\024\n\014Commi"
    "tTaskId\030\006 \001(\r\022\024\n\014OnlineStatus\030\007 \001(\r\"\362\001\n\030"
    "TAllianceGuildMemberInfo\022\020\n\010ServerId\030\001 \001"
    "(\t\022\017\n\007GuildId\030\002 \001(\004\022\014\n\004Name\030\003 \001(\t\022\022\n\nBan"
    "nerName\030\004 \001(\t\022\022\n\nBannerBase\030\005 \001(\r\022\r\n\005Lev"
    "el\030\006 \001(\r\022\022\n\nFightForce\030\007 \001(\004\022\021\n\tMemberNu"
    "m\030\010 \001(\r\022\021\n\tLeaderUid\030\t \001(\004\022\023\n\013LeaderUnam"
    "e\030\n \001(\t\022\037\n\004Post\030\013 \001(\0162\021.pb.EAlliancePost"
    "\"\206\001\n TAllianceGuildMemberInfoWithUser\022/\n"
    "\tGuildInfo\030\001 \001(\0132\034.pb.TAllianceGuildMemb"
    "erInfo\0221\n\007ArrUser\030\002 \003(\0132 .pb.TAllianceGu"
    "ildUserMemberInfo\"\206\001\n\027TAllianceApplyGuil"
    "dInfo\022+\n\016LeaderUserInfo\030\001 \001(\0132\023.pb.TUser"
    "SimpleInfo\022\021\n\tMemberNum\030\002 \001(\r\022\027\n\017GuildFi"
    "ghtForce\030\003 \001(\004\022\022\n\nGuildLevel\030\004 \001(\r\"I\n\"TI"
    "nnerAllianceGetServerTeamInfoRsp\022\016\n\006Team"
    "Id\030\001 \001(\r\022\023\n\013NeedOpenDay\030\002 \001(\r\"\200\001\n TInner"
    "AllianceGetAllianceInfoRsp\022\'\n\010UserInfo\030\001"
    " \001(\0132\025.pb.TAllianceUserInfo\0223\n\022AllianceD"
    "etailInfo\030\002 \001(\0132\027.pb.TAllianceDetailInfo"
    "\".\n\034TInnerAllianceRefreshTaskReq\022\016\n\006Task"
    "Id\030\001 \001(\r\".\n\034TInnerAllianceUpgradeTaskReq"
    "\022\016\n\006TaskId\030\001 \001(\r\"3\n!TInnerAllianceUpgrad"
    "eToLv6TaskReq\022\016\n\006TaskId\030\001 \001(\r\"-\n\033TInnerA"
    "llianceCommitTaskReq\022\016\n\006TaskId\030\001 \001(\r\"E\n\033"
    "TInnerAllianceCommitTaskRsp\022&\n\013RewardArr"
    "ay\030\001 \003(\0132\021.pb.TCommonReward\"0\n\"TInnerAll"
    "ianceReceiveTaskRewardReq\022\n\n\002Id\030\001 \001(\r\"L\n"
    "\"TInnerAllianceReceiveTaskRewardRsp\022&\n\013R"
    "ewardArray\030\001 \003(\0132\021.pb.TCommonReward\"L\n\"T"
    "InnerAllianceReceiveSignRewardRsp\022&\n\013Rew"
    "ardArray\030\001 \003(\0132\021.pb.TCommonReward\"0\n TIn"
    "nerAllianceUpgradePracticeReq\022\014\n\004Type\030\001 "
    "\001(\r\"B\n\027TAllianceUserInfoChange\022\'\n\010UserIn"
    "fo\030\001 \001(\0132\025.pb.TAllianceUserInfo\"W\n TCros"
    "sAllianceGetAllianceListReq\022\016\n\006Offset\030\001 "
    "\001(\r\022\r\n\005Limit\030\002 \001(\r\022\024\n\014OnlyCanApply\030\003 \001(\010"
    "\"c\n TCrossAllianceGetAllianceListRsp\022\?\n\017"
    "ArrAllianceInfo\030\001 \003(\0132&.pb.TAllianceSimp"
    "leInfoWithApplyStatus\"/\n\037TCrossAllianceS"
    "earchAllianceReq\022\014\n\004Name\030\001 \001(\t\"h\n\037TCross"
    "AllianceSearchAllianceRsp\022E\n\025ArrAlliance"
    "SimpleInfo\030\001 \003(\0132&.pb.TAllianceSimpleInf"
    "oWithApplyStatus\"9\n&TCrossAllianceGetAll"
    "ianceMemberListReq\022\017\n\007GuildId\030\001 \001(\004\"a\n&T"
    "CrossAllianceGetAllianceMemberListRsp\0227\n"
    "\tGuildInfo\030\001 \003(\0132$.pb.TAllianceGuildMemb"
    "erInfoWithUser\"V\n%TCrossAllianceGetAllia"
    "nceApplyListRsp\022-\n\010ArrApply\030\001 \003(\0132\033.pb.T"
    "AllianceApplyGuildInfo\"~\n\037TCrossAlliance"
    "CreateAllianceReq\022\014\n\004Name\030\001 \001(\t\022\017\n\007Summa"
    "ry\030\002 \001(\t\022\022\n\nBannerBase\030\003 \001(\r\022\024\n\014BannerFi"
    "gure\030\004 \001(\r\022\022\n\nBannerName\030\005 \001(\t\"4\n\036TCross"
    "AllianceApplyAllianceReq\022\022\n\nAllianceId\030\001"
    " \001(\004\"d\n\036TCrossAllianceApplyAllianceRsp\022\026"
    "\n\016JoinAllianceId\030\001 \001(\004\022\027\n\017ApplyAllianceI"
    "d\030\002 \003(\004\022\021\n\tLeaveTime\030\003 \001(\004\":\n$TCrossAlli"
    "anceCancelApplyAllianceReq\022\022\n\nAllianceId"
    "\030\001 \001(\004\"\?\n\035TCrossAllianceExamineApplyReq\022"
    "\017\n\007GuildId\030\001 \001(\004\022\r\n\005Agree\030\002 \001(\010\"\303\001\n\033TCro"
    "ssAllianceModifyInfoReq\022\022\n\nBannerName\030\001 "
    "\001(\t\022\022\n\nBannerBase\030\002 \001(\r\022\024\n\014BannerFigure\030"
    "\003 \001(\r\022\017\n\007Summary\030\004 \001(\t\022\016\n\006Notice\030\005 \001(\t\022#"
    "\n\nReviewMode\030\006 \001(\0162\017.pb.EReviewMode\022\024\n\014G"
    "uildLvLimit\030\007 \001(\r\022\n\n\002QQ\030\010 \001(\t\"+\n\033TCrossA"
    "llianceChangeNameReq\022\014\n\004Name\030\001 \001(\t\"-\n\032TC"
    "rossAllianceKickGuildReq\022\017\n\007GuildId\030\001 \001("
    "\004\"P\n\034TCrossAllianceAppointPostReq\022\017\n\007Gui"
    "ldId\030\001 \001(\004\022\037\n\004Post\030\002 \001(\0162\021.pb.EAllianceP"
    "ost\"Y\n\035TCrossAllianceInitiateVoteReq\022\'\n\010"
    "VoteType\030\001 \001(\0162\025.pb.EAllianceVoteType\022\017\n"
    "\007GuildId\030\002 \001(\004\"-\n\033TCrossAllianceCancelVo"
    "teReq\022\016\n\006VoteId\030\001 \001(\004\"T\n\025TCrossAllianceV"
    "oteReq\022\016\n\006VoteId\030\001 \001(\004\022+\n\nVoteResult\030\002 \001"
    "(\0162\027.pb.EAllianceVoteResult\"<\n\037TCrossAll"
    "ianceUpgradeScienceReq\022\n\n\002Id\030\001 \001(\r\022\r\n\005Le"
    "vel\030\002 \001(\r\"J\n\023TAllianceInfoChange\0223\n\022Alli"
    "anceDetailInfo\030\001 \001(\0132\027.pb.TAllianceDetai"
    "lInfo\")\n\023TAllianceJoinNotify\022\022\n\nAlliance"
    "Id\030\001 \001(\004\"*\n\024TAllianceLeaveNotify\022\022\n\nAlli"
    "anceId\030\001 \001(\004*\276\003\n\020EAllianceTipType\022\033\n\027ALL"
    "IANCE_TIP_GUILD_JOIN\020\001\022\034\n\030ALLIANCE_TIP_G"
    "UILD_LEAVE\020\002\022\"\n\036ALLIANCE_TIP_VOTE_KICK_S"
    "UCCESS\020\003\022!\n\035ALLIANCE_TIP_VOTE_KICK_FAILE"
    "D\020\004\022%\n!ALLIANCE_TIP_VOTE_IMPEACH_SUCCESS"
    "\020\005\022$\n ALLIANCE_TIP_VOTE_IMPEACH_FAILED\020\006"
    "\022 \n\034ALLIANCE_TIP_TRANSFER_LEADER\020\007\022\034\n\030AL"
    "LIANCE_TIP_CHANGE_NAME\020\010\022\036\n\032ALLIANCE_TIP"
    "_INITIATE_VOTE\020\t\022\036\n\032ALLIANCE_TIP_COMPLET"
    "E_SIGN\020\n\022\034\n\030ALLIANCE_TIP_COMMIT_TASK\020\013\022\036"
    "\n\032ALLIANCE_TIP_COMMIT_TASK_2\020\014\022\035\n\031ALLIAN"
    "CE_TIP_ALLYWAR_RANK\020\r*V\n\021EAllianceVoteTy"
    "pe\022\036\n\032ALLIANCE_VOTE_TYPE_IMPEACH\020\001\022!\n\035AL"
    "LIANCE_VOTE_TYPE_KICK_GUILD\020\002*u\n\rEAllian"
    "cePost\022\026\n\022ALLIANCE_POST_NONE\020\000\022\030\n\024ALLIAN"
    "CE_POST_MEMBER\020\001\022\030\n\024ALLIANCE_POST_LEADER"
    "\020\002\022\030\n\024ALLIANCE_POST_DEPUTY\020\003*I\n\023EAllianc"
    "eVoteResult\022\027\n\023ALLIANCE_VOTE_AGREE\020\001\022\031\n\025"
    "ALLIANCE_POST_AGAINST\020\002*H\n\017EAllianceResu"
    "lt\022\033\n\027ALLIANCE_RESULT_SUCCESS\020\001\022\030\n\024ALLIA"
    "NCE_RESULT_FAIL\020\002", 6097);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Alliance.proto", &protobuf_RegisterTypes);
  TAllianceUserTaskType::default_instance_ = new TAllianceUserTaskType();
  TAllianceUserTask::default_instance_ = new TAllianceUserTask();
  TAllianceUserPractice::default_instance_ = new TAllianceUserPractice();
  TAllianceUserInfo::default_instance_ = new TAllianceUserInfo();
  TAllianceTip::default_instance_ = new TAllianceTip();
  TAllianceSimpleInfo::default_instance_ = new TAllianceSimpleInfo();
  TAllianceSimpleInfoWithApplyStatus::default_instance_ = new TAllianceSimpleInfoWithApplyStatus();
  TAllianceVoteInfo::default_instance_ = new TAllianceVoteInfo();
  TAllianceScience::default_instance_ = new TAllianceScience();
  TAllianceDetailInfo::default_instance_ = new TAllianceDetailInfo();
  TAllianceGuildUserMemberInfo::default_instance_ = new TAllianceGuildUserMemberInfo();
  TAllianceGuildMemberInfo::default_instance_ = new TAllianceGuildMemberInfo();
  TAllianceGuildMemberInfoWithUser::default_instance_ = new TAllianceGuildMemberInfoWithUser();
  TAllianceApplyGuildInfo::default_instance_ = new TAllianceApplyGuildInfo();
  TInnerAllianceGetServerTeamInfoRsp::default_instance_ = new TInnerAllianceGetServerTeamInfoRsp();
  TInnerAllianceGetAllianceInfoRsp::default_instance_ = new TInnerAllianceGetAllianceInfoRsp();
  TInnerAllianceRefreshTaskReq::default_instance_ = new TInnerAllianceRefreshTaskReq();
  TInnerAllianceUpgradeTaskReq::default_instance_ = new TInnerAllianceUpgradeTaskReq();
  TInnerAllianceUpgradeToLv6TaskReq::default_instance_ = new TInnerAllianceUpgradeToLv6TaskReq();
  TInnerAllianceCommitTaskReq::default_instance_ = new TInnerAllianceCommitTaskReq();
  TInnerAllianceCommitTaskRsp::default_instance_ = new TInnerAllianceCommitTaskRsp();
  TInnerAllianceReceiveTaskRewardReq::default_instance_ = new TInnerAllianceReceiveTaskRewardReq();
  TInnerAllianceReceiveTaskRewardRsp::default_instance_ = new TInnerAllianceReceiveTaskRewardRsp();
  TInnerAllianceReceiveSignRewardRsp::default_instance_ = new TInnerAllianceReceiveSignRewardRsp();
  TInnerAllianceUpgradePracticeReq::default_instance_ = new TInnerAllianceUpgradePracticeReq();
  TAllianceUserInfoChange::default_instance_ = new TAllianceUserInfoChange();
  TCrossAllianceGetAllianceListReq::default_instance_ = new TCrossAllianceGetAllianceListReq();
  TCrossAllianceGetAllianceListRsp::default_instance_ = new TCrossAllianceGetAllianceListRsp();
  TCrossAllianceSearchAllianceReq::default_instance_ = new TCrossAllianceSearchAllianceReq();
  TCrossAllianceSearchAllianceRsp::default_instance_ = new TCrossAllianceSearchAllianceRsp();
  TCrossAllianceGetAllianceMemberListReq::default_instance_ = new TCrossAllianceGetAllianceMemberListReq();
  TCrossAllianceGetAllianceMemberListRsp::default_instance_ = new TCrossAllianceGetAllianceMemberListRsp();
  TCrossAllianceGetAllianceApplyListRsp::default_instance_ = new TCrossAllianceGetAllianceApplyListRsp();
  TCrossAllianceCreateAllianceReq::default_instance_ = new TCrossAllianceCreateAllianceReq();
  TCrossAllianceApplyAllianceReq::default_instance_ = new TCrossAllianceApplyAllianceReq();
  TCrossAllianceApplyAllianceRsp::default_instance_ = new TCrossAllianceApplyAllianceRsp();
  TCrossAllianceCancelApplyAllianceReq::default_instance_ = new TCrossAllianceCancelApplyAllianceReq();
  TCrossAllianceExamineApplyReq::default_instance_ = new TCrossAllianceExamineApplyReq();
  TCrossAllianceModifyInfoReq::default_instance_ = new TCrossAllianceModifyInfoReq();
  TCrossAllianceChangeNameReq::default_instance_ = new TCrossAllianceChangeNameReq();
  TCrossAllianceKickGuildReq::default_instance_ = new TCrossAllianceKickGuildReq();
  TCrossAllianceAppointPostReq::default_instance_ = new TCrossAllianceAppointPostReq();
  TCrossAllianceInitiateVoteReq::default_instance_ = new TCrossAllianceInitiateVoteReq();
  TCrossAllianceCancelVoteReq::default_instance_ = new TCrossAllianceCancelVoteReq();
  TCrossAllianceVoteReq::default_instance_ = new TCrossAllianceVoteReq();
  TCrossAllianceUpgradeScienceReq::default_instance_ = new TCrossAllianceUpgradeScienceReq();
  TAllianceInfoChange::default_instance_ = new TAllianceInfoChange();
  TAllianceJoinNotify::default_instance_ = new TAllianceJoinNotify();
  TAllianceLeaveNotify::default_instance_ = new TAllianceLeaveNotify();
  TAllianceUserTaskType::default_instance_->InitAsDefaultInstance();
  TAllianceUserTask::default_instance_->InitAsDefaultInstance();
  TAllianceUserPractice::default_instance_->InitAsDefaultInstance();
  TAllianceUserInfo::default_instance_->InitAsDefaultInstance();
  TAllianceTip::default_instance_->InitAsDefaultInstance();
  TAllianceSimpleInfo::default_instance_->InitAsDefaultInstance();
  TAllianceSimpleInfoWithApplyStatus::default_instance_->InitAsDefaultInstance();
  TAllianceVoteInfo::default_instance_->InitAsDefaultInstance();
  TAllianceScience::default_instance_->InitAsDefaultInstance();
  TAllianceDetailInfo::default_instance_->InitAsDefaultInstance();
  TAllianceGuildUserMemberInfo::default_instance_->InitAsDefaultInstance();
  TAllianceGuildMemberInfo::default_instance_->InitAsDefaultInstance();
  TAllianceGuildMemberInfoWithUser::default_instance_->InitAsDefaultInstance();
  TAllianceApplyGuildInfo::default_instance_->InitAsDefaultInstance();
  TInnerAllianceGetServerTeamInfoRsp::default_instance_->InitAsDefaultInstance();
  TInnerAllianceGetAllianceInfoRsp::default_instance_->InitAsDefaultInstance();
  TInnerAllianceRefreshTaskReq::default_instance_->InitAsDefaultInstance();
  TInnerAllianceUpgradeTaskReq::default_instance_->InitAsDefaultInstance();
  TInnerAllianceUpgradeToLv6TaskReq::default_instance_->InitAsDefaultInstance();
  TInnerAllianceCommitTaskReq::default_instance_->InitAsDefaultInstance();
  TInnerAllianceCommitTaskRsp::default_instance_->InitAsDefaultInstance();
  TInnerAllianceReceiveTaskRewardReq::default_instance_->InitAsDefaultInstance();
  TInnerAllianceReceiveTaskRewardRsp::default_instance_->InitAsDefaultInstance();
  TInnerAllianceReceiveSignRewardRsp::default_instance_->InitAsDefaultInstance();
  TInnerAllianceUpgradePracticeReq::default_instance_->InitAsDefaultInstance();
  TAllianceUserInfoChange::default_instance_->InitAsDefaultInstance();
  TCrossAllianceGetAllianceListReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceGetAllianceListRsp::default_instance_->InitAsDefaultInstance();
  TCrossAllianceSearchAllianceReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceSearchAllianceRsp::default_instance_->InitAsDefaultInstance();
  TCrossAllianceGetAllianceMemberListReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceGetAllianceMemberListRsp::default_instance_->InitAsDefaultInstance();
  TCrossAllianceGetAllianceApplyListRsp::default_instance_->InitAsDefaultInstance();
  TCrossAllianceCreateAllianceReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceApplyAllianceReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceApplyAllianceRsp::default_instance_->InitAsDefaultInstance();
  TCrossAllianceCancelApplyAllianceReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceExamineApplyReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceModifyInfoReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceChangeNameReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceKickGuildReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceAppointPostReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceInitiateVoteReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceCancelVoteReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceVoteReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceUpgradeScienceReq::default_instance_->InitAsDefaultInstance();
  TAllianceInfoChange::default_instance_->InitAsDefaultInstance();
  TAllianceJoinNotify::default_instance_->InitAsDefaultInstance();
  TAllianceLeaveNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fAlliance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fAlliance_2eproto {
  StaticDescriptorInitializer_net_2fAlliance_2eproto() {
    protobuf_AddDesc_net_2fAlliance_2eproto();
  }
} static_descriptor_initializer_net_2fAlliance_2eproto_;
const ::google::protobuf::EnumDescriptor* EAllianceTipType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAllianceTipType_descriptor_;
}
bool EAllianceTipType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAllianceVoteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAllianceVoteType_descriptor_;
}
bool EAllianceVoteType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAlliancePost_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAlliancePost_descriptor_;
}
bool EAlliancePost_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAllianceVoteResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAllianceVoteResult_descriptor_;
}
bool EAllianceVoteResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAllianceResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAllianceResult_descriptor_;
}
bool EAllianceResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceUserTaskType::kTaskTypeFieldNumber;
const int TAllianceUserTaskType::kNumFieldNumber;
#endif  // !_MSC_VER

TAllianceUserTaskType::TAllianceUserTaskType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceUserTaskType)
}

void TAllianceUserTaskType::InitAsDefaultInstance() {
}

TAllianceUserTaskType::TAllianceUserTaskType(const TAllianceUserTaskType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceUserTaskType)
}

void TAllianceUserTaskType::SharedCtor() {
  _cached_size_ = 0;
  tasktype_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceUserTaskType::~TAllianceUserTaskType() {
  // @@protoc_insertion_point(destructor:pb.TAllianceUserTaskType)
  SharedDtor();
}

void TAllianceUserTaskType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAllianceUserTaskType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceUserTaskType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceUserTaskType_descriptor_;
}

const TAllianceUserTaskType& TAllianceUserTaskType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceUserTaskType* TAllianceUserTaskType::default_instance_ = NULL;

TAllianceUserTaskType* TAllianceUserTaskType::New() const {
  return new TAllianceUserTaskType;
}

void TAllianceUserTaskType::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAllianceUserTaskType*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tasktype_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceUserTaskType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceUserTaskType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceUserTaskType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceUserTaskType)
  return false;
#undef DO_
}

void TAllianceUserTaskType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceUserTaskType)
  // optional uint32 TaskType = 1;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tasktype(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceUserTaskType)
}

::google::protobuf::uint8* TAllianceUserTaskType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceUserTaskType)
  // optional uint32 TaskType = 1;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tasktype(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceUserTaskType)
  return target;
}

int TAllianceUserTaskType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskType = 1;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasktype());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceUserTaskType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceUserTaskType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceUserTaskType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceUserTaskType::MergeFrom(const TAllianceUserTaskType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceUserTaskType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceUserTaskType::CopyFrom(const TAllianceUserTaskType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceUserTaskType::IsInitialized() const {

  return true;
}

void TAllianceUserTaskType::Swap(TAllianceUserTaskType* other) {
  if (other != this) {
    std::swap(tasktype_, other->tasktype_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceUserTaskType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceUserTaskType_descriptor_;
  metadata.reflection = TAllianceUserTaskType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceUserTask::kTaskIdFieldNumber;
const int TAllianceUserTask::kCommitTimeFieldNumber;
#endif  // !_MSC_VER

TAllianceUserTask::TAllianceUserTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceUserTask)
}

void TAllianceUserTask::InitAsDefaultInstance() {
}

TAllianceUserTask::TAllianceUserTask(const TAllianceUserTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceUserTask)
}

void TAllianceUserTask::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  committime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceUserTask::~TAllianceUserTask() {
  // @@protoc_insertion_point(destructor:pb.TAllianceUserTask)
  SharedDtor();
}

void TAllianceUserTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAllianceUserTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceUserTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceUserTask_descriptor_;
}

const TAllianceUserTask& TAllianceUserTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceUserTask* TAllianceUserTask::default_instance_ = NULL;

TAllianceUserTask* TAllianceUserTask::New() const {
  return new TAllianceUserTask;
}

void TAllianceUserTask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAllianceUserTask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(committime_, taskid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceUserTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceUserTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CommitTime;
        break;
      }

      // optional uint64 CommitTime = 2;
      case 2: {
        if (tag == 16) {
         parse_CommitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &committime_)));
          set_has_committime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceUserTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceUserTask)
  return false;
#undef DO_
}

void TAllianceUserTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceUserTask)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // optional uint64 CommitTime = 2;
  if (has_committime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->committime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceUserTask)
}

::google::protobuf::uint8* TAllianceUserTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceUserTask)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // optional uint64 CommitTime = 2;
  if (has_committime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->committime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceUserTask)
  return target;
}

int TAllianceUserTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint64 CommitTime = 2;
    if (has_committime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->committime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceUserTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceUserTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceUserTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceUserTask::MergeFrom(const TAllianceUserTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_committime()) {
      set_committime(from.committime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceUserTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceUserTask::CopyFrom(const TAllianceUserTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceUserTask::IsInitialized() const {

  return true;
}

void TAllianceUserTask::Swap(TAllianceUserTask* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(committime_, other->committime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceUserTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceUserTask_descriptor_;
  metadata.reflection = TAllianceUserTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceUserPractice::kTypeFieldNumber;
const int TAllianceUserPractice::kLevelFieldNumber;
#endif  // !_MSC_VER

TAllianceUserPractice::TAllianceUserPractice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceUserPractice)
}

void TAllianceUserPractice::InitAsDefaultInstance() {
}

TAllianceUserPractice::TAllianceUserPractice(const TAllianceUserPractice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceUserPractice)
}

void TAllianceUserPractice::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceUserPractice::~TAllianceUserPractice() {
  // @@protoc_insertion_point(destructor:pb.TAllianceUserPractice)
  SharedDtor();
}

void TAllianceUserPractice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAllianceUserPractice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceUserPractice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceUserPractice_descriptor_;
}

const TAllianceUserPractice& TAllianceUserPractice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceUserPractice* TAllianceUserPractice::default_instance_ = NULL;

TAllianceUserPractice* TAllianceUserPractice::New() const {
  return new TAllianceUserPractice;
}

void TAllianceUserPractice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAllianceUserPractice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceUserPractice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceUserPractice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 2;
      case 2: {
        if (tag == 16) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceUserPractice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceUserPractice)
  return false;
#undef DO_
}

void TAllianceUserPractice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceUserPractice)
  // optional uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceUserPractice)
}

::google::protobuf::uint8* TAllianceUserPractice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceUserPractice)
  // optional uint32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceUserPractice)
  return target;
}

int TAllianceUserPractice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceUserPractice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceUserPractice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceUserPractice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceUserPractice::MergeFrom(const TAllianceUserPractice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceUserPractice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceUserPractice::CopyFrom(const TAllianceUserPractice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceUserPractice::IsInitialized() const {

  return true;
}

void TAllianceUserPractice::Swap(TAllianceUserPractice* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceUserPractice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceUserPractice_descriptor_;
  metadata.reflection = TAllianceUserPractice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceUserInfo::kTaskRefreshNumFieldNumber;
const int TAllianceUserInfo::kTaskUpgradeNumFieldNumber;
const int TAllianceUserInfo::kArrTaskTypeInfoFieldNumber;
const int TAllianceUserInfo::kArrTaskInfoFieldNumber;
const int TAllianceUserInfo::kSignRewardTimeFieldNumber;
const int TAllianceUserInfo::kTaskRewardTimeFieldNumber;
const int TAllianceUserInfo::kArrPracticeFieldNumber;
#endif  // !_MSC_VER

TAllianceUserInfo::TAllianceUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceUserInfo)
}

void TAllianceUserInfo::InitAsDefaultInstance() {
}

TAllianceUserInfo::TAllianceUserInfo(const TAllianceUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceUserInfo)
}

void TAllianceUserInfo::SharedCtor() {
  _cached_size_ = 0;
  taskrefreshnum_ = 0u;
  taskupgradenum_ = 0u;
  signrewardtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceUserInfo::~TAllianceUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TAllianceUserInfo)
  SharedDtor();
}

void TAllianceUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAllianceUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceUserInfo_descriptor_;
}

const TAllianceUserInfo& TAllianceUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceUserInfo* TAllianceUserInfo::default_instance_ = NULL;

TAllianceUserInfo* TAllianceUserInfo::New() const {
  return new TAllianceUserInfo;
}

void TAllianceUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAllianceUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 19) {
    ZR_(taskrefreshnum_, taskupgradenum_);
    signrewardtime_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrtasktypeinfo_.Clear();
  arrtaskinfo_.Clear();
  taskrewardtime_.Clear();
  arrpractice_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskRefreshNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskrefreshnum_)));
          set_has_taskrefreshnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TaskUpgradeNum;
        break;
      }

      // optional uint32 TaskUpgradeNum = 2;
      case 2: {
        if (tag == 16) {
         parse_TaskUpgradeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskupgradenum_)));
          set_has_taskupgradenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrTaskTypeInfo;
        break;
      }

      // repeated .pb.TAllianceUserTaskType ArrTaskTypeInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrTaskTypeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtasktypeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrTaskTypeInfo;
        if (input->ExpectTag(34)) goto parse_ArrTaskInfo;
        break;
      }

      // repeated .pb.TAllianceUserTask ArrTaskInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_ArrTaskInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtaskinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrTaskInfo;
        if (input->ExpectTag(40)) goto parse_SignRewardTime;
        break;
      }

      // optional uint64 SignRewardTime = 5;
      case 5: {
        if (tag == 40) {
         parse_SignRewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signrewardtime_)));
          set_has_signrewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TaskRewardTime;
        break;
      }

      // repeated uint64 TaskRewardTime = 6;
      case 6: {
        if (tag == 48) {
         parse_TaskRewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_taskrewardtime())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_taskrewardtime())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TaskRewardTime;
        if (input->ExpectTag(58)) goto parse_ArrPractice;
        break;
      }

      // repeated .pb.TAllianceUserPractice ArrPractice = 7;
      case 7: {
        if (tag == 58) {
         parse_ArrPractice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrpractice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ArrPractice;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceUserInfo)
  return false;
#undef DO_
}

void TAllianceUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceUserInfo)
  // optional uint32 TaskRefreshNum = 1;
  if (has_taskrefreshnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskrefreshnum(), output);
  }

  // optional uint32 TaskUpgradeNum = 2;
  if (has_taskupgradenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->taskupgradenum(), output);
  }

  // repeated .pb.TAllianceUserTaskType ArrTaskTypeInfo = 3;
  for (int i = 0; i < this->arrtasktypeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrtasktypeinfo(i), output);
  }

  // repeated .pb.TAllianceUserTask ArrTaskInfo = 4;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arrtaskinfo(i), output);
  }

  // optional uint64 SignRewardTime = 5;
  if (has_signrewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->signrewardtime(), output);
  }

  // repeated uint64 TaskRewardTime = 6;
  for (int i = 0; i < this->taskrewardtime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->taskrewardtime(i), output);
  }

  // repeated .pb.TAllianceUserPractice ArrPractice = 7;
  for (int i = 0; i < this->arrpractice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->arrpractice(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceUserInfo)
}

::google::protobuf::uint8* TAllianceUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceUserInfo)
  // optional uint32 TaskRefreshNum = 1;
  if (has_taskrefreshnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskrefreshnum(), target);
  }

  // optional uint32 TaskUpgradeNum = 2;
  if (has_taskupgradenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->taskupgradenum(), target);
  }

  // repeated .pb.TAllianceUserTaskType ArrTaskTypeInfo = 3;
  for (int i = 0; i < this->arrtasktypeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrtasktypeinfo(i), target);
  }

  // repeated .pb.TAllianceUserTask ArrTaskInfo = 4;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arrtaskinfo(i), target);
  }

  // optional uint64 SignRewardTime = 5;
  if (has_signrewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->signrewardtime(), target);
  }

  // repeated uint64 TaskRewardTime = 6;
  for (int i = 0; i < this->taskrewardtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->taskrewardtime(i), target);
  }

  // repeated .pb.TAllianceUserPractice ArrPractice = 7;
  for (int i = 0; i < this->arrpractice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->arrpractice(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceUserInfo)
  return target;
}

int TAllianceUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskRefreshNum = 1;
    if (has_taskrefreshnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskrefreshnum());
    }

    // optional uint32 TaskUpgradeNum = 2;
    if (has_taskupgradenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskupgradenum());
    }

    // optional uint64 SignRewardTime = 5;
    if (has_signrewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signrewardtime());
    }

  }
  // repeated .pb.TAllianceUserTaskType ArrTaskTypeInfo = 3;
  total_size += 1 * this->arrtasktypeinfo_size();
  for (int i = 0; i < this->arrtasktypeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtasktypeinfo(i));
  }

  // repeated .pb.TAllianceUserTask ArrTaskInfo = 4;
  total_size += 1 * this->arrtaskinfo_size();
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtaskinfo(i));
  }

  // repeated uint64 TaskRewardTime = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->taskrewardtime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->taskrewardtime(i));
    }
    total_size += 1 * this->taskrewardtime_size() + data_size;
  }

  // repeated .pb.TAllianceUserPractice ArrPractice = 7;
  total_size += 1 * this->arrpractice_size();
  for (int i = 0; i < this->arrpractice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrpractice(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceUserInfo::MergeFrom(const TAllianceUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrtasktypeinfo_.MergeFrom(from.arrtasktypeinfo_);
  arrtaskinfo_.MergeFrom(from.arrtaskinfo_);
  taskrewardtime_.MergeFrom(from.taskrewardtime_);
  arrpractice_.MergeFrom(from.arrpractice_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskrefreshnum()) {
      set_taskrefreshnum(from.taskrefreshnum());
    }
    if (from.has_taskupgradenum()) {
      set_taskupgradenum(from.taskupgradenum());
    }
    if (from.has_signrewardtime()) {
      set_signrewardtime(from.signrewardtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceUserInfo::CopyFrom(const TAllianceUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceUserInfo::IsInitialized() const {

  return true;
}

void TAllianceUserInfo::Swap(TAllianceUserInfo* other) {
  if (other != this) {
    std::swap(taskrefreshnum_, other->taskrefreshnum_);
    std::swap(taskupgradenum_, other->taskupgradenum_);
    arrtasktypeinfo_.Swap(&other->arrtasktypeinfo_);
    arrtaskinfo_.Swap(&other->arrtaskinfo_);
    std::swap(signrewardtime_, other->signrewardtime_);
    taskrewardtime_.Swap(&other->taskrewardtime_);
    arrpractice_.Swap(&other->arrpractice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceUserInfo_descriptor_;
  metadata.reflection = TAllianceUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceTip::kTimeFieldNumber;
const int TAllianceTip::kTypeFieldNumber;
const int TAllianceTip::kParamArrFieldNumber;
#endif  // !_MSC_VER

TAllianceTip::TAllianceTip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceTip)
}

void TAllianceTip::InitAsDefaultInstance() {
}

TAllianceTip::TAllianceTip(const TAllianceTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceTip)
}

void TAllianceTip::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceTip::~TAllianceTip() {
  // @@protoc_insertion_point(destructor:pb.TAllianceTip)
  SharedDtor();
}

void TAllianceTip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAllianceTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceTip_descriptor_;
}

const TAllianceTip& TAllianceTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceTip* TAllianceTip::default_instance_ = NULL;

TAllianceTip* TAllianceTip::New() const {
  return new TAllianceTip;
}

void TAllianceTip::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    time_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
  }
  paramarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceTip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional .pb.EAllianceTipType Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAllianceTipType_IsValid(value)) {
            set_type(static_cast< ::pb::EAllianceTipType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ParamArr;
        break;
      }

      // repeated string ParamArr = 3;
      case 3: {
        if (tag == 26) {
         parse_ParamArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_paramarr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->paramarr(this->paramarr_size() - 1).data(),
            this->paramarr(this->paramarr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "paramarr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ParamArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceTip)
  return false;
#undef DO_
}

void TAllianceTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceTip)
  // optional uint64 Time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // optional .pb.EAllianceTipType Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated string ParamArr = 3;
  for (int i = 0; i < this->paramarr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->paramarr(i).data(), this->paramarr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "paramarr");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->paramarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceTip)
}

::google::protobuf::uint8* TAllianceTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceTip)
  // optional uint64 Time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // optional .pb.EAllianceTipType Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated string ParamArr = 3;
  for (int i = 0; i < this->paramarr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paramarr(i).data(), this->paramarr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "paramarr");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->paramarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceTip)
  return target;
}

int TAllianceTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional .pb.EAllianceTipType Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated string ParamArr = 3;
  total_size += 1 * this->paramarr_size();
  for (int i = 0; i < this->paramarr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->paramarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceTip::MergeFrom(const TAllianceTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  paramarr_.MergeFrom(from.paramarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceTip::CopyFrom(const TAllianceTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceTip::IsInitialized() const {

  return true;
}

void TAllianceTip::Swap(TAllianceTip* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    paramarr_.Swap(&other->paramarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceTip_descriptor_;
  metadata.reflection = TAllianceTip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceSimpleInfo::kAllianceIdFieldNumber;
const int TAllianceSimpleInfo::kNameFieldNumber;
const int TAllianceSimpleInfo::kBannerNameFieldNumber;
const int TAllianceSimpleInfo::kBannerBaseFieldNumber;
const int TAllianceSimpleInfo::kBannerFigureFieldNumber;
const int TAllianceSimpleInfo::kLevelFieldNumber;
const int TAllianceSimpleInfo::kExpFieldNumber;
const int TAllianceSimpleInfo::kGuildMemberNumFieldNumber;
const int TAllianceSimpleInfo::kGuildUserNumFieldNumber;
const int TAllianceSimpleInfo::kReviewModeFieldNumber;
const int TAllianceSimpleInfo::kGuildLvLimitFieldNumber;
const int TAllianceSimpleInfo::kSummaryFieldNumber;
const int TAllianceSimpleInfo::kQQFieldNumber;
const int TAllianceSimpleInfo::kCreateTimeFieldNumber;
const int TAllianceSimpleInfo::kTotalFightForceFieldNumber;
const int TAllianceSimpleInfo::kLeaderUserInfoFieldNumber;
const int TAllianceSimpleInfo::kArrGuildMemberFieldNumber;
const int TAllianceSimpleInfo::kAddMemberNumFieldNumber;
#endif  // !_MSC_VER

TAllianceSimpleInfo::TAllianceSimpleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceSimpleInfo)
}

void TAllianceSimpleInfo::InitAsDefaultInstance() {
  leaderuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TAllianceSimpleInfo::TAllianceSimpleInfo(const TAllianceSimpleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceSimpleInfo)
}

void TAllianceSimpleInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  allianceid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannerbase_ = 0u;
  bannerfigure_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  guildmembernum_ = 0u;
  guildusernum_ = 0u;
  reviewmode_ = 0;
  guildlvlimit_ = 0u;
  summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_ = GOOGLE_ULONGLONG(0);
  totalfightforce_ = GOOGLE_ULONGLONG(0);
  leaderuserinfo_ = NULL;
  addmembernum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceSimpleInfo::~TAllianceSimpleInfo() {
  // @@protoc_insertion_point(destructor:pb.TAllianceSimpleInfo)
  SharedDtor();
}

void TAllianceSimpleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (qq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qq_;
  }
  if (this != default_instance_) {
    delete leaderuserinfo_;
  }
}

void TAllianceSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceSimpleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceSimpleInfo_descriptor_;
}

const TAllianceSimpleInfo& TAllianceSimpleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceSimpleInfo* TAllianceSimpleInfo::default_instance_ = NULL;

TAllianceSimpleInfo* TAllianceSimpleInfo::New() const {
  return new TAllianceSimpleInfo;
}

void TAllianceSimpleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAllianceSimpleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(bannerbase_, guildmembernum_);
    allianceid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_bannername()) {
      if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bannername_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(guildusernum_, guildlvlimit_);
    ZR_(createtime_, totalfightforce_);
    if (has_summary()) {
      if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        summary_->clear();
      }
    }
    if (has_qq()) {
      if (qq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        qq_->clear();
      }
    }
    if (has_leaderuserinfo()) {
      if (leaderuserinfo_ != NULL) leaderuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }
  addmembernum_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrguildmember_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceSimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceSimpleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 AllianceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BannerName;
        break;
      }

      // optional string BannerName = 3;
      case 3: {
        if (tag == 26) {
         parse_BannerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bannername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bannername().data(), this->bannername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bannername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BannerBase;
        break;
      }

      // optional uint32 BannerBase = 4;
      case 4: {
        if (tag == 32) {
         parse_BannerBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerbase_)));
          set_has_bannerbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BannerFigure;
        break;
      }

      // optional uint32 BannerFigure = 5;
      case 5: {
        if (tag == 40) {
         parse_BannerFigure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerfigure_)));
          set_has_bannerfigure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 6;
      case 6: {
        if (tag == 48) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Exp;
        break;
      }

      // optional uint32 Exp = 7;
      case 7: {
        if (tag == 56) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_GuildMemberNum;
        break;
      }

      // optional uint32 GuildMemberNum = 8;
      case 8: {
        if (tag == 64) {
         parse_GuildMemberNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildmembernum_)));
          set_has_guildmembernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_GuildUserNum;
        break;
      }

      // optional uint32 GuildUserNum = 9;
      case 9: {
        if (tag == 72) {
         parse_GuildUserNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildusernum_)));
          set_has_guildusernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ReviewMode;
        break;
      }

      // optional .pb.EReviewMode ReviewMode = 10;
      case 10: {
        if (tag == 80) {
         parse_ReviewMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EReviewMode_IsValid(value)) {
            set_reviewmode(static_cast< ::pb::EReviewMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_GuildLvLimit;
        break;
      }

      // optional uint32 GuildLvLimit = 11;
      case 11: {
        if (tag == 88) {
         parse_GuildLvLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildlvlimit_)));
          set_has_guildlvlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_Summary;
        break;
      }

      // optional string Summary = 12;
      case 12: {
        if (tag == 98) {
         parse_Summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->summary().data(), this->summary().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "summary");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_QQ;
        break;
      }

      // optional string QQ = 13;
      case 13: {
        if (tag == 106) {
         parse_QQ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qq().data(), this->qq().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qq");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_CreateTime;
        break;
      }

      // optional uint64 CreateTime = 14;
      case 14: {
        if (tag == 112) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_TotalFightForce;
        break;
      }

      // optional uint64 TotalFightForce = 15;
      case 15: {
        if (tag == 120) {
         parse_TotalFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalfightforce_)));
          set_has_totalfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_LeaderUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo LeaderUserInfo = 16;
      case 16: {
        if (tag == 130) {
         parse_LeaderUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaderuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_ArrGuildMember;
        break;
      }

      // repeated .pb.TAllianceGuildMemberInfo ArrGuildMember = 17;
      case 17: {
        if (tag == 138) {
         parse_ArrGuildMember:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrguildmember()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_ArrGuildMember;
        if (input->ExpectTag(144)) goto parse_AddMemberNum;
        break;
      }

      // optional uint32 AddMemberNum = 18;
      case 18: {
        if (tag == 144) {
         parse_AddMemberNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addmembernum_)));
          set_has_addmembernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceSimpleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceSimpleInfo)
  return false;
#undef DO_
}

void TAllianceSimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceSimpleInfo)
  // optional uint64 AllianceId = 1;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->allianceid(), output);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string BannerName = 3;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bannername(), output);
  }

  // optional uint32 BannerBase = 4;
  if (has_bannerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bannerbase(), output);
  }

  // optional uint32 BannerFigure = 5;
  if (has_bannerfigure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bannerfigure(), output);
  }

  // optional uint32 Level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 Exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->exp(), output);
  }

  // optional uint32 GuildMemberNum = 8;
  if (has_guildmembernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->guildmembernum(), output);
  }

  // optional uint32 GuildUserNum = 9;
  if (has_guildusernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->guildusernum(), output);
  }

  // optional .pb.EReviewMode ReviewMode = 10;
  if (has_reviewmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->reviewmode(), output);
  }

  // optional uint32 GuildLvLimit = 11;
  if (has_guildlvlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->guildlvlimit(), output);
  }

  // optional string Summary = 12;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->summary(), output);
  }

  // optional string QQ = 13;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qq().data(), this->qq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->qq(), output);
  }

  // optional uint64 CreateTime = 14;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->createtime(), output);
  }

  // optional uint64 TotalFightForce = 15;
  if (has_totalfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->totalfightforce(), output);
  }

  // optional .pb.TUserSimpleInfo LeaderUserInfo = 16;
  if (has_leaderuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->leaderuserinfo(), output);
  }

  // repeated .pb.TAllianceGuildMemberInfo ArrGuildMember = 17;
  for (int i = 0; i < this->arrguildmember_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->arrguildmember(i), output);
  }

  // optional uint32 AddMemberNum = 18;
  if (has_addmembernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->addmembernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceSimpleInfo)
}

::google::protobuf::uint8* TAllianceSimpleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceSimpleInfo)
  // optional uint64 AllianceId = 1;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->allianceid(), target);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string BannerName = 3;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bannername(), target);
  }

  // optional uint32 BannerBase = 4;
  if (has_bannerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bannerbase(), target);
  }

  // optional uint32 BannerFigure = 5;
  if (has_bannerfigure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bannerfigure(), target);
  }

  // optional uint32 Level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 Exp = 7;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->exp(), target);
  }

  // optional uint32 GuildMemberNum = 8;
  if (has_guildmembernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->guildmembernum(), target);
  }

  // optional uint32 GuildUserNum = 9;
  if (has_guildusernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->guildusernum(), target);
  }

  // optional .pb.EReviewMode ReviewMode = 10;
  if (has_reviewmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->reviewmode(), target);
  }

  // optional uint32 GuildLvLimit = 11;
  if (has_guildlvlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->guildlvlimit(), target);
  }

  // optional string Summary = 12;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->summary(), target);
  }

  // optional string QQ = 13;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qq().data(), this->qq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->qq(), target);
  }

  // optional uint64 CreateTime = 14;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->createtime(), target);
  }

  // optional uint64 TotalFightForce = 15;
  if (has_totalfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->totalfightforce(), target);
  }

  // optional .pb.TUserSimpleInfo LeaderUserInfo = 16;
  if (has_leaderuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->leaderuserinfo(), target);
  }

  // repeated .pb.TAllianceGuildMemberInfo ArrGuildMember = 17;
  for (int i = 0; i < this->arrguildmember_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->arrguildmember(i), target);
  }

  // optional uint32 AddMemberNum = 18;
  if (has_addmembernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->addmembernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceSimpleInfo)
  return target;
}

int TAllianceSimpleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 AllianceId = 1;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->allianceid());
    }

    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string BannerName = 3;
    if (has_bannername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bannername());
    }

    // optional uint32 BannerBase = 4;
    if (has_bannerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerbase());
    }

    // optional uint32 BannerFigure = 5;
    if (has_bannerfigure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerfigure());
    }

    // optional uint32 Level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 Exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 GuildMemberNum = 8;
    if (has_guildmembernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildmembernum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 GuildUserNum = 9;
    if (has_guildusernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildusernum());
    }

    // optional .pb.EReviewMode ReviewMode = 10;
    if (has_reviewmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reviewmode());
    }

    // optional uint32 GuildLvLimit = 11;
    if (has_guildlvlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildlvlimit());
    }

    // optional string Summary = 12;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summary());
    }

    // optional string QQ = 13;
    if (has_qq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qq());
    }

    // optional uint64 CreateTime = 14;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional uint64 TotalFightForce = 15;
    if (has_totalfightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalfightforce());
    }

    // optional .pb.TUserSimpleInfo LeaderUserInfo = 16;
    if (has_leaderuserinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaderuserinfo());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional uint32 AddMemberNum = 18;
    if (has_addmembernum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addmembernum());
    }

  }
  // repeated .pb.TAllianceGuildMemberInfo ArrGuildMember = 17;
  total_size += 2 * this->arrguildmember_size();
  for (int i = 0; i < this->arrguildmember_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrguildmember(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceSimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceSimpleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceSimpleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceSimpleInfo::MergeFrom(const TAllianceSimpleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrguildmember_.MergeFrom(from.arrguildmember_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_bannername()) {
      set_bannername(from.bannername());
    }
    if (from.has_bannerbase()) {
      set_bannerbase(from.bannerbase());
    }
    if (from.has_bannerfigure()) {
      set_bannerfigure(from.bannerfigure());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_guildmembernum()) {
      set_guildmembernum(from.guildmembernum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guildusernum()) {
      set_guildusernum(from.guildusernum());
    }
    if (from.has_reviewmode()) {
      set_reviewmode(from.reviewmode());
    }
    if (from.has_guildlvlimit()) {
      set_guildlvlimit(from.guildlvlimit());
    }
    if (from.has_summary()) {
      set_summary(from.summary());
    }
    if (from.has_qq()) {
      set_qq(from.qq());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_totalfightforce()) {
      set_totalfightforce(from.totalfightforce());
    }
    if (from.has_leaderuserinfo()) {
      mutable_leaderuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.leaderuserinfo());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_addmembernum()) {
      set_addmembernum(from.addmembernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceSimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceSimpleInfo::CopyFrom(const TAllianceSimpleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceSimpleInfo::IsInitialized() const {

  return true;
}

void TAllianceSimpleInfo::Swap(TAllianceSimpleInfo* other) {
  if (other != this) {
    std::swap(allianceid_, other->allianceid_);
    std::swap(name_, other->name_);
    std::swap(bannername_, other->bannername_);
    std::swap(bannerbase_, other->bannerbase_);
    std::swap(bannerfigure_, other->bannerfigure_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(guildmembernum_, other->guildmembernum_);
    std::swap(guildusernum_, other->guildusernum_);
    std::swap(reviewmode_, other->reviewmode_);
    std::swap(guildlvlimit_, other->guildlvlimit_);
    std::swap(summary_, other->summary_);
    std::swap(qq_, other->qq_);
    std::swap(createtime_, other->createtime_);
    std::swap(totalfightforce_, other->totalfightforce_);
    std::swap(leaderuserinfo_, other->leaderuserinfo_);
    arrguildmember_.Swap(&other->arrguildmember_);
    std::swap(addmembernum_, other->addmembernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceSimpleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceSimpleInfo_descriptor_;
  metadata.reflection = TAllianceSimpleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceSimpleInfoWithApplyStatus::kAllianceSimpleInfoFieldNumber;
const int TAllianceSimpleInfoWithApplyStatus::kApplyFieldNumber;
#endif  // !_MSC_VER

TAllianceSimpleInfoWithApplyStatus::TAllianceSimpleInfoWithApplyStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceSimpleInfoWithApplyStatus)
}

void TAllianceSimpleInfoWithApplyStatus::InitAsDefaultInstance() {
  alliancesimpleinfo_ = const_cast< ::pb::TAllianceSimpleInfo*>(&::pb::TAllianceSimpleInfo::default_instance());
}

TAllianceSimpleInfoWithApplyStatus::TAllianceSimpleInfoWithApplyStatus(const TAllianceSimpleInfoWithApplyStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceSimpleInfoWithApplyStatus)
}

void TAllianceSimpleInfoWithApplyStatus::SharedCtor() {
  _cached_size_ = 0;
  alliancesimpleinfo_ = NULL;
  apply_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceSimpleInfoWithApplyStatus::~TAllianceSimpleInfoWithApplyStatus() {
  // @@protoc_insertion_point(destructor:pb.TAllianceSimpleInfoWithApplyStatus)
  SharedDtor();
}

void TAllianceSimpleInfoWithApplyStatus::SharedDtor() {
  if (this != default_instance_) {
    delete alliancesimpleinfo_;
  }
}

void TAllianceSimpleInfoWithApplyStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceSimpleInfoWithApplyStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceSimpleInfoWithApplyStatus_descriptor_;
}

const TAllianceSimpleInfoWithApplyStatus& TAllianceSimpleInfoWithApplyStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceSimpleInfoWithApplyStatus* TAllianceSimpleInfoWithApplyStatus::default_instance_ = NULL;

TAllianceSimpleInfoWithApplyStatus* TAllianceSimpleInfoWithApplyStatus::New() const {
  return new TAllianceSimpleInfoWithApplyStatus;
}

void TAllianceSimpleInfoWithApplyStatus::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_alliancesimpleinfo()) {
      if (alliancesimpleinfo_ != NULL) alliancesimpleinfo_->::pb::TAllianceSimpleInfo::Clear();
    }
    apply_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceSimpleInfoWithApplyStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceSimpleInfoWithApplyStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliancesimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Apply;
        break;
      }

      // optional bool Apply = 2;
      case 2: {
        if (tag == 16) {
         parse_Apply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_)));
          set_has_apply();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceSimpleInfoWithApplyStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceSimpleInfoWithApplyStatus)
  return false;
#undef DO_
}

void TAllianceSimpleInfoWithApplyStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceSimpleInfoWithApplyStatus)
  // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
  if (has_alliancesimpleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alliancesimpleinfo(), output);
  }

  // optional bool Apply = 2;
  if (has_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->apply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceSimpleInfoWithApplyStatus)
}

::google::protobuf::uint8* TAllianceSimpleInfoWithApplyStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceSimpleInfoWithApplyStatus)
  // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
  if (has_alliancesimpleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alliancesimpleinfo(), target);
  }

  // optional bool Apply = 2;
  if (has_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->apply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceSimpleInfoWithApplyStatus)
  return target;
}

int TAllianceSimpleInfoWithApplyStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
    if (has_alliancesimpleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliancesimpleinfo());
    }

    // optional bool Apply = 2;
    if (has_apply()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceSimpleInfoWithApplyStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceSimpleInfoWithApplyStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceSimpleInfoWithApplyStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceSimpleInfoWithApplyStatus::MergeFrom(const TAllianceSimpleInfoWithApplyStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alliancesimpleinfo()) {
      mutable_alliancesimpleinfo()->::pb::TAllianceSimpleInfo::MergeFrom(from.alliancesimpleinfo());
    }
    if (from.has_apply()) {
      set_apply(from.apply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceSimpleInfoWithApplyStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceSimpleInfoWithApplyStatus::CopyFrom(const TAllianceSimpleInfoWithApplyStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceSimpleInfoWithApplyStatus::IsInitialized() const {

  return true;
}

void TAllianceSimpleInfoWithApplyStatus::Swap(TAllianceSimpleInfoWithApplyStatus* other) {
  if (other != this) {
    std::swap(alliancesimpleinfo_, other->alliancesimpleinfo_);
    std::swap(apply_, other->apply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceSimpleInfoWithApplyStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceSimpleInfoWithApplyStatus_descriptor_;
  metadata.reflection = TAllianceSimpleInfoWithApplyStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceVoteInfo::kVoteIdFieldNumber;
const int TAllianceVoteInfo::kSponsorUserInfoFieldNumber;
const int TAllianceVoteInfo::kStartTimeFieldNumber;
const int TAllianceVoteInfo::kVoteTypeFieldNumber;
const int TAllianceVoteInfo::kAimUserInfoFieldNumber;
const int TAllianceVoteInfo::kAgreeNumFieldNumber;
const int TAllianceVoteInfo::kAgainstNumFieldNumber;
const int TAllianceVoteInfo::kResultFieldNumber;
const int TAllianceVoteInfo::kCloseTimeFieldNumber;
const int TAllianceVoteInfo::kSelfVoteFieldNumber;
#endif  // !_MSC_VER

TAllianceVoteInfo::TAllianceVoteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceVoteInfo)
}

void TAllianceVoteInfo::InitAsDefaultInstance() {
  sponsoruserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  aimuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TAllianceVoteInfo::TAllianceVoteInfo(const TAllianceVoteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceVoteInfo)
}

void TAllianceVoteInfo::SharedCtor() {
  _cached_size_ = 0;
  voteid_ = GOOGLE_ULONGLONG(0);
  sponsoruserinfo_ = NULL;
  starttime_ = GOOGLE_ULONGLONG(0);
  votetype_ = 1;
  aimuserinfo_ = NULL;
  agreenum_ = 0u;
  againstnum_ = 0u;
  result_ = 1;
  closetime_ = GOOGLE_ULONGLONG(0);
  selfvote_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceVoteInfo::~TAllianceVoteInfo() {
  // @@protoc_insertion_point(destructor:pb.TAllianceVoteInfo)
  SharedDtor();
}

void TAllianceVoteInfo::SharedDtor() {
  if (this != default_instance_) {
    delete sponsoruserinfo_;
    delete aimuserinfo_;
  }
}

void TAllianceVoteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceVoteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceVoteInfo_descriptor_;
}

const TAllianceVoteInfo& TAllianceVoteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceVoteInfo* TAllianceVoteInfo::default_instance_ = NULL;

TAllianceVoteInfo* TAllianceVoteInfo::New() const {
  return new TAllianceVoteInfo;
}

void TAllianceVoteInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAllianceVoteInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(agreenum_, againstnum_);
    voteid_ = GOOGLE_ULONGLONG(0);
    if (has_sponsoruserinfo()) {
      if (sponsoruserinfo_ != NULL) sponsoruserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    starttime_ = GOOGLE_ULONGLONG(0);
    votetype_ = 1;
    if (has_aimuserinfo()) {
      if (aimuserinfo_ != NULL) aimuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    result_ = 1;
  }
  if (_has_bits_[8 / 32] & 768) {
    closetime_ = GOOGLE_ULONGLONG(0);
    selfvote_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceVoteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceVoteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 VoteId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &voteid_)));
          set_has_voteid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SponsorUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo SponsorUserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_SponsorUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sponsoruserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_StartTime;
        break;
      }

      // optional uint64 StartTime = 3;
      case 3: {
        if (tag == 24) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_VoteType;
        break;
      }

      // optional .pb.EAllianceVoteType VoteType = 4;
      case 4: {
        if (tag == 32) {
         parse_VoteType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAllianceVoteType_IsValid(value)) {
            set_votetype(static_cast< ::pb::EAllianceVoteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_AimUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo AimUserInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_AimUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aimuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_AgreeNum;
        break;
      }

      // optional uint32 AgreeNum = 6;
      case 6: {
        if (tag == 48) {
         parse_AgreeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agreenum_)));
          set_has_agreenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_AgainstNum;
        break;
      }

      // optional uint32 AgainstNum = 7;
      case 7: {
        if (tag == 56) {
         parse_AgainstNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &againstnum_)));
          set_has_againstnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Result;
        break;
      }

      // optional .pb.EAllianceResult Result = 8;
      case 8: {
        if (tag == 64) {
         parse_Result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAllianceResult_IsValid(value)) {
            set_result(static_cast< ::pb::EAllianceResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_CloseTime;
        break;
      }

      // optional uint64 CloseTime = 9;
      case 9: {
        if (tag == 72) {
         parse_CloseTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &closetime_)));
          set_has_closetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_SelfVote;
        break;
      }

      // optional .pb.EAllianceVoteResult SelfVote = 10;
      case 10: {
        if (tag == 80) {
         parse_SelfVote:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAllianceVoteResult_IsValid(value)) {
            set_selfvote(static_cast< ::pb::EAllianceVoteResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceVoteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceVoteInfo)
  return false;
#undef DO_
}

void TAllianceVoteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceVoteInfo)
  // optional uint64 VoteId = 1;
  if (has_voteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->voteid(), output);
  }

  // optional .pb.TUserSimpleInfo SponsorUserInfo = 2;
  if (has_sponsoruserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sponsoruserinfo(), output);
  }

  // optional uint64 StartTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->starttime(), output);
  }

  // optional .pb.EAllianceVoteType VoteType = 4;
  if (has_votetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->votetype(), output);
  }

  // optional .pb.TUserSimpleInfo AimUserInfo = 5;
  if (has_aimuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->aimuserinfo(), output);
  }

  // optional uint32 AgreeNum = 6;
  if (has_agreenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->agreenum(), output);
  }

  // optional uint32 AgainstNum = 7;
  if (has_againstnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->againstnum(), output);
  }

  // optional .pb.EAllianceResult Result = 8;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->result(), output);
  }

  // optional uint64 CloseTime = 9;
  if (has_closetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->closetime(), output);
  }

  // optional .pb.EAllianceVoteResult SelfVote = 10;
  if (has_selfvote()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->selfvote(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceVoteInfo)
}

::google::protobuf::uint8* TAllianceVoteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceVoteInfo)
  // optional uint64 VoteId = 1;
  if (has_voteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->voteid(), target);
  }

  // optional .pb.TUserSimpleInfo SponsorUserInfo = 2;
  if (has_sponsoruserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sponsoruserinfo(), target);
  }

  // optional uint64 StartTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->starttime(), target);
  }

  // optional .pb.EAllianceVoteType VoteType = 4;
  if (has_votetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->votetype(), target);
  }

  // optional .pb.TUserSimpleInfo AimUserInfo = 5;
  if (has_aimuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->aimuserinfo(), target);
  }

  // optional uint32 AgreeNum = 6;
  if (has_agreenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->agreenum(), target);
  }

  // optional uint32 AgainstNum = 7;
  if (has_againstnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->againstnum(), target);
  }

  // optional .pb.EAllianceResult Result = 8;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->result(), target);
  }

  // optional uint64 CloseTime = 9;
  if (has_closetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->closetime(), target);
  }

  // optional .pb.EAllianceVoteResult SelfVote = 10;
  if (has_selfvote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->selfvote(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceVoteInfo)
  return target;
}

int TAllianceVoteInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 VoteId = 1;
    if (has_voteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->voteid());
    }

    // optional .pb.TUserSimpleInfo SponsorUserInfo = 2;
    if (has_sponsoruserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sponsoruserinfo());
    }

    // optional uint64 StartTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional .pb.EAllianceVoteType VoteType = 4;
    if (has_votetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->votetype());
    }

    // optional .pb.TUserSimpleInfo AimUserInfo = 5;
    if (has_aimuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aimuserinfo());
    }

    // optional uint32 AgreeNum = 6;
    if (has_agreenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agreenum());
    }

    // optional uint32 AgainstNum = 7;
    if (has_againstnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->againstnum());
    }

    // optional .pb.EAllianceResult Result = 8;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 CloseTime = 9;
    if (has_closetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->closetime());
    }

    // optional .pb.EAllianceVoteResult SelfVote = 10;
    if (has_selfvote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selfvote());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceVoteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceVoteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceVoteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceVoteInfo::MergeFrom(const TAllianceVoteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voteid()) {
      set_voteid(from.voteid());
    }
    if (from.has_sponsoruserinfo()) {
      mutable_sponsoruserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.sponsoruserinfo());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_votetype()) {
      set_votetype(from.votetype());
    }
    if (from.has_aimuserinfo()) {
      mutable_aimuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.aimuserinfo());
    }
    if (from.has_agreenum()) {
      set_agreenum(from.agreenum());
    }
    if (from.has_againstnum()) {
      set_againstnum(from.againstnum());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_closetime()) {
      set_closetime(from.closetime());
    }
    if (from.has_selfvote()) {
      set_selfvote(from.selfvote());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceVoteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceVoteInfo::CopyFrom(const TAllianceVoteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceVoteInfo::IsInitialized() const {

  return true;
}

void TAllianceVoteInfo::Swap(TAllianceVoteInfo* other) {
  if (other != this) {
    std::swap(voteid_, other->voteid_);
    std::swap(sponsoruserinfo_, other->sponsoruserinfo_);
    std::swap(starttime_, other->starttime_);
    std::swap(votetype_, other->votetype_);
    std::swap(aimuserinfo_, other->aimuserinfo_);
    std::swap(agreenum_, other->agreenum_);
    std::swap(againstnum_, other->againstnum_);
    std::swap(result_, other->result_);
    std::swap(closetime_, other->closetime_);
    std::swap(selfvote_, other->selfvote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceVoteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceVoteInfo_descriptor_;
  metadata.reflection = TAllianceVoteInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceScience::kIdFieldNumber;
const int TAllianceScience::kLevelFieldNumber;
#endif  // !_MSC_VER

TAllianceScience::TAllianceScience()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceScience)
}

void TAllianceScience::InitAsDefaultInstance() {
}

TAllianceScience::TAllianceScience(const TAllianceScience& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceScience)
}

void TAllianceScience::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceScience::~TAllianceScience() {
  // @@protoc_insertion_point(destructor:pb.TAllianceScience)
  SharedDtor();
}

void TAllianceScience::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAllianceScience::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceScience::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceScience_descriptor_;
}

const TAllianceScience& TAllianceScience::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceScience* TAllianceScience::default_instance_ = NULL;

TAllianceScience* TAllianceScience::New() const {
  return new TAllianceScience;
}

void TAllianceScience::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAllianceScience*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceScience::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceScience)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 2;
      case 2: {
        if (tag == 16) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceScience)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceScience)
  return false;
#undef DO_
}

void TAllianceScience::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceScience)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceScience)
}

::google::protobuf::uint8* TAllianceScience::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceScience)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceScience)
  return target;
}

int TAllianceScience::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceScience::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceScience* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceScience*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceScience::MergeFrom(const TAllianceScience& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceScience::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceScience::CopyFrom(const TAllianceScience& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceScience::IsInitialized() const {

  return true;
}

void TAllianceScience::Swap(TAllianceScience* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceScience::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceScience_descriptor_;
  metadata.reflection = TAllianceScience_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceDetailInfo::kAllianceSimpleInfoFieldNumber;
const int TAllianceDetailInfo::kWeekStartLvFieldNumber;
const int TAllianceDetailInfo::kWeekTaskScoreFieldNumber;
const int TAllianceDetailInfo::kNoticeFieldNumber;
const int TAllianceDetailInfo::kArrTipFieldNumber;
const int TAllianceDetailInfo::kArrSignGuildLeaderUserInfoFieldNumber;
const int TAllianceDetailInfo::kArrVoteInfoFieldNumber;
const int TAllianceDetailInfo::kApplyNumFieldNumber;
const int TAllianceDetailInfo::kLastImpeachTimeFieldNumber;
const int TAllianceDetailInfo::kMaterialNumFieldNumber;
const int TAllianceDetailInfo::kDayDonateNumFieldNumber;
const int TAllianceDetailInfo::kArrScienceFieldNumber;
#endif  // !_MSC_VER

TAllianceDetailInfo::TAllianceDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceDetailInfo)
}

void TAllianceDetailInfo::InitAsDefaultInstance() {
  alliancesimpleinfo_ = const_cast< ::pb::TAllianceSimpleInfo*>(&::pb::TAllianceSimpleInfo::default_instance());
}

TAllianceDetailInfo::TAllianceDetailInfo(const TAllianceDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceDetailInfo)
}

void TAllianceDetailInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  alliancesimpleinfo_ = NULL;
  weekstartlv_ = 0u;
  weektaskscore_ = GOOGLE_ULONGLONG(0);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applynum_ = 0u;
  lastimpeachtime_ = GOOGLE_ULONGLONG(0);
  materialnum_ = GOOGLE_ULONGLONG(0);
  daydonatenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceDetailInfo::~TAllianceDetailInfo() {
  // @@protoc_insertion_point(destructor:pb.TAllianceDetailInfo)
  SharedDtor();
}

void TAllianceDetailInfo::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (this != default_instance_) {
    delete alliancesimpleinfo_;
  }
}

void TAllianceDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceDetailInfo_descriptor_;
}

const TAllianceDetailInfo& TAllianceDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceDetailInfo* TAllianceDetailInfo::default_instance_ = NULL;

TAllianceDetailInfo* TAllianceDetailInfo::New() const {
  return new TAllianceDetailInfo;
}

void TAllianceDetailInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAllianceDetailInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 143) {
    ZR_(weekstartlv_, applynum_);
    if (has_alliancesimpleinfo()) {
      if (alliancesimpleinfo_ != NULL) alliancesimpleinfo_->::pb::TAllianceSimpleInfo::Clear();
    }
    weektaskscore_ = GOOGLE_ULONGLONG(0);
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notice_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(lastimpeachtime_, materialnum_);
    daydonatenum_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrtip_.Clear();
  arrsignguildleaderuserinfo_.Clear();
  arrvoteinfo_.Clear();
  arrscience_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceDetailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliancesimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_WeekStartLv;
        break;
      }

      // optional uint32 WeekStartLv = 2;
      case 2: {
        if (tag == 16) {
         parse_WeekStartLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekstartlv_)));
          set_has_weekstartlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_WeekTaskScore;
        break;
      }

      // optional uint64 WeekTaskScore = 3;
      case 3: {
        if (tag == 24) {
         parse_WeekTaskScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weektaskscore_)));
          set_has_weektaskscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Notice;
        break;
      }

      // optional string Notice = 4;
      case 4: {
        if (tag == 34) {
         parse_Notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ArrTip;
        break;
      }

      // repeated .pb.TAllianceTip ArrTip = 5;
      case 5: {
        if (tag == 42) {
         parse_ArrTip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ArrTip;
        if (input->ExpectTag(50)) goto parse_ArrSignGuildLeaderUserInfo;
        break;
      }

      // repeated .pb.TUserSimpleInfo ArrSignGuildLeaderUserInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_ArrSignGuildLeaderUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrsignguildleaderuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ArrSignGuildLeaderUserInfo;
        if (input->ExpectTag(58)) goto parse_ArrVoteInfo;
        break;
      }

      // repeated .pb.TAllianceVoteInfo ArrVoteInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_ArrVoteInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrvoteinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ArrVoteInfo;
        if (input->ExpectTag(64)) goto parse_ApplyNum;
        break;
      }

      // optional uint32 ApplyNum = 8;
      case 8: {
        if (tag == 64) {
         parse_ApplyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applynum_)));
          set_has_applynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_LastImpeachTime;
        break;
      }

      // optional uint64 LastImpeachTime = 9;
      case 9: {
        if (tag == 72) {
         parse_LastImpeachTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastimpeachtime_)));
          set_has_lastimpeachtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_MaterialNum;
        break;
      }

      // optional uint64 MaterialNum = 10;
      case 10: {
        if (tag == 80) {
         parse_MaterialNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &materialnum_)));
          set_has_materialnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_DayDonateNum;
        break;
      }

      // optional uint32 DayDonateNum = 11;
      case 11: {
        if (tag == 88) {
         parse_DayDonateNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daydonatenum_)));
          set_has_daydonatenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ArrScience;
        break;
      }

      // repeated .pb.TAllianceScience ArrScience = 12;
      case 12: {
        if (tag == 98) {
         parse_ArrScience:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrscience()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ArrScience;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceDetailInfo)
  return false;
#undef DO_
}

void TAllianceDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceDetailInfo)
  // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
  if (has_alliancesimpleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alliancesimpleinfo(), output);
  }

  // optional uint32 WeekStartLv = 2;
  if (has_weekstartlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weekstartlv(), output);
  }

  // optional uint64 WeekTaskScore = 3;
  if (has_weektaskscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->weektaskscore(), output);
  }

  // optional string Notice = 4;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->notice(), output);
  }

  // repeated .pb.TAllianceTip ArrTip = 5;
  for (int i = 0; i < this->arrtip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->arrtip(i), output);
  }

  // repeated .pb.TUserSimpleInfo ArrSignGuildLeaderUserInfo = 6;
  for (int i = 0; i < this->arrsignguildleaderuserinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->arrsignguildleaderuserinfo(i), output);
  }

  // repeated .pb.TAllianceVoteInfo ArrVoteInfo = 7;
  for (int i = 0; i < this->arrvoteinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->arrvoteinfo(i), output);
  }

  // optional uint32 ApplyNum = 8;
  if (has_applynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->applynum(), output);
  }

  // optional uint64 LastImpeachTime = 9;
  if (has_lastimpeachtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->lastimpeachtime(), output);
  }

  // optional uint64 MaterialNum = 10;
  if (has_materialnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->materialnum(), output);
  }

  // optional uint32 DayDonateNum = 11;
  if (has_daydonatenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->daydonatenum(), output);
  }

  // repeated .pb.TAllianceScience ArrScience = 12;
  for (int i = 0; i < this->arrscience_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->arrscience(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceDetailInfo)
}

::google::protobuf::uint8* TAllianceDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceDetailInfo)
  // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
  if (has_alliancesimpleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alliancesimpleinfo(), target);
  }

  // optional uint32 WeekStartLv = 2;
  if (has_weekstartlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weekstartlv(), target);
  }

  // optional uint64 WeekTaskScore = 3;
  if (has_weektaskscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->weektaskscore(), target);
  }

  // optional string Notice = 4;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->notice(), target);
  }

  // repeated .pb.TAllianceTip ArrTip = 5;
  for (int i = 0; i < this->arrtip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->arrtip(i), target);
  }

  // repeated .pb.TUserSimpleInfo ArrSignGuildLeaderUserInfo = 6;
  for (int i = 0; i < this->arrsignguildleaderuserinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->arrsignguildleaderuserinfo(i), target);
  }

  // repeated .pb.TAllianceVoteInfo ArrVoteInfo = 7;
  for (int i = 0; i < this->arrvoteinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->arrvoteinfo(i), target);
  }

  // optional uint32 ApplyNum = 8;
  if (has_applynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->applynum(), target);
  }

  // optional uint64 LastImpeachTime = 9;
  if (has_lastimpeachtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->lastimpeachtime(), target);
  }

  // optional uint64 MaterialNum = 10;
  if (has_materialnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->materialnum(), target);
  }

  // optional uint32 DayDonateNum = 11;
  if (has_daydonatenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->daydonatenum(), target);
  }

  // repeated .pb.TAllianceScience ArrScience = 12;
  for (int i = 0; i < this->arrscience_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->arrscience(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceDetailInfo)
  return target;
}

int TAllianceDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
    if (has_alliancesimpleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliancesimpleinfo());
    }

    // optional uint32 WeekStartLv = 2;
    if (has_weekstartlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekstartlv());
    }

    // optional uint64 WeekTaskScore = 3;
    if (has_weektaskscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weektaskscore());
    }

    // optional string Notice = 4;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional uint32 ApplyNum = 8;
    if (has_applynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applynum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 LastImpeachTime = 9;
    if (has_lastimpeachtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastimpeachtime());
    }

    // optional uint64 MaterialNum = 10;
    if (has_materialnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->materialnum());
    }

    // optional uint32 DayDonateNum = 11;
    if (has_daydonatenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daydonatenum());
    }

  }
  // repeated .pb.TAllianceTip ArrTip = 5;
  total_size += 1 * this->arrtip_size();
  for (int i = 0; i < this->arrtip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtip(i));
  }

  // repeated .pb.TUserSimpleInfo ArrSignGuildLeaderUserInfo = 6;
  total_size += 1 * this->arrsignguildleaderuserinfo_size();
  for (int i = 0; i < this->arrsignguildleaderuserinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrsignguildleaderuserinfo(i));
  }

  // repeated .pb.TAllianceVoteInfo ArrVoteInfo = 7;
  total_size += 1 * this->arrvoteinfo_size();
  for (int i = 0; i < this->arrvoteinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrvoteinfo(i));
  }

  // repeated .pb.TAllianceScience ArrScience = 12;
  total_size += 1 * this->arrscience_size();
  for (int i = 0; i < this->arrscience_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrscience(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceDetailInfo::MergeFrom(const TAllianceDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrtip_.MergeFrom(from.arrtip_);
  arrsignguildleaderuserinfo_.MergeFrom(from.arrsignguildleaderuserinfo_);
  arrvoteinfo_.MergeFrom(from.arrvoteinfo_);
  arrscience_.MergeFrom(from.arrscience_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alliancesimpleinfo()) {
      mutable_alliancesimpleinfo()->::pb::TAllianceSimpleInfo::MergeFrom(from.alliancesimpleinfo());
    }
    if (from.has_weekstartlv()) {
      set_weekstartlv(from.weekstartlv());
    }
    if (from.has_weektaskscore()) {
      set_weektaskscore(from.weektaskscore());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_applynum()) {
      set_applynum(from.applynum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lastimpeachtime()) {
      set_lastimpeachtime(from.lastimpeachtime());
    }
    if (from.has_materialnum()) {
      set_materialnum(from.materialnum());
    }
    if (from.has_daydonatenum()) {
      set_daydonatenum(from.daydonatenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceDetailInfo::CopyFrom(const TAllianceDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceDetailInfo::IsInitialized() const {

  return true;
}

void TAllianceDetailInfo::Swap(TAllianceDetailInfo* other) {
  if (other != this) {
    std::swap(alliancesimpleinfo_, other->alliancesimpleinfo_);
    std::swap(weekstartlv_, other->weekstartlv_);
    std::swap(weektaskscore_, other->weektaskscore_);
    std::swap(notice_, other->notice_);
    arrtip_.Swap(&other->arrtip_);
    arrsignguildleaderuserinfo_.Swap(&other->arrsignguildleaderuserinfo_);
    arrvoteinfo_.Swap(&other->arrvoteinfo_);
    std::swap(applynum_, other->applynum_);
    std::swap(lastimpeachtime_, other->lastimpeachtime_);
    std::swap(materialnum_, other->materialnum_);
    std::swap(daydonatenum_, other->daydonatenum_);
    arrscience_.Swap(&other->arrscience_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceDetailInfo_descriptor_;
  metadata.reflection = TAllianceDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceGuildUserMemberInfo::kUserInfoFieldNumber;
const int TAllianceGuildUserMemberInfo::kRPGPostFieldNumber;
const int TAllianceGuildUserMemberInfo::kTotalDonateFieldNumber;
const int TAllianceGuildUserMemberInfo::kWeekTaskScoreFieldNumber;
const int TAllianceGuildUserMemberInfo::kDayTaskStatusFieldNumber;
const int TAllianceGuildUserMemberInfo::kCommitTaskIdFieldNumber;
const int TAllianceGuildUserMemberInfo::kOnlineStatusFieldNumber;
#endif  // !_MSC_VER

TAllianceGuildUserMemberInfo::TAllianceGuildUserMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceGuildUserMemberInfo)
}

void TAllianceGuildUserMemberInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TAllianceGuildUserMemberInfo::TAllianceGuildUserMemberInfo(const TAllianceGuildUserMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceGuildUserMemberInfo)
}

void TAllianceGuildUserMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  rpgpost_ = 0;
  totaldonate_ = GOOGLE_ULONGLONG(0);
  weektaskscore_ = GOOGLE_ULONGLONG(0);
  daytaskstatus_ = 0u;
  committaskid_ = 0u;
  onlinestatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceGuildUserMemberInfo::~TAllianceGuildUserMemberInfo() {
  // @@protoc_insertion_point(destructor:pb.TAllianceGuildUserMemberInfo)
  SharedDtor();
}

void TAllianceGuildUserMemberInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TAllianceGuildUserMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceGuildUserMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceGuildUserMemberInfo_descriptor_;
}

const TAllianceGuildUserMemberInfo& TAllianceGuildUserMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceGuildUserMemberInfo* TAllianceGuildUserMemberInfo::default_instance_ = NULL;

TAllianceGuildUserMemberInfo* TAllianceGuildUserMemberInfo::New() const {
  return new TAllianceGuildUserMemberInfo;
}

void TAllianceGuildUserMemberInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAllianceGuildUserMemberInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(totaldonate_, onlinestatus_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceGuildUserMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceGuildUserMemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RPGPost;
        break;
      }

      // optional .pb.EGuildPost RPGPost = 2;
      case 2: {
        if (tag == 16) {
         parse_RPGPost:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EGuildPost_IsValid(value)) {
            set_rpgpost(static_cast< ::pb::EGuildPost >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TotalDonate;
        break;
      }

      // optional uint64 TotalDonate = 3;
      case 3: {
        if (tag == 24) {
         parse_TotalDonate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totaldonate_)));
          set_has_totaldonate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_WeekTaskScore;
        break;
      }

      // optional uint64 WeekTaskScore = 4;
      case 4: {
        if (tag == 32) {
         parse_WeekTaskScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weektaskscore_)));
          set_has_weektaskscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_DayTaskStatus;
        break;
      }

      // optional uint32 DayTaskStatus = 5;
      case 5: {
        if (tag == 40) {
         parse_DayTaskStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daytaskstatus_)));
          set_has_daytaskstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_CommitTaskId;
        break;
      }

      // optional uint32 CommitTaskId = 6;
      case 6: {
        if (tag == 48) {
         parse_CommitTaskId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &committaskid_)));
          set_has_committaskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_OnlineStatus;
        break;
      }

      // optional uint32 OnlineStatus = 7;
      case 7: {
        if (tag == 56) {
         parse_OnlineStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinestatus_)));
          set_has_onlinestatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceGuildUserMemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceGuildUserMemberInfo)
  return false;
#undef DO_
}

void TAllianceGuildUserMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceGuildUserMemberInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional .pb.EGuildPost RPGPost = 2;
  if (has_rpgpost()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->rpgpost(), output);
  }

  // optional uint64 TotalDonate = 3;
  if (has_totaldonate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->totaldonate(), output);
  }

  // optional uint64 WeekTaskScore = 4;
  if (has_weektaskscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->weektaskscore(), output);
  }

  // optional uint32 DayTaskStatus = 5;
  if (has_daytaskstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->daytaskstatus(), output);
  }

  // optional uint32 CommitTaskId = 6;
  if (has_committaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->committaskid(), output);
  }

  // optional uint32 OnlineStatus = 7;
  if (has_onlinestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->onlinestatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceGuildUserMemberInfo)
}

::google::protobuf::uint8* TAllianceGuildUserMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceGuildUserMemberInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional .pb.EGuildPost RPGPost = 2;
  if (has_rpgpost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->rpgpost(), target);
  }

  // optional uint64 TotalDonate = 3;
  if (has_totaldonate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->totaldonate(), target);
  }

  // optional uint64 WeekTaskScore = 4;
  if (has_weektaskscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->weektaskscore(), target);
  }

  // optional uint32 DayTaskStatus = 5;
  if (has_daytaskstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->daytaskstatus(), target);
  }

  // optional uint32 CommitTaskId = 6;
  if (has_committaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->committaskid(), target);
  }

  // optional uint32 OnlineStatus = 7;
  if (has_onlinestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->onlinestatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceGuildUserMemberInfo)
  return target;
}

int TAllianceGuildUserMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional .pb.EGuildPost RPGPost = 2;
    if (has_rpgpost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rpgpost());
    }

    // optional uint64 TotalDonate = 3;
    if (has_totaldonate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totaldonate());
    }

    // optional uint64 WeekTaskScore = 4;
    if (has_weektaskscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weektaskscore());
    }

    // optional uint32 DayTaskStatus = 5;
    if (has_daytaskstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daytaskstatus());
    }

    // optional uint32 CommitTaskId = 6;
    if (has_committaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->committaskid());
    }

    // optional uint32 OnlineStatus = 7;
    if (has_onlinestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinestatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceGuildUserMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceGuildUserMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceGuildUserMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceGuildUserMemberInfo::MergeFrom(const TAllianceGuildUserMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_rpgpost()) {
      set_rpgpost(from.rpgpost());
    }
    if (from.has_totaldonate()) {
      set_totaldonate(from.totaldonate());
    }
    if (from.has_weektaskscore()) {
      set_weektaskscore(from.weektaskscore());
    }
    if (from.has_daytaskstatus()) {
      set_daytaskstatus(from.daytaskstatus());
    }
    if (from.has_committaskid()) {
      set_committaskid(from.committaskid());
    }
    if (from.has_onlinestatus()) {
      set_onlinestatus(from.onlinestatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceGuildUserMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceGuildUserMemberInfo::CopyFrom(const TAllianceGuildUserMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceGuildUserMemberInfo::IsInitialized() const {

  return true;
}

void TAllianceGuildUserMemberInfo::Swap(TAllianceGuildUserMemberInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(rpgpost_, other->rpgpost_);
    std::swap(totaldonate_, other->totaldonate_);
    std::swap(weektaskscore_, other->weektaskscore_);
    std::swap(daytaskstatus_, other->daytaskstatus_);
    std::swap(committaskid_, other->committaskid_);
    std::swap(onlinestatus_, other->onlinestatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceGuildUserMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceGuildUserMemberInfo_descriptor_;
  metadata.reflection = TAllianceGuildUserMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceGuildMemberInfo::kServerIdFieldNumber;
const int TAllianceGuildMemberInfo::kGuildIdFieldNumber;
const int TAllianceGuildMemberInfo::kNameFieldNumber;
const int TAllianceGuildMemberInfo::kBannerNameFieldNumber;
const int TAllianceGuildMemberInfo::kBannerBaseFieldNumber;
const int TAllianceGuildMemberInfo::kLevelFieldNumber;
const int TAllianceGuildMemberInfo::kFightForceFieldNumber;
const int TAllianceGuildMemberInfo::kMemberNumFieldNumber;
const int TAllianceGuildMemberInfo::kLeaderUidFieldNumber;
const int TAllianceGuildMemberInfo::kLeaderUnameFieldNumber;
const int TAllianceGuildMemberInfo::kPostFieldNumber;
#endif  // !_MSC_VER

TAllianceGuildMemberInfo::TAllianceGuildMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceGuildMemberInfo)
}

void TAllianceGuildMemberInfo::InitAsDefaultInstance() {
}

TAllianceGuildMemberInfo::TAllianceGuildMemberInfo(const TAllianceGuildMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceGuildMemberInfo)
}

void TAllianceGuildMemberInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannerbase_ = 0u;
  level_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  membernum_ = 0u;
  leaderuid_ = GOOGLE_ULONGLONG(0);
  leaderuname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  post_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceGuildMemberInfo::~TAllianceGuildMemberInfo() {
  // @@protoc_insertion_point(destructor:pb.TAllianceGuildMemberInfo)
  SharedDtor();
}

void TAllianceGuildMemberInfo::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (leaderuname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leaderuname_;
  }
  if (this != default_instance_) {
  }
}

void TAllianceGuildMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceGuildMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceGuildMemberInfo_descriptor_;
}

const TAllianceGuildMemberInfo& TAllianceGuildMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceGuildMemberInfo* TAllianceGuildMemberInfo::default_instance_ = NULL;

TAllianceGuildMemberInfo* TAllianceGuildMemberInfo::New() const {
  return new TAllianceGuildMemberInfo;
}

void TAllianceGuildMemberInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAllianceGuildMemberInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(bannerbase_, fightforce_);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_bannername()) {
      if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bannername_->clear();
      }
    }
    membernum_ = 0u;
  }
  if (_has_bits_[8 / 32] & 1792) {
    leaderuid_ = GOOGLE_ULONGLONG(0);
    if (has_leaderuname()) {
      if (leaderuname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leaderuname_->clear();
      }
    }
    post_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceGuildMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceGuildMemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ServerId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GuildId;
        break;
      }

      // optional uint64 GuildId = 2;
      case 2: {
        if (tag == 16) {
         parse_GuildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // optional string Name = 3;
      case 3: {
        if (tag == 26) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BannerName;
        break;
      }

      // optional string BannerName = 4;
      case 4: {
        if (tag == 34) {
         parse_BannerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bannername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bannername().data(), this->bannername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bannername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BannerBase;
        break;
      }

      // optional uint32 BannerBase = 5;
      case 5: {
        if (tag == 40) {
         parse_BannerBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerbase_)));
          set_has_bannerbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 6;
      case 6: {
        if (tag == 48) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 7;
      case 7: {
        if (tag == 56) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_MemberNum;
        break;
      }

      // optional uint32 MemberNum = 8;
      case 8: {
        if (tag == 64) {
         parse_MemberNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membernum_)));
          set_has_membernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_LeaderUid;
        break;
      }

      // optional uint64 LeaderUid = 9;
      case 9: {
        if (tag == 72) {
         parse_LeaderUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderuid_)));
          set_has_leaderuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_LeaderUname;
        break;
      }

      // optional string LeaderUname = 10;
      case 10: {
        if (tag == 82) {
         parse_LeaderUname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderuname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leaderuname().data(), this->leaderuname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leaderuname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Post;
        break;
      }

      // optional .pb.EAlliancePost Post = 11;
      case 11: {
        if (tag == 88) {
         parse_Post:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAlliancePost_IsValid(value)) {
            set_post(static_cast< ::pb::EAlliancePost >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceGuildMemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceGuildMemberInfo)
  return false;
#undef DO_
}

void TAllianceGuildMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceGuildMemberInfo)
  // optional string ServerId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverid(), output);
  }

  // optional uint64 GuildId = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // optional string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string BannerName = 4;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bannername(), output);
  }

  // optional uint32 BannerBase = 5;
  if (has_bannerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bannerbase(), output);
  }

  // optional uint32 Level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint64 FightForce = 7;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->fightforce(), output);
  }

  // optional uint32 MemberNum = 8;
  if (has_membernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->membernum(), output);
  }

  // optional uint64 LeaderUid = 9;
  if (has_leaderuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->leaderuid(), output);
  }

  // optional string LeaderUname = 10;
  if (has_leaderuname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leaderuname().data(), this->leaderuname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leaderuname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->leaderuname(), output);
  }

  // optional .pb.EAlliancePost Post = 11;
  if (has_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->post(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceGuildMemberInfo)
}

::google::protobuf::uint8* TAllianceGuildMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceGuildMemberInfo)
  // optional string ServerId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverid(), target);
  }

  // optional uint64 GuildId = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // optional string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string BannerName = 4;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bannername(), target);
  }

  // optional uint32 BannerBase = 5;
  if (has_bannerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bannerbase(), target);
  }

  // optional uint32 Level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint64 FightForce = 7;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->fightforce(), target);
  }

  // optional uint32 MemberNum = 8;
  if (has_membernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->membernum(), target);
  }

  // optional uint64 LeaderUid = 9;
  if (has_leaderuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->leaderuid(), target);
  }

  // optional string LeaderUname = 10;
  if (has_leaderuname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leaderuname().data(), this->leaderuname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leaderuname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->leaderuname(), target);
  }

  // optional .pb.EAlliancePost Post = 11;
  if (has_post()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->post(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceGuildMemberInfo)
  return target;
}

int TAllianceGuildMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ServerId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional uint64 GuildId = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string BannerName = 4;
    if (has_bannername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bannername());
    }

    // optional uint32 BannerBase = 5;
    if (has_bannerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerbase());
    }

    // optional uint32 Level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 FightForce = 7;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint32 MemberNum = 8;
    if (has_membernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->membernum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 LeaderUid = 9;
    if (has_leaderuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderuid());
    }

    // optional string LeaderUname = 10;
    if (has_leaderuname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leaderuname());
    }

    // optional .pb.EAlliancePost Post = 11;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->post());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceGuildMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceGuildMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceGuildMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceGuildMemberInfo::MergeFrom(const TAllianceGuildMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_bannername()) {
      set_bannername(from.bannername());
    }
    if (from.has_bannerbase()) {
      set_bannerbase(from.bannerbase());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_membernum()) {
      set_membernum(from.membernum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_leaderuid()) {
      set_leaderuid(from.leaderuid());
    }
    if (from.has_leaderuname()) {
      set_leaderuname(from.leaderuname());
    }
    if (from.has_post()) {
      set_post(from.post());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceGuildMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceGuildMemberInfo::CopyFrom(const TAllianceGuildMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceGuildMemberInfo::IsInitialized() const {

  return true;
}

void TAllianceGuildMemberInfo::Swap(TAllianceGuildMemberInfo* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(guildid_, other->guildid_);
    std::swap(name_, other->name_);
    std::swap(bannername_, other->bannername_);
    std::swap(bannerbase_, other->bannerbase_);
    std::swap(level_, other->level_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(membernum_, other->membernum_);
    std::swap(leaderuid_, other->leaderuid_);
    std::swap(leaderuname_, other->leaderuname_);
    std::swap(post_, other->post_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceGuildMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceGuildMemberInfo_descriptor_;
  metadata.reflection = TAllianceGuildMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceGuildMemberInfoWithUser::kGuildInfoFieldNumber;
const int TAllianceGuildMemberInfoWithUser::kArrUserFieldNumber;
#endif  // !_MSC_VER

TAllianceGuildMemberInfoWithUser::TAllianceGuildMemberInfoWithUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceGuildMemberInfoWithUser)
}

void TAllianceGuildMemberInfoWithUser::InitAsDefaultInstance() {
  guildinfo_ = const_cast< ::pb::TAllianceGuildMemberInfo*>(&::pb::TAllianceGuildMemberInfo::default_instance());
}

TAllianceGuildMemberInfoWithUser::TAllianceGuildMemberInfoWithUser(const TAllianceGuildMemberInfoWithUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceGuildMemberInfoWithUser)
}

void TAllianceGuildMemberInfoWithUser::SharedCtor() {
  _cached_size_ = 0;
  guildinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceGuildMemberInfoWithUser::~TAllianceGuildMemberInfoWithUser() {
  // @@protoc_insertion_point(destructor:pb.TAllianceGuildMemberInfoWithUser)
  SharedDtor();
}

void TAllianceGuildMemberInfoWithUser::SharedDtor() {
  if (this != default_instance_) {
    delete guildinfo_;
  }
}

void TAllianceGuildMemberInfoWithUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceGuildMemberInfoWithUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceGuildMemberInfoWithUser_descriptor_;
}

const TAllianceGuildMemberInfoWithUser& TAllianceGuildMemberInfoWithUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceGuildMemberInfoWithUser* TAllianceGuildMemberInfoWithUser::default_instance_ = NULL;

TAllianceGuildMemberInfoWithUser* TAllianceGuildMemberInfoWithUser::New() const {
  return new TAllianceGuildMemberInfoWithUser;
}

void TAllianceGuildMemberInfoWithUser::Clear() {
  if (has_guildinfo()) {
    if (guildinfo_ != NULL) guildinfo_->::pb::TAllianceGuildMemberInfo::Clear();
  }
  arruser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceGuildMemberInfoWithUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceGuildMemberInfoWithUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAllianceGuildMemberInfo GuildInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrUser;
        break;
      }

      // repeated .pb.TAllianceGuildUserMemberInfo ArrUser = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arruser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrUser;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceGuildMemberInfoWithUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceGuildMemberInfoWithUser)
  return false;
#undef DO_
}

void TAllianceGuildMemberInfoWithUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceGuildMemberInfoWithUser)
  // optional .pb.TAllianceGuildMemberInfo GuildInfo = 1;
  if (has_guildinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildinfo(), output);
  }

  // repeated .pb.TAllianceGuildUserMemberInfo ArrUser = 2;
  for (int i = 0; i < this->arruser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arruser(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceGuildMemberInfoWithUser)
}

::google::protobuf::uint8* TAllianceGuildMemberInfoWithUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceGuildMemberInfoWithUser)
  // optional .pb.TAllianceGuildMemberInfo GuildInfo = 1;
  if (has_guildinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildinfo(), target);
  }

  // repeated .pb.TAllianceGuildUserMemberInfo ArrUser = 2;
  for (int i = 0; i < this->arruser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arruser(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceGuildMemberInfoWithUser)
  return target;
}

int TAllianceGuildMemberInfoWithUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAllianceGuildMemberInfo GuildInfo = 1;
    if (has_guildinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildinfo());
    }

  }
  // repeated .pb.TAllianceGuildUserMemberInfo ArrUser = 2;
  total_size += 1 * this->arruser_size();
  for (int i = 0; i < this->arruser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arruser(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceGuildMemberInfoWithUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceGuildMemberInfoWithUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceGuildMemberInfoWithUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceGuildMemberInfoWithUser::MergeFrom(const TAllianceGuildMemberInfoWithUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  arruser_.MergeFrom(from.arruser_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildinfo()) {
      mutable_guildinfo()->::pb::TAllianceGuildMemberInfo::MergeFrom(from.guildinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceGuildMemberInfoWithUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceGuildMemberInfoWithUser::CopyFrom(const TAllianceGuildMemberInfoWithUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceGuildMemberInfoWithUser::IsInitialized() const {

  return true;
}

void TAllianceGuildMemberInfoWithUser::Swap(TAllianceGuildMemberInfoWithUser* other) {
  if (other != this) {
    std::swap(guildinfo_, other->guildinfo_);
    arruser_.Swap(&other->arruser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceGuildMemberInfoWithUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceGuildMemberInfoWithUser_descriptor_;
  metadata.reflection = TAllianceGuildMemberInfoWithUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceApplyGuildInfo::kLeaderUserInfoFieldNumber;
const int TAllianceApplyGuildInfo::kMemberNumFieldNumber;
const int TAllianceApplyGuildInfo::kGuildFightForceFieldNumber;
const int TAllianceApplyGuildInfo::kGuildLevelFieldNumber;
#endif  // !_MSC_VER

TAllianceApplyGuildInfo::TAllianceApplyGuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceApplyGuildInfo)
}

void TAllianceApplyGuildInfo::InitAsDefaultInstance() {
  leaderuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TAllianceApplyGuildInfo::TAllianceApplyGuildInfo(const TAllianceApplyGuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceApplyGuildInfo)
}

void TAllianceApplyGuildInfo::SharedCtor() {
  _cached_size_ = 0;
  leaderuserinfo_ = NULL;
  membernum_ = 0u;
  guildfightforce_ = GOOGLE_ULONGLONG(0);
  guildlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceApplyGuildInfo::~TAllianceApplyGuildInfo() {
  // @@protoc_insertion_point(destructor:pb.TAllianceApplyGuildInfo)
  SharedDtor();
}

void TAllianceApplyGuildInfo::SharedDtor() {
  if (this != default_instance_) {
    delete leaderuserinfo_;
  }
}

void TAllianceApplyGuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceApplyGuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceApplyGuildInfo_descriptor_;
}

const TAllianceApplyGuildInfo& TAllianceApplyGuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceApplyGuildInfo* TAllianceApplyGuildInfo::default_instance_ = NULL;

TAllianceApplyGuildInfo* TAllianceApplyGuildInfo::New() const {
  return new TAllianceApplyGuildInfo;
}

void TAllianceApplyGuildInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAllianceApplyGuildInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(guildfightforce_, guildlevel_);
    if (has_leaderuserinfo()) {
      if (leaderuserinfo_ != NULL) leaderuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceApplyGuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceApplyGuildInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo LeaderUserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaderuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MemberNum;
        break;
      }

      // optional uint32 MemberNum = 2;
      case 2: {
        if (tag == 16) {
         parse_MemberNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membernum_)));
          set_has_membernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GuildFightForce;
        break;
      }

      // optional uint64 GuildFightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_GuildFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildfightforce_)));
          set_has_guildfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_GuildLevel;
        break;
      }

      // optional uint32 GuildLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_GuildLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildlevel_)));
          set_has_guildlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceApplyGuildInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceApplyGuildInfo)
  return false;
#undef DO_
}

void TAllianceApplyGuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceApplyGuildInfo)
  // optional .pb.TUserSimpleInfo LeaderUserInfo = 1;
  if (has_leaderuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->leaderuserinfo(), output);
  }

  // optional uint32 MemberNum = 2;
  if (has_membernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->membernum(), output);
  }

  // optional uint64 GuildFightForce = 3;
  if (has_guildfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildfightforce(), output);
  }

  // optional uint32 GuildLevel = 4;
  if (has_guildlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->guildlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceApplyGuildInfo)
}

::google::protobuf::uint8* TAllianceApplyGuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceApplyGuildInfo)
  // optional .pb.TUserSimpleInfo LeaderUserInfo = 1;
  if (has_leaderuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->leaderuserinfo(), target);
  }

  // optional uint32 MemberNum = 2;
  if (has_membernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->membernum(), target);
  }

  // optional uint64 GuildFightForce = 3;
  if (has_guildfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildfightforce(), target);
  }

  // optional uint32 GuildLevel = 4;
  if (has_guildlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->guildlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceApplyGuildInfo)
  return target;
}

int TAllianceApplyGuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo LeaderUserInfo = 1;
    if (has_leaderuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaderuserinfo());
    }

    // optional uint32 MemberNum = 2;
    if (has_membernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->membernum());
    }

    // optional uint64 GuildFightForce = 3;
    if (has_guildfightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildfightforce());
    }

    // optional uint32 GuildLevel = 4;
    if (has_guildlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceApplyGuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceApplyGuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceApplyGuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceApplyGuildInfo::MergeFrom(const TAllianceApplyGuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leaderuserinfo()) {
      mutable_leaderuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.leaderuserinfo());
    }
    if (from.has_membernum()) {
      set_membernum(from.membernum());
    }
    if (from.has_guildfightforce()) {
      set_guildfightforce(from.guildfightforce());
    }
    if (from.has_guildlevel()) {
      set_guildlevel(from.guildlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceApplyGuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceApplyGuildInfo::CopyFrom(const TAllianceApplyGuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceApplyGuildInfo::IsInitialized() const {

  return true;
}

void TAllianceApplyGuildInfo::Swap(TAllianceApplyGuildInfo* other) {
  if (other != this) {
    std::swap(leaderuserinfo_, other->leaderuserinfo_);
    std::swap(membernum_, other->membernum_);
    std::swap(guildfightforce_, other->guildfightforce_);
    std::swap(guildlevel_, other->guildlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceApplyGuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceApplyGuildInfo_descriptor_;
  metadata.reflection = TAllianceApplyGuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInnerAllianceGetServerTeamInfoRsp::kTeamIdFieldNumber;
const int TInnerAllianceGetServerTeamInfoRsp::kNeedOpenDayFieldNumber;
#endif  // !_MSC_VER

TInnerAllianceGetServerTeamInfoRsp::TInnerAllianceGetServerTeamInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInnerAllianceGetServerTeamInfoRsp)
}

void TInnerAllianceGetServerTeamInfoRsp::InitAsDefaultInstance() {
}

TInnerAllianceGetServerTeamInfoRsp::TInnerAllianceGetServerTeamInfoRsp(const TInnerAllianceGetServerTeamInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInnerAllianceGetServerTeamInfoRsp)
}

void TInnerAllianceGetServerTeamInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  needopenday_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInnerAllianceGetServerTeamInfoRsp::~TInnerAllianceGetServerTeamInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TInnerAllianceGetServerTeamInfoRsp)
  SharedDtor();
}

void TInnerAllianceGetServerTeamInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInnerAllianceGetServerTeamInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInnerAllianceGetServerTeamInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInnerAllianceGetServerTeamInfoRsp_descriptor_;
}

const TInnerAllianceGetServerTeamInfoRsp& TInnerAllianceGetServerTeamInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TInnerAllianceGetServerTeamInfoRsp* TInnerAllianceGetServerTeamInfoRsp::default_instance_ = NULL;

TInnerAllianceGetServerTeamInfoRsp* TInnerAllianceGetServerTeamInfoRsp::New() const {
  return new TInnerAllianceGetServerTeamInfoRsp;
}

void TInnerAllianceGetServerTeamInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TInnerAllianceGetServerTeamInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, needopenday_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInnerAllianceGetServerTeamInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInnerAllianceGetServerTeamInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NeedOpenDay;
        break;
      }

      // optional uint32 NeedOpenDay = 2;
      case 2: {
        if (tag == 16) {
         parse_NeedOpenDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needopenday_)));
          set_has_needopenday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInnerAllianceGetServerTeamInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInnerAllianceGetServerTeamInfoRsp)
  return false;
#undef DO_
}

void TInnerAllianceGetServerTeamInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInnerAllianceGetServerTeamInfoRsp)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint32 NeedOpenDay = 2;
  if (has_needopenday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->needopenday(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInnerAllianceGetServerTeamInfoRsp)
}

::google::protobuf::uint8* TInnerAllianceGetServerTeamInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInnerAllianceGetServerTeamInfoRsp)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint32 NeedOpenDay = 2;
  if (has_needopenday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->needopenday(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInnerAllianceGetServerTeamInfoRsp)
  return target;
}

int TInnerAllianceGetServerTeamInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 NeedOpenDay = 2;
    if (has_needopenday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needopenday());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInnerAllianceGetServerTeamInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInnerAllianceGetServerTeamInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInnerAllianceGetServerTeamInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInnerAllianceGetServerTeamInfoRsp::MergeFrom(const TInnerAllianceGetServerTeamInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_needopenday()) {
      set_needopenday(from.needopenday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInnerAllianceGetServerTeamInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInnerAllianceGetServerTeamInfoRsp::CopyFrom(const TInnerAllianceGetServerTeamInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInnerAllianceGetServerTeamInfoRsp::IsInitialized() const {

  return true;
}

void TInnerAllianceGetServerTeamInfoRsp::Swap(TInnerAllianceGetServerTeamInfoRsp* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(needopenday_, other->needopenday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInnerAllianceGetServerTeamInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInnerAllianceGetServerTeamInfoRsp_descriptor_;
  metadata.reflection = TInnerAllianceGetServerTeamInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInnerAllianceGetAllianceInfoRsp::kUserInfoFieldNumber;
const int TInnerAllianceGetAllianceInfoRsp::kAllianceDetailInfoFieldNumber;
#endif  // !_MSC_VER

TInnerAllianceGetAllianceInfoRsp::TInnerAllianceGetAllianceInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInnerAllianceGetAllianceInfoRsp)
}

void TInnerAllianceGetAllianceInfoRsp::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TAllianceUserInfo*>(&::pb::TAllianceUserInfo::default_instance());
  alliancedetailinfo_ = const_cast< ::pb::TAllianceDetailInfo*>(&::pb::TAllianceDetailInfo::default_instance());
}

TInnerAllianceGetAllianceInfoRsp::TInnerAllianceGetAllianceInfoRsp(const TInnerAllianceGetAllianceInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInnerAllianceGetAllianceInfoRsp)
}

void TInnerAllianceGetAllianceInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  alliancedetailinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInnerAllianceGetAllianceInfoRsp::~TInnerAllianceGetAllianceInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TInnerAllianceGetAllianceInfoRsp)
  SharedDtor();
}

void TInnerAllianceGetAllianceInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
    delete alliancedetailinfo_;
  }
}

void TInnerAllianceGetAllianceInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInnerAllianceGetAllianceInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInnerAllianceGetAllianceInfoRsp_descriptor_;
}

const TInnerAllianceGetAllianceInfoRsp& TInnerAllianceGetAllianceInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TInnerAllianceGetAllianceInfoRsp* TInnerAllianceGetAllianceInfoRsp::default_instance_ = NULL;

TInnerAllianceGetAllianceInfoRsp* TInnerAllianceGetAllianceInfoRsp::New() const {
  return new TInnerAllianceGetAllianceInfoRsp;
}

void TInnerAllianceGetAllianceInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TAllianceUserInfo::Clear();
    }
    if (has_alliancedetailinfo()) {
      if (alliancedetailinfo_ != NULL) alliancedetailinfo_->::pb::TAllianceDetailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInnerAllianceGetAllianceInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInnerAllianceGetAllianceInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAllianceUserInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AllianceDetailInfo;
        break;
      }

      // optional .pb.TAllianceDetailInfo AllianceDetailInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_AllianceDetailInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliancedetailinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInnerAllianceGetAllianceInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInnerAllianceGetAllianceInfoRsp)
  return false;
#undef DO_
}

void TInnerAllianceGetAllianceInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInnerAllianceGetAllianceInfoRsp)
  // optional .pb.TAllianceUserInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional .pb.TAllianceDetailInfo AllianceDetailInfo = 2;
  if (has_alliancedetailinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alliancedetailinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInnerAllianceGetAllianceInfoRsp)
}

::google::protobuf::uint8* TInnerAllianceGetAllianceInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInnerAllianceGetAllianceInfoRsp)
  // optional .pb.TAllianceUserInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional .pb.TAllianceDetailInfo AllianceDetailInfo = 2;
  if (has_alliancedetailinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alliancedetailinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInnerAllianceGetAllianceInfoRsp)
  return target;
}

int TInnerAllianceGetAllianceInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAllianceUserInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional .pb.TAllianceDetailInfo AllianceDetailInfo = 2;
    if (has_alliancedetailinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliancedetailinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInnerAllianceGetAllianceInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInnerAllianceGetAllianceInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInnerAllianceGetAllianceInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInnerAllianceGetAllianceInfoRsp::MergeFrom(const TInnerAllianceGetAllianceInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TAllianceUserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_alliancedetailinfo()) {
      mutable_alliancedetailinfo()->::pb::TAllianceDetailInfo::MergeFrom(from.alliancedetailinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInnerAllianceGetAllianceInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInnerAllianceGetAllianceInfoRsp::CopyFrom(const TInnerAllianceGetAllianceInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInnerAllianceGetAllianceInfoRsp::IsInitialized() const {

  return true;
}

void TInnerAllianceGetAllianceInfoRsp::Swap(TInnerAllianceGetAllianceInfoRsp* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(alliancedetailinfo_, other->alliancedetailinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInnerAllianceGetAllianceInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInnerAllianceGetAllianceInfoRsp_descriptor_;
  metadata.reflection = TInnerAllianceGetAllianceInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInnerAllianceRefreshTaskReq::kTaskIdFieldNumber;
#endif  // !_MSC_VER

TInnerAllianceRefreshTaskReq::TInnerAllianceRefreshTaskReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInnerAllianceRefreshTaskReq)
}

void TInnerAllianceRefreshTaskReq::InitAsDefaultInstance() {
}

TInnerAllianceRefreshTaskReq::TInnerAllianceRefreshTaskReq(const TInnerAllianceRefreshTaskReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInnerAllianceRefreshTaskReq)
}

void TInnerAllianceRefreshTaskReq::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInnerAllianceRefreshTaskReq::~TInnerAllianceRefreshTaskReq() {
  // @@protoc_insertion_point(destructor:pb.TInnerAllianceRefreshTaskReq)
  SharedDtor();
}

void TInnerAllianceRefreshTaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInnerAllianceRefreshTaskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInnerAllianceRefreshTaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInnerAllianceRefreshTaskReq_descriptor_;
}

const TInnerAllianceRefreshTaskReq& TInnerAllianceRefreshTaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TInnerAllianceRefreshTaskReq* TInnerAllianceRefreshTaskReq::default_instance_ = NULL;

TInnerAllianceRefreshTaskReq* TInnerAllianceRefreshTaskReq::New() const {
  return new TInnerAllianceRefreshTaskReq;
}

void TInnerAllianceRefreshTaskReq::Clear() {
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInnerAllianceRefreshTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInnerAllianceRefreshTaskReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInnerAllianceRefreshTaskReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInnerAllianceRefreshTaskReq)
  return false;
#undef DO_
}

void TInnerAllianceRefreshTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInnerAllianceRefreshTaskReq)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInnerAllianceRefreshTaskReq)
}

::google::protobuf::uint8* TInnerAllianceRefreshTaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInnerAllianceRefreshTaskReq)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInnerAllianceRefreshTaskReq)
  return target;
}

int TInnerAllianceRefreshTaskReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInnerAllianceRefreshTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInnerAllianceRefreshTaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInnerAllianceRefreshTaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInnerAllianceRefreshTaskReq::MergeFrom(const TInnerAllianceRefreshTaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInnerAllianceRefreshTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInnerAllianceRefreshTaskReq::CopyFrom(const TInnerAllianceRefreshTaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInnerAllianceRefreshTaskReq::IsInitialized() const {

  return true;
}

void TInnerAllianceRefreshTaskReq::Swap(TInnerAllianceRefreshTaskReq* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInnerAllianceRefreshTaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInnerAllianceRefreshTaskReq_descriptor_;
  metadata.reflection = TInnerAllianceRefreshTaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInnerAllianceUpgradeTaskReq::kTaskIdFieldNumber;
#endif  // !_MSC_VER

TInnerAllianceUpgradeTaskReq::TInnerAllianceUpgradeTaskReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInnerAllianceUpgradeTaskReq)
}

void TInnerAllianceUpgradeTaskReq::InitAsDefaultInstance() {
}

TInnerAllianceUpgradeTaskReq::TInnerAllianceUpgradeTaskReq(const TInnerAllianceUpgradeTaskReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInnerAllianceUpgradeTaskReq)
}

void TInnerAllianceUpgradeTaskReq::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInnerAllianceUpgradeTaskReq::~TInnerAllianceUpgradeTaskReq() {
  // @@protoc_insertion_point(destructor:pb.TInnerAllianceUpgradeTaskReq)
  SharedDtor();
}

void TInnerAllianceUpgradeTaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInnerAllianceUpgradeTaskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInnerAllianceUpgradeTaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInnerAllianceUpgradeTaskReq_descriptor_;
}

const TInnerAllianceUpgradeTaskReq& TInnerAllianceUpgradeTaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TInnerAllianceUpgradeTaskReq* TInnerAllianceUpgradeTaskReq::default_instance_ = NULL;

TInnerAllianceUpgradeTaskReq* TInnerAllianceUpgradeTaskReq::New() const {
  return new TInnerAllianceUpgradeTaskReq;
}

void TInnerAllianceUpgradeTaskReq::Clear() {
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInnerAllianceUpgradeTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInnerAllianceUpgradeTaskReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInnerAllianceUpgradeTaskReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInnerAllianceUpgradeTaskReq)
  return false;
#undef DO_
}

void TInnerAllianceUpgradeTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInnerAllianceUpgradeTaskReq)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInnerAllianceUpgradeTaskReq)
}

::google::protobuf::uint8* TInnerAllianceUpgradeTaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInnerAllianceUpgradeTaskReq)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInnerAllianceUpgradeTaskReq)
  return target;
}

int TInnerAllianceUpgradeTaskReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInnerAllianceUpgradeTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInnerAllianceUpgradeTaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInnerAllianceUpgradeTaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInnerAllianceUpgradeTaskReq::MergeFrom(const TInnerAllianceUpgradeTaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInnerAllianceUpgradeTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInnerAllianceUpgradeTaskReq::CopyFrom(const TInnerAllianceUpgradeTaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInnerAllianceUpgradeTaskReq::IsInitialized() const {

  return true;
}

void TInnerAllianceUpgradeTaskReq::Swap(TInnerAllianceUpgradeTaskReq* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInnerAllianceUpgradeTaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInnerAllianceUpgradeTaskReq_descriptor_;
  metadata.reflection = TInnerAllianceUpgradeTaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInnerAllianceUpgradeToLv6TaskReq::kTaskIdFieldNumber;
#endif  // !_MSC_VER

TInnerAllianceUpgradeToLv6TaskReq::TInnerAllianceUpgradeToLv6TaskReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInnerAllianceUpgradeToLv6TaskReq)
}

void TInnerAllianceUpgradeToLv6TaskReq::InitAsDefaultInstance() {
}

TInnerAllianceUpgradeToLv6TaskReq::TInnerAllianceUpgradeToLv6TaskReq(const TInnerAllianceUpgradeToLv6TaskReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInnerAllianceUpgradeToLv6TaskReq)
}

void TInnerAllianceUpgradeToLv6TaskReq::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInnerAllianceUpgradeToLv6TaskReq::~TInnerAllianceUpgradeToLv6TaskReq() {
  // @@protoc_insertion_point(destructor:pb.TInnerAllianceUpgradeToLv6TaskReq)
  SharedDtor();
}

void TInnerAllianceUpgradeToLv6TaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInnerAllianceUpgradeToLv6TaskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInnerAllianceUpgradeToLv6TaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInnerAllianceUpgradeToLv6TaskReq_descriptor_;
}

const TInnerAllianceUpgradeToLv6TaskReq& TInnerAllianceUpgradeToLv6TaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TInnerAllianceUpgradeToLv6TaskReq* TInnerAllianceUpgradeToLv6TaskReq::default_instance_ = NULL;

TInnerAllianceUpgradeToLv6TaskReq* TInnerAllianceUpgradeToLv6TaskReq::New() const {
  return new TInnerAllianceUpgradeToLv6TaskReq;
}

void TInnerAllianceUpgradeToLv6TaskReq::Clear() {
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInnerAllianceUpgradeToLv6TaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInnerAllianceUpgradeToLv6TaskReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInnerAllianceUpgradeToLv6TaskReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInnerAllianceUpgradeToLv6TaskReq)
  return false;
#undef DO_
}

void TInnerAllianceUpgradeToLv6TaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInnerAllianceUpgradeToLv6TaskReq)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInnerAllianceUpgradeToLv6TaskReq)
}

::google::protobuf::uint8* TInnerAllianceUpgradeToLv6TaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInnerAllianceUpgradeToLv6TaskReq)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInnerAllianceUpgradeToLv6TaskReq)
  return target;
}

int TInnerAllianceUpgradeToLv6TaskReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInnerAllianceUpgradeToLv6TaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInnerAllianceUpgradeToLv6TaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInnerAllianceUpgradeToLv6TaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInnerAllianceUpgradeToLv6TaskReq::MergeFrom(const TInnerAllianceUpgradeToLv6TaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInnerAllianceUpgradeToLv6TaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInnerAllianceUpgradeToLv6TaskReq::CopyFrom(const TInnerAllianceUpgradeToLv6TaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInnerAllianceUpgradeToLv6TaskReq::IsInitialized() const {

  return true;
}

void TInnerAllianceUpgradeToLv6TaskReq::Swap(TInnerAllianceUpgradeToLv6TaskReq* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInnerAllianceUpgradeToLv6TaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInnerAllianceUpgradeToLv6TaskReq_descriptor_;
  metadata.reflection = TInnerAllianceUpgradeToLv6TaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInnerAllianceCommitTaskReq::kTaskIdFieldNumber;
#endif  // !_MSC_VER

TInnerAllianceCommitTaskReq::TInnerAllianceCommitTaskReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInnerAllianceCommitTaskReq)
}

void TInnerAllianceCommitTaskReq::InitAsDefaultInstance() {
}

TInnerAllianceCommitTaskReq::TInnerAllianceCommitTaskReq(const TInnerAllianceCommitTaskReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInnerAllianceCommitTaskReq)
}

void TInnerAllianceCommitTaskReq::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInnerAllianceCommitTaskReq::~TInnerAllianceCommitTaskReq() {
  // @@protoc_insertion_point(destructor:pb.TInnerAllianceCommitTaskReq)
  SharedDtor();
}

void TInnerAllianceCommitTaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInnerAllianceCommitTaskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInnerAllianceCommitTaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInnerAllianceCommitTaskReq_descriptor_;
}

const TInnerAllianceCommitTaskReq& TInnerAllianceCommitTaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TInnerAllianceCommitTaskReq* TInnerAllianceCommitTaskReq::default_instance_ = NULL;

TInnerAllianceCommitTaskReq* TInnerAllianceCommitTaskReq::New() const {
  return new TInnerAllianceCommitTaskReq;
}

void TInnerAllianceCommitTaskReq::Clear() {
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInnerAllianceCommitTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInnerAllianceCommitTaskReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInnerAllianceCommitTaskReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInnerAllianceCommitTaskReq)
  return false;
#undef DO_
}

void TInnerAllianceCommitTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInnerAllianceCommitTaskReq)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInnerAllianceCommitTaskReq)
}

::google::protobuf::uint8* TInnerAllianceCommitTaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInnerAllianceCommitTaskReq)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInnerAllianceCommitTaskReq)
  return target;
}

int TInnerAllianceCommitTaskReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInnerAllianceCommitTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInnerAllianceCommitTaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInnerAllianceCommitTaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInnerAllianceCommitTaskReq::MergeFrom(const TInnerAllianceCommitTaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInnerAllianceCommitTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInnerAllianceCommitTaskReq::CopyFrom(const TInnerAllianceCommitTaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInnerAllianceCommitTaskReq::IsInitialized() const {

  return true;
}

void TInnerAllianceCommitTaskReq::Swap(TInnerAllianceCommitTaskReq* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInnerAllianceCommitTaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInnerAllianceCommitTaskReq_descriptor_;
  metadata.reflection = TInnerAllianceCommitTaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInnerAllianceCommitTaskRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TInnerAllianceCommitTaskRsp::TInnerAllianceCommitTaskRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInnerAllianceCommitTaskRsp)
}

void TInnerAllianceCommitTaskRsp::InitAsDefaultInstance() {
}

TInnerAllianceCommitTaskRsp::TInnerAllianceCommitTaskRsp(const TInnerAllianceCommitTaskRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInnerAllianceCommitTaskRsp)
}

void TInnerAllianceCommitTaskRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInnerAllianceCommitTaskRsp::~TInnerAllianceCommitTaskRsp() {
  // @@protoc_insertion_point(destructor:pb.TInnerAllianceCommitTaskRsp)
  SharedDtor();
}

void TInnerAllianceCommitTaskRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInnerAllianceCommitTaskRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInnerAllianceCommitTaskRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInnerAllianceCommitTaskRsp_descriptor_;
}

const TInnerAllianceCommitTaskRsp& TInnerAllianceCommitTaskRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TInnerAllianceCommitTaskRsp* TInnerAllianceCommitTaskRsp::default_instance_ = NULL;

TInnerAllianceCommitTaskRsp* TInnerAllianceCommitTaskRsp::New() const {
  return new TInnerAllianceCommitTaskRsp;
}

void TInnerAllianceCommitTaskRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInnerAllianceCommitTaskRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInnerAllianceCommitTaskRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInnerAllianceCommitTaskRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInnerAllianceCommitTaskRsp)
  return false;
#undef DO_
}

void TInnerAllianceCommitTaskRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInnerAllianceCommitTaskRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInnerAllianceCommitTaskRsp)
}

::google::protobuf::uint8* TInnerAllianceCommitTaskRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInnerAllianceCommitTaskRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInnerAllianceCommitTaskRsp)
  return target;
}

int TInnerAllianceCommitTaskRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInnerAllianceCommitTaskRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInnerAllianceCommitTaskRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInnerAllianceCommitTaskRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInnerAllianceCommitTaskRsp::MergeFrom(const TInnerAllianceCommitTaskRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInnerAllianceCommitTaskRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInnerAllianceCommitTaskRsp::CopyFrom(const TInnerAllianceCommitTaskRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInnerAllianceCommitTaskRsp::IsInitialized() const {

  return true;
}

void TInnerAllianceCommitTaskRsp::Swap(TInnerAllianceCommitTaskRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInnerAllianceCommitTaskRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInnerAllianceCommitTaskRsp_descriptor_;
  metadata.reflection = TInnerAllianceCommitTaskRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInnerAllianceReceiveTaskRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

TInnerAllianceReceiveTaskRewardReq::TInnerAllianceReceiveTaskRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInnerAllianceReceiveTaskRewardReq)
}

void TInnerAllianceReceiveTaskRewardReq::InitAsDefaultInstance() {
}

TInnerAllianceReceiveTaskRewardReq::TInnerAllianceReceiveTaskRewardReq(const TInnerAllianceReceiveTaskRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInnerAllianceReceiveTaskRewardReq)
}

void TInnerAllianceReceiveTaskRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInnerAllianceReceiveTaskRewardReq::~TInnerAllianceReceiveTaskRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TInnerAllianceReceiveTaskRewardReq)
  SharedDtor();
}

void TInnerAllianceReceiveTaskRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInnerAllianceReceiveTaskRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInnerAllianceReceiveTaskRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInnerAllianceReceiveTaskRewardReq_descriptor_;
}

const TInnerAllianceReceiveTaskRewardReq& TInnerAllianceReceiveTaskRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TInnerAllianceReceiveTaskRewardReq* TInnerAllianceReceiveTaskRewardReq::default_instance_ = NULL;

TInnerAllianceReceiveTaskRewardReq* TInnerAllianceReceiveTaskRewardReq::New() const {
  return new TInnerAllianceReceiveTaskRewardReq;
}

void TInnerAllianceReceiveTaskRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInnerAllianceReceiveTaskRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInnerAllianceReceiveTaskRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInnerAllianceReceiveTaskRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInnerAllianceReceiveTaskRewardReq)
  return false;
#undef DO_
}

void TInnerAllianceReceiveTaskRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInnerAllianceReceiveTaskRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInnerAllianceReceiveTaskRewardReq)
}

::google::protobuf::uint8* TInnerAllianceReceiveTaskRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInnerAllianceReceiveTaskRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInnerAllianceReceiveTaskRewardReq)
  return target;
}

int TInnerAllianceReceiveTaskRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInnerAllianceReceiveTaskRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInnerAllianceReceiveTaskRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInnerAllianceReceiveTaskRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInnerAllianceReceiveTaskRewardReq::MergeFrom(const TInnerAllianceReceiveTaskRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInnerAllianceReceiveTaskRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInnerAllianceReceiveTaskRewardReq::CopyFrom(const TInnerAllianceReceiveTaskRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInnerAllianceReceiveTaskRewardReq::IsInitialized() const {

  return true;
}

void TInnerAllianceReceiveTaskRewardReq::Swap(TInnerAllianceReceiveTaskRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInnerAllianceReceiveTaskRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInnerAllianceReceiveTaskRewardReq_descriptor_;
  metadata.reflection = TInnerAllianceReceiveTaskRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInnerAllianceReceiveTaskRewardRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TInnerAllianceReceiveTaskRewardRsp::TInnerAllianceReceiveTaskRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInnerAllianceReceiveTaskRewardRsp)
}

void TInnerAllianceReceiveTaskRewardRsp::InitAsDefaultInstance() {
}

TInnerAllianceReceiveTaskRewardRsp::TInnerAllianceReceiveTaskRewardRsp(const TInnerAllianceReceiveTaskRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInnerAllianceReceiveTaskRewardRsp)
}

void TInnerAllianceReceiveTaskRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInnerAllianceReceiveTaskRewardRsp::~TInnerAllianceReceiveTaskRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TInnerAllianceReceiveTaskRewardRsp)
  SharedDtor();
}

void TInnerAllianceReceiveTaskRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInnerAllianceReceiveTaskRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInnerAllianceReceiveTaskRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInnerAllianceReceiveTaskRewardRsp_descriptor_;
}

const TInnerAllianceReceiveTaskRewardRsp& TInnerAllianceReceiveTaskRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TInnerAllianceReceiveTaskRewardRsp* TInnerAllianceReceiveTaskRewardRsp::default_instance_ = NULL;

TInnerAllianceReceiveTaskRewardRsp* TInnerAllianceReceiveTaskRewardRsp::New() const {
  return new TInnerAllianceReceiveTaskRewardRsp;
}

void TInnerAllianceReceiveTaskRewardRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInnerAllianceReceiveTaskRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInnerAllianceReceiveTaskRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInnerAllianceReceiveTaskRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInnerAllianceReceiveTaskRewardRsp)
  return false;
#undef DO_
}

void TInnerAllianceReceiveTaskRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInnerAllianceReceiveTaskRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInnerAllianceReceiveTaskRewardRsp)
}

::google::protobuf::uint8* TInnerAllianceReceiveTaskRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInnerAllianceReceiveTaskRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInnerAllianceReceiveTaskRewardRsp)
  return target;
}

int TInnerAllianceReceiveTaskRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInnerAllianceReceiveTaskRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInnerAllianceReceiveTaskRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInnerAllianceReceiveTaskRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInnerAllianceReceiveTaskRewardRsp::MergeFrom(const TInnerAllianceReceiveTaskRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInnerAllianceReceiveTaskRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInnerAllianceReceiveTaskRewardRsp::CopyFrom(const TInnerAllianceReceiveTaskRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInnerAllianceReceiveTaskRewardRsp::IsInitialized() const {

  return true;
}

void TInnerAllianceReceiveTaskRewardRsp::Swap(TInnerAllianceReceiveTaskRewardRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInnerAllianceReceiveTaskRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInnerAllianceReceiveTaskRewardRsp_descriptor_;
  metadata.reflection = TInnerAllianceReceiveTaskRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInnerAllianceReceiveSignRewardRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TInnerAllianceReceiveSignRewardRsp::TInnerAllianceReceiveSignRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInnerAllianceReceiveSignRewardRsp)
}

void TInnerAllianceReceiveSignRewardRsp::InitAsDefaultInstance() {
}

TInnerAllianceReceiveSignRewardRsp::TInnerAllianceReceiveSignRewardRsp(const TInnerAllianceReceiveSignRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInnerAllianceReceiveSignRewardRsp)
}

void TInnerAllianceReceiveSignRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInnerAllianceReceiveSignRewardRsp::~TInnerAllianceReceiveSignRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TInnerAllianceReceiveSignRewardRsp)
  SharedDtor();
}

void TInnerAllianceReceiveSignRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInnerAllianceReceiveSignRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInnerAllianceReceiveSignRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInnerAllianceReceiveSignRewardRsp_descriptor_;
}

const TInnerAllianceReceiveSignRewardRsp& TInnerAllianceReceiveSignRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TInnerAllianceReceiveSignRewardRsp* TInnerAllianceReceiveSignRewardRsp::default_instance_ = NULL;

TInnerAllianceReceiveSignRewardRsp* TInnerAllianceReceiveSignRewardRsp::New() const {
  return new TInnerAllianceReceiveSignRewardRsp;
}

void TInnerAllianceReceiveSignRewardRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInnerAllianceReceiveSignRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInnerAllianceReceiveSignRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInnerAllianceReceiveSignRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInnerAllianceReceiveSignRewardRsp)
  return false;
#undef DO_
}

void TInnerAllianceReceiveSignRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInnerAllianceReceiveSignRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInnerAllianceReceiveSignRewardRsp)
}

::google::protobuf::uint8* TInnerAllianceReceiveSignRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInnerAllianceReceiveSignRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInnerAllianceReceiveSignRewardRsp)
  return target;
}

int TInnerAllianceReceiveSignRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInnerAllianceReceiveSignRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInnerAllianceReceiveSignRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInnerAllianceReceiveSignRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInnerAllianceReceiveSignRewardRsp::MergeFrom(const TInnerAllianceReceiveSignRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInnerAllianceReceiveSignRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInnerAllianceReceiveSignRewardRsp::CopyFrom(const TInnerAllianceReceiveSignRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInnerAllianceReceiveSignRewardRsp::IsInitialized() const {

  return true;
}

void TInnerAllianceReceiveSignRewardRsp::Swap(TInnerAllianceReceiveSignRewardRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInnerAllianceReceiveSignRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInnerAllianceReceiveSignRewardRsp_descriptor_;
  metadata.reflection = TInnerAllianceReceiveSignRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInnerAllianceUpgradePracticeReq::kTypeFieldNumber;
#endif  // !_MSC_VER

TInnerAllianceUpgradePracticeReq::TInnerAllianceUpgradePracticeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInnerAllianceUpgradePracticeReq)
}

void TInnerAllianceUpgradePracticeReq::InitAsDefaultInstance() {
}

TInnerAllianceUpgradePracticeReq::TInnerAllianceUpgradePracticeReq(const TInnerAllianceUpgradePracticeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInnerAllianceUpgradePracticeReq)
}

void TInnerAllianceUpgradePracticeReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInnerAllianceUpgradePracticeReq::~TInnerAllianceUpgradePracticeReq() {
  // @@protoc_insertion_point(destructor:pb.TInnerAllianceUpgradePracticeReq)
  SharedDtor();
}

void TInnerAllianceUpgradePracticeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInnerAllianceUpgradePracticeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInnerAllianceUpgradePracticeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInnerAllianceUpgradePracticeReq_descriptor_;
}

const TInnerAllianceUpgradePracticeReq& TInnerAllianceUpgradePracticeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TInnerAllianceUpgradePracticeReq* TInnerAllianceUpgradePracticeReq::default_instance_ = NULL;

TInnerAllianceUpgradePracticeReq* TInnerAllianceUpgradePracticeReq::New() const {
  return new TInnerAllianceUpgradePracticeReq;
}

void TInnerAllianceUpgradePracticeReq::Clear() {
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInnerAllianceUpgradePracticeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInnerAllianceUpgradePracticeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInnerAllianceUpgradePracticeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInnerAllianceUpgradePracticeReq)
  return false;
#undef DO_
}

void TInnerAllianceUpgradePracticeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInnerAllianceUpgradePracticeReq)
  // optional uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInnerAllianceUpgradePracticeReq)
}

::google::protobuf::uint8* TInnerAllianceUpgradePracticeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInnerAllianceUpgradePracticeReq)
  // optional uint32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInnerAllianceUpgradePracticeReq)
  return target;
}

int TInnerAllianceUpgradePracticeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInnerAllianceUpgradePracticeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInnerAllianceUpgradePracticeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInnerAllianceUpgradePracticeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInnerAllianceUpgradePracticeReq::MergeFrom(const TInnerAllianceUpgradePracticeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInnerAllianceUpgradePracticeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInnerAllianceUpgradePracticeReq::CopyFrom(const TInnerAllianceUpgradePracticeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInnerAllianceUpgradePracticeReq::IsInitialized() const {

  return true;
}

void TInnerAllianceUpgradePracticeReq::Swap(TInnerAllianceUpgradePracticeReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInnerAllianceUpgradePracticeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInnerAllianceUpgradePracticeReq_descriptor_;
  metadata.reflection = TInnerAllianceUpgradePracticeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceUserInfoChange::kUserInfoFieldNumber;
#endif  // !_MSC_VER

TAllianceUserInfoChange::TAllianceUserInfoChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceUserInfoChange)
}

void TAllianceUserInfoChange::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TAllianceUserInfo*>(&::pb::TAllianceUserInfo::default_instance());
}

TAllianceUserInfoChange::TAllianceUserInfoChange(const TAllianceUserInfoChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceUserInfoChange)
}

void TAllianceUserInfoChange::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceUserInfoChange::~TAllianceUserInfoChange() {
  // @@protoc_insertion_point(destructor:pb.TAllianceUserInfoChange)
  SharedDtor();
}

void TAllianceUserInfoChange::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TAllianceUserInfoChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceUserInfoChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceUserInfoChange_descriptor_;
}

const TAllianceUserInfoChange& TAllianceUserInfoChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceUserInfoChange* TAllianceUserInfoChange::default_instance_ = NULL;

TAllianceUserInfoChange* TAllianceUserInfoChange::New() const {
  return new TAllianceUserInfoChange;
}

void TAllianceUserInfoChange::Clear() {
  if (has_userinfo()) {
    if (userinfo_ != NULL) userinfo_->::pb::TAllianceUserInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceUserInfoChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceUserInfoChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAllianceUserInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceUserInfoChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceUserInfoChange)
  return false;
#undef DO_
}

void TAllianceUserInfoChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceUserInfoChange)
  // optional .pb.TAllianceUserInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceUserInfoChange)
}

::google::protobuf::uint8* TAllianceUserInfoChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceUserInfoChange)
  // optional .pb.TAllianceUserInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceUserInfoChange)
  return target;
}

int TAllianceUserInfoChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAllianceUserInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceUserInfoChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceUserInfoChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceUserInfoChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceUserInfoChange::MergeFrom(const TAllianceUserInfoChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TAllianceUserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceUserInfoChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceUserInfoChange::CopyFrom(const TAllianceUserInfoChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceUserInfoChange::IsInitialized() const {

  return true;
}

void TAllianceUserInfoChange::Swap(TAllianceUserInfoChange* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceUserInfoChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceUserInfoChange_descriptor_;
  metadata.reflection = TAllianceUserInfoChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceGetAllianceListReq::kOffsetFieldNumber;
const int TCrossAllianceGetAllianceListReq::kLimitFieldNumber;
const int TCrossAllianceGetAllianceListReq::kOnlyCanApplyFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceGetAllianceListReq::TCrossAllianceGetAllianceListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceGetAllianceListReq)
}

void TCrossAllianceGetAllianceListReq::InitAsDefaultInstance() {
}

TCrossAllianceGetAllianceListReq::TCrossAllianceGetAllianceListReq(const TCrossAllianceGetAllianceListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceGetAllianceListReq)
}

void TCrossAllianceGetAllianceListReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  onlycanapply_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceGetAllianceListReq::~TCrossAllianceGetAllianceListReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceGetAllianceListReq)
  SharedDtor();
}

void TCrossAllianceGetAllianceListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceGetAllianceListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceGetAllianceListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceGetAllianceListReq_descriptor_;
}

const TCrossAllianceGetAllianceListReq& TCrossAllianceGetAllianceListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceGetAllianceListReq* TCrossAllianceGetAllianceListReq::default_instance_ = NULL;

TCrossAllianceGetAllianceListReq* TCrossAllianceGetAllianceListReq::New() const {
  return new TCrossAllianceGetAllianceListReq;
}

void TCrossAllianceGetAllianceListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossAllianceGetAllianceListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, onlycanapply_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceGetAllianceListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceGetAllianceListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_OnlyCanApply;
        break;
      }

      // optional bool OnlyCanApply = 3;
      case 3: {
        if (tag == 24) {
         parse_OnlyCanApply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onlycanapply_)));
          set_has_onlycanapply();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceGetAllianceListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceGetAllianceListReq)
  return false;
#undef DO_
}

void TCrossAllianceGetAllianceListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceGetAllianceListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // optional bool OnlyCanApply = 3;
  if (has_onlycanapply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->onlycanapply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceGetAllianceListReq)
}

::google::protobuf::uint8* TCrossAllianceGetAllianceListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceGetAllianceListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // optional bool OnlyCanApply = 3;
  if (has_onlycanapply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->onlycanapply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceGetAllianceListReq)
  return target;
}

int TCrossAllianceGetAllianceListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

    // optional bool OnlyCanApply = 3;
    if (has_onlycanapply()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceGetAllianceListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceGetAllianceListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceGetAllianceListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceGetAllianceListReq::MergeFrom(const TCrossAllianceGetAllianceListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_onlycanapply()) {
      set_onlycanapply(from.onlycanapply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceGetAllianceListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceGetAllianceListReq::CopyFrom(const TCrossAllianceGetAllianceListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceGetAllianceListReq::IsInitialized() const {

  return true;
}

void TCrossAllianceGetAllianceListReq::Swap(TCrossAllianceGetAllianceListReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(onlycanapply_, other->onlycanapply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceGetAllianceListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceGetAllianceListReq_descriptor_;
  metadata.reflection = TCrossAllianceGetAllianceListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceGetAllianceListRsp::kArrAllianceInfoFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceGetAllianceListRsp::TCrossAllianceGetAllianceListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceGetAllianceListRsp)
}

void TCrossAllianceGetAllianceListRsp::InitAsDefaultInstance() {
}

TCrossAllianceGetAllianceListRsp::TCrossAllianceGetAllianceListRsp(const TCrossAllianceGetAllianceListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceGetAllianceListRsp)
}

void TCrossAllianceGetAllianceListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceGetAllianceListRsp::~TCrossAllianceGetAllianceListRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceGetAllianceListRsp)
  SharedDtor();
}

void TCrossAllianceGetAllianceListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceGetAllianceListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceGetAllianceListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceGetAllianceListRsp_descriptor_;
}

const TCrossAllianceGetAllianceListRsp& TCrossAllianceGetAllianceListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceGetAllianceListRsp* TCrossAllianceGetAllianceListRsp::default_instance_ = NULL;

TCrossAllianceGetAllianceListRsp* TCrossAllianceGetAllianceListRsp::New() const {
  return new TCrossAllianceGetAllianceListRsp;
}

void TCrossAllianceGetAllianceListRsp::Clear() {
  arrallianceinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceGetAllianceListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceGetAllianceListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAllianceSimpleInfoWithApplyStatus ArrAllianceInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrAllianceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrallianceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrAllianceInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceGetAllianceListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceGetAllianceListRsp)
  return false;
#undef DO_
}

void TCrossAllianceGetAllianceListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceGetAllianceListRsp)
  // repeated .pb.TAllianceSimpleInfoWithApplyStatus ArrAllianceInfo = 1;
  for (int i = 0; i < this->arrallianceinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrallianceinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceGetAllianceListRsp)
}

::google::protobuf::uint8* TCrossAllianceGetAllianceListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceGetAllianceListRsp)
  // repeated .pb.TAllianceSimpleInfoWithApplyStatus ArrAllianceInfo = 1;
  for (int i = 0; i < this->arrallianceinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrallianceinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceGetAllianceListRsp)
  return target;
}

int TCrossAllianceGetAllianceListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TAllianceSimpleInfoWithApplyStatus ArrAllianceInfo = 1;
  total_size += 1 * this->arrallianceinfo_size();
  for (int i = 0; i < this->arrallianceinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrallianceinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceGetAllianceListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceGetAllianceListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceGetAllianceListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceGetAllianceListRsp::MergeFrom(const TCrossAllianceGetAllianceListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrallianceinfo_.MergeFrom(from.arrallianceinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceGetAllianceListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceGetAllianceListRsp::CopyFrom(const TCrossAllianceGetAllianceListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceGetAllianceListRsp::IsInitialized() const {

  return true;
}

void TCrossAllianceGetAllianceListRsp::Swap(TCrossAllianceGetAllianceListRsp* other) {
  if (other != this) {
    arrallianceinfo_.Swap(&other->arrallianceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceGetAllianceListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceGetAllianceListRsp_descriptor_;
  metadata.reflection = TCrossAllianceGetAllianceListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceSearchAllianceReq::kNameFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceSearchAllianceReq::TCrossAllianceSearchAllianceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceSearchAllianceReq)
}

void TCrossAllianceSearchAllianceReq::InitAsDefaultInstance() {
}

TCrossAllianceSearchAllianceReq::TCrossAllianceSearchAllianceReq(const TCrossAllianceSearchAllianceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceSearchAllianceReq)
}

void TCrossAllianceSearchAllianceReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceSearchAllianceReq::~TCrossAllianceSearchAllianceReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceSearchAllianceReq)
  SharedDtor();
}

void TCrossAllianceSearchAllianceReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TCrossAllianceSearchAllianceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceSearchAllianceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceSearchAllianceReq_descriptor_;
}

const TCrossAllianceSearchAllianceReq& TCrossAllianceSearchAllianceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceSearchAllianceReq* TCrossAllianceSearchAllianceReq::default_instance_ = NULL;

TCrossAllianceSearchAllianceReq* TCrossAllianceSearchAllianceReq::New() const {
  return new TCrossAllianceSearchAllianceReq;
}

void TCrossAllianceSearchAllianceReq::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceSearchAllianceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceSearchAllianceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceSearchAllianceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceSearchAllianceReq)
  return false;
#undef DO_
}

void TCrossAllianceSearchAllianceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceSearchAllianceReq)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceSearchAllianceReq)
}

::google::protobuf::uint8* TCrossAllianceSearchAllianceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceSearchAllianceReq)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceSearchAllianceReq)
  return target;
}

int TCrossAllianceSearchAllianceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceSearchAllianceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceSearchAllianceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceSearchAllianceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceSearchAllianceReq::MergeFrom(const TCrossAllianceSearchAllianceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceSearchAllianceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceSearchAllianceReq::CopyFrom(const TCrossAllianceSearchAllianceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceSearchAllianceReq::IsInitialized() const {

  return true;
}

void TCrossAllianceSearchAllianceReq::Swap(TCrossAllianceSearchAllianceReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceSearchAllianceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceSearchAllianceReq_descriptor_;
  metadata.reflection = TCrossAllianceSearchAllianceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceSearchAllianceRsp::kArrAllianceSimpleInfoFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceSearchAllianceRsp::TCrossAllianceSearchAllianceRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceSearchAllianceRsp)
}

void TCrossAllianceSearchAllianceRsp::InitAsDefaultInstance() {
}

TCrossAllianceSearchAllianceRsp::TCrossAllianceSearchAllianceRsp(const TCrossAllianceSearchAllianceRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceSearchAllianceRsp)
}

void TCrossAllianceSearchAllianceRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceSearchAllianceRsp::~TCrossAllianceSearchAllianceRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceSearchAllianceRsp)
  SharedDtor();
}

void TCrossAllianceSearchAllianceRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceSearchAllianceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceSearchAllianceRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceSearchAllianceRsp_descriptor_;
}

const TCrossAllianceSearchAllianceRsp& TCrossAllianceSearchAllianceRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceSearchAllianceRsp* TCrossAllianceSearchAllianceRsp::default_instance_ = NULL;

TCrossAllianceSearchAllianceRsp* TCrossAllianceSearchAllianceRsp::New() const {
  return new TCrossAllianceSearchAllianceRsp;
}

void TCrossAllianceSearchAllianceRsp::Clear() {
  arralliancesimpleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceSearchAllianceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceSearchAllianceRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAllianceSimpleInfoWithApplyStatus ArrAllianceSimpleInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrAllianceSimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arralliancesimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrAllianceSimpleInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceSearchAllianceRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceSearchAllianceRsp)
  return false;
#undef DO_
}

void TCrossAllianceSearchAllianceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceSearchAllianceRsp)
  // repeated .pb.TAllianceSimpleInfoWithApplyStatus ArrAllianceSimpleInfo = 1;
  for (int i = 0; i < this->arralliancesimpleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arralliancesimpleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceSearchAllianceRsp)
}

::google::protobuf::uint8* TCrossAllianceSearchAllianceRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceSearchAllianceRsp)
  // repeated .pb.TAllianceSimpleInfoWithApplyStatus ArrAllianceSimpleInfo = 1;
  for (int i = 0; i < this->arralliancesimpleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arralliancesimpleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceSearchAllianceRsp)
  return target;
}

int TCrossAllianceSearchAllianceRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TAllianceSimpleInfoWithApplyStatus ArrAllianceSimpleInfo = 1;
  total_size += 1 * this->arralliancesimpleinfo_size();
  for (int i = 0; i < this->arralliancesimpleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arralliancesimpleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceSearchAllianceRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceSearchAllianceRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceSearchAllianceRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceSearchAllianceRsp::MergeFrom(const TCrossAllianceSearchAllianceRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arralliancesimpleinfo_.MergeFrom(from.arralliancesimpleinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceSearchAllianceRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceSearchAllianceRsp::CopyFrom(const TCrossAllianceSearchAllianceRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceSearchAllianceRsp::IsInitialized() const {

  return true;
}

void TCrossAllianceSearchAllianceRsp::Swap(TCrossAllianceSearchAllianceRsp* other) {
  if (other != this) {
    arralliancesimpleinfo_.Swap(&other->arralliancesimpleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceSearchAllianceRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceSearchAllianceRsp_descriptor_;
  metadata.reflection = TCrossAllianceSearchAllianceRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceGetAllianceMemberListReq::kGuildIdFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceGetAllianceMemberListReq::TCrossAllianceGetAllianceMemberListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceGetAllianceMemberListReq)
}

void TCrossAllianceGetAllianceMemberListReq::InitAsDefaultInstance() {
}

TCrossAllianceGetAllianceMemberListReq::TCrossAllianceGetAllianceMemberListReq(const TCrossAllianceGetAllianceMemberListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceGetAllianceMemberListReq)
}

void TCrossAllianceGetAllianceMemberListReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceGetAllianceMemberListReq::~TCrossAllianceGetAllianceMemberListReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceGetAllianceMemberListReq)
  SharedDtor();
}

void TCrossAllianceGetAllianceMemberListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceGetAllianceMemberListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceGetAllianceMemberListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceGetAllianceMemberListReq_descriptor_;
}

const TCrossAllianceGetAllianceMemberListReq& TCrossAllianceGetAllianceMemberListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceGetAllianceMemberListReq* TCrossAllianceGetAllianceMemberListReq::default_instance_ = NULL;

TCrossAllianceGetAllianceMemberListReq* TCrossAllianceGetAllianceMemberListReq::New() const {
  return new TCrossAllianceGetAllianceMemberListReq;
}

void TCrossAllianceGetAllianceMemberListReq::Clear() {
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceGetAllianceMemberListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceGetAllianceMemberListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceGetAllianceMemberListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceGetAllianceMemberListReq)
  return false;
#undef DO_
}

void TCrossAllianceGetAllianceMemberListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceGetAllianceMemberListReq)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceGetAllianceMemberListReq)
}

::google::protobuf::uint8* TCrossAllianceGetAllianceMemberListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceGetAllianceMemberListReq)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceGetAllianceMemberListReq)
  return target;
}

int TCrossAllianceGetAllianceMemberListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceGetAllianceMemberListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceGetAllianceMemberListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceGetAllianceMemberListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceGetAllianceMemberListReq::MergeFrom(const TCrossAllianceGetAllianceMemberListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceGetAllianceMemberListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceGetAllianceMemberListReq::CopyFrom(const TCrossAllianceGetAllianceMemberListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceGetAllianceMemberListReq::IsInitialized() const {

  return true;
}

void TCrossAllianceGetAllianceMemberListReq::Swap(TCrossAllianceGetAllianceMemberListReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceGetAllianceMemberListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceGetAllianceMemberListReq_descriptor_;
  metadata.reflection = TCrossAllianceGetAllianceMemberListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceGetAllianceMemberListRsp::kGuildInfoFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceGetAllianceMemberListRsp::TCrossAllianceGetAllianceMemberListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceGetAllianceMemberListRsp)
}

void TCrossAllianceGetAllianceMemberListRsp::InitAsDefaultInstance() {
}

TCrossAllianceGetAllianceMemberListRsp::TCrossAllianceGetAllianceMemberListRsp(const TCrossAllianceGetAllianceMemberListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceGetAllianceMemberListRsp)
}

void TCrossAllianceGetAllianceMemberListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceGetAllianceMemberListRsp::~TCrossAllianceGetAllianceMemberListRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceGetAllianceMemberListRsp)
  SharedDtor();
}

void TCrossAllianceGetAllianceMemberListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceGetAllianceMemberListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceGetAllianceMemberListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceGetAllianceMemberListRsp_descriptor_;
}

const TCrossAllianceGetAllianceMemberListRsp& TCrossAllianceGetAllianceMemberListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceGetAllianceMemberListRsp* TCrossAllianceGetAllianceMemberListRsp::default_instance_ = NULL;

TCrossAllianceGetAllianceMemberListRsp* TCrossAllianceGetAllianceMemberListRsp::New() const {
  return new TCrossAllianceGetAllianceMemberListRsp;
}

void TCrossAllianceGetAllianceMemberListRsp::Clear() {
  guildinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceGetAllianceMemberListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceGetAllianceMemberListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAllianceGuildMemberInfoWithUser GuildInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_GuildInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_GuildInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceGetAllianceMemberListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceGetAllianceMemberListRsp)
  return false;
#undef DO_
}

void TCrossAllianceGetAllianceMemberListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceGetAllianceMemberListRsp)
  // repeated .pb.TAllianceGuildMemberInfoWithUser GuildInfo = 1;
  for (int i = 0; i < this->guildinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceGetAllianceMemberListRsp)
}

::google::protobuf::uint8* TCrossAllianceGetAllianceMemberListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceGetAllianceMemberListRsp)
  // repeated .pb.TAllianceGuildMemberInfoWithUser GuildInfo = 1;
  for (int i = 0; i < this->guildinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceGetAllianceMemberListRsp)
  return target;
}

int TCrossAllianceGetAllianceMemberListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TAllianceGuildMemberInfoWithUser GuildInfo = 1;
  total_size += 1 * this->guildinfo_size();
  for (int i = 0; i < this->guildinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceGetAllianceMemberListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceGetAllianceMemberListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceGetAllianceMemberListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceGetAllianceMemberListRsp::MergeFrom(const TCrossAllianceGetAllianceMemberListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildinfo_.MergeFrom(from.guildinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceGetAllianceMemberListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceGetAllianceMemberListRsp::CopyFrom(const TCrossAllianceGetAllianceMemberListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceGetAllianceMemberListRsp::IsInitialized() const {

  return true;
}

void TCrossAllianceGetAllianceMemberListRsp::Swap(TCrossAllianceGetAllianceMemberListRsp* other) {
  if (other != this) {
    guildinfo_.Swap(&other->guildinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceGetAllianceMemberListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceGetAllianceMemberListRsp_descriptor_;
  metadata.reflection = TCrossAllianceGetAllianceMemberListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceGetAllianceApplyListRsp::kArrApplyFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceGetAllianceApplyListRsp::TCrossAllianceGetAllianceApplyListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceGetAllianceApplyListRsp)
}

void TCrossAllianceGetAllianceApplyListRsp::InitAsDefaultInstance() {
}

TCrossAllianceGetAllianceApplyListRsp::TCrossAllianceGetAllianceApplyListRsp(const TCrossAllianceGetAllianceApplyListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceGetAllianceApplyListRsp)
}

void TCrossAllianceGetAllianceApplyListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceGetAllianceApplyListRsp::~TCrossAllianceGetAllianceApplyListRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceGetAllianceApplyListRsp)
  SharedDtor();
}

void TCrossAllianceGetAllianceApplyListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceGetAllianceApplyListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceGetAllianceApplyListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceGetAllianceApplyListRsp_descriptor_;
}

const TCrossAllianceGetAllianceApplyListRsp& TCrossAllianceGetAllianceApplyListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceGetAllianceApplyListRsp* TCrossAllianceGetAllianceApplyListRsp::default_instance_ = NULL;

TCrossAllianceGetAllianceApplyListRsp* TCrossAllianceGetAllianceApplyListRsp::New() const {
  return new TCrossAllianceGetAllianceApplyListRsp;
}

void TCrossAllianceGetAllianceApplyListRsp::Clear() {
  arrapply_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceGetAllianceApplyListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceGetAllianceApplyListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAllianceApplyGuildInfo ArrApply = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrApply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrapply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrApply;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceGetAllianceApplyListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceGetAllianceApplyListRsp)
  return false;
#undef DO_
}

void TCrossAllianceGetAllianceApplyListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceGetAllianceApplyListRsp)
  // repeated .pb.TAllianceApplyGuildInfo ArrApply = 1;
  for (int i = 0; i < this->arrapply_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrapply(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceGetAllianceApplyListRsp)
}

::google::protobuf::uint8* TCrossAllianceGetAllianceApplyListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceGetAllianceApplyListRsp)
  // repeated .pb.TAllianceApplyGuildInfo ArrApply = 1;
  for (int i = 0; i < this->arrapply_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrapply(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceGetAllianceApplyListRsp)
  return target;
}

int TCrossAllianceGetAllianceApplyListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TAllianceApplyGuildInfo ArrApply = 1;
  total_size += 1 * this->arrapply_size();
  for (int i = 0; i < this->arrapply_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrapply(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceGetAllianceApplyListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceGetAllianceApplyListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceGetAllianceApplyListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceGetAllianceApplyListRsp::MergeFrom(const TCrossAllianceGetAllianceApplyListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrapply_.MergeFrom(from.arrapply_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceGetAllianceApplyListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceGetAllianceApplyListRsp::CopyFrom(const TCrossAllianceGetAllianceApplyListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceGetAllianceApplyListRsp::IsInitialized() const {

  return true;
}

void TCrossAllianceGetAllianceApplyListRsp::Swap(TCrossAllianceGetAllianceApplyListRsp* other) {
  if (other != this) {
    arrapply_.Swap(&other->arrapply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceGetAllianceApplyListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceGetAllianceApplyListRsp_descriptor_;
  metadata.reflection = TCrossAllianceGetAllianceApplyListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceCreateAllianceReq::kNameFieldNumber;
const int TCrossAllianceCreateAllianceReq::kSummaryFieldNumber;
const int TCrossAllianceCreateAllianceReq::kBannerBaseFieldNumber;
const int TCrossAllianceCreateAllianceReq::kBannerFigureFieldNumber;
const int TCrossAllianceCreateAllianceReq::kBannerNameFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceCreateAllianceReq::TCrossAllianceCreateAllianceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceCreateAllianceReq)
}

void TCrossAllianceCreateAllianceReq::InitAsDefaultInstance() {
}

TCrossAllianceCreateAllianceReq::TCrossAllianceCreateAllianceReq(const TCrossAllianceCreateAllianceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceCreateAllianceReq)
}

void TCrossAllianceCreateAllianceReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannerbase_ = 0u;
  bannerfigure_ = 0u;
  bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceCreateAllianceReq::~TCrossAllianceCreateAllianceReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceCreateAllianceReq)
  SharedDtor();
}

void TCrossAllianceCreateAllianceReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (this != default_instance_) {
  }
}

void TCrossAllianceCreateAllianceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceCreateAllianceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceCreateAllianceReq_descriptor_;
}

const TCrossAllianceCreateAllianceReq& TCrossAllianceCreateAllianceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceCreateAllianceReq* TCrossAllianceCreateAllianceReq::default_instance_ = NULL;

TCrossAllianceCreateAllianceReq* TCrossAllianceCreateAllianceReq::New() const {
  return new TCrossAllianceCreateAllianceReq;
}

void TCrossAllianceCreateAllianceReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossAllianceCreateAllianceReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(bannerbase_, bannerfigure_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_summary()) {
      if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        summary_->clear();
      }
    }
    if (has_bannername()) {
      if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bannername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceCreateAllianceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceCreateAllianceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Summary;
        break;
      }

      // optional string Summary = 2;
      case 2: {
        if (tag == 18) {
         parse_Summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->summary().data(), this->summary().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "summary");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BannerBase;
        break;
      }

      // optional uint32 BannerBase = 3;
      case 3: {
        if (tag == 24) {
         parse_BannerBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerbase_)));
          set_has_bannerbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BannerFigure;
        break;
      }

      // optional uint32 BannerFigure = 4;
      case 4: {
        if (tag == 32) {
         parse_BannerFigure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerfigure_)));
          set_has_bannerfigure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_BannerName;
        break;
      }

      // optional string BannerName = 5;
      case 5: {
        if (tag == 42) {
         parse_BannerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bannername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bannername().data(), this->bannername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bannername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceCreateAllianceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceCreateAllianceReq)
  return false;
#undef DO_
}

void TCrossAllianceCreateAllianceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceCreateAllianceReq)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string Summary = 2;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->summary(), output);
  }

  // optional uint32 BannerBase = 3;
  if (has_bannerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bannerbase(), output);
  }

  // optional uint32 BannerFigure = 4;
  if (has_bannerfigure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bannerfigure(), output);
  }

  // optional string BannerName = 5;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bannername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceCreateAllianceReq)
}

::google::protobuf::uint8* TCrossAllianceCreateAllianceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceCreateAllianceReq)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string Summary = 2;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->summary(), target);
  }

  // optional uint32 BannerBase = 3;
  if (has_bannerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bannerbase(), target);
  }

  // optional uint32 BannerFigure = 4;
  if (has_bannerfigure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bannerfigure(), target);
  }

  // optional string BannerName = 5;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bannername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceCreateAllianceReq)
  return target;
}

int TCrossAllianceCreateAllianceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Summary = 2;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summary());
    }

    // optional uint32 BannerBase = 3;
    if (has_bannerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerbase());
    }

    // optional uint32 BannerFigure = 4;
    if (has_bannerfigure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerfigure());
    }

    // optional string BannerName = 5;
    if (has_bannername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bannername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceCreateAllianceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceCreateAllianceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceCreateAllianceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceCreateAllianceReq::MergeFrom(const TCrossAllianceCreateAllianceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_summary()) {
      set_summary(from.summary());
    }
    if (from.has_bannerbase()) {
      set_bannerbase(from.bannerbase());
    }
    if (from.has_bannerfigure()) {
      set_bannerfigure(from.bannerfigure());
    }
    if (from.has_bannername()) {
      set_bannername(from.bannername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceCreateAllianceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceCreateAllianceReq::CopyFrom(const TCrossAllianceCreateAllianceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceCreateAllianceReq::IsInitialized() const {

  return true;
}

void TCrossAllianceCreateAllianceReq::Swap(TCrossAllianceCreateAllianceReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(summary_, other->summary_);
    std::swap(bannerbase_, other->bannerbase_);
    std::swap(bannerfigure_, other->bannerfigure_);
    std::swap(bannername_, other->bannername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceCreateAllianceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceCreateAllianceReq_descriptor_;
  metadata.reflection = TCrossAllianceCreateAllianceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceApplyAllianceReq::kAllianceIdFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceApplyAllianceReq::TCrossAllianceApplyAllianceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceApplyAllianceReq)
}

void TCrossAllianceApplyAllianceReq::InitAsDefaultInstance() {
}

TCrossAllianceApplyAllianceReq::TCrossAllianceApplyAllianceReq(const TCrossAllianceApplyAllianceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceApplyAllianceReq)
}

void TCrossAllianceApplyAllianceReq::SharedCtor() {
  _cached_size_ = 0;
  allianceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceApplyAllianceReq::~TCrossAllianceApplyAllianceReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceApplyAllianceReq)
  SharedDtor();
}

void TCrossAllianceApplyAllianceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceApplyAllianceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceApplyAllianceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceApplyAllianceReq_descriptor_;
}

const TCrossAllianceApplyAllianceReq& TCrossAllianceApplyAllianceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceApplyAllianceReq* TCrossAllianceApplyAllianceReq::default_instance_ = NULL;

TCrossAllianceApplyAllianceReq* TCrossAllianceApplyAllianceReq::New() const {
  return new TCrossAllianceApplyAllianceReq;
}

void TCrossAllianceApplyAllianceReq::Clear() {
  allianceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceApplyAllianceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceApplyAllianceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 AllianceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceApplyAllianceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceApplyAllianceReq)
  return false;
#undef DO_
}

void TCrossAllianceApplyAllianceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceApplyAllianceReq)
  // optional uint64 AllianceId = 1;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->allianceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceApplyAllianceReq)
}

::google::protobuf::uint8* TCrossAllianceApplyAllianceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceApplyAllianceReq)
  // optional uint64 AllianceId = 1;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->allianceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceApplyAllianceReq)
  return target;
}

int TCrossAllianceApplyAllianceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 AllianceId = 1;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->allianceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceApplyAllianceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceApplyAllianceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceApplyAllianceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceApplyAllianceReq::MergeFrom(const TCrossAllianceApplyAllianceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceApplyAllianceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceApplyAllianceReq::CopyFrom(const TCrossAllianceApplyAllianceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceApplyAllianceReq::IsInitialized() const {

  return true;
}

void TCrossAllianceApplyAllianceReq::Swap(TCrossAllianceApplyAllianceReq* other) {
  if (other != this) {
    std::swap(allianceid_, other->allianceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceApplyAllianceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceApplyAllianceReq_descriptor_;
  metadata.reflection = TCrossAllianceApplyAllianceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceApplyAllianceRsp::kJoinAllianceIdFieldNumber;
const int TCrossAllianceApplyAllianceRsp::kApplyAllianceIdFieldNumber;
const int TCrossAllianceApplyAllianceRsp::kLeaveTimeFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceApplyAllianceRsp::TCrossAllianceApplyAllianceRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceApplyAllianceRsp)
}

void TCrossAllianceApplyAllianceRsp::InitAsDefaultInstance() {
}

TCrossAllianceApplyAllianceRsp::TCrossAllianceApplyAllianceRsp(const TCrossAllianceApplyAllianceRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceApplyAllianceRsp)
}

void TCrossAllianceApplyAllianceRsp::SharedCtor() {
  _cached_size_ = 0;
  joinallianceid_ = GOOGLE_ULONGLONG(0);
  leavetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceApplyAllianceRsp::~TCrossAllianceApplyAllianceRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceApplyAllianceRsp)
  SharedDtor();
}

void TCrossAllianceApplyAllianceRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceApplyAllianceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceApplyAllianceRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceApplyAllianceRsp_descriptor_;
}

const TCrossAllianceApplyAllianceRsp& TCrossAllianceApplyAllianceRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceApplyAllianceRsp* TCrossAllianceApplyAllianceRsp::default_instance_ = NULL;

TCrossAllianceApplyAllianceRsp* TCrossAllianceApplyAllianceRsp::New() const {
  return new TCrossAllianceApplyAllianceRsp;
}

void TCrossAllianceApplyAllianceRsp::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    joinallianceid_ = GOOGLE_ULONGLONG(0);
    leavetime_ = GOOGLE_ULONGLONG(0);
  }
  applyallianceid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceApplyAllianceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceApplyAllianceRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 JoinAllianceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &joinallianceid_)));
          set_has_joinallianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ApplyAllianceId;
        break;
      }

      // repeated uint64 ApplyAllianceId = 2;
      case 2: {
        if (tag == 16) {
         parse_ApplyAllianceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_applyallianceid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_applyallianceid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ApplyAllianceId;
        if (input->ExpectTag(24)) goto parse_LeaveTime;
        break;
      }

      // optional uint64 LeaveTime = 3;
      case 3: {
        if (tag == 24) {
         parse_LeaveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leavetime_)));
          set_has_leavetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceApplyAllianceRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceApplyAllianceRsp)
  return false;
#undef DO_
}

void TCrossAllianceApplyAllianceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceApplyAllianceRsp)
  // optional uint64 JoinAllianceId = 1;
  if (has_joinallianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->joinallianceid(), output);
  }

  // repeated uint64 ApplyAllianceId = 2;
  for (int i = 0; i < this->applyallianceid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->applyallianceid(i), output);
  }

  // optional uint64 LeaveTime = 3;
  if (has_leavetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->leavetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceApplyAllianceRsp)
}

::google::protobuf::uint8* TCrossAllianceApplyAllianceRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceApplyAllianceRsp)
  // optional uint64 JoinAllianceId = 1;
  if (has_joinallianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->joinallianceid(), target);
  }

  // repeated uint64 ApplyAllianceId = 2;
  for (int i = 0; i < this->applyallianceid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->applyallianceid(i), target);
  }

  // optional uint64 LeaveTime = 3;
  if (has_leavetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->leavetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceApplyAllianceRsp)
  return target;
}

int TCrossAllianceApplyAllianceRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 JoinAllianceId = 1;
    if (has_joinallianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->joinallianceid());
    }

    // optional uint64 LeaveTime = 3;
    if (has_leavetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leavetime());
    }

  }
  // repeated uint64 ApplyAllianceId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->applyallianceid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->applyallianceid(i));
    }
    total_size += 1 * this->applyallianceid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceApplyAllianceRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceApplyAllianceRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceApplyAllianceRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceApplyAllianceRsp::MergeFrom(const TCrossAllianceApplyAllianceRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  applyallianceid_.MergeFrom(from.applyallianceid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_joinallianceid()) {
      set_joinallianceid(from.joinallianceid());
    }
    if (from.has_leavetime()) {
      set_leavetime(from.leavetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceApplyAllianceRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceApplyAllianceRsp::CopyFrom(const TCrossAllianceApplyAllianceRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceApplyAllianceRsp::IsInitialized() const {

  return true;
}

void TCrossAllianceApplyAllianceRsp::Swap(TCrossAllianceApplyAllianceRsp* other) {
  if (other != this) {
    std::swap(joinallianceid_, other->joinallianceid_);
    applyallianceid_.Swap(&other->applyallianceid_);
    std::swap(leavetime_, other->leavetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceApplyAllianceRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceApplyAllianceRsp_descriptor_;
  metadata.reflection = TCrossAllianceApplyAllianceRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceCancelApplyAllianceReq::kAllianceIdFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceCancelApplyAllianceReq::TCrossAllianceCancelApplyAllianceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceCancelApplyAllianceReq)
}

void TCrossAllianceCancelApplyAllianceReq::InitAsDefaultInstance() {
}

TCrossAllianceCancelApplyAllianceReq::TCrossAllianceCancelApplyAllianceReq(const TCrossAllianceCancelApplyAllianceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceCancelApplyAllianceReq)
}

void TCrossAllianceCancelApplyAllianceReq::SharedCtor() {
  _cached_size_ = 0;
  allianceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceCancelApplyAllianceReq::~TCrossAllianceCancelApplyAllianceReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceCancelApplyAllianceReq)
  SharedDtor();
}

void TCrossAllianceCancelApplyAllianceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceCancelApplyAllianceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceCancelApplyAllianceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceCancelApplyAllianceReq_descriptor_;
}

const TCrossAllianceCancelApplyAllianceReq& TCrossAllianceCancelApplyAllianceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceCancelApplyAllianceReq* TCrossAllianceCancelApplyAllianceReq::default_instance_ = NULL;

TCrossAllianceCancelApplyAllianceReq* TCrossAllianceCancelApplyAllianceReq::New() const {
  return new TCrossAllianceCancelApplyAllianceReq;
}

void TCrossAllianceCancelApplyAllianceReq::Clear() {
  allianceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceCancelApplyAllianceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceCancelApplyAllianceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 AllianceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceCancelApplyAllianceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceCancelApplyAllianceReq)
  return false;
#undef DO_
}

void TCrossAllianceCancelApplyAllianceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceCancelApplyAllianceReq)
  // optional uint64 AllianceId = 1;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->allianceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceCancelApplyAllianceReq)
}

::google::protobuf::uint8* TCrossAllianceCancelApplyAllianceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceCancelApplyAllianceReq)
  // optional uint64 AllianceId = 1;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->allianceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceCancelApplyAllianceReq)
  return target;
}

int TCrossAllianceCancelApplyAllianceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 AllianceId = 1;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->allianceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceCancelApplyAllianceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceCancelApplyAllianceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceCancelApplyAllianceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceCancelApplyAllianceReq::MergeFrom(const TCrossAllianceCancelApplyAllianceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceCancelApplyAllianceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceCancelApplyAllianceReq::CopyFrom(const TCrossAllianceCancelApplyAllianceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceCancelApplyAllianceReq::IsInitialized() const {

  return true;
}

void TCrossAllianceCancelApplyAllianceReq::Swap(TCrossAllianceCancelApplyAllianceReq* other) {
  if (other != this) {
    std::swap(allianceid_, other->allianceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceCancelApplyAllianceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceCancelApplyAllianceReq_descriptor_;
  metadata.reflection = TCrossAllianceCancelApplyAllianceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceExamineApplyReq::kGuildIdFieldNumber;
const int TCrossAllianceExamineApplyReq::kAgreeFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceExamineApplyReq::TCrossAllianceExamineApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceExamineApplyReq)
}

void TCrossAllianceExamineApplyReq::InitAsDefaultInstance() {
}

TCrossAllianceExamineApplyReq::TCrossAllianceExamineApplyReq(const TCrossAllianceExamineApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceExamineApplyReq)
}

void TCrossAllianceExamineApplyReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceExamineApplyReq::~TCrossAllianceExamineApplyReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceExamineApplyReq)
  SharedDtor();
}

void TCrossAllianceExamineApplyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceExamineApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceExamineApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceExamineApplyReq_descriptor_;
}

const TCrossAllianceExamineApplyReq& TCrossAllianceExamineApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceExamineApplyReq* TCrossAllianceExamineApplyReq::default_instance_ = NULL;

TCrossAllianceExamineApplyReq* TCrossAllianceExamineApplyReq::New() const {
  return new TCrossAllianceExamineApplyReq;
}

void TCrossAllianceExamineApplyReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossAllianceExamineApplyReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guildid_, agree_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceExamineApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceExamineApplyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Agree;
        break;
      }

      // optional bool Agree = 2;
      case 2: {
        if (tag == 16) {
         parse_Agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceExamineApplyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceExamineApplyReq)
  return false;
#undef DO_
}

void TCrossAllianceExamineApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceExamineApplyReq)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional bool Agree = 2;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceExamineApplyReq)
}

::google::protobuf::uint8* TCrossAllianceExamineApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceExamineApplyReq)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional bool Agree = 2;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->agree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceExamineApplyReq)
  return target;
}

int TCrossAllianceExamineApplyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional bool Agree = 2;
    if (has_agree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceExamineApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceExamineApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceExamineApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceExamineApplyReq::MergeFrom(const TCrossAllianceExamineApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceExamineApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceExamineApplyReq::CopyFrom(const TCrossAllianceExamineApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceExamineApplyReq::IsInitialized() const {

  return true;
}

void TCrossAllianceExamineApplyReq::Swap(TCrossAllianceExamineApplyReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceExamineApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceExamineApplyReq_descriptor_;
  metadata.reflection = TCrossAllianceExamineApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceModifyInfoReq::kBannerNameFieldNumber;
const int TCrossAllianceModifyInfoReq::kBannerBaseFieldNumber;
const int TCrossAllianceModifyInfoReq::kBannerFigureFieldNumber;
const int TCrossAllianceModifyInfoReq::kSummaryFieldNumber;
const int TCrossAllianceModifyInfoReq::kNoticeFieldNumber;
const int TCrossAllianceModifyInfoReq::kReviewModeFieldNumber;
const int TCrossAllianceModifyInfoReq::kGuildLvLimitFieldNumber;
const int TCrossAllianceModifyInfoReq::kQQFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceModifyInfoReq::TCrossAllianceModifyInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceModifyInfoReq)
}

void TCrossAllianceModifyInfoReq::InitAsDefaultInstance() {
}

TCrossAllianceModifyInfoReq::TCrossAllianceModifyInfoReq(const TCrossAllianceModifyInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceModifyInfoReq)
}

void TCrossAllianceModifyInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannerbase_ = 0u;
  bannerfigure_ = 0u;
  summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reviewmode_ = 0;
  guildlvlimit_ = 0u;
  qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceModifyInfoReq::~TCrossAllianceModifyInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceModifyInfoReq)
  SharedDtor();
}

void TCrossAllianceModifyInfoReq::SharedDtor() {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (qq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qq_;
  }
  if (this != default_instance_) {
  }
}

void TCrossAllianceModifyInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceModifyInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceModifyInfoReq_descriptor_;
}

const TCrossAllianceModifyInfoReq& TCrossAllianceModifyInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceModifyInfoReq* TCrossAllianceModifyInfoReq::default_instance_ = NULL;

TCrossAllianceModifyInfoReq* TCrossAllianceModifyInfoReq::New() const {
  return new TCrossAllianceModifyInfoReq;
}

void TCrossAllianceModifyInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossAllianceModifyInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(bannerbase_, bannerfigure_);
    ZR_(reviewmode_, guildlvlimit_);
    if (has_bannername()) {
      if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bannername_->clear();
      }
    }
    if (has_summary()) {
      if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        summary_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notice_->clear();
      }
    }
    if (has_qq()) {
      if (qq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        qq_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceModifyInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceModifyInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BannerName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bannername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bannername().data(), this->bannername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bannername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BannerBase;
        break;
      }

      // optional uint32 BannerBase = 2;
      case 2: {
        if (tag == 16) {
         parse_BannerBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerbase_)));
          set_has_bannerbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BannerFigure;
        break;
      }

      // optional uint32 BannerFigure = 3;
      case 3: {
        if (tag == 24) {
         parse_BannerFigure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerfigure_)));
          set_has_bannerfigure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Summary;
        break;
      }

      // optional string Summary = 4;
      case 4: {
        if (tag == 34) {
         parse_Summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->summary().data(), this->summary().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "summary");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Notice;
        break;
      }

      // optional string Notice = 5;
      case 5: {
        if (tag == 42) {
         parse_Notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ReviewMode;
        break;
      }

      // optional .pb.EReviewMode ReviewMode = 6;
      case 6: {
        if (tag == 48) {
         parse_ReviewMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EReviewMode_IsValid(value)) {
            set_reviewmode(static_cast< ::pb::EReviewMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_GuildLvLimit;
        break;
      }

      // optional uint32 GuildLvLimit = 7;
      case 7: {
        if (tag == 56) {
         parse_GuildLvLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildlvlimit_)));
          set_has_guildlvlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_QQ;
        break;
      }

      // optional string QQ = 8;
      case 8: {
        if (tag == 66) {
         parse_QQ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qq().data(), this->qq().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qq");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceModifyInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceModifyInfoReq)
  return false;
#undef DO_
}

void TCrossAllianceModifyInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceModifyInfoReq)
  // optional string BannerName = 1;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bannername(), output);
  }

  // optional uint32 BannerBase = 2;
  if (has_bannerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bannerbase(), output);
  }

  // optional uint32 BannerFigure = 3;
  if (has_bannerfigure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bannerfigure(), output);
  }

  // optional string Summary = 4;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->summary(), output);
  }

  // optional string Notice = 5;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->notice(), output);
  }

  // optional .pb.EReviewMode ReviewMode = 6;
  if (has_reviewmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->reviewmode(), output);
  }

  // optional uint32 GuildLvLimit = 7;
  if (has_guildlvlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->guildlvlimit(), output);
  }

  // optional string QQ = 8;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qq().data(), this->qq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->qq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceModifyInfoReq)
}

::google::protobuf::uint8* TCrossAllianceModifyInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceModifyInfoReq)
  // optional string BannerName = 1;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bannername(), target);
  }

  // optional uint32 BannerBase = 2;
  if (has_bannerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bannerbase(), target);
  }

  // optional uint32 BannerFigure = 3;
  if (has_bannerfigure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bannerfigure(), target);
  }

  // optional string Summary = 4;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->summary(), target);
  }

  // optional string Notice = 5;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->notice(), target);
  }

  // optional .pb.EReviewMode ReviewMode = 6;
  if (has_reviewmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->reviewmode(), target);
  }

  // optional uint32 GuildLvLimit = 7;
  if (has_guildlvlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->guildlvlimit(), target);
  }

  // optional string QQ = 8;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qq().data(), this->qq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->qq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceModifyInfoReq)
  return target;
}

int TCrossAllianceModifyInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string BannerName = 1;
    if (has_bannername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bannername());
    }

    // optional uint32 BannerBase = 2;
    if (has_bannerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerbase());
    }

    // optional uint32 BannerFigure = 3;
    if (has_bannerfigure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerfigure());
    }

    // optional string Summary = 4;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summary());
    }

    // optional string Notice = 5;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional .pb.EReviewMode ReviewMode = 6;
    if (has_reviewmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reviewmode());
    }

    // optional uint32 GuildLvLimit = 7;
    if (has_guildlvlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildlvlimit());
    }

    // optional string QQ = 8;
    if (has_qq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceModifyInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceModifyInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceModifyInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceModifyInfoReq::MergeFrom(const TCrossAllianceModifyInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bannername()) {
      set_bannername(from.bannername());
    }
    if (from.has_bannerbase()) {
      set_bannerbase(from.bannerbase());
    }
    if (from.has_bannerfigure()) {
      set_bannerfigure(from.bannerfigure());
    }
    if (from.has_summary()) {
      set_summary(from.summary());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_reviewmode()) {
      set_reviewmode(from.reviewmode());
    }
    if (from.has_guildlvlimit()) {
      set_guildlvlimit(from.guildlvlimit());
    }
    if (from.has_qq()) {
      set_qq(from.qq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceModifyInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceModifyInfoReq::CopyFrom(const TCrossAllianceModifyInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceModifyInfoReq::IsInitialized() const {

  return true;
}

void TCrossAllianceModifyInfoReq::Swap(TCrossAllianceModifyInfoReq* other) {
  if (other != this) {
    std::swap(bannername_, other->bannername_);
    std::swap(bannerbase_, other->bannerbase_);
    std::swap(bannerfigure_, other->bannerfigure_);
    std::swap(summary_, other->summary_);
    std::swap(notice_, other->notice_);
    std::swap(reviewmode_, other->reviewmode_);
    std::swap(guildlvlimit_, other->guildlvlimit_);
    std::swap(qq_, other->qq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceModifyInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceModifyInfoReq_descriptor_;
  metadata.reflection = TCrossAllianceModifyInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceChangeNameReq::kNameFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceChangeNameReq::TCrossAllianceChangeNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceChangeNameReq)
}

void TCrossAllianceChangeNameReq::InitAsDefaultInstance() {
}

TCrossAllianceChangeNameReq::TCrossAllianceChangeNameReq(const TCrossAllianceChangeNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceChangeNameReq)
}

void TCrossAllianceChangeNameReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceChangeNameReq::~TCrossAllianceChangeNameReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceChangeNameReq)
  SharedDtor();
}

void TCrossAllianceChangeNameReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TCrossAllianceChangeNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceChangeNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceChangeNameReq_descriptor_;
}

const TCrossAllianceChangeNameReq& TCrossAllianceChangeNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceChangeNameReq* TCrossAllianceChangeNameReq::default_instance_ = NULL;

TCrossAllianceChangeNameReq* TCrossAllianceChangeNameReq::New() const {
  return new TCrossAllianceChangeNameReq;
}

void TCrossAllianceChangeNameReq::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceChangeNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceChangeNameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceChangeNameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceChangeNameReq)
  return false;
#undef DO_
}

void TCrossAllianceChangeNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceChangeNameReq)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceChangeNameReq)
}

::google::protobuf::uint8* TCrossAllianceChangeNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceChangeNameReq)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceChangeNameReq)
  return target;
}

int TCrossAllianceChangeNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceChangeNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceChangeNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceChangeNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceChangeNameReq::MergeFrom(const TCrossAllianceChangeNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceChangeNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceChangeNameReq::CopyFrom(const TCrossAllianceChangeNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceChangeNameReq::IsInitialized() const {

  return true;
}

void TCrossAllianceChangeNameReq::Swap(TCrossAllianceChangeNameReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceChangeNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceChangeNameReq_descriptor_;
  metadata.reflection = TCrossAllianceChangeNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceKickGuildReq::kGuildIdFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceKickGuildReq::TCrossAllianceKickGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceKickGuildReq)
}

void TCrossAllianceKickGuildReq::InitAsDefaultInstance() {
}

TCrossAllianceKickGuildReq::TCrossAllianceKickGuildReq(const TCrossAllianceKickGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceKickGuildReq)
}

void TCrossAllianceKickGuildReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceKickGuildReq::~TCrossAllianceKickGuildReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceKickGuildReq)
  SharedDtor();
}

void TCrossAllianceKickGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceKickGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceKickGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceKickGuildReq_descriptor_;
}

const TCrossAllianceKickGuildReq& TCrossAllianceKickGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceKickGuildReq* TCrossAllianceKickGuildReq::default_instance_ = NULL;

TCrossAllianceKickGuildReq* TCrossAllianceKickGuildReq::New() const {
  return new TCrossAllianceKickGuildReq;
}

void TCrossAllianceKickGuildReq::Clear() {
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceKickGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceKickGuildReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceKickGuildReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceKickGuildReq)
  return false;
#undef DO_
}

void TCrossAllianceKickGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceKickGuildReq)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceKickGuildReq)
}

::google::protobuf::uint8* TCrossAllianceKickGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceKickGuildReq)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceKickGuildReq)
  return target;
}

int TCrossAllianceKickGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceKickGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceKickGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceKickGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceKickGuildReq::MergeFrom(const TCrossAllianceKickGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceKickGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceKickGuildReq::CopyFrom(const TCrossAllianceKickGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceKickGuildReq::IsInitialized() const {

  return true;
}

void TCrossAllianceKickGuildReq::Swap(TCrossAllianceKickGuildReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceKickGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceKickGuildReq_descriptor_;
  metadata.reflection = TCrossAllianceKickGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceAppointPostReq::kGuildIdFieldNumber;
const int TCrossAllianceAppointPostReq::kPostFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceAppointPostReq::TCrossAllianceAppointPostReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceAppointPostReq)
}

void TCrossAllianceAppointPostReq::InitAsDefaultInstance() {
}

TCrossAllianceAppointPostReq::TCrossAllianceAppointPostReq(const TCrossAllianceAppointPostReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceAppointPostReq)
}

void TCrossAllianceAppointPostReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  post_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceAppointPostReq::~TCrossAllianceAppointPostReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceAppointPostReq)
  SharedDtor();
}

void TCrossAllianceAppointPostReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceAppointPostReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceAppointPostReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceAppointPostReq_descriptor_;
}

const TCrossAllianceAppointPostReq& TCrossAllianceAppointPostReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceAppointPostReq* TCrossAllianceAppointPostReq::default_instance_ = NULL;

TCrossAllianceAppointPostReq* TCrossAllianceAppointPostReq::New() const {
  return new TCrossAllianceAppointPostReq;
}

void TCrossAllianceAppointPostReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossAllianceAppointPostReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guildid_, post_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceAppointPostReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceAppointPostReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Post;
        break;
      }

      // optional .pb.EAlliancePost Post = 2;
      case 2: {
        if (tag == 16) {
         parse_Post:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAlliancePost_IsValid(value)) {
            set_post(static_cast< ::pb::EAlliancePost >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceAppointPostReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceAppointPostReq)
  return false;
#undef DO_
}

void TCrossAllianceAppointPostReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceAppointPostReq)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional .pb.EAlliancePost Post = 2;
  if (has_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->post(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceAppointPostReq)
}

::google::protobuf::uint8* TCrossAllianceAppointPostReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceAppointPostReq)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional .pb.EAlliancePost Post = 2;
  if (has_post()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->post(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceAppointPostReq)
  return target;
}

int TCrossAllianceAppointPostReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional .pb.EAlliancePost Post = 2;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->post());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceAppointPostReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceAppointPostReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceAppointPostReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceAppointPostReq::MergeFrom(const TCrossAllianceAppointPostReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_post()) {
      set_post(from.post());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceAppointPostReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceAppointPostReq::CopyFrom(const TCrossAllianceAppointPostReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceAppointPostReq::IsInitialized() const {

  return true;
}

void TCrossAllianceAppointPostReq::Swap(TCrossAllianceAppointPostReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(post_, other->post_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceAppointPostReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceAppointPostReq_descriptor_;
  metadata.reflection = TCrossAllianceAppointPostReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceInitiateVoteReq::kVoteTypeFieldNumber;
const int TCrossAllianceInitiateVoteReq::kGuildIdFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceInitiateVoteReq::TCrossAllianceInitiateVoteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceInitiateVoteReq)
}

void TCrossAllianceInitiateVoteReq::InitAsDefaultInstance() {
}

TCrossAllianceInitiateVoteReq::TCrossAllianceInitiateVoteReq(const TCrossAllianceInitiateVoteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceInitiateVoteReq)
}

void TCrossAllianceInitiateVoteReq::SharedCtor() {
  _cached_size_ = 0;
  votetype_ = 1;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceInitiateVoteReq::~TCrossAllianceInitiateVoteReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceInitiateVoteReq)
  SharedDtor();
}

void TCrossAllianceInitiateVoteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceInitiateVoteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceInitiateVoteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceInitiateVoteReq_descriptor_;
}

const TCrossAllianceInitiateVoteReq& TCrossAllianceInitiateVoteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceInitiateVoteReq* TCrossAllianceInitiateVoteReq::default_instance_ = NULL;

TCrossAllianceInitiateVoteReq* TCrossAllianceInitiateVoteReq::New() const {
  return new TCrossAllianceInitiateVoteReq;
}

void TCrossAllianceInitiateVoteReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    votetype_ = 1;
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceInitiateVoteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceInitiateVoteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EAllianceVoteType VoteType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAllianceVoteType_IsValid(value)) {
            set_votetype(static_cast< ::pb::EAllianceVoteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GuildId;
        break;
      }

      // optional uint64 GuildId = 2;
      case 2: {
        if (tag == 16) {
         parse_GuildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceInitiateVoteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceInitiateVoteReq)
  return false;
#undef DO_
}

void TCrossAllianceInitiateVoteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceInitiateVoteReq)
  // optional .pb.EAllianceVoteType VoteType = 1;
  if (has_votetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->votetype(), output);
  }

  // optional uint64 GuildId = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceInitiateVoteReq)
}

::google::protobuf::uint8* TCrossAllianceInitiateVoteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceInitiateVoteReq)
  // optional .pb.EAllianceVoteType VoteType = 1;
  if (has_votetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->votetype(), target);
  }

  // optional uint64 GuildId = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceInitiateVoteReq)
  return target;
}

int TCrossAllianceInitiateVoteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EAllianceVoteType VoteType = 1;
    if (has_votetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->votetype());
    }

    // optional uint64 GuildId = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceInitiateVoteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceInitiateVoteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceInitiateVoteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceInitiateVoteReq::MergeFrom(const TCrossAllianceInitiateVoteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_votetype()) {
      set_votetype(from.votetype());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceInitiateVoteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceInitiateVoteReq::CopyFrom(const TCrossAllianceInitiateVoteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceInitiateVoteReq::IsInitialized() const {

  return true;
}

void TCrossAllianceInitiateVoteReq::Swap(TCrossAllianceInitiateVoteReq* other) {
  if (other != this) {
    std::swap(votetype_, other->votetype_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceInitiateVoteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceInitiateVoteReq_descriptor_;
  metadata.reflection = TCrossAllianceInitiateVoteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceCancelVoteReq::kVoteIdFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceCancelVoteReq::TCrossAllianceCancelVoteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceCancelVoteReq)
}

void TCrossAllianceCancelVoteReq::InitAsDefaultInstance() {
}

TCrossAllianceCancelVoteReq::TCrossAllianceCancelVoteReq(const TCrossAllianceCancelVoteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceCancelVoteReq)
}

void TCrossAllianceCancelVoteReq::SharedCtor() {
  _cached_size_ = 0;
  voteid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceCancelVoteReq::~TCrossAllianceCancelVoteReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceCancelVoteReq)
  SharedDtor();
}

void TCrossAllianceCancelVoteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceCancelVoteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceCancelVoteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceCancelVoteReq_descriptor_;
}

const TCrossAllianceCancelVoteReq& TCrossAllianceCancelVoteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceCancelVoteReq* TCrossAllianceCancelVoteReq::default_instance_ = NULL;

TCrossAllianceCancelVoteReq* TCrossAllianceCancelVoteReq::New() const {
  return new TCrossAllianceCancelVoteReq;
}

void TCrossAllianceCancelVoteReq::Clear() {
  voteid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceCancelVoteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceCancelVoteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 VoteId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &voteid_)));
          set_has_voteid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceCancelVoteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceCancelVoteReq)
  return false;
#undef DO_
}

void TCrossAllianceCancelVoteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceCancelVoteReq)
  // optional uint64 VoteId = 1;
  if (has_voteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->voteid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceCancelVoteReq)
}

::google::protobuf::uint8* TCrossAllianceCancelVoteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceCancelVoteReq)
  // optional uint64 VoteId = 1;
  if (has_voteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->voteid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceCancelVoteReq)
  return target;
}

int TCrossAllianceCancelVoteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 VoteId = 1;
    if (has_voteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->voteid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceCancelVoteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceCancelVoteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceCancelVoteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceCancelVoteReq::MergeFrom(const TCrossAllianceCancelVoteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voteid()) {
      set_voteid(from.voteid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceCancelVoteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceCancelVoteReq::CopyFrom(const TCrossAllianceCancelVoteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceCancelVoteReq::IsInitialized() const {

  return true;
}

void TCrossAllianceCancelVoteReq::Swap(TCrossAllianceCancelVoteReq* other) {
  if (other != this) {
    std::swap(voteid_, other->voteid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceCancelVoteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceCancelVoteReq_descriptor_;
  metadata.reflection = TCrossAllianceCancelVoteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceVoteReq::kVoteIdFieldNumber;
const int TCrossAllianceVoteReq::kVoteResultFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceVoteReq::TCrossAllianceVoteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceVoteReq)
}

void TCrossAllianceVoteReq::InitAsDefaultInstance() {
}

TCrossAllianceVoteReq::TCrossAllianceVoteReq(const TCrossAllianceVoteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceVoteReq)
}

void TCrossAllianceVoteReq::SharedCtor() {
  _cached_size_ = 0;
  voteid_ = GOOGLE_ULONGLONG(0);
  voteresult_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceVoteReq::~TCrossAllianceVoteReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceVoteReq)
  SharedDtor();
}

void TCrossAllianceVoteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceVoteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceVoteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceVoteReq_descriptor_;
}

const TCrossAllianceVoteReq& TCrossAllianceVoteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceVoteReq* TCrossAllianceVoteReq::default_instance_ = NULL;

TCrossAllianceVoteReq* TCrossAllianceVoteReq::New() const {
  return new TCrossAllianceVoteReq;
}

void TCrossAllianceVoteReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    voteid_ = GOOGLE_ULONGLONG(0);
    voteresult_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceVoteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceVoteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 VoteId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &voteid_)));
          set_has_voteid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_VoteResult;
        break;
      }

      // optional .pb.EAllianceVoteResult VoteResult = 2;
      case 2: {
        if (tag == 16) {
         parse_VoteResult:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAllianceVoteResult_IsValid(value)) {
            set_voteresult(static_cast< ::pb::EAllianceVoteResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceVoteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceVoteReq)
  return false;
#undef DO_
}

void TCrossAllianceVoteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceVoteReq)
  // optional uint64 VoteId = 1;
  if (has_voteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->voteid(), output);
  }

  // optional .pb.EAllianceVoteResult VoteResult = 2;
  if (has_voteresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->voteresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceVoteReq)
}

::google::protobuf::uint8* TCrossAllianceVoteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceVoteReq)
  // optional uint64 VoteId = 1;
  if (has_voteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->voteid(), target);
  }

  // optional .pb.EAllianceVoteResult VoteResult = 2;
  if (has_voteresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->voteresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceVoteReq)
  return target;
}

int TCrossAllianceVoteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 VoteId = 1;
    if (has_voteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->voteid());
    }

    // optional .pb.EAllianceVoteResult VoteResult = 2;
    if (has_voteresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->voteresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceVoteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceVoteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceVoteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceVoteReq::MergeFrom(const TCrossAllianceVoteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voteid()) {
      set_voteid(from.voteid());
    }
    if (from.has_voteresult()) {
      set_voteresult(from.voteresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceVoteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceVoteReq::CopyFrom(const TCrossAllianceVoteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceVoteReq::IsInitialized() const {

  return true;
}

void TCrossAllianceVoteReq::Swap(TCrossAllianceVoteReq* other) {
  if (other != this) {
    std::swap(voteid_, other->voteid_);
    std::swap(voteresult_, other->voteresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceVoteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceVoteReq_descriptor_;
  metadata.reflection = TCrossAllianceVoteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceUpgradeScienceReq::kIdFieldNumber;
const int TCrossAllianceUpgradeScienceReq::kLevelFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceUpgradeScienceReq::TCrossAllianceUpgradeScienceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceUpgradeScienceReq)
}

void TCrossAllianceUpgradeScienceReq::InitAsDefaultInstance() {
}

TCrossAllianceUpgradeScienceReq::TCrossAllianceUpgradeScienceReq(const TCrossAllianceUpgradeScienceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceUpgradeScienceReq)
}

void TCrossAllianceUpgradeScienceReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceUpgradeScienceReq::~TCrossAllianceUpgradeScienceReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceUpgradeScienceReq)
  SharedDtor();
}

void TCrossAllianceUpgradeScienceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceUpgradeScienceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceUpgradeScienceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceUpgradeScienceReq_descriptor_;
}

const TCrossAllianceUpgradeScienceReq& TCrossAllianceUpgradeScienceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TCrossAllianceUpgradeScienceReq* TCrossAllianceUpgradeScienceReq::default_instance_ = NULL;

TCrossAllianceUpgradeScienceReq* TCrossAllianceUpgradeScienceReq::New() const {
  return new TCrossAllianceUpgradeScienceReq;
}

void TCrossAllianceUpgradeScienceReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossAllianceUpgradeScienceReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceUpgradeScienceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceUpgradeScienceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 2;
      case 2: {
        if (tag == 16) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceUpgradeScienceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceUpgradeScienceReq)
  return false;
#undef DO_
}

void TCrossAllianceUpgradeScienceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceUpgradeScienceReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceUpgradeScienceReq)
}

::google::protobuf::uint8* TCrossAllianceUpgradeScienceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceUpgradeScienceReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceUpgradeScienceReq)
  return target;
}

int TCrossAllianceUpgradeScienceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceUpgradeScienceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceUpgradeScienceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceUpgradeScienceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceUpgradeScienceReq::MergeFrom(const TCrossAllianceUpgradeScienceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceUpgradeScienceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceUpgradeScienceReq::CopyFrom(const TCrossAllianceUpgradeScienceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceUpgradeScienceReq::IsInitialized() const {

  return true;
}

void TCrossAllianceUpgradeScienceReq::Swap(TCrossAllianceUpgradeScienceReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceUpgradeScienceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceUpgradeScienceReq_descriptor_;
  metadata.reflection = TCrossAllianceUpgradeScienceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceInfoChange::kAllianceDetailInfoFieldNumber;
#endif  // !_MSC_VER

TAllianceInfoChange::TAllianceInfoChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceInfoChange)
}

void TAllianceInfoChange::InitAsDefaultInstance() {
  alliancedetailinfo_ = const_cast< ::pb::TAllianceDetailInfo*>(&::pb::TAllianceDetailInfo::default_instance());
}

TAllianceInfoChange::TAllianceInfoChange(const TAllianceInfoChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceInfoChange)
}

void TAllianceInfoChange::SharedCtor() {
  _cached_size_ = 0;
  alliancedetailinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceInfoChange::~TAllianceInfoChange() {
  // @@protoc_insertion_point(destructor:pb.TAllianceInfoChange)
  SharedDtor();
}

void TAllianceInfoChange::SharedDtor() {
  if (this != default_instance_) {
    delete alliancedetailinfo_;
  }
}

void TAllianceInfoChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceInfoChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceInfoChange_descriptor_;
}

const TAllianceInfoChange& TAllianceInfoChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceInfoChange* TAllianceInfoChange::default_instance_ = NULL;

TAllianceInfoChange* TAllianceInfoChange::New() const {
  return new TAllianceInfoChange;
}

void TAllianceInfoChange::Clear() {
  if (has_alliancedetailinfo()) {
    if (alliancedetailinfo_ != NULL) alliancedetailinfo_->::pb::TAllianceDetailInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceInfoChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceInfoChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAllianceDetailInfo AllianceDetailInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliancedetailinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceInfoChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceInfoChange)
  return false;
#undef DO_
}

void TAllianceInfoChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceInfoChange)
  // optional .pb.TAllianceDetailInfo AllianceDetailInfo = 1;
  if (has_alliancedetailinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alliancedetailinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceInfoChange)
}

::google::protobuf::uint8* TAllianceInfoChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceInfoChange)
  // optional .pb.TAllianceDetailInfo AllianceDetailInfo = 1;
  if (has_alliancedetailinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alliancedetailinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceInfoChange)
  return target;
}

int TAllianceInfoChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAllianceDetailInfo AllianceDetailInfo = 1;
    if (has_alliancedetailinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliancedetailinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceInfoChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceInfoChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceInfoChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceInfoChange::MergeFrom(const TAllianceInfoChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alliancedetailinfo()) {
      mutable_alliancedetailinfo()->::pb::TAllianceDetailInfo::MergeFrom(from.alliancedetailinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceInfoChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceInfoChange::CopyFrom(const TAllianceInfoChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceInfoChange::IsInitialized() const {

  return true;
}

void TAllianceInfoChange::Swap(TAllianceInfoChange* other) {
  if (other != this) {
    std::swap(alliancedetailinfo_, other->alliancedetailinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceInfoChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceInfoChange_descriptor_;
  metadata.reflection = TAllianceInfoChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceJoinNotify::kAllianceIdFieldNumber;
#endif  // !_MSC_VER

TAllianceJoinNotify::TAllianceJoinNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceJoinNotify)
}

void TAllianceJoinNotify::InitAsDefaultInstance() {
}

TAllianceJoinNotify::TAllianceJoinNotify(const TAllianceJoinNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceJoinNotify)
}

void TAllianceJoinNotify::SharedCtor() {
  _cached_size_ = 0;
  allianceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceJoinNotify::~TAllianceJoinNotify() {
  // @@protoc_insertion_point(destructor:pb.TAllianceJoinNotify)
  SharedDtor();
}

void TAllianceJoinNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAllianceJoinNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceJoinNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceJoinNotify_descriptor_;
}

const TAllianceJoinNotify& TAllianceJoinNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceJoinNotify* TAllianceJoinNotify::default_instance_ = NULL;

TAllianceJoinNotify* TAllianceJoinNotify::New() const {
  return new TAllianceJoinNotify;
}

void TAllianceJoinNotify::Clear() {
  allianceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceJoinNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceJoinNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 AllianceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceJoinNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceJoinNotify)
  return false;
#undef DO_
}

void TAllianceJoinNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceJoinNotify)
  // optional uint64 AllianceId = 1;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->allianceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceJoinNotify)
}

::google::protobuf::uint8* TAllianceJoinNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceJoinNotify)
  // optional uint64 AllianceId = 1;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->allianceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceJoinNotify)
  return target;
}

int TAllianceJoinNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 AllianceId = 1;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->allianceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceJoinNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceJoinNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceJoinNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceJoinNotify::MergeFrom(const TAllianceJoinNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceJoinNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceJoinNotify::CopyFrom(const TAllianceJoinNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceJoinNotify::IsInitialized() const {

  return true;
}

void TAllianceJoinNotify::Swap(TAllianceJoinNotify* other) {
  if (other != this) {
    std::swap(allianceid_, other->allianceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceJoinNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceJoinNotify_descriptor_;
  metadata.reflection = TAllianceJoinNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAllianceLeaveNotify::kAllianceIdFieldNumber;
#endif  // !_MSC_VER

TAllianceLeaveNotify::TAllianceLeaveNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAllianceLeaveNotify)
}

void TAllianceLeaveNotify::InitAsDefaultInstance() {
}

TAllianceLeaveNotify::TAllianceLeaveNotify(const TAllianceLeaveNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAllianceLeaveNotify)
}

void TAllianceLeaveNotify::SharedCtor() {
  _cached_size_ = 0;
  allianceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAllianceLeaveNotify::~TAllianceLeaveNotify() {
  // @@protoc_insertion_point(destructor:pb.TAllianceLeaveNotify)
  SharedDtor();
}

void TAllianceLeaveNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAllianceLeaveNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAllianceLeaveNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAllianceLeaveNotify_descriptor_;
}

const TAllianceLeaveNotify& TAllianceLeaveNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAlliance_2eproto();
  return *default_instance_;
}

TAllianceLeaveNotify* TAllianceLeaveNotify::default_instance_ = NULL;

TAllianceLeaveNotify* TAllianceLeaveNotify::New() const {
  return new TAllianceLeaveNotify;
}

void TAllianceLeaveNotify::Clear() {
  allianceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAllianceLeaveNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAllianceLeaveNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 AllianceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAllianceLeaveNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAllianceLeaveNotify)
  return false;
#undef DO_
}

void TAllianceLeaveNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAllianceLeaveNotify)
  // optional uint64 AllianceId = 1;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->allianceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAllianceLeaveNotify)
}

::google::protobuf::uint8* TAllianceLeaveNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAllianceLeaveNotify)
  // optional uint64 AllianceId = 1;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->allianceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAllianceLeaveNotify)
  return target;
}

int TAllianceLeaveNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 AllianceId = 1;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->allianceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAllianceLeaveNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAllianceLeaveNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAllianceLeaveNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAllianceLeaveNotify::MergeFrom(const TAllianceLeaveNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAllianceLeaveNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAllianceLeaveNotify::CopyFrom(const TAllianceLeaveNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAllianceLeaveNotify::IsInitialized() const {

  return true;
}

void TAllianceLeaveNotify::Swap(TAllianceLeaveNotify* other) {
  if (other != this) {
    std::swap(allianceid_, other->allianceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAllianceLeaveNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAllianceLeaveNotify_descriptor_;
  metadata.reflection = TAllianceLeaveNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
