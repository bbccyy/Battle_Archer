// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/GrowFund.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/GrowFund.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TGrowFundGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGrowFundGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGrowFundSingleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGrowFundSingleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGrowFundReceiveRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGrowFundReceiveRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGrowFundBuyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGrowFundBuyNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fGrowFund_2eproto() {
  protobuf_AddDesc_net_2fGrowFund_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/GrowFund.proto");
  GOOGLE_CHECK(file != NULL);
  TGrowFundGetInfoRsp_descriptor_ = file->message_type(0);
  static const int TGrowFundGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGrowFundGetInfoRsp, growfundarr_),
  };
  TGrowFundGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGrowFundGetInfoRsp_descriptor_,
      TGrowFundGetInfoRsp::default_instance_,
      TGrowFundGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGrowFundGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGrowFundGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGrowFundGetInfoRsp));
  TGrowFundSingleInfo_descriptor_ = file->message_type(1);
  static const int TGrowFundSingleInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGrowFundSingleInfo, growfundid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGrowFundSingleInfo, buytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGrowFundSingleInfo, receivedrewardindex_),
  };
  TGrowFundSingleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGrowFundSingleInfo_descriptor_,
      TGrowFundSingleInfo::default_instance_,
      TGrowFundSingleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGrowFundSingleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGrowFundSingleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGrowFundSingleInfo));
  TGrowFundReceiveRewardReq_descriptor_ = file->message_type(2);
  static const int TGrowFundReceiveRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGrowFundReceiveRewardReq, growfundid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGrowFundReceiveRewardReq, rewardindex_),
  };
  TGrowFundReceiveRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGrowFundReceiveRewardReq_descriptor_,
      TGrowFundReceiveRewardReq::default_instance_,
      TGrowFundReceiveRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGrowFundReceiveRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGrowFundReceiveRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGrowFundReceiveRewardReq));
  TGrowFundBuyNotify_descriptor_ = file->message_type(3);
  static const int TGrowFundBuyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGrowFundBuyNotify, growfundid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGrowFundBuyNotify, buytime_),
  };
  TGrowFundBuyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGrowFundBuyNotify_descriptor_,
      TGrowFundBuyNotify::default_instance_,
      TGrowFundBuyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGrowFundBuyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGrowFundBuyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGrowFundBuyNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fGrowFund_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGrowFundGetInfoRsp_descriptor_, &TGrowFundGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGrowFundSingleInfo_descriptor_, &TGrowFundSingleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGrowFundReceiveRewardReq_descriptor_, &TGrowFundReceiveRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGrowFundBuyNotify_descriptor_, &TGrowFundBuyNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fGrowFund_2eproto() {
  delete TGrowFundGetInfoRsp::default_instance_;
  delete TGrowFundGetInfoRsp_reflection_;
  delete TGrowFundSingleInfo::default_instance_;
  delete TGrowFundSingleInfo_reflection_;
  delete TGrowFundReceiveRewardReq::default_instance_;
  delete TGrowFundReceiveRewardReq_reflection_;
  delete TGrowFundBuyNotify::default_instance_;
  delete TGrowFundBuyNotify_reflection_;
}

void protobuf_AddDesc_net_2fGrowFund_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022net/GrowFund.proto\022\002pb\"C\n\023TGrowFundGet"
    "InfoRsp\022,\n\013GrowFundArr\030\001 \003(\0132\027.pb.TGrowF"
    "undSingleInfo\"W\n\023TGrowFundSingleInfo\022\022\n\n"
    "GrowFundId\030\001 \001(\r\022\017\n\007BuyTime\030\002 \001(\004\022\033\n\023Rec"
    "eivedRewardIndex\030\003 \003(\r\"D\n\031TGrowFundRecei"
    "veRewardReq\022\022\n\nGrowFundId\030\001 \001(\r\022\023\n\013Rewar"
    "dIndex\030\002 \001(\r\"9\n\022TGrowFundBuyNotify\022\022\n\nGr"
    "owFundId\030\001 \001(\r\022\017\n\007BuyTime\030\002 \001(\004", 311);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/GrowFund.proto", &protobuf_RegisterTypes);
  TGrowFundGetInfoRsp::default_instance_ = new TGrowFundGetInfoRsp();
  TGrowFundSingleInfo::default_instance_ = new TGrowFundSingleInfo();
  TGrowFundReceiveRewardReq::default_instance_ = new TGrowFundReceiveRewardReq();
  TGrowFundBuyNotify::default_instance_ = new TGrowFundBuyNotify();
  TGrowFundGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TGrowFundSingleInfo::default_instance_->InitAsDefaultInstance();
  TGrowFundReceiveRewardReq::default_instance_->InitAsDefaultInstance();
  TGrowFundBuyNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fGrowFund_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fGrowFund_2eproto {
  StaticDescriptorInitializer_net_2fGrowFund_2eproto() {
    protobuf_AddDesc_net_2fGrowFund_2eproto();
  }
} static_descriptor_initializer_net_2fGrowFund_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TGrowFundGetInfoRsp::kGrowFundArrFieldNumber;
#endif  // !_MSC_VER

TGrowFundGetInfoRsp::TGrowFundGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGrowFundGetInfoRsp)
}

void TGrowFundGetInfoRsp::InitAsDefaultInstance() {
}

TGrowFundGetInfoRsp::TGrowFundGetInfoRsp(const TGrowFundGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGrowFundGetInfoRsp)
}

void TGrowFundGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGrowFundGetInfoRsp::~TGrowFundGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGrowFundGetInfoRsp)
  SharedDtor();
}

void TGrowFundGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGrowFundGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGrowFundGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGrowFundGetInfoRsp_descriptor_;
}

const TGrowFundGetInfoRsp& TGrowFundGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGrowFund_2eproto();
  return *default_instance_;
}

TGrowFundGetInfoRsp* TGrowFundGetInfoRsp::default_instance_ = NULL;

TGrowFundGetInfoRsp* TGrowFundGetInfoRsp::New() const {
  return new TGrowFundGetInfoRsp;
}

void TGrowFundGetInfoRsp::Clear() {
  growfundarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGrowFundGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGrowFundGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGrowFundSingleInfo GrowFundArr = 1;
      case 1: {
        if (tag == 10) {
         parse_GrowFundArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_growfundarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_GrowFundArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGrowFundGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGrowFundGetInfoRsp)
  return false;
#undef DO_
}

void TGrowFundGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGrowFundGetInfoRsp)
  // repeated .pb.TGrowFundSingleInfo GrowFundArr = 1;
  for (int i = 0; i < this->growfundarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->growfundarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGrowFundGetInfoRsp)
}

::google::protobuf::uint8* TGrowFundGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGrowFundGetInfoRsp)
  // repeated .pb.TGrowFundSingleInfo GrowFundArr = 1;
  for (int i = 0; i < this->growfundarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->growfundarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGrowFundGetInfoRsp)
  return target;
}

int TGrowFundGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGrowFundSingleInfo GrowFundArr = 1;
  total_size += 1 * this->growfundarr_size();
  for (int i = 0; i < this->growfundarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->growfundarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGrowFundGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGrowFundGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGrowFundGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGrowFundGetInfoRsp::MergeFrom(const TGrowFundGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  growfundarr_.MergeFrom(from.growfundarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGrowFundGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGrowFundGetInfoRsp::CopyFrom(const TGrowFundGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGrowFundGetInfoRsp::IsInitialized() const {

  return true;
}

void TGrowFundGetInfoRsp::Swap(TGrowFundGetInfoRsp* other) {
  if (other != this) {
    growfundarr_.Swap(&other->growfundarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGrowFundGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGrowFundGetInfoRsp_descriptor_;
  metadata.reflection = TGrowFundGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGrowFundSingleInfo::kGrowFundIdFieldNumber;
const int TGrowFundSingleInfo::kBuyTimeFieldNumber;
const int TGrowFundSingleInfo::kReceivedRewardIndexFieldNumber;
#endif  // !_MSC_VER

TGrowFundSingleInfo::TGrowFundSingleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGrowFundSingleInfo)
}

void TGrowFundSingleInfo::InitAsDefaultInstance() {
}

TGrowFundSingleInfo::TGrowFundSingleInfo(const TGrowFundSingleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGrowFundSingleInfo)
}

void TGrowFundSingleInfo::SharedCtor() {
  _cached_size_ = 0;
  growfundid_ = 0u;
  buytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGrowFundSingleInfo::~TGrowFundSingleInfo() {
  // @@protoc_insertion_point(destructor:pb.TGrowFundSingleInfo)
  SharedDtor();
}

void TGrowFundSingleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGrowFundSingleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGrowFundSingleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGrowFundSingleInfo_descriptor_;
}

const TGrowFundSingleInfo& TGrowFundSingleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGrowFund_2eproto();
  return *default_instance_;
}

TGrowFundSingleInfo* TGrowFundSingleInfo::default_instance_ = NULL;

TGrowFundSingleInfo* TGrowFundSingleInfo::New() const {
  return new TGrowFundSingleInfo;
}

void TGrowFundSingleInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    growfundid_ = 0u;
    buytime_ = GOOGLE_ULONGLONG(0);
  }
  receivedrewardindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGrowFundSingleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGrowFundSingleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GrowFundId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &growfundid_)));
          set_has_growfundid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyTime;
        break;
      }

      // optional uint64 BuyTime = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReceivedRewardIndex;
        break;
      }

      // repeated uint32 ReceivedRewardIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_ReceivedRewardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_receivedrewardindex())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_receivedrewardindex())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReceivedRewardIndex;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGrowFundSingleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGrowFundSingleInfo)
  return false;
#undef DO_
}

void TGrowFundSingleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGrowFundSingleInfo)
  // optional uint32 GrowFundId = 1;
  if (has_growfundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->growfundid(), output);
  }

  // optional uint64 BuyTime = 2;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buytime(), output);
  }

  // repeated uint32 ReceivedRewardIndex = 3;
  for (int i = 0; i < this->receivedrewardindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->receivedrewardindex(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGrowFundSingleInfo)
}

::google::protobuf::uint8* TGrowFundSingleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGrowFundSingleInfo)
  // optional uint32 GrowFundId = 1;
  if (has_growfundid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->growfundid(), target);
  }

  // optional uint64 BuyTime = 2;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buytime(), target);
  }

  // repeated uint32 ReceivedRewardIndex = 3;
  for (int i = 0; i < this->receivedrewardindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->receivedrewardindex(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGrowFundSingleInfo)
  return target;
}

int TGrowFundSingleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GrowFundId = 1;
    if (has_growfundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->growfundid());
    }

    // optional uint64 BuyTime = 2;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buytime());
    }

  }
  // repeated uint32 ReceivedRewardIndex = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->receivedrewardindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->receivedrewardindex(i));
    }
    total_size += 1 * this->receivedrewardindex_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGrowFundSingleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGrowFundSingleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGrowFundSingleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGrowFundSingleInfo::MergeFrom(const TGrowFundSingleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  receivedrewardindex_.MergeFrom(from.receivedrewardindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_growfundid()) {
      set_growfundid(from.growfundid());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGrowFundSingleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGrowFundSingleInfo::CopyFrom(const TGrowFundSingleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGrowFundSingleInfo::IsInitialized() const {

  return true;
}

void TGrowFundSingleInfo::Swap(TGrowFundSingleInfo* other) {
  if (other != this) {
    std::swap(growfundid_, other->growfundid_);
    std::swap(buytime_, other->buytime_);
    receivedrewardindex_.Swap(&other->receivedrewardindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGrowFundSingleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGrowFundSingleInfo_descriptor_;
  metadata.reflection = TGrowFundSingleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGrowFundReceiveRewardReq::kGrowFundIdFieldNumber;
const int TGrowFundReceiveRewardReq::kRewardIndexFieldNumber;
#endif  // !_MSC_VER

TGrowFundReceiveRewardReq::TGrowFundReceiveRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGrowFundReceiveRewardReq)
}

void TGrowFundReceiveRewardReq::InitAsDefaultInstance() {
}

TGrowFundReceiveRewardReq::TGrowFundReceiveRewardReq(const TGrowFundReceiveRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGrowFundReceiveRewardReq)
}

void TGrowFundReceiveRewardReq::SharedCtor() {
  _cached_size_ = 0;
  growfundid_ = 0u;
  rewardindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGrowFundReceiveRewardReq::~TGrowFundReceiveRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TGrowFundReceiveRewardReq)
  SharedDtor();
}

void TGrowFundReceiveRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGrowFundReceiveRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGrowFundReceiveRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGrowFundReceiveRewardReq_descriptor_;
}

const TGrowFundReceiveRewardReq& TGrowFundReceiveRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGrowFund_2eproto();
  return *default_instance_;
}

TGrowFundReceiveRewardReq* TGrowFundReceiveRewardReq::default_instance_ = NULL;

TGrowFundReceiveRewardReq* TGrowFundReceiveRewardReq::New() const {
  return new TGrowFundReceiveRewardReq;
}

void TGrowFundReceiveRewardReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGrowFundReceiveRewardReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(growfundid_, rewardindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGrowFundReceiveRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGrowFundReceiveRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GrowFundId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &growfundid_)));
          set_has_growfundid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RewardIndex;
        break;
      }

      // optional uint32 RewardIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardindex_)));
          set_has_rewardindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGrowFundReceiveRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGrowFundReceiveRewardReq)
  return false;
#undef DO_
}

void TGrowFundReceiveRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGrowFundReceiveRewardReq)
  // optional uint32 GrowFundId = 1;
  if (has_growfundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->growfundid(), output);
  }

  // optional uint32 RewardIndex = 2;
  if (has_rewardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rewardindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGrowFundReceiveRewardReq)
}

::google::protobuf::uint8* TGrowFundReceiveRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGrowFundReceiveRewardReq)
  // optional uint32 GrowFundId = 1;
  if (has_growfundid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->growfundid(), target);
  }

  // optional uint32 RewardIndex = 2;
  if (has_rewardindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rewardindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGrowFundReceiveRewardReq)
  return target;
}

int TGrowFundReceiveRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GrowFundId = 1;
    if (has_growfundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->growfundid());
    }

    // optional uint32 RewardIndex = 2;
    if (has_rewardindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGrowFundReceiveRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGrowFundReceiveRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGrowFundReceiveRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGrowFundReceiveRewardReq::MergeFrom(const TGrowFundReceiveRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_growfundid()) {
      set_growfundid(from.growfundid());
    }
    if (from.has_rewardindex()) {
      set_rewardindex(from.rewardindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGrowFundReceiveRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGrowFundReceiveRewardReq::CopyFrom(const TGrowFundReceiveRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGrowFundReceiveRewardReq::IsInitialized() const {

  return true;
}

void TGrowFundReceiveRewardReq::Swap(TGrowFundReceiveRewardReq* other) {
  if (other != this) {
    std::swap(growfundid_, other->growfundid_);
    std::swap(rewardindex_, other->rewardindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGrowFundReceiveRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGrowFundReceiveRewardReq_descriptor_;
  metadata.reflection = TGrowFundReceiveRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGrowFundBuyNotify::kGrowFundIdFieldNumber;
const int TGrowFundBuyNotify::kBuyTimeFieldNumber;
#endif  // !_MSC_VER

TGrowFundBuyNotify::TGrowFundBuyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGrowFundBuyNotify)
}

void TGrowFundBuyNotify::InitAsDefaultInstance() {
}

TGrowFundBuyNotify::TGrowFundBuyNotify(const TGrowFundBuyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGrowFundBuyNotify)
}

void TGrowFundBuyNotify::SharedCtor() {
  _cached_size_ = 0;
  growfundid_ = 0u;
  buytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGrowFundBuyNotify::~TGrowFundBuyNotify() {
  // @@protoc_insertion_point(destructor:pb.TGrowFundBuyNotify)
  SharedDtor();
}

void TGrowFundBuyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGrowFundBuyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGrowFundBuyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGrowFundBuyNotify_descriptor_;
}

const TGrowFundBuyNotify& TGrowFundBuyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGrowFund_2eproto();
  return *default_instance_;
}

TGrowFundBuyNotify* TGrowFundBuyNotify::default_instance_ = NULL;

TGrowFundBuyNotify* TGrowFundBuyNotify::New() const {
  return new TGrowFundBuyNotify;
}

void TGrowFundBuyNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGrowFundBuyNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buytime_, growfundid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGrowFundBuyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGrowFundBuyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GrowFundId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &growfundid_)));
          set_has_growfundid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyTime;
        break;
      }

      // optional uint64 BuyTime = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGrowFundBuyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGrowFundBuyNotify)
  return false;
#undef DO_
}

void TGrowFundBuyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGrowFundBuyNotify)
  // optional uint32 GrowFundId = 1;
  if (has_growfundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->growfundid(), output);
  }

  // optional uint64 BuyTime = 2;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGrowFundBuyNotify)
}

::google::protobuf::uint8* TGrowFundBuyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGrowFundBuyNotify)
  // optional uint32 GrowFundId = 1;
  if (has_growfundid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->growfundid(), target);
  }

  // optional uint64 BuyTime = 2;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGrowFundBuyNotify)
  return target;
}

int TGrowFundBuyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GrowFundId = 1;
    if (has_growfundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->growfundid());
    }

    // optional uint64 BuyTime = 2;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGrowFundBuyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGrowFundBuyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGrowFundBuyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGrowFundBuyNotify::MergeFrom(const TGrowFundBuyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_growfundid()) {
      set_growfundid(from.growfundid());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGrowFundBuyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGrowFundBuyNotify::CopyFrom(const TGrowFundBuyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGrowFundBuyNotify::IsInitialized() const {

  return true;
}

void TGrowFundBuyNotify::Swap(TGrowFundBuyNotify* other) {
  if (other != this) {
    std::swap(growfundid_, other->growfundid_);
    std::swap(buytime_, other->buytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGrowFundBuyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGrowFundBuyNotify_descriptor_;
  metadata.reflection = TGrowFundBuyNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
