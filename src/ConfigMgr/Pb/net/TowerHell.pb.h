// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/TowerHell.proto

#ifndef PROTOBUF_net_2fTowerHell_2eproto__INCLUDED
#define PROTOBUF_net_2fTowerHell_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Battle.pb.h"
#include "net/User.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fTowerHell_2eproto();
void protobuf_AssignDesc_net_2fTowerHell_2eproto();
void protobuf_ShutdownFile_net_2fTowerHell_2eproto();

class TTowerHellInfo;
class TTowerHellGetTowerHellInfoRsp;
class TTowerHellEnterChallengeReq;
class TTowerHellEnterChallengeRsp;
class TTowerHellReportChallengeReq;
class TTowerHellReportChallengeRsp;
class TTowerHellPassedLevelRankReq;
class TTowerHellPassedLevelRankRsp;
class TTowerHellPassedLevelRankItem;
class TTowerHellGetAchieveRewardReq;
class TTowerHellGetHangRewardInfoRsp;
class TTowerHellHangRewardInfo;
class TTowerHellReceiveHangRewardRsp;
class TTowerHellBuyHangRewardRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TTowerHellInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerHell.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerHellInfo : public ::google::protobuf::Message {
 public:
  TTowerHellInfo();
  virtual ~TTowerHellInfo();

  TTowerHellInfo(const TTowerHellInfo& from);

  inline TTowerHellInfo& operator=(const TTowerHellInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerHellInfo& default_instance();

  void Swap(TTowerHellInfo* other);

  // implements Message ----------------------------------------------

  TTowerHellInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerHellInfo& from);
  void MergeFrom(const TTowerHellInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CurPassedLayerId = 1;
  inline bool has_curpassedlayerid() const;
  inline void clear_curpassedlayerid();
  static const int kCurPassedLayerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellInfo</name>
  	<Function>
  		<name>curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curpassedlayerid() const;
  inline void set_curpassedlayerid(::google::protobuf::uint32 value);

  // optional uint32 MaxPassedLayerId = 2;
  inline bool has_maxpassedlayerid() const;
  inline void clear_maxpassedlayerid();
  static const int kMaxPassedLayerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellInfo</name>
  	<Function>
  		<name>maxpassedlayerid</name>
  		<replaceName>MaxPassedLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxpassedlayerid</name>
  		<replaceName>MaxPassedLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxpassedlayerid</name>
  		<replaceName>MaxPassedLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxpassedlayerid() const;
  inline void set_maxpassedlayerid(::google::protobuf::uint32 value);

  // repeated uint32 AchieveRewardInfoArr = 3;
  inline int achieverewardinfoarr_size() const;
  inline void clear_achieverewardinfoarr();
  static const int kAchieveRewardInfoArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellInfo</name>
  	<Function>
  		<name>achieverewardinfoarr</name>
  		<replaceName>AchieveRewardInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_achieverewardinfoarr</name>
  		<replaceName>AchieveRewardInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_achieverewardinfoarr</name>
  		<replaceName>AchieveRewardInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achieverewardinfoarr</name>
  		<replaceName>AchieveRewardInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>achieverewardinfoarr_size</name>
  		<replaceName>AchieveRewardInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 achieverewardinfoarr(int index) const;
  inline void set_achieverewardinfoarr(int index, ::google::protobuf::uint32 value);
  inline void add_achieverewardinfoarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      achieverewardinfoarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_achieverewardinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TTowerHellInfo)
 private:
  inline void set_has_curpassedlayerid();
  inline void clear_has_curpassedlayerid();
  inline void set_has_maxpassedlayerid();
  inline void clear_has_maxpassedlayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 curpassedlayerid_;
  ::google::protobuf::uint32 maxpassedlayerid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > achieverewardinfoarr_;
  friend void  protobuf_AddDesc_net_2fTowerHell_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerHell_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerHell_2eproto();

  void InitAsDefaultInstance();
  static TTowerHellInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerHellGetTowerHellInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerHell.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerHellGetTowerHellInfoRsp : public ::google::protobuf::Message {
 public:
  TTowerHellGetTowerHellInfoRsp();
  virtual ~TTowerHellGetTowerHellInfoRsp();

  TTowerHellGetTowerHellInfoRsp(const TTowerHellGetTowerHellInfoRsp& from);

  inline TTowerHellGetTowerHellInfoRsp& operator=(const TTowerHellGetTowerHellInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerHellGetTowerHellInfoRsp& default_instance();

  void Swap(TTowerHellGetTowerHellInfoRsp* other);

  // implements Message ----------------------------------------------

  TTowerHellGetTowerHellInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerHellGetTowerHellInfoRsp& from);
  void MergeFrom(const TTowerHellGetTowerHellInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TTowerHellInfo TowerHellInfo = 1;
  inline bool has_towerhellinfo() const;
  inline void clear_towerhellinfo();
  static const int kTowerHellInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellGetTowerHellInfoRsp</name>
  	<Function>
  		<name>towerhellinfo</name>
  		<replaceName>TowerHellInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_towerhellinfo</name>
  		<replaceName>TowerHellInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_towerhellinfo</name>
  		<replaceName>TowerHellInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerhellinfo</name>
  		<replaceName>TowerHellInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerHellInfo& towerhellinfo() const;
  inline ::pb::TTowerHellInfo* mutable_towerhellinfo();
  inline ::pb::TTowerHellInfo* release_towerhellinfo();
  inline void set_allocated_towerhellinfo(::pb::TTowerHellInfo* towerhellinfo);

  // optional .pb.TTowerHellHangRewardInfo HangInfo = 2;
  inline bool has_hanginfo() const;
  inline void clear_hanginfo();
  static const int kHangInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellGetTowerHellInfoRsp</name>
  	<Function>
  		<name>hanginfo</name>
  		<replaceName>HangInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hanginfo</name>
  		<replaceName>HangInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_hanginfo</name>
  		<replaceName>HangInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hanginfo</name>
  		<replaceName>HangInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerHellHangRewardInfo& hanginfo() const;
  inline ::pb::TTowerHellHangRewardInfo* mutable_hanginfo();
  inline ::pb::TTowerHellHangRewardInfo* release_hanginfo();
  inline void set_allocated_hanginfo(::pb::TTowerHellHangRewardInfo* hanginfo);

  // optional uint32 BoughtHangRewardNum = 3;
  inline bool has_boughthangrewardnum() const;
  inline void clear_boughthangrewardnum();
  static const int kBoughtHangRewardNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellGetTowerHellInfoRsp</name>
  	<Function>
  		<name>boughthangrewardnum</name>
  		<replaceName>BoughtHangRewardNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_boughthangrewardnum</name>
  		<replaceName>BoughtHangRewardNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_boughthangrewardnum</name>
  		<replaceName>BoughtHangRewardNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 boughthangrewardnum() const;
  inline void set_boughthangrewardnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerHellGetTowerHellInfoRsp)
 private:
  inline void set_has_towerhellinfo();
  inline void clear_has_towerhellinfo();
  inline void set_has_hanginfo();
  inline void clear_has_hanginfo();
  inline void set_has_boughthangrewardnum();
  inline void clear_has_boughthangrewardnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TTowerHellInfo* towerhellinfo_;
  ::pb::TTowerHellHangRewardInfo* hanginfo_;
  ::google::protobuf::uint32 boughthangrewardnum_;
  friend void  protobuf_AddDesc_net_2fTowerHell_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerHell_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerHell_2eproto();

  void InitAsDefaultInstance();
  static TTowerHellGetTowerHellInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerHellEnterChallengeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerHell.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerHellEnterChallengeReq : public ::google::protobuf::Message {
 public:
  TTowerHellEnterChallengeReq();
  virtual ~TTowerHellEnterChallengeReq();

  TTowerHellEnterChallengeReq(const TTowerHellEnterChallengeReq& from);

  inline TTowerHellEnterChallengeReq& operator=(const TTowerHellEnterChallengeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerHellEnterChallengeReq& default_instance();

  void Swap(TTowerHellEnterChallengeReq* other);

  // implements Message ----------------------------------------------

  TTowerHellEnterChallengeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerHellEnterChallengeReq& from);
  void MergeFrom(const TTowerHellEnterChallengeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerId = 1;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellEnterChallengeReq</name>
  	<Function>
  		<name>layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerid() const;
  inline void set_layerid(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellEnterChallengeReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TTowerHellEnterChallengeReq)
 private:
  inline void set_has_layerid();
  inline void clear_has_layerid();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  ::google::protobuf::uint32 layerid_;
  friend void  protobuf_AddDesc_net_2fTowerHell_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerHell_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerHell_2eproto();

  void InitAsDefaultInstance();
  static TTowerHellEnterChallengeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerHellEnterChallengeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerHell.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerHellEnterChallengeRsp : public ::google::protobuf::Message {
 public:
  TTowerHellEnterChallengeRsp();
  virtual ~TTowerHellEnterChallengeRsp();

  TTowerHellEnterChallengeRsp(const TTowerHellEnterChallengeRsp& from);

  inline TTowerHellEnterChallengeRsp& operator=(const TTowerHellEnterChallengeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerHellEnterChallengeRsp& default_instance();

  void Swap(TTowerHellEnterChallengeRsp* other);

  // implements Message ----------------------------------------------

  TTowerHellEnterChallengeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerHellEnterChallengeRsp& from);
  void MergeFrom(const TTowerHellEnterChallengeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleArgs BattleArgs = 1;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellEnterChallengeRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TTowerHellEnterChallengeRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleArgs* battleargs_;
  friend void  protobuf_AddDesc_net_2fTowerHell_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerHell_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerHell_2eproto();

  void InitAsDefaultInstance();
  static TTowerHellEnterChallengeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerHellReportChallengeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerHell.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerHellReportChallengeReq : public ::google::protobuf::Message {
 public:
  TTowerHellReportChallengeReq();
  virtual ~TTowerHellReportChallengeReq();

  TTowerHellReportChallengeReq(const TTowerHellReportChallengeReq& from);

  inline TTowerHellReportChallengeReq& operator=(const TTowerHellReportChallengeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerHellReportChallengeReq& default_instance();

  void Swap(TTowerHellReportChallengeReq* other);

  // implements Message ----------------------------------------------

  TTowerHellReportChallengeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerHellReportChallengeReq& from);
  void MergeFrom(const TTowerHellReportChallengeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerId = 1;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellReportChallengeReq</name>
  	<Function>
  		<name>layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerid() const;
  inline void set_layerid(::google::protobuf::uint32 value);

  // optional bytes BattleReport = 2;
  inline bool has_battlereport() const;
  inline void clear_battlereport();
  static const int kBattleReportFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellReportChallengeReq</name>
  	<Function>
  		<name>battlereport</name>
  		<replaceName>BattleReport</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlereport</name>
  		<replaceName>BattleReport</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlereport</name>
  		<replaceName>BattleReport</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battlereport() const;
  inline void set_battlereport(const ::std::string& value);
  inline void set_battlereport(const char* value);
  inline void set_battlereport(const void* value, size_t size);
  inline ::std::string* mutable_battlereport();
  inline ::std::string* release_battlereport();
  inline void set_allocated_battlereport(::std::string* battlereport);

  // @@protoc_insertion_point(class_scope:pb.TTowerHellReportChallengeReq)
 private:
  inline void set_has_layerid();
  inline void clear_has_layerid();
  inline void set_has_battlereport();
  inline void clear_has_battlereport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* battlereport_;
  ::google::protobuf::uint32 layerid_;
  friend void  protobuf_AddDesc_net_2fTowerHell_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerHell_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerHell_2eproto();

  void InitAsDefaultInstance();
  static TTowerHellReportChallengeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerHellReportChallengeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerHell.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerHellReportChallengeRsp : public ::google::protobuf::Message {
 public:
  TTowerHellReportChallengeRsp();
  virtual ~TTowerHellReportChallengeRsp();

  TTowerHellReportChallengeRsp(const TTowerHellReportChallengeRsp& from);

  inline TTowerHellReportChallengeRsp& operator=(const TTowerHellReportChallengeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerHellReportChallengeRsp& default_instance();

  void Swap(TTowerHellReportChallengeRsp* other);

  // implements Message ----------------------------------------------

  TTowerHellReportChallengeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerHellReportChallengeRsp& from);
  void MergeFrom(const TTowerHellReportChallengeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsWin = 1;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellReportChallengeRsp</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool iswin() const;
  inline void set_iswin(bool value);

  // optional uint32 CurPassedLayerId = 2;
  inline bool has_curpassedlayerid() const;
  inline void clear_curpassedlayerid();
  static const int kCurPassedLayerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellReportChallengeRsp</name>
  	<Function>
  		<name>curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curpassedlayerid() const;
  inline void set_curpassedlayerid(::google::protobuf::uint32 value);

  // optional uint32 MaxPassedLayerId = 3;
  inline bool has_maxpassedlayerid() const;
  inline void clear_maxpassedlayerid();
  static const int kMaxPassedLayerIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellReportChallengeRsp</name>
  	<Function>
  		<name>maxpassedlayerid</name>
  		<replaceName>MaxPassedLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxpassedlayerid</name>
  		<replaceName>MaxPassedLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxpassedlayerid</name>
  		<replaceName>MaxPassedLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxpassedlayerid() const;
  inline void set_maxpassedlayerid(::google::protobuf::uint32 value);

  // optional uint32 Star = 4;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellReportChallengeRsp</name>
  	<Function>
  		<name>star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerHellReportChallengeRsp)
 private:
  inline void set_has_iswin();
  inline void clear_has_iswin();
  inline void set_has_curpassedlayerid();
  inline void clear_has_curpassedlayerid();
  inline void set_has_maxpassedlayerid();
  inline void clear_has_maxpassedlayerid();
  inline void set_has_star();
  inline void clear_has_star();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool iswin_;
  ::google::protobuf::uint32 curpassedlayerid_;
  ::google::protobuf::uint32 maxpassedlayerid_;
  ::google::protobuf::uint32 star_;
  friend void  protobuf_AddDesc_net_2fTowerHell_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerHell_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerHell_2eproto();

  void InitAsDefaultInstance();
  static TTowerHellReportChallengeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerHellPassedLevelRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerHell.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerHellPassedLevelRankReq : public ::google::protobuf::Message {
 public:
  TTowerHellPassedLevelRankReq();
  virtual ~TTowerHellPassedLevelRankReq();

  TTowerHellPassedLevelRankReq(const TTowerHellPassedLevelRankReq& from);

  inline TTowerHellPassedLevelRankReq& operator=(const TTowerHellPassedLevelRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerHellPassedLevelRankReq& default_instance();

  void Swap(TTowerHellPassedLevelRankReq* other);

  // implements Message ----------------------------------------------

  TTowerHellPassedLevelRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerHellPassedLevelRankReq& from);
  void MergeFrom(const TTowerHellPassedLevelRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellPassedLevelRankReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional int32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellPassedLevelRankReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerHellPassedLevelRankReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 limit_;
  friend void  protobuf_AddDesc_net_2fTowerHell_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerHell_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerHell_2eproto();

  void InitAsDefaultInstance();
  static TTowerHellPassedLevelRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerHellPassedLevelRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerHell.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerHellPassedLevelRankRsp : public ::google::protobuf::Message {
 public:
  TTowerHellPassedLevelRankRsp();
  virtual ~TTowerHellPassedLevelRankRsp();

  TTowerHellPassedLevelRankRsp(const TTowerHellPassedLevelRankRsp& from);

  inline TTowerHellPassedLevelRankRsp& operator=(const TTowerHellPassedLevelRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerHellPassedLevelRankRsp& default_instance();

  void Swap(TTowerHellPassedLevelRankRsp* other);

  // implements Message ----------------------------------------------

  TTowerHellPassedLevelRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerHellPassedLevelRankRsp& from);
  void MergeFrom(const TTowerHellPassedLevelRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTowerHellPassedLevelRankItem RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellPassedLevelRankRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerHellPassedLevelRankItem& rankarr(int index) const;
  inline ::pb::TTowerHellPassedLevelRankItem* mutable_rankarr(int index);
  inline ::pb::TTowerHellPassedLevelRankItem* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerHellPassedLevelRankItem >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerHellPassedLevelRankItem >*
      mutable_rankarr();

  // optional uint32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellPassedLevelRankRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerHellPassedLevelRankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTowerHellPassedLevelRankItem > rankarr_;
  ::google::protobuf::uint32 myrank_;
  friend void  protobuf_AddDesc_net_2fTowerHell_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerHell_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerHell_2eproto();

  void InitAsDefaultInstance();
  static TTowerHellPassedLevelRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerHellPassedLevelRankItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerHell.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerHellPassedLevelRankItem : public ::google::protobuf::Message {
 public:
  TTowerHellPassedLevelRankItem();
  virtual ~TTowerHellPassedLevelRankItem();

  TTowerHellPassedLevelRankItem(const TTowerHellPassedLevelRankItem& from);

  inline TTowerHellPassedLevelRankItem& operator=(const TTowerHellPassedLevelRankItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerHellPassedLevelRankItem& default_instance();

  void Swap(TTowerHellPassedLevelRankItem* other);

  // implements Message ----------------------------------------------

  TTowerHellPassedLevelRankItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerHellPassedLevelRankItem& from);
  void MergeFrom(const TTowerHellPassedLevelRankItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellPassedLevelRankItem</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 PassedLayer = 2;
  inline bool has_passedlayer() const;
  inline void clear_passedlayer();
  static const int kPassedLayerFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellPassedLevelRankItem</name>
  	<Function>
  		<name>passedlayer</name>
  		<replaceName>PassedLayer</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_passedlayer</name>
  		<replaceName>PassedLayer</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_passedlayer</name>
  		<replaceName>PassedLayer</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 passedlayer() const;
  inline void set_passedlayer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerHellPassedLevelRankItem)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_passedlayer();
  inline void clear_has_passedlayer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint32 passedlayer_;
  friend void  protobuf_AddDesc_net_2fTowerHell_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerHell_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerHell_2eproto();

  void InitAsDefaultInstance();
  static TTowerHellPassedLevelRankItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerHellGetAchieveRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerHell.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerHellGetAchieveRewardReq : public ::google::protobuf::Message {
 public:
  TTowerHellGetAchieveRewardReq();
  virtual ~TTowerHellGetAchieveRewardReq();

  TTowerHellGetAchieveRewardReq(const TTowerHellGetAchieveRewardReq& from);

  inline TTowerHellGetAchieveRewardReq& operator=(const TTowerHellGetAchieveRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerHellGetAchieveRewardReq& default_instance();

  void Swap(TTowerHellGetAchieveRewardReq* other);

  // implements Message ----------------------------------------------

  TTowerHellGetAchieveRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerHellGetAchieveRewardReq& from);
  void MergeFrom(const TTowerHellGetAchieveRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RewardId = 1;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellGetAchieveRewardReq</name>
  	<Function>
  		<name>rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardid() const;
  inline void set_rewardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerHellGetAchieveRewardReq)
 private:
  inline void set_has_rewardid();
  inline void clear_has_rewardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rewardid_;
  friend void  protobuf_AddDesc_net_2fTowerHell_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerHell_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerHell_2eproto();

  void InitAsDefaultInstance();
  static TTowerHellGetAchieveRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerHellGetHangRewardInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerHell.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerHellGetHangRewardInfoRsp : public ::google::protobuf::Message {
 public:
  TTowerHellGetHangRewardInfoRsp();
  virtual ~TTowerHellGetHangRewardInfoRsp();

  TTowerHellGetHangRewardInfoRsp(const TTowerHellGetHangRewardInfoRsp& from);

  inline TTowerHellGetHangRewardInfoRsp& operator=(const TTowerHellGetHangRewardInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerHellGetHangRewardInfoRsp& default_instance();

  void Swap(TTowerHellGetHangRewardInfoRsp* other);

  // implements Message ----------------------------------------------

  TTowerHellGetHangRewardInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerHellGetHangRewardInfoRsp& from);
  void MergeFrom(const TTowerHellGetHangRewardInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TTowerHellHangRewardInfo HangInfo = 1;
  inline bool has_hanginfo() const;
  inline void clear_hanginfo();
  static const int kHangInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellGetHangRewardInfoRsp</name>
  	<Function>
  		<name>hanginfo</name>
  		<replaceName>HangInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hanginfo</name>
  		<replaceName>HangInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_hanginfo</name>
  		<replaceName>HangInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hanginfo</name>
  		<replaceName>HangInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerHellHangRewardInfo& hanginfo() const;
  inline ::pb::TTowerHellHangRewardInfo* mutable_hanginfo();
  inline ::pb::TTowerHellHangRewardInfo* release_hanginfo();
  inline void set_allocated_hanginfo(::pb::TTowerHellHangRewardInfo* hanginfo);

  // @@protoc_insertion_point(class_scope:pb.TTowerHellGetHangRewardInfoRsp)
 private:
  inline void set_has_hanginfo();
  inline void clear_has_hanginfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TTowerHellHangRewardInfo* hanginfo_;
  friend void  protobuf_AddDesc_net_2fTowerHell_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerHell_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerHell_2eproto();

  void InitAsDefaultInstance();
  static TTowerHellGetHangRewardInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerHellHangRewardInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerHell.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerHellHangRewardInfo : public ::google::protobuf::Message {
 public:
  TTowerHellHangRewardInfo();
  virtual ~TTowerHellHangRewardInfo();

  TTowerHellHangRewardInfo(const TTowerHellHangRewardInfo& from);

  inline TTowerHellHangRewardInfo& operator=(const TTowerHellHangRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerHellHangRewardInfo& default_instance();

  void Swap(TTowerHellHangRewardInfo* other);

  // implements Message ----------------------------------------------

  TTowerHellHangRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerHellHangRewardInfo& from);
  void MergeFrom(const TTowerHellHangRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 HangTime = 1;
  inline bool has_hangtime() const;
  inline void clear_hangtime();
  static const int kHangTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellHangRewardInfo</name>
  	<Function>
  		<name>hangtime</name>
  		<replaceName>HangTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hangtime</name>
  		<replaceName>HangTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hangtime</name>
  		<replaceName>HangTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hangtime() const;
  inline void set_hangtime(::google::protobuf::uint64 value);

  // optional uint64 HangReceiveTime = 2;
  inline bool has_hangreceivetime() const;
  inline void clear_hangreceivetime();
  static const int kHangReceiveTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellHangRewardInfo</name>
  	<Function>
  		<name>hangreceivetime</name>
  		<replaceName>HangReceiveTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hangreceivetime</name>
  		<replaceName>HangReceiveTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hangreceivetime</name>
  		<replaceName>HangReceiveTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hangreceivetime() const;
  inline void set_hangreceivetime(::google::protobuf::uint64 value);

  // repeated .pb.TCommonReward RandomRewardArr = 3;
  inline int randomrewardarr_size() const;
  inline void clear_randomrewardarr();
  static const int kRandomRewardArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellHangRewardInfo</name>
  	<Function>
  		<name>randomrewardarr</name>
  		<replaceName>RandomRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_randomrewardarr</name>
  		<replaceName>RandomRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_randomrewardarr</name>
  		<replaceName>RandomRewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_randomrewardarr</name>
  		<replaceName>RandomRewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>randomrewardarr_size</name>
  		<replaceName>RandomRewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& randomrewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_randomrewardarr(int index);
  inline ::pb::TCommonReward* add_randomrewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      randomrewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_randomrewardarr();

  // @@protoc_insertion_point(class_scope:pb.TTowerHellHangRewardInfo)
 private:
  inline void set_has_hangtime();
  inline void clear_has_hangtime();
  inline void set_has_hangreceivetime();
  inline void clear_has_hangreceivetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 hangtime_;
  ::google::protobuf::uint64 hangreceivetime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > randomrewardarr_;
  friend void  protobuf_AddDesc_net_2fTowerHell_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerHell_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerHell_2eproto();

  void InitAsDefaultInstance();
  static TTowerHellHangRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerHellReceiveHangRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerHell.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerHellReceiveHangRewardRsp : public ::google::protobuf::Message {
 public:
  TTowerHellReceiveHangRewardRsp();
  virtual ~TTowerHellReceiveHangRewardRsp();

  TTowerHellReceiveHangRewardRsp(const TTowerHellReceiveHangRewardRsp& from);

  inline TTowerHellReceiveHangRewardRsp& operator=(const TTowerHellReceiveHangRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerHellReceiveHangRewardRsp& default_instance();

  void Swap(TTowerHellReceiveHangRewardRsp* other);

  // implements Message ----------------------------------------------

  TTowerHellReceiveHangRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerHellReceiveHangRewardRsp& from);
  void MergeFrom(const TTowerHellReceiveHangRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 HangTime = 1;
  inline bool has_hangtime() const;
  inline void clear_hangtime();
  static const int kHangTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellReceiveHangRewardRsp</name>
  	<Function>
  		<name>hangtime</name>
  		<replaceName>HangTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hangtime</name>
  		<replaceName>HangTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hangtime</name>
  		<replaceName>HangTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hangtime() const;
  inline void set_hangtime(::google::protobuf::uint64 value);

  // optional uint64 HangReceiveTime = 2;
  inline bool has_hangreceivetime() const;
  inline void clear_hangreceivetime();
  static const int kHangReceiveTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellReceiveHangRewardRsp</name>
  	<Function>
  		<name>hangreceivetime</name>
  		<replaceName>HangReceiveTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hangreceivetime</name>
  		<replaceName>HangReceiveTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hangreceivetime</name>
  		<replaceName>HangReceiveTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hangreceivetime() const;
  inline void set_hangreceivetime(::google::protobuf::uint64 value);

  // repeated .pb.TCommonReward RewardArr = 3;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellReceiveHangRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TTowerHellReceiveHangRewardRsp)
 private:
  inline void set_has_hangtime();
  inline void clear_has_hangtime();
  inline void set_has_hangreceivetime();
  inline void clear_has_hangreceivetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 hangtime_;
  ::google::protobuf::uint64 hangreceivetime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fTowerHell_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerHell_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerHell_2eproto();

  void InitAsDefaultInstance();
  static TTowerHellReceiveHangRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerHellBuyHangRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerHell.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerHellBuyHangRewardRsp : public ::google::protobuf::Message {
 public:
  TTowerHellBuyHangRewardRsp();
  virtual ~TTowerHellBuyHangRewardRsp();

  TTowerHellBuyHangRewardRsp(const TTowerHellBuyHangRewardRsp& from);

  inline TTowerHellBuyHangRewardRsp& operator=(const TTowerHellBuyHangRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerHellBuyHangRewardRsp& default_instance();

  void Swap(TTowerHellBuyHangRewardRsp* other);

  // implements Message ----------------------------------------------

  TTowerHellBuyHangRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerHellBuyHangRewardRsp& from);
  void MergeFrom(const TTowerHellBuyHangRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BoughtHangRewardNum = 1;
  inline bool has_boughthangrewardnum() const;
  inline void clear_boughthangrewardnum();
  static const int kBoughtHangRewardNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellBuyHangRewardRsp</name>
  	<Function>
  		<name>boughthangrewardnum</name>
  		<replaceName>BoughtHangRewardNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_boughthangrewardnum</name>
  		<replaceName>BoughtHangRewardNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_boughthangrewardnum</name>
  		<replaceName>BoughtHangRewardNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 boughthangrewardnum() const;
  inline void set_boughthangrewardnum(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward RewardArr = 2;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerHellBuyHangRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TTowerHellBuyHangRewardRsp)
 private:
  inline void set_has_boughthangrewardnum();
  inline void clear_has_boughthangrewardnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 boughthangrewardnum_;
  friend void  protobuf_AddDesc_net_2fTowerHell_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerHell_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerHell_2eproto();

  void InitAsDefaultInstance();
  static TTowerHellBuyHangRewardRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TTowerHellInfo

// optional uint32 CurPassedLayerId = 1;
inline bool TTowerHellInfo::has_curpassedlayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerHellInfo::set_has_curpassedlayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerHellInfo::clear_has_curpassedlayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerHellInfo::clear_curpassedlayerid() {
  curpassedlayerid_ = 0u;
  clear_has_curpassedlayerid();
}
inline ::google::protobuf::uint32 TTowerHellInfo::curpassedlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellInfo.CurPassedLayerId)
  return curpassedlayerid_;
}
inline void TTowerHellInfo::set_curpassedlayerid(::google::protobuf::uint32 value) {
  set_has_curpassedlayerid();
  curpassedlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellInfo.CurPassedLayerId)
}

// optional uint32 MaxPassedLayerId = 2;
inline bool TTowerHellInfo::has_maxpassedlayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerHellInfo::set_has_maxpassedlayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerHellInfo::clear_has_maxpassedlayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerHellInfo::clear_maxpassedlayerid() {
  maxpassedlayerid_ = 0u;
  clear_has_maxpassedlayerid();
}
inline ::google::protobuf::uint32 TTowerHellInfo::maxpassedlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellInfo.MaxPassedLayerId)
  return maxpassedlayerid_;
}
inline void TTowerHellInfo::set_maxpassedlayerid(::google::protobuf::uint32 value) {
  set_has_maxpassedlayerid();
  maxpassedlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellInfo.MaxPassedLayerId)
}

// repeated uint32 AchieveRewardInfoArr = 3;
inline int TTowerHellInfo::achieverewardinfoarr_size() const {
  return achieverewardinfoarr_.size();
}
inline void TTowerHellInfo::clear_achieverewardinfoarr() {
  achieverewardinfoarr_.Clear();
}
inline ::google::protobuf::uint32 TTowerHellInfo::achieverewardinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellInfo.AchieveRewardInfoArr)
  return achieverewardinfoarr_.Get(index);
}
inline void TTowerHellInfo::set_achieverewardinfoarr(int index, ::google::protobuf::uint32 value) {
  achieverewardinfoarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TTowerHellInfo.AchieveRewardInfoArr)
}
inline void TTowerHellInfo::add_achieverewardinfoarr(::google::protobuf::uint32 value) {
  achieverewardinfoarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TTowerHellInfo.AchieveRewardInfoArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TTowerHellInfo::achieverewardinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TTowerHellInfo.AchieveRewardInfoArr)
  return achieverewardinfoarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TTowerHellInfo::mutable_achieverewardinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerHellInfo.AchieveRewardInfoArr)
  return &achieverewardinfoarr_;
}

// -------------------------------------------------------------------

// TTowerHellGetTowerHellInfoRsp

// optional .pb.TTowerHellInfo TowerHellInfo = 1;
inline bool TTowerHellGetTowerHellInfoRsp::has_towerhellinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerHellGetTowerHellInfoRsp::set_has_towerhellinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerHellGetTowerHellInfoRsp::clear_has_towerhellinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerHellGetTowerHellInfoRsp::clear_towerhellinfo() {
  if (towerhellinfo_ != NULL) towerhellinfo_->::pb::TTowerHellInfo::Clear();
  clear_has_towerhellinfo();
}
inline const ::pb::TTowerHellInfo& TTowerHellGetTowerHellInfoRsp::towerhellinfo() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellGetTowerHellInfoRsp.TowerHellInfo)
  return towerhellinfo_ != NULL ? *towerhellinfo_ : *default_instance_->towerhellinfo_;
}
inline ::pb::TTowerHellInfo* TTowerHellGetTowerHellInfoRsp::mutable_towerhellinfo() {
  set_has_towerhellinfo();
  if (towerhellinfo_ == NULL) towerhellinfo_ = new ::pb::TTowerHellInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTowerHellGetTowerHellInfoRsp.TowerHellInfo)
  return towerhellinfo_;
}
inline ::pb::TTowerHellInfo* TTowerHellGetTowerHellInfoRsp::release_towerhellinfo() {
  clear_has_towerhellinfo();
  ::pb::TTowerHellInfo* temp = towerhellinfo_;
  towerhellinfo_ = NULL;
  return temp;
}
inline void TTowerHellGetTowerHellInfoRsp::set_allocated_towerhellinfo(::pb::TTowerHellInfo* towerhellinfo) {
  delete towerhellinfo_;
  towerhellinfo_ = towerhellinfo;
  if (towerhellinfo) {
    set_has_towerhellinfo();
  } else {
    clear_has_towerhellinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerHellGetTowerHellInfoRsp.TowerHellInfo)
}

// optional .pb.TTowerHellHangRewardInfo HangInfo = 2;
inline bool TTowerHellGetTowerHellInfoRsp::has_hanginfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerHellGetTowerHellInfoRsp::set_has_hanginfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerHellGetTowerHellInfoRsp::clear_has_hanginfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerHellGetTowerHellInfoRsp::clear_hanginfo() {
  if (hanginfo_ != NULL) hanginfo_->::pb::TTowerHellHangRewardInfo::Clear();
  clear_has_hanginfo();
}
inline const ::pb::TTowerHellHangRewardInfo& TTowerHellGetTowerHellInfoRsp::hanginfo() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellGetTowerHellInfoRsp.HangInfo)
  return hanginfo_ != NULL ? *hanginfo_ : *default_instance_->hanginfo_;
}
inline ::pb::TTowerHellHangRewardInfo* TTowerHellGetTowerHellInfoRsp::mutable_hanginfo() {
  set_has_hanginfo();
  if (hanginfo_ == NULL) hanginfo_ = new ::pb::TTowerHellHangRewardInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTowerHellGetTowerHellInfoRsp.HangInfo)
  return hanginfo_;
}
inline ::pb::TTowerHellHangRewardInfo* TTowerHellGetTowerHellInfoRsp::release_hanginfo() {
  clear_has_hanginfo();
  ::pb::TTowerHellHangRewardInfo* temp = hanginfo_;
  hanginfo_ = NULL;
  return temp;
}
inline void TTowerHellGetTowerHellInfoRsp::set_allocated_hanginfo(::pb::TTowerHellHangRewardInfo* hanginfo) {
  delete hanginfo_;
  hanginfo_ = hanginfo;
  if (hanginfo) {
    set_has_hanginfo();
  } else {
    clear_has_hanginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerHellGetTowerHellInfoRsp.HangInfo)
}

// optional uint32 BoughtHangRewardNum = 3;
inline bool TTowerHellGetTowerHellInfoRsp::has_boughthangrewardnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerHellGetTowerHellInfoRsp::set_has_boughthangrewardnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerHellGetTowerHellInfoRsp::clear_has_boughthangrewardnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerHellGetTowerHellInfoRsp::clear_boughthangrewardnum() {
  boughthangrewardnum_ = 0u;
  clear_has_boughthangrewardnum();
}
inline ::google::protobuf::uint32 TTowerHellGetTowerHellInfoRsp::boughthangrewardnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellGetTowerHellInfoRsp.BoughtHangRewardNum)
  return boughthangrewardnum_;
}
inline void TTowerHellGetTowerHellInfoRsp::set_boughthangrewardnum(::google::protobuf::uint32 value) {
  set_has_boughthangrewardnum();
  boughthangrewardnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellGetTowerHellInfoRsp.BoughtHangRewardNum)
}

// -------------------------------------------------------------------

// TTowerHellEnterChallengeReq

// optional uint32 LayerId = 1;
inline bool TTowerHellEnterChallengeReq::has_layerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerHellEnterChallengeReq::set_has_layerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerHellEnterChallengeReq::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerHellEnterChallengeReq::clear_layerid() {
  layerid_ = 0u;
  clear_has_layerid();
}
inline ::google::protobuf::uint32 TTowerHellEnterChallengeReq::layerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellEnterChallengeReq.LayerId)
  return layerid_;
}
inline void TTowerHellEnterChallengeReq::set_layerid(::google::protobuf::uint32 value) {
  set_has_layerid();
  layerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellEnterChallengeReq.LayerId)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 2;
inline bool TTowerHellEnterChallengeReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerHellEnterChallengeReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerHellEnterChallengeReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerHellEnterChallengeReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TTowerHellEnterChallengeReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellEnterChallengeReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TTowerHellEnterChallengeReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TTowerHellEnterChallengeReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TTowerHellEnterChallengeReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TTowerHellEnterChallengeReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerHellEnterChallengeReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TTowerHellEnterChallengeRsp

// optional .pb.TBattleArgs BattleArgs = 1;
inline bool TTowerHellEnterChallengeRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerHellEnterChallengeRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerHellEnterChallengeRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerHellEnterChallengeRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TTowerHellEnterChallengeRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellEnterChallengeRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TTowerHellEnterChallengeRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TTowerHellEnterChallengeRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TTowerHellEnterChallengeRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TTowerHellEnterChallengeRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerHellEnterChallengeRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TTowerHellReportChallengeReq

// optional uint32 LayerId = 1;
inline bool TTowerHellReportChallengeReq::has_layerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerHellReportChallengeReq::set_has_layerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerHellReportChallengeReq::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerHellReportChallengeReq::clear_layerid() {
  layerid_ = 0u;
  clear_has_layerid();
}
inline ::google::protobuf::uint32 TTowerHellReportChallengeReq::layerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellReportChallengeReq.LayerId)
  return layerid_;
}
inline void TTowerHellReportChallengeReq::set_layerid(::google::protobuf::uint32 value) {
  set_has_layerid();
  layerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellReportChallengeReq.LayerId)
}

// optional bytes BattleReport = 2;
inline bool TTowerHellReportChallengeReq::has_battlereport() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerHellReportChallengeReq::set_has_battlereport() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerHellReportChallengeReq::clear_has_battlereport() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerHellReportChallengeReq::clear_battlereport() {
  if (battlereport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlereport_->clear();
  }
  clear_has_battlereport();
}
inline const ::std::string& TTowerHellReportChallengeReq::battlereport() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellReportChallengeReq.BattleReport)
  return *battlereport_;
}
inline void TTowerHellReportChallengeReq::set_battlereport(const ::std::string& value) {
  set_has_battlereport();
  if (battlereport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlereport_ = new ::std::string;
  }
  battlereport_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TTowerHellReportChallengeReq.BattleReport)
}
inline void TTowerHellReportChallengeReq::set_battlereport(const char* value) {
  set_has_battlereport();
  if (battlereport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlereport_ = new ::std::string;
  }
  battlereport_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TTowerHellReportChallengeReq.BattleReport)
}
inline void TTowerHellReportChallengeReq::set_battlereport(const void* value, size_t size) {
  set_has_battlereport();
  if (battlereport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlereport_ = new ::std::string;
  }
  battlereport_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TTowerHellReportChallengeReq.BattleReport)
}
inline ::std::string* TTowerHellReportChallengeReq::mutable_battlereport() {
  set_has_battlereport();
  if (battlereport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlereport_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TTowerHellReportChallengeReq.BattleReport)
  return battlereport_;
}
inline ::std::string* TTowerHellReportChallengeReq::release_battlereport() {
  clear_has_battlereport();
  if (battlereport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battlereport_;
    battlereport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TTowerHellReportChallengeReq::set_allocated_battlereport(::std::string* battlereport) {
  if (battlereport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battlereport_;
  }
  if (battlereport) {
    set_has_battlereport();
    battlereport_ = battlereport;
  } else {
    clear_has_battlereport();
    battlereport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerHellReportChallengeReq.BattleReport)
}

// -------------------------------------------------------------------

// TTowerHellReportChallengeRsp

// optional bool IsWin = 1;
inline bool TTowerHellReportChallengeRsp::has_iswin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerHellReportChallengeRsp::set_has_iswin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerHellReportChallengeRsp::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerHellReportChallengeRsp::clear_iswin() {
  iswin_ = false;
  clear_has_iswin();
}
inline bool TTowerHellReportChallengeRsp::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellReportChallengeRsp.IsWin)
  return iswin_;
}
inline void TTowerHellReportChallengeRsp::set_iswin(bool value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellReportChallengeRsp.IsWin)
}

// optional uint32 CurPassedLayerId = 2;
inline bool TTowerHellReportChallengeRsp::has_curpassedlayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerHellReportChallengeRsp::set_has_curpassedlayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerHellReportChallengeRsp::clear_has_curpassedlayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerHellReportChallengeRsp::clear_curpassedlayerid() {
  curpassedlayerid_ = 0u;
  clear_has_curpassedlayerid();
}
inline ::google::protobuf::uint32 TTowerHellReportChallengeRsp::curpassedlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellReportChallengeRsp.CurPassedLayerId)
  return curpassedlayerid_;
}
inline void TTowerHellReportChallengeRsp::set_curpassedlayerid(::google::protobuf::uint32 value) {
  set_has_curpassedlayerid();
  curpassedlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellReportChallengeRsp.CurPassedLayerId)
}

// optional uint32 MaxPassedLayerId = 3;
inline bool TTowerHellReportChallengeRsp::has_maxpassedlayerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerHellReportChallengeRsp::set_has_maxpassedlayerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerHellReportChallengeRsp::clear_has_maxpassedlayerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerHellReportChallengeRsp::clear_maxpassedlayerid() {
  maxpassedlayerid_ = 0u;
  clear_has_maxpassedlayerid();
}
inline ::google::protobuf::uint32 TTowerHellReportChallengeRsp::maxpassedlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellReportChallengeRsp.MaxPassedLayerId)
  return maxpassedlayerid_;
}
inline void TTowerHellReportChallengeRsp::set_maxpassedlayerid(::google::protobuf::uint32 value) {
  set_has_maxpassedlayerid();
  maxpassedlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellReportChallengeRsp.MaxPassedLayerId)
}

// optional uint32 Star = 4;
inline bool TTowerHellReportChallengeRsp::has_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTowerHellReportChallengeRsp::set_has_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTowerHellReportChallengeRsp::clear_has_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTowerHellReportChallengeRsp::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 TTowerHellReportChallengeRsp::star() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellReportChallengeRsp.Star)
  return star_;
}
inline void TTowerHellReportChallengeRsp::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellReportChallengeRsp.Star)
}

// -------------------------------------------------------------------

// TTowerHellPassedLevelRankReq

// optional int32 Offset = 1;
inline bool TTowerHellPassedLevelRankReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerHellPassedLevelRankReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerHellPassedLevelRankReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerHellPassedLevelRankReq::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 TTowerHellPassedLevelRankReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellPassedLevelRankReq.Offset)
  return offset_;
}
inline void TTowerHellPassedLevelRankReq::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellPassedLevelRankReq.Offset)
}

// optional int32 Limit = 2;
inline bool TTowerHellPassedLevelRankReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerHellPassedLevelRankReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerHellPassedLevelRankReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerHellPassedLevelRankReq::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 TTowerHellPassedLevelRankReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellPassedLevelRankReq.Limit)
  return limit_;
}
inline void TTowerHellPassedLevelRankReq::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellPassedLevelRankReq.Limit)
}

// -------------------------------------------------------------------

// TTowerHellPassedLevelRankRsp

// repeated .pb.TTowerHellPassedLevelRankItem RankArr = 1;
inline int TTowerHellPassedLevelRankRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TTowerHellPassedLevelRankRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TTowerHellPassedLevelRankItem& TTowerHellPassedLevelRankRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellPassedLevelRankRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TTowerHellPassedLevelRankItem* TTowerHellPassedLevelRankRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerHellPassedLevelRankRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TTowerHellPassedLevelRankItem* TTowerHellPassedLevelRankRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TTowerHellPassedLevelRankRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerHellPassedLevelRankItem >&
TTowerHellPassedLevelRankRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TTowerHellPassedLevelRankRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerHellPassedLevelRankItem >*
TTowerHellPassedLevelRankRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerHellPassedLevelRankRsp.RankArr)
  return &rankarr_;
}

// optional uint32 MyRank = 2;
inline bool TTowerHellPassedLevelRankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerHellPassedLevelRankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerHellPassedLevelRankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerHellPassedLevelRankRsp::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 TTowerHellPassedLevelRankRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellPassedLevelRankRsp.MyRank)
  return myrank_;
}
inline void TTowerHellPassedLevelRankRsp::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellPassedLevelRankRsp.MyRank)
}

// -------------------------------------------------------------------

// TTowerHellPassedLevelRankItem

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TTowerHellPassedLevelRankItem::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerHellPassedLevelRankItem::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerHellPassedLevelRankItem::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerHellPassedLevelRankItem::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TTowerHellPassedLevelRankItem::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellPassedLevelRankItem.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TTowerHellPassedLevelRankItem::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTowerHellPassedLevelRankItem.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TTowerHellPassedLevelRankItem::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TTowerHellPassedLevelRankItem::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerHellPassedLevelRankItem.UserInfo)
}

// optional uint32 PassedLayer = 2;
inline bool TTowerHellPassedLevelRankItem::has_passedlayer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerHellPassedLevelRankItem::set_has_passedlayer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerHellPassedLevelRankItem::clear_has_passedlayer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerHellPassedLevelRankItem::clear_passedlayer() {
  passedlayer_ = 0u;
  clear_has_passedlayer();
}
inline ::google::protobuf::uint32 TTowerHellPassedLevelRankItem::passedlayer() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellPassedLevelRankItem.PassedLayer)
  return passedlayer_;
}
inline void TTowerHellPassedLevelRankItem::set_passedlayer(::google::protobuf::uint32 value) {
  set_has_passedlayer();
  passedlayer_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellPassedLevelRankItem.PassedLayer)
}

// -------------------------------------------------------------------

// TTowerHellGetAchieveRewardReq

// optional uint32 RewardId = 1;
inline bool TTowerHellGetAchieveRewardReq::has_rewardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerHellGetAchieveRewardReq::set_has_rewardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerHellGetAchieveRewardReq::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerHellGetAchieveRewardReq::clear_rewardid() {
  rewardid_ = 0u;
  clear_has_rewardid();
}
inline ::google::protobuf::uint32 TTowerHellGetAchieveRewardReq::rewardid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellGetAchieveRewardReq.RewardId)
  return rewardid_;
}
inline void TTowerHellGetAchieveRewardReq::set_rewardid(::google::protobuf::uint32 value) {
  set_has_rewardid();
  rewardid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellGetAchieveRewardReq.RewardId)
}

// -------------------------------------------------------------------

// TTowerHellGetHangRewardInfoRsp

// optional .pb.TTowerHellHangRewardInfo HangInfo = 1;
inline bool TTowerHellGetHangRewardInfoRsp::has_hanginfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerHellGetHangRewardInfoRsp::set_has_hanginfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerHellGetHangRewardInfoRsp::clear_has_hanginfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerHellGetHangRewardInfoRsp::clear_hanginfo() {
  if (hanginfo_ != NULL) hanginfo_->::pb::TTowerHellHangRewardInfo::Clear();
  clear_has_hanginfo();
}
inline const ::pb::TTowerHellHangRewardInfo& TTowerHellGetHangRewardInfoRsp::hanginfo() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellGetHangRewardInfoRsp.HangInfo)
  return hanginfo_ != NULL ? *hanginfo_ : *default_instance_->hanginfo_;
}
inline ::pb::TTowerHellHangRewardInfo* TTowerHellGetHangRewardInfoRsp::mutable_hanginfo() {
  set_has_hanginfo();
  if (hanginfo_ == NULL) hanginfo_ = new ::pb::TTowerHellHangRewardInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTowerHellGetHangRewardInfoRsp.HangInfo)
  return hanginfo_;
}
inline ::pb::TTowerHellHangRewardInfo* TTowerHellGetHangRewardInfoRsp::release_hanginfo() {
  clear_has_hanginfo();
  ::pb::TTowerHellHangRewardInfo* temp = hanginfo_;
  hanginfo_ = NULL;
  return temp;
}
inline void TTowerHellGetHangRewardInfoRsp::set_allocated_hanginfo(::pb::TTowerHellHangRewardInfo* hanginfo) {
  delete hanginfo_;
  hanginfo_ = hanginfo;
  if (hanginfo) {
    set_has_hanginfo();
  } else {
    clear_has_hanginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerHellGetHangRewardInfoRsp.HangInfo)
}

// -------------------------------------------------------------------

// TTowerHellHangRewardInfo

// optional uint64 HangTime = 1;
inline bool TTowerHellHangRewardInfo::has_hangtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerHellHangRewardInfo::set_has_hangtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerHellHangRewardInfo::clear_has_hangtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerHellHangRewardInfo::clear_hangtime() {
  hangtime_ = GOOGLE_ULONGLONG(0);
  clear_has_hangtime();
}
inline ::google::protobuf::uint64 TTowerHellHangRewardInfo::hangtime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellHangRewardInfo.HangTime)
  return hangtime_;
}
inline void TTowerHellHangRewardInfo::set_hangtime(::google::protobuf::uint64 value) {
  set_has_hangtime();
  hangtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellHangRewardInfo.HangTime)
}

// optional uint64 HangReceiveTime = 2;
inline bool TTowerHellHangRewardInfo::has_hangreceivetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerHellHangRewardInfo::set_has_hangreceivetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerHellHangRewardInfo::clear_has_hangreceivetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerHellHangRewardInfo::clear_hangreceivetime() {
  hangreceivetime_ = GOOGLE_ULONGLONG(0);
  clear_has_hangreceivetime();
}
inline ::google::protobuf::uint64 TTowerHellHangRewardInfo::hangreceivetime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellHangRewardInfo.HangReceiveTime)
  return hangreceivetime_;
}
inline void TTowerHellHangRewardInfo::set_hangreceivetime(::google::protobuf::uint64 value) {
  set_has_hangreceivetime();
  hangreceivetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellHangRewardInfo.HangReceiveTime)
}

// repeated .pb.TCommonReward RandomRewardArr = 3;
inline int TTowerHellHangRewardInfo::randomrewardarr_size() const {
  return randomrewardarr_.size();
}
inline void TTowerHellHangRewardInfo::clear_randomrewardarr() {
  randomrewardarr_.Clear();
}
inline const ::pb::TCommonReward& TTowerHellHangRewardInfo::randomrewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellHangRewardInfo.RandomRewardArr)
  return randomrewardarr_.Get(index);
}
inline ::pb::TCommonReward* TTowerHellHangRewardInfo::mutable_randomrewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerHellHangRewardInfo.RandomRewardArr)
  return randomrewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerHellHangRewardInfo::add_randomrewardarr() {
  // @@protoc_insertion_point(field_add:pb.TTowerHellHangRewardInfo.RandomRewardArr)
  return randomrewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerHellHangRewardInfo::randomrewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TTowerHellHangRewardInfo.RandomRewardArr)
  return randomrewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerHellHangRewardInfo::mutable_randomrewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerHellHangRewardInfo.RandomRewardArr)
  return &randomrewardarr_;
}

// -------------------------------------------------------------------

// TTowerHellReceiveHangRewardRsp

// optional uint64 HangTime = 1;
inline bool TTowerHellReceiveHangRewardRsp::has_hangtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerHellReceiveHangRewardRsp::set_has_hangtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerHellReceiveHangRewardRsp::clear_has_hangtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerHellReceiveHangRewardRsp::clear_hangtime() {
  hangtime_ = GOOGLE_ULONGLONG(0);
  clear_has_hangtime();
}
inline ::google::protobuf::uint64 TTowerHellReceiveHangRewardRsp::hangtime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellReceiveHangRewardRsp.HangTime)
  return hangtime_;
}
inline void TTowerHellReceiveHangRewardRsp::set_hangtime(::google::protobuf::uint64 value) {
  set_has_hangtime();
  hangtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellReceiveHangRewardRsp.HangTime)
}

// optional uint64 HangReceiveTime = 2;
inline bool TTowerHellReceiveHangRewardRsp::has_hangreceivetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerHellReceiveHangRewardRsp::set_has_hangreceivetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerHellReceiveHangRewardRsp::clear_has_hangreceivetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerHellReceiveHangRewardRsp::clear_hangreceivetime() {
  hangreceivetime_ = GOOGLE_ULONGLONG(0);
  clear_has_hangreceivetime();
}
inline ::google::protobuf::uint64 TTowerHellReceiveHangRewardRsp::hangreceivetime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellReceiveHangRewardRsp.HangReceiveTime)
  return hangreceivetime_;
}
inline void TTowerHellReceiveHangRewardRsp::set_hangreceivetime(::google::protobuf::uint64 value) {
  set_has_hangreceivetime();
  hangreceivetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellReceiveHangRewardRsp.HangReceiveTime)
}

// repeated .pb.TCommonReward RewardArr = 3;
inline int TTowerHellReceiveHangRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TTowerHellReceiveHangRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TTowerHellReceiveHangRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellReceiveHangRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TTowerHellReceiveHangRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerHellReceiveHangRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerHellReceiveHangRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TTowerHellReceiveHangRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerHellReceiveHangRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TTowerHellReceiveHangRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerHellReceiveHangRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerHellReceiveHangRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TTowerHellBuyHangRewardRsp

// optional uint32 BoughtHangRewardNum = 1;
inline bool TTowerHellBuyHangRewardRsp::has_boughthangrewardnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerHellBuyHangRewardRsp::set_has_boughthangrewardnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerHellBuyHangRewardRsp::clear_has_boughthangrewardnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerHellBuyHangRewardRsp::clear_boughthangrewardnum() {
  boughthangrewardnum_ = 0u;
  clear_has_boughthangrewardnum();
}
inline ::google::protobuf::uint32 TTowerHellBuyHangRewardRsp::boughthangrewardnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellBuyHangRewardRsp.BoughtHangRewardNum)
  return boughthangrewardnum_;
}
inline void TTowerHellBuyHangRewardRsp::set_boughthangrewardnum(::google::protobuf::uint32 value) {
  set_has_boughthangrewardnum();
  boughthangrewardnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHellBuyHangRewardRsp.BoughtHangRewardNum)
}

// repeated .pb.TCommonReward RewardArr = 2;
inline int TTowerHellBuyHangRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TTowerHellBuyHangRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TTowerHellBuyHangRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerHellBuyHangRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TTowerHellBuyHangRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerHellBuyHangRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerHellBuyHangRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TTowerHellBuyHangRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerHellBuyHangRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TTowerHellBuyHangRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerHellBuyHangRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerHellBuyHangRewardRsp.RewardArr)
  return &rewardarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fTowerHell_2eproto__INCLUDED
