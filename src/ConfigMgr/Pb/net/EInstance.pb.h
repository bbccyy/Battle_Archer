// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/EInstance.proto

#ifndef PROTOBUF_net_2fEInstance_2eproto__INCLUDED
#define PROTOBUF_net_2fEInstance_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/BInstance.pb.h"
#include "net/Battle.pb.h"
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fEInstance_2eproto();
void protobuf_AssignDesc_net_2fEInstance_2eproto();
void protobuf_ShutdownFile_net_2fEInstance_2eproto();

class TEInstanceChapterDetailInfo;
class TEInstanceChapterInfo;
class TEInstanceInfoReq;
class TEInstanceInfoRsp;
class TEInstanceChapterInfoReq;
class TEInstanceChapterInfoRsp;
class TEInstanceArrChapterInfoReq;
class TEInstanceArrChapterInfoRsp;
class TEInstanceDoBattleReq;
class TEInstanceDoBattleRsp;
class TEInstanceRaidStrongholdReq;
class TEInstanceRaidStrongholdRsp;
class TEInstanceReportBattleReq;
class TEInstanceReportBattleRsp;
class TEInstanceReceiveStarRewardReq;
class TEInstanceReceiveStarRewardRsp;
class TEInstanceResetStrongholdReq;
class TEInstanceProgressRankInfo;
class TEInstanceGetProgressRankReq;
class TEInstanceGetProgressRankRsp;
class TEInstanceInfoNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TEInstanceChapterDetailInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceChapterDetailInfo : public ::google::protobuf::Message {
 public:
  TEInstanceChapterDetailInfo();
  virtual ~TEInstanceChapterDetailInfo();

  TEInstanceChapterDetailInfo(const TEInstanceChapterDetailInfo& from);

  inline TEInstanceChapterDetailInfo& operator=(const TEInstanceChapterDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceChapterDetailInfo& default_instance();

  void Swap(TEInstanceChapterDetailInfo* other);

  // implements Message ----------------------------------------------

  TEInstanceChapterDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceChapterDetailInfo& from);
  void MergeFrom(const TEInstanceChapterDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBChapterStarRewardInfo RewardInfoArray = 1;
  inline int rewardinfoarray_size() const;
  inline void clear_rewardinfoarray();
  static const int kRewardInfoArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceChapterDetailInfo</name>
  	<Function>
  		<name>rewardinfoarray</name>
  		<replaceName>RewardInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardinfoarray</name>
  		<replaceName>RewardInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardinfoarray</name>
  		<replaceName>RewardInfoArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardinfoarray</name>
  		<replaceName>RewardInfoArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardinfoarray_size</name>
  		<replaceName>RewardInfoArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBChapterStarRewardInfo& rewardinfoarray(int index) const;
  inline ::pb::TBChapterStarRewardInfo* mutable_rewardinfoarray(int index);
  inline ::pb::TBChapterStarRewardInfo* add_rewardinfoarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBChapterStarRewardInfo >&
      rewardinfoarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBChapterStarRewardInfo >*
      mutable_rewardinfoarray();

  // repeated .pb.TBStrongholdInfo StrongholdArray = 2;
  inline int strongholdarray_size() const;
  inline void clear_strongholdarray();
  static const int kStrongholdArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceChapterDetailInfo</name>
  	<Function>
  		<name>strongholdarray</name>
  		<replaceName>StrongholdArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_strongholdarray</name>
  		<replaceName>StrongholdArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_strongholdarray</name>
  		<replaceName>StrongholdArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdarray</name>
  		<replaceName>StrongholdArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>strongholdarray_size</name>
  		<replaceName>StrongholdArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBStrongholdInfo& strongholdarray(int index) const;
  inline ::pb::TBStrongholdInfo* mutable_strongholdarray(int index);
  inline ::pb::TBStrongholdInfo* add_strongholdarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBStrongholdInfo >&
      strongholdarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBStrongholdInfo >*
      mutable_strongholdarray();

  // @@protoc_insertion_point(class_scope:pb.TEInstanceChapterDetailInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBChapterStarRewardInfo > rewardinfoarray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBStrongholdInfo > strongholdarray_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceChapterDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceChapterInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceChapterInfo : public ::google::protobuf::Message {
 public:
  TEInstanceChapterInfo();
  virtual ~TEInstanceChapterInfo();

  TEInstanceChapterInfo(const TEInstanceChapterInfo& from);

  inline TEInstanceChapterInfo& operator=(const TEInstanceChapterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceChapterInfo& default_instance();

  void Swap(TEInstanceChapterInfo* other);

  // implements Message ----------------------------------------------

  TEInstanceChapterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceChapterInfo& from);
  void MergeFrom(const TEInstanceChapterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChapterId = 1;
  inline bool has_chapterid() const;
  inline void clear_chapterid();
  static const int kChapterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceChapterInfo</name>
  	<Function>
  		<name>chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapterid() const;
  inline void set_chapterid(::google::protobuf::uint32 value);

  // optional uint32 StarNum = 2;
  inline bool has_starnum() const;
  inline void clear_starnum();
  static const int kStarNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceChapterInfo</name>
  	<Function>
  		<name>starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starnum() const;
  inline void set_starnum(::google::protobuf::uint32 value);

  // optional bool IsPass = 3;
  inline bool has_ispass() const;
  inline void clear_ispass();
  static const int kIsPassFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceChapterInfo</name>
  	<Function>
  		<name>ispass</name>
  		<replaceName>IsPass</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ispass</name>
  		<replaceName>IsPass</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ispass</name>
  		<replaceName>IsPass</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ispass() const;
  inline void set_ispass(bool value);

  // optional bool IsFirst = 4;
  inline bool has_isfirst() const;
  inline void clear_isfirst();
  static const int kIsFirstFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceChapterInfo</name>
  	<Function>
  		<name>isfirst</name>
  		<replaceName>IsFirst</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isfirst</name>
  		<replaceName>IsFirst</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isfirst</name>
  		<replaceName>IsFirst</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isfirst() const;
  inline void set_isfirst(bool value);

  // optional uint32 ReceivedStarRewardNum = 5;
  inline bool has_receivedstarrewardnum() const;
  inline void clear_receivedstarrewardnum();
  static const int kReceivedStarRewardNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceChapterInfo</name>
  	<Function>
  		<name>receivedstarrewardnum</name>
  		<replaceName>ReceivedStarRewardNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_receivedstarrewardnum</name>
  		<replaceName>ReceivedStarRewardNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivedstarrewardnum</name>
  		<replaceName>ReceivedStarRewardNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 receivedstarrewardnum() const;
  inline void set_receivedstarrewardnum(::google::protobuf::uint32 value);

  // optional .pb.TEInstanceChapterDetailInfo DetailInfo = 6;
  inline bool has_detailinfo() const;
  inline void clear_detailinfo();
  static const int kDetailInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceChapterInfo</name>
  	<Function>
  		<name>detailinfo</name>
  		<replaceName>DetailInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_detailinfo</name>
  		<replaceName>DetailInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_detailinfo</name>
  		<replaceName>DetailInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_detailinfo</name>
  		<replaceName>DetailInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TEInstanceChapterDetailInfo& detailinfo() const;
  inline ::pb::TEInstanceChapterDetailInfo* mutable_detailinfo();
  inline ::pb::TEInstanceChapterDetailInfo* release_detailinfo();
  inline void set_allocated_detailinfo(::pb::TEInstanceChapterDetailInfo* detailinfo);

  // optional uint32 MaxUnlockStrongholdId = 7;
  inline bool has_maxunlockstrongholdid() const;
  inline void clear_maxunlockstrongholdid();
  static const int kMaxUnlockStrongholdIdFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceChapterInfo</name>
  	<Function>
  		<name>maxunlockstrongholdid</name>
  		<replaceName>MaxUnlockStrongholdId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxunlockstrongholdid</name>
  		<replaceName>MaxUnlockStrongholdId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxunlockstrongholdid</name>
  		<replaceName>MaxUnlockStrongholdId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxunlockstrongholdid() const;
  inline void set_maxunlockstrongholdid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TEInstanceChapterInfo)
 private:
  inline void set_has_chapterid();
  inline void clear_has_chapterid();
  inline void set_has_starnum();
  inline void clear_has_starnum();
  inline void set_has_ispass();
  inline void clear_has_ispass();
  inline void set_has_isfirst();
  inline void clear_has_isfirst();
  inline void set_has_receivedstarrewardnum();
  inline void clear_has_receivedstarrewardnum();
  inline void set_has_detailinfo();
  inline void clear_has_detailinfo();
  inline void set_has_maxunlockstrongholdid();
  inline void clear_has_maxunlockstrongholdid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chapterid_;
  ::google::protobuf::uint32 starnum_;
  bool ispass_;
  bool isfirst_;
  ::google::protobuf::uint32 receivedstarrewardnum_;
  ::pb::TEInstanceChapterDetailInfo* detailinfo_;
  ::google::protobuf::uint32 maxunlockstrongholdid_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceChapterInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceInfoReq : public ::google::protobuf::Message {
 public:
  TEInstanceInfoReq();
  virtual ~TEInstanceInfoReq();

  TEInstanceInfoReq(const TEInstanceInfoReq& from);

  inline TEInstanceInfoReq& operator=(const TEInstanceInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceInfoReq& default_instance();

  void Swap(TEInstanceInfoReq* other);

  // implements Message ----------------------------------------------

  TEInstanceInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceInfoReq& from);
  void MergeFrom(const TEInstanceInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TEInstanceInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceInfoRsp : public ::google::protobuf::Message {
 public:
  TEInstanceInfoRsp();
  virtual ~TEInstanceInfoRsp();

  TEInstanceInfoRsp(const TEInstanceInfoRsp& from);

  inline TEInstanceInfoRsp& operator=(const TEInstanceInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceInfoRsp& default_instance();

  void Swap(TEInstanceInfoRsp* other);

  // implements Message ----------------------------------------------

  TEInstanceInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceInfoRsp& from);
  void MergeFrom(const TEInstanceInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TEInstanceChapterInfo ChapterInfoArray = 1;
  inline int chapterinfoarray_size() const;
  inline void clear_chapterinfoarray();
  static const int kChapterInfoArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceInfoRsp</name>
  	<Function>
  		<name>chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>chapterinfoarray_size</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TEInstanceChapterInfo& chapterinfoarray(int index) const;
  inline ::pb::TEInstanceChapterInfo* mutable_chapterinfoarray(int index);
  inline ::pb::TEInstanceChapterInfo* add_chapterinfoarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceChapterInfo >&
      chapterinfoarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceChapterInfo >*
      mutable_chapterinfoarray();

  // optional uint32 ResetNum = 2;
  inline bool has_resetnum() const;
  inline void clear_resetnum();
  static const int kResetNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceInfoRsp</name>
  	<Function>
  		<name>resetnum</name>
  		<replaceName>ResetNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resetnum</name>
  		<replaceName>ResetNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resetnum</name>
  		<replaceName>ResetNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 resetnum() const;
  inline void set_resetnum(::google::protobuf::uint32 value);

  // optional uint64 ResetTime = 3;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResetTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceInfoRsp</name>
  	<Function>
  		<name>resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 resettime() const;
  inline void set_resettime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TEInstanceInfoRsp)
 private:
  inline void set_has_resetnum();
  inline void clear_has_resetnum();
  inline void set_has_resettime();
  inline void clear_has_resettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceChapterInfo > chapterinfoarray_;
  ::google::protobuf::uint64 resettime_;
  ::google::protobuf::uint32 resetnum_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceChapterInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceChapterInfoReq : public ::google::protobuf::Message {
 public:
  TEInstanceChapterInfoReq();
  virtual ~TEInstanceChapterInfoReq();

  TEInstanceChapterInfoReq(const TEInstanceChapterInfoReq& from);

  inline TEInstanceChapterInfoReq& operator=(const TEInstanceChapterInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceChapterInfoReq& default_instance();

  void Swap(TEInstanceChapterInfoReq* other);

  // implements Message ----------------------------------------------

  TEInstanceChapterInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceChapterInfoReq& from);
  void MergeFrom(const TEInstanceChapterInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChapterId = 1;
  inline bool has_chapterid() const;
  inline void clear_chapterid();
  static const int kChapterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceChapterInfoReq</name>
  	<Function>
  		<name>chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapterid() const;
  inline void set_chapterid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TEInstanceChapterInfoReq)
 private:
  inline void set_has_chapterid();
  inline void clear_has_chapterid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chapterid_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceChapterInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceChapterInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceChapterInfoRsp : public ::google::protobuf::Message {
 public:
  TEInstanceChapterInfoRsp();
  virtual ~TEInstanceChapterInfoRsp();

  TEInstanceChapterInfoRsp(const TEInstanceChapterInfoRsp& from);

  inline TEInstanceChapterInfoRsp& operator=(const TEInstanceChapterInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceChapterInfoRsp& default_instance();

  void Swap(TEInstanceChapterInfoRsp* other);

  // implements Message ----------------------------------------------

  TEInstanceChapterInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceChapterInfoRsp& from);
  void MergeFrom(const TEInstanceChapterInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TEInstanceChapterInfo ChapterInfo = 1;
  inline bool has_chapterinfo() const;
  inline void clear_chapterinfo();
  static const int kChapterInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceChapterInfoRsp</name>
  	<Function>
  		<name>chapterinfo</name>
  		<replaceName>ChapterInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterinfo</name>
  		<replaceName>ChapterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_chapterinfo</name>
  		<replaceName>ChapterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterinfo</name>
  		<replaceName>ChapterInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TEInstanceChapterInfo& chapterinfo() const;
  inline ::pb::TEInstanceChapterInfo* mutable_chapterinfo();
  inline ::pb::TEInstanceChapterInfo* release_chapterinfo();
  inline void set_allocated_chapterinfo(::pb::TEInstanceChapterInfo* chapterinfo);

  // @@protoc_insertion_point(class_scope:pb.TEInstanceChapterInfoRsp)
 private:
  inline void set_has_chapterinfo();
  inline void clear_has_chapterinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TEInstanceChapterInfo* chapterinfo_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceChapterInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceArrChapterInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceArrChapterInfoReq : public ::google::protobuf::Message {
 public:
  TEInstanceArrChapterInfoReq();
  virtual ~TEInstanceArrChapterInfoReq();

  TEInstanceArrChapterInfoReq(const TEInstanceArrChapterInfoReq& from);

  inline TEInstanceArrChapterInfoReq& operator=(const TEInstanceArrChapterInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceArrChapterInfoReq& default_instance();

  void Swap(TEInstanceArrChapterInfoReq* other);

  // implements Message ----------------------------------------------

  TEInstanceArrChapterInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceArrChapterInfoReq& from);
  void MergeFrom(const TEInstanceArrChapterInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ChapterIdArray = 1;
  inline int chapteridarray_size() const;
  inline void clear_chapteridarray();
  static const int kChapterIdArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceArrChapterInfoReq</name>
  	<Function>
  		<name>chapteridarray</name>
  		<replaceName>ChapterIdArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_chapteridarray</name>
  		<replaceName>ChapterIdArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_chapteridarray</name>
  		<replaceName>ChapterIdArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapteridarray</name>
  		<replaceName>ChapterIdArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>chapteridarray_size</name>
  		<replaceName>ChapterIdArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapteridarray(int index) const;
  inline void set_chapteridarray(int index, ::google::protobuf::uint32 value);
  inline void add_chapteridarray(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      chapteridarray() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_chapteridarray();

  // @@protoc_insertion_point(class_scope:pb.TEInstanceArrChapterInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > chapteridarray_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceArrChapterInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceArrChapterInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceArrChapterInfoRsp : public ::google::protobuf::Message {
 public:
  TEInstanceArrChapterInfoRsp();
  virtual ~TEInstanceArrChapterInfoRsp();

  TEInstanceArrChapterInfoRsp(const TEInstanceArrChapterInfoRsp& from);

  inline TEInstanceArrChapterInfoRsp& operator=(const TEInstanceArrChapterInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceArrChapterInfoRsp& default_instance();

  void Swap(TEInstanceArrChapterInfoRsp* other);

  // implements Message ----------------------------------------------

  TEInstanceArrChapterInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceArrChapterInfoRsp& from);
  void MergeFrom(const TEInstanceArrChapterInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TEInstanceChapterInfo ChapterInfoArray = 1;
  inline int chapterinfoarray_size() const;
  inline void clear_chapterinfoarray();
  static const int kChapterInfoArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceArrChapterInfoRsp</name>
  	<Function>
  		<name>chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>chapterinfoarray_size</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TEInstanceChapterInfo& chapterinfoarray(int index) const;
  inline ::pb::TEInstanceChapterInfo* mutable_chapterinfoarray(int index);
  inline ::pb::TEInstanceChapterInfo* add_chapterinfoarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceChapterInfo >&
      chapterinfoarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceChapterInfo >*
      mutable_chapterinfoarray();

  // @@protoc_insertion_point(class_scope:pb.TEInstanceArrChapterInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceChapterInfo > chapterinfoarray_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceArrChapterInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceDoBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceDoBattleReq : public ::google::protobuf::Message {
 public:
  TEInstanceDoBattleReq();
  virtual ~TEInstanceDoBattleReq();

  TEInstanceDoBattleReq(const TEInstanceDoBattleReq& from);

  inline TEInstanceDoBattleReq& operator=(const TEInstanceDoBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceDoBattleReq& default_instance();

  void Swap(TEInstanceDoBattleReq* other);

  // implements Message ----------------------------------------------

  TEInstanceDoBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceDoBattleReq& from);
  void MergeFrom(const TEInstanceDoBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChapterId = 1;
  inline bool has_chapterid() const;
  inline void clear_chapterid();
  static const int kChapterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceDoBattleReq</name>
  	<Function>
  		<name>chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapterid() const;
  inline void set_chapterid(::google::protobuf::uint32 value);

  // optional uint32 StrongholdId = 2;
  inline bool has_strongholdid() const;
  inline void clear_strongholdid();
  static const int kStrongholdIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceDoBattleReq</name>
  	<Function>
  		<name>strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdid() const;
  inline void set_strongholdid(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 4;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceDoBattleReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TEInstanceDoBattleReq)
 private:
  inline void set_has_chapterid();
  inline void clear_has_chapterid();
  inline void set_has_strongholdid();
  inline void clear_has_strongholdid();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chapterid_;
  ::google::protobuf::uint32 strongholdid_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceDoBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceDoBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceDoBattleRsp : public ::google::protobuf::Message {
 public:
  TEInstanceDoBattleRsp();
  virtual ~TEInstanceDoBattleRsp();

  TEInstanceDoBattleRsp(const TEInstanceDoBattleRsp& from);

  inline TEInstanceDoBattleRsp& operator=(const TEInstanceDoBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceDoBattleRsp& default_instance();

  void Swap(TEInstanceDoBattleRsp* other);

  // implements Message ----------------------------------------------

  TEInstanceDoBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceDoBattleRsp& from);
  void MergeFrom(const TEInstanceDoBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 1;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceDoBattleRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // optional .pb.TBattleArgs BattleArgs = 2;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceDoBattleRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TEInstanceDoBattleRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  ::pb::TBattleArgs* battleargs_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceDoBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceRaidStrongholdReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceRaidStrongholdReq : public ::google::protobuf::Message {
 public:
  TEInstanceRaidStrongholdReq();
  virtual ~TEInstanceRaidStrongholdReq();

  TEInstanceRaidStrongholdReq(const TEInstanceRaidStrongholdReq& from);

  inline TEInstanceRaidStrongholdReq& operator=(const TEInstanceRaidStrongholdReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceRaidStrongholdReq& default_instance();

  void Swap(TEInstanceRaidStrongholdReq* other);

  // implements Message ----------------------------------------------

  TEInstanceRaidStrongholdReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceRaidStrongholdReq& from);
  void MergeFrom(const TEInstanceRaidStrongholdReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChapterId = 1;
  inline bool has_chapterid() const;
  inline void clear_chapterid();
  static const int kChapterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceRaidStrongholdReq</name>
  	<Function>
  		<name>chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapterid() const;
  inline void set_chapterid(::google::protobuf::uint32 value);

  // optional uint32 StrongholdId = 2;
  inline bool has_strongholdid() const;
  inline void clear_strongholdid();
  static const int kStrongholdIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceRaidStrongholdReq</name>
  	<Function>
  		<name>strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdid() const;
  inline void set_strongholdid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TEInstanceRaidStrongholdReq)
 private:
  inline void set_has_chapterid();
  inline void clear_has_chapterid();
  inline void set_has_strongholdid();
  inline void clear_has_strongholdid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chapterid_;
  ::google::protobuf::uint32 strongholdid_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceRaidStrongholdReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceRaidStrongholdRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceRaidStrongholdRsp : public ::google::protobuf::Message {
 public:
  TEInstanceRaidStrongholdRsp();
  virtual ~TEInstanceRaidStrongholdRsp();

  TEInstanceRaidStrongholdRsp(const TEInstanceRaidStrongholdRsp& from);

  inline TEInstanceRaidStrongholdRsp& operator=(const TEInstanceRaidStrongholdRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceRaidStrongholdRsp& default_instance();

  void Swap(TEInstanceRaidStrongholdRsp* other);

  // implements Message ----------------------------------------------

  TEInstanceRaidStrongholdRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceRaidStrongholdRsp& from);
  void MergeFrom(const TEInstanceRaidStrongholdRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 1;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceRaidStrongholdRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // @@protoc_insertion_point(class_scope:pb.TEInstanceRaidStrongholdRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceRaidStrongholdRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceReportBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceReportBattleReq : public ::google::protobuf::Message {
 public:
  TEInstanceReportBattleReq();
  virtual ~TEInstanceReportBattleReq();

  TEInstanceReportBattleReq(const TEInstanceReportBattleReq& from);

  inline TEInstanceReportBattleReq& operator=(const TEInstanceReportBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceReportBattleReq& default_instance();

  void Swap(TEInstanceReportBattleReq* other);

  // implements Message ----------------------------------------------

  TEInstanceReportBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceReportBattleReq& from);
  void MergeFrom(const TEInstanceReportBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChapterId = 1;
  inline bool has_chapterid() const;
  inline void clear_chapterid();
  static const int kChapterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceReportBattleReq</name>
  	<Function>
  		<name>chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapterid() const;
  inline void set_chapterid(::google::protobuf::uint32 value);

  // optional uint32 StrongholdId = 2;
  inline bool has_strongholdid() const;
  inline void clear_strongholdid();
  static const int kStrongholdIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceReportBattleReq</name>
  	<Function>
  		<name>strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdid() const;
  inline void set_strongholdid(::google::protobuf::uint32 value);

  // optional .pb.TBattleResult BattleRet = 3;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceReportBattleReq</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleret() const;
  inline ::pb::TBattleResult* mutable_battleret();
  inline ::pb::TBattleResult* release_battleret();
  inline void set_allocated_battleret(::pb::TBattleResult* battleret);

  // optional bytes BattleResultBytes = 4;
  inline bool has_battleresultbytes() const;
  inline void clear_battleresultbytes();
  static const int kBattleResultBytesFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceReportBattleReq</name>
  	<Function>
  		<name>battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleresultbytes() const;
  inline void set_battleresultbytes(const ::std::string& value);
  inline void set_battleresultbytes(const char* value);
  inline void set_battleresultbytes(const void* value, size_t size);
  inline ::std::string* mutable_battleresultbytes();
  inline ::std::string* release_battleresultbytes();
  inline void set_allocated_battleresultbytes(::std::string* battleresultbytes);

  // @@protoc_insertion_point(class_scope:pb.TEInstanceReportBattleReq)
 private:
  inline void set_has_chapterid();
  inline void clear_has_chapterid();
  inline void set_has_strongholdid();
  inline void clear_has_strongholdid();
  inline void set_has_battleret();
  inline void clear_has_battleret();
  inline void set_has_battleresultbytes();
  inline void clear_has_battleresultbytes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chapterid_;
  ::google::protobuf::uint32 strongholdid_;
  ::pb::TBattleResult* battleret_;
  ::std::string* battleresultbytes_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceReportBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceReportBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceReportBattleRsp : public ::google::protobuf::Message {
 public:
  TEInstanceReportBattleRsp();
  virtual ~TEInstanceReportBattleRsp();

  TEInstanceReportBattleRsp(const TEInstanceReportBattleRsp& from);

  inline TEInstanceReportBattleRsp& operator=(const TEInstanceReportBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceReportBattleRsp& default_instance();

  void Swap(TEInstanceReportBattleRsp* other);

  // implements Message ----------------------------------------------

  TEInstanceReportBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceReportBattleRsp& from);
  void MergeFrom(const TEInstanceReportBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 1;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceReportBattleRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // @@protoc_insertion_point(class_scope:pb.TEInstanceReportBattleRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceReportBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceReceiveStarRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceReceiveStarRewardReq : public ::google::protobuf::Message {
 public:
  TEInstanceReceiveStarRewardReq();
  virtual ~TEInstanceReceiveStarRewardReq();

  TEInstanceReceiveStarRewardReq(const TEInstanceReceiveStarRewardReq& from);

  inline TEInstanceReceiveStarRewardReq& operator=(const TEInstanceReceiveStarRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceReceiveStarRewardReq& default_instance();

  void Swap(TEInstanceReceiveStarRewardReq* other);

  // implements Message ----------------------------------------------

  TEInstanceReceiveStarRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceReceiveStarRewardReq& from);
  void MergeFrom(const TEInstanceReceiveStarRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChapterId = 1;
  inline bool has_chapterid() const;
  inline void clear_chapterid();
  static const int kChapterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceReceiveStarRewardReq</name>
  	<Function>
  		<name>chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapterid() const;
  inline void set_chapterid(::google::protobuf::uint32 value);

  // optional uint32 StarNum = 2;
  inline bool has_starnum() const;
  inline void clear_starnum();
  static const int kStarNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceReceiveStarRewardReq</name>
  	<Function>
  		<name>starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starnum() const;
  inline void set_starnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TEInstanceReceiveStarRewardReq)
 private:
  inline void set_has_chapterid();
  inline void clear_has_chapterid();
  inline void set_has_starnum();
  inline void clear_has_starnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chapterid_;
  ::google::protobuf::uint32 starnum_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceReceiveStarRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceReceiveStarRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceReceiveStarRewardRsp : public ::google::protobuf::Message {
 public:
  TEInstanceReceiveStarRewardRsp();
  virtual ~TEInstanceReceiveStarRewardRsp();

  TEInstanceReceiveStarRewardRsp(const TEInstanceReceiveStarRewardRsp& from);

  inline TEInstanceReceiveStarRewardRsp& operator=(const TEInstanceReceiveStarRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceReceiveStarRewardRsp& default_instance();

  void Swap(TEInstanceReceiveStarRewardRsp* other);

  // implements Message ----------------------------------------------

  TEInstanceReceiveStarRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceReceiveStarRewardRsp& from);
  void MergeFrom(const TEInstanceReceiveStarRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceReceiveStarRewardRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TEInstanceReceiveStarRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceReceiveStarRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceResetStrongholdReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceResetStrongholdReq : public ::google::protobuf::Message {
 public:
  TEInstanceResetStrongholdReq();
  virtual ~TEInstanceResetStrongholdReq();

  TEInstanceResetStrongholdReq(const TEInstanceResetStrongholdReq& from);

  inline TEInstanceResetStrongholdReq& operator=(const TEInstanceResetStrongholdReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceResetStrongholdReq& default_instance();

  void Swap(TEInstanceResetStrongholdReq* other);

  // implements Message ----------------------------------------------

  TEInstanceResetStrongholdReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceResetStrongholdReq& from);
  void MergeFrom(const TEInstanceResetStrongholdReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChapterId = 1;
  inline bool has_chapterid() const;
  inline void clear_chapterid();
  static const int kChapterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceResetStrongholdReq</name>
  	<Function>
  		<name>chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapterid() const;
  inline void set_chapterid(::google::protobuf::uint32 value);

  // optional uint32 StrongholdId = 2;
  inline bool has_strongholdid() const;
  inline void clear_strongholdid();
  static const int kStrongholdIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceResetStrongholdReq</name>
  	<Function>
  		<name>strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdid() const;
  inline void set_strongholdid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TEInstanceResetStrongholdReq)
 private:
  inline void set_has_chapterid();
  inline void clear_has_chapterid();
  inline void set_has_strongholdid();
  inline void clear_has_strongholdid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chapterid_;
  ::google::protobuf::uint32 strongholdid_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceResetStrongholdReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceProgressRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceProgressRankInfo : public ::google::protobuf::Message {
 public:
  TEInstanceProgressRankInfo();
  virtual ~TEInstanceProgressRankInfo();

  TEInstanceProgressRankInfo(const TEInstanceProgressRankInfo& from);

  inline TEInstanceProgressRankInfo& operator=(const TEInstanceProgressRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceProgressRankInfo& default_instance();

  void Swap(TEInstanceProgressRankInfo* other);

  // implements Message ----------------------------------------------

  TEInstanceProgressRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceProgressRankInfo& from);
  void MergeFrom(const TEInstanceProgressRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceProgressRankInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 StrongholdId = 3;
  inline bool has_strongholdid() const;
  inline void clear_strongholdid();
  static const int kStrongholdIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceProgressRankInfo</name>
  	<Function>
  		<name>strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdid() const;
  inline void set_strongholdid(::google::protobuf::uint32 value);

  // optional uint64 StrongholdTime = 4;
  inline bool has_strongholdtime() const;
  inline void clear_strongholdtime();
  static const int kStrongholdTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceProgressRankInfo</name>
  	<Function>
  		<name>strongholdtime</name>
  		<replaceName>StrongholdTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdtime</name>
  		<replaceName>StrongholdTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdtime</name>
  		<replaceName>StrongholdTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 strongholdtime() const;
  inline void set_strongholdtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TEInstanceProgressRankInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_strongholdid();
  inline void clear_has_strongholdid();
  inline void set_has_strongholdtime();
  inline void clear_has_strongholdtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 strongholdtime_;
  ::google::protobuf::uint32 strongholdid_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceProgressRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceGetProgressRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceGetProgressRankReq : public ::google::protobuf::Message {
 public:
  TEInstanceGetProgressRankReq();
  virtual ~TEInstanceGetProgressRankReq();

  TEInstanceGetProgressRankReq(const TEInstanceGetProgressRankReq& from);

  inline TEInstanceGetProgressRankReq& operator=(const TEInstanceGetProgressRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceGetProgressRankReq& default_instance();

  void Swap(TEInstanceGetProgressRankReq* other);

  // implements Message ----------------------------------------------

  TEInstanceGetProgressRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceGetProgressRankReq& from);
  void MergeFrom(const TEInstanceGetProgressRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceGetProgressRankReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceGetProgressRankReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TEInstanceGetProgressRankReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceGetProgressRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceGetProgressRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceGetProgressRankRsp : public ::google::protobuf::Message {
 public:
  TEInstanceGetProgressRankRsp();
  virtual ~TEInstanceGetProgressRankRsp();

  TEInstanceGetProgressRankRsp(const TEInstanceGetProgressRankRsp& from);

  inline TEInstanceGetProgressRankRsp& operator=(const TEInstanceGetProgressRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceGetProgressRankRsp& default_instance();

  void Swap(TEInstanceGetProgressRankRsp* other);

  // implements Message ----------------------------------------------

  TEInstanceGetProgressRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceGetProgressRankRsp& from);
  void MergeFrom(const TEInstanceGetProgressRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TEInstanceProgressRankInfo RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceGetProgressRankRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TEInstanceProgressRankInfo& rankarr(int index) const;
  inline ::pb::TEInstanceProgressRankInfo* mutable_rankarr(int index);
  inline ::pb::TEInstanceProgressRankInfo* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceProgressRankInfo >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceProgressRankInfo >*
      mutable_rankarr();

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceGetProgressRankRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TEInstanceGetProgressRankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceProgressRankInfo > rankarr_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceGetProgressRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEInstanceInfoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/EInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEInstanceInfoNotify : public ::google::protobuf::Message {
 public:
  TEInstanceInfoNotify();
  virtual ~TEInstanceInfoNotify();

  TEInstanceInfoNotify(const TEInstanceInfoNotify& from);

  inline TEInstanceInfoNotify& operator=(const TEInstanceInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEInstanceInfoNotify& default_instance();

  void Swap(TEInstanceInfoNotify* other);

  // implements Message ----------------------------------------------

  TEInstanceInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEInstanceInfoNotify& from);
  void MergeFrom(const TEInstanceInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TEInstanceChapterInfo ChapterInfoArray = 1;
  inline int chapterinfoarray_size() const;
  inline void clear_chapterinfoarray();
  static const int kChapterInfoArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceInfoNotify</name>
  	<Function>
  		<name>chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>chapterinfoarray_size</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TEInstanceChapterInfo& chapterinfoarray(int index) const;
  inline ::pb::TEInstanceChapterInfo* mutable_chapterinfoarray(int index);
  inline ::pb::TEInstanceChapterInfo* add_chapterinfoarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceChapterInfo >&
      chapterinfoarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceChapterInfo >*
      mutable_chapterinfoarray();

  // optional uint32 ResetNum = 2;
  inline bool has_resetnum() const;
  inline void clear_resetnum();
  static const int kResetNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceInfoNotify</name>
  	<Function>
  		<name>resetnum</name>
  		<replaceName>ResetNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resetnum</name>
  		<replaceName>ResetNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resetnum</name>
  		<replaceName>ResetNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 resetnum() const;
  inline void set_resetnum(::google::protobuf::uint32 value);

  // optional uint64 ResetTime = 3;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResetTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TEInstanceInfoNotify</name>
  	<Function>
  		<name>resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 resettime() const;
  inline void set_resettime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TEInstanceInfoNotify)
 private:
  inline void set_has_resetnum();
  inline void clear_has_resetnum();
  inline void set_has_resettime();
  inline void clear_has_resettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceChapterInfo > chapterinfoarray_;
  ::google::protobuf::uint64 resettime_;
  ::google::protobuf::uint32 resetnum_;
  friend void  protobuf_AddDesc_net_2fEInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fEInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fEInstance_2eproto();

  void InitAsDefaultInstance();
  static TEInstanceInfoNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TEInstanceChapterDetailInfo

// repeated .pb.TBChapterStarRewardInfo RewardInfoArray = 1;
inline int TEInstanceChapterDetailInfo::rewardinfoarray_size() const {
  return rewardinfoarray_.size();
}
inline void TEInstanceChapterDetailInfo::clear_rewardinfoarray() {
  rewardinfoarray_.Clear();
}
inline const ::pb::TBChapterStarRewardInfo& TEInstanceChapterDetailInfo::rewardinfoarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceChapterDetailInfo.RewardInfoArray)
  return rewardinfoarray_.Get(index);
}
inline ::pb::TBChapterStarRewardInfo* TEInstanceChapterDetailInfo::mutable_rewardinfoarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceChapterDetailInfo.RewardInfoArray)
  return rewardinfoarray_.Mutable(index);
}
inline ::pb::TBChapterStarRewardInfo* TEInstanceChapterDetailInfo::add_rewardinfoarray() {
  // @@protoc_insertion_point(field_add:pb.TEInstanceChapterDetailInfo.RewardInfoArray)
  return rewardinfoarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBChapterStarRewardInfo >&
TEInstanceChapterDetailInfo::rewardinfoarray() const {
  // @@protoc_insertion_point(field_list:pb.TEInstanceChapterDetailInfo.RewardInfoArray)
  return rewardinfoarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBChapterStarRewardInfo >*
TEInstanceChapterDetailInfo::mutable_rewardinfoarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEInstanceChapterDetailInfo.RewardInfoArray)
  return &rewardinfoarray_;
}

// repeated .pb.TBStrongholdInfo StrongholdArray = 2;
inline int TEInstanceChapterDetailInfo::strongholdarray_size() const {
  return strongholdarray_.size();
}
inline void TEInstanceChapterDetailInfo::clear_strongholdarray() {
  strongholdarray_.Clear();
}
inline const ::pb::TBStrongholdInfo& TEInstanceChapterDetailInfo::strongholdarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceChapterDetailInfo.StrongholdArray)
  return strongholdarray_.Get(index);
}
inline ::pb::TBStrongholdInfo* TEInstanceChapterDetailInfo::mutable_strongholdarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceChapterDetailInfo.StrongholdArray)
  return strongholdarray_.Mutable(index);
}
inline ::pb::TBStrongholdInfo* TEInstanceChapterDetailInfo::add_strongholdarray() {
  // @@protoc_insertion_point(field_add:pb.TEInstanceChapterDetailInfo.StrongholdArray)
  return strongholdarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBStrongholdInfo >&
TEInstanceChapterDetailInfo::strongholdarray() const {
  // @@protoc_insertion_point(field_list:pb.TEInstanceChapterDetailInfo.StrongholdArray)
  return strongholdarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBStrongholdInfo >*
TEInstanceChapterDetailInfo::mutable_strongholdarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEInstanceChapterDetailInfo.StrongholdArray)
  return &strongholdarray_;
}

// -------------------------------------------------------------------

// TEInstanceChapterInfo

// optional uint32 ChapterId = 1;
inline bool TEInstanceChapterInfo::has_chapterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEInstanceChapterInfo::set_has_chapterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEInstanceChapterInfo::clear_has_chapterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEInstanceChapterInfo::clear_chapterid() {
  chapterid_ = 0u;
  clear_has_chapterid();
}
inline ::google::protobuf::uint32 TEInstanceChapterInfo::chapterid() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceChapterInfo.ChapterId)
  return chapterid_;
}
inline void TEInstanceChapterInfo::set_chapterid(::google::protobuf::uint32 value) {
  set_has_chapterid();
  chapterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceChapterInfo.ChapterId)
}

// optional uint32 StarNum = 2;
inline bool TEInstanceChapterInfo::has_starnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEInstanceChapterInfo::set_has_starnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEInstanceChapterInfo::clear_has_starnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEInstanceChapterInfo::clear_starnum() {
  starnum_ = 0u;
  clear_has_starnum();
}
inline ::google::protobuf::uint32 TEInstanceChapterInfo::starnum() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceChapterInfo.StarNum)
  return starnum_;
}
inline void TEInstanceChapterInfo::set_starnum(::google::protobuf::uint32 value) {
  set_has_starnum();
  starnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceChapterInfo.StarNum)
}

// optional bool IsPass = 3;
inline bool TEInstanceChapterInfo::has_ispass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TEInstanceChapterInfo::set_has_ispass() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TEInstanceChapterInfo::clear_has_ispass() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TEInstanceChapterInfo::clear_ispass() {
  ispass_ = false;
  clear_has_ispass();
}
inline bool TEInstanceChapterInfo::ispass() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceChapterInfo.IsPass)
  return ispass_;
}
inline void TEInstanceChapterInfo::set_ispass(bool value) {
  set_has_ispass();
  ispass_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceChapterInfo.IsPass)
}

// optional bool IsFirst = 4;
inline bool TEInstanceChapterInfo::has_isfirst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TEInstanceChapterInfo::set_has_isfirst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TEInstanceChapterInfo::clear_has_isfirst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TEInstanceChapterInfo::clear_isfirst() {
  isfirst_ = false;
  clear_has_isfirst();
}
inline bool TEInstanceChapterInfo::isfirst() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceChapterInfo.IsFirst)
  return isfirst_;
}
inline void TEInstanceChapterInfo::set_isfirst(bool value) {
  set_has_isfirst();
  isfirst_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceChapterInfo.IsFirst)
}

// optional uint32 ReceivedStarRewardNum = 5;
inline bool TEInstanceChapterInfo::has_receivedstarrewardnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TEInstanceChapterInfo::set_has_receivedstarrewardnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TEInstanceChapterInfo::clear_has_receivedstarrewardnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TEInstanceChapterInfo::clear_receivedstarrewardnum() {
  receivedstarrewardnum_ = 0u;
  clear_has_receivedstarrewardnum();
}
inline ::google::protobuf::uint32 TEInstanceChapterInfo::receivedstarrewardnum() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceChapterInfo.ReceivedStarRewardNum)
  return receivedstarrewardnum_;
}
inline void TEInstanceChapterInfo::set_receivedstarrewardnum(::google::protobuf::uint32 value) {
  set_has_receivedstarrewardnum();
  receivedstarrewardnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceChapterInfo.ReceivedStarRewardNum)
}

// optional .pb.TEInstanceChapterDetailInfo DetailInfo = 6;
inline bool TEInstanceChapterInfo::has_detailinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TEInstanceChapterInfo::set_has_detailinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TEInstanceChapterInfo::clear_has_detailinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TEInstanceChapterInfo::clear_detailinfo() {
  if (detailinfo_ != NULL) detailinfo_->::pb::TEInstanceChapterDetailInfo::Clear();
  clear_has_detailinfo();
}
inline const ::pb::TEInstanceChapterDetailInfo& TEInstanceChapterInfo::detailinfo() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceChapterInfo.DetailInfo)
  return detailinfo_ != NULL ? *detailinfo_ : *default_instance_->detailinfo_;
}
inline ::pb::TEInstanceChapterDetailInfo* TEInstanceChapterInfo::mutable_detailinfo() {
  set_has_detailinfo();
  if (detailinfo_ == NULL) detailinfo_ = new ::pb::TEInstanceChapterDetailInfo;
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceChapterInfo.DetailInfo)
  return detailinfo_;
}
inline ::pb::TEInstanceChapterDetailInfo* TEInstanceChapterInfo::release_detailinfo() {
  clear_has_detailinfo();
  ::pb::TEInstanceChapterDetailInfo* temp = detailinfo_;
  detailinfo_ = NULL;
  return temp;
}
inline void TEInstanceChapterInfo::set_allocated_detailinfo(::pb::TEInstanceChapterDetailInfo* detailinfo) {
  delete detailinfo_;
  detailinfo_ = detailinfo;
  if (detailinfo) {
    set_has_detailinfo();
  } else {
    clear_has_detailinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TEInstanceChapterInfo.DetailInfo)
}

// optional uint32 MaxUnlockStrongholdId = 7;
inline bool TEInstanceChapterInfo::has_maxunlockstrongholdid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TEInstanceChapterInfo::set_has_maxunlockstrongholdid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TEInstanceChapterInfo::clear_has_maxunlockstrongholdid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TEInstanceChapterInfo::clear_maxunlockstrongholdid() {
  maxunlockstrongholdid_ = 0u;
  clear_has_maxunlockstrongholdid();
}
inline ::google::protobuf::uint32 TEInstanceChapterInfo::maxunlockstrongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceChapterInfo.MaxUnlockStrongholdId)
  return maxunlockstrongholdid_;
}
inline void TEInstanceChapterInfo::set_maxunlockstrongholdid(::google::protobuf::uint32 value) {
  set_has_maxunlockstrongholdid();
  maxunlockstrongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceChapterInfo.MaxUnlockStrongholdId)
}

// -------------------------------------------------------------------

// TEInstanceInfoReq

// -------------------------------------------------------------------

// TEInstanceInfoRsp

// repeated .pb.TEInstanceChapterInfo ChapterInfoArray = 1;
inline int TEInstanceInfoRsp::chapterinfoarray_size() const {
  return chapterinfoarray_.size();
}
inline void TEInstanceInfoRsp::clear_chapterinfoarray() {
  chapterinfoarray_.Clear();
}
inline const ::pb::TEInstanceChapterInfo& TEInstanceInfoRsp::chapterinfoarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceInfoRsp.ChapterInfoArray)
  return chapterinfoarray_.Get(index);
}
inline ::pb::TEInstanceChapterInfo* TEInstanceInfoRsp::mutable_chapterinfoarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceInfoRsp.ChapterInfoArray)
  return chapterinfoarray_.Mutable(index);
}
inline ::pb::TEInstanceChapterInfo* TEInstanceInfoRsp::add_chapterinfoarray() {
  // @@protoc_insertion_point(field_add:pb.TEInstanceInfoRsp.ChapterInfoArray)
  return chapterinfoarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceChapterInfo >&
TEInstanceInfoRsp::chapterinfoarray() const {
  // @@protoc_insertion_point(field_list:pb.TEInstanceInfoRsp.ChapterInfoArray)
  return chapterinfoarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceChapterInfo >*
TEInstanceInfoRsp::mutable_chapterinfoarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEInstanceInfoRsp.ChapterInfoArray)
  return &chapterinfoarray_;
}

// optional uint32 ResetNum = 2;
inline bool TEInstanceInfoRsp::has_resetnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEInstanceInfoRsp::set_has_resetnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEInstanceInfoRsp::clear_has_resetnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEInstanceInfoRsp::clear_resetnum() {
  resetnum_ = 0u;
  clear_has_resetnum();
}
inline ::google::protobuf::uint32 TEInstanceInfoRsp::resetnum() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceInfoRsp.ResetNum)
  return resetnum_;
}
inline void TEInstanceInfoRsp::set_resetnum(::google::protobuf::uint32 value) {
  set_has_resetnum();
  resetnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceInfoRsp.ResetNum)
}

// optional uint64 ResetTime = 3;
inline bool TEInstanceInfoRsp::has_resettime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TEInstanceInfoRsp::set_has_resettime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TEInstanceInfoRsp::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TEInstanceInfoRsp::clear_resettime() {
  resettime_ = GOOGLE_ULONGLONG(0);
  clear_has_resettime();
}
inline ::google::protobuf::uint64 TEInstanceInfoRsp::resettime() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceInfoRsp.ResetTime)
  return resettime_;
}
inline void TEInstanceInfoRsp::set_resettime(::google::protobuf::uint64 value) {
  set_has_resettime();
  resettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceInfoRsp.ResetTime)
}

// -------------------------------------------------------------------

// TEInstanceChapterInfoReq

// optional uint32 ChapterId = 1;
inline bool TEInstanceChapterInfoReq::has_chapterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEInstanceChapterInfoReq::set_has_chapterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEInstanceChapterInfoReq::clear_has_chapterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEInstanceChapterInfoReq::clear_chapterid() {
  chapterid_ = 0u;
  clear_has_chapterid();
}
inline ::google::protobuf::uint32 TEInstanceChapterInfoReq::chapterid() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceChapterInfoReq.ChapterId)
  return chapterid_;
}
inline void TEInstanceChapterInfoReq::set_chapterid(::google::protobuf::uint32 value) {
  set_has_chapterid();
  chapterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceChapterInfoReq.ChapterId)
}

// -------------------------------------------------------------------

// TEInstanceChapterInfoRsp

// optional .pb.TEInstanceChapterInfo ChapterInfo = 1;
inline bool TEInstanceChapterInfoRsp::has_chapterinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEInstanceChapterInfoRsp::set_has_chapterinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEInstanceChapterInfoRsp::clear_has_chapterinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEInstanceChapterInfoRsp::clear_chapterinfo() {
  if (chapterinfo_ != NULL) chapterinfo_->::pb::TEInstanceChapterInfo::Clear();
  clear_has_chapterinfo();
}
inline const ::pb::TEInstanceChapterInfo& TEInstanceChapterInfoRsp::chapterinfo() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceChapterInfoRsp.ChapterInfo)
  return chapterinfo_ != NULL ? *chapterinfo_ : *default_instance_->chapterinfo_;
}
inline ::pb::TEInstanceChapterInfo* TEInstanceChapterInfoRsp::mutable_chapterinfo() {
  set_has_chapterinfo();
  if (chapterinfo_ == NULL) chapterinfo_ = new ::pb::TEInstanceChapterInfo;
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceChapterInfoRsp.ChapterInfo)
  return chapterinfo_;
}
inline ::pb::TEInstanceChapterInfo* TEInstanceChapterInfoRsp::release_chapterinfo() {
  clear_has_chapterinfo();
  ::pb::TEInstanceChapterInfo* temp = chapterinfo_;
  chapterinfo_ = NULL;
  return temp;
}
inline void TEInstanceChapterInfoRsp::set_allocated_chapterinfo(::pb::TEInstanceChapterInfo* chapterinfo) {
  delete chapterinfo_;
  chapterinfo_ = chapterinfo;
  if (chapterinfo) {
    set_has_chapterinfo();
  } else {
    clear_has_chapterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TEInstanceChapterInfoRsp.ChapterInfo)
}

// -------------------------------------------------------------------

// TEInstanceArrChapterInfoReq

// repeated uint32 ChapterIdArray = 1;
inline int TEInstanceArrChapterInfoReq::chapteridarray_size() const {
  return chapteridarray_.size();
}
inline void TEInstanceArrChapterInfoReq::clear_chapteridarray() {
  chapteridarray_.Clear();
}
inline ::google::protobuf::uint32 TEInstanceArrChapterInfoReq::chapteridarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceArrChapterInfoReq.ChapterIdArray)
  return chapteridarray_.Get(index);
}
inline void TEInstanceArrChapterInfoReq::set_chapteridarray(int index, ::google::protobuf::uint32 value) {
  chapteridarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TEInstanceArrChapterInfoReq.ChapterIdArray)
}
inline void TEInstanceArrChapterInfoReq::add_chapteridarray(::google::protobuf::uint32 value) {
  chapteridarray_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TEInstanceArrChapterInfoReq.ChapterIdArray)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TEInstanceArrChapterInfoReq::chapteridarray() const {
  // @@protoc_insertion_point(field_list:pb.TEInstanceArrChapterInfoReq.ChapterIdArray)
  return chapteridarray_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TEInstanceArrChapterInfoReq::mutable_chapteridarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEInstanceArrChapterInfoReq.ChapterIdArray)
  return &chapteridarray_;
}

// -------------------------------------------------------------------

// TEInstanceArrChapterInfoRsp

// repeated .pb.TEInstanceChapterInfo ChapterInfoArray = 1;
inline int TEInstanceArrChapterInfoRsp::chapterinfoarray_size() const {
  return chapterinfoarray_.size();
}
inline void TEInstanceArrChapterInfoRsp::clear_chapterinfoarray() {
  chapterinfoarray_.Clear();
}
inline const ::pb::TEInstanceChapterInfo& TEInstanceArrChapterInfoRsp::chapterinfoarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceArrChapterInfoRsp.ChapterInfoArray)
  return chapterinfoarray_.Get(index);
}
inline ::pb::TEInstanceChapterInfo* TEInstanceArrChapterInfoRsp::mutable_chapterinfoarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceArrChapterInfoRsp.ChapterInfoArray)
  return chapterinfoarray_.Mutable(index);
}
inline ::pb::TEInstanceChapterInfo* TEInstanceArrChapterInfoRsp::add_chapterinfoarray() {
  // @@protoc_insertion_point(field_add:pb.TEInstanceArrChapterInfoRsp.ChapterInfoArray)
  return chapterinfoarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceChapterInfo >&
TEInstanceArrChapterInfoRsp::chapterinfoarray() const {
  // @@protoc_insertion_point(field_list:pb.TEInstanceArrChapterInfoRsp.ChapterInfoArray)
  return chapterinfoarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceChapterInfo >*
TEInstanceArrChapterInfoRsp::mutable_chapterinfoarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEInstanceArrChapterInfoRsp.ChapterInfoArray)
  return &chapterinfoarray_;
}

// -------------------------------------------------------------------

// TEInstanceDoBattleReq

// optional uint32 ChapterId = 1;
inline bool TEInstanceDoBattleReq::has_chapterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEInstanceDoBattleReq::set_has_chapterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEInstanceDoBattleReq::clear_has_chapterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEInstanceDoBattleReq::clear_chapterid() {
  chapterid_ = 0u;
  clear_has_chapterid();
}
inline ::google::protobuf::uint32 TEInstanceDoBattleReq::chapterid() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceDoBattleReq.ChapterId)
  return chapterid_;
}
inline void TEInstanceDoBattleReq::set_chapterid(::google::protobuf::uint32 value) {
  set_has_chapterid();
  chapterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceDoBattleReq.ChapterId)
}

// optional uint32 StrongholdId = 2;
inline bool TEInstanceDoBattleReq::has_strongholdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEInstanceDoBattleReq::set_has_strongholdid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEInstanceDoBattleReq::clear_has_strongholdid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEInstanceDoBattleReq::clear_strongholdid() {
  strongholdid_ = 0u;
  clear_has_strongholdid();
}
inline ::google::protobuf::uint32 TEInstanceDoBattleReq::strongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceDoBattleReq.StrongholdId)
  return strongholdid_;
}
inline void TEInstanceDoBattleReq::set_strongholdid(::google::protobuf::uint32 value) {
  set_has_strongholdid();
  strongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceDoBattleReq.StrongholdId)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 4;
inline bool TEInstanceDoBattleReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TEInstanceDoBattleReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TEInstanceDoBattleReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TEInstanceDoBattleReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TEInstanceDoBattleReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceDoBattleReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TEInstanceDoBattleReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceDoBattleReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TEInstanceDoBattleReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TEInstanceDoBattleReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TEInstanceDoBattleReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TEInstanceDoBattleRsp

// repeated .pb.TCommonReward DropArray = 1;
inline int TEInstanceDoBattleRsp::droparray_size() const {
  return droparray_.size();
}
inline void TEInstanceDoBattleRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TEInstanceDoBattleRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceDoBattleRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TEInstanceDoBattleRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceDoBattleRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TEInstanceDoBattleRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TEInstanceDoBattleRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TEInstanceDoBattleRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TEInstanceDoBattleRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TEInstanceDoBattleRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEInstanceDoBattleRsp.DropArray)
  return &droparray_;
}

// optional .pb.TBattleArgs BattleArgs = 2;
inline bool TEInstanceDoBattleRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEInstanceDoBattleRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEInstanceDoBattleRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEInstanceDoBattleRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TEInstanceDoBattleRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceDoBattleRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TEInstanceDoBattleRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceDoBattleRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TEInstanceDoBattleRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TEInstanceDoBattleRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TEInstanceDoBattleRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TEInstanceRaidStrongholdReq

// optional uint32 ChapterId = 1;
inline bool TEInstanceRaidStrongholdReq::has_chapterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEInstanceRaidStrongholdReq::set_has_chapterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEInstanceRaidStrongholdReq::clear_has_chapterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEInstanceRaidStrongholdReq::clear_chapterid() {
  chapterid_ = 0u;
  clear_has_chapterid();
}
inline ::google::protobuf::uint32 TEInstanceRaidStrongholdReq::chapterid() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceRaidStrongholdReq.ChapterId)
  return chapterid_;
}
inline void TEInstanceRaidStrongholdReq::set_chapterid(::google::protobuf::uint32 value) {
  set_has_chapterid();
  chapterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceRaidStrongholdReq.ChapterId)
}

// optional uint32 StrongholdId = 2;
inline bool TEInstanceRaidStrongholdReq::has_strongholdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEInstanceRaidStrongholdReq::set_has_strongholdid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEInstanceRaidStrongholdReq::clear_has_strongholdid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEInstanceRaidStrongholdReq::clear_strongholdid() {
  strongholdid_ = 0u;
  clear_has_strongholdid();
}
inline ::google::protobuf::uint32 TEInstanceRaidStrongholdReq::strongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceRaidStrongholdReq.StrongholdId)
  return strongholdid_;
}
inline void TEInstanceRaidStrongholdReq::set_strongholdid(::google::protobuf::uint32 value) {
  set_has_strongholdid();
  strongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceRaidStrongholdReq.StrongholdId)
}

// -------------------------------------------------------------------

// TEInstanceRaidStrongholdRsp

// repeated .pb.TCommonReward DropArray = 1;
inline int TEInstanceRaidStrongholdRsp::droparray_size() const {
  return droparray_.size();
}
inline void TEInstanceRaidStrongholdRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TEInstanceRaidStrongholdRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceRaidStrongholdRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TEInstanceRaidStrongholdRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceRaidStrongholdRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TEInstanceRaidStrongholdRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TEInstanceRaidStrongholdRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TEInstanceRaidStrongholdRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TEInstanceRaidStrongholdRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TEInstanceRaidStrongholdRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEInstanceRaidStrongholdRsp.DropArray)
  return &droparray_;
}

// -------------------------------------------------------------------

// TEInstanceReportBattleReq

// optional uint32 ChapterId = 1;
inline bool TEInstanceReportBattleReq::has_chapterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEInstanceReportBattleReq::set_has_chapterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEInstanceReportBattleReq::clear_has_chapterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEInstanceReportBattleReq::clear_chapterid() {
  chapterid_ = 0u;
  clear_has_chapterid();
}
inline ::google::protobuf::uint32 TEInstanceReportBattleReq::chapterid() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceReportBattleReq.ChapterId)
  return chapterid_;
}
inline void TEInstanceReportBattleReq::set_chapterid(::google::protobuf::uint32 value) {
  set_has_chapterid();
  chapterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceReportBattleReq.ChapterId)
}

// optional uint32 StrongholdId = 2;
inline bool TEInstanceReportBattleReq::has_strongholdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEInstanceReportBattleReq::set_has_strongholdid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEInstanceReportBattleReq::clear_has_strongholdid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEInstanceReportBattleReq::clear_strongholdid() {
  strongholdid_ = 0u;
  clear_has_strongholdid();
}
inline ::google::protobuf::uint32 TEInstanceReportBattleReq::strongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceReportBattleReq.StrongholdId)
  return strongholdid_;
}
inline void TEInstanceReportBattleReq::set_strongholdid(::google::protobuf::uint32 value) {
  set_has_strongholdid();
  strongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceReportBattleReq.StrongholdId)
}

// optional .pb.TBattleResult BattleRet = 3;
inline bool TEInstanceReportBattleReq::has_battleret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TEInstanceReportBattleReq::set_has_battleret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TEInstanceReportBattleReq::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TEInstanceReportBattleReq::clear_battleret() {
  if (battleret_ != NULL) battleret_->::pb::TBattleResult::Clear();
  clear_has_battleret();
}
inline const ::pb::TBattleResult& TEInstanceReportBattleReq::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceReportBattleReq.BattleRet)
  return battleret_ != NULL ? *battleret_ : *default_instance_->battleret_;
}
inline ::pb::TBattleResult* TEInstanceReportBattleReq::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == NULL) battleret_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceReportBattleReq.BattleRet)
  return battleret_;
}
inline ::pb::TBattleResult* TEInstanceReportBattleReq::release_battleret() {
  clear_has_battleret();
  ::pb::TBattleResult* temp = battleret_;
  battleret_ = NULL;
  return temp;
}
inline void TEInstanceReportBattleReq::set_allocated_battleret(::pb::TBattleResult* battleret) {
  delete battleret_;
  battleret_ = battleret;
  if (battleret) {
    set_has_battleret();
  } else {
    clear_has_battleret();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TEInstanceReportBattleReq.BattleRet)
}

// optional bytes BattleResultBytes = 4;
inline bool TEInstanceReportBattleReq::has_battleresultbytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TEInstanceReportBattleReq::set_has_battleresultbytes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TEInstanceReportBattleReq::clear_has_battleresultbytes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TEInstanceReportBattleReq::clear_battleresultbytes() {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_->clear();
  }
  clear_has_battleresultbytes();
}
inline const ::std::string& TEInstanceReportBattleReq::battleresultbytes() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceReportBattleReq.BattleResultBytes)
  return *battleresultbytes_;
}
inline void TEInstanceReportBattleReq::set_battleresultbytes(const ::std::string& value) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TEInstanceReportBattleReq.BattleResultBytes)
}
inline void TEInstanceReportBattleReq::set_battleresultbytes(const char* value) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TEInstanceReportBattleReq.BattleResultBytes)
}
inline void TEInstanceReportBattleReq::set_battleresultbytes(const void* value, size_t size) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TEInstanceReportBattleReq.BattleResultBytes)
}
inline ::std::string* TEInstanceReportBattleReq::mutable_battleresultbytes() {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceReportBattleReq.BattleResultBytes)
  return battleresultbytes_;
}
inline ::std::string* TEInstanceReportBattleReq::release_battleresultbytes() {
  clear_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleresultbytes_;
    battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TEInstanceReportBattleReq::set_allocated_battleresultbytes(::std::string* battleresultbytes) {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresultbytes_;
  }
  if (battleresultbytes) {
    set_has_battleresultbytes();
    battleresultbytes_ = battleresultbytes;
  } else {
    clear_has_battleresultbytes();
    battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TEInstanceReportBattleReq.BattleResultBytes)
}

// -------------------------------------------------------------------

// TEInstanceReportBattleRsp

// repeated .pb.TCommonReward DropArray = 1;
inline int TEInstanceReportBattleRsp::droparray_size() const {
  return droparray_.size();
}
inline void TEInstanceReportBattleRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TEInstanceReportBattleRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceReportBattleRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TEInstanceReportBattleRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceReportBattleRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TEInstanceReportBattleRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TEInstanceReportBattleRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TEInstanceReportBattleRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TEInstanceReportBattleRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TEInstanceReportBattleRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEInstanceReportBattleRsp.DropArray)
  return &droparray_;
}

// -------------------------------------------------------------------

// TEInstanceReceiveStarRewardReq

// optional uint32 ChapterId = 1;
inline bool TEInstanceReceiveStarRewardReq::has_chapterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEInstanceReceiveStarRewardReq::set_has_chapterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEInstanceReceiveStarRewardReq::clear_has_chapterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEInstanceReceiveStarRewardReq::clear_chapterid() {
  chapterid_ = 0u;
  clear_has_chapterid();
}
inline ::google::protobuf::uint32 TEInstanceReceiveStarRewardReq::chapterid() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceReceiveStarRewardReq.ChapterId)
  return chapterid_;
}
inline void TEInstanceReceiveStarRewardReq::set_chapterid(::google::protobuf::uint32 value) {
  set_has_chapterid();
  chapterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceReceiveStarRewardReq.ChapterId)
}

// optional uint32 StarNum = 2;
inline bool TEInstanceReceiveStarRewardReq::has_starnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEInstanceReceiveStarRewardReq::set_has_starnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEInstanceReceiveStarRewardReq::clear_has_starnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEInstanceReceiveStarRewardReq::clear_starnum() {
  starnum_ = 0u;
  clear_has_starnum();
}
inline ::google::protobuf::uint32 TEInstanceReceiveStarRewardReq::starnum() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceReceiveStarRewardReq.StarNum)
  return starnum_;
}
inline void TEInstanceReceiveStarRewardReq::set_starnum(::google::protobuf::uint32 value) {
  set_has_starnum();
  starnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceReceiveStarRewardReq.StarNum)
}

// -------------------------------------------------------------------

// TEInstanceReceiveStarRewardRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TEInstanceReceiveStarRewardRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TEInstanceReceiveStarRewardRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TEInstanceReceiveStarRewardRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceReceiveStarRewardRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TEInstanceReceiveStarRewardRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceReceiveStarRewardRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TEInstanceReceiveStarRewardRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TEInstanceReceiveStarRewardRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TEInstanceReceiveStarRewardRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TEInstanceReceiveStarRewardRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TEInstanceReceiveStarRewardRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEInstanceReceiveStarRewardRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TEInstanceResetStrongholdReq

// optional uint32 ChapterId = 1;
inline bool TEInstanceResetStrongholdReq::has_chapterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEInstanceResetStrongholdReq::set_has_chapterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEInstanceResetStrongholdReq::clear_has_chapterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEInstanceResetStrongholdReq::clear_chapterid() {
  chapterid_ = 0u;
  clear_has_chapterid();
}
inline ::google::protobuf::uint32 TEInstanceResetStrongholdReq::chapterid() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceResetStrongholdReq.ChapterId)
  return chapterid_;
}
inline void TEInstanceResetStrongholdReq::set_chapterid(::google::protobuf::uint32 value) {
  set_has_chapterid();
  chapterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceResetStrongholdReq.ChapterId)
}

// optional uint32 StrongholdId = 2;
inline bool TEInstanceResetStrongholdReq::has_strongholdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEInstanceResetStrongholdReq::set_has_strongholdid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEInstanceResetStrongholdReq::clear_has_strongholdid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEInstanceResetStrongholdReq::clear_strongholdid() {
  strongholdid_ = 0u;
  clear_has_strongholdid();
}
inline ::google::protobuf::uint32 TEInstanceResetStrongholdReq::strongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceResetStrongholdReq.StrongholdId)
  return strongholdid_;
}
inline void TEInstanceResetStrongholdReq::set_strongholdid(::google::protobuf::uint32 value) {
  set_has_strongholdid();
  strongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceResetStrongholdReq.StrongholdId)
}

// -------------------------------------------------------------------

// TEInstanceProgressRankInfo

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TEInstanceProgressRankInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEInstanceProgressRankInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEInstanceProgressRankInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEInstanceProgressRankInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TEInstanceProgressRankInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceProgressRankInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TEInstanceProgressRankInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceProgressRankInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TEInstanceProgressRankInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TEInstanceProgressRankInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TEInstanceProgressRankInfo.UserInfo)
}

// optional uint32 StrongholdId = 3;
inline bool TEInstanceProgressRankInfo::has_strongholdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEInstanceProgressRankInfo::set_has_strongholdid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEInstanceProgressRankInfo::clear_has_strongholdid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEInstanceProgressRankInfo::clear_strongholdid() {
  strongholdid_ = 0u;
  clear_has_strongholdid();
}
inline ::google::protobuf::uint32 TEInstanceProgressRankInfo::strongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceProgressRankInfo.StrongholdId)
  return strongholdid_;
}
inline void TEInstanceProgressRankInfo::set_strongholdid(::google::protobuf::uint32 value) {
  set_has_strongholdid();
  strongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceProgressRankInfo.StrongholdId)
}

// optional uint64 StrongholdTime = 4;
inline bool TEInstanceProgressRankInfo::has_strongholdtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TEInstanceProgressRankInfo::set_has_strongholdtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TEInstanceProgressRankInfo::clear_has_strongholdtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TEInstanceProgressRankInfo::clear_strongholdtime() {
  strongholdtime_ = GOOGLE_ULONGLONG(0);
  clear_has_strongholdtime();
}
inline ::google::protobuf::uint64 TEInstanceProgressRankInfo::strongholdtime() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceProgressRankInfo.StrongholdTime)
  return strongholdtime_;
}
inline void TEInstanceProgressRankInfo::set_strongholdtime(::google::protobuf::uint64 value) {
  set_has_strongholdtime();
  strongholdtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceProgressRankInfo.StrongholdTime)
}

// -------------------------------------------------------------------

// TEInstanceGetProgressRankReq

// optional uint32 Offset = 1;
inline bool TEInstanceGetProgressRankReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEInstanceGetProgressRankReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEInstanceGetProgressRankReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEInstanceGetProgressRankReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TEInstanceGetProgressRankReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceGetProgressRankReq.Offset)
  return offset_;
}
inline void TEInstanceGetProgressRankReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceGetProgressRankReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TEInstanceGetProgressRankReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEInstanceGetProgressRankReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEInstanceGetProgressRankReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEInstanceGetProgressRankReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TEInstanceGetProgressRankReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceGetProgressRankReq.Limit)
  return limit_;
}
inline void TEInstanceGetProgressRankReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceGetProgressRankReq.Limit)
}

// -------------------------------------------------------------------

// TEInstanceGetProgressRankRsp

// repeated .pb.TEInstanceProgressRankInfo RankArr = 1;
inline int TEInstanceGetProgressRankRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TEInstanceGetProgressRankRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TEInstanceProgressRankInfo& TEInstanceGetProgressRankRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceGetProgressRankRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TEInstanceProgressRankInfo* TEInstanceGetProgressRankRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceGetProgressRankRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TEInstanceProgressRankInfo* TEInstanceGetProgressRankRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TEInstanceGetProgressRankRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceProgressRankInfo >&
TEInstanceGetProgressRankRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TEInstanceGetProgressRankRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceProgressRankInfo >*
TEInstanceGetProgressRankRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEInstanceGetProgressRankRsp.RankArr)
  return &rankarr_;
}

// optional int32 MyRank = 2;
inline bool TEInstanceGetProgressRankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEInstanceGetProgressRankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEInstanceGetProgressRankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEInstanceGetProgressRankRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TEInstanceGetProgressRankRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceGetProgressRankRsp.MyRank)
  return myrank_;
}
inline void TEInstanceGetProgressRankRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceGetProgressRankRsp.MyRank)
}

// -------------------------------------------------------------------

// TEInstanceInfoNotify

// repeated .pb.TEInstanceChapterInfo ChapterInfoArray = 1;
inline int TEInstanceInfoNotify::chapterinfoarray_size() const {
  return chapterinfoarray_.size();
}
inline void TEInstanceInfoNotify::clear_chapterinfoarray() {
  chapterinfoarray_.Clear();
}
inline const ::pb::TEInstanceChapterInfo& TEInstanceInfoNotify::chapterinfoarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceInfoNotify.ChapterInfoArray)
  return chapterinfoarray_.Get(index);
}
inline ::pb::TEInstanceChapterInfo* TEInstanceInfoNotify::mutable_chapterinfoarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEInstanceInfoNotify.ChapterInfoArray)
  return chapterinfoarray_.Mutable(index);
}
inline ::pb::TEInstanceChapterInfo* TEInstanceInfoNotify::add_chapterinfoarray() {
  // @@protoc_insertion_point(field_add:pb.TEInstanceInfoNotify.ChapterInfoArray)
  return chapterinfoarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceChapterInfo >&
TEInstanceInfoNotify::chapterinfoarray() const {
  // @@protoc_insertion_point(field_list:pb.TEInstanceInfoNotify.ChapterInfoArray)
  return chapterinfoarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TEInstanceChapterInfo >*
TEInstanceInfoNotify::mutable_chapterinfoarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEInstanceInfoNotify.ChapterInfoArray)
  return &chapterinfoarray_;
}

// optional uint32 ResetNum = 2;
inline bool TEInstanceInfoNotify::has_resetnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEInstanceInfoNotify::set_has_resetnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEInstanceInfoNotify::clear_has_resetnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEInstanceInfoNotify::clear_resetnum() {
  resetnum_ = 0u;
  clear_has_resetnum();
}
inline ::google::protobuf::uint32 TEInstanceInfoNotify::resetnum() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceInfoNotify.ResetNum)
  return resetnum_;
}
inline void TEInstanceInfoNotify::set_resetnum(::google::protobuf::uint32 value) {
  set_has_resetnum();
  resetnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceInfoNotify.ResetNum)
}

// optional uint64 ResetTime = 3;
inline bool TEInstanceInfoNotify::has_resettime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TEInstanceInfoNotify::set_has_resettime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TEInstanceInfoNotify::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TEInstanceInfoNotify::clear_resettime() {
  resettime_ = GOOGLE_ULONGLONG(0);
  clear_has_resettime();
}
inline ::google::protobuf::uint64 TEInstanceInfoNotify::resettime() const {
  // @@protoc_insertion_point(field_get:pb.TEInstanceInfoNotify.ResetTime)
  return resettime_;
}
inline void TEInstanceInfoNotify::set_resettime(::google::protobuf::uint64 value) {
  set_has_resettime();
  resettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TEInstanceInfoNotify.ResetTime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fEInstance_2eproto__INCLUDED
