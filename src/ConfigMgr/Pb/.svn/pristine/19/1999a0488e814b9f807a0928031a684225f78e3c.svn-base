// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/BeastInstance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/BeastInstance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TBeastInstanceStrongholdInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceStrongholdInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastInstanceChapterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceChapterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastInstanceAchievementRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceAchievementRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastInstanceAchievementInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceAchievementInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastInstanceGetBeastInstanceInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceGetBeastInstanceInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastInstanceDoBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceDoBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastInstanceDoBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceDoBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastInstanceRaidStrongholdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceRaidStrongholdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastInstanceRaidStrongholdRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceRaidStrongholdRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastInstanceReportBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceReportBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastInstanceReportBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceReportBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastInstanceReceiveChapterRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceReceiveChapterRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastInstanceReceiveChapterRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceReceiveChapterRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastInstanceBuyChallengeNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceBuyChallengeNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastInstanceReceiveAchievementRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceReceiveAchievementRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastInstanceReceiveAchievementRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceReceiveAchievementRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastInstanceInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastInstanceInfoNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fBeastInstance_2eproto() {
  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/BeastInstance.proto");
  GOOGLE_CHECK(file != NULL);
  TBeastInstanceStrongholdInfo_descriptor_ = file->message_type(0);
  static const int TBeastInstanceStrongholdInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceStrongholdInfo, strongholdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceStrongholdInfo, starnum_),
  };
  TBeastInstanceStrongholdInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceStrongholdInfo_descriptor_,
      TBeastInstanceStrongholdInfo::default_instance_,
      TBeastInstanceStrongholdInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceStrongholdInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceStrongholdInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceStrongholdInfo));
  TBeastInstanceChapterInfo_descriptor_ = file->message_type(1);
  static const int TBeastInstanceChapterInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceChapterInfo, chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceChapterInfo, ispass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceChapterInfo, rewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceChapterInfo, maxstrongholdid_),
  };
  TBeastInstanceChapterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceChapterInfo_descriptor_,
      TBeastInstanceChapterInfo::default_instance_,
      TBeastInstanceChapterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceChapterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceChapterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceChapterInfo));
  TBeastInstanceAchievementRewardInfo_descriptor_ = file->message_type(2);
  static const int TBeastInstanceAchievementRewardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceAchievementRewardInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceAchievementRewardInfo, rewardtime_),
  };
  TBeastInstanceAchievementRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceAchievementRewardInfo_descriptor_,
      TBeastInstanceAchievementRewardInfo::default_instance_,
      TBeastInstanceAchievementRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceAchievementRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceAchievementRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceAchievementRewardInfo));
  TBeastInstanceAchievementInfo_descriptor_ = file->message_type(3);
  static const int TBeastInstanceAchievementInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceAchievementInfo, totalchallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceAchievementInfo, rewardinfoarray_),
  };
  TBeastInstanceAchievementInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceAchievementInfo_descriptor_,
      TBeastInstanceAchievementInfo::default_instance_,
      TBeastInstanceAchievementInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceAchievementInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceAchievementInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceAchievementInfo));
  TBeastInstanceGetBeastInstanceInfoRsp_descriptor_ = file->message_type(4);
  static const int TBeastInstanceGetBeastInstanceInfoRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceGetBeastInstanceInfoRsp, chapterinfoarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceGetBeastInstanceInfoRsp, challengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceGetBeastInstanceInfoRsp, buychallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceGetBeastInstanceInfoRsp, refreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceGetBeastInstanceInfoRsp, achievementinfo_),
  };
  TBeastInstanceGetBeastInstanceInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceGetBeastInstanceInfoRsp_descriptor_,
      TBeastInstanceGetBeastInstanceInfoRsp::default_instance_,
      TBeastInstanceGetBeastInstanceInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceGetBeastInstanceInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceGetBeastInstanceInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceGetBeastInstanceInfoRsp));
  TBeastInstanceDoBattleReq_descriptor_ = file->message_type(5);
  static const int TBeastInstanceDoBattleReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceDoBattleReq, chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceDoBattleReq, strongholdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceDoBattleReq, battlecheckparam_),
  };
  TBeastInstanceDoBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceDoBattleReq_descriptor_,
      TBeastInstanceDoBattleReq::default_instance_,
      TBeastInstanceDoBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceDoBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceDoBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceDoBattleReq));
  TBeastInstanceDoBattleRsp_descriptor_ = file->message_type(6);
  static const int TBeastInstanceDoBattleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceDoBattleRsp, droparray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceDoBattleRsp, battleargs_),
  };
  TBeastInstanceDoBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceDoBattleRsp_descriptor_,
      TBeastInstanceDoBattleRsp::default_instance_,
      TBeastInstanceDoBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceDoBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceDoBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceDoBattleRsp));
  TBeastInstanceRaidStrongholdReq_descriptor_ = file->message_type(7);
  static const int TBeastInstanceRaidStrongholdReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceRaidStrongholdReq, chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceRaidStrongholdReq, strongholdid_),
  };
  TBeastInstanceRaidStrongholdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceRaidStrongholdReq_descriptor_,
      TBeastInstanceRaidStrongholdReq::default_instance_,
      TBeastInstanceRaidStrongholdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceRaidStrongholdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceRaidStrongholdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceRaidStrongholdReq));
  TBeastInstanceRaidStrongholdRsp_descriptor_ = file->message_type(8);
  static const int TBeastInstanceRaidStrongholdRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceRaidStrongholdRsp, droparray_),
  };
  TBeastInstanceRaidStrongholdRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceRaidStrongholdRsp_descriptor_,
      TBeastInstanceRaidStrongholdRsp::default_instance_,
      TBeastInstanceRaidStrongholdRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceRaidStrongholdRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceRaidStrongholdRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceRaidStrongholdRsp));
  TBeastInstanceReportBattleReq_descriptor_ = file->message_type(9);
  static const int TBeastInstanceReportBattleReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReportBattleReq, chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReportBattleReq, strongholdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReportBattleReq, battleret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReportBattleReq, battleresultbytes_),
  };
  TBeastInstanceReportBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceReportBattleReq_descriptor_,
      TBeastInstanceReportBattleReq::default_instance_,
      TBeastInstanceReportBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReportBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReportBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceReportBattleReq));
  TBeastInstanceReportBattleRsp_descriptor_ = file->message_type(10);
  static const int TBeastInstanceReportBattleRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReportBattleRsp, droparray_),
  };
  TBeastInstanceReportBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceReportBattleRsp_descriptor_,
      TBeastInstanceReportBattleRsp::default_instance_,
      TBeastInstanceReportBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReportBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReportBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceReportBattleRsp));
  TBeastInstanceReceiveChapterRewardReq_descriptor_ = file->message_type(11);
  static const int TBeastInstanceReceiveChapterRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReceiveChapterRewardReq, chapterid_),
  };
  TBeastInstanceReceiveChapterRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceReceiveChapterRewardReq_descriptor_,
      TBeastInstanceReceiveChapterRewardReq::default_instance_,
      TBeastInstanceReceiveChapterRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReceiveChapterRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReceiveChapterRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceReceiveChapterRewardReq));
  TBeastInstanceReceiveChapterRewardRsp_descriptor_ = file->message_type(12);
  static const int TBeastInstanceReceiveChapterRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReceiveChapterRewardRsp, rewardarray_),
  };
  TBeastInstanceReceiveChapterRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceReceiveChapterRewardRsp_descriptor_,
      TBeastInstanceReceiveChapterRewardRsp::default_instance_,
      TBeastInstanceReceiveChapterRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReceiveChapterRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReceiveChapterRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceReceiveChapterRewardRsp));
  TBeastInstanceBuyChallengeNumReq_descriptor_ = file->message_type(13);
  static const int TBeastInstanceBuyChallengeNumReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceBuyChallengeNumReq, num_),
  };
  TBeastInstanceBuyChallengeNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceBuyChallengeNumReq_descriptor_,
      TBeastInstanceBuyChallengeNumReq::default_instance_,
      TBeastInstanceBuyChallengeNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceBuyChallengeNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceBuyChallengeNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceBuyChallengeNumReq));
  TBeastInstanceReceiveAchievementRewardReq_descriptor_ = file->message_type(14);
  static const int TBeastInstanceReceiveAchievementRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReceiveAchievementRewardReq, id_),
  };
  TBeastInstanceReceiveAchievementRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceReceiveAchievementRewardReq_descriptor_,
      TBeastInstanceReceiveAchievementRewardReq::default_instance_,
      TBeastInstanceReceiveAchievementRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReceiveAchievementRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReceiveAchievementRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceReceiveAchievementRewardReq));
  TBeastInstanceReceiveAchievementRewardRsp_descriptor_ = file->message_type(15);
  static const int TBeastInstanceReceiveAchievementRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReceiveAchievementRewardRsp, rewardarray_),
  };
  TBeastInstanceReceiveAchievementRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceReceiveAchievementRewardRsp_descriptor_,
      TBeastInstanceReceiveAchievementRewardRsp::default_instance_,
      TBeastInstanceReceiveAchievementRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReceiveAchievementRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceReceiveAchievementRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceReceiveAchievementRewardRsp));
  TBeastInstanceInfoNotify_descriptor_ = file->message_type(16);
  static const int TBeastInstanceInfoNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceInfoNotify, chapterinfoarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceInfoNotify, challengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceInfoNotify, buychallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceInfoNotify, refreshtime_),
  };
  TBeastInstanceInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastInstanceInfoNotify_descriptor_,
      TBeastInstanceInfoNotify::default_instance_,
      TBeastInstanceInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastInstanceInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastInstanceInfoNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fBeastInstance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceStrongholdInfo_descriptor_, &TBeastInstanceStrongholdInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceChapterInfo_descriptor_, &TBeastInstanceChapterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceAchievementRewardInfo_descriptor_, &TBeastInstanceAchievementRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceAchievementInfo_descriptor_, &TBeastInstanceAchievementInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceGetBeastInstanceInfoRsp_descriptor_, &TBeastInstanceGetBeastInstanceInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceDoBattleReq_descriptor_, &TBeastInstanceDoBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceDoBattleRsp_descriptor_, &TBeastInstanceDoBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceRaidStrongholdReq_descriptor_, &TBeastInstanceRaidStrongholdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceRaidStrongholdRsp_descriptor_, &TBeastInstanceRaidStrongholdRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceReportBattleReq_descriptor_, &TBeastInstanceReportBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceReportBattleRsp_descriptor_, &TBeastInstanceReportBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceReceiveChapterRewardReq_descriptor_, &TBeastInstanceReceiveChapterRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceReceiveChapterRewardRsp_descriptor_, &TBeastInstanceReceiveChapterRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceBuyChallengeNumReq_descriptor_, &TBeastInstanceBuyChallengeNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceReceiveAchievementRewardReq_descriptor_, &TBeastInstanceReceiveAchievementRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceReceiveAchievementRewardRsp_descriptor_, &TBeastInstanceReceiveAchievementRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastInstanceInfoNotify_descriptor_, &TBeastInstanceInfoNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fBeastInstance_2eproto() {
  delete TBeastInstanceStrongholdInfo::default_instance_;
  delete TBeastInstanceStrongholdInfo_reflection_;
  delete TBeastInstanceChapterInfo::default_instance_;
  delete TBeastInstanceChapterInfo_reflection_;
  delete TBeastInstanceAchievementRewardInfo::default_instance_;
  delete TBeastInstanceAchievementRewardInfo_reflection_;
  delete TBeastInstanceAchievementInfo::default_instance_;
  delete TBeastInstanceAchievementInfo_reflection_;
  delete TBeastInstanceGetBeastInstanceInfoRsp::default_instance_;
  delete TBeastInstanceGetBeastInstanceInfoRsp_reflection_;
  delete TBeastInstanceDoBattleReq::default_instance_;
  delete TBeastInstanceDoBattleReq_reflection_;
  delete TBeastInstanceDoBattleRsp::default_instance_;
  delete TBeastInstanceDoBattleRsp_reflection_;
  delete TBeastInstanceRaidStrongholdReq::default_instance_;
  delete TBeastInstanceRaidStrongholdReq_reflection_;
  delete TBeastInstanceRaidStrongholdRsp::default_instance_;
  delete TBeastInstanceRaidStrongholdRsp_reflection_;
  delete TBeastInstanceReportBattleReq::default_instance_;
  delete TBeastInstanceReportBattleReq_reflection_;
  delete TBeastInstanceReportBattleRsp::default_instance_;
  delete TBeastInstanceReportBattleRsp_reflection_;
  delete TBeastInstanceReceiveChapterRewardReq::default_instance_;
  delete TBeastInstanceReceiveChapterRewardReq_reflection_;
  delete TBeastInstanceReceiveChapterRewardRsp::default_instance_;
  delete TBeastInstanceReceiveChapterRewardRsp_reflection_;
  delete TBeastInstanceBuyChallengeNumReq::default_instance_;
  delete TBeastInstanceBuyChallengeNumReq_reflection_;
  delete TBeastInstanceReceiveAchievementRewardReq::default_instance_;
  delete TBeastInstanceReceiveAchievementRewardReq_reflection_;
  delete TBeastInstanceReceiveAchievementRewardRsp::default_instance_;
  delete TBeastInstanceReceiveAchievementRewardRsp_reflection_;
  delete TBeastInstanceInfoNotify::default_instance_;
  delete TBeastInstanceInfoNotify_reflection_;
}

void protobuf_AddDesc_net_2fBeastInstance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027net/BeastInstance.proto\022\002pb\032\026net/Commo"
    "nReward.proto\032\020net/Battle.proto\"E\n\034TBeas"
    "tInstanceStrongholdInfo\022\024\n\014StrongholdId\030"
    "\001 \001(\r\022\017\n\007StarNum\030\002 \001(\r\"k\n\031TBeastInstance"
    "ChapterInfo\022\021\n\tChapterId\030\001 \001(\r\022\016\n\006IsPass"
    "\030\002 \001(\010\022\022\n\nRewardTime\030\003 \001(\004\022\027\n\017MaxStrongh"
    "oldId\030\004 \001(\r\"E\n#TBeastInstanceAchievement"
    "RewardInfo\022\n\n\002Id\030\001 \001(\r\022\022\n\nRewardTime\030\002 \001"
    "(\004\"|\n\035TBeastInstanceAchievementInfo\022\031\n\021T"
    "otalChallengeNum\030\001 \001(\r\022@\n\017RewardInfoArra"
    "y\030\002 \003(\0132\'.pb.TBeastInstanceAchievementRe"
    "wardInfo\"\340\001\n%TBeastInstanceGetBeastInsta"
    "nceInfoRsp\0227\n\020ChapterInfoArray\030\001 \003(\0132\035.p"
    "b.TBeastInstanceChapterInfo\022\024\n\014Challenge"
    "Num\030\002 \001(\r\022\027\n\017BuyChallengeNum\030\003 \001(\r\022\023\n\013Re"
    "freshTime\030\004 \001(\004\022:\n\017AchievementInfo\030\005 \001(\013"
    "2!.pb.TBeastInstanceAchievementInfo\"u\n\031T"
    "BeastInstanceDoBattleReq\022\021\n\tChapterId\030\001 "
    "\001(\r\022\024\n\014StrongholdId\030\002 \001(\r\022/\n\020BattleCheck"
    "Param\030\004 \001(\0132\025.pb.TBattleCheckParam\"f\n\031TB"
    "eastInstanceDoBattleRsp\022$\n\tDropArray\030\001 \003"
    "(\0132\021.pb.TCommonReward\022#\n\nBattleArgs\030\002 \001("
    "\0132\017.pb.TBattleArgs\"J\n\037TBeastInstanceRaid"
    "StrongholdReq\022\021\n\tChapterId\030\001 \001(\r\022\024\n\014Stro"
    "ngholdId\030\002 \001(\r\"G\n\037TBeastInstanceRaidStro"
    "ngholdRsp\022$\n\tDropArray\030\001 \003(\0132\021.pb.TCommo"
    "nReward\"\211\001\n\035TBeastInstanceReportBattleRe"
    "q\022\021\n\tChapterId\030\001 \001(\r\022\024\n\014StrongholdId\030\002 \001"
    "(\r\022$\n\tBattleRet\030\003 \001(\0132\021.pb.TBattleResult"
    "\022\031\n\021BattleResultBytes\030\004 \001(\014\"E\n\035TBeastIns"
    "tanceReportBattleRsp\022$\n\tDropArray\030\001 \003(\0132"
    "\021.pb.TCommonReward\":\n%TBeastInstanceRece"
    "iveChapterRewardReq\022\021\n\tChapterId\030\001 \001(\r\"O"
    "\n%TBeastInstanceReceiveChapterRewardRsp\022"
    "&\n\013RewardArray\030\001 \003(\0132\021.pb.TCommonReward\""
    "/\n TBeastInstanceBuyChallengeNumReq\022\013\n\003N"
    "um\030\001 \001(\r\"7\n)TBeastInstanceReceiveAchieve"
    "mentRewardReq\022\n\n\002Id\030\001 \001(\r\"S\n)TBeastInsta"
    "nceReceiveAchievementRewardRsp\022&\n\013Reward"
    "Array\030\001 \003(\0132\021.pb.TCommonReward\"\227\001\n\030TBeas"
    "tInstanceInfoNotify\0227\n\020ChapterInfoArray\030"
    "\001 \003(\0132\035.pb.TBeastInstanceChapterInfo\022\024\n\014"
    "ChallengeNum\030\002 \001(\r\022\027\n\017BuyChallengeNum\030\003 "
    "\001(\r\022\023\n\013RefreshTime\030\004 \001(\004", 1744);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/BeastInstance.proto", &protobuf_RegisterTypes);
  TBeastInstanceStrongholdInfo::default_instance_ = new TBeastInstanceStrongholdInfo();
  TBeastInstanceChapterInfo::default_instance_ = new TBeastInstanceChapterInfo();
  TBeastInstanceAchievementRewardInfo::default_instance_ = new TBeastInstanceAchievementRewardInfo();
  TBeastInstanceAchievementInfo::default_instance_ = new TBeastInstanceAchievementInfo();
  TBeastInstanceGetBeastInstanceInfoRsp::default_instance_ = new TBeastInstanceGetBeastInstanceInfoRsp();
  TBeastInstanceDoBattleReq::default_instance_ = new TBeastInstanceDoBattleReq();
  TBeastInstanceDoBattleRsp::default_instance_ = new TBeastInstanceDoBattleRsp();
  TBeastInstanceRaidStrongholdReq::default_instance_ = new TBeastInstanceRaidStrongholdReq();
  TBeastInstanceRaidStrongholdRsp::default_instance_ = new TBeastInstanceRaidStrongholdRsp();
  TBeastInstanceReportBattleReq::default_instance_ = new TBeastInstanceReportBattleReq();
  TBeastInstanceReportBattleRsp::default_instance_ = new TBeastInstanceReportBattleRsp();
  TBeastInstanceReceiveChapterRewardReq::default_instance_ = new TBeastInstanceReceiveChapterRewardReq();
  TBeastInstanceReceiveChapterRewardRsp::default_instance_ = new TBeastInstanceReceiveChapterRewardRsp();
  TBeastInstanceBuyChallengeNumReq::default_instance_ = new TBeastInstanceBuyChallengeNumReq();
  TBeastInstanceReceiveAchievementRewardReq::default_instance_ = new TBeastInstanceReceiveAchievementRewardReq();
  TBeastInstanceReceiveAchievementRewardRsp::default_instance_ = new TBeastInstanceReceiveAchievementRewardRsp();
  TBeastInstanceInfoNotify::default_instance_ = new TBeastInstanceInfoNotify();
  TBeastInstanceStrongholdInfo::default_instance_->InitAsDefaultInstance();
  TBeastInstanceChapterInfo::default_instance_->InitAsDefaultInstance();
  TBeastInstanceAchievementRewardInfo::default_instance_->InitAsDefaultInstance();
  TBeastInstanceAchievementInfo::default_instance_->InitAsDefaultInstance();
  TBeastInstanceGetBeastInstanceInfoRsp::default_instance_->InitAsDefaultInstance();
  TBeastInstanceDoBattleReq::default_instance_->InitAsDefaultInstance();
  TBeastInstanceDoBattleRsp::default_instance_->InitAsDefaultInstance();
  TBeastInstanceRaidStrongholdReq::default_instance_->InitAsDefaultInstance();
  TBeastInstanceRaidStrongholdRsp::default_instance_->InitAsDefaultInstance();
  TBeastInstanceReportBattleReq::default_instance_->InitAsDefaultInstance();
  TBeastInstanceReportBattleRsp::default_instance_->InitAsDefaultInstance();
  TBeastInstanceReceiveChapterRewardReq::default_instance_->InitAsDefaultInstance();
  TBeastInstanceReceiveChapterRewardRsp::default_instance_->InitAsDefaultInstance();
  TBeastInstanceBuyChallengeNumReq::default_instance_->InitAsDefaultInstance();
  TBeastInstanceReceiveAchievementRewardReq::default_instance_->InitAsDefaultInstance();
  TBeastInstanceReceiveAchievementRewardRsp::default_instance_->InitAsDefaultInstance();
  TBeastInstanceInfoNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fBeastInstance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fBeastInstance_2eproto {
  StaticDescriptorInitializer_net_2fBeastInstance_2eproto() {
    protobuf_AddDesc_net_2fBeastInstance_2eproto();
  }
} static_descriptor_initializer_net_2fBeastInstance_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceStrongholdInfo::kStrongholdIdFieldNumber;
const int TBeastInstanceStrongholdInfo::kStarNumFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceStrongholdInfo::TBeastInstanceStrongholdInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceStrongholdInfo)
}

void TBeastInstanceStrongholdInfo::InitAsDefaultInstance() {
}

TBeastInstanceStrongholdInfo::TBeastInstanceStrongholdInfo(const TBeastInstanceStrongholdInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceStrongholdInfo)
}

void TBeastInstanceStrongholdInfo::SharedCtor() {
  _cached_size_ = 0;
  strongholdid_ = 0u;
  starnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceStrongholdInfo::~TBeastInstanceStrongholdInfo() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceStrongholdInfo)
  SharedDtor();
}

void TBeastInstanceStrongholdInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastInstanceStrongholdInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceStrongholdInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceStrongholdInfo_descriptor_;
}

const TBeastInstanceStrongholdInfo& TBeastInstanceStrongholdInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceStrongholdInfo* TBeastInstanceStrongholdInfo::default_instance_ = NULL;

TBeastInstanceStrongholdInfo* TBeastInstanceStrongholdInfo::New() const {
  return new TBeastInstanceStrongholdInfo;
}

void TBeastInstanceStrongholdInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBeastInstanceStrongholdInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(strongholdid_, starnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceStrongholdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceStrongholdInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 StrongholdId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strongholdid_)));
          set_has_strongholdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_StarNum;
        break;
      }

      // optional uint32 StarNum = 2;
      case 2: {
        if (tag == 16) {
         parse_StarNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starnum_)));
          set_has_starnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceStrongholdInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceStrongholdInfo)
  return false;
#undef DO_
}

void TBeastInstanceStrongholdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceStrongholdInfo)
  // optional uint32 StrongholdId = 1;
  if (has_strongholdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->strongholdid(), output);
  }

  // optional uint32 StarNum = 2;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceStrongholdInfo)
}

::google::protobuf::uint8* TBeastInstanceStrongholdInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceStrongholdInfo)
  // optional uint32 StrongholdId = 1;
  if (has_strongholdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->strongholdid(), target);
  }

  // optional uint32 StarNum = 2;
  if (has_starnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->starnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceStrongholdInfo)
  return target;
}

int TBeastInstanceStrongholdInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StrongholdId = 1;
    if (has_strongholdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strongholdid());
    }

    // optional uint32 StarNum = 2;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceStrongholdInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceStrongholdInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceStrongholdInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceStrongholdInfo::MergeFrom(const TBeastInstanceStrongholdInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strongholdid()) {
      set_strongholdid(from.strongholdid());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceStrongholdInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceStrongholdInfo::CopyFrom(const TBeastInstanceStrongholdInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceStrongholdInfo::IsInitialized() const {

  return true;
}

void TBeastInstanceStrongholdInfo::Swap(TBeastInstanceStrongholdInfo* other) {
  if (other != this) {
    std::swap(strongholdid_, other->strongholdid_);
    std::swap(starnum_, other->starnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceStrongholdInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceStrongholdInfo_descriptor_;
  metadata.reflection = TBeastInstanceStrongholdInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceChapterInfo::kChapterIdFieldNumber;
const int TBeastInstanceChapterInfo::kIsPassFieldNumber;
const int TBeastInstanceChapterInfo::kRewardTimeFieldNumber;
const int TBeastInstanceChapterInfo::kMaxStrongholdIdFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceChapterInfo::TBeastInstanceChapterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceChapterInfo)
}

void TBeastInstanceChapterInfo::InitAsDefaultInstance() {
}

TBeastInstanceChapterInfo::TBeastInstanceChapterInfo(const TBeastInstanceChapterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceChapterInfo)
}

void TBeastInstanceChapterInfo::SharedCtor() {
  _cached_size_ = 0;
  chapterid_ = 0u;
  ispass_ = false;
  rewardtime_ = GOOGLE_ULONGLONG(0);
  maxstrongholdid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceChapterInfo::~TBeastInstanceChapterInfo() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceChapterInfo)
  SharedDtor();
}

void TBeastInstanceChapterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastInstanceChapterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceChapterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceChapterInfo_descriptor_;
}

const TBeastInstanceChapterInfo& TBeastInstanceChapterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceChapterInfo* TBeastInstanceChapterInfo::default_instance_ = NULL;

TBeastInstanceChapterInfo* TBeastInstanceChapterInfo::New() const {
  return new TBeastInstanceChapterInfo;
}

void TBeastInstanceChapterInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBeastInstanceChapterInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chapterid_, maxstrongholdid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceChapterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceChapterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ChapterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsPass;
        break;
      }

      // optional bool IsPass = 2;
      case 2: {
        if (tag == 16) {
         parse_IsPass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispass_)));
          set_has_ispass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RewardTime;
        break;
      }

      // optional uint64 RewardTime = 3;
      case 3: {
        if (tag == 24) {
         parse_RewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MaxStrongholdId;
        break;
      }

      // optional uint32 MaxStrongholdId = 4;
      case 4: {
        if (tag == 32) {
         parse_MaxStrongholdId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxstrongholdid_)));
          set_has_maxstrongholdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceChapterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceChapterInfo)
  return false;
#undef DO_
}

void TBeastInstanceChapterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceChapterInfo)
  // optional uint32 ChapterId = 1;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chapterid(), output);
  }

  // optional bool IsPass = 2;
  if (has_ispass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ispass(), output);
  }

  // optional uint64 RewardTime = 3;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rewardtime(), output);
  }

  // optional uint32 MaxStrongholdId = 4;
  if (has_maxstrongholdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxstrongholdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceChapterInfo)
}

::google::protobuf::uint8* TBeastInstanceChapterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceChapterInfo)
  // optional uint32 ChapterId = 1;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chapterid(), target);
  }

  // optional bool IsPass = 2;
  if (has_ispass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ispass(), target);
  }

  // optional uint64 RewardTime = 3;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rewardtime(), target);
  }

  // optional uint32 MaxStrongholdId = 4;
  if (has_maxstrongholdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxstrongholdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceChapterInfo)
  return target;
}

int TBeastInstanceChapterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ChapterId = 1;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapterid());
    }

    // optional bool IsPass = 2;
    if (has_ispass()) {
      total_size += 1 + 1;
    }

    // optional uint64 RewardTime = 3;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewardtime());
    }

    // optional uint32 MaxStrongholdId = 4;
    if (has_maxstrongholdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxstrongholdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceChapterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceChapterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceChapterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceChapterInfo::MergeFrom(const TBeastInstanceChapterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
    if (from.has_ispass()) {
      set_ispass(from.ispass());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
    if (from.has_maxstrongholdid()) {
      set_maxstrongholdid(from.maxstrongholdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceChapterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceChapterInfo::CopyFrom(const TBeastInstanceChapterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceChapterInfo::IsInitialized() const {

  return true;
}

void TBeastInstanceChapterInfo::Swap(TBeastInstanceChapterInfo* other) {
  if (other != this) {
    std::swap(chapterid_, other->chapterid_);
    std::swap(ispass_, other->ispass_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(maxstrongholdid_, other->maxstrongholdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceChapterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceChapterInfo_descriptor_;
  metadata.reflection = TBeastInstanceChapterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceAchievementRewardInfo::kIdFieldNumber;
const int TBeastInstanceAchievementRewardInfo::kRewardTimeFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceAchievementRewardInfo::TBeastInstanceAchievementRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceAchievementRewardInfo)
}

void TBeastInstanceAchievementRewardInfo::InitAsDefaultInstance() {
}

TBeastInstanceAchievementRewardInfo::TBeastInstanceAchievementRewardInfo(const TBeastInstanceAchievementRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceAchievementRewardInfo)
}

void TBeastInstanceAchievementRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  rewardtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceAchievementRewardInfo::~TBeastInstanceAchievementRewardInfo() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceAchievementRewardInfo)
  SharedDtor();
}

void TBeastInstanceAchievementRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastInstanceAchievementRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceAchievementRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceAchievementRewardInfo_descriptor_;
}

const TBeastInstanceAchievementRewardInfo& TBeastInstanceAchievementRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceAchievementRewardInfo* TBeastInstanceAchievementRewardInfo::default_instance_ = NULL;

TBeastInstanceAchievementRewardInfo* TBeastInstanceAchievementRewardInfo::New() const {
  return new TBeastInstanceAchievementRewardInfo;
}

void TBeastInstanceAchievementRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBeastInstanceAchievementRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rewardtime_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceAchievementRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceAchievementRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RewardTime;
        break;
      }

      // optional uint64 RewardTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceAchievementRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceAchievementRewardInfo)
  return false;
#undef DO_
}

void TBeastInstanceAchievementRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceAchievementRewardInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 RewardTime = 2;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rewardtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceAchievementRewardInfo)
}

::google::protobuf::uint8* TBeastInstanceAchievementRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceAchievementRewardInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 RewardTime = 2;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rewardtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceAchievementRewardInfo)
  return target;
}

int TBeastInstanceAchievementRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 RewardTime = 2;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewardtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceAchievementRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceAchievementRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceAchievementRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceAchievementRewardInfo::MergeFrom(const TBeastInstanceAchievementRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceAchievementRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceAchievementRewardInfo::CopyFrom(const TBeastInstanceAchievementRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceAchievementRewardInfo::IsInitialized() const {

  return true;
}

void TBeastInstanceAchievementRewardInfo::Swap(TBeastInstanceAchievementRewardInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceAchievementRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceAchievementRewardInfo_descriptor_;
  metadata.reflection = TBeastInstanceAchievementRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceAchievementInfo::kTotalChallengeNumFieldNumber;
const int TBeastInstanceAchievementInfo::kRewardInfoArrayFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceAchievementInfo::TBeastInstanceAchievementInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceAchievementInfo)
}

void TBeastInstanceAchievementInfo::InitAsDefaultInstance() {
}

TBeastInstanceAchievementInfo::TBeastInstanceAchievementInfo(const TBeastInstanceAchievementInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceAchievementInfo)
}

void TBeastInstanceAchievementInfo::SharedCtor() {
  _cached_size_ = 0;
  totalchallengenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceAchievementInfo::~TBeastInstanceAchievementInfo() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceAchievementInfo)
  SharedDtor();
}

void TBeastInstanceAchievementInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastInstanceAchievementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceAchievementInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceAchievementInfo_descriptor_;
}

const TBeastInstanceAchievementInfo& TBeastInstanceAchievementInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceAchievementInfo* TBeastInstanceAchievementInfo::default_instance_ = NULL;

TBeastInstanceAchievementInfo* TBeastInstanceAchievementInfo::New() const {
  return new TBeastInstanceAchievementInfo;
}

void TBeastInstanceAchievementInfo::Clear() {
  totalchallengenum_ = 0u;
  rewardinfoarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceAchievementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceAchievementInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TotalChallengeNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalchallengenum_)));
          set_has_totalchallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardInfoArray;
        break;
      }

      // repeated .pb.TBeastInstanceAchievementRewardInfo RewardInfoArray = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardInfoArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardinfoarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardInfoArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceAchievementInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceAchievementInfo)
  return false;
#undef DO_
}

void TBeastInstanceAchievementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceAchievementInfo)
  // optional uint32 TotalChallengeNum = 1;
  if (has_totalchallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->totalchallengenum(), output);
  }

  // repeated .pb.TBeastInstanceAchievementRewardInfo RewardInfoArray = 2;
  for (int i = 0; i < this->rewardinfoarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardinfoarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceAchievementInfo)
}

::google::protobuf::uint8* TBeastInstanceAchievementInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceAchievementInfo)
  // optional uint32 TotalChallengeNum = 1;
  if (has_totalchallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->totalchallengenum(), target);
  }

  // repeated .pb.TBeastInstanceAchievementRewardInfo RewardInfoArray = 2;
  for (int i = 0; i < this->rewardinfoarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardinfoarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceAchievementInfo)
  return target;
}

int TBeastInstanceAchievementInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TotalChallengeNum = 1;
    if (has_totalchallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalchallengenum());
    }

  }
  // repeated .pb.TBeastInstanceAchievementRewardInfo RewardInfoArray = 2;
  total_size += 1 * this->rewardinfoarray_size();
  for (int i = 0; i < this->rewardinfoarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardinfoarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceAchievementInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceAchievementInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceAchievementInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceAchievementInfo::MergeFrom(const TBeastInstanceAchievementInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardinfoarray_.MergeFrom(from.rewardinfoarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalchallengenum()) {
      set_totalchallengenum(from.totalchallengenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceAchievementInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceAchievementInfo::CopyFrom(const TBeastInstanceAchievementInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceAchievementInfo::IsInitialized() const {

  return true;
}

void TBeastInstanceAchievementInfo::Swap(TBeastInstanceAchievementInfo* other) {
  if (other != this) {
    std::swap(totalchallengenum_, other->totalchallengenum_);
    rewardinfoarray_.Swap(&other->rewardinfoarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceAchievementInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceAchievementInfo_descriptor_;
  metadata.reflection = TBeastInstanceAchievementInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceGetBeastInstanceInfoRsp::kChapterInfoArrayFieldNumber;
const int TBeastInstanceGetBeastInstanceInfoRsp::kChallengeNumFieldNumber;
const int TBeastInstanceGetBeastInstanceInfoRsp::kBuyChallengeNumFieldNumber;
const int TBeastInstanceGetBeastInstanceInfoRsp::kRefreshTimeFieldNumber;
const int TBeastInstanceGetBeastInstanceInfoRsp::kAchievementInfoFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceGetBeastInstanceInfoRsp::TBeastInstanceGetBeastInstanceInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceGetBeastInstanceInfoRsp)
}

void TBeastInstanceGetBeastInstanceInfoRsp::InitAsDefaultInstance() {
  achievementinfo_ = const_cast< ::pb::TBeastInstanceAchievementInfo*>(&::pb::TBeastInstanceAchievementInfo::default_instance());
}

TBeastInstanceGetBeastInstanceInfoRsp::TBeastInstanceGetBeastInstanceInfoRsp(const TBeastInstanceGetBeastInstanceInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceGetBeastInstanceInfoRsp)
}

void TBeastInstanceGetBeastInstanceInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  challengenum_ = 0u;
  buychallengenum_ = 0u;
  refreshtime_ = GOOGLE_ULONGLONG(0);
  achievementinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceGetBeastInstanceInfoRsp::~TBeastInstanceGetBeastInstanceInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceGetBeastInstanceInfoRsp)
  SharedDtor();
}

void TBeastInstanceGetBeastInstanceInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete achievementinfo_;
  }
}

void TBeastInstanceGetBeastInstanceInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceGetBeastInstanceInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceGetBeastInstanceInfoRsp_descriptor_;
}

const TBeastInstanceGetBeastInstanceInfoRsp& TBeastInstanceGetBeastInstanceInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceGetBeastInstanceInfoRsp* TBeastInstanceGetBeastInstanceInfoRsp::default_instance_ = NULL;

TBeastInstanceGetBeastInstanceInfoRsp* TBeastInstanceGetBeastInstanceInfoRsp::New() const {
  return new TBeastInstanceGetBeastInstanceInfoRsp;
}

void TBeastInstanceGetBeastInstanceInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBeastInstanceGetBeastInstanceInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 30) {
    ZR_(challengenum_, refreshtime_);
    if (has_achievementinfo()) {
      if (achievementinfo_ != NULL) achievementinfo_->::pb::TBeastInstanceAchievementInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  chapterinfoarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceGetBeastInstanceInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceGetBeastInstanceInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBeastInstanceChapterInfo ChapterInfoArray = 1;
      case 1: {
        if (tag == 10) {
         parse_ChapterInfoArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapterinfoarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ChapterInfoArray;
        if (input->ExpectTag(16)) goto parse_ChallengeNum;
        break;
      }

      // optional uint32 ChallengeNum = 2;
      case 2: {
        if (tag == 16) {
         parse_ChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengenum_)));
          set_has_challengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BuyChallengeNum;
        break;
      }

      // optional uint32 BuyChallengeNum = 3;
      case 3: {
        if (tag == 24) {
         parse_BuyChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buychallengenum_)));
          set_has_buychallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RefreshTime;
        break;
      }

      // optional uint64 RefreshTime = 4;
      case 4: {
        if (tag == 32) {
         parse_RefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_AchievementInfo;
        break;
      }

      // optional .pb.TBeastInstanceAchievementInfo AchievementInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_AchievementInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achievementinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceGetBeastInstanceInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceGetBeastInstanceInfoRsp)
  return false;
#undef DO_
}

void TBeastInstanceGetBeastInstanceInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceGetBeastInstanceInfoRsp)
  // repeated .pb.TBeastInstanceChapterInfo ChapterInfoArray = 1;
  for (int i = 0; i < this->chapterinfoarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chapterinfoarray(i), output);
  }

  // optional uint32 ChallengeNum = 2;
  if (has_challengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challengenum(), output);
  }

  // optional uint32 BuyChallengeNum = 3;
  if (has_buychallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buychallengenum(), output);
  }

  // optional uint64 RefreshTime = 4;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->refreshtime(), output);
  }

  // optional .pb.TBeastInstanceAchievementInfo AchievementInfo = 5;
  if (has_achievementinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->achievementinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceGetBeastInstanceInfoRsp)
}

::google::protobuf::uint8* TBeastInstanceGetBeastInstanceInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceGetBeastInstanceInfoRsp)
  // repeated .pb.TBeastInstanceChapterInfo ChapterInfoArray = 1;
  for (int i = 0; i < this->chapterinfoarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chapterinfoarray(i), target);
  }

  // optional uint32 ChallengeNum = 2;
  if (has_challengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->challengenum(), target);
  }

  // optional uint32 BuyChallengeNum = 3;
  if (has_buychallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buychallengenum(), target);
  }

  // optional uint64 RefreshTime = 4;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->refreshtime(), target);
  }

  // optional .pb.TBeastInstanceAchievementInfo AchievementInfo = 5;
  if (has_achievementinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->achievementinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceGetBeastInstanceInfoRsp)
  return target;
}

int TBeastInstanceGetBeastInstanceInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 ChallengeNum = 2;
    if (has_challengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengenum());
    }

    // optional uint32 BuyChallengeNum = 3;
    if (has_buychallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buychallengenum());
    }

    // optional uint64 RefreshTime = 4;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refreshtime());
    }

    // optional .pb.TBeastInstanceAchievementInfo AchievementInfo = 5;
    if (has_achievementinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievementinfo());
    }

  }
  // repeated .pb.TBeastInstanceChapterInfo ChapterInfoArray = 1;
  total_size += 1 * this->chapterinfoarray_size();
  for (int i = 0; i < this->chapterinfoarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapterinfoarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceGetBeastInstanceInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceGetBeastInstanceInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceGetBeastInstanceInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceGetBeastInstanceInfoRsp::MergeFrom(const TBeastInstanceGetBeastInstanceInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapterinfoarray_.MergeFrom(from.chapterinfoarray_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_challengenum()) {
      set_challengenum(from.challengenum());
    }
    if (from.has_buychallengenum()) {
      set_buychallengenum(from.buychallengenum());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
    if (from.has_achievementinfo()) {
      mutable_achievementinfo()->::pb::TBeastInstanceAchievementInfo::MergeFrom(from.achievementinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceGetBeastInstanceInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceGetBeastInstanceInfoRsp::CopyFrom(const TBeastInstanceGetBeastInstanceInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceGetBeastInstanceInfoRsp::IsInitialized() const {

  return true;
}

void TBeastInstanceGetBeastInstanceInfoRsp::Swap(TBeastInstanceGetBeastInstanceInfoRsp* other) {
  if (other != this) {
    chapterinfoarray_.Swap(&other->chapterinfoarray_);
    std::swap(challengenum_, other->challengenum_);
    std::swap(buychallengenum_, other->buychallengenum_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(achievementinfo_, other->achievementinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceGetBeastInstanceInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceGetBeastInstanceInfoRsp_descriptor_;
  metadata.reflection = TBeastInstanceGetBeastInstanceInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceDoBattleReq::kChapterIdFieldNumber;
const int TBeastInstanceDoBattleReq::kStrongholdIdFieldNumber;
const int TBeastInstanceDoBattleReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceDoBattleReq::TBeastInstanceDoBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceDoBattleReq)
}

void TBeastInstanceDoBattleReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TBeastInstanceDoBattleReq::TBeastInstanceDoBattleReq(const TBeastInstanceDoBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceDoBattleReq)
}

void TBeastInstanceDoBattleReq::SharedCtor() {
  _cached_size_ = 0;
  chapterid_ = 0u;
  strongholdid_ = 0u;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceDoBattleReq::~TBeastInstanceDoBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceDoBattleReq)
  SharedDtor();
}

void TBeastInstanceDoBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TBeastInstanceDoBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceDoBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceDoBattleReq_descriptor_;
}

const TBeastInstanceDoBattleReq& TBeastInstanceDoBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceDoBattleReq* TBeastInstanceDoBattleReq::default_instance_ = NULL;

TBeastInstanceDoBattleReq* TBeastInstanceDoBattleReq::New() const {
  return new TBeastInstanceDoBattleReq;
}

void TBeastInstanceDoBattleReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBeastInstanceDoBattleReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(chapterid_, strongholdid_);
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceDoBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceDoBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ChapterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_StrongholdId;
        break;
      }

      // optional uint32 StrongholdId = 2;
      case 2: {
        if (tag == 16) {
         parse_StrongholdId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strongholdid_)));
          set_has_strongholdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 4;
      case 4: {
        if (tag == 34) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceDoBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceDoBattleReq)
  return false;
#undef DO_
}

void TBeastInstanceDoBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceDoBattleReq)
  // optional uint32 ChapterId = 1;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chapterid(), output);
  }

  // optional uint32 StrongholdId = 2;
  if (has_strongholdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->strongholdid(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 4;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceDoBattleReq)
}

::google::protobuf::uint8* TBeastInstanceDoBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceDoBattleReq)
  // optional uint32 ChapterId = 1;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chapterid(), target);
  }

  // optional uint32 StrongholdId = 2;
  if (has_strongholdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->strongholdid(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 4;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceDoBattleReq)
  return target;
}

int TBeastInstanceDoBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ChapterId = 1;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapterid());
    }

    // optional uint32 StrongholdId = 2;
    if (has_strongholdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strongholdid());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 4;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceDoBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceDoBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceDoBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceDoBattleReq::MergeFrom(const TBeastInstanceDoBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
    if (from.has_strongholdid()) {
      set_strongholdid(from.strongholdid());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceDoBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceDoBattleReq::CopyFrom(const TBeastInstanceDoBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceDoBattleReq::IsInitialized() const {

  return true;
}

void TBeastInstanceDoBattleReq::Swap(TBeastInstanceDoBattleReq* other) {
  if (other != this) {
    std::swap(chapterid_, other->chapterid_);
    std::swap(strongholdid_, other->strongholdid_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceDoBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceDoBattleReq_descriptor_;
  metadata.reflection = TBeastInstanceDoBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceDoBattleRsp::kDropArrayFieldNumber;
const int TBeastInstanceDoBattleRsp::kBattleArgsFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceDoBattleRsp::TBeastInstanceDoBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceDoBattleRsp)
}

void TBeastInstanceDoBattleRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TBeastInstanceDoBattleRsp::TBeastInstanceDoBattleRsp(const TBeastInstanceDoBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceDoBattleRsp)
}

void TBeastInstanceDoBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceDoBattleRsp::~TBeastInstanceDoBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceDoBattleRsp)
  SharedDtor();
}

void TBeastInstanceDoBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TBeastInstanceDoBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceDoBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceDoBattleRsp_descriptor_;
}

const TBeastInstanceDoBattleRsp& TBeastInstanceDoBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceDoBattleRsp* TBeastInstanceDoBattleRsp::default_instance_ = NULL;

TBeastInstanceDoBattleRsp* TBeastInstanceDoBattleRsp::New() const {
  return new TBeastInstanceDoBattleRsp;
}

void TBeastInstanceDoBattleRsp::Clear() {
  if (has_battleargs()) {
    if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  }
  droparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceDoBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceDoBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward DropArray = 1;
      case 1: {
        if (tag == 10) {
         parse_DropArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DropArray;
        if (input->ExpectTag(18)) goto parse_BattleArgs;
        break;
      }

      // optional .pb.TBattleArgs BattleArgs = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceDoBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceDoBattleRsp)
  return false;
#undef DO_
}

void TBeastInstanceDoBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceDoBattleRsp)
  // repeated .pb.TCommonReward DropArray = 1;
  for (int i = 0; i < this->droparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->droparray(i), output);
  }

  // optional .pb.TBattleArgs BattleArgs = 2;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceDoBattleRsp)
}

::google::protobuf::uint8* TBeastInstanceDoBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceDoBattleRsp)
  // repeated .pb.TCommonReward DropArray = 1;
  for (int i = 0; i < this->droparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->droparray(i), target);
  }

  // optional .pb.TBattleArgs BattleArgs = 2;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceDoBattleRsp)
  return target;
}

int TBeastInstanceDoBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.TBattleArgs BattleArgs = 2;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

  }
  // repeated .pb.TCommonReward DropArray = 1;
  total_size += 1 * this->droparray_size();
  for (int i = 0; i < this->droparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceDoBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceDoBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceDoBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceDoBattleRsp::MergeFrom(const TBeastInstanceDoBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparray_.MergeFrom(from.droparray_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceDoBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceDoBattleRsp::CopyFrom(const TBeastInstanceDoBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceDoBattleRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TBeastInstanceDoBattleRsp::Swap(TBeastInstanceDoBattleRsp* other) {
  if (other != this) {
    droparray_.Swap(&other->droparray_);
    std::swap(battleargs_, other->battleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceDoBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceDoBattleRsp_descriptor_;
  metadata.reflection = TBeastInstanceDoBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceRaidStrongholdReq::kChapterIdFieldNumber;
const int TBeastInstanceRaidStrongholdReq::kStrongholdIdFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceRaidStrongholdReq::TBeastInstanceRaidStrongholdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceRaidStrongholdReq)
}

void TBeastInstanceRaidStrongholdReq::InitAsDefaultInstance() {
}

TBeastInstanceRaidStrongholdReq::TBeastInstanceRaidStrongholdReq(const TBeastInstanceRaidStrongholdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceRaidStrongholdReq)
}

void TBeastInstanceRaidStrongholdReq::SharedCtor() {
  _cached_size_ = 0;
  chapterid_ = 0u;
  strongholdid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceRaidStrongholdReq::~TBeastInstanceRaidStrongholdReq() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceRaidStrongholdReq)
  SharedDtor();
}

void TBeastInstanceRaidStrongholdReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastInstanceRaidStrongholdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceRaidStrongholdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceRaidStrongholdReq_descriptor_;
}

const TBeastInstanceRaidStrongholdReq& TBeastInstanceRaidStrongholdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceRaidStrongholdReq* TBeastInstanceRaidStrongholdReq::default_instance_ = NULL;

TBeastInstanceRaidStrongholdReq* TBeastInstanceRaidStrongholdReq::New() const {
  return new TBeastInstanceRaidStrongholdReq;
}

void TBeastInstanceRaidStrongholdReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBeastInstanceRaidStrongholdReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chapterid_, strongholdid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceRaidStrongholdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceRaidStrongholdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ChapterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_StrongholdId;
        break;
      }

      // optional uint32 StrongholdId = 2;
      case 2: {
        if (tag == 16) {
         parse_StrongholdId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strongholdid_)));
          set_has_strongholdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceRaidStrongholdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceRaidStrongholdReq)
  return false;
#undef DO_
}

void TBeastInstanceRaidStrongholdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceRaidStrongholdReq)
  // optional uint32 ChapterId = 1;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chapterid(), output);
  }

  // optional uint32 StrongholdId = 2;
  if (has_strongholdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->strongholdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceRaidStrongholdReq)
}

::google::protobuf::uint8* TBeastInstanceRaidStrongholdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceRaidStrongholdReq)
  // optional uint32 ChapterId = 1;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chapterid(), target);
  }

  // optional uint32 StrongholdId = 2;
  if (has_strongholdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->strongholdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceRaidStrongholdReq)
  return target;
}

int TBeastInstanceRaidStrongholdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ChapterId = 1;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapterid());
    }

    // optional uint32 StrongholdId = 2;
    if (has_strongholdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strongholdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceRaidStrongholdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceRaidStrongholdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceRaidStrongholdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceRaidStrongholdReq::MergeFrom(const TBeastInstanceRaidStrongholdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
    if (from.has_strongholdid()) {
      set_strongholdid(from.strongholdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceRaidStrongholdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceRaidStrongholdReq::CopyFrom(const TBeastInstanceRaidStrongholdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceRaidStrongholdReq::IsInitialized() const {

  return true;
}

void TBeastInstanceRaidStrongholdReq::Swap(TBeastInstanceRaidStrongholdReq* other) {
  if (other != this) {
    std::swap(chapterid_, other->chapterid_);
    std::swap(strongholdid_, other->strongholdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceRaidStrongholdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceRaidStrongholdReq_descriptor_;
  metadata.reflection = TBeastInstanceRaidStrongholdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceRaidStrongholdRsp::kDropArrayFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceRaidStrongholdRsp::TBeastInstanceRaidStrongholdRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceRaidStrongholdRsp)
}

void TBeastInstanceRaidStrongholdRsp::InitAsDefaultInstance() {
}

TBeastInstanceRaidStrongholdRsp::TBeastInstanceRaidStrongholdRsp(const TBeastInstanceRaidStrongholdRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceRaidStrongholdRsp)
}

void TBeastInstanceRaidStrongholdRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceRaidStrongholdRsp::~TBeastInstanceRaidStrongholdRsp() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceRaidStrongholdRsp)
  SharedDtor();
}

void TBeastInstanceRaidStrongholdRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastInstanceRaidStrongholdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceRaidStrongholdRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceRaidStrongholdRsp_descriptor_;
}

const TBeastInstanceRaidStrongholdRsp& TBeastInstanceRaidStrongholdRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceRaidStrongholdRsp* TBeastInstanceRaidStrongholdRsp::default_instance_ = NULL;

TBeastInstanceRaidStrongholdRsp* TBeastInstanceRaidStrongholdRsp::New() const {
  return new TBeastInstanceRaidStrongholdRsp;
}

void TBeastInstanceRaidStrongholdRsp::Clear() {
  droparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceRaidStrongholdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceRaidStrongholdRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward DropArray = 1;
      case 1: {
        if (tag == 10) {
         parse_DropArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DropArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceRaidStrongholdRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceRaidStrongholdRsp)
  return false;
#undef DO_
}

void TBeastInstanceRaidStrongholdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceRaidStrongholdRsp)
  // repeated .pb.TCommonReward DropArray = 1;
  for (int i = 0; i < this->droparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->droparray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceRaidStrongholdRsp)
}

::google::protobuf::uint8* TBeastInstanceRaidStrongholdRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceRaidStrongholdRsp)
  // repeated .pb.TCommonReward DropArray = 1;
  for (int i = 0; i < this->droparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->droparray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceRaidStrongholdRsp)
  return target;
}

int TBeastInstanceRaidStrongholdRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward DropArray = 1;
  total_size += 1 * this->droparray_size();
  for (int i = 0; i < this->droparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceRaidStrongholdRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceRaidStrongholdRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceRaidStrongholdRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceRaidStrongholdRsp::MergeFrom(const TBeastInstanceRaidStrongholdRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparray_.MergeFrom(from.droparray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceRaidStrongholdRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceRaidStrongholdRsp::CopyFrom(const TBeastInstanceRaidStrongholdRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceRaidStrongholdRsp::IsInitialized() const {

  return true;
}

void TBeastInstanceRaidStrongholdRsp::Swap(TBeastInstanceRaidStrongholdRsp* other) {
  if (other != this) {
    droparray_.Swap(&other->droparray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceRaidStrongholdRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceRaidStrongholdRsp_descriptor_;
  metadata.reflection = TBeastInstanceRaidStrongholdRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceReportBattleReq::kChapterIdFieldNumber;
const int TBeastInstanceReportBattleReq::kStrongholdIdFieldNumber;
const int TBeastInstanceReportBattleReq::kBattleRetFieldNumber;
const int TBeastInstanceReportBattleReq::kBattleResultBytesFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceReportBattleReq::TBeastInstanceReportBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceReportBattleReq)
}

void TBeastInstanceReportBattleReq::InitAsDefaultInstance() {
  battleret_ = const_cast< ::pb::TBattleResult*>(&::pb::TBattleResult::default_instance());
}

TBeastInstanceReportBattleReq::TBeastInstanceReportBattleReq(const TBeastInstanceReportBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceReportBattleReq)
}

void TBeastInstanceReportBattleReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chapterid_ = 0u;
  strongholdid_ = 0u;
  battleret_ = NULL;
  battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceReportBattleReq::~TBeastInstanceReportBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceReportBattleReq)
  SharedDtor();
}

void TBeastInstanceReportBattleReq::SharedDtor() {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresultbytes_;
  }
  if (this != default_instance_) {
    delete battleret_;
  }
}

void TBeastInstanceReportBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceReportBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceReportBattleReq_descriptor_;
}

const TBeastInstanceReportBattleReq& TBeastInstanceReportBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceReportBattleReq* TBeastInstanceReportBattleReq::default_instance_ = NULL;

TBeastInstanceReportBattleReq* TBeastInstanceReportBattleReq::New() const {
  return new TBeastInstanceReportBattleReq;
}

void TBeastInstanceReportBattleReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBeastInstanceReportBattleReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(chapterid_, strongholdid_);
    if (has_battleret()) {
      if (battleret_ != NULL) battleret_->::pb::TBattleResult::Clear();
    }
    if (has_battleresultbytes()) {
      if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleresultbytes_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceReportBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceReportBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ChapterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_StrongholdId;
        break;
      }

      // optional uint32 StrongholdId = 2;
      case 2: {
        if (tag == 16) {
         parse_StrongholdId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strongholdid_)));
          set_has_strongholdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleRet;
        break;
      }

      // optional .pb.TBattleResult BattleRet = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BattleResultBytes;
        break;
      }

      // optional bytes BattleResultBytes = 4;
      case 4: {
        if (tag == 34) {
         parse_BattleResultBytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleresultbytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceReportBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceReportBattleReq)
  return false;
#undef DO_
}

void TBeastInstanceReportBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceReportBattleReq)
  // optional uint32 ChapterId = 1;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chapterid(), output);
  }

  // optional uint32 StrongholdId = 2;
  if (has_strongholdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->strongholdid(), output);
  }

  // optional .pb.TBattleResult BattleRet = 3;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battleret(), output);
  }

  // optional bytes BattleResultBytes = 4;
  if (has_battleresultbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->battleresultbytes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceReportBattleReq)
}

::google::protobuf::uint8* TBeastInstanceReportBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceReportBattleReq)
  // optional uint32 ChapterId = 1;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chapterid(), target);
  }

  // optional uint32 StrongholdId = 2;
  if (has_strongholdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->strongholdid(), target);
  }

  // optional .pb.TBattleResult BattleRet = 3;
  if (has_battleret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battleret(), target);
  }

  // optional bytes BattleResultBytes = 4;
  if (has_battleresultbytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->battleresultbytes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceReportBattleReq)
  return target;
}

int TBeastInstanceReportBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ChapterId = 1;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapterid());
    }

    // optional uint32 StrongholdId = 2;
    if (has_strongholdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strongholdid());
    }

    // optional .pb.TBattleResult BattleRet = 3;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleret());
    }

    // optional bytes BattleResultBytes = 4;
    if (has_battleresultbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleresultbytes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceReportBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceReportBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceReportBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceReportBattleReq::MergeFrom(const TBeastInstanceReportBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
    if (from.has_strongholdid()) {
      set_strongholdid(from.strongholdid());
    }
    if (from.has_battleret()) {
      mutable_battleret()->::pb::TBattleResult::MergeFrom(from.battleret());
    }
    if (from.has_battleresultbytes()) {
      set_battleresultbytes(from.battleresultbytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceReportBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceReportBattleReq::CopyFrom(const TBeastInstanceReportBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceReportBattleReq::IsInitialized() const {

  if (has_battleret()) {
    if (!this->battleret().IsInitialized()) return false;
  }
  return true;
}

void TBeastInstanceReportBattleReq::Swap(TBeastInstanceReportBattleReq* other) {
  if (other != this) {
    std::swap(chapterid_, other->chapterid_);
    std::swap(strongholdid_, other->strongholdid_);
    std::swap(battleret_, other->battleret_);
    std::swap(battleresultbytes_, other->battleresultbytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceReportBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceReportBattleReq_descriptor_;
  metadata.reflection = TBeastInstanceReportBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceReportBattleRsp::kDropArrayFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceReportBattleRsp::TBeastInstanceReportBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceReportBattleRsp)
}

void TBeastInstanceReportBattleRsp::InitAsDefaultInstance() {
}

TBeastInstanceReportBattleRsp::TBeastInstanceReportBattleRsp(const TBeastInstanceReportBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceReportBattleRsp)
}

void TBeastInstanceReportBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceReportBattleRsp::~TBeastInstanceReportBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceReportBattleRsp)
  SharedDtor();
}

void TBeastInstanceReportBattleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastInstanceReportBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceReportBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceReportBattleRsp_descriptor_;
}

const TBeastInstanceReportBattleRsp& TBeastInstanceReportBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceReportBattleRsp* TBeastInstanceReportBattleRsp::default_instance_ = NULL;

TBeastInstanceReportBattleRsp* TBeastInstanceReportBattleRsp::New() const {
  return new TBeastInstanceReportBattleRsp;
}

void TBeastInstanceReportBattleRsp::Clear() {
  droparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceReportBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceReportBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward DropArray = 1;
      case 1: {
        if (tag == 10) {
         parse_DropArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DropArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceReportBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceReportBattleRsp)
  return false;
#undef DO_
}

void TBeastInstanceReportBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceReportBattleRsp)
  // repeated .pb.TCommonReward DropArray = 1;
  for (int i = 0; i < this->droparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->droparray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceReportBattleRsp)
}

::google::protobuf::uint8* TBeastInstanceReportBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceReportBattleRsp)
  // repeated .pb.TCommonReward DropArray = 1;
  for (int i = 0; i < this->droparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->droparray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceReportBattleRsp)
  return target;
}

int TBeastInstanceReportBattleRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward DropArray = 1;
  total_size += 1 * this->droparray_size();
  for (int i = 0; i < this->droparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceReportBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceReportBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceReportBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceReportBattleRsp::MergeFrom(const TBeastInstanceReportBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparray_.MergeFrom(from.droparray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceReportBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceReportBattleRsp::CopyFrom(const TBeastInstanceReportBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceReportBattleRsp::IsInitialized() const {

  return true;
}

void TBeastInstanceReportBattleRsp::Swap(TBeastInstanceReportBattleRsp* other) {
  if (other != this) {
    droparray_.Swap(&other->droparray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceReportBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceReportBattleRsp_descriptor_;
  metadata.reflection = TBeastInstanceReportBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceReceiveChapterRewardReq::kChapterIdFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceReceiveChapterRewardReq::TBeastInstanceReceiveChapterRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceReceiveChapterRewardReq)
}

void TBeastInstanceReceiveChapterRewardReq::InitAsDefaultInstance() {
}

TBeastInstanceReceiveChapterRewardReq::TBeastInstanceReceiveChapterRewardReq(const TBeastInstanceReceiveChapterRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceReceiveChapterRewardReq)
}

void TBeastInstanceReceiveChapterRewardReq::SharedCtor() {
  _cached_size_ = 0;
  chapterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceReceiveChapterRewardReq::~TBeastInstanceReceiveChapterRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceReceiveChapterRewardReq)
  SharedDtor();
}

void TBeastInstanceReceiveChapterRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastInstanceReceiveChapterRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceReceiveChapterRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceReceiveChapterRewardReq_descriptor_;
}

const TBeastInstanceReceiveChapterRewardReq& TBeastInstanceReceiveChapterRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceReceiveChapterRewardReq* TBeastInstanceReceiveChapterRewardReq::default_instance_ = NULL;

TBeastInstanceReceiveChapterRewardReq* TBeastInstanceReceiveChapterRewardReq::New() const {
  return new TBeastInstanceReceiveChapterRewardReq;
}

void TBeastInstanceReceiveChapterRewardReq::Clear() {
  chapterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceReceiveChapterRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceReceiveChapterRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ChapterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceReceiveChapterRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceReceiveChapterRewardReq)
  return false;
#undef DO_
}

void TBeastInstanceReceiveChapterRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceReceiveChapterRewardReq)
  // optional uint32 ChapterId = 1;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chapterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceReceiveChapterRewardReq)
}

::google::protobuf::uint8* TBeastInstanceReceiveChapterRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceReceiveChapterRewardReq)
  // optional uint32 ChapterId = 1;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chapterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceReceiveChapterRewardReq)
  return target;
}

int TBeastInstanceReceiveChapterRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ChapterId = 1;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceReceiveChapterRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceReceiveChapterRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceReceiveChapterRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceReceiveChapterRewardReq::MergeFrom(const TBeastInstanceReceiveChapterRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceReceiveChapterRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceReceiveChapterRewardReq::CopyFrom(const TBeastInstanceReceiveChapterRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceReceiveChapterRewardReq::IsInitialized() const {

  return true;
}

void TBeastInstanceReceiveChapterRewardReq::Swap(TBeastInstanceReceiveChapterRewardReq* other) {
  if (other != this) {
    std::swap(chapterid_, other->chapterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceReceiveChapterRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceReceiveChapterRewardReq_descriptor_;
  metadata.reflection = TBeastInstanceReceiveChapterRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceReceiveChapterRewardRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceReceiveChapterRewardRsp::TBeastInstanceReceiveChapterRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceReceiveChapterRewardRsp)
}

void TBeastInstanceReceiveChapterRewardRsp::InitAsDefaultInstance() {
}

TBeastInstanceReceiveChapterRewardRsp::TBeastInstanceReceiveChapterRewardRsp(const TBeastInstanceReceiveChapterRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceReceiveChapterRewardRsp)
}

void TBeastInstanceReceiveChapterRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceReceiveChapterRewardRsp::~TBeastInstanceReceiveChapterRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceReceiveChapterRewardRsp)
  SharedDtor();
}

void TBeastInstanceReceiveChapterRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastInstanceReceiveChapterRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceReceiveChapterRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceReceiveChapterRewardRsp_descriptor_;
}

const TBeastInstanceReceiveChapterRewardRsp& TBeastInstanceReceiveChapterRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceReceiveChapterRewardRsp* TBeastInstanceReceiveChapterRewardRsp::default_instance_ = NULL;

TBeastInstanceReceiveChapterRewardRsp* TBeastInstanceReceiveChapterRewardRsp::New() const {
  return new TBeastInstanceReceiveChapterRewardRsp;
}

void TBeastInstanceReceiveChapterRewardRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceReceiveChapterRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceReceiveChapterRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceReceiveChapterRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceReceiveChapterRewardRsp)
  return false;
#undef DO_
}

void TBeastInstanceReceiveChapterRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceReceiveChapterRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceReceiveChapterRewardRsp)
}

::google::protobuf::uint8* TBeastInstanceReceiveChapterRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceReceiveChapterRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceReceiveChapterRewardRsp)
  return target;
}

int TBeastInstanceReceiveChapterRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceReceiveChapterRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceReceiveChapterRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceReceiveChapterRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceReceiveChapterRewardRsp::MergeFrom(const TBeastInstanceReceiveChapterRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceReceiveChapterRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceReceiveChapterRewardRsp::CopyFrom(const TBeastInstanceReceiveChapterRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceReceiveChapterRewardRsp::IsInitialized() const {

  return true;
}

void TBeastInstanceReceiveChapterRewardRsp::Swap(TBeastInstanceReceiveChapterRewardRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceReceiveChapterRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceReceiveChapterRewardRsp_descriptor_;
  metadata.reflection = TBeastInstanceReceiveChapterRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceBuyChallengeNumReq::kNumFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceBuyChallengeNumReq::TBeastInstanceBuyChallengeNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceBuyChallengeNumReq)
}

void TBeastInstanceBuyChallengeNumReq::InitAsDefaultInstance() {
}

TBeastInstanceBuyChallengeNumReq::TBeastInstanceBuyChallengeNumReq(const TBeastInstanceBuyChallengeNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceBuyChallengeNumReq)
}

void TBeastInstanceBuyChallengeNumReq::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceBuyChallengeNumReq::~TBeastInstanceBuyChallengeNumReq() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceBuyChallengeNumReq)
  SharedDtor();
}

void TBeastInstanceBuyChallengeNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastInstanceBuyChallengeNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceBuyChallengeNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceBuyChallengeNumReq_descriptor_;
}

const TBeastInstanceBuyChallengeNumReq& TBeastInstanceBuyChallengeNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceBuyChallengeNumReq* TBeastInstanceBuyChallengeNumReq::default_instance_ = NULL;

TBeastInstanceBuyChallengeNumReq* TBeastInstanceBuyChallengeNumReq::New() const {
  return new TBeastInstanceBuyChallengeNumReq;
}

void TBeastInstanceBuyChallengeNumReq::Clear() {
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceBuyChallengeNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceBuyChallengeNumReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceBuyChallengeNumReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceBuyChallengeNumReq)
  return false;
#undef DO_
}

void TBeastInstanceBuyChallengeNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceBuyChallengeNumReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceBuyChallengeNumReq)
}

::google::protobuf::uint8* TBeastInstanceBuyChallengeNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceBuyChallengeNumReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceBuyChallengeNumReq)
  return target;
}

int TBeastInstanceBuyChallengeNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceBuyChallengeNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceBuyChallengeNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceBuyChallengeNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceBuyChallengeNumReq::MergeFrom(const TBeastInstanceBuyChallengeNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceBuyChallengeNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceBuyChallengeNumReq::CopyFrom(const TBeastInstanceBuyChallengeNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceBuyChallengeNumReq::IsInitialized() const {

  return true;
}

void TBeastInstanceBuyChallengeNumReq::Swap(TBeastInstanceBuyChallengeNumReq* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceBuyChallengeNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceBuyChallengeNumReq_descriptor_;
  metadata.reflection = TBeastInstanceBuyChallengeNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceReceiveAchievementRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceReceiveAchievementRewardReq::TBeastInstanceReceiveAchievementRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceReceiveAchievementRewardReq)
}

void TBeastInstanceReceiveAchievementRewardReq::InitAsDefaultInstance() {
}

TBeastInstanceReceiveAchievementRewardReq::TBeastInstanceReceiveAchievementRewardReq(const TBeastInstanceReceiveAchievementRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceReceiveAchievementRewardReq)
}

void TBeastInstanceReceiveAchievementRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceReceiveAchievementRewardReq::~TBeastInstanceReceiveAchievementRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceReceiveAchievementRewardReq)
  SharedDtor();
}

void TBeastInstanceReceiveAchievementRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastInstanceReceiveAchievementRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceReceiveAchievementRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceReceiveAchievementRewardReq_descriptor_;
}

const TBeastInstanceReceiveAchievementRewardReq& TBeastInstanceReceiveAchievementRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceReceiveAchievementRewardReq* TBeastInstanceReceiveAchievementRewardReq::default_instance_ = NULL;

TBeastInstanceReceiveAchievementRewardReq* TBeastInstanceReceiveAchievementRewardReq::New() const {
  return new TBeastInstanceReceiveAchievementRewardReq;
}

void TBeastInstanceReceiveAchievementRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceReceiveAchievementRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceReceiveAchievementRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceReceiveAchievementRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceReceiveAchievementRewardReq)
  return false;
#undef DO_
}

void TBeastInstanceReceiveAchievementRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceReceiveAchievementRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceReceiveAchievementRewardReq)
}

::google::protobuf::uint8* TBeastInstanceReceiveAchievementRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceReceiveAchievementRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceReceiveAchievementRewardReq)
  return target;
}

int TBeastInstanceReceiveAchievementRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceReceiveAchievementRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceReceiveAchievementRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceReceiveAchievementRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceReceiveAchievementRewardReq::MergeFrom(const TBeastInstanceReceiveAchievementRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceReceiveAchievementRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceReceiveAchievementRewardReq::CopyFrom(const TBeastInstanceReceiveAchievementRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceReceiveAchievementRewardReq::IsInitialized() const {

  return true;
}

void TBeastInstanceReceiveAchievementRewardReq::Swap(TBeastInstanceReceiveAchievementRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceReceiveAchievementRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceReceiveAchievementRewardReq_descriptor_;
  metadata.reflection = TBeastInstanceReceiveAchievementRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceReceiveAchievementRewardRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceReceiveAchievementRewardRsp::TBeastInstanceReceiveAchievementRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceReceiveAchievementRewardRsp)
}

void TBeastInstanceReceiveAchievementRewardRsp::InitAsDefaultInstance() {
}

TBeastInstanceReceiveAchievementRewardRsp::TBeastInstanceReceiveAchievementRewardRsp(const TBeastInstanceReceiveAchievementRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceReceiveAchievementRewardRsp)
}

void TBeastInstanceReceiveAchievementRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceReceiveAchievementRewardRsp::~TBeastInstanceReceiveAchievementRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceReceiveAchievementRewardRsp)
  SharedDtor();
}

void TBeastInstanceReceiveAchievementRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastInstanceReceiveAchievementRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceReceiveAchievementRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceReceiveAchievementRewardRsp_descriptor_;
}

const TBeastInstanceReceiveAchievementRewardRsp& TBeastInstanceReceiveAchievementRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceReceiveAchievementRewardRsp* TBeastInstanceReceiveAchievementRewardRsp::default_instance_ = NULL;

TBeastInstanceReceiveAchievementRewardRsp* TBeastInstanceReceiveAchievementRewardRsp::New() const {
  return new TBeastInstanceReceiveAchievementRewardRsp;
}

void TBeastInstanceReceiveAchievementRewardRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceReceiveAchievementRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceReceiveAchievementRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceReceiveAchievementRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceReceiveAchievementRewardRsp)
  return false;
#undef DO_
}

void TBeastInstanceReceiveAchievementRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceReceiveAchievementRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceReceiveAchievementRewardRsp)
}

::google::protobuf::uint8* TBeastInstanceReceiveAchievementRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceReceiveAchievementRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceReceiveAchievementRewardRsp)
  return target;
}

int TBeastInstanceReceiveAchievementRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceReceiveAchievementRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceReceiveAchievementRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceReceiveAchievementRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceReceiveAchievementRewardRsp::MergeFrom(const TBeastInstanceReceiveAchievementRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceReceiveAchievementRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceReceiveAchievementRewardRsp::CopyFrom(const TBeastInstanceReceiveAchievementRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceReceiveAchievementRewardRsp::IsInitialized() const {

  return true;
}

void TBeastInstanceReceiveAchievementRewardRsp::Swap(TBeastInstanceReceiveAchievementRewardRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceReceiveAchievementRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceReceiveAchievementRewardRsp_descriptor_;
  metadata.reflection = TBeastInstanceReceiveAchievementRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastInstanceInfoNotify::kChapterInfoArrayFieldNumber;
const int TBeastInstanceInfoNotify::kChallengeNumFieldNumber;
const int TBeastInstanceInfoNotify::kBuyChallengeNumFieldNumber;
const int TBeastInstanceInfoNotify::kRefreshTimeFieldNumber;
#endif  // !_MSC_VER

TBeastInstanceInfoNotify::TBeastInstanceInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastInstanceInfoNotify)
}

void TBeastInstanceInfoNotify::InitAsDefaultInstance() {
}

TBeastInstanceInfoNotify::TBeastInstanceInfoNotify(const TBeastInstanceInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastInstanceInfoNotify)
}

void TBeastInstanceInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  challengenum_ = 0u;
  buychallengenum_ = 0u;
  refreshtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastInstanceInfoNotify::~TBeastInstanceInfoNotify() {
  // @@protoc_insertion_point(destructor:pb.TBeastInstanceInfoNotify)
  SharedDtor();
}

void TBeastInstanceInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastInstanceInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastInstanceInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastInstanceInfoNotify_descriptor_;
}

const TBeastInstanceInfoNotify& TBeastInstanceInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastInstance_2eproto();
  return *default_instance_;
}

TBeastInstanceInfoNotify* TBeastInstanceInfoNotify::default_instance_ = NULL;

TBeastInstanceInfoNotify* TBeastInstanceInfoNotify::New() const {
  return new TBeastInstanceInfoNotify;
}

void TBeastInstanceInfoNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBeastInstanceInfoNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(challengenum_, refreshtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  chapterinfoarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastInstanceInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastInstanceInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBeastInstanceChapterInfo ChapterInfoArray = 1;
      case 1: {
        if (tag == 10) {
         parse_ChapterInfoArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapterinfoarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ChapterInfoArray;
        if (input->ExpectTag(16)) goto parse_ChallengeNum;
        break;
      }

      // optional uint32 ChallengeNum = 2;
      case 2: {
        if (tag == 16) {
         parse_ChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengenum_)));
          set_has_challengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BuyChallengeNum;
        break;
      }

      // optional uint32 BuyChallengeNum = 3;
      case 3: {
        if (tag == 24) {
         parse_BuyChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buychallengenum_)));
          set_has_buychallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RefreshTime;
        break;
      }

      // optional uint64 RefreshTime = 4;
      case 4: {
        if (tag == 32) {
         parse_RefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastInstanceInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastInstanceInfoNotify)
  return false;
#undef DO_
}

void TBeastInstanceInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastInstanceInfoNotify)
  // repeated .pb.TBeastInstanceChapterInfo ChapterInfoArray = 1;
  for (int i = 0; i < this->chapterinfoarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chapterinfoarray(i), output);
  }

  // optional uint32 ChallengeNum = 2;
  if (has_challengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challengenum(), output);
  }

  // optional uint32 BuyChallengeNum = 3;
  if (has_buychallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buychallengenum(), output);
  }

  // optional uint64 RefreshTime = 4;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->refreshtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastInstanceInfoNotify)
}

::google::protobuf::uint8* TBeastInstanceInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastInstanceInfoNotify)
  // repeated .pb.TBeastInstanceChapterInfo ChapterInfoArray = 1;
  for (int i = 0; i < this->chapterinfoarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chapterinfoarray(i), target);
  }

  // optional uint32 ChallengeNum = 2;
  if (has_challengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->challengenum(), target);
  }

  // optional uint32 BuyChallengeNum = 3;
  if (has_buychallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buychallengenum(), target);
  }

  // optional uint64 RefreshTime = 4;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->refreshtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastInstanceInfoNotify)
  return target;
}

int TBeastInstanceInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 ChallengeNum = 2;
    if (has_challengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengenum());
    }

    // optional uint32 BuyChallengeNum = 3;
    if (has_buychallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buychallengenum());
    }

    // optional uint64 RefreshTime = 4;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refreshtime());
    }

  }
  // repeated .pb.TBeastInstanceChapterInfo ChapterInfoArray = 1;
  total_size += 1 * this->chapterinfoarray_size();
  for (int i = 0; i < this->chapterinfoarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapterinfoarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastInstanceInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastInstanceInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastInstanceInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastInstanceInfoNotify::MergeFrom(const TBeastInstanceInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapterinfoarray_.MergeFrom(from.chapterinfoarray_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_challengenum()) {
      set_challengenum(from.challengenum());
    }
    if (from.has_buychallengenum()) {
      set_buychallengenum(from.buychallengenum());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastInstanceInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastInstanceInfoNotify::CopyFrom(const TBeastInstanceInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastInstanceInfoNotify::IsInitialized() const {

  return true;
}

void TBeastInstanceInfoNotify::Swap(TBeastInstanceInfoNotify* other) {
  if (other != this) {
    chapterinfoarray_.Swap(&other->chapterinfoarray_);
    std::swap(challengenum_, other->challengenum_);
    std::swap(buychallengenum_, other->buychallengenum_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastInstanceInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastInstanceInfoNotify_descriptor_;
  metadata.reflection = TBeastInstanceInfoNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
