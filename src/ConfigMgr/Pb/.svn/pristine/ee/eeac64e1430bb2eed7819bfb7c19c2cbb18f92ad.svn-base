// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/SlgTeam.proto

#ifndef PROTOBUF_net_2fSlgTeam_2eproto__INCLUDED
#define PROTOBUF_net_2fSlgTeam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Common.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

class TTeamEquipItem;
class TTeamHero;
class TTeamInfo;
class TTeamGetInfoRsp;
class TTeamAddHeroReq;
class TTeamRemoveHeroReq;
class TTeamExchangeHeroReq;
class TTeamRaiseTroops;
class TTeamRaiseTroopsReq;
class TTeamRaiseTroopsRsp;
class TTeamCancelRaiseTroopsReq;
class TTeamCancelRaiseTroopsRsp;
class TTeamSpeedUpRaiseTroopsReq;
class TTeamSpeedUpRaiseTroopsRsp;
class TTeamEquipItemsReq;
class TTeamUpdateDataNotify;

enum ETeamStatus {
  TEAM_STANDBY = 0,
  TEAM_MARCH = 1,
  TEAM_RETURN = 2,
  TEAM_DEFENDING = 3,
  TEAM_COLLECTING = 4,
  TEAM_ASSEMBLYING = 5,
  TEAM_SEARCHING = 6
};
bool ETeamStatus_IsValid(int value);
const ETeamStatus ETeamStatus_MIN = TEAM_STANDBY;
const ETeamStatus ETeamStatus_MAX = TEAM_SEARCHING;
const int ETeamStatus_ARRAYSIZE = ETeamStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETeamStatus_descriptor();
inline const ::std::string& ETeamStatus_Name(ETeamStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETeamStatus_descriptor(), value);
}
inline bool ETeamStatus_Parse(
    const ::std::string& name, ETeamStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETeamStatus>(
    ETeamStatus_descriptor(), name, value);
}
enum ESpeedUpMode {
  SPEEDUP_GOLD = 1,
  SPEEDUP_ITEM = 2
};
bool ESpeedUpMode_IsValid(int value);
const ESpeedUpMode ESpeedUpMode_MIN = SPEEDUP_GOLD;
const ESpeedUpMode ESpeedUpMode_MAX = SPEEDUP_ITEM;
const int ESpeedUpMode_ARRAYSIZE = ESpeedUpMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESpeedUpMode_descriptor();
inline const ::std::string& ESpeedUpMode_Name(ESpeedUpMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESpeedUpMode_descriptor(), value);
}
inline bool ESpeedUpMode_Parse(
    const ::std::string& name, ESpeedUpMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESpeedUpMode>(
    ESpeedUpMode_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TTeamEquipItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgTeam.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTeamEquipItem : public ::google::protobuf::Message {
 public:
  TTeamEquipItem();
  virtual ~TTeamEquipItem();

  TTeamEquipItem(const TTeamEquipItem& from);

  inline TTeamEquipItem& operator=(const TTeamEquipItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTeamEquipItem& default_instance();

  void Swap(TTeamEquipItem* other);

  // implements Message ----------------------------------------------

  TTeamEquipItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTeamEquipItem& from);
  void MergeFrom(const TTeamEquipItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTeamEquipItem</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional .pb.TSimpleItem Item = 2;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTeamEquipItem</name>
  	<Function>
  		<name>item</name>
  		<replaceName>Item</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_item</name>
  		<replaceName>Item</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_item</name>
  		<replaceName>Item</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_item</name>
  		<replaceName>Item</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& item() const;
  inline ::pb::TSimpleItem* mutable_item();
  inline ::pb::TSimpleItem* release_item();
  inline void set_allocated_item(::pb::TSimpleItem* item);

  // @@protoc_insertion_point(class_scope:pb.TTeamEquipItem)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_item();
  inline void clear_has_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TSimpleItem* item_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

  void InitAsDefaultInstance();
  static TTeamEquipItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTeamHero</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgTeam.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTeamHero : public ::google::protobuf::Message {
 public:
  TTeamHero();
  virtual ~TTeamHero();

  TTeamHero(const TTeamHero& from);

  inline TTeamHero& operator=(const TTeamHero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTeamHero& default_instance();

  void Swap(TTeamHero* other);

  // implements Message ----------------------------------------------

  TTeamHero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTeamHero& from);
  void MergeFrom(const TTeamHero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTeamHero</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 Troops = 2;
  inline bool has_troops() const;
  inline void clear_troops();
  static const int kTroopsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTeamHero</name>
  	<Function>
  		<name>troops</name>
  		<replaceName>Troops</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_troops</name>
  		<replaceName>Troops</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_troops</name>
  		<replaceName>Troops</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 troops() const;
  inline void set_troops(::google::protobuf::uint32 value);

  // optional uint32 HurtTroops = 3;
  inline bool has_hurttroops() const;
  inline void clear_hurttroops();
  static const int kHurtTroopsFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTeamHero</name>
  	<Function>
  		<name>hurttroops</name>
  		<replaceName>HurtTroops</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hurttroops</name>
  		<replaceName>HurtTroops</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hurttroops</name>
  		<replaceName>HurtTroops</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hurttroops() const;
  inline void set_hurttroops(::google::protobuf::uint32 value);

  // optional uint32 RaiseTroops = 4;
  inline bool has_raisetroops() const;
  inline void clear_raisetroops();
  static const int kRaiseTroopsFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTeamHero</name>
  	<Function>
  		<name>raisetroops</name>
  		<replaceName>RaiseTroops</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_raisetroops</name>
  		<replaceName>RaiseTroops</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_raisetroops</name>
  		<replaceName>RaiseTroops</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 raisetroops() const;
  inline void set_raisetroops(::google::protobuf::uint32 value);

  // optional uint64 StartTime = 5;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TTeamHero</name>
  	<Function>
  		<name>starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 starttime() const;
  inline void set_starttime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 6;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TTeamHero</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTeamHero)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_troops();
  inline void clear_has_troops();
  inline void set_has_hurttroops();
  inline void clear_has_hurttroops();
  inline void set_has_raisetroops();
  inline void clear_has_raisetroops();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 troops_;
  ::google::protobuf::uint32 hurttroops_;
  ::google::protobuf::uint32 raisetroops_;
  ::google::protobuf::uint64 starttime_;
  ::google::protobuf::uint64 endtime_;
  friend void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

  void InitAsDefaultInstance();
  static TTeamHero* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTeamInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgTeam.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTeamInfo : public ::google::protobuf::Message {
 public:
  TTeamInfo();
  virtual ~TTeamInfo();

  TTeamInfo(const TTeamInfo& from);

  inline TTeamInfo& operator=(const TTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTeamInfo& default_instance();

  void Swap(TTeamInfo* other);

  // implements Message ----------------------------------------------

  TTeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTeamInfo& from);
  void MergeFrom(const TTeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTeamInfo</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional .pb.ETeamStatus TeamStatus = 2;
  inline bool has_teamstatus() const;
  inline void clear_teamstatus();
  static const int kTeamStatusFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTeamInfo</name>
  	<Function>
  		<name>teamstatus</name>
  		<replaceName>TeamStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamstatus</name>
  		<replaceName>TeamStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamstatus</name>
  		<replaceName>TeamStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ETeamStatus teamstatus() const;
  inline void set_teamstatus(::pb::ETeamStatus value);

  // optional uint32 GridIndex = 3;
  inline bool has_gridindex() const;
  inline void clear_gridindex();
  static const int kGridIndexFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTeamInfo</name>
  	<Function>
  		<name>gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 gridindex() const;
  inline void set_gridindex(::google::protobuf::uint32 value);

  // repeated .pb.TTeamHero HeroArr = 4;
  inline int heroarr_size() const;
  inline void clear_heroarr();
  static const int kHeroArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTeamInfo</name>
  	<Function>
  		<name>heroarr</name>
  		<replaceName>HeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_heroarr</name>
  		<replaceName>HeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_heroarr</name>
  		<replaceName>HeroArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_heroarr</name>
  		<replaceName>HeroArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>heroarr_size</name>
  		<replaceName>HeroArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTeamHero& heroarr(int index) const;
  inline ::pb::TTeamHero* mutable_heroarr(int index);
  inline ::pb::TTeamHero* add_heroarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTeamHero >&
      heroarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTeamHero >*
      mutable_heroarr();

  // repeated .pb.TTeamEquipItem ItemArr = 5;
  inline int itemarr_size() const;
  inline void clear_itemarr();
  static const int kItemArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TTeamInfo</name>
  	<Function>
  		<name>itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>itemarr_size</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTeamEquipItem& itemarr(int index) const;
  inline ::pb::TTeamEquipItem* mutable_itemarr(int index);
  inline ::pb::TTeamEquipItem* add_itemarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTeamEquipItem >&
      itemarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTeamEquipItem >*
      mutable_itemarr();

  // @@protoc_insertion_point(class_scope:pb.TTeamInfo)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_teamstatus();
  inline void clear_has_teamstatus();
  inline void set_has_gridindex();
  inline void clear_has_gridindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teamid_;
  int teamstatus_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTeamHero > heroarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTeamEquipItem > itemarr_;
  ::google::protobuf::uint32 gridindex_;
  friend void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

  void InitAsDefaultInstance();
  static TTeamInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTeamGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgTeam.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTeamGetInfoRsp : public ::google::protobuf::Message {
 public:
  TTeamGetInfoRsp();
  virtual ~TTeamGetInfoRsp();

  TTeamGetInfoRsp(const TTeamGetInfoRsp& from);

  inline TTeamGetInfoRsp& operator=(const TTeamGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTeamGetInfoRsp& default_instance();

  void Swap(TTeamGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TTeamGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTeamGetInfoRsp& from);
  void MergeFrom(const TTeamGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTeamInfo TeamArr = 1;
  inline int teamarr_size() const;
  inline void clear_teamarr();
  static const int kTeamArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTeamGetInfoRsp</name>
  	<Function>
  		<name>teamarr</name>
  		<replaceName>TeamArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_teamarr</name>
  		<replaceName>TeamArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_teamarr</name>
  		<replaceName>TeamArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamarr</name>
  		<replaceName>TeamArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>teamarr_size</name>
  		<replaceName>TeamArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTeamInfo& teamarr(int index) const;
  inline ::pb::TTeamInfo* mutable_teamarr(int index);
  inline ::pb::TTeamInfo* add_teamarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTeamInfo >&
      teamarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTeamInfo >*
      mutable_teamarr();

  // @@protoc_insertion_point(class_scope:pb.TTeamGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTeamInfo > teamarr_;
  friend void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

  void InitAsDefaultInstance();
  static TTeamGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTeamAddHeroReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgTeam.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTeamAddHeroReq : public ::google::protobuf::Message {
 public:
  TTeamAddHeroReq();
  virtual ~TTeamAddHeroReq();

  TTeamAddHeroReq(const TTeamAddHeroReq& from);

  inline TTeamAddHeroReq& operator=(const TTeamAddHeroReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTeamAddHeroReq& default_instance();

  void Swap(TTeamAddHeroReq* other);

  // implements Message ----------------------------------------------

  TTeamAddHeroReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTeamAddHeroReq& from);
  void MergeFrom(const TTeamAddHeroReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTeamAddHeroReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 Hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTeamAddHeroReq</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTeamAddHeroReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_hid();
  inline void clear_has_hid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

  void InitAsDefaultInstance();
  static TTeamAddHeroReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTeamRemoveHeroReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgTeam.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTeamRemoveHeroReq : public ::google::protobuf::Message {
 public:
  TTeamRemoveHeroReq();
  virtual ~TTeamRemoveHeroReq();

  TTeamRemoveHeroReq(const TTeamRemoveHeroReq& from);

  inline TTeamRemoveHeroReq& operator=(const TTeamRemoveHeroReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTeamRemoveHeroReq& default_instance();

  void Swap(TTeamRemoveHeroReq* other);

  // implements Message ----------------------------------------------

  TTeamRemoveHeroReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTeamRemoveHeroReq& from);
  void MergeFrom(const TTeamRemoveHeroReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTeamRemoveHeroReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 Hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTeamRemoveHeroReq</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTeamRemoveHeroReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_hid();
  inline void clear_has_hid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

  void InitAsDefaultInstance();
  static TTeamRemoveHeroReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTeamExchangeHeroReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgTeam.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTeamExchangeHeroReq : public ::google::protobuf::Message {
 public:
  TTeamExchangeHeroReq();
  virtual ~TTeamExchangeHeroReq();

  TTeamExchangeHeroReq(const TTeamExchangeHeroReq& from);

  inline TTeamExchangeHeroReq& operator=(const TTeamExchangeHeroReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTeamExchangeHeroReq& default_instance();

  void Swap(TTeamExchangeHeroReq* other);

  // implements Message ----------------------------------------------

  TTeamExchangeHeroReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTeamExchangeHeroReq& from);
  void MergeFrom(const TTeamExchangeHeroReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SrcTeamId = 1;
  inline bool has_srcteamid() const;
  inline void clear_srcteamid();
  static const int kSrcTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTeamExchangeHeroReq</name>
  	<Function>
  		<name>srcteamid</name>
  		<replaceName>SrcTeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_srcteamid</name>
  		<replaceName>SrcTeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_srcteamid</name>
  		<replaceName>SrcTeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 srcteamid() const;
  inline void set_srcteamid(::google::protobuf::uint32 value);

  // optional uint32 SrcHid = 2;
  inline bool has_srchid() const;
  inline void clear_srchid();
  static const int kSrcHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTeamExchangeHeroReq</name>
  	<Function>
  		<name>srchid</name>
  		<replaceName>SrcHid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_srchid</name>
  		<replaceName>SrcHid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_srchid</name>
  		<replaceName>SrcHid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 srchid() const;
  inline void set_srchid(::google::protobuf::uint32 value);

  // optional uint32 DesTeamId = 3;
  inline bool has_desteamid() const;
  inline void clear_desteamid();
  static const int kDesTeamIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTeamExchangeHeroReq</name>
  	<Function>
  		<name>desteamid</name>
  		<replaceName>DesTeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_desteamid</name>
  		<replaceName>DesTeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_desteamid</name>
  		<replaceName>DesTeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 desteamid() const;
  inline void set_desteamid(::google::protobuf::uint32 value);

  // optional uint32 DesHid = 4;
  inline bool has_deshid() const;
  inline void clear_deshid();
  static const int kDesHidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTeamExchangeHeroReq</name>
  	<Function>
  		<name>deshid</name>
  		<replaceName>DesHid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_deshid</name>
  		<replaceName>DesHid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_deshid</name>
  		<replaceName>DesHid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 deshid() const;
  inline void set_deshid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTeamExchangeHeroReq)
 private:
  inline void set_has_srcteamid();
  inline void clear_has_srcteamid();
  inline void set_has_srchid();
  inline void clear_has_srchid();
  inline void set_has_desteamid();
  inline void clear_has_desteamid();
  inline void set_has_deshid();
  inline void clear_has_deshid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 srcteamid_;
  ::google::protobuf::uint32 srchid_;
  ::google::protobuf::uint32 desteamid_;
  ::google::protobuf::uint32 deshid_;
  friend void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

  void InitAsDefaultInstance();
  static TTeamExchangeHeroReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTeamRaiseTroops</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgTeam.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTeamRaiseTroops : public ::google::protobuf::Message {
 public:
  TTeamRaiseTroops();
  virtual ~TTeamRaiseTroops();

  TTeamRaiseTroops(const TTeamRaiseTroops& from);

  inline TTeamRaiseTroops& operator=(const TTeamRaiseTroops& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTeamRaiseTroops& default_instance();

  void Swap(TTeamRaiseTroops* other);

  // implements Message ----------------------------------------------

  TTeamRaiseTroops* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTeamRaiseTroops& from);
  void MergeFrom(const TTeamRaiseTroops& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTeamRaiseTroops</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 AddNum = 2;
  inline bool has_addnum() const;
  inline void clear_addnum();
  static const int kAddNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTeamRaiseTroops</name>
  	<Function>
  		<name>addnum</name>
  		<replaceName>AddNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_addnum</name>
  		<replaceName>AddNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_addnum</name>
  		<replaceName>AddNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 addnum() const;
  inline void set_addnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTeamRaiseTroops)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_addnum();
  inline void clear_has_addnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 addnum_;
  friend void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

  void InitAsDefaultInstance();
  static TTeamRaiseTroops* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTeamRaiseTroopsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgTeam.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTeamRaiseTroopsReq : public ::google::protobuf::Message {
 public:
  TTeamRaiseTroopsReq();
  virtual ~TTeamRaiseTroopsReq();

  TTeamRaiseTroopsReq(const TTeamRaiseTroopsReq& from);

  inline TTeamRaiseTroopsReq& operator=(const TTeamRaiseTroopsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTeamRaiseTroopsReq& default_instance();

  void Swap(TTeamRaiseTroopsReq* other);

  // implements Message ----------------------------------------------

  TTeamRaiseTroopsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTeamRaiseTroopsReq& from);
  void MergeFrom(const TTeamRaiseTroopsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTeamRaiseTroopsReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // repeated .pb.TTeamRaiseTroops AddArr = 2;
  inline int addarr_size() const;
  inline void clear_addarr();
  static const int kAddArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTeamRaiseTroopsReq</name>
  	<Function>
  		<name>addarr</name>
  		<replaceName>AddArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_addarr</name>
  		<replaceName>AddArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_addarr</name>
  		<replaceName>AddArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_addarr</name>
  		<replaceName>AddArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>addarr_size</name>
  		<replaceName>AddArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTeamRaiseTroops& addarr(int index) const;
  inline ::pb::TTeamRaiseTroops* mutable_addarr(int index);
  inline ::pb::TTeamRaiseTroops* add_addarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTeamRaiseTroops >&
      addarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTeamRaiseTroops >*
      mutable_addarr();

  // @@protoc_insertion_point(class_scope:pb.TTeamRaiseTroopsReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTeamRaiseTroops > addarr_;
  ::google::protobuf::uint32 teamid_;
  friend void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

  void InitAsDefaultInstance();
  static TTeamRaiseTroopsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTeamRaiseTroopsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgTeam.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTeamRaiseTroopsRsp : public ::google::protobuf::Message {
 public:
  TTeamRaiseTroopsRsp();
  virtual ~TTeamRaiseTroopsRsp();

  TTeamRaiseTroopsRsp(const TTeamRaiseTroopsRsp& from);

  inline TTeamRaiseTroopsRsp& operator=(const TTeamRaiseTroopsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTeamRaiseTroopsRsp& default_instance();

  void Swap(TTeamRaiseTroopsRsp* other);

  // implements Message ----------------------------------------------

  TTeamRaiseTroopsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTeamRaiseTroopsRsp& from);
  void MergeFrom(const TTeamRaiseTroopsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTeamHero HeroArr = 1;
  inline int heroarr_size() const;
  inline void clear_heroarr();
  static const int kHeroArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTeamRaiseTroopsRsp</name>
  	<Function>
  		<name>heroarr</name>
  		<replaceName>HeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_heroarr</name>
  		<replaceName>HeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_heroarr</name>
  		<replaceName>HeroArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_heroarr</name>
  		<replaceName>HeroArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>heroarr_size</name>
  		<replaceName>HeroArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTeamHero& heroarr(int index) const;
  inline ::pb::TTeamHero* mutable_heroarr(int index);
  inline ::pb::TTeamHero* add_heroarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTeamHero >&
      heroarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTeamHero >*
      mutable_heroarr();

  // @@protoc_insertion_point(class_scope:pb.TTeamRaiseTroopsRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTeamHero > heroarr_;
  friend void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

  void InitAsDefaultInstance();
  static TTeamRaiseTroopsRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTeamCancelRaiseTroopsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgTeam.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTeamCancelRaiseTroopsReq : public ::google::protobuf::Message {
 public:
  TTeamCancelRaiseTroopsReq();
  virtual ~TTeamCancelRaiseTroopsReq();

  TTeamCancelRaiseTroopsReq(const TTeamCancelRaiseTroopsReq& from);

  inline TTeamCancelRaiseTroopsReq& operator=(const TTeamCancelRaiseTroopsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTeamCancelRaiseTroopsReq& default_instance();

  void Swap(TTeamCancelRaiseTroopsReq* other);

  // implements Message ----------------------------------------------

  TTeamCancelRaiseTroopsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTeamCancelRaiseTroopsReq& from);
  void MergeFrom(const TTeamCancelRaiseTroopsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTeamCancelRaiseTroopsReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 Hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTeamCancelRaiseTroopsReq</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTeamCancelRaiseTroopsReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_hid();
  inline void clear_has_hid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

  void InitAsDefaultInstance();
  static TTeamCancelRaiseTroopsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTeamCancelRaiseTroopsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgTeam.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTeamCancelRaiseTroopsRsp : public ::google::protobuf::Message {
 public:
  TTeamCancelRaiseTroopsRsp();
  virtual ~TTeamCancelRaiseTroopsRsp();

  TTeamCancelRaiseTroopsRsp(const TTeamCancelRaiseTroopsRsp& from);

  inline TTeamCancelRaiseTroopsRsp& operator=(const TTeamCancelRaiseTroopsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTeamCancelRaiseTroopsRsp& default_instance();

  void Swap(TTeamCancelRaiseTroopsRsp* other);

  // implements Message ----------------------------------------------

  TTeamCancelRaiseTroopsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTeamCancelRaiseTroopsRsp& from);
  void MergeFrom(const TTeamCancelRaiseTroopsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TTeamHero Hero = 1;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTeamCancelRaiseTroopsRsp</name>
  	<Function>
  		<name>hero</name>
  		<replaceName>Hero</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hero</name>
  		<replaceName>Hero</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_hero</name>
  		<replaceName>Hero</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hero</name>
  		<replaceName>Hero</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTeamHero& hero() const;
  inline ::pb::TTeamHero* mutable_hero();
  inline ::pb::TTeamHero* release_hero();
  inline void set_allocated_hero(::pb::TTeamHero* hero);

  // @@protoc_insertion_point(class_scope:pb.TTeamCancelRaiseTroopsRsp)
 private:
  inline void set_has_hero();
  inline void clear_has_hero();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TTeamHero* hero_;
  friend void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

  void InitAsDefaultInstance();
  static TTeamCancelRaiseTroopsRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTeamSpeedUpRaiseTroopsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgTeam.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTeamSpeedUpRaiseTroopsReq : public ::google::protobuf::Message {
 public:
  TTeamSpeedUpRaiseTroopsReq();
  virtual ~TTeamSpeedUpRaiseTroopsReq();

  TTeamSpeedUpRaiseTroopsReq(const TTeamSpeedUpRaiseTroopsReq& from);

  inline TTeamSpeedUpRaiseTroopsReq& operator=(const TTeamSpeedUpRaiseTroopsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTeamSpeedUpRaiseTroopsReq& default_instance();

  void Swap(TTeamSpeedUpRaiseTroopsReq* other);

  // implements Message ----------------------------------------------

  TTeamSpeedUpRaiseTroopsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTeamSpeedUpRaiseTroopsReq& from);
  void MergeFrom(const TTeamSpeedUpRaiseTroopsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTeamSpeedUpRaiseTroopsReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 Hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTeamSpeedUpRaiseTroopsReq</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional .pb.ESpeedUpMode Mode = 3;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTeamSpeedUpRaiseTroopsReq</name>
  	<Function>
  		<name>mode</name>
  		<replaceName>Mode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mode</name>
  		<replaceName>Mode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mode</name>
  		<replaceName>Mode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ESpeedUpMode mode() const;
  inline void set_mode(::pb::ESpeedUpMode value);

  // optional .pb.TSimpleItem Item = 4;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTeamSpeedUpRaiseTroopsReq</name>
  	<Function>
  		<name>item</name>
  		<replaceName>Item</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_item</name>
  		<replaceName>Item</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_item</name>
  		<replaceName>Item</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_item</name>
  		<replaceName>Item</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& item() const;
  inline ::pb::TSimpleItem* mutable_item();
  inline ::pb::TSimpleItem* release_item();
  inline void set_allocated_item(::pb::TSimpleItem* item);

  // @@protoc_insertion_point(class_scope:pb.TTeamSpeedUpRaiseTroopsReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_item();
  inline void clear_has_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 hid_;
  ::pb::TSimpleItem* item_;
  int mode_;
  friend void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

  void InitAsDefaultInstance();
  static TTeamSpeedUpRaiseTroopsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTeamSpeedUpRaiseTroopsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgTeam.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTeamSpeedUpRaiseTroopsRsp : public ::google::protobuf::Message {
 public:
  TTeamSpeedUpRaiseTroopsRsp();
  virtual ~TTeamSpeedUpRaiseTroopsRsp();

  TTeamSpeedUpRaiseTroopsRsp(const TTeamSpeedUpRaiseTroopsRsp& from);

  inline TTeamSpeedUpRaiseTroopsRsp& operator=(const TTeamSpeedUpRaiseTroopsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTeamSpeedUpRaiseTroopsRsp& default_instance();

  void Swap(TTeamSpeedUpRaiseTroopsRsp* other);

  // implements Message ----------------------------------------------

  TTeamSpeedUpRaiseTroopsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTeamSpeedUpRaiseTroopsRsp& from);
  void MergeFrom(const TTeamSpeedUpRaiseTroopsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TTeamHero Hero = 1;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTeamSpeedUpRaiseTroopsRsp</name>
  	<Function>
  		<name>hero</name>
  		<replaceName>Hero</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hero</name>
  		<replaceName>Hero</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_hero</name>
  		<replaceName>Hero</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hero</name>
  		<replaceName>Hero</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTeamHero& hero() const;
  inline ::pb::TTeamHero* mutable_hero();
  inline ::pb::TTeamHero* release_hero();
  inline void set_allocated_hero(::pb::TTeamHero* hero);

  // @@protoc_insertion_point(class_scope:pb.TTeamSpeedUpRaiseTroopsRsp)
 private:
  inline void set_has_hero();
  inline void clear_has_hero();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TTeamHero* hero_;
  friend void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

  void InitAsDefaultInstance();
  static TTeamSpeedUpRaiseTroopsRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTeamEquipItemsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgTeam.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTeamEquipItemsReq : public ::google::protobuf::Message {
 public:
  TTeamEquipItemsReq();
  virtual ~TTeamEquipItemsReq();

  TTeamEquipItemsReq(const TTeamEquipItemsReq& from);

  inline TTeamEquipItemsReq& operator=(const TTeamEquipItemsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTeamEquipItemsReq& default_instance();

  void Swap(TTeamEquipItemsReq* other);

  // implements Message ----------------------------------------------

  TTeamEquipItemsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTeamEquipItemsReq& from);
  void MergeFrom(const TTeamEquipItemsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTeamEquipItemsReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // repeated .pb.TTeamEquipItem ItemArr = 2;
  inline int itemarr_size() const;
  inline void clear_itemarr();
  static const int kItemArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTeamEquipItemsReq</name>
  	<Function>
  		<name>itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>itemarr_size</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTeamEquipItem& itemarr(int index) const;
  inline ::pb::TTeamEquipItem* mutable_itemarr(int index);
  inline ::pb::TTeamEquipItem* add_itemarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTeamEquipItem >&
      itemarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTeamEquipItem >*
      mutable_itemarr();

  // @@protoc_insertion_point(class_scope:pb.TTeamEquipItemsReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTeamEquipItem > itemarr_;
  ::google::protobuf::uint32 teamid_;
  friend void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

  void InitAsDefaultInstance();
  static TTeamEquipItemsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTeamUpdateDataNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgTeam.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTeamUpdateDataNotify : public ::google::protobuf::Message {
 public:
  TTeamUpdateDataNotify();
  virtual ~TTeamUpdateDataNotify();

  TTeamUpdateDataNotify(const TTeamUpdateDataNotify& from);

  inline TTeamUpdateDataNotify& operator=(const TTeamUpdateDataNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTeamUpdateDataNotify& default_instance();

  void Swap(TTeamUpdateDataNotify* other);

  // implements Message ----------------------------------------------

  TTeamUpdateDataNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTeamUpdateDataNotify& from);
  void MergeFrom(const TTeamUpdateDataNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTeamInfo TeamArr = 1;
  inline int teamarr_size() const;
  inline void clear_teamarr();
  static const int kTeamArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTeamUpdateDataNotify</name>
  	<Function>
  		<name>teamarr</name>
  		<replaceName>TeamArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_teamarr</name>
  		<replaceName>TeamArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_teamarr</name>
  		<replaceName>TeamArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamarr</name>
  		<replaceName>TeamArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>teamarr_size</name>
  		<replaceName>TeamArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTeamInfo& teamarr(int index) const;
  inline ::pb::TTeamInfo* mutable_teamarr(int index);
  inline ::pb::TTeamInfo* add_teamarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTeamInfo >&
      teamarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTeamInfo >*
      mutable_teamarr();

  // @@protoc_insertion_point(class_scope:pb.TTeamUpdateDataNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTeamInfo > teamarr_;
  friend void  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgTeam_2eproto();

  void InitAsDefaultInstance();
  static TTeamUpdateDataNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TTeamEquipItem

// optional uint32 Pos = 1;
inline bool TTeamEquipItem::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTeamEquipItem::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTeamEquipItem::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTeamEquipItem::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TTeamEquipItem::pos() const {
  // @@protoc_insertion_point(field_get:pb.TTeamEquipItem.Pos)
  return pos_;
}
inline void TTeamEquipItem::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamEquipItem.Pos)
}

// optional .pb.TSimpleItem Item = 2;
inline bool TTeamEquipItem::has_item() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTeamEquipItem::set_has_item() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTeamEquipItem::clear_has_item() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTeamEquipItem::clear_item() {
  if (item_ != NULL) item_->::pb::TSimpleItem::Clear();
  clear_has_item();
}
inline const ::pb::TSimpleItem& TTeamEquipItem::item() const {
  // @@protoc_insertion_point(field_get:pb.TTeamEquipItem.Item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::pb::TSimpleItem* TTeamEquipItem::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::pb::TSimpleItem;
  // @@protoc_insertion_point(field_mutable:pb.TTeamEquipItem.Item)
  return item_;
}
inline ::pb::TSimpleItem* TTeamEquipItem::release_item() {
  clear_has_item();
  ::pb::TSimpleItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline void TTeamEquipItem::set_allocated_item(::pb::TSimpleItem* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTeamEquipItem.Item)
}

// -------------------------------------------------------------------

// TTeamHero

// optional uint32 Hid = 1;
inline bool TTeamHero::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTeamHero::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTeamHero::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTeamHero::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TTeamHero::hid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamHero.Hid)
  return hid_;
}
inline void TTeamHero::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamHero.Hid)
}

// optional uint32 Troops = 2;
inline bool TTeamHero::has_troops() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTeamHero::set_has_troops() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTeamHero::clear_has_troops() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTeamHero::clear_troops() {
  troops_ = 0u;
  clear_has_troops();
}
inline ::google::protobuf::uint32 TTeamHero::troops() const {
  // @@protoc_insertion_point(field_get:pb.TTeamHero.Troops)
  return troops_;
}
inline void TTeamHero::set_troops(::google::protobuf::uint32 value) {
  set_has_troops();
  troops_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamHero.Troops)
}

// optional uint32 HurtTroops = 3;
inline bool TTeamHero::has_hurttroops() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTeamHero::set_has_hurttroops() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTeamHero::clear_has_hurttroops() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTeamHero::clear_hurttroops() {
  hurttroops_ = 0u;
  clear_has_hurttroops();
}
inline ::google::protobuf::uint32 TTeamHero::hurttroops() const {
  // @@protoc_insertion_point(field_get:pb.TTeamHero.HurtTroops)
  return hurttroops_;
}
inline void TTeamHero::set_hurttroops(::google::protobuf::uint32 value) {
  set_has_hurttroops();
  hurttroops_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamHero.HurtTroops)
}

// optional uint32 RaiseTroops = 4;
inline bool TTeamHero::has_raisetroops() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTeamHero::set_has_raisetroops() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTeamHero::clear_has_raisetroops() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTeamHero::clear_raisetroops() {
  raisetroops_ = 0u;
  clear_has_raisetroops();
}
inline ::google::protobuf::uint32 TTeamHero::raisetroops() const {
  // @@protoc_insertion_point(field_get:pb.TTeamHero.RaiseTroops)
  return raisetroops_;
}
inline void TTeamHero::set_raisetroops(::google::protobuf::uint32 value) {
  set_has_raisetroops();
  raisetroops_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamHero.RaiseTroops)
}

// optional uint64 StartTime = 5;
inline bool TTeamHero::has_starttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TTeamHero::set_has_starttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TTeamHero::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TTeamHero::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::uint64 TTeamHero::starttime() const {
  // @@protoc_insertion_point(field_get:pb.TTeamHero.StartTime)
  return starttime_;
}
inline void TTeamHero::set_starttime(::google::protobuf::uint64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamHero.StartTime)
}

// optional uint64 EndTime = 6;
inline bool TTeamHero::has_endtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TTeamHero::set_has_endtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TTeamHero::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TTeamHero::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TTeamHero::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TTeamHero.EndTime)
  return endtime_;
}
inline void TTeamHero::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamHero.EndTime)
}

// -------------------------------------------------------------------

// TTeamInfo

// optional uint32 TeamId = 1;
inline bool TTeamInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTeamInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTeamInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTeamInfo::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TTeamInfo::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamInfo.TeamId)
  return teamid_;
}
inline void TTeamInfo::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamInfo.TeamId)
}

// optional .pb.ETeamStatus TeamStatus = 2;
inline bool TTeamInfo::has_teamstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTeamInfo::set_has_teamstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTeamInfo::clear_has_teamstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTeamInfo::clear_teamstatus() {
  teamstatus_ = 0;
  clear_has_teamstatus();
}
inline ::pb::ETeamStatus TTeamInfo::teamstatus() const {
  // @@protoc_insertion_point(field_get:pb.TTeamInfo.TeamStatus)
  return static_cast< ::pb::ETeamStatus >(teamstatus_);
}
inline void TTeamInfo::set_teamstatus(::pb::ETeamStatus value) {
  assert(::pb::ETeamStatus_IsValid(value));
  set_has_teamstatus();
  teamstatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamInfo.TeamStatus)
}

// optional uint32 GridIndex = 3;
inline bool TTeamInfo::has_gridindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTeamInfo::set_has_gridindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTeamInfo::clear_has_gridindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTeamInfo::clear_gridindex() {
  gridindex_ = 0u;
  clear_has_gridindex();
}
inline ::google::protobuf::uint32 TTeamInfo::gridindex() const {
  // @@protoc_insertion_point(field_get:pb.TTeamInfo.GridIndex)
  return gridindex_;
}
inline void TTeamInfo::set_gridindex(::google::protobuf::uint32 value) {
  set_has_gridindex();
  gridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamInfo.GridIndex)
}

// repeated .pb.TTeamHero HeroArr = 4;
inline int TTeamInfo::heroarr_size() const {
  return heroarr_.size();
}
inline void TTeamInfo::clear_heroarr() {
  heroarr_.Clear();
}
inline const ::pb::TTeamHero& TTeamInfo::heroarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTeamInfo.HeroArr)
  return heroarr_.Get(index);
}
inline ::pb::TTeamHero* TTeamInfo::mutable_heroarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTeamInfo.HeroArr)
  return heroarr_.Mutable(index);
}
inline ::pb::TTeamHero* TTeamInfo::add_heroarr() {
  // @@protoc_insertion_point(field_add:pb.TTeamInfo.HeroArr)
  return heroarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTeamHero >&
TTeamInfo::heroarr() const {
  // @@protoc_insertion_point(field_list:pb.TTeamInfo.HeroArr)
  return heroarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTeamHero >*
TTeamInfo::mutable_heroarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTeamInfo.HeroArr)
  return &heroarr_;
}

// repeated .pb.TTeamEquipItem ItemArr = 5;
inline int TTeamInfo::itemarr_size() const {
  return itemarr_.size();
}
inline void TTeamInfo::clear_itemarr() {
  itemarr_.Clear();
}
inline const ::pb::TTeamEquipItem& TTeamInfo::itemarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTeamInfo.ItemArr)
  return itemarr_.Get(index);
}
inline ::pb::TTeamEquipItem* TTeamInfo::mutable_itemarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTeamInfo.ItemArr)
  return itemarr_.Mutable(index);
}
inline ::pb::TTeamEquipItem* TTeamInfo::add_itemarr() {
  // @@protoc_insertion_point(field_add:pb.TTeamInfo.ItemArr)
  return itemarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTeamEquipItem >&
TTeamInfo::itemarr() const {
  // @@protoc_insertion_point(field_list:pb.TTeamInfo.ItemArr)
  return itemarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTeamEquipItem >*
TTeamInfo::mutable_itemarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTeamInfo.ItemArr)
  return &itemarr_;
}

// -------------------------------------------------------------------

// TTeamGetInfoRsp

// repeated .pb.TTeamInfo TeamArr = 1;
inline int TTeamGetInfoRsp::teamarr_size() const {
  return teamarr_.size();
}
inline void TTeamGetInfoRsp::clear_teamarr() {
  teamarr_.Clear();
}
inline const ::pb::TTeamInfo& TTeamGetInfoRsp::teamarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTeamGetInfoRsp.TeamArr)
  return teamarr_.Get(index);
}
inline ::pb::TTeamInfo* TTeamGetInfoRsp::mutable_teamarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTeamGetInfoRsp.TeamArr)
  return teamarr_.Mutable(index);
}
inline ::pb::TTeamInfo* TTeamGetInfoRsp::add_teamarr() {
  // @@protoc_insertion_point(field_add:pb.TTeamGetInfoRsp.TeamArr)
  return teamarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTeamInfo >&
TTeamGetInfoRsp::teamarr() const {
  // @@protoc_insertion_point(field_list:pb.TTeamGetInfoRsp.TeamArr)
  return teamarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTeamInfo >*
TTeamGetInfoRsp::mutable_teamarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTeamGetInfoRsp.TeamArr)
  return &teamarr_;
}

// -------------------------------------------------------------------

// TTeamAddHeroReq

// optional uint32 TeamId = 1;
inline bool TTeamAddHeroReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTeamAddHeroReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTeamAddHeroReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTeamAddHeroReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TTeamAddHeroReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamAddHeroReq.TeamId)
  return teamid_;
}
inline void TTeamAddHeroReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamAddHeroReq.TeamId)
}

// optional uint32 Hid = 2;
inline bool TTeamAddHeroReq::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTeamAddHeroReq::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTeamAddHeroReq::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTeamAddHeroReq::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TTeamAddHeroReq::hid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamAddHeroReq.Hid)
  return hid_;
}
inline void TTeamAddHeroReq::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamAddHeroReq.Hid)
}

// -------------------------------------------------------------------

// TTeamRemoveHeroReq

// optional uint32 TeamId = 1;
inline bool TTeamRemoveHeroReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTeamRemoveHeroReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTeamRemoveHeroReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTeamRemoveHeroReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TTeamRemoveHeroReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamRemoveHeroReq.TeamId)
  return teamid_;
}
inline void TTeamRemoveHeroReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamRemoveHeroReq.TeamId)
}

// optional uint32 Hid = 2;
inline bool TTeamRemoveHeroReq::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTeamRemoveHeroReq::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTeamRemoveHeroReq::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTeamRemoveHeroReq::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TTeamRemoveHeroReq::hid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamRemoveHeroReq.Hid)
  return hid_;
}
inline void TTeamRemoveHeroReq::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamRemoveHeroReq.Hid)
}

// -------------------------------------------------------------------

// TTeamExchangeHeroReq

// optional uint32 SrcTeamId = 1;
inline bool TTeamExchangeHeroReq::has_srcteamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTeamExchangeHeroReq::set_has_srcteamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTeamExchangeHeroReq::clear_has_srcteamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTeamExchangeHeroReq::clear_srcteamid() {
  srcteamid_ = 0u;
  clear_has_srcteamid();
}
inline ::google::protobuf::uint32 TTeamExchangeHeroReq::srcteamid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamExchangeHeroReq.SrcTeamId)
  return srcteamid_;
}
inline void TTeamExchangeHeroReq::set_srcteamid(::google::protobuf::uint32 value) {
  set_has_srcteamid();
  srcteamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamExchangeHeroReq.SrcTeamId)
}

// optional uint32 SrcHid = 2;
inline bool TTeamExchangeHeroReq::has_srchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTeamExchangeHeroReq::set_has_srchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTeamExchangeHeroReq::clear_has_srchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTeamExchangeHeroReq::clear_srchid() {
  srchid_ = 0u;
  clear_has_srchid();
}
inline ::google::protobuf::uint32 TTeamExchangeHeroReq::srchid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamExchangeHeroReq.SrcHid)
  return srchid_;
}
inline void TTeamExchangeHeroReq::set_srchid(::google::protobuf::uint32 value) {
  set_has_srchid();
  srchid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamExchangeHeroReq.SrcHid)
}

// optional uint32 DesTeamId = 3;
inline bool TTeamExchangeHeroReq::has_desteamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTeamExchangeHeroReq::set_has_desteamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTeamExchangeHeroReq::clear_has_desteamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTeamExchangeHeroReq::clear_desteamid() {
  desteamid_ = 0u;
  clear_has_desteamid();
}
inline ::google::protobuf::uint32 TTeamExchangeHeroReq::desteamid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamExchangeHeroReq.DesTeamId)
  return desteamid_;
}
inline void TTeamExchangeHeroReq::set_desteamid(::google::protobuf::uint32 value) {
  set_has_desteamid();
  desteamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamExchangeHeroReq.DesTeamId)
}

// optional uint32 DesHid = 4;
inline bool TTeamExchangeHeroReq::has_deshid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTeamExchangeHeroReq::set_has_deshid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTeamExchangeHeroReq::clear_has_deshid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTeamExchangeHeroReq::clear_deshid() {
  deshid_ = 0u;
  clear_has_deshid();
}
inline ::google::protobuf::uint32 TTeamExchangeHeroReq::deshid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamExchangeHeroReq.DesHid)
  return deshid_;
}
inline void TTeamExchangeHeroReq::set_deshid(::google::protobuf::uint32 value) {
  set_has_deshid();
  deshid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamExchangeHeroReq.DesHid)
}

// -------------------------------------------------------------------

// TTeamRaiseTroops

// optional uint32 Hid = 1;
inline bool TTeamRaiseTroops::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTeamRaiseTroops::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTeamRaiseTroops::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTeamRaiseTroops::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TTeamRaiseTroops::hid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamRaiseTroops.Hid)
  return hid_;
}
inline void TTeamRaiseTroops::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamRaiseTroops.Hid)
}

// optional uint32 AddNum = 2;
inline bool TTeamRaiseTroops::has_addnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTeamRaiseTroops::set_has_addnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTeamRaiseTroops::clear_has_addnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTeamRaiseTroops::clear_addnum() {
  addnum_ = 0u;
  clear_has_addnum();
}
inline ::google::protobuf::uint32 TTeamRaiseTroops::addnum() const {
  // @@protoc_insertion_point(field_get:pb.TTeamRaiseTroops.AddNum)
  return addnum_;
}
inline void TTeamRaiseTroops::set_addnum(::google::protobuf::uint32 value) {
  set_has_addnum();
  addnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamRaiseTroops.AddNum)
}

// -------------------------------------------------------------------

// TTeamRaiseTroopsReq

// optional uint32 TeamId = 1;
inline bool TTeamRaiseTroopsReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTeamRaiseTroopsReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTeamRaiseTroopsReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTeamRaiseTroopsReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TTeamRaiseTroopsReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamRaiseTroopsReq.TeamId)
  return teamid_;
}
inline void TTeamRaiseTroopsReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamRaiseTroopsReq.TeamId)
}

// repeated .pb.TTeamRaiseTroops AddArr = 2;
inline int TTeamRaiseTroopsReq::addarr_size() const {
  return addarr_.size();
}
inline void TTeamRaiseTroopsReq::clear_addarr() {
  addarr_.Clear();
}
inline const ::pb::TTeamRaiseTroops& TTeamRaiseTroopsReq::addarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTeamRaiseTroopsReq.AddArr)
  return addarr_.Get(index);
}
inline ::pb::TTeamRaiseTroops* TTeamRaiseTroopsReq::mutable_addarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTeamRaiseTroopsReq.AddArr)
  return addarr_.Mutable(index);
}
inline ::pb::TTeamRaiseTroops* TTeamRaiseTroopsReq::add_addarr() {
  // @@protoc_insertion_point(field_add:pb.TTeamRaiseTroopsReq.AddArr)
  return addarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTeamRaiseTroops >&
TTeamRaiseTroopsReq::addarr() const {
  // @@protoc_insertion_point(field_list:pb.TTeamRaiseTroopsReq.AddArr)
  return addarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTeamRaiseTroops >*
TTeamRaiseTroopsReq::mutable_addarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTeamRaiseTroopsReq.AddArr)
  return &addarr_;
}

// -------------------------------------------------------------------

// TTeamRaiseTroopsRsp

// repeated .pb.TTeamHero HeroArr = 1;
inline int TTeamRaiseTroopsRsp::heroarr_size() const {
  return heroarr_.size();
}
inline void TTeamRaiseTroopsRsp::clear_heroarr() {
  heroarr_.Clear();
}
inline const ::pb::TTeamHero& TTeamRaiseTroopsRsp::heroarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTeamRaiseTroopsRsp.HeroArr)
  return heroarr_.Get(index);
}
inline ::pb::TTeamHero* TTeamRaiseTroopsRsp::mutable_heroarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTeamRaiseTroopsRsp.HeroArr)
  return heroarr_.Mutable(index);
}
inline ::pb::TTeamHero* TTeamRaiseTroopsRsp::add_heroarr() {
  // @@protoc_insertion_point(field_add:pb.TTeamRaiseTroopsRsp.HeroArr)
  return heroarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTeamHero >&
TTeamRaiseTroopsRsp::heroarr() const {
  // @@protoc_insertion_point(field_list:pb.TTeamRaiseTroopsRsp.HeroArr)
  return heroarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTeamHero >*
TTeamRaiseTroopsRsp::mutable_heroarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTeamRaiseTroopsRsp.HeroArr)
  return &heroarr_;
}

// -------------------------------------------------------------------

// TTeamCancelRaiseTroopsReq

// optional uint32 TeamId = 1;
inline bool TTeamCancelRaiseTroopsReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTeamCancelRaiseTroopsReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTeamCancelRaiseTroopsReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTeamCancelRaiseTroopsReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TTeamCancelRaiseTroopsReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamCancelRaiseTroopsReq.TeamId)
  return teamid_;
}
inline void TTeamCancelRaiseTroopsReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamCancelRaiseTroopsReq.TeamId)
}

// optional uint32 Hid = 2;
inline bool TTeamCancelRaiseTroopsReq::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTeamCancelRaiseTroopsReq::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTeamCancelRaiseTroopsReq::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTeamCancelRaiseTroopsReq::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TTeamCancelRaiseTroopsReq::hid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamCancelRaiseTroopsReq.Hid)
  return hid_;
}
inline void TTeamCancelRaiseTroopsReq::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamCancelRaiseTroopsReq.Hid)
}

// -------------------------------------------------------------------

// TTeamCancelRaiseTroopsRsp

// optional .pb.TTeamHero Hero = 1;
inline bool TTeamCancelRaiseTroopsRsp::has_hero() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTeamCancelRaiseTroopsRsp::set_has_hero() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTeamCancelRaiseTroopsRsp::clear_has_hero() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTeamCancelRaiseTroopsRsp::clear_hero() {
  if (hero_ != NULL) hero_->::pb::TTeamHero::Clear();
  clear_has_hero();
}
inline const ::pb::TTeamHero& TTeamCancelRaiseTroopsRsp::hero() const {
  // @@protoc_insertion_point(field_get:pb.TTeamCancelRaiseTroopsRsp.Hero)
  return hero_ != NULL ? *hero_ : *default_instance_->hero_;
}
inline ::pb::TTeamHero* TTeamCancelRaiseTroopsRsp::mutable_hero() {
  set_has_hero();
  if (hero_ == NULL) hero_ = new ::pb::TTeamHero;
  // @@protoc_insertion_point(field_mutable:pb.TTeamCancelRaiseTroopsRsp.Hero)
  return hero_;
}
inline ::pb::TTeamHero* TTeamCancelRaiseTroopsRsp::release_hero() {
  clear_has_hero();
  ::pb::TTeamHero* temp = hero_;
  hero_ = NULL;
  return temp;
}
inline void TTeamCancelRaiseTroopsRsp::set_allocated_hero(::pb::TTeamHero* hero) {
  delete hero_;
  hero_ = hero;
  if (hero) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTeamCancelRaiseTroopsRsp.Hero)
}

// -------------------------------------------------------------------

// TTeamSpeedUpRaiseTroopsReq

// optional uint32 TeamId = 1;
inline bool TTeamSpeedUpRaiseTroopsReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTeamSpeedUpRaiseTroopsReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTeamSpeedUpRaiseTroopsReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTeamSpeedUpRaiseTroopsReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TTeamSpeedUpRaiseTroopsReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamSpeedUpRaiseTroopsReq.TeamId)
  return teamid_;
}
inline void TTeamSpeedUpRaiseTroopsReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamSpeedUpRaiseTroopsReq.TeamId)
}

// optional uint32 Hid = 2;
inline bool TTeamSpeedUpRaiseTroopsReq::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTeamSpeedUpRaiseTroopsReq::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTeamSpeedUpRaiseTroopsReq::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTeamSpeedUpRaiseTroopsReq::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TTeamSpeedUpRaiseTroopsReq::hid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamSpeedUpRaiseTroopsReq.Hid)
  return hid_;
}
inline void TTeamSpeedUpRaiseTroopsReq::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamSpeedUpRaiseTroopsReq.Hid)
}

// optional .pb.ESpeedUpMode Mode = 3;
inline bool TTeamSpeedUpRaiseTroopsReq::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTeamSpeedUpRaiseTroopsReq::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTeamSpeedUpRaiseTroopsReq::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTeamSpeedUpRaiseTroopsReq::clear_mode() {
  mode_ = 1;
  clear_has_mode();
}
inline ::pb::ESpeedUpMode TTeamSpeedUpRaiseTroopsReq::mode() const {
  // @@protoc_insertion_point(field_get:pb.TTeamSpeedUpRaiseTroopsReq.Mode)
  return static_cast< ::pb::ESpeedUpMode >(mode_);
}
inline void TTeamSpeedUpRaiseTroopsReq::set_mode(::pb::ESpeedUpMode value) {
  assert(::pb::ESpeedUpMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamSpeedUpRaiseTroopsReq.Mode)
}

// optional .pb.TSimpleItem Item = 4;
inline bool TTeamSpeedUpRaiseTroopsReq::has_item() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTeamSpeedUpRaiseTroopsReq::set_has_item() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTeamSpeedUpRaiseTroopsReq::clear_has_item() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTeamSpeedUpRaiseTroopsReq::clear_item() {
  if (item_ != NULL) item_->::pb::TSimpleItem::Clear();
  clear_has_item();
}
inline const ::pb::TSimpleItem& TTeamSpeedUpRaiseTroopsReq::item() const {
  // @@protoc_insertion_point(field_get:pb.TTeamSpeedUpRaiseTroopsReq.Item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::pb::TSimpleItem* TTeamSpeedUpRaiseTroopsReq::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::pb::TSimpleItem;
  // @@protoc_insertion_point(field_mutable:pb.TTeamSpeedUpRaiseTroopsReq.Item)
  return item_;
}
inline ::pb::TSimpleItem* TTeamSpeedUpRaiseTroopsReq::release_item() {
  clear_has_item();
  ::pb::TSimpleItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline void TTeamSpeedUpRaiseTroopsReq::set_allocated_item(::pb::TSimpleItem* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTeamSpeedUpRaiseTroopsReq.Item)
}

// -------------------------------------------------------------------

// TTeamSpeedUpRaiseTroopsRsp

// optional .pb.TTeamHero Hero = 1;
inline bool TTeamSpeedUpRaiseTroopsRsp::has_hero() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTeamSpeedUpRaiseTroopsRsp::set_has_hero() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTeamSpeedUpRaiseTroopsRsp::clear_has_hero() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTeamSpeedUpRaiseTroopsRsp::clear_hero() {
  if (hero_ != NULL) hero_->::pb::TTeamHero::Clear();
  clear_has_hero();
}
inline const ::pb::TTeamHero& TTeamSpeedUpRaiseTroopsRsp::hero() const {
  // @@protoc_insertion_point(field_get:pb.TTeamSpeedUpRaiseTroopsRsp.Hero)
  return hero_ != NULL ? *hero_ : *default_instance_->hero_;
}
inline ::pb::TTeamHero* TTeamSpeedUpRaiseTroopsRsp::mutable_hero() {
  set_has_hero();
  if (hero_ == NULL) hero_ = new ::pb::TTeamHero;
  // @@protoc_insertion_point(field_mutable:pb.TTeamSpeedUpRaiseTroopsRsp.Hero)
  return hero_;
}
inline ::pb::TTeamHero* TTeamSpeedUpRaiseTroopsRsp::release_hero() {
  clear_has_hero();
  ::pb::TTeamHero* temp = hero_;
  hero_ = NULL;
  return temp;
}
inline void TTeamSpeedUpRaiseTroopsRsp::set_allocated_hero(::pb::TTeamHero* hero) {
  delete hero_;
  hero_ = hero;
  if (hero) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTeamSpeedUpRaiseTroopsRsp.Hero)
}

// -------------------------------------------------------------------

// TTeamEquipItemsReq

// optional uint32 TeamId = 1;
inline bool TTeamEquipItemsReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTeamEquipItemsReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTeamEquipItemsReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTeamEquipItemsReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TTeamEquipItemsReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TTeamEquipItemsReq.TeamId)
  return teamid_;
}
inline void TTeamEquipItemsReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTeamEquipItemsReq.TeamId)
}

// repeated .pb.TTeamEquipItem ItemArr = 2;
inline int TTeamEquipItemsReq::itemarr_size() const {
  return itemarr_.size();
}
inline void TTeamEquipItemsReq::clear_itemarr() {
  itemarr_.Clear();
}
inline const ::pb::TTeamEquipItem& TTeamEquipItemsReq::itemarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTeamEquipItemsReq.ItemArr)
  return itemarr_.Get(index);
}
inline ::pb::TTeamEquipItem* TTeamEquipItemsReq::mutable_itemarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTeamEquipItemsReq.ItemArr)
  return itemarr_.Mutable(index);
}
inline ::pb::TTeamEquipItem* TTeamEquipItemsReq::add_itemarr() {
  // @@protoc_insertion_point(field_add:pb.TTeamEquipItemsReq.ItemArr)
  return itemarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTeamEquipItem >&
TTeamEquipItemsReq::itemarr() const {
  // @@protoc_insertion_point(field_list:pb.TTeamEquipItemsReq.ItemArr)
  return itemarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTeamEquipItem >*
TTeamEquipItemsReq::mutable_itemarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTeamEquipItemsReq.ItemArr)
  return &itemarr_;
}

// -------------------------------------------------------------------

// TTeamUpdateDataNotify

// repeated .pb.TTeamInfo TeamArr = 1;
inline int TTeamUpdateDataNotify::teamarr_size() const {
  return teamarr_.size();
}
inline void TTeamUpdateDataNotify::clear_teamarr() {
  teamarr_.Clear();
}
inline const ::pb::TTeamInfo& TTeamUpdateDataNotify::teamarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTeamUpdateDataNotify.TeamArr)
  return teamarr_.Get(index);
}
inline ::pb::TTeamInfo* TTeamUpdateDataNotify::mutable_teamarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTeamUpdateDataNotify.TeamArr)
  return teamarr_.Mutable(index);
}
inline ::pb::TTeamInfo* TTeamUpdateDataNotify::add_teamarr() {
  // @@protoc_insertion_point(field_add:pb.TTeamUpdateDataNotify.TeamArr)
  return teamarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTeamInfo >&
TTeamUpdateDataNotify::teamarr() const {
  // @@protoc_insertion_point(field_list:pb.TTeamUpdateDataNotify.TeamArr)
  return teamarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTeamInfo >*
TTeamUpdateDataNotify::mutable_teamarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTeamUpdateDataNotify.TeamArr)
  return &teamarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::ETeamStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ETeamStatus>() {
  return ::pb::ETeamStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::ESpeedUpMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ESpeedUpMode>() {
  return ::pb::ESpeedUpMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fSlgTeam_2eproto__INCLUDED
