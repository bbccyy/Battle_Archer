// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActTimeLimitChange.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActTimeLimitChange.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActTimeLimitChangeFreeNumInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActTimeLimitChangeFreeNumInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActTimeLimitChangeGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActTimeLimitChangeGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActTimeLimitChangeFreeNumNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActTimeLimitChangeFreeNumNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EChangeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActTimeLimitChange_2eproto() {
  protobuf_AddDesc_net_2fActTimeLimitChange_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActTimeLimitChange.proto");
  GOOGLE_CHECK(file != NULL);
  TActTimeLimitChangeFreeNumInfo_descriptor_ = file->message_type(0);
  static const int TActTimeLimitChangeFreeNumInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitChangeFreeNumInfo, changetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitChangeFreeNumInfo, costfreechangenum_),
  };
  TActTimeLimitChangeFreeNumInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActTimeLimitChangeFreeNumInfo_descriptor_,
      TActTimeLimitChangeFreeNumInfo::default_instance_,
      TActTimeLimitChangeFreeNumInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitChangeFreeNumInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitChangeFreeNumInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActTimeLimitChangeFreeNumInfo));
  TActTimeLimitChangeGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TActTimeLimitChangeGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitChangeGetInfoRsp, changefreenuminfo_),
  };
  TActTimeLimitChangeGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActTimeLimitChangeGetInfoRsp_descriptor_,
      TActTimeLimitChangeGetInfoRsp::default_instance_,
      TActTimeLimitChangeGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitChangeGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitChangeGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActTimeLimitChangeGetInfoRsp));
  TActTimeLimitChangeFreeNumNotify_descriptor_ = file->message_type(2);
  static const int TActTimeLimitChangeFreeNumNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitChangeFreeNumNotify, changefreenuminfo_),
  };
  TActTimeLimitChangeFreeNumNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActTimeLimitChangeFreeNumNotify_descriptor_,
      TActTimeLimitChangeFreeNumNotify::default_instance_,
      TActTimeLimitChangeFreeNumNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitChangeFreeNumNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitChangeFreeNumNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActTimeLimitChangeFreeNumNotify));
  EChangeType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActTimeLimitChange_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActTimeLimitChangeFreeNumInfo_descriptor_, &TActTimeLimitChangeFreeNumInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActTimeLimitChangeGetInfoRsp_descriptor_, &TActTimeLimitChangeGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActTimeLimitChangeFreeNumNotify_descriptor_, &TActTimeLimitChangeFreeNumNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActTimeLimitChange_2eproto() {
  delete TActTimeLimitChangeFreeNumInfo::default_instance_;
  delete TActTimeLimitChangeFreeNumInfo_reflection_;
  delete TActTimeLimitChangeGetInfoRsp::default_instance_;
  delete TActTimeLimitChangeGetInfoRsp_reflection_;
  delete TActTimeLimitChangeFreeNumNotify::default_instance_;
  delete TActTimeLimitChangeFreeNumNotify_reflection_;
}

void protobuf_AddDesc_net_2fActTimeLimitChange_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034net/ActTimeLimitChange.proto\022\002pb\"`\n\036TA"
    "ctTimeLimitChangeFreeNumInfo\022#\n\nChangeTy"
    "pe\030\001 \001(\0162\017.pb.EChangeType\022\031\n\021CostFreeCha"
    "ngeNum\030\002 \001(\r\"^\n\035TActTimeLimitChangeGetIn"
    "foRsp\022=\n\021ChangeFreeNumInfo\030\001 \003(\0132\".pb.TA"
    "ctTimeLimitChangeFreeNumInfo\"a\n TActTime"
    "LimitChangeFreeNumNotify\022=\n\021ChangeFreeNu"
    "mInfo\030\001 \001(\0132\".pb.TActTimeLimitChangeFree"
    "NumInfo*N\n\013EChangeType\022\022\n\016EChangeTypeRed"
    "\020\001\022\023\n\017EChangeTypeGold\020\002\022\026\n\022EChangeTypeCo"
    "untry\020\003", 407);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActTimeLimitChange.proto", &protobuf_RegisterTypes);
  TActTimeLimitChangeFreeNumInfo::default_instance_ = new TActTimeLimitChangeFreeNumInfo();
  TActTimeLimitChangeGetInfoRsp::default_instance_ = new TActTimeLimitChangeGetInfoRsp();
  TActTimeLimitChangeFreeNumNotify::default_instance_ = new TActTimeLimitChangeFreeNumNotify();
  TActTimeLimitChangeFreeNumInfo::default_instance_->InitAsDefaultInstance();
  TActTimeLimitChangeGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActTimeLimitChangeFreeNumNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActTimeLimitChange_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActTimeLimitChange_2eproto {
  StaticDescriptorInitializer_net_2fActTimeLimitChange_2eproto() {
    protobuf_AddDesc_net_2fActTimeLimitChange_2eproto();
  }
} static_descriptor_initializer_net_2fActTimeLimitChange_2eproto_;
const ::google::protobuf::EnumDescriptor* EChangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EChangeType_descriptor_;
}
bool EChangeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TActTimeLimitChangeFreeNumInfo::kChangeTypeFieldNumber;
const int TActTimeLimitChangeFreeNumInfo::kCostFreeChangeNumFieldNumber;
#endif  // !_MSC_VER

TActTimeLimitChangeFreeNumInfo::TActTimeLimitChangeFreeNumInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActTimeLimitChangeFreeNumInfo)
}

void TActTimeLimitChangeFreeNumInfo::InitAsDefaultInstance() {
}

TActTimeLimitChangeFreeNumInfo::TActTimeLimitChangeFreeNumInfo(const TActTimeLimitChangeFreeNumInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActTimeLimitChangeFreeNumInfo)
}

void TActTimeLimitChangeFreeNumInfo::SharedCtor() {
  _cached_size_ = 0;
  changetype_ = 1;
  costfreechangenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActTimeLimitChangeFreeNumInfo::~TActTimeLimitChangeFreeNumInfo() {
  // @@protoc_insertion_point(destructor:pb.TActTimeLimitChangeFreeNumInfo)
  SharedDtor();
}

void TActTimeLimitChangeFreeNumInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActTimeLimitChangeFreeNumInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActTimeLimitChangeFreeNumInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActTimeLimitChangeFreeNumInfo_descriptor_;
}

const TActTimeLimitChangeFreeNumInfo& TActTimeLimitChangeFreeNumInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActTimeLimitChange_2eproto();
  return *default_instance_;
}

TActTimeLimitChangeFreeNumInfo* TActTimeLimitChangeFreeNumInfo::default_instance_ = NULL;

TActTimeLimitChangeFreeNumInfo* TActTimeLimitChangeFreeNumInfo::New() const {
  return new TActTimeLimitChangeFreeNumInfo;
}

void TActTimeLimitChangeFreeNumInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    changetype_ = 1;
    costfreechangenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActTimeLimitChangeFreeNumInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActTimeLimitChangeFreeNumInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EChangeType ChangeType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EChangeType_IsValid(value)) {
            set_changetype(static_cast< ::pb::EChangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CostFreeChangeNum;
        break;
      }

      // optional uint32 CostFreeChangeNum = 2;
      case 2: {
        if (tag == 16) {
         parse_CostFreeChangeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costfreechangenum_)));
          set_has_costfreechangenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActTimeLimitChangeFreeNumInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActTimeLimitChangeFreeNumInfo)
  return false;
#undef DO_
}

void TActTimeLimitChangeFreeNumInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActTimeLimitChangeFreeNumInfo)
  // optional .pb.EChangeType ChangeType = 1;
  if (has_changetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->changetype(), output);
  }

  // optional uint32 CostFreeChangeNum = 2;
  if (has_costfreechangenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->costfreechangenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActTimeLimitChangeFreeNumInfo)
}

::google::protobuf::uint8* TActTimeLimitChangeFreeNumInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActTimeLimitChangeFreeNumInfo)
  // optional .pb.EChangeType ChangeType = 1;
  if (has_changetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->changetype(), target);
  }

  // optional uint32 CostFreeChangeNum = 2;
  if (has_costfreechangenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->costfreechangenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActTimeLimitChangeFreeNumInfo)
  return target;
}

int TActTimeLimitChangeFreeNumInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EChangeType ChangeType = 1;
    if (has_changetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->changetype());
    }

    // optional uint32 CostFreeChangeNum = 2;
    if (has_costfreechangenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costfreechangenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActTimeLimitChangeFreeNumInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActTimeLimitChangeFreeNumInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActTimeLimitChangeFreeNumInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActTimeLimitChangeFreeNumInfo::MergeFrom(const TActTimeLimitChangeFreeNumInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changetype()) {
      set_changetype(from.changetype());
    }
    if (from.has_costfreechangenum()) {
      set_costfreechangenum(from.costfreechangenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActTimeLimitChangeFreeNumInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActTimeLimitChangeFreeNumInfo::CopyFrom(const TActTimeLimitChangeFreeNumInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActTimeLimitChangeFreeNumInfo::IsInitialized() const {

  return true;
}

void TActTimeLimitChangeFreeNumInfo::Swap(TActTimeLimitChangeFreeNumInfo* other) {
  if (other != this) {
    std::swap(changetype_, other->changetype_);
    std::swap(costfreechangenum_, other->costfreechangenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActTimeLimitChangeFreeNumInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActTimeLimitChangeFreeNumInfo_descriptor_;
  metadata.reflection = TActTimeLimitChangeFreeNumInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActTimeLimitChangeGetInfoRsp::kChangeFreeNumInfoFieldNumber;
#endif  // !_MSC_VER

TActTimeLimitChangeGetInfoRsp::TActTimeLimitChangeGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActTimeLimitChangeGetInfoRsp)
}

void TActTimeLimitChangeGetInfoRsp::InitAsDefaultInstance() {
}

TActTimeLimitChangeGetInfoRsp::TActTimeLimitChangeGetInfoRsp(const TActTimeLimitChangeGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActTimeLimitChangeGetInfoRsp)
}

void TActTimeLimitChangeGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActTimeLimitChangeGetInfoRsp::~TActTimeLimitChangeGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActTimeLimitChangeGetInfoRsp)
  SharedDtor();
}

void TActTimeLimitChangeGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActTimeLimitChangeGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActTimeLimitChangeGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActTimeLimitChangeGetInfoRsp_descriptor_;
}

const TActTimeLimitChangeGetInfoRsp& TActTimeLimitChangeGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActTimeLimitChange_2eproto();
  return *default_instance_;
}

TActTimeLimitChangeGetInfoRsp* TActTimeLimitChangeGetInfoRsp::default_instance_ = NULL;

TActTimeLimitChangeGetInfoRsp* TActTimeLimitChangeGetInfoRsp::New() const {
  return new TActTimeLimitChangeGetInfoRsp;
}

void TActTimeLimitChangeGetInfoRsp::Clear() {
  changefreenuminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActTimeLimitChangeGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActTimeLimitChangeGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActTimeLimitChangeFreeNumInfo ChangeFreeNumInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ChangeFreeNumInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_changefreenuminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ChangeFreeNumInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActTimeLimitChangeGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActTimeLimitChangeGetInfoRsp)
  return false;
#undef DO_
}

void TActTimeLimitChangeGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActTimeLimitChangeGetInfoRsp)
  // repeated .pb.TActTimeLimitChangeFreeNumInfo ChangeFreeNumInfo = 1;
  for (int i = 0; i < this->changefreenuminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->changefreenuminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActTimeLimitChangeGetInfoRsp)
}

::google::protobuf::uint8* TActTimeLimitChangeGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActTimeLimitChangeGetInfoRsp)
  // repeated .pb.TActTimeLimitChangeFreeNumInfo ChangeFreeNumInfo = 1;
  for (int i = 0; i < this->changefreenuminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->changefreenuminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActTimeLimitChangeGetInfoRsp)
  return target;
}

int TActTimeLimitChangeGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActTimeLimitChangeFreeNumInfo ChangeFreeNumInfo = 1;
  total_size += 1 * this->changefreenuminfo_size();
  for (int i = 0; i < this->changefreenuminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->changefreenuminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActTimeLimitChangeGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActTimeLimitChangeGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActTimeLimitChangeGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActTimeLimitChangeGetInfoRsp::MergeFrom(const TActTimeLimitChangeGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  changefreenuminfo_.MergeFrom(from.changefreenuminfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActTimeLimitChangeGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActTimeLimitChangeGetInfoRsp::CopyFrom(const TActTimeLimitChangeGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActTimeLimitChangeGetInfoRsp::IsInitialized() const {

  return true;
}

void TActTimeLimitChangeGetInfoRsp::Swap(TActTimeLimitChangeGetInfoRsp* other) {
  if (other != this) {
    changefreenuminfo_.Swap(&other->changefreenuminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActTimeLimitChangeGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActTimeLimitChangeGetInfoRsp_descriptor_;
  metadata.reflection = TActTimeLimitChangeGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActTimeLimitChangeFreeNumNotify::kChangeFreeNumInfoFieldNumber;
#endif  // !_MSC_VER

TActTimeLimitChangeFreeNumNotify::TActTimeLimitChangeFreeNumNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActTimeLimitChangeFreeNumNotify)
}

void TActTimeLimitChangeFreeNumNotify::InitAsDefaultInstance() {
  changefreenuminfo_ = const_cast< ::pb::TActTimeLimitChangeFreeNumInfo*>(&::pb::TActTimeLimitChangeFreeNumInfo::default_instance());
}

TActTimeLimitChangeFreeNumNotify::TActTimeLimitChangeFreeNumNotify(const TActTimeLimitChangeFreeNumNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActTimeLimitChangeFreeNumNotify)
}

void TActTimeLimitChangeFreeNumNotify::SharedCtor() {
  _cached_size_ = 0;
  changefreenuminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActTimeLimitChangeFreeNumNotify::~TActTimeLimitChangeFreeNumNotify() {
  // @@protoc_insertion_point(destructor:pb.TActTimeLimitChangeFreeNumNotify)
  SharedDtor();
}

void TActTimeLimitChangeFreeNumNotify::SharedDtor() {
  if (this != default_instance_) {
    delete changefreenuminfo_;
  }
}

void TActTimeLimitChangeFreeNumNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActTimeLimitChangeFreeNumNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActTimeLimitChangeFreeNumNotify_descriptor_;
}

const TActTimeLimitChangeFreeNumNotify& TActTimeLimitChangeFreeNumNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActTimeLimitChange_2eproto();
  return *default_instance_;
}

TActTimeLimitChangeFreeNumNotify* TActTimeLimitChangeFreeNumNotify::default_instance_ = NULL;

TActTimeLimitChangeFreeNumNotify* TActTimeLimitChangeFreeNumNotify::New() const {
  return new TActTimeLimitChangeFreeNumNotify;
}

void TActTimeLimitChangeFreeNumNotify::Clear() {
  if (has_changefreenuminfo()) {
    if (changefreenuminfo_ != NULL) changefreenuminfo_->::pb::TActTimeLimitChangeFreeNumInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActTimeLimitChangeFreeNumNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActTimeLimitChangeFreeNumNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TActTimeLimitChangeFreeNumInfo ChangeFreeNumInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changefreenuminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActTimeLimitChangeFreeNumNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActTimeLimitChangeFreeNumNotify)
  return false;
#undef DO_
}

void TActTimeLimitChangeFreeNumNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActTimeLimitChangeFreeNumNotify)
  // optional .pb.TActTimeLimitChangeFreeNumInfo ChangeFreeNumInfo = 1;
  if (has_changefreenuminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->changefreenuminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActTimeLimitChangeFreeNumNotify)
}

::google::protobuf::uint8* TActTimeLimitChangeFreeNumNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActTimeLimitChangeFreeNumNotify)
  // optional .pb.TActTimeLimitChangeFreeNumInfo ChangeFreeNumInfo = 1;
  if (has_changefreenuminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->changefreenuminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActTimeLimitChangeFreeNumNotify)
  return target;
}

int TActTimeLimitChangeFreeNumNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TActTimeLimitChangeFreeNumInfo ChangeFreeNumInfo = 1;
    if (has_changefreenuminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changefreenuminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActTimeLimitChangeFreeNumNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActTimeLimitChangeFreeNumNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActTimeLimitChangeFreeNumNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActTimeLimitChangeFreeNumNotify::MergeFrom(const TActTimeLimitChangeFreeNumNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changefreenuminfo()) {
      mutable_changefreenuminfo()->::pb::TActTimeLimitChangeFreeNumInfo::MergeFrom(from.changefreenuminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActTimeLimitChangeFreeNumNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActTimeLimitChangeFreeNumNotify::CopyFrom(const TActTimeLimitChangeFreeNumNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActTimeLimitChangeFreeNumNotify::IsInitialized() const {

  return true;
}

void TActTimeLimitChangeFreeNumNotify::Swap(TActTimeLimitChangeFreeNumNotify* other) {
  if (other != this) {
    std::swap(changefreenuminfo_, other->changefreenuminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActTimeLimitChangeFreeNumNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActTimeLimitChangeFreeNumNotify_descriptor_;
  metadata.reflection = TActTimeLimitChangeFreeNumNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
