// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/SlgBag.proto

#ifndef PROTOBUF_net_2fSlgBag_2eproto__INCLUDED
#define PROTOBUF_net_2fSlgBag_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Common.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fSlgBag_2eproto();
void protobuf_AssignDesc_net_2fSlgBag_2eproto();
void protobuf_ShutdownFile_net_2fSlgBag_2eproto();

class TSlgBagDataRsp;
class TSlgBagNotify;
class TSlgBagRepileReq;
class TSlgBagUseItemReq;
class TSlgBagUseItemRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TSlgBagDataRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgBag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgBagDataRsp : public ::google::protobuf::Message {
 public:
  TSlgBagDataRsp();
  virtual ~TSlgBagDataRsp();

  TSlgBagDataRsp(const TSlgBagDataRsp& from);

  inline TSlgBagDataRsp& operator=(const TSlgBagDataRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgBagDataRsp& default_instance();

  void Swap(TSlgBagDataRsp* other);

  // implements Message ----------------------------------------------

  TSlgBagDataRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgBagDataRsp& from);
  void MergeFrom(const TSlgBagDataRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TSimpleItem SlgPropArr = 1;
  inline int slgproparr_size() const;
  inline void clear_slgproparr();
  static const int kSlgPropArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgBagDataRsp</name>
  	<Function>
  		<name>slgproparr</name>
  		<replaceName>SlgPropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_slgproparr</name>
  		<replaceName>SlgPropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_slgproparr</name>
  		<replaceName>SlgPropArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slgproparr</name>
  		<replaceName>SlgPropArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>slgproparr_size</name>
  		<replaceName>SlgPropArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& slgproparr(int index) const;
  inline ::pb::TSimpleItem* mutable_slgproparr(int index);
  inline ::pb::TSimpleItem* add_slgproparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      slgproparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_slgproparr();

  // repeated .pb.TSimpleItem SlgArmArr = 2;
  inline int slgarmarr_size() const;
  inline void clear_slgarmarr();
  static const int kSlgArmArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgBagDataRsp</name>
  	<Function>
  		<name>slgarmarr</name>
  		<replaceName>SlgArmArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_slgarmarr</name>
  		<replaceName>SlgArmArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_slgarmarr</name>
  		<replaceName>SlgArmArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slgarmarr</name>
  		<replaceName>SlgArmArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>slgarmarr_size</name>
  		<replaceName>SlgArmArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& slgarmarr(int index) const;
  inline ::pb::TSimpleItem* mutable_slgarmarr(int index);
  inline ::pb::TSimpleItem* add_slgarmarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      slgarmarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_slgarmarr();

  // repeated .pb.TSimpleItem SlgArmStuffArr = 3;
  inline int slgarmstuffarr_size() const;
  inline void clear_slgarmstuffarr();
  static const int kSlgArmStuffArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSlgBagDataRsp</name>
  	<Function>
  		<name>slgarmstuffarr</name>
  		<replaceName>SlgArmStuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_slgarmstuffarr</name>
  		<replaceName>SlgArmStuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_slgarmstuffarr</name>
  		<replaceName>SlgArmStuffArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slgarmstuffarr</name>
  		<replaceName>SlgArmStuffArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>slgarmstuffarr_size</name>
  		<replaceName>SlgArmStuffArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& slgarmstuffarr(int index) const;
  inline ::pb::TSimpleItem* mutable_slgarmstuffarr(int index);
  inline ::pb::TSimpleItem* add_slgarmstuffarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      slgarmstuffarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_slgarmstuffarr();

  // @@protoc_insertion_point(class_scope:pb.TSlgBagDataRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > slgproparr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > slgarmarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > slgarmstuffarr_;
  friend void  protobuf_AddDesc_net_2fSlgBag_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgBag_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgBag_2eproto();

  void InitAsDefaultInstance();
  static TSlgBagDataRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgBagNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgBag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgBagNotify : public ::google::protobuf::Message {
 public:
  TSlgBagNotify();
  virtual ~TSlgBagNotify();

  TSlgBagNotify(const TSlgBagNotify& from);

  inline TSlgBagNotify& operator=(const TSlgBagNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgBagNotify& default_instance();

  void Swap(TSlgBagNotify* other);

  // implements Message ----------------------------------------------

  TSlgBagNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgBagNotify& from);
  void MergeFrom(const TSlgBagNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TSimpleItem SlgPropArr = 1;
  inline int slgproparr_size() const;
  inline void clear_slgproparr();
  static const int kSlgPropArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgBagNotify</name>
  	<Function>
  		<name>slgproparr</name>
  		<replaceName>SlgPropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_slgproparr</name>
  		<replaceName>SlgPropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_slgproparr</name>
  		<replaceName>SlgPropArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slgproparr</name>
  		<replaceName>SlgPropArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>slgproparr_size</name>
  		<replaceName>SlgPropArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& slgproparr(int index) const;
  inline ::pb::TSimpleItem* mutable_slgproparr(int index);
  inline ::pb::TSimpleItem* add_slgproparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      slgproparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_slgproparr();

  // repeated .pb.TSimpleItem SlgArmArr = 2;
  inline int slgarmarr_size() const;
  inline void clear_slgarmarr();
  static const int kSlgArmArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgBagNotify</name>
  	<Function>
  		<name>slgarmarr</name>
  		<replaceName>SlgArmArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_slgarmarr</name>
  		<replaceName>SlgArmArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_slgarmarr</name>
  		<replaceName>SlgArmArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slgarmarr</name>
  		<replaceName>SlgArmArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>slgarmarr_size</name>
  		<replaceName>SlgArmArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& slgarmarr(int index) const;
  inline ::pb::TSimpleItem* mutable_slgarmarr(int index);
  inline ::pb::TSimpleItem* add_slgarmarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      slgarmarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_slgarmarr();

  // repeated .pb.TSimpleItem SlgArmStuffArr = 3;
  inline int slgarmstuffarr_size() const;
  inline void clear_slgarmstuffarr();
  static const int kSlgArmStuffArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSlgBagNotify</name>
  	<Function>
  		<name>slgarmstuffarr</name>
  		<replaceName>SlgArmStuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_slgarmstuffarr</name>
  		<replaceName>SlgArmStuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_slgarmstuffarr</name>
  		<replaceName>SlgArmStuffArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slgarmstuffarr</name>
  		<replaceName>SlgArmStuffArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>slgarmstuffarr_size</name>
  		<replaceName>SlgArmStuffArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& slgarmstuffarr(int index) const;
  inline ::pb::TSimpleItem* mutable_slgarmstuffarr(int index);
  inline ::pb::TSimpleItem* add_slgarmstuffarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      slgarmstuffarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_slgarmstuffarr();

  // @@protoc_insertion_point(class_scope:pb.TSlgBagNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > slgproparr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > slgarmarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > slgarmstuffarr_;
  friend void  protobuf_AddDesc_net_2fSlgBag_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgBag_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgBag_2eproto();

  void InitAsDefaultInstance();
  static TSlgBagNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgBagRepileReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgBag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgBagRepileReq : public ::google::protobuf::Message {
 public:
  TSlgBagRepileReq();
  virtual ~TSlgBagRepileReq();

  TSlgBagRepileReq(const TSlgBagRepileReq& from);

  inline TSlgBagRepileReq& operator=(const TSlgBagRepileReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgBagRepileReq& default_instance();

  void Swap(TSlgBagRepileReq* other);

  // implements Message ----------------------------------------------

  TSlgBagRepileReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgBagRepileReq& from);
  void MergeFrom(const TSlgBagRepileReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TSlgBagRepileReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fSlgBag_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgBag_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgBag_2eproto();

  void InitAsDefaultInstance();
  static TSlgBagRepileReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgBagUseItemReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgBag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgBagUseItemReq : public ::google::protobuf::Message {
 public:
  TSlgBagUseItemReq();
  virtual ~TSlgBagUseItemReq();

  TSlgBagUseItemReq(const TSlgBagUseItemReq& from);

  inline TSlgBagUseItemReq& operator=(const TSlgBagUseItemReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgBagUseItemReq& default_instance();

  void Swap(TSlgBagUseItemReq* other);

  // implements Message ----------------------------------------------

  TSlgBagUseItemReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgBagUseItemReq& from);
  void MergeFrom(const TSlgBagUseItemReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgBagUseItemReq</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgBagUseItemReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgBagUseItemReq)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fSlgBag_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgBag_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgBag_2eproto();

  void InitAsDefaultInstance();
  static TSlgBagUseItemReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgBagUseItemRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgBag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgBagUseItemRsp : public ::google::protobuf::Message {
 public:
  TSlgBagUseItemRsp();
  virtual ~TSlgBagUseItemRsp();

  TSlgBagUseItemRsp(const TSlgBagUseItemRsp& from);

  inline TSlgBagUseItemRsp& operator=(const TSlgBagUseItemRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgBagUseItemRsp& default_instance();

  void Swap(TSlgBagUseItemRsp* other);

  // implements Message ----------------------------------------------

  TSlgBagUseItemRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgBagUseItemRsp& from);
  void MergeFrom(const TSlgBagUseItemRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GridIndex = 1;
  inline bool has_gridindex() const;
  inline void clear_gridindex();
  static const int kGridIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgBagUseItemRsp</name>
  	<Function>
  		<name>gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 gridindex() const;
  inline void set_gridindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgBagUseItemRsp)
 private:
  inline void set_has_gridindex();
  inline void clear_has_gridindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gridindex_;
  friend void  protobuf_AddDesc_net_2fSlgBag_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgBag_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgBag_2eproto();

  void InitAsDefaultInstance();
  static TSlgBagUseItemRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TSlgBagDataRsp

// repeated .pb.TSimpleItem SlgPropArr = 1;
inline int TSlgBagDataRsp::slgproparr_size() const {
  return slgproparr_.size();
}
inline void TSlgBagDataRsp::clear_slgproparr() {
  slgproparr_.Clear();
}
inline const ::pb::TSimpleItem& TSlgBagDataRsp::slgproparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgBagDataRsp.SlgPropArr)
  return slgproparr_.Get(index);
}
inline ::pb::TSimpleItem* TSlgBagDataRsp::mutable_slgproparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgBagDataRsp.SlgPropArr)
  return slgproparr_.Mutable(index);
}
inline ::pb::TSimpleItem* TSlgBagDataRsp::add_slgproparr() {
  // @@protoc_insertion_point(field_add:pb.TSlgBagDataRsp.SlgPropArr)
  return slgproparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TSlgBagDataRsp::slgproparr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgBagDataRsp.SlgPropArr)
  return slgproparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TSlgBagDataRsp::mutable_slgproparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgBagDataRsp.SlgPropArr)
  return &slgproparr_;
}

// repeated .pb.TSimpleItem SlgArmArr = 2;
inline int TSlgBagDataRsp::slgarmarr_size() const {
  return slgarmarr_.size();
}
inline void TSlgBagDataRsp::clear_slgarmarr() {
  slgarmarr_.Clear();
}
inline const ::pb::TSimpleItem& TSlgBagDataRsp::slgarmarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgBagDataRsp.SlgArmArr)
  return slgarmarr_.Get(index);
}
inline ::pb::TSimpleItem* TSlgBagDataRsp::mutable_slgarmarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgBagDataRsp.SlgArmArr)
  return slgarmarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TSlgBagDataRsp::add_slgarmarr() {
  // @@protoc_insertion_point(field_add:pb.TSlgBagDataRsp.SlgArmArr)
  return slgarmarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TSlgBagDataRsp::slgarmarr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgBagDataRsp.SlgArmArr)
  return slgarmarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TSlgBagDataRsp::mutable_slgarmarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgBagDataRsp.SlgArmArr)
  return &slgarmarr_;
}

// repeated .pb.TSimpleItem SlgArmStuffArr = 3;
inline int TSlgBagDataRsp::slgarmstuffarr_size() const {
  return slgarmstuffarr_.size();
}
inline void TSlgBagDataRsp::clear_slgarmstuffarr() {
  slgarmstuffarr_.Clear();
}
inline const ::pb::TSimpleItem& TSlgBagDataRsp::slgarmstuffarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgBagDataRsp.SlgArmStuffArr)
  return slgarmstuffarr_.Get(index);
}
inline ::pb::TSimpleItem* TSlgBagDataRsp::mutable_slgarmstuffarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgBagDataRsp.SlgArmStuffArr)
  return slgarmstuffarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TSlgBagDataRsp::add_slgarmstuffarr() {
  // @@protoc_insertion_point(field_add:pb.TSlgBagDataRsp.SlgArmStuffArr)
  return slgarmstuffarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TSlgBagDataRsp::slgarmstuffarr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgBagDataRsp.SlgArmStuffArr)
  return slgarmstuffarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TSlgBagDataRsp::mutable_slgarmstuffarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgBagDataRsp.SlgArmStuffArr)
  return &slgarmstuffarr_;
}

// -------------------------------------------------------------------

// TSlgBagNotify

// repeated .pb.TSimpleItem SlgPropArr = 1;
inline int TSlgBagNotify::slgproparr_size() const {
  return slgproparr_.size();
}
inline void TSlgBagNotify::clear_slgproparr() {
  slgproparr_.Clear();
}
inline const ::pb::TSimpleItem& TSlgBagNotify::slgproparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgBagNotify.SlgPropArr)
  return slgproparr_.Get(index);
}
inline ::pb::TSimpleItem* TSlgBagNotify::mutable_slgproparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgBagNotify.SlgPropArr)
  return slgproparr_.Mutable(index);
}
inline ::pb::TSimpleItem* TSlgBagNotify::add_slgproparr() {
  // @@protoc_insertion_point(field_add:pb.TSlgBagNotify.SlgPropArr)
  return slgproparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TSlgBagNotify::slgproparr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgBagNotify.SlgPropArr)
  return slgproparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TSlgBagNotify::mutable_slgproparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgBagNotify.SlgPropArr)
  return &slgproparr_;
}

// repeated .pb.TSimpleItem SlgArmArr = 2;
inline int TSlgBagNotify::slgarmarr_size() const {
  return slgarmarr_.size();
}
inline void TSlgBagNotify::clear_slgarmarr() {
  slgarmarr_.Clear();
}
inline const ::pb::TSimpleItem& TSlgBagNotify::slgarmarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgBagNotify.SlgArmArr)
  return slgarmarr_.Get(index);
}
inline ::pb::TSimpleItem* TSlgBagNotify::mutable_slgarmarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgBagNotify.SlgArmArr)
  return slgarmarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TSlgBagNotify::add_slgarmarr() {
  // @@protoc_insertion_point(field_add:pb.TSlgBagNotify.SlgArmArr)
  return slgarmarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TSlgBagNotify::slgarmarr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgBagNotify.SlgArmArr)
  return slgarmarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TSlgBagNotify::mutable_slgarmarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgBagNotify.SlgArmArr)
  return &slgarmarr_;
}

// repeated .pb.TSimpleItem SlgArmStuffArr = 3;
inline int TSlgBagNotify::slgarmstuffarr_size() const {
  return slgarmstuffarr_.size();
}
inline void TSlgBagNotify::clear_slgarmstuffarr() {
  slgarmstuffarr_.Clear();
}
inline const ::pb::TSimpleItem& TSlgBagNotify::slgarmstuffarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgBagNotify.SlgArmStuffArr)
  return slgarmstuffarr_.Get(index);
}
inline ::pb::TSimpleItem* TSlgBagNotify::mutable_slgarmstuffarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgBagNotify.SlgArmStuffArr)
  return slgarmstuffarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TSlgBagNotify::add_slgarmstuffarr() {
  // @@protoc_insertion_point(field_add:pb.TSlgBagNotify.SlgArmStuffArr)
  return slgarmstuffarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TSlgBagNotify::slgarmstuffarr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgBagNotify.SlgArmStuffArr)
  return slgarmstuffarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TSlgBagNotify::mutable_slgarmstuffarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgBagNotify.SlgArmStuffArr)
  return &slgarmstuffarr_;
}

// -------------------------------------------------------------------

// TSlgBagRepileReq

// -------------------------------------------------------------------

// TSlgBagUseItemReq

// optional uint32 Tid = 1;
inline bool TSlgBagUseItemReq::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgBagUseItemReq::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgBagUseItemReq::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgBagUseItemReq::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TSlgBagUseItemReq::tid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgBagUseItemReq.Tid)
  return tid_;
}
inline void TSlgBagUseItemReq::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgBagUseItemReq.Tid)
}

// optional uint32 Num = 2;
inline bool TSlgBagUseItemReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSlgBagUseItemReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSlgBagUseItemReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSlgBagUseItemReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TSlgBagUseItemReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TSlgBagUseItemReq.Num)
  return num_;
}
inline void TSlgBagUseItemReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgBagUseItemReq.Num)
}

// -------------------------------------------------------------------

// TSlgBagUseItemRsp

// optional uint32 GridIndex = 1;
inline bool TSlgBagUseItemRsp::has_gridindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgBagUseItemRsp::set_has_gridindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgBagUseItemRsp::clear_has_gridindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgBagUseItemRsp::clear_gridindex() {
  gridindex_ = 0u;
  clear_has_gridindex();
}
inline ::google::protobuf::uint32 TSlgBagUseItemRsp::gridindex() const {
  // @@protoc_insertion_point(field_get:pb.TSlgBagUseItemRsp.GridIndex)
  return gridindex_;
}
inline void TSlgBagUseItemRsp::set_gridindex(::google::protobuf::uint32 value) {
  set_has_gridindex();
  gridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgBagUseItemRsp.GridIndex)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fSlgBag_2eproto__INCLUDED
