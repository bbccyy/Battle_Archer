// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/TaskData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/TaskData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TaskAccept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskAccept_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskTrigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskExtraInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskExtraInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ETaskMainType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETaskSubType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBehavoirBlackboardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETaskAcceptType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETaskTriggerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETaskTargetType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fTaskData_2eproto() {
  protobuf_AddDesc_module_2fTaskData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/TaskData.proto");
  GOOGLE_CHECK(file != NULL);
  TaskAccept_descriptor_ = file->message_type(0);
  static const int TaskAccept_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAccept, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAccept, data_),
  };
  TaskAccept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskAccept_descriptor_,
      TaskAccept::default_instance_,
      TaskAccept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAccept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAccept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskAccept));
  TaskTrigger_descriptor_ = file->message_type(1);
  static const int TaskTrigger_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTrigger, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTrigger, data_),
  };
  TaskTrigger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskTrigger_descriptor_,
      TaskTrigger::default_instance_,
      TaskTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTrigger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTrigger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskTrigger));
  TaskTarget_descriptor_ = file->message_type(2);
  static const int TaskTarget_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTarget, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTarget, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTarget, index_),
  };
  TaskTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskTarget_descriptor_,
      TaskTarget::default_instance_,
      TaskTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskTarget));
  TaskExtraInfo_descriptor_ = file->message_type(3);
  static const int TaskExtraInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskExtraInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskExtraInfo, data_),
  };
  TaskExtraInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskExtraInfo_descriptor_,
      TaskExtraInfo::default_instance_,
      TaskExtraInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskExtraInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskExtraInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskExtraInfo));
  TaskData_descriptor_ = file->message_type(4);
  static const int TaskData_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, maintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, localname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, localdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, acceptarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, triggeronaccept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, triggeroncomplete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, completetarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, extrainfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, usefortriggerbehavior_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, targetdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, needspecialdisplay_),
  };
  TaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskData_descriptor_,
      TaskData::default_instance_,
      TaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskData));
  ETaskMainType_descriptor_ = file->enum_type(0);
  ETaskSubType_descriptor_ = file->enum_type(1);
  EBehavoirBlackboardType_descriptor_ = file->enum_type(2);
  ETaskAcceptType_descriptor_ = file->enum_type(3);
  ETaskTriggerType_descriptor_ = file->enum_type(4);
  ETaskTargetType_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fTaskData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskAccept_descriptor_, &TaskAccept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskTrigger_descriptor_, &TaskTrigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskTarget_descriptor_, &TaskTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskExtraInfo_descriptor_, &TaskExtraInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskData_descriptor_, &TaskData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fTaskData_2eproto() {
  delete TaskAccept::default_instance_;
  delete TaskAccept_reflection_;
  delete TaskTrigger::default_instance_;
  delete TaskTrigger_reflection_;
  delete TaskTarget::default_instance_;
  delete TaskTarget_reflection_;
  delete TaskExtraInfo::default_instance_;
  delete TaskExtraInfo_reflection_;
  delete TaskData::default_instance_;
  delete TaskData_reflection_;
}

void protobuf_AddDesc_module_2fTaskData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fBehaviorData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025module/TaskData.proto\022\002pb\032\031module/Beha"
    "viorData.proto\"=\n\nTaskAccept\022!\n\004Type\030\001 \001"
    "(\0162\023.pb.ETaskAcceptType\022\014\n\004Data\030\002 \003(\t\"\?\n"
    "\013TaskTrigger\022\"\n\004Type\030\001 \001(\0162\024.pb.ETaskTri"
    "ggerType\022\014\n\004Data\030\002 \003(\t\"L\n\nTaskTarget\022!\n\004"
    "Type\030\001 \001(\0162\023.pb.ETaskTargetType\022\014\n\004Data\030"
    "\002 \003(\t\022\r\n\005Index\030\003 \001(\005\"A\n\rTaskExtraInfo\022\014\n"
    "\004Type\030\001 \001(\t\022\"\n\004Data\030\002 \003(\0132\024.pb.BehaviorK"
    "eyValue\"\304\003\n\010TaskData\022\n\n\002ID\030\001 \001(\005\022#\n\010Main"
    "Type\030\002 \001(\0162\021.pb.ETaskMainType\022!\n\007SubType"
    "\030\003 \001(\0162\020.pb.ETaskSubType\022\014\n\004Name\030\004 \001(\t\022\014"
    "\n\004Desc\030\005 \001(\t\022\014\n\004Icon\030\006 \001(\t\022\021\n\tLocalName\030"
    "\013 \001(\005\022\021\n\tLocalDesc\030\014 \001(\005\022!\n\tAcceptArr\030\007 "
    "\003(\0132\016.pb.TaskAccept\022(\n\017TriggerOnAccept\030\010"
    " \003(\0132\017.pb.TaskTrigger\022*\n\021TriggerOnComple"
    "te\030\t \003(\0132\017.pb.TaskTrigger\022&\n\016CompleteTar"
    "get\030\n \001(\0132\016.pb.TaskTarget\022$\n\tExtraInfo\030\r"
    " \003(\0132\021.pb.TaskExtraInfo\022\035\n\025UseForTrigger"
    "Behavior\030\016 \001(\010\022\022\n\nTargetDesc\030\017 \001(\005\022\032\n\022Ne"
    "edSpecialDisplay\030\020 \001(\010*.\n\rETaskMainType\022"
    "\013\n\007ALLMAIN\020\000\022\007\n\003RPG\020\001\022\007\n\003SLG\020\002*\237\001\n\014ETask"
    "SubType\022\n\n\006ALLSUB\020\000\022\014\n\010MAINLINE\020\001\022\n\n\006BRA"
    "NCH\020\002\022\020\n\014FEMALEMASTER\020\003\022\n\n\006MASTER\020\004\022\017\n\013A"
    "CHIEVEMENT\020\005\022\014\n\010ACTIVITY\020\006\022\t\n\005DAILY\020\007\022\014\n"
    "\010FAVORITE\020\010\022\023\n\017REWARD_ACTIVITY\020\t*_\n\027EBeh"
    "avoirBlackboardType\022\037\n\033BEHAVIOR_BLACKBOA"
    "RD_INVALID\020\000\022#\n\037BEHAVIOR_BLACKBOARD_INTE"
    "RACTIVE\020\001*\366\003\n\017ETaskAcceptType\022\017\n\013NULL_AC"
    "CEPT\020\000\022\026\n\022ENTER_TRIGGER_COPY\020\001\022\031\n\025ENTER_"
    "TRIGGER_DUNGEON\020\002\022\026\n\022ENTER_TRIGGER_AREA\020"
    "\003\022\026\n\022USER_TRIGGER_LEVEL\020\004\022\032\n\026BUILDING_TR"
    "IGGER_LEVEL\020\005\022\024\n\020USE_TRIGGER_ITEM\020\006\022\024\n\020S"
    "LG_MAP_OPEN_DAY\020\007\022\021\n\rCOMPLETE_TASK\020\010\022\026\n\022"
    "TOUCH_TRIGGER_AREA\020\t\022\024\n\020TIME_LIMIT_RANGE"
    "\020\n\022\030\n\024FEMALEMASTER_FEELING\020\013\022\030\n\024ENTER_SP"
    "ECIFIC_SECNE\020\014\022\023\n\017CONTINUED_CLICK\020\r\022\026\n\022F"
    "EMALEMASTER_GIFTS\020\016\022\023\n\017STRONGHOLD_PASS\020\017"
    "\022\020\n\014CHAPTER_PASS\020\020\022\032\n\026MULTI_TIME_LIMIT_R"
    "ANGE\020\021\022\022\n\016ENTER_NPC_AREA\020\022\022\027\n\023USE_HERO_F"
    "AVOR_ITEM\020\023\022\025\n\021SERVICE_OPEN_TIME\020\024*\236\001\n\020E"
    "TaskTriggerType\022\020\n\014NULL_TRIGGER\020\000\022\024\n\020TRI"
    "GGER_BEHAVIOR\020\001\022\017\n\013OBTAIN_ITEM\020\002\022\020\n\014OBTA"
    "IN_MONEY\020\003\022\020\n\014DESTORY_ITEM\020\005\022\022\n\016TRIGGER_"
    "DIALOG\020\006\022\031\n\025TRIGGER_NORMAL_DIALOG\020\007*\310\031\n\017"
    "ETaskTargetType\022\017\n\013NULL_TARGET\020\000\022\021\n\rENTE"
    "R_DUNGEON\020\001\022\017\n\013JOIN_BATTLE\020\002\022\023\n\017BATTLE_V"
    "IVCTORY\020\003\022\024\n\020UPGRADE_BUILDING\020\004\022\020\n\014RECRU"
    "IT_HERO\020\005\022\023\n\017TOWER_CHALLENGE\020\007\022\016\n\nJOIN_A"
    "RENA\020\010\022\014\n\010USE_ITEM\020\t\022\017\n\013BUY_STAMINA\020\n\022\021\n"
    "\rLEVEL_UPGRADE\020\013\022\016\n\nUSER_LEVEL\020\014\022\016\n\nADD_"
    "FRIEND\020\r\022\016\n\nJOIN_UNION\020\016\022\r\n\tVIP_LEVEL\020\017\022"
    "\020\n\014COMBAT_VALUE\020\020\022\017\n\013EQUIP_LEVEL\020\022\022\026\n\022EQ"
    "UIP_REFINE_LEVEL\020C\022\033\n\027ACCESSORY_ENHANCE_"
    "LEVEL\020D\022\032\n\026ACCESSORY_REFINE_LEVEL\020E\022\022\n\016H"
    "ERO_EQUIP_ARM\020J\022\030\n\024HERO_EQUIP_ACCESSORY\020"
    "K\022\022\n\016BUILDING_LEVEL\020\023\022\017\n\013TOWER_LEVEL\020\024\022\016"
    "\n\nARENA_RANK\020\025\022\025\n\021OBTAIN_ITEM_TOTAL\020\026\022\026\n"
    "\022OBTAIN_MONEY_TOTAL\020\027\022\020\n\014ATTACK_ENEMY\020\030\022"
    "\017\n\013ATTACK_CITY\020\031\022\026\n\022ATTACK_ENEMY_TOTAL\020\032"
    "\022\031\n\025COMPLETE_ALL_SUB_TASK\020\033\022\035\n\031TARGET_EN"
    "TER_TRIGGER_AREA\020\034\022\030\n\024TARGET_HERO_LEVEL_"
    "UP\020\035\022\027\n\023TARGET_HERO_STAR_UP\020\036\022\032\n\026TARGET_"
    "HERO_ADVANCE_UP\020\037\022\036\n\032TARGET_EQUIP_ENHANC"
    "E_COUNT\020 \022\033\n\027TARGET_HERO_LEVEL_REACH\020!\022\033"
    "\n\027TARGET_HERO_START_REACH\020\"\022\035\n\031TARGET_HE"
    "RO_ADVANCE_REACH\020#\022\037\n\033TARGET_INTERACTIVE"
    "_SCENE_UI\020$\022\035\n\031TARGET_TOUCH_TRIGGER_AREA"
    "\020%\022%\n!TARGET_FINISH_FEMALEMASTER_DIALOG\020"
    "&\022\037\n\033TARGET_ENTER_SPECIFIC_SECNE\020\'\022\027\n\023TA"
    "RGET_GUILD_DONATE\020(\022\025\n\021TARGET_BUILD_CITY"
    "\020)\022\025\n\021TARGET_EXPEDITION\020*\022 \n\034TARGET_EXPE"
    "DITION_LEVEL_PASS\020F\022\030\n\024TARGET_TASK_MAINL"
    "INE\020+\022\030\n\024TARGET_HERO_RELATION\020,\022\030\n\024TARGE"
    "T_SKILL_LEVELUP\020-\022\024\n\020TARGET_ADVENTURE\020.\022"
    "\025\n\021TARGET_ARM_REFINE\020/\022\033\n\027TARGET_ACCESSO"
    "RY_REFINE\0200\022\030\n\024TARGET_RECYCLE_EQUIP\0201\022\032\n"
    "\026TARGET_EQUIP_ACCESSORY\0202\022\033\n\027TARGET_BUY_"
    "ITEM_IN_SHOP\0203\022\034\n\030TARGET_ENTER_NATIONALW"
    "AR\0204\022$\n TARGET_START_FEMALEMASTER_DIALOG"
    "\0205\022\035\n\031TARGET_START_STORY_DIALOG\0206\022\036\n\032TAR"
    "GET_FINISH_STORY_DIALOG\0207\022\037\n\033TARGET_ELIT"
    "E_BATTLE_VICTORY\0208\022\035\n\031TARGET_GUILD_DONAT"
    "E_TOTAL\0209\022\037\n\033TARGET_ARENA_BATTLE_VICTORY"
    "\020:\022\036\n\032TARGET_INSTANCE_STAR_COUNT\020;\022\025\n\021TA"
    "RGET_HERO_COUNT\020<\022\024\n\020TARGET_GET_EQUIP\020=\022"
    "\023\n\017TARGET_GET_SUIT\020>\022\031\n\025TARGET_PASS_ADVE"
    "NTURE\020\?\022\034\n\030TARGET_RECEIVE_MONTHCARD\020@\022\037\n"
    "\033TARGET_INSTANCE_INTERACTIVE\020A\022\032\n\026TARGET"
    "_FINISH_MINIGAME\020B\022\034\n\030TARGET_GUILD_BOSS_"
    "ATTACK\020G\022\036\n\032TARGET_ILLUSTRATION_UNLOCK\020H"
    "\022\030\n\024TARGET_INSTANCE_PASS\020L\022\035\n\031TARGET_ELI"
    "TEINSTANCE_PASS\020M\022\023\n\017JOIN_BATTLE_WIN\020N\022\017"
    "\n\013DAILY_LOGIN\020O\022\036\n\032PRESENT_STRENGTH_TO_F"
    "RIEND\020P\022\016\n\nBUY_SILVER\020Q\022\027\n\023PRESENT_GUILD"
    "_CHIPS\020R\022$\n PRESENT_SOUVENIR_TO_FEMALEMA"
    "STER\020S\022\024\n\020TOWER_BATTLE_WIN\020T\022\026\n\022HERO_UPG"
    "RADE_COUNT\020V\022\027\n\023SKILL_UPGRADE_COUNT\020W\022\030\n"
    "\024TARGET_HERO_IN_SQUAD\020X\022!\n\035TARGET_INSTAN"
    "CE_ITEM_EXCHANGE\020Y\022\035\n\031GAINED_TOTAL_HANDB"
    "OOK_NUM\020Z\022\033\n\027SEND_GUILD_RED_ENVELOPE\020[\022\036"
    "\n\032MESSAGE_WAS_THUMB_UP_COUNT\020\\\022\026\n\022HERO_H"
    "AS_EXCLEQUIP\020]\022\027\n\023HERO_FAVORITE_LEVEL\020^\022"
    " \n\034SEND_HERO_FAVORITEGIFT_COUNT\020_\022\"\n\036EXC"
    "LEQUIP_ADVANCE_ARRIVE_LEVEL\020`\022\037\n\033ENTER_A"
    "DVATURE_TYPE_AND_NUM\020a\022\025\n\021ADVATURE_PASS_"
    "NUM\020b\022%\n!MULTITIMES_PUBS_ONCE_RED_HERO_N"
    "UM\020c\022,\n(MULTITIMES_PUBS_TEN_TIMES_ALL_WO"
    "RST_HERO\020d\022\034\n\030PASS_LATENT_INSTANCE_NUM\020e"
    "\022$\n GET_ALL_OBJECTIVE_IN_CHAPTER_NUM\020f\022\032"
    "\n\026WORLDBOSS_ATTACK_TIMES\020g\022\033\n\027EXCAVATE_T"
    "REASURE_TIMES\020h\022\034\n\030LEVY_DEFEAT_PLAYER_TI"
    "MES\020i\022\033\n\027LEVY_GET_BENEFITS_TIMES\020j\022\034\n\030WO"
    "RLDBOSS_ARRIVE_RANKING\020k\022 \n\034LEVY_GET_GAM"
    "E_CURRENCY_TOTAL\020l\022)\n%TARGET_EXPEDITION_"
    "CHALLENGE_WIN_TIMES\020m\022#\n\037ADVANCED_ARENA_"
    "CHANLLENGE_TIMES\020n\022\'\n#ADVANCED_ARENA_CHA"
    "NLLENGE_WIN_TIMES\020o\022\037\n\033TRIAL_LAND_CHANLL"
    "ENGE_TIMES\020p\022#\n\037TRIAL_LAND_CHANLLENGE_WI"
    "N_TIMES\020q\022 \n\034TRIAL_LAND_ACHIEVE_HIERARCH"
    "Y\020r\022#\n\037BEAST_INSTANCE_CHANLLENGE_TIMES\020s"
    "\022\'\n#BEAST_INSTANCE_CHANLLENGE_WIN_TIMES\020"
    "t\022 \n\034BEAST_INSTANCE_ACHIEVE_LEVEL\020u\022\035\n\031H"
    "ALL_FAME_THUMBS_UP_TIMES\020v\022\024\n\020GUILD_WISH"
    "_TIMES\020w\022\031\n\025HERO_STAR_LEVEL_TOTAL\020x\022\027\n\023D"
    "EFEAT_REBELS_TIMES\020y\022\031\n\025TRIAL_LAND_PASS_"
    "PILES\020z\022\025\n\021LOGIN_TIMES_TOTAL\020{", 5030);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/TaskData.proto", &protobuf_RegisterTypes);
  TaskAccept::default_instance_ = new TaskAccept();
  TaskTrigger::default_instance_ = new TaskTrigger();
  TaskTarget::default_instance_ = new TaskTarget();
  TaskExtraInfo::default_instance_ = new TaskExtraInfo();
  TaskData::default_instance_ = new TaskData();
  TaskAccept::default_instance_->InitAsDefaultInstance();
  TaskTrigger::default_instance_->InitAsDefaultInstance();
  TaskTarget::default_instance_->InitAsDefaultInstance();
  TaskExtraInfo::default_instance_->InitAsDefaultInstance();
  TaskData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fTaskData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fTaskData_2eproto {
  StaticDescriptorInitializer_module_2fTaskData_2eproto() {
    protobuf_AddDesc_module_2fTaskData_2eproto();
  }
} static_descriptor_initializer_module_2fTaskData_2eproto_;
const ::google::protobuf::EnumDescriptor* ETaskMainType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETaskMainType_descriptor_;
}
bool ETaskMainType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETaskSubType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETaskSubType_descriptor_;
}
bool ETaskSubType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBehavoirBlackboardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBehavoirBlackboardType_descriptor_;
}
bool EBehavoirBlackboardType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETaskAcceptType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETaskAcceptType_descriptor_;
}
bool ETaskAcceptType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETaskTriggerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETaskTriggerType_descriptor_;
}
bool ETaskTriggerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETaskTargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETaskTargetType_descriptor_;
}
bool ETaskTargetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TaskAccept::kTypeFieldNumber;
const int TaskAccept::kDataFieldNumber;
#endif  // !_MSC_VER

TaskAccept::TaskAccept()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TaskAccept)
}

void TaskAccept::InitAsDefaultInstance() {
}

TaskAccept::TaskAccept(const TaskAccept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TaskAccept)
}

void TaskAccept::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskAccept::~TaskAccept() {
  // @@protoc_insertion_point(destructor:pb.TaskAccept)
  SharedDtor();
}

void TaskAccept::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskAccept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskAccept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskAccept_descriptor_;
}

const TaskAccept& TaskAccept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fTaskData_2eproto();
  return *default_instance_;
}

TaskAccept* TaskAccept::default_instance_ = NULL;

TaskAccept* TaskAccept::New() const {
  return new TaskAccept;
}

void TaskAccept::Clear() {
  type_ = 0;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskAccept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TaskAccept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ETaskAcceptType Type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETaskAcceptType_IsValid(value)) {
            set_type(static_cast< ::pb::ETaskAcceptType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // repeated string Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data(this->data_size() - 1).data(),
            this->data(this->data_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TaskAccept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TaskAccept)
  return false;
#undef DO_
}

void TaskAccept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TaskAccept)
  // optional .pb.ETaskAcceptType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated string Data = 2;
  for (int i = 0; i < this->data_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->data(i).data(), this->data(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "data");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TaskAccept)
}

::google::protobuf::uint8* TaskAccept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TaskAccept)
  // optional .pb.ETaskAcceptType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated string Data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data(i).data(), this->data(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TaskAccept)
  return target;
}

int TaskAccept::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ETaskAcceptType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated string Data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskAccept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskAccept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskAccept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskAccept::MergeFrom(const TaskAccept& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskAccept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskAccept::CopyFrom(const TaskAccept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskAccept::IsInitialized() const {

  return true;
}

void TaskAccept::Swap(TaskAccept* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskAccept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskAccept_descriptor_;
  metadata.reflection = TaskAccept_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskTrigger::kTypeFieldNumber;
const int TaskTrigger::kDataFieldNumber;
#endif  // !_MSC_VER

TaskTrigger::TaskTrigger()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TaskTrigger)
}

void TaskTrigger::InitAsDefaultInstance() {
}

TaskTrigger::TaskTrigger(const TaskTrigger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TaskTrigger)
}

void TaskTrigger::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskTrigger::~TaskTrigger() {
  // @@protoc_insertion_point(destructor:pb.TaskTrigger)
  SharedDtor();
}

void TaskTrigger::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskTrigger_descriptor_;
}

const TaskTrigger& TaskTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fTaskData_2eproto();
  return *default_instance_;
}

TaskTrigger* TaskTrigger::default_instance_ = NULL;

TaskTrigger* TaskTrigger::New() const {
  return new TaskTrigger;
}

void TaskTrigger::Clear() {
  type_ = 0;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TaskTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ETaskTriggerType Type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETaskTriggerType_IsValid(value)) {
            set_type(static_cast< ::pb::ETaskTriggerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // repeated string Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data(this->data_size() - 1).data(),
            this->data(this->data_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TaskTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TaskTrigger)
  return false;
#undef DO_
}

void TaskTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TaskTrigger)
  // optional .pb.ETaskTriggerType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated string Data = 2;
  for (int i = 0; i < this->data_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->data(i).data(), this->data(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "data");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TaskTrigger)
}

::google::protobuf::uint8* TaskTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TaskTrigger)
  // optional .pb.ETaskTriggerType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated string Data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data(i).data(), this->data(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TaskTrigger)
  return target;
}

int TaskTrigger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ETaskTriggerType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated string Data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskTrigger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskTrigger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskTrigger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskTrigger::MergeFrom(const TaskTrigger& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskTrigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskTrigger::CopyFrom(const TaskTrigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskTrigger::IsInitialized() const {

  return true;
}

void TaskTrigger::Swap(TaskTrigger* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskTrigger_descriptor_;
  metadata.reflection = TaskTrigger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskTarget::kTypeFieldNumber;
const int TaskTarget::kDataFieldNumber;
const int TaskTarget::kIndexFieldNumber;
#endif  // !_MSC_VER

TaskTarget::TaskTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TaskTarget)
}

void TaskTarget::InitAsDefaultInstance() {
}

TaskTarget::TaskTarget(const TaskTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TaskTarget)
}

void TaskTarget::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskTarget::~TaskTarget() {
  // @@protoc_insertion_point(destructor:pb.TaskTarget)
  SharedDtor();
}

void TaskTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskTarget_descriptor_;
}

const TaskTarget& TaskTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fTaskData_2eproto();
  return *default_instance_;
}

TaskTarget* TaskTarget::default_instance_ = NULL;

TaskTarget* TaskTarget::New() const {
  return new TaskTarget;
}

void TaskTarget::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaskTarget*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TaskTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ETaskTargetType Type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETaskTargetType_IsValid(value)) {
            set_type(static_cast< ::pb::ETaskTargetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // repeated string Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data(this->data_size() - 1).data(),
            this->data(this->data_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        if (input->ExpectTag(24)) goto parse_Index;
        break;
      }

      // optional int32 Index = 3;
      case 3: {
        if (tag == 24) {
         parse_Index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TaskTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TaskTarget)
  return false;
#undef DO_
}

void TaskTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TaskTarget)
  // optional .pb.ETaskTargetType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated string Data = 2;
  for (int i = 0; i < this->data_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->data(i).data(), this->data(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "data");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data(i), output);
  }

  // optional int32 Index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TaskTarget)
}

::google::protobuf::uint8* TaskTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TaskTarget)
  // optional .pb.ETaskTargetType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated string Data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data(i).data(), this->data(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->data(i), target);
  }

  // optional int32 Index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TaskTarget)
  return target;
}

int TaskTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ETaskTargetType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 Index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated string Data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskTarget::MergeFrom(const TaskTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskTarget::CopyFrom(const TaskTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskTarget::IsInitialized() const {

  return true;
}

void TaskTarget::Swap(TaskTarget* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    data_.Swap(&other->data_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskTarget_descriptor_;
  metadata.reflection = TaskTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskExtraInfo::kTypeFieldNumber;
const int TaskExtraInfo::kDataFieldNumber;
#endif  // !_MSC_VER

TaskExtraInfo::TaskExtraInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TaskExtraInfo)
}

void TaskExtraInfo::InitAsDefaultInstance() {
}

TaskExtraInfo::TaskExtraInfo(const TaskExtraInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TaskExtraInfo)
}

void TaskExtraInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskExtraInfo::~TaskExtraInfo() {
  // @@protoc_insertion_point(destructor:pb.TaskExtraInfo)
  SharedDtor();
}

void TaskExtraInfo::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void TaskExtraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskExtraInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskExtraInfo_descriptor_;
}

const TaskExtraInfo& TaskExtraInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fTaskData_2eproto();
  return *default_instance_;
}

TaskExtraInfo* TaskExtraInfo::default_instance_ = NULL;

TaskExtraInfo* TaskExtraInfo::New() const {
  return new TaskExtraInfo;
}

void TaskExtraInfo::Clear() {
  if (has_type()) {
    if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      type_->clear();
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskExtraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TaskExtraInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // repeated .pb.BehaviorKeyValue Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TaskExtraInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TaskExtraInfo)
  return false;
#undef DO_
}

void TaskExtraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TaskExtraInfo)
  // optional string Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // repeated .pb.BehaviorKeyValue Data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TaskExtraInfo)
}

::google::protobuf::uint8* TaskExtraInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TaskExtraInfo)
  // optional string Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // repeated .pb.BehaviorKeyValue Data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TaskExtraInfo)
  return target;
}

int TaskExtraInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  // repeated .pb.BehaviorKeyValue Data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskExtraInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskExtraInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskExtraInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskExtraInfo::MergeFrom(const TaskExtraInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskExtraInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExtraInfo::CopyFrom(const TaskExtraInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExtraInfo::IsInitialized() const {

  return true;
}

void TaskExtraInfo::Swap(TaskExtraInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskExtraInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskExtraInfo_descriptor_;
  metadata.reflection = TaskExtraInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskData::kIDFieldNumber;
const int TaskData::kMainTypeFieldNumber;
const int TaskData::kSubTypeFieldNumber;
const int TaskData::kNameFieldNumber;
const int TaskData::kDescFieldNumber;
const int TaskData::kIconFieldNumber;
const int TaskData::kLocalNameFieldNumber;
const int TaskData::kLocalDescFieldNumber;
const int TaskData::kAcceptArrFieldNumber;
const int TaskData::kTriggerOnAcceptFieldNumber;
const int TaskData::kTriggerOnCompleteFieldNumber;
const int TaskData::kCompleteTargetFieldNumber;
const int TaskData::kExtraInfoFieldNumber;
const int TaskData::kUseForTriggerBehaviorFieldNumber;
const int TaskData::kTargetDescFieldNumber;
const int TaskData::kNeedSpecialDisplayFieldNumber;
#endif  // !_MSC_VER

TaskData::TaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TaskData)
}

void TaskData::InitAsDefaultInstance() {
  completetarget_ = const_cast< ::pb::TaskTarget*>(&::pb::TaskTarget::default_instance());
}

TaskData::TaskData(const TaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TaskData)
}

void TaskData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  maintype_ = 0;
  subtype_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  localname_ = 0;
  localdesc_ = 0;
  completetarget_ = NULL;
  usefortriggerbehavior_ = false;
  targetdesc_ = 0;
  needspecialdisplay_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskData::~TaskData() {
  // @@protoc_insertion_point(destructor:pb.TaskData)
  SharedDtor();
}

void TaskData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (this != default_instance_) {
    delete completetarget_;
  }
}

void TaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskData_descriptor_;
}

const TaskData& TaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fTaskData_2eproto();
  return *default_instance_;
}

TaskData* TaskData::default_instance_ = NULL;

TaskData* TaskData::New() const {
  return new TaskData;
}

void TaskData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaskData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, maintype_);
    ZR_(subtype_, localname_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_->clear();
      }
    }
    localdesc_ = 0;
  }
  if (_has_bits_[8 / 32] & 59392) {
    ZR_(usefortriggerbehavior_, needspecialdisplay_);
    if (has_completetarget()) {
      if (completetarget_ != NULL) completetarget_->::pb::TaskTarget::Clear();
    }
    targetdesc_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  acceptarr_.Clear();
  triggeronaccept_.Clear();
  triggeroncomplete_.Clear();
  extrainfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TaskData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MainType;
        break;
      }

      // optional .pb.ETaskMainType MainType = 2;
      case 2: {
        if (tag == 16) {
         parse_MainType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETaskMainType_IsValid(value)) {
            set_maintype(static_cast< ::pb::ETaskMainType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SubType;
        break;
      }

      // optional .pb.ETaskSubType SubType = 3;
      case 3: {
        if (tag == 24) {
         parse_SubType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETaskSubType_IsValid(value)) {
            set_subtype(static_cast< ::pb::ETaskSubType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Name;
        break;
      }

      // optional string Name = 4;
      case 4: {
        if (tag == 34) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Desc;
        break;
      }

      // optional string Desc = 5;
      case 5: {
        if (tag == 42) {
         parse_Desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Icon;
        break;
      }

      // optional string Icon = 6;
      case 6: {
        if (tag == 50) {
         parse_Icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_AcceptArr;
        break;
      }

      // repeated .pb.TaskAccept AcceptArr = 7;
      case 7: {
        if (tag == 58) {
         parse_AcceptArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acceptarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_AcceptArr;
        if (input->ExpectTag(66)) goto parse_TriggerOnAccept;
        break;
      }

      // repeated .pb.TaskTrigger TriggerOnAccept = 8;
      case 8: {
        if (tag == 66) {
         parse_TriggerOnAccept:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triggeronaccept()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_TriggerOnAccept;
        if (input->ExpectTag(74)) goto parse_TriggerOnComplete;
        break;
      }

      // repeated .pb.TaskTrigger TriggerOnComplete = 9;
      case 9: {
        if (tag == 74) {
         parse_TriggerOnComplete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triggeroncomplete()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_TriggerOnComplete;
        if (input->ExpectTag(82)) goto parse_CompleteTarget;
        break;
      }

      // optional .pb.TaskTarget CompleteTarget = 10;
      case 10: {
        if (tag == 82) {
         parse_CompleteTarget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_completetarget()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_LocalName;
        break;
      }

      // optional int32 LocalName = 11;
      case 11: {
        if (tag == 88) {
         parse_LocalName:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &localname_)));
          set_has_localname();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_LocalDesc;
        break;
      }

      // optional int32 LocalDesc = 12;
      case 12: {
        if (tag == 96) {
         parse_LocalDesc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &localdesc_)));
          set_has_localdesc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ExtraInfo;
        break;
      }

      // repeated .pb.TaskExtraInfo ExtraInfo = 13;
      case 13: {
        if (tag == 106) {
         parse_ExtraInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extrainfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ExtraInfo;
        if (input->ExpectTag(112)) goto parse_UseForTriggerBehavior;
        break;
      }

      // optional bool UseForTriggerBehavior = 14;
      case 14: {
        if (tag == 112) {
         parse_UseForTriggerBehavior:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usefortriggerbehavior_)));
          set_has_usefortriggerbehavior();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_TargetDesc;
        break;
      }

      // optional int32 TargetDesc = 15;
      case 15: {
        if (tag == 120) {
         parse_TargetDesc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetdesc_)));
          set_has_targetdesc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_NeedSpecialDisplay;
        break;
      }

      // optional bool NeedSpecialDisplay = 16;
      case 16: {
        if (tag == 128) {
         parse_NeedSpecialDisplay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needspecialdisplay_)));
          set_has_needspecialdisplay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TaskData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TaskData)
  return false;
#undef DO_
}

void TaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TaskData)
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .pb.ETaskMainType MainType = 2;
  if (has_maintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->maintype(), output);
  }

  // optional .pb.ETaskSubType SubType = 3;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->subtype(), output);
  }

  // optional string Name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string Desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->desc(), output);
  }

  // optional string Icon = 6;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->icon(), output);
  }

  // repeated .pb.TaskAccept AcceptArr = 7;
  for (int i = 0; i < this->acceptarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->acceptarr(i), output);
  }

  // repeated .pb.TaskTrigger TriggerOnAccept = 8;
  for (int i = 0; i < this->triggeronaccept_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->triggeronaccept(i), output);
  }

  // repeated .pb.TaskTrigger TriggerOnComplete = 9;
  for (int i = 0; i < this->triggeroncomplete_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->triggeroncomplete(i), output);
  }

  // optional .pb.TaskTarget CompleteTarget = 10;
  if (has_completetarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->completetarget(), output);
  }

  // optional int32 LocalName = 11;
  if (has_localname()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->localname(), output);
  }

  // optional int32 LocalDesc = 12;
  if (has_localdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->localdesc(), output);
  }

  // repeated .pb.TaskExtraInfo ExtraInfo = 13;
  for (int i = 0; i < this->extrainfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->extrainfo(i), output);
  }

  // optional bool UseForTriggerBehavior = 14;
  if (has_usefortriggerbehavior()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->usefortriggerbehavior(), output);
  }

  // optional int32 TargetDesc = 15;
  if (has_targetdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->targetdesc(), output);
  }

  // optional bool NeedSpecialDisplay = 16;
  if (has_needspecialdisplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->needspecialdisplay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TaskData)
}

::google::protobuf::uint8* TaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TaskData)
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .pb.ETaskMainType MainType = 2;
  if (has_maintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->maintype(), target);
  }

  // optional .pb.ETaskSubType SubType = 3;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->subtype(), target);
  }

  // optional string Name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string Desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desc(), target);
  }

  // optional string Icon = 6;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->icon(), target);
  }

  // repeated .pb.TaskAccept AcceptArr = 7;
  for (int i = 0; i < this->acceptarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->acceptarr(i), target);
  }

  // repeated .pb.TaskTrigger TriggerOnAccept = 8;
  for (int i = 0; i < this->triggeronaccept_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->triggeronaccept(i), target);
  }

  // repeated .pb.TaskTrigger TriggerOnComplete = 9;
  for (int i = 0; i < this->triggeroncomplete_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->triggeroncomplete(i), target);
  }

  // optional .pb.TaskTarget CompleteTarget = 10;
  if (has_completetarget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->completetarget(), target);
  }

  // optional int32 LocalName = 11;
  if (has_localname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->localname(), target);
  }

  // optional int32 LocalDesc = 12;
  if (has_localdesc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->localdesc(), target);
  }

  // repeated .pb.TaskExtraInfo ExtraInfo = 13;
  for (int i = 0; i < this->extrainfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->extrainfo(i), target);
  }

  // optional bool UseForTriggerBehavior = 14;
  if (has_usefortriggerbehavior()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->usefortriggerbehavior(), target);
  }

  // optional int32 TargetDesc = 15;
  if (has_targetdesc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->targetdesc(), target);
  }

  // optional bool NeedSpecialDisplay = 16;
  if (has_needspecialdisplay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->needspecialdisplay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TaskData)
  return target;
}

int TaskData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .pb.ETaskMainType MainType = 2;
    if (has_maintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->maintype());
    }

    // optional .pb.ETaskSubType SubType = 3;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subtype());
    }

    // optional string Name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Desc = 5;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string Icon = 6;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional int32 LocalName = 11;
    if (has_localname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->localname());
    }

    // optional int32 LocalDesc = 12;
    if (has_localdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->localdesc());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional .pb.TaskTarget CompleteTarget = 10;
    if (has_completetarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->completetarget());
    }

    // optional bool UseForTriggerBehavior = 14;
    if (has_usefortriggerbehavior()) {
      total_size += 1 + 1;
    }

    // optional int32 TargetDesc = 15;
    if (has_targetdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetdesc());
    }

    // optional bool NeedSpecialDisplay = 16;
    if (has_needspecialdisplay()) {
      total_size += 2 + 1;
    }

  }
  // repeated .pb.TaskAccept AcceptArr = 7;
  total_size += 1 * this->acceptarr_size();
  for (int i = 0; i < this->acceptarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acceptarr(i));
  }

  // repeated .pb.TaskTrigger TriggerOnAccept = 8;
  total_size += 1 * this->triggeronaccept_size();
  for (int i = 0; i < this->triggeronaccept_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triggeronaccept(i));
  }

  // repeated .pb.TaskTrigger TriggerOnComplete = 9;
  total_size += 1 * this->triggeroncomplete_size();
  for (int i = 0; i < this->triggeroncomplete_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triggeroncomplete(i));
  }

  // repeated .pb.TaskExtraInfo ExtraInfo = 13;
  total_size += 1 * this->extrainfo_size();
  for (int i = 0; i < this->extrainfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extrainfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskData::MergeFrom(const TaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  acceptarr_.MergeFrom(from.acceptarr_);
  triggeronaccept_.MergeFrom(from.triggeronaccept_);
  triggeroncomplete_.MergeFrom(from.triggeroncomplete_);
  extrainfo_.MergeFrom(from.extrainfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_maintype()) {
      set_maintype(from.maintype());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_localname()) {
      set_localname(from.localname());
    }
    if (from.has_localdesc()) {
      set_localdesc(from.localdesc());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_completetarget()) {
      mutable_completetarget()->::pb::TaskTarget::MergeFrom(from.completetarget());
    }
    if (from.has_usefortriggerbehavior()) {
      set_usefortriggerbehavior(from.usefortriggerbehavior());
    }
    if (from.has_targetdesc()) {
      set_targetdesc(from.targetdesc());
    }
    if (from.has_needspecialdisplay()) {
      set_needspecialdisplay(from.needspecialdisplay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskData::CopyFrom(const TaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskData::IsInitialized() const {

  return true;
}

void TaskData::Swap(TaskData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(maintype_, other->maintype_);
    std::swap(subtype_, other->subtype_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(icon_, other->icon_);
    std::swap(localname_, other->localname_);
    std::swap(localdesc_, other->localdesc_);
    acceptarr_.Swap(&other->acceptarr_);
    triggeronaccept_.Swap(&other->triggeronaccept_);
    triggeroncomplete_.Swap(&other->triggeroncomplete_);
    std::swap(completetarget_, other->completetarget_);
    extrainfo_.Swap(&other->extrainfo_);
    std::swap(usefortriggerbehavior_, other->usefortriggerbehavior_);
    std::swap(targetdesc_, other->targetdesc_);
    std::swap(needspecialdisplay_, other->needspecialdisplay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskData_descriptor_;
  metadata.reflection = TaskData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
