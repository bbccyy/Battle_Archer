// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossActImperialWar.proto

#ifndef PROTOBUF_net_2fCrossActImperialWar_2eproto__INCLUDED
#define PROTOBUF_net_2fCrossActImperialWar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/Util.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
void protobuf_AssignDesc_net_2fCrossActImperialWar_2eproto();
void protobuf_ShutdownFile_net_2fCrossActImperialWar_2eproto();

class TActImperialWarMoveReq;
class TActImperialWarAttackReq;
class TActImperialWarTouchReq;
class TActImperialWarSetUserOptReq;
class TActImperialWarSetArmyOptReq;
class TActImperialWarRankInfo;
class TActImperialWarGetRankListReq;
class TActImperialWarGetRankListRsp;
class TActImperialWarBaseUserInfoReq;
class TActImperialWarBaseUserInfoRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActImperialWarMoveReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarMoveReq : public ::google::protobuf::Message {
 public:
  TActImperialWarMoveReq();
  virtual ~TActImperialWarMoveReq();

  TActImperialWarMoveReq(const TActImperialWarMoveReq& from);

  inline TActImperialWarMoveReq& operator=(const TActImperialWarMoveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarMoveReq& default_instance();

  void Swap(TActImperialWarMoveReq* other);

  // implements Message ----------------------------------------------

  TActImperialWarMoveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarMoveReq& from);
  void MergeFrom(const TActImperialWarMoveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.PbVector2_Int TargetPos = 1;
  inline bool has_targetpos() const;
  inline void clear_targetpos();
  static const int kTargetPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarMoveReq</name>
  	<Function>
  		<name>targetpos</name>
  		<replaceName>TargetPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetpos</name>
  		<replaceName>TargetPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_targetpos</name>
  		<replaceName>TargetPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetpos</name>
  		<replaceName>TargetPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& targetpos() const;
  inline ::pb::PbVector2_Int* mutable_targetpos();
  inline ::pb::PbVector2_Int* release_targetpos();
  inline void set_allocated_targetpos(::pb::PbVector2_Int* targetpos);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarMoveReq)
 private:
  inline void set_has_targetpos();
  inline void clear_has_targetpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::PbVector2_Int* targetpos_;
  friend void  protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarMoveReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarAttackReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarAttackReq : public ::google::protobuf::Message {
 public:
  TActImperialWarAttackReq();
  virtual ~TActImperialWarAttackReq();

  TActImperialWarAttackReq(const TActImperialWarAttackReq& from);

  inline TActImperialWarAttackReq& operator=(const TActImperialWarAttackReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarAttackReq& default_instance();

  void Swap(TActImperialWarAttackReq* other);

  // implements Message ----------------------------------------------

  TActImperialWarAttackReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarAttackReq& from);
  void MergeFrom(const TActImperialWarAttackReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TargetId = 1;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarAttackReq</name>
  	<Function>
  		<name>targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarAttackReq)
 private:
  inline void set_has_targetid();
  inline void clear_has_targetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 targetid_;
  friend void  protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarAttackReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarTouchReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarTouchReq : public ::google::protobuf::Message {
 public:
  TActImperialWarTouchReq();
  virtual ~TActImperialWarTouchReq();

  TActImperialWarTouchReq(const TActImperialWarTouchReq& from);

  inline TActImperialWarTouchReq& operator=(const TActImperialWarTouchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarTouchReq& default_instance();

  void Swap(TActImperialWarTouchReq* other);

  // implements Message ----------------------------------------------

  TActImperialWarTouchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarTouchReq& from);
  void MergeFrom(const TActImperialWarTouchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TargetBid = 1;
  inline bool has_targetbid() const;
  inline void clear_targetbid();
  static const int kTargetBidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarTouchReq</name>
  	<Function>
  		<name>targetbid</name>
  		<replaceName>TargetBid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetbid</name>
  		<replaceName>TargetBid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetbid</name>
  		<replaceName>TargetBid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetbid() const;
  inline void set_targetbid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarTouchReq)
 private:
  inline void set_has_targetbid();
  inline void clear_has_targetbid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 targetbid_;
  friend void  protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarTouchReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarSetUserOptReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarSetUserOptReq : public ::google::protobuf::Message {
 public:
  TActImperialWarSetUserOptReq();
  virtual ~TActImperialWarSetUserOptReq();

  TActImperialWarSetUserOptReq(const TActImperialWarSetUserOptReq& from);

  inline TActImperialWarSetUserOptReq& operator=(const TActImperialWarSetUserOptReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarSetUserOptReq& default_instance();

  void Swap(TActImperialWarSetUserOptReq* other);

  // implements Message ----------------------------------------------

  TActImperialWarSetUserOptReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarSetUserOptReq& from);
  void MergeFrom(const TActImperialWarSetUserOptReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TargetId = 1;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarSetUserOptReq</name>
  	<Function>
  		<name>targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // optional bool AutoAttack = 2;
  inline bool has_autoattack() const;
  inline void clear_autoattack();
  static const int kAutoAttackFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarSetUserOptReq</name>
  	<Function>
  		<name>autoattack</name>
  		<replaceName>AutoAttack</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_autoattack</name>
  		<replaceName>AutoAttack</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_autoattack</name>
  		<replaceName>AutoAttack</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool autoattack() const;
  inline void set_autoattack(bool value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarSetUserOptReq)
 private:
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_autoattack();
  inline void clear_has_autoattack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 targetid_;
  bool autoattack_;
  friend void  protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarSetUserOptReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarSetArmyOptReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarSetArmyOptReq : public ::google::protobuf::Message {
 public:
  TActImperialWarSetArmyOptReq();
  virtual ~TActImperialWarSetArmyOptReq();

  TActImperialWarSetArmyOptReq(const TActImperialWarSetArmyOptReq& from);

  inline TActImperialWarSetArmyOptReq& operator=(const TActImperialWarSetArmyOptReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarSetArmyOptReq& default_instance();

  void Swap(TActImperialWarSetArmyOptReq* other);

  // implements Message ----------------------------------------------

  TActImperialWarSetArmyOptReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarSetArmyOptReq& from);
  void MergeFrom(const TActImperialWarSetArmyOptReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GoalId = 1;
  inline bool has_goalid() const;
  inline void clear_goalid();
  static const int kGoalIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarSetArmyOptReq</name>
  	<Function>
  		<name>goalid</name>
  		<replaceName>GoalId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goalid</name>
  		<replaceName>GoalId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goalid</name>
  		<replaceName>GoalId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goalid() const;
  inline void set_goalid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarSetArmyOptReq)
 private:
  inline void set_has_goalid();
  inline void clear_has_goalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 goalid_;
  friend void  protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarSetArmyOptReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarRankInfo : public ::google::protobuf::Message {
 public:
  TActImperialWarRankInfo();
  virtual ~TActImperialWarRankInfo();

  TActImperialWarRankInfo(const TActImperialWarRankInfo& from);

  inline TActImperialWarRankInfo& operator=(const TActImperialWarRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarRankInfo& default_instance();

  void Swap(TActImperialWarRankInfo* other);

  // implements Message ----------------------------------------------

  TActImperialWarRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarRankInfo& from);
  void MergeFrom(const TActImperialWarRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarRankInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Uname = 2;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarRankInfo</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 ImageHtid = 3;
  inline bool has_imagehtid() const;
  inline void clear_imagehtid();
  static const int kImageHtidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarRankInfo</name>
  	<Function>
  		<name>imagehtid</name>
  		<replaceName>ImageHtid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_imagehtid</name>
  		<replaceName>ImageHtid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_imagehtid</name>
  		<replaceName>ImageHtid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 imagehtid() const;
  inline void set_imagehtid(::google::protobuf::uint32 value);

  // optional uint32 ImageFrameTid = 4;
  inline bool has_imageframetid() const;
  inline void clear_imageframetid();
  static const int kImageFrameTidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarRankInfo</name>
  	<Function>
  		<name>imageframetid</name>
  		<replaceName>ImageFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_imageframetid</name>
  		<replaceName>ImageFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_imageframetid</name>
  		<replaceName>ImageFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 imageframetid() const;
  inline void set_imageframetid(::google::protobuf::uint32 value);

  // optional uint32 Title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarRankInfo</name>
  	<Function>
  		<name>title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 title() const;
  inline void set_title(::google::protobuf::uint32 value);

  // optional uint32 Rank = 10;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarRankInfo</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 Score = 11;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarRankInfo</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 KillCnt = 12;
  inline bool has_killcnt() const;
  inline void clear_killcnt();
  static const int kKillCntFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarRankInfo</name>
  	<Function>
  		<name>killcnt</name>
  		<replaceName>KillCnt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_killcnt</name>
  		<replaceName>KillCnt</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_killcnt</name>
  		<replaceName>KillCnt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 killcnt() const;
  inline void set_killcnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarRankInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_imagehtid();
  inline void clear_has_imagehtid();
  inline void set_has_imageframetid();
  inline void clear_has_imageframetid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_killcnt();
  inline void clear_has_killcnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* uname_;
  ::google::protobuf::uint32 imagehtid_;
  ::google::protobuf::uint32 imageframetid_;
  ::google::protobuf::uint32 title_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 killcnt_;
  friend void  protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarGetRankListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarGetRankListReq : public ::google::protobuf::Message {
 public:
  TActImperialWarGetRankListReq();
  virtual ~TActImperialWarGetRankListReq();

  TActImperialWarGetRankListReq(const TActImperialWarGetRankListReq& from);

  inline TActImperialWarGetRankListReq& operator=(const TActImperialWarGetRankListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarGetRankListReq& default_instance();

  void Swap(TActImperialWarGetRankListReq* other);

  // implements Message ----------------------------------------------

  TActImperialWarGetRankListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarGetRankListReq& from);
  void MergeFrom(const TActImperialWarGetRankListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetRankListReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetRankListReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarGetRankListReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarGetRankListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarGetRankListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarGetRankListRsp : public ::google::protobuf::Message {
 public:
  TActImperialWarGetRankListRsp();
  virtual ~TActImperialWarGetRankListRsp();

  TActImperialWarGetRankListRsp(const TActImperialWarGetRankListRsp& from);

  inline TActImperialWarGetRankListRsp& operator=(const TActImperialWarGetRankListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarGetRankListRsp& default_instance();

  void Swap(TActImperialWarGetRankListRsp* other);

  // implements Message ----------------------------------------------

  TActImperialWarGetRankListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarGetRankListRsp& from);
  void MergeFrom(const TActImperialWarGetRankListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActImperialWarRankInfo RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetRankListRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarRankInfo& rankarr(int index) const;
  inline ::pb::TActImperialWarRankInfo* mutable_rankarr(int index);
  inline ::pb::TActImperialWarRankInfo* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarRankInfo >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarRankInfo >*
      mutable_rankarr();

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetRankListRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarGetRankListRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarRankInfo > rankarr_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarGetRankListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarBaseUserInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarBaseUserInfoReq : public ::google::protobuf::Message {
 public:
  TActImperialWarBaseUserInfoReq();
  virtual ~TActImperialWarBaseUserInfoReq();

  TActImperialWarBaseUserInfoReq(const TActImperialWarBaseUserInfoReq& from);

  inline TActImperialWarBaseUserInfoReq& operator=(const TActImperialWarBaseUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarBaseUserInfoReq& default_instance();

  void Swap(TActImperialWarBaseUserInfoReq* other);

  // implements Message ----------------------------------------------

  TActImperialWarBaseUserInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarBaseUserInfoReq& from);
  void MergeFrom(const TActImperialWarBaseUserInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBaseUserInfoReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string serverId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBaseUserInfoReq</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>serverId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>serverId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>serverId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarBaseUserInfoReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* serverid_;
  friend void  protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarBaseUserInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarBaseUserInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarBaseUserInfoRsp : public ::google::protobuf::Message {
 public:
  TActImperialWarBaseUserInfoRsp();
  virtual ~TActImperialWarBaseUserInfoRsp();

  TActImperialWarBaseUserInfoRsp(const TActImperialWarBaseUserInfoRsp& from);

  inline TActImperialWarBaseUserInfoRsp& operator=(const TActImperialWarBaseUserInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarBaseUserInfoRsp& default_instance();

  void Swap(TActImperialWarBaseUserInfoRsp* other);

  // implements Message ----------------------------------------------

  TActImperialWarBaseUserInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarBaseUserInfoRsp& from);
  void MergeFrom(const TActImperialWarBaseUserInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBaseUserInfoRsp</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 My7Rank = 2;
  inline bool has_my7rank() const;
  inline void clear_my7rank();
  static const int kMy7RankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBaseUserInfoRsp</name>
  	<Function>
  		<name>my7rank</name>
  		<replaceName>My7Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_my7rank</name>
  		<replaceName>My7Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_my7rank</name>
  		<replaceName>My7Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 my7rank() const;
  inline void set_my7rank(::google::protobuf::uint32 value);

  // optional uint64 MasterUid = 3;
  inline bool has_masteruid() const;
  inline void clear_masteruid();
  static const int kMasterUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBaseUserInfoRsp</name>
  	<Function>
  		<name>masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 masteruid() const;
  inline void set_masteruid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarBaseUserInfoRsp)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_my7rank();
  inline void clear_has_my7rank();
  inline void set_has_masteruid();
  inline void clear_has_masteruid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 masteruid_;
  ::google::protobuf::uint32 my7rank_;
  friend void  protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarBaseUserInfoRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TActImperialWarMoveReq

// optional .pb.PbVector2_Int TargetPos = 1;
inline bool TActImperialWarMoveReq::has_targetpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarMoveReq::set_has_targetpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarMoveReq::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarMoveReq::clear_targetpos() {
  if (targetpos_ != NULL) targetpos_->::pb::PbVector2_Int::Clear();
  clear_has_targetpos();
}
inline const ::pb::PbVector2_Int& TActImperialWarMoveReq::targetpos() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarMoveReq.TargetPos)
  return targetpos_ != NULL ? *targetpos_ : *default_instance_->targetpos_;
}
inline ::pb::PbVector2_Int* TActImperialWarMoveReq::mutable_targetpos() {
  set_has_targetpos();
  if (targetpos_ == NULL) targetpos_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarMoveReq.TargetPos)
  return targetpos_;
}
inline ::pb::PbVector2_Int* TActImperialWarMoveReq::release_targetpos() {
  clear_has_targetpos();
  ::pb::PbVector2_Int* temp = targetpos_;
  targetpos_ = NULL;
  return temp;
}
inline void TActImperialWarMoveReq::set_allocated_targetpos(::pb::PbVector2_Int* targetpos) {
  delete targetpos_;
  targetpos_ = targetpos;
  if (targetpos) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarMoveReq.TargetPos)
}

// -------------------------------------------------------------------

// TActImperialWarAttackReq

// optional uint64 TargetId = 1;
inline bool TActImperialWarAttackReq::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarAttackReq::set_has_targetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarAttackReq::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarAttackReq::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 TActImperialWarAttackReq::targetid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarAttackReq.TargetId)
  return targetid_;
}
inline void TActImperialWarAttackReq::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarAttackReq.TargetId)
}

// -------------------------------------------------------------------

// TActImperialWarTouchReq

// optional uint64 TargetBid = 1;
inline bool TActImperialWarTouchReq::has_targetbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarTouchReq::set_has_targetbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarTouchReq::clear_has_targetbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarTouchReq::clear_targetbid() {
  targetbid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetbid();
}
inline ::google::protobuf::uint64 TActImperialWarTouchReq::targetbid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarTouchReq.TargetBid)
  return targetbid_;
}
inline void TActImperialWarTouchReq::set_targetbid(::google::protobuf::uint64 value) {
  set_has_targetbid();
  targetbid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarTouchReq.TargetBid)
}

// -------------------------------------------------------------------

// TActImperialWarSetUserOptReq

// optional uint64 TargetId = 1;
inline bool TActImperialWarSetUserOptReq::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarSetUserOptReq::set_has_targetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarSetUserOptReq::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarSetUserOptReq::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 TActImperialWarSetUserOptReq::targetid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarSetUserOptReq.TargetId)
  return targetid_;
}
inline void TActImperialWarSetUserOptReq::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarSetUserOptReq.TargetId)
}

// optional bool AutoAttack = 2;
inline bool TActImperialWarSetUserOptReq::has_autoattack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarSetUserOptReq::set_has_autoattack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarSetUserOptReq::clear_has_autoattack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarSetUserOptReq::clear_autoattack() {
  autoattack_ = false;
  clear_has_autoattack();
}
inline bool TActImperialWarSetUserOptReq::autoattack() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarSetUserOptReq.AutoAttack)
  return autoattack_;
}
inline void TActImperialWarSetUserOptReq::set_autoattack(bool value) {
  set_has_autoattack();
  autoattack_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarSetUserOptReq.AutoAttack)
}

// -------------------------------------------------------------------

// TActImperialWarSetArmyOptReq

// optional uint32 GoalId = 1;
inline bool TActImperialWarSetArmyOptReq::has_goalid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarSetArmyOptReq::set_has_goalid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarSetArmyOptReq::clear_has_goalid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarSetArmyOptReq::clear_goalid() {
  goalid_ = 0u;
  clear_has_goalid();
}
inline ::google::protobuf::uint32 TActImperialWarSetArmyOptReq::goalid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarSetArmyOptReq.GoalId)
  return goalid_;
}
inline void TActImperialWarSetArmyOptReq::set_goalid(::google::protobuf::uint32 value) {
  set_has_goalid();
  goalid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarSetArmyOptReq.GoalId)
}

// -------------------------------------------------------------------

// TActImperialWarRankInfo

// optional uint64 Uid = 1;
inline bool TActImperialWarRankInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarRankInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarRankInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarRankInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TActImperialWarRankInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarRankInfo.Uid)
  return uid_;
}
inline void TActImperialWarRankInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarRankInfo.Uid)
}

// optional string Uname = 2;
inline bool TActImperialWarRankInfo::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarRankInfo::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarRankInfo::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarRankInfo::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TActImperialWarRankInfo::uname() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarRankInfo.Uname)
  return *uname_;
}
inline void TActImperialWarRankInfo::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActImperialWarRankInfo.Uname)
}
inline void TActImperialWarRankInfo::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActImperialWarRankInfo.Uname)
}
inline void TActImperialWarRankInfo::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActImperialWarRankInfo.Uname)
}
inline ::std::string* TActImperialWarRankInfo::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarRankInfo.Uname)
  return uname_;
}
inline ::std::string* TActImperialWarRankInfo::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActImperialWarRankInfo::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarRankInfo.Uname)
}

// optional uint32 ImageHtid = 3;
inline bool TActImperialWarRankInfo::has_imagehtid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActImperialWarRankInfo::set_has_imagehtid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActImperialWarRankInfo::clear_has_imagehtid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActImperialWarRankInfo::clear_imagehtid() {
  imagehtid_ = 0u;
  clear_has_imagehtid();
}
inline ::google::protobuf::uint32 TActImperialWarRankInfo::imagehtid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarRankInfo.ImageHtid)
  return imagehtid_;
}
inline void TActImperialWarRankInfo::set_imagehtid(::google::protobuf::uint32 value) {
  set_has_imagehtid();
  imagehtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarRankInfo.ImageHtid)
}

// optional uint32 ImageFrameTid = 4;
inline bool TActImperialWarRankInfo::has_imageframetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TActImperialWarRankInfo::set_has_imageframetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TActImperialWarRankInfo::clear_has_imageframetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TActImperialWarRankInfo::clear_imageframetid() {
  imageframetid_ = 0u;
  clear_has_imageframetid();
}
inline ::google::protobuf::uint32 TActImperialWarRankInfo::imageframetid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarRankInfo.ImageFrameTid)
  return imageframetid_;
}
inline void TActImperialWarRankInfo::set_imageframetid(::google::protobuf::uint32 value) {
  set_has_imageframetid();
  imageframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarRankInfo.ImageFrameTid)
}

// optional uint32 Title = 5;
inline bool TActImperialWarRankInfo::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TActImperialWarRankInfo::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TActImperialWarRankInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TActImperialWarRankInfo::clear_title() {
  title_ = 0u;
  clear_has_title();
}
inline ::google::protobuf::uint32 TActImperialWarRankInfo::title() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarRankInfo.Title)
  return title_;
}
inline void TActImperialWarRankInfo::set_title(::google::protobuf::uint32 value) {
  set_has_title();
  title_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarRankInfo.Title)
}

// optional uint32 Rank = 10;
inline bool TActImperialWarRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TActImperialWarRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TActImperialWarRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TActImperialWarRankInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TActImperialWarRankInfo::rank() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarRankInfo.Rank)
  return rank_;
}
inline void TActImperialWarRankInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarRankInfo.Rank)
}

// optional uint32 Score = 11;
inline bool TActImperialWarRankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TActImperialWarRankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TActImperialWarRankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TActImperialWarRankInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TActImperialWarRankInfo::score() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarRankInfo.Score)
  return score_;
}
inline void TActImperialWarRankInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarRankInfo.Score)
}

// optional uint32 KillCnt = 12;
inline bool TActImperialWarRankInfo::has_killcnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TActImperialWarRankInfo::set_has_killcnt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TActImperialWarRankInfo::clear_has_killcnt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TActImperialWarRankInfo::clear_killcnt() {
  killcnt_ = 0u;
  clear_has_killcnt();
}
inline ::google::protobuf::uint32 TActImperialWarRankInfo::killcnt() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarRankInfo.KillCnt)
  return killcnt_;
}
inline void TActImperialWarRankInfo::set_killcnt(::google::protobuf::uint32 value) {
  set_has_killcnt();
  killcnt_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarRankInfo.KillCnt)
}

// -------------------------------------------------------------------

// TActImperialWarGetRankListReq

// optional uint32 Offset = 1;
inline bool TActImperialWarGetRankListReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarGetRankListReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarGetRankListReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarGetRankListReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TActImperialWarGetRankListReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetRankListReq.Offset)
  return offset_;
}
inline void TActImperialWarGetRankListReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetRankListReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TActImperialWarGetRankListReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarGetRankListReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarGetRankListReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarGetRankListReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TActImperialWarGetRankListReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetRankListReq.Limit)
  return limit_;
}
inline void TActImperialWarGetRankListReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetRankListReq.Limit)
}

// -------------------------------------------------------------------

// TActImperialWarGetRankListRsp

// repeated .pb.TActImperialWarRankInfo RankArr = 1;
inline int TActImperialWarGetRankListRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TActImperialWarGetRankListRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TActImperialWarRankInfo& TActImperialWarGetRankListRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetRankListRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TActImperialWarRankInfo* TActImperialWarGetRankListRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarGetRankListRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TActImperialWarRankInfo* TActImperialWarGetRankListRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TActImperialWarGetRankListRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarRankInfo >&
TActImperialWarGetRankListRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TActImperialWarGetRankListRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarRankInfo >*
TActImperialWarGetRankListRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActImperialWarGetRankListRsp.RankArr)
  return &rankarr_;
}

// optional int32 MyRank = 2;
inline bool TActImperialWarGetRankListRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarGetRankListRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarGetRankListRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarGetRankListRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TActImperialWarGetRankListRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetRankListRsp.MyRank)
  return myrank_;
}
inline void TActImperialWarGetRankListRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetRankListRsp.MyRank)
}

// -------------------------------------------------------------------

// TActImperialWarBaseUserInfoReq

// optional uint64 Uid = 1;
inline bool TActImperialWarBaseUserInfoReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarBaseUserInfoReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarBaseUserInfoReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarBaseUserInfoReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TActImperialWarBaseUserInfoReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBaseUserInfoReq.Uid)
  return uid_;
}
inline void TActImperialWarBaseUserInfoReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBaseUserInfoReq.Uid)
}

// optional string serverId = 2;
inline bool TActImperialWarBaseUserInfoReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarBaseUserInfoReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarBaseUserInfoReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarBaseUserInfoReq::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TActImperialWarBaseUserInfoReq::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBaseUserInfoReq.serverId)
  return *serverid_;
}
inline void TActImperialWarBaseUserInfoReq::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBaseUserInfoReq.serverId)
}
inline void TActImperialWarBaseUserInfoReq::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActImperialWarBaseUserInfoReq.serverId)
}
inline void TActImperialWarBaseUserInfoReq::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActImperialWarBaseUserInfoReq.serverId)
}
inline ::std::string* TActImperialWarBaseUserInfoReq::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarBaseUserInfoReq.serverId)
  return serverid_;
}
inline ::std::string* TActImperialWarBaseUserInfoReq::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActImperialWarBaseUserInfoReq::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarBaseUserInfoReq.serverId)
}

// -------------------------------------------------------------------

// TActImperialWarBaseUserInfoRsp

// optional uint64 Uid = 1;
inline bool TActImperialWarBaseUserInfoRsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarBaseUserInfoRsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarBaseUserInfoRsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarBaseUserInfoRsp::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TActImperialWarBaseUserInfoRsp::uid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBaseUserInfoRsp.Uid)
  return uid_;
}
inline void TActImperialWarBaseUserInfoRsp::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBaseUserInfoRsp.Uid)
}

// optional uint32 My7Rank = 2;
inline bool TActImperialWarBaseUserInfoRsp::has_my7rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarBaseUserInfoRsp::set_has_my7rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarBaseUserInfoRsp::clear_has_my7rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarBaseUserInfoRsp::clear_my7rank() {
  my7rank_ = 0u;
  clear_has_my7rank();
}
inline ::google::protobuf::uint32 TActImperialWarBaseUserInfoRsp::my7rank() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBaseUserInfoRsp.My7Rank)
  return my7rank_;
}
inline void TActImperialWarBaseUserInfoRsp::set_my7rank(::google::protobuf::uint32 value) {
  set_has_my7rank();
  my7rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBaseUserInfoRsp.My7Rank)
}

// optional uint64 MasterUid = 3;
inline bool TActImperialWarBaseUserInfoRsp::has_masteruid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActImperialWarBaseUserInfoRsp::set_has_masteruid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActImperialWarBaseUserInfoRsp::clear_has_masteruid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActImperialWarBaseUserInfoRsp::clear_masteruid() {
  masteruid_ = GOOGLE_ULONGLONG(0);
  clear_has_masteruid();
}
inline ::google::protobuf::uint64 TActImperialWarBaseUserInfoRsp::masteruid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBaseUserInfoRsp.MasterUid)
  return masteruid_;
}
inline void TActImperialWarBaseUserInfoRsp::set_masteruid(::google::protobuf::uint64 value) {
  set_has_masteruid();
  masteruid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBaseUserInfoRsp.MasterUid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fCrossActImperialWar_2eproto__INCLUDED
