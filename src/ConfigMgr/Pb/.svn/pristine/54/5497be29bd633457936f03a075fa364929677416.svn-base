// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/AdventureTeam.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/AdventureTeam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TAdventureHallMemberInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureHallMemberInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTeamUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTeamUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTeamSpecificInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTeamSpecificInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureSimpleTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureSimpleTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGetTeamArrReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetTeamArrReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGetTeamArrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetTeamArrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureCreateTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureCreateTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureCreateTeamRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureCreateTeamRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTeamInviteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTeamInviteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureJoinTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureJoinTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureJoinTeamRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureJoinTeamRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureKickReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureKickReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureQuitTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureQuitTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTeamStartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTeamStartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureInviteNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureInviteNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGetInviteListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetInviteListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGetInviteListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetInviteListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureUniqTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureUniqTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGetInviteTeamArrReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetInviteTeamArrReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGetInviteTeamArrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetInviteTeamArrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureChangeTeamModeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureChangeTeamModeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureChangeTeamModeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureChangeTeamModeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureKickOrQuitTeamRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureKickOrQuitTeamRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTeamStartRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTeamStartRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureSendTeamInviteMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureSendTeamInviteMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureSetTeamMemberStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureSetTeamMemberStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureSetTeamMemberStatusRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureSetTeamMemberStatusRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureSetTeamStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureSetTeamStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureSetTeamStatusRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureSetTeamStatusRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ETeamMemberStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAdventureTeamPrivateStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EJoinTeamErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EKickOrQuitTeamRetCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETeamStartRetCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAdventureInviteType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EChangeTeamModeRetCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAdventureTeamRoomId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fAdventureTeam_2eproto() {
  protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/AdventureTeam.proto");
  GOOGLE_CHECK(file != NULL);
  TAdventureHallMemberInfoData_descriptor_ = file->message_type(0);
  static const int TAdventureHallMemberInfoData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureHallMemberInfoData, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureHallMemberInfoData, memmode_),
  };
  TAdventureHallMemberInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureHallMemberInfoData_descriptor_,
      TAdventureHallMemberInfoData::default_instance_,
      TAdventureHallMemberInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureHallMemberInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureHallMemberInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureHallMemberInfoData));
  TAdventureTeamUserInfo_descriptor_ = file->message_type(1);
  static const int TAdventureTeamUserInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamUserInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamUserInfo, memmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamUserInfo, memberstatus_),
  };
  TAdventureTeamUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTeamUserInfo_descriptor_,
      TAdventureTeamUserInfo::default_instance_,
      TAdventureTeamUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTeamUserInfo));
  TAdventureTeamSpecificInfo_descriptor_ = file->message_type(2);
  static const int TAdventureTeamSpecificInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamSpecificInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamSpecificInfo, mapentryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamSpecificInfo, maptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamSpecificInfo, adventuretype_),
  };
  TAdventureTeamSpecificInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTeamSpecificInfo_descriptor_,
      TAdventureTeamSpecificInfo::default_instance_,
      TAdventureTeamSpecificInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamSpecificInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamSpecificInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTeamSpecificInfo));
  TAdventureTeamInfo_descriptor_ = file->message_type(3);
  static const int TAdventureTeamInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamInfo, leaderuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamInfo, teamuserarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamInfo, maptid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamInfo, mapid_),
  };
  TAdventureTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTeamInfo_descriptor_,
      TAdventureTeamInfo::default_instance_,
      TAdventureTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTeamInfo));
  TAdventureSimpleTeamInfo_descriptor_ = file->message_type(4);
  static const int TAdventureSimpleTeamInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSimpleTeamInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSimpleTeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSimpleTeamInfo, leaderuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSimpleTeamInfo, teamusernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSimpleTeamInfo, maptid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSimpleTeamInfo, mapid_),
  };
  TAdventureSimpleTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureSimpleTeamInfo_descriptor_,
      TAdventureSimpleTeamInfo::default_instance_,
      TAdventureSimpleTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSimpleTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSimpleTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureSimpleTeamInfo));
  TAdventureGetTeamArrReq_descriptor_ = file->message_type(5);
  static const int TAdventureGetTeamArrReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamArrReq, selecttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamArrReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamArrReq, num_),
  };
  TAdventureGetTeamArrReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetTeamArrReq_descriptor_,
      TAdventureGetTeamArrReq::default_instance_,
      TAdventureGetTeamArrReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamArrReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamArrReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetTeamArrReq));
  TAdventureGetTeamArrRsp_descriptor_ = file->message_type(6);
  static const int TAdventureGetTeamArrRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamArrRsp, teamarr_),
  };
  TAdventureGetTeamArrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetTeamArrRsp_descriptor_,
      TAdventureGetTeamArrRsp::default_instance_,
      TAdventureGetTeamArrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamArrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamArrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetTeamArrRsp));
  TAdventureCreateTeamReq_descriptor_ = file->message_type(7);
  static const int TAdventureCreateTeamReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCreateTeamReq, indexid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCreateTeamReq, teamstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCreateTeamReq, adventuretype_),
  };
  TAdventureCreateTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureCreateTeamReq_descriptor_,
      TAdventureCreateTeamReq::default_instance_,
      TAdventureCreateTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCreateTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCreateTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureCreateTeamReq));
  TAdventureCreateTeamRsp_descriptor_ = file->message_type(8);
  static const int TAdventureCreateTeamRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCreateTeamRsp, teaminfo_),
  };
  TAdventureCreateTeamRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureCreateTeamRsp_descriptor_,
      TAdventureCreateTeamRsp::default_instance_,
      TAdventureCreateTeamRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCreateTeamRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCreateTeamRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureCreateTeamRsp));
  TAdventureTeamInviteReq_descriptor_ = file->message_type(9);
  static const int TAdventureTeamInviteReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamInviteReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamInviteReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamInviteReq, uidarr_),
  };
  TAdventureTeamInviteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTeamInviteReq_descriptor_,
      TAdventureTeamInviteReq::default_instance_,
      TAdventureTeamInviteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamInviteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamInviteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTeamInviteReq));
  TAdventureJoinTeamReq_descriptor_ = file->message_type(10);
  static const int TAdventureJoinTeamReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureJoinTeamReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureJoinTeamReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureJoinTeamReq, joinmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureJoinTeamReq, checkprivate_),
  };
  TAdventureJoinTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureJoinTeamReq_descriptor_,
      TAdventureJoinTeamReq::default_instance_,
      TAdventureJoinTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureJoinTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureJoinTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureJoinTeamReq));
  TAdventureJoinTeamRsp_descriptor_ = file->message_type(11);
  static const int TAdventureJoinTeamRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureJoinTeamRsp, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureJoinTeamRsp, teaminfo_),
  };
  TAdventureJoinTeamRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureJoinTeamRsp_descriptor_,
      TAdventureJoinTeamRsp::default_instance_,
      TAdventureJoinTeamRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureJoinTeamRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureJoinTeamRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureJoinTeamRsp));
  TAdventureKickReq_descriptor_ = file->message_type(12);
  static const int TAdventureKickReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureKickReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureKickReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureKickReq, kickuid_),
  };
  TAdventureKickReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureKickReq_descriptor_,
      TAdventureKickReq::default_instance_,
      TAdventureKickReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureKickReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureKickReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureKickReq));
  TAdventureQuitTeamReq_descriptor_ = file->message_type(13);
  static const int TAdventureQuitTeamReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureQuitTeamReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureQuitTeamReq, teamid_),
  };
  TAdventureQuitTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureQuitTeamReq_descriptor_,
      TAdventureQuitTeamReq::default_instance_,
      TAdventureQuitTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureQuitTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureQuitTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureQuitTeamReq));
  TAdventureTeamStartReq_descriptor_ = file->message_type(14);
  static const int TAdventureTeamStartReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamStartReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamStartReq, teamid_),
  };
  TAdventureTeamStartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTeamStartReq_descriptor_,
      TAdventureTeamStartReq::default_instance_,
      TAdventureTeamStartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamStartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamStartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTeamStartReq));
  TAdventureInviteNotify_descriptor_ = file->message_type(15);
  static const int TAdventureInviteNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureInviteNotify, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureInviteNotify, teamid_),
  };
  TAdventureInviteNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureInviteNotify_descriptor_,
      TAdventureInviteNotify::default_instance_,
      TAdventureInviteNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureInviteNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureInviteNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureInviteNotify));
  TAdventureGetInviteListReq_descriptor_ = file->message_type(16);
  static const int TAdventureGetInviteListReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInviteListReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInviteListReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInviteListReq, invitetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInviteListReq, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInviteListReq, offset_),
  };
  TAdventureGetInviteListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetInviteListReq_descriptor_,
      TAdventureGetInviteListReq::default_instance_,
      TAdventureGetInviteListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInviteListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInviteListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetInviteListReq));
  TAdventureGetInviteListRsp_descriptor_ = file->message_type(17);
  static const int TAdventureGetInviteListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInviteListRsp, userarr_),
  };
  TAdventureGetInviteListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetInviteListRsp_descriptor_,
      TAdventureGetInviteListRsp::default_instance_,
      TAdventureGetInviteListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInviteListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInviteListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetInviteListRsp));
  TAdventureUniqTeam_descriptor_ = file->message_type(18);
  static const int TAdventureUniqTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUniqTeam, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUniqTeam, teamid_),
  };
  TAdventureUniqTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureUniqTeam_descriptor_,
      TAdventureUniqTeam::default_instance_,
      TAdventureUniqTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUniqTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUniqTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureUniqTeam));
  TAdventureGetInviteTeamArrReq_descriptor_ = file->message_type(19);
  static const int TAdventureGetInviteTeamArrReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInviteTeamArrReq, teamarr_),
  };
  TAdventureGetInviteTeamArrReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetInviteTeamArrReq_descriptor_,
      TAdventureGetInviteTeamArrReq::default_instance_,
      TAdventureGetInviteTeamArrReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInviteTeamArrReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInviteTeamArrReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetInviteTeamArrReq));
  TAdventureGetInviteTeamArrRsp_descriptor_ = file->message_type(20);
  static const int TAdventureGetInviteTeamArrRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInviteTeamArrRsp, teaminfoarr_),
  };
  TAdventureGetInviteTeamArrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetInviteTeamArrRsp_descriptor_,
      TAdventureGetInviteTeamArrRsp::default_instance_,
      TAdventureGetInviteTeamArrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInviteTeamArrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInviteTeamArrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetInviteTeamArrRsp));
  TAdventureChangeTeamModeReq_descriptor_ = file->message_type(21);
  static const int TAdventureChangeTeamModeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureChangeTeamModeReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureChangeTeamModeReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureChangeTeamModeReq, teammode_),
  };
  TAdventureChangeTeamModeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureChangeTeamModeReq_descriptor_,
      TAdventureChangeTeamModeReq::default_instance_,
      TAdventureChangeTeamModeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureChangeTeamModeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureChangeTeamModeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureChangeTeamModeReq));
  TAdventureChangeTeamModeRsp_descriptor_ = file->message_type(22);
  static const int TAdventureChangeTeamModeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureChangeTeamModeRsp, retcode_),
  };
  TAdventureChangeTeamModeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureChangeTeamModeRsp_descriptor_,
      TAdventureChangeTeamModeRsp::default_instance_,
      TAdventureChangeTeamModeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureChangeTeamModeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureChangeTeamModeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureChangeTeamModeRsp));
  TAdventureKickOrQuitTeamRsp_descriptor_ = file->message_type(23);
  static const int TAdventureKickOrQuitTeamRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureKickOrQuitTeamRsp, retcode_),
  };
  TAdventureKickOrQuitTeamRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureKickOrQuitTeamRsp_descriptor_,
      TAdventureKickOrQuitTeamRsp::default_instance_,
      TAdventureKickOrQuitTeamRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureKickOrQuitTeamRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureKickOrQuitTeamRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureKickOrQuitTeamRsp));
  TAdventureTeamStartRsp_descriptor_ = file->message_type(24);
  static const int TAdventureTeamStartRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamStartRsp, retcode_),
  };
  TAdventureTeamStartRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTeamStartRsp_descriptor_,
      TAdventureTeamStartRsp::default_instance_,
      TAdventureTeamStartRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamStartRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamStartRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTeamStartRsp));
  TAdventureSendTeamInviteMsgReq_descriptor_ = file->message_type(25);
  static const int TAdventureSendTeamInviteMsgReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSendTeamInviteMsgReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSendTeamInviteMsgReq, teamid_),
  };
  TAdventureSendTeamInviteMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureSendTeamInviteMsgReq_descriptor_,
      TAdventureSendTeamInviteMsgReq::default_instance_,
      TAdventureSendTeamInviteMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSendTeamInviteMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSendTeamInviteMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureSendTeamInviteMsgReq));
  TAdventureSetTeamMemberStatusReq_descriptor_ = file->message_type(26);
  static const int TAdventureSetTeamMemberStatusReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetTeamMemberStatusReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetTeamMemberStatusReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetTeamMemberStatusReq, memberstatus_),
  };
  TAdventureSetTeamMemberStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureSetTeamMemberStatusReq_descriptor_,
      TAdventureSetTeamMemberStatusReq::default_instance_,
      TAdventureSetTeamMemberStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetTeamMemberStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetTeamMemberStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureSetTeamMemberStatusReq));
  TAdventureSetTeamMemberStatusRsp_descriptor_ = file->message_type(27);
  static const int TAdventureSetTeamMemberStatusRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetTeamMemberStatusRsp, retcode_),
  };
  TAdventureSetTeamMemberStatusRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureSetTeamMemberStatusRsp_descriptor_,
      TAdventureSetTeamMemberStatusRsp::default_instance_,
      TAdventureSetTeamMemberStatusRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetTeamMemberStatusRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetTeamMemberStatusRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureSetTeamMemberStatusRsp));
  TAdventureSetTeamStatusReq_descriptor_ = file->message_type(28);
  static const int TAdventureSetTeamStatusReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetTeamStatusReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetTeamStatusReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetTeamStatusReq, teamstatus_),
  };
  TAdventureSetTeamStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureSetTeamStatusReq_descriptor_,
      TAdventureSetTeamStatusReq::default_instance_,
      TAdventureSetTeamStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetTeamStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetTeamStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureSetTeamStatusReq));
  TAdventureSetTeamStatusRsp_descriptor_ = file->message_type(29);
  static const int TAdventureSetTeamStatusRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetTeamStatusRsp, retcode_),
  };
  TAdventureSetTeamStatusRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureSetTeamStatusRsp_descriptor_,
      TAdventureSetTeamStatusRsp::default_instance_,
      TAdventureSetTeamStatusRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetTeamStatusRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetTeamStatusRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureSetTeamStatusRsp));
  ETeamMemberStatus_descriptor_ = file->enum_type(0);
  EAdventureTeamPrivateStatus_descriptor_ = file->enum_type(1);
  EJoinTeamErrorCode_descriptor_ = file->enum_type(2);
  EKickOrQuitTeamRetCode_descriptor_ = file->enum_type(3);
  ETeamStartRetCode_descriptor_ = file->enum_type(4);
  EAdventureInviteType_descriptor_ = file->enum_type(5);
  EChangeTeamModeRetCode_descriptor_ = file->enum_type(6);
  EAdventureTeamRoomId_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fAdventureTeam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureHallMemberInfoData_descriptor_, &TAdventureHallMemberInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTeamUserInfo_descriptor_, &TAdventureTeamUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTeamSpecificInfo_descriptor_, &TAdventureTeamSpecificInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTeamInfo_descriptor_, &TAdventureTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureSimpleTeamInfo_descriptor_, &TAdventureSimpleTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetTeamArrReq_descriptor_, &TAdventureGetTeamArrReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetTeamArrRsp_descriptor_, &TAdventureGetTeamArrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureCreateTeamReq_descriptor_, &TAdventureCreateTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureCreateTeamRsp_descriptor_, &TAdventureCreateTeamRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTeamInviteReq_descriptor_, &TAdventureTeamInviteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureJoinTeamReq_descriptor_, &TAdventureJoinTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureJoinTeamRsp_descriptor_, &TAdventureJoinTeamRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureKickReq_descriptor_, &TAdventureKickReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureQuitTeamReq_descriptor_, &TAdventureQuitTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTeamStartReq_descriptor_, &TAdventureTeamStartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureInviteNotify_descriptor_, &TAdventureInviteNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetInviteListReq_descriptor_, &TAdventureGetInviteListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetInviteListRsp_descriptor_, &TAdventureGetInviteListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureUniqTeam_descriptor_, &TAdventureUniqTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetInviteTeamArrReq_descriptor_, &TAdventureGetInviteTeamArrReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetInviteTeamArrRsp_descriptor_, &TAdventureGetInviteTeamArrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureChangeTeamModeReq_descriptor_, &TAdventureChangeTeamModeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureChangeTeamModeRsp_descriptor_, &TAdventureChangeTeamModeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureKickOrQuitTeamRsp_descriptor_, &TAdventureKickOrQuitTeamRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTeamStartRsp_descriptor_, &TAdventureTeamStartRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureSendTeamInviteMsgReq_descriptor_, &TAdventureSendTeamInviteMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureSetTeamMemberStatusReq_descriptor_, &TAdventureSetTeamMemberStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureSetTeamMemberStatusRsp_descriptor_, &TAdventureSetTeamMemberStatusRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureSetTeamStatusReq_descriptor_, &TAdventureSetTeamStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureSetTeamStatusRsp_descriptor_, &TAdventureSetTeamStatusRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fAdventureTeam_2eproto() {
  delete TAdventureHallMemberInfoData::default_instance_;
  delete TAdventureHallMemberInfoData_reflection_;
  delete TAdventureTeamUserInfo::default_instance_;
  delete TAdventureTeamUserInfo_reflection_;
  delete TAdventureTeamSpecificInfo::default_instance_;
  delete TAdventureTeamSpecificInfo_reflection_;
  delete TAdventureTeamInfo::default_instance_;
  delete TAdventureTeamInfo_reflection_;
  delete TAdventureSimpleTeamInfo::default_instance_;
  delete TAdventureSimpleTeamInfo_reflection_;
  delete TAdventureGetTeamArrReq::default_instance_;
  delete TAdventureGetTeamArrReq_reflection_;
  delete TAdventureGetTeamArrRsp::default_instance_;
  delete TAdventureGetTeamArrRsp_reflection_;
  delete TAdventureCreateTeamReq::default_instance_;
  delete TAdventureCreateTeamReq_reflection_;
  delete TAdventureCreateTeamRsp::default_instance_;
  delete TAdventureCreateTeamRsp_reflection_;
  delete TAdventureTeamInviteReq::default_instance_;
  delete TAdventureTeamInviteReq_reflection_;
  delete TAdventureJoinTeamReq::default_instance_;
  delete TAdventureJoinTeamReq_reflection_;
  delete TAdventureJoinTeamRsp::default_instance_;
  delete TAdventureJoinTeamRsp_reflection_;
  delete TAdventureKickReq::default_instance_;
  delete TAdventureKickReq_reflection_;
  delete TAdventureQuitTeamReq::default_instance_;
  delete TAdventureQuitTeamReq_reflection_;
  delete TAdventureTeamStartReq::default_instance_;
  delete TAdventureTeamStartReq_reflection_;
  delete TAdventureInviteNotify::default_instance_;
  delete TAdventureInviteNotify_reflection_;
  delete TAdventureGetInviteListReq::default_instance_;
  delete TAdventureGetInviteListReq_reflection_;
  delete TAdventureGetInviteListRsp::default_instance_;
  delete TAdventureGetInviteListRsp_reflection_;
  delete TAdventureUniqTeam::default_instance_;
  delete TAdventureUniqTeam_reflection_;
  delete TAdventureGetInviteTeamArrReq::default_instance_;
  delete TAdventureGetInviteTeamArrReq_reflection_;
  delete TAdventureGetInviteTeamArrRsp::default_instance_;
  delete TAdventureGetInviteTeamArrRsp_reflection_;
  delete TAdventureChangeTeamModeReq::default_instance_;
  delete TAdventureChangeTeamModeReq_reflection_;
  delete TAdventureChangeTeamModeRsp::default_instance_;
  delete TAdventureChangeTeamModeRsp_reflection_;
  delete TAdventureKickOrQuitTeamRsp::default_instance_;
  delete TAdventureKickOrQuitTeamRsp_reflection_;
  delete TAdventureTeamStartRsp::default_instance_;
  delete TAdventureTeamStartRsp_reflection_;
  delete TAdventureSendTeamInviteMsgReq::default_instance_;
  delete TAdventureSendTeamInviteMsgReq_reflection_;
  delete TAdventureSetTeamMemberStatusReq::default_instance_;
  delete TAdventureSetTeamMemberStatusReq_reflection_;
  delete TAdventureSetTeamMemberStatusRsp::default_instance_;
  delete TAdventureSetTeamMemberStatusRsp_reflection_;
  delete TAdventureSetTeamStatusReq::default_instance_;
  delete TAdventureSetTeamStatusReq_reflection_;
  delete TAdventureSetTeamStatusRsp::default_instance_;
  delete TAdventureSetTeamStatusRsp_reflection_;
}

void protobuf_AddDesc_net_2fAdventureTeam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fAdventureBase_2eproto();
  ::pb::protobuf_AddDesc_net_2fTeam_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027net/AdventureTeam.proto\022\002pb\032\016net/User."
    "proto\032\027net/AdventureBase.proto\032\016net/Team"
    ".proto\"n\n\034TAdventureHallMemberInfoData\022."
    "\n\010UserInfo\030\001 \001(\0132\034.pb.TAdventureUserSimp"
    "leInfo\022\036\n\007MemMode\030\002 \001(\0162\r.pb.ETeamMode\"\232"
    "\001\n\026TAdventureTeamUserInfo\022.\n\010UserInfo\030\001 "
    "\001(\0132\034.pb.TAdventureUserSimpleInfo\022\036\n\007Mem"
    "Mode\030\002 \001(\0162\r.pb.ETeamMode\0220\n\014MemberStatu"
    "s\030\003 \001(\0162\032.pb.EHallMemberReadyStatus\"{\n\032T"
    "AdventureTeamSpecificInfo\022\r\n\005MapId\030\001 \001(\004"
    "\022\022\n\nMapEntryId\030\002 \001(\r\022\017\n\007MapTime\030\003 \001(\004\022)\n"
    "\rAdventureType\030\004 \001(\0162\022.pb.EAdventureType"
    "\"\310\001\n\022TAdventureTeamInfo\022\016\n\006RoomId\030\001 \001(\004\022"
    "\016\n\006TeamId\030\002 \001(\004\022\021\n\tLeaderUid\030\003 \001(\004\022/\n\013Te"
    "amUserArr\030\004 \003(\0132\032.pb.TAdventureTeamUserI"
    "nfo\022\016\n\006MapTid\030\005 \001(\r\022/\n\006Status\030\006 \001(\0162\037.pb"
    ".EAdventureTeamPrivateStatus\022\r\n\005MapId\030\007 "
    "\001(\004\"\244\001\n\030TAdventureSimpleTeamInfo\022\016\n\006Room"
    "Id\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004\0224\n\016LeaderUserIn"
    "fo\030\003 \001(\0132\034.pb.TAdventureUserSimpleInfo\022\023"
    "\n\013TeamUserNum\030\004 \001(\r\022\016\n\006MapTid\030\005 \001(\r\022\r\n\005M"
    "apId\030\006 \001(\004\"J\n\027TAdventureGetTeamArrReq\022\022\n"
    "\nSelectType\030\001 \001(\r\022\016\n\006RoomId\030\002 \001(\r\022\013\n\003Num"
    "\030\003 \001(\r\"H\n\027TAdventureGetTeamArrRsp\022-\n\007Tea"
    "mArr\030\001 \003(\0132\034.pb.TAdventureSimpleTeamInfo"
    "\"\212\001\n\027TAdventureCreateTeamReq\022\017\n\007IndexId\030"
    "\001 \001(\004\0223\n\nTeamStatus\030\002 \001(\0162\037.pb.EAdventur"
    "eTeamPrivateStatus\022)\n\rAdventureType\030\003 \001("
    "\0162\022.pb.EAdventureType\"C\n\027TAdventureCreat"
    "eTeamRsp\022(\n\010TeamInfo\030\001 \001(\0132\026.pb.TAdventu"
    "reTeamInfo\"I\n\027TAdventureTeamInviteReq\022\016\n"
    "\006RoomId\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004\022\016\n\006UidArr\030"
    "\003 \003(\004\"n\n\025TAdventureJoinTeamReq\022\016\n\006RoomId"
    "\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004\022\037\n\010JoinMode\030\003 \001(\016"
    "2\r.pb.ETeamMode\022\024\n\014CheckPrivate\030\004 \001(\010\"l\n"
    "\025TAdventureJoinTeamRsp\022)\n\tErrorCode\030\001 \001("
    "\0162\026.pb.EJoinTeamErrorCode\022(\n\010TeamInfo\030\002 "
    "\001(\0132\026.pb.TAdventureTeamInfo\"D\n\021TAdventur"
    "eKickReq\022\016\n\006RoomId\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004"
    "\022\017\n\007KickUid\030\003 \001(\004\"7\n\025TAdventureQuitTeamR"
    "eq\022\016\n\006RoomId\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004\"8\n\026TA"
    "dventureTeamStartReq\022\016\n\006RoomId\030\001 \001(\004\022\016\n\006"
    "TeamId\030\002 \001(\004\"8\n\026TAdventureInviteNotify\022\016"
    "\n\006RoomId\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004\"\207\001\n\032TAdve"
    "ntureGetInviteListReq\022\016\n\006RoomId\030\001 \001(\004\022\016\n"
    "\006TeamId\030\002 \001(\004\022,\n\nInviteType\030\003 \001(\0162\030.pb.E"
    "AdventureInviteType\022\013\n\003Num\030\004 \001(\r\022\016\n\006Offs"
    "et\030\005 \001(\r\"B\n\032TAdventureGetInviteListRsp\022$"
    "\n\007UserArr\030\001 \003(\0132\023.pb.TUserSimpleInfo\"4\n\022"
    "TAdventureUniqTeam\022\016\n\006RoomId\030\001 \001(\004\022\016\n\006Te"
    "amId\030\002 \001(\004\"H\n\035TAdventureGetInviteTeamArr"
    "Req\022\'\n\007TeamArr\030\001 \003(\0132\026.pb.TAdventureUniq"
    "Team\"R\n\035TAdventureGetInviteTeamArrRsp\0221\n"
    "\013TeamInfoArr\030\001 \003(\0132\034.pb.TAdventureSimple"
    "TeamInfo\"^\n\033TAdventureChangeTeamModeReq\022"
    "\016\n\006RoomId\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004\022\037\n\010TeamM"
    "ode\030\003 \001(\0162\r.pb.ETeamMode\"J\n\033TAdventureCh"
    "angeTeamModeRsp\022+\n\007RetCode\030\001 \001(\0162\032.pb.EC"
    "hangeTeamModeRetCode\"J\n\033TAdventureKickOr"
    "QuitTeamRsp\022+\n\007RetCode\030\001 \001(\0162\032.pb.EKickO"
    "rQuitTeamRetCode\"@\n\026TAdventureTeamStartR"
    "sp\022&\n\007RetCode\030\001 \001(\0162\025.pb.ETeamStartRetCo"
    "de\"@\n\036TAdventureSendTeamInviteMsgReq\022\016\n\006"
    "RoomId\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004\"t\n TAdventu"
    "reSetTeamMemberStatusReq\022\016\n\006RoomId\030\001 \001(\004"
    "\022\016\n\006TeamId\030\002 \001(\004\0220\n\014MemberStatus\030\003 \001(\0162\032"
    ".pb.EHallMemberReadyStatus\"O\n TAdventure"
    "SetTeamMemberStatusRsp\022+\n\007RetCode\030\001 \001(\0162"
    "\032.pb.EChangeTeamModeRetCode\"c\n\032TAdventur"
    "eSetTeamStatusReq\022\016\n\006RoomId\030\001 \001(\004\022\016\n\006Tea"
    "mId\030\002 \001(\004\022%\n\nTeamStatus\030\003 \001(\0162\021.pb.EHall"
    "TeamType\"I\n\032TAdventureSetTeamStatusRsp\022+"
    "\n\007RetCode\030\001 \001(\0162\032.pb.EChangeTeamModeRetC"
    "ode*G\n\021ETeamMemberStatus\022\031\n\025MEMBER_STATU"
    "S_NOREADY\020\001\022\027\n\023MEMBER_STATUS_READY\020\002*N\n\033"
    "EAdventureTeamPrivateStatus\022\027\n\023TEAM_STAT"
    "US_PRIVATE\020\001\022\026\n\022TEAM_STATUS_PUBLIC\020\002*\277\001\n"
    "\022EJoinTeamErrorCode\022\021\n\rERROR_CODE_OK\020\000\022\023"
    "\n\017ERROR_CODE_FULL\020\001\022\027\n\023ERROR_CODE_NOTEXI"
    "ST\020\002\022\025\n\021ERROR_CODE_INTEAM\020\003\022\032\n\026ERROR_COD"
    "E_RISKNOTOPEN\020\004\022\031\n\025ERROR_CODE_MAPLVLIMIT"
    "\020\005\022\032\n\026ERROR_CODE_PRIVATETEAM\020\006*b\n\026EKickO"
    "rQuitTeamRetCode\022\021\n\rKQRET_CODE_OK\020\000\022\033\n\027K"
    "QRET_CODE_TEAMNOTEXIST\020\001\022\030\n\024KQRET_CODE_N"
    "OTINTEAM\020\002*\307\001\n\021ETeamStartRetCode\022\021\n\rTSRE"
    "T_CODE_OK\020\000\022\033\n\027TSRET_CODE_TEAMNOTEXIST\020\001"
    "\022\030\n\024TSRET_CODE_NOTINTEAM\020\002\022\030\n\024TSRET_CODE"
    "_NOTLEADER\020\003\022\032\n\026TSRET_CODE_CANNOTSTART\020\004"
    "\022\031\n\025TSRET_CODE_GETMAPFAIL\020\005\022\027\n\023TSRET_COD"
    "E_NOTREADY\020\006*c\n\024EAdventureInviteType\022\026\n\022"
    "INVIITE_TYPE_GUILD\020\001\022\027\n\023INVIITE_TYPE_FRI"
    "END\020\002\022\032\n\026INVIITE_TYPE_RECOMMEND\020\003*x\n\026ECh"
    "angeTeamModeRetCode\022\025\n\021RET_CODE_CHANGEOK"
    "\020\000\022\026\n\022RET_CODE_TEAMSTART\020\001\022\025\n\021RET_CODE_N"
    "OINTEAM\020\002\022\030\n\024RET_CODE_INVALIDTEAM\020\003*9\n\024E"
    "AdventureTeamRoomId\022!\n\034ACTIVITY_ADVENT_R"
    "OOM_BASE_ID\020\220N", 3854);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/AdventureTeam.proto", &protobuf_RegisterTypes);
  TAdventureHallMemberInfoData::default_instance_ = new TAdventureHallMemberInfoData();
  TAdventureTeamUserInfo::default_instance_ = new TAdventureTeamUserInfo();
  TAdventureTeamSpecificInfo::default_instance_ = new TAdventureTeamSpecificInfo();
  TAdventureTeamInfo::default_instance_ = new TAdventureTeamInfo();
  TAdventureSimpleTeamInfo::default_instance_ = new TAdventureSimpleTeamInfo();
  TAdventureGetTeamArrReq::default_instance_ = new TAdventureGetTeamArrReq();
  TAdventureGetTeamArrRsp::default_instance_ = new TAdventureGetTeamArrRsp();
  TAdventureCreateTeamReq::default_instance_ = new TAdventureCreateTeamReq();
  TAdventureCreateTeamRsp::default_instance_ = new TAdventureCreateTeamRsp();
  TAdventureTeamInviteReq::default_instance_ = new TAdventureTeamInviteReq();
  TAdventureJoinTeamReq::default_instance_ = new TAdventureJoinTeamReq();
  TAdventureJoinTeamRsp::default_instance_ = new TAdventureJoinTeamRsp();
  TAdventureKickReq::default_instance_ = new TAdventureKickReq();
  TAdventureQuitTeamReq::default_instance_ = new TAdventureQuitTeamReq();
  TAdventureTeamStartReq::default_instance_ = new TAdventureTeamStartReq();
  TAdventureInviteNotify::default_instance_ = new TAdventureInviteNotify();
  TAdventureGetInviteListReq::default_instance_ = new TAdventureGetInviteListReq();
  TAdventureGetInviteListRsp::default_instance_ = new TAdventureGetInviteListRsp();
  TAdventureUniqTeam::default_instance_ = new TAdventureUniqTeam();
  TAdventureGetInviteTeamArrReq::default_instance_ = new TAdventureGetInviteTeamArrReq();
  TAdventureGetInviteTeamArrRsp::default_instance_ = new TAdventureGetInviteTeamArrRsp();
  TAdventureChangeTeamModeReq::default_instance_ = new TAdventureChangeTeamModeReq();
  TAdventureChangeTeamModeRsp::default_instance_ = new TAdventureChangeTeamModeRsp();
  TAdventureKickOrQuitTeamRsp::default_instance_ = new TAdventureKickOrQuitTeamRsp();
  TAdventureTeamStartRsp::default_instance_ = new TAdventureTeamStartRsp();
  TAdventureSendTeamInviteMsgReq::default_instance_ = new TAdventureSendTeamInviteMsgReq();
  TAdventureSetTeamMemberStatusReq::default_instance_ = new TAdventureSetTeamMemberStatusReq();
  TAdventureSetTeamMemberStatusRsp::default_instance_ = new TAdventureSetTeamMemberStatusRsp();
  TAdventureSetTeamStatusReq::default_instance_ = new TAdventureSetTeamStatusReq();
  TAdventureSetTeamStatusRsp::default_instance_ = new TAdventureSetTeamStatusRsp();
  TAdventureHallMemberInfoData::default_instance_->InitAsDefaultInstance();
  TAdventureTeamUserInfo::default_instance_->InitAsDefaultInstance();
  TAdventureTeamSpecificInfo::default_instance_->InitAsDefaultInstance();
  TAdventureTeamInfo::default_instance_->InitAsDefaultInstance();
  TAdventureSimpleTeamInfo::default_instance_->InitAsDefaultInstance();
  TAdventureGetTeamArrReq::default_instance_->InitAsDefaultInstance();
  TAdventureGetTeamArrRsp::default_instance_->InitAsDefaultInstance();
  TAdventureCreateTeamReq::default_instance_->InitAsDefaultInstance();
  TAdventureCreateTeamRsp::default_instance_->InitAsDefaultInstance();
  TAdventureTeamInviteReq::default_instance_->InitAsDefaultInstance();
  TAdventureJoinTeamReq::default_instance_->InitAsDefaultInstance();
  TAdventureJoinTeamRsp::default_instance_->InitAsDefaultInstance();
  TAdventureKickReq::default_instance_->InitAsDefaultInstance();
  TAdventureQuitTeamReq::default_instance_->InitAsDefaultInstance();
  TAdventureTeamStartReq::default_instance_->InitAsDefaultInstance();
  TAdventureInviteNotify::default_instance_->InitAsDefaultInstance();
  TAdventureGetInviteListReq::default_instance_->InitAsDefaultInstance();
  TAdventureGetInviteListRsp::default_instance_->InitAsDefaultInstance();
  TAdventureUniqTeam::default_instance_->InitAsDefaultInstance();
  TAdventureGetInviteTeamArrReq::default_instance_->InitAsDefaultInstance();
  TAdventureGetInviteTeamArrRsp::default_instance_->InitAsDefaultInstance();
  TAdventureChangeTeamModeReq::default_instance_->InitAsDefaultInstance();
  TAdventureChangeTeamModeRsp::default_instance_->InitAsDefaultInstance();
  TAdventureKickOrQuitTeamRsp::default_instance_->InitAsDefaultInstance();
  TAdventureTeamStartRsp::default_instance_->InitAsDefaultInstance();
  TAdventureSendTeamInviteMsgReq::default_instance_->InitAsDefaultInstance();
  TAdventureSetTeamMemberStatusReq::default_instance_->InitAsDefaultInstance();
  TAdventureSetTeamMemberStatusRsp::default_instance_->InitAsDefaultInstance();
  TAdventureSetTeamStatusReq::default_instance_->InitAsDefaultInstance();
  TAdventureSetTeamStatusRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fAdventureTeam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fAdventureTeam_2eproto {
  StaticDescriptorInitializer_net_2fAdventureTeam_2eproto() {
    protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  }
} static_descriptor_initializer_net_2fAdventureTeam_2eproto_;
const ::google::protobuf::EnumDescriptor* ETeamMemberStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETeamMemberStatus_descriptor_;
}
bool ETeamMemberStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAdventureTeamPrivateStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAdventureTeamPrivateStatus_descriptor_;
}
bool EAdventureTeamPrivateStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EJoinTeamErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EJoinTeamErrorCode_descriptor_;
}
bool EJoinTeamErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EKickOrQuitTeamRetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EKickOrQuitTeamRetCode_descriptor_;
}
bool EKickOrQuitTeamRetCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETeamStartRetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETeamStartRetCode_descriptor_;
}
bool ETeamStartRetCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAdventureInviteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAdventureInviteType_descriptor_;
}
bool EAdventureInviteType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EChangeTeamModeRetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EChangeTeamModeRetCode_descriptor_;
}
bool EChangeTeamModeRetCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAdventureTeamRoomId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAdventureTeamRoomId_descriptor_;
}
bool EAdventureTeamRoomId_IsValid(int value) {
  switch(value) {
    case 10000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureHallMemberInfoData::kUserInfoFieldNumber;
const int TAdventureHallMemberInfoData::kMemModeFieldNumber;
#endif  // !_MSC_VER

TAdventureHallMemberInfoData::TAdventureHallMemberInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureHallMemberInfoData)
}

void TAdventureHallMemberInfoData::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TAdventureUserSimpleInfo*>(&::pb::TAdventureUserSimpleInfo::default_instance());
}

TAdventureHallMemberInfoData::TAdventureHallMemberInfoData(const TAdventureHallMemberInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureHallMemberInfoData)
}

void TAdventureHallMemberInfoData::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  memmode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureHallMemberInfoData::~TAdventureHallMemberInfoData() {
  // @@protoc_insertion_point(destructor:pb.TAdventureHallMemberInfoData)
  SharedDtor();
}

void TAdventureHallMemberInfoData::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TAdventureHallMemberInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureHallMemberInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureHallMemberInfoData_descriptor_;
}

const TAdventureHallMemberInfoData& TAdventureHallMemberInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureHallMemberInfoData* TAdventureHallMemberInfoData::default_instance_ = NULL;

TAdventureHallMemberInfoData* TAdventureHallMemberInfoData::New() const {
  return new TAdventureHallMemberInfoData;
}

void TAdventureHallMemberInfoData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TAdventureUserSimpleInfo::Clear();
    }
    memmode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureHallMemberInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureHallMemberInfoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAdventureUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MemMode;
        break;
      }

      // optional .pb.ETeamMode MemMode = 2;
      case 2: {
        if (tag == 16) {
         parse_MemMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETeamMode_IsValid(value)) {
            set_memmode(static_cast< ::pb::ETeamMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureHallMemberInfoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureHallMemberInfoData)
  return false;
#undef DO_
}

void TAdventureHallMemberInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureHallMemberInfoData)
  // optional .pb.TAdventureUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional .pb.ETeamMode MemMode = 2;
  if (has_memmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->memmode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureHallMemberInfoData)
}

::google::protobuf::uint8* TAdventureHallMemberInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureHallMemberInfoData)
  // optional .pb.TAdventureUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional .pb.ETeamMode MemMode = 2;
  if (has_memmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->memmode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureHallMemberInfoData)
  return target;
}

int TAdventureHallMemberInfoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAdventureUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional .pb.ETeamMode MemMode = 2;
    if (has_memmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->memmode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureHallMemberInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureHallMemberInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureHallMemberInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureHallMemberInfoData::MergeFrom(const TAdventureHallMemberInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TAdventureUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_memmode()) {
      set_memmode(from.memmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureHallMemberInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureHallMemberInfoData::CopyFrom(const TAdventureHallMemberInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureHallMemberInfoData::IsInitialized() const {

  return true;
}

void TAdventureHallMemberInfoData::Swap(TAdventureHallMemberInfoData* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(memmode_, other->memmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureHallMemberInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureHallMemberInfoData_descriptor_;
  metadata.reflection = TAdventureHallMemberInfoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTeamUserInfo::kUserInfoFieldNumber;
const int TAdventureTeamUserInfo::kMemModeFieldNumber;
const int TAdventureTeamUserInfo::kMemberStatusFieldNumber;
#endif  // !_MSC_VER

TAdventureTeamUserInfo::TAdventureTeamUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTeamUserInfo)
}

void TAdventureTeamUserInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TAdventureUserSimpleInfo*>(&::pb::TAdventureUserSimpleInfo::default_instance());
}

TAdventureTeamUserInfo::TAdventureTeamUserInfo(const TAdventureTeamUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTeamUserInfo)
}

void TAdventureTeamUserInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  memmode_ = 0;
  memberstatus_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTeamUserInfo::~TAdventureTeamUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTeamUserInfo)
  SharedDtor();
}

void TAdventureTeamUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TAdventureTeamUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTeamUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTeamUserInfo_descriptor_;
}

const TAdventureTeamUserInfo& TAdventureTeamUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureTeamUserInfo* TAdventureTeamUserInfo::default_instance_ = NULL;

TAdventureTeamUserInfo* TAdventureTeamUserInfo::New() const {
  return new TAdventureTeamUserInfo;
}

void TAdventureTeamUserInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TAdventureUserSimpleInfo::Clear();
    }
    memmode_ = 0;
    memberstatus_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTeamUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTeamUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAdventureUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MemMode;
        break;
      }

      // optional .pb.ETeamMode MemMode = 2;
      case 2: {
        if (tag == 16) {
         parse_MemMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETeamMode_IsValid(value)) {
            set_memmode(static_cast< ::pb::ETeamMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MemberStatus;
        break;
      }

      // optional .pb.EHallMemberReadyStatus MemberStatus = 3;
      case 3: {
        if (tag == 24) {
         parse_MemberStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EHallMemberReadyStatus_IsValid(value)) {
            set_memberstatus(static_cast< ::pb::EHallMemberReadyStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTeamUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTeamUserInfo)
  return false;
#undef DO_
}

void TAdventureTeamUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTeamUserInfo)
  // optional .pb.TAdventureUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional .pb.ETeamMode MemMode = 2;
  if (has_memmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->memmode(), output);
  }

  // optional .pb.EHallMemberReadyStatus MemberStatus = 3;
  if (has_memberstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->memberstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTeamUserInfo)
}

::google::protobuf::uint8* TAdventureTeamUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTeamUserInfo)
  // optional .pb.TAdventureUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional .pb.ETeamMode MemMode = 2;
  if (has_memmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->memmode(), target);
  }

  // optional .pb.EHallMemberReadyStatus MemberStatus = 3;
  if (has_memberstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->memberstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTeamUserInfo)
  return target;
}

int TAdventureTeamUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAdventureUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional .pb.ETeamMode MemMode = 2;
    if (has_memmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->memmode());
    }

    // optional .pb.EHallMemberReadyStatus MemberStatus = 3;
    if (has_memberstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->memberstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTeamUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTeamUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTeamUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTeamUserInfo::MergeFrom(const TAdventureTeamUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TAdventureUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_memmode()) {
      set_memmode(from.memmode());
    }
    if (from.has_memberstatus()) {
      set_memberstatus(from.memberstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTeamUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTeamUserInfo::CopyFrom(const TAdventureTeamUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTeamUserInfo::IsInitialized() const {

  return true;
}

void TAdventureTeamUserInfo::Swap(TAdventureTeamUserInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(memmode_, other->memmode_);
    std::swap(memberstatus_, other->memberstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTeamUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTeamUserInfo_descriptor_;
  metadata.reflection = TAdventureTeamUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTeamSpecificInfo::kMapIdFieldNumber;
const int TAdventureTeamSpecificInfo::kMapEntryIdFieldNumber;
const int TAdventureTeamSpecificInfo::kMapTimeFieldNumber;
const int TAdventureTeamSpecificInfo::kAdventureTypeFieldNumber;
#endif  // !_MSC_VER

TAdventureTeamSpecificInfo::TAdventureTeamSpecificInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTeamSpecificInfo)
}

void TAdventureTeamSpecificInfo::InitAsDefaultInstance() {
}

TAdventureTeamSpecificInfo::TAdventureTeamSpecificInfo(const TAdventureTeamSpecificInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTeamSpecificInfo)
}

void TAdventureTeamSpecificInfo::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = GOOGLE_ULONGLONG(0);
  mapentryid_ = 0u;
  maptime_ = GOOGLE_ULONGLONG(0);
  adventuretype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTeamSpecificInfo::~TAdventureTeamSpecificInfo() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTeamSpecificInfo)
  SharedDtor();
}

void TAdventureTeamSpecificInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTeamSpecificInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTeamSpecificInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTeamSpecificInfo_descriptor_;
}

const TAdventureTeamSpecificInfo& TAdventureTeamSpecificInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureTeamSpecificInfo* TAdventureTeamSpecificInfo::default_instance_ = NULL;

TAdventureTeamSpecificInfo* TAdventureTeamSpecificInfo::New() const {
  return new TAdventureTeamSpecificInfo;
}

void TAdventureTeamSpecificInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureTeamSpecificInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mapid_, adventuretype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTeamSpecificInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTeamSpecificInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 MapId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MapEntryId;
        break;
      }

      // optional uint32 MapEntryId = 2;
      case 2: {
        if (tag == 16) {
         parse_MapEntryId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapentryid_)));
          set_has_mapentryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MapTime;
        break;
      }

      // optional uint64 MapTime = 3;
      case 3: {
        if (tag == 24) {
         parse_MapTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maptime_)));
          set_has_maptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AdventureType;
        break;
      }

      // optional .pb.EAdventureType AdventureType = 4;
      case 4: {
        if (tag == 32) {
         parse_AdventureType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAdventureType_IsValid(value)) {
            set_adventuretype(static_cast< ::pb::EAdventureType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTeamSpecificInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTeamSpecificInfo)
  return false;
#undef DO_
}

void TAdventureTeamSpecificInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTeamSpecificInfo)
  // optional uint64 MapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mapid(), output);
  }

  // optional uint32 MapEntryId = 2;
  if (has_mapentryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapentryid(), output);
  }

  // optional uint64 MapTime = 3;
  if (has_maptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->maptime(), output);
  }

  // optional .pb.EAdventureType AdventureType = 4;
  if (has_adventuretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->adventuretype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTeamSpecificInfo)
}

::google::protobuf::uint8* TAdventureTeamSpecificInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTeamSpecificInfo)
  // optional uint64 MapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mapid(), target);
  }

  // optional uint32 MapEntryId = 2;
  if (has_mapentryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapentryid(), target);
  }

  // optional uint64 MapTime = 3;
  if (has_maptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->maptime(), target);
  }

  // optional .pb.EAdventureType AdventureType = 4;
  if (has_adventuretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->adventuretype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTeamSpecificInfo)
  return target;
}

int TAdventureTeamSpecificInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 MapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // optional uint32 MapEntryId = 2;
    if (has_mapentryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapentryid());
    }

    // optional uint64 MapTime = 3;
    if (has_maptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maptime());
    }

    // optional .pb.EAdventureType AdventureType = 4;
    if (has_adventuretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adventuretype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTeamSpecificInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTeamSpecificInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTeamSpecificInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTeamSpecificInfo::MergeFrom(const TAdventureTeamSpecificInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_mapentryid()) {
      set_mapentryid(from.mapentryid());
    }
    if (from.has_maptime()) {
      set_maptime(from.maptime());
    }
    if (from.has_adventuretype()) {
      set_adventuretype(from.adventuretype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTeamSpecificInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTeamSpecificInfo::CopyFrom(const TAdventureTeamSpecificInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTeamSpecificInfo::IsInitialized() const {

  return true;
}

void TAdventureTeamSpecificInfo::Swap(TAdventureTeamSpecificInfo* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(mapentryid_, other->mapentryid_);
    std::swap(maptime_, other->maptime_);
    std::swap(adventuretype_, other->adventuretype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTeamSpecificInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTeamSpecificInfo_descriptor_;
  metadata.reflection = TAdventureTeamSpecificInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTeamInfo::kRoomIdFieldNumber;
const int TAdventureTeamInfo::kTeamIdFieldNumber;
const int TAdventureTeamInfo::kLeaderUidFieldNumber;
const int TAdventureTeamInfo::kTeamUserArrFieldNumber;
const int TAdventureTeamInfo::kMapTidFieldNumber;
const int TAdventureTeamInfo::kStatusFieldNumber;
const int TAdventureTeamInfo::kMapIdFieldNumber;
#endif  // !_MSC_VER

TAdventureTeamInfo::TAdventureTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTeamInfo)
}

void TAdventureTeamInfo::InitAsDefaultInstance() {
}

TAdventureTeamInfo::TAdventureTeamInfo(const TAdventureTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTeamInfo)
}

void TAdventureTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  leaderuid_ = GOOGLE_ULONGLONG(0);
  maptid_ = 0u;
  status_ = 1;
  mapid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTeamInfo::~TAdventureTeamInfo() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTeamInfo)
  SharedDtor();
}

void TAdventureTeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTeamInfo_descriptor_;
}

const TAdventureTeamInfo& TAdventureTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureTeamInfo* TAdventureTeamInfo::default_instance_ = NULL;

TAdventureTeamInfo* TAdventureTeamInfo::New() const {
  return new TAdventureTeamInfo;
}

void TAdventureTeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureTeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 119) {
    ZR_(roomid_, leaderuid_);
    maptid_ = 0u;
    status_ = 1;
    mapid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  teamuserarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LeaderUid;
        break;
      }

      // optional uint64 LeaderUid = 3;
      case 3: {
        if (tag == 24) {
         parse_LeaderUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderuid_)));
          set_has_leaderuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_TeamUserArr;
        break;
      }

      // repeated .pb.TAdventureTeamUserInfo TeamUserArr = 4;
      case 4: {
        if (tag == 34) {
         parse_TeamUserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamuserarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_TeamUserArr;
        if (input->ExpectTag(40)) goto parse_MapTid;
        break;
      }

      // optional uint32 MapTid = 5;
      case 5: {
        if (tag == 40) {
         parse_MapTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maptid_)));
          set_has_maptid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Status;
        break;
      }

      // optional .pb.EAdventureTeamPrivateStatus Status = 6;
      case 6: {
        if (tag == 48) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAdventureTeamPrivateStatus_IsValid(value)) {
            set_status(static_cast< ::pb::EAdventureTeamPrivateStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_MapId;
        break;
      }

      // optional uint64 MapId = 7;
      case 7: {
        if (tag == 56) {
         parse_MapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTeamInfo)
  return false;
#undef DO_
}

void TAdventureTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTeamInfo)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional uint64 LeaderUid = 3;
  if (has_leaderuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->leaderuid(), output);
  }

  // repeated .pb.TAdventureTeamUserInfo TeamUserArr = 4;
  for (int i = 0; i < this->teamuserarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->teamuserarr(i), output);
  }

  // optional uint32 MapTid = 5;
  if (has_maptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maptid(), output);
  }

  // optional .pb.EAdventureTeamPrivateStatus Status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  // optional uint64 MapId = 7;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTeamInfo)
}

::google::protobuf::uint8* TAdventureTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTeamInfo)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional uint64 LeaderUid = 3;
  if (has_leaderuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->leaderuid(), target);
  }

  // repeated .pb.TAdventureTeamUserInfo TeamUserArr = 4;
  for (int i = 0; i < this->teamuserarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->teamuserarr(i), target);
  }

  // optional uint32 MapTid = 5;
  if (has_maptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maptid(), target);
  }

  // optional .pb.EAdventureTeamPrivateStatus Status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  // optional uint64 MapId = 7;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTeamInfo)
  return target;
}

int TAdventureTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 LeaderUid = 3;
    if (has_leaderuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderuid());
    }

    // optional uint32 MapTid = 5;
    if (has_maptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maptid());
    }

    // optional .pb.EAdventureTeamPrivateStatus Status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint64 MapId = 7;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

  }
  // repeated .pb.TAdventureTeamUserInfo TeamUserArr = 4;
  total_size += 1 * this->teamuserarr_size();
  for (int i = 0; i < this->teamuserarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamuserarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTeamInfo::MergeFrom(const TAdventureTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamuserarr_.MergeFrom(from.teamuserarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_leaderuid()) {
      set_leaderuid(from.leaderuid());
    }
    if (from.has_maptid()) {
      set_maptid(from.maptid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTeamInfo::CopyFrom(const TAdventureTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTeamInfo::IsInitialized() const {

  return true;
}

void TAdventureTeamInfo::Swap(TAdventureTeamInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(leaderuid_, other->leaderuid_);
    teamuserarr_.Swap(&other->teamuserarr_);
    std::swap(maptid_, other->maptid_);
    std::swap(status_, other->status_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTeamInfo_descriptor_;
  metadata.reflection = TAdventureTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureSimpleTeamInfo::kRoomIdFieldNumber;
const int TAdventureSimpleTeamInfo::kTeamIdFieldNumber;
const int TAdventureSimpleTeamInfo::kLeaderUserInfoFieldNumber;
const int TAdventureSimpleTeamInfo::kTeamUserNumFieldNumber;
const int TAdventureSimpleTeamInfo::kMapTidFieldNumber;
const int TAdventureSimpleTeamInfo::kMapIdFieldNumber;
#endif  // !_MSC_VER

TAdventureSimpleTeamInfo::TAdventureSimpleTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureSimpleTeamInfo)
}

void TAdventureSimpleTeamInfo::InitAsDefaultInstance() {
  leaderuserinfo_ = const_cast< ::pb::TAdventureUserSimpleInfo*>(&::pb::TAdventureUserSimpleInfo::default_instance());
}

TAdventureSimpleTeamInfo::TAdventureSimpleTeamInfo(const TAdventureSimpleTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureSimpleTeamInfo)
}

void TAdventureSimpleTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  leaderuserinfo_ = NULL;
  teamusernum_ = 0u;
  maptid_ = 0u;
  mapid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureSimpleTeamInfo::~TAdventureSimpleTeamInfo() {
  // @@protoc_insertion_point(destructor:pb.TAdventureSimpleTeamInfo)
  SharedDtor();
}

void TAdventureSimpleTeamInfo::SharedDtor() {
  if (this != default_instance_) {
    delete leaderuserinfo_;
  }
}

void TAdventureSimpleTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureSimpleTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureSimpleTeamInfo_descriptor_;
}

const TAdventureSimpleTeamInfo& TAdventureSimpleTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureSimpleTeamInfo* TAdventureSimpleTeamInfo::default_instance_ = NULL;

TAdventureSimpleTeamInfo* TAdventureSimpleTeamInfo::New() const {
  return new TAdventureSimpleTeamInfo;
}

void TAdventureSimpleTeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureSimpleTeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(roomid_, teamid_);
    ZR_(teamusernum_, mapid_);
    if (has_leaderuserinfo()) {
      if (leaderuserinfo_ != NULL) leaderuserinfo_->::pb::TAdventureUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureSimpleTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureSimpleTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_LeaderUserInfo;
        break;
      }

      // optional .pb.TAdventureUserSimpleInfo LeaderUserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_LeaderUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaderuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TeamUserNum;
        break;
      }

      // optional uint32 TeamUserNum = 4;
      case 4: {
        if (tag == 32) {
         parse_TeamUserNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamusernum_)));
          set_has_teamusernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MapTid;
        break;
      }

      // optional uint32 MapTid = 5;
      case 5: {
        if (tag == 40) {
         parse_MapTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maptid_)));
          set_has_maptid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_MapId;
        break;
      }

      // optional uint64 MapId = 6;
      case 6: {
        if (tag == 48) {
         parse_MapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureSimpleTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureSimpleTeamInfo)
  return false;
#undef DO_
}

void TAdventureSimpleTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureSimpleTeamInfo)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional .pb.TAdventureUserSimpleInfo LeaderUserInfo = 3;
  if (has_leaderuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leaderuserinfo(), output);
  }

  // optional uint32 TeamUserNum = 4;
  if (has_teamusernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teamusernum(), output);
  }

  // optional uint32 MapTid = 5;
  if (has_maptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maptid(), output);
  }

  // optional uint64 MapId = 6;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureSimpleTeamInfo)
}

::google::protobuf::uint8* TAdventureSimpleTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureSimpleTeamInfo)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional .pb.TAdventureUserSimpleInfo LeaderUserInfo = 3;
  if (has_leaderuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->leaderuserinfo(), target);
  }

  // optional uint32 TeamUserNum = 4;
  if (has_teamusernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teamusernum(), target);
  }

  // optional uint32 MapTid = 5;
  if (has_maptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maptid(), target);
  }

  // optional uint64 MapId = 6;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureSimpleTeamInfo)
  return target;
}

int TAdventureSimpleTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.TAdventureUserSimpleInfo LeaderUserInfo = 3;
    if (has_leaderuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaderuserinfo());
    }

    // optional uint32 TeamUserNum = 4;
    if (has_teamusernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamusernum());
    }

    // optional uint32 MapTid = 5;
    if (has_maptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maptid());
    }

    // optional uint64 MapId = 6;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureSimpleTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureSimpleTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureSimpleTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureSimpleTeamInfo::MergeFrom(const TAdventureSimpleTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_leaderuserinfo()) {
      mutable_leaderuserinfo()->::pb::TAdventureUserSimpleInfo::MergeFrom(from.leaderuserinfo());
    }
    if (from.has_teamusernum()) {
      set_teamusernum(from.teamusernum());
    }
    if (from.has_maptid()) {
      set_maptid(from.maptid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureSimpleTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureSimpleTeamInfo::CopyFrom(const TAdventureSimpleTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureSimpleTeamInfo::IsInitialized() const {

  return true;
}

void TAdventureSimpleTeamInfo::Swap(TAdventureSimpleTeamInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(leaderuserinfo_, other->leaderuserinfo_);
    std::swap(teamusernum_, other->teamusernum_);
    std::swap(maptid_, other->maptid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureSimpleTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureSimpleTeamInfo_descriptor_;
  metadata.reflection = TAdventureSimpleTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetTeamArrReq::kSelectTypeFieldNumber;
const int TAdventureGetTeamArrReq::kRoomIdFieldNumber;
const int TAdventureGetTeamArrReq::kNumFieldNumber;
#endif  // !_MSC_VER

TAdventureGetTeamArrReq::TAdventureGetTeamArrReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetTeamArrReq)
}

void TAdventureGetTeamArrReq::InitAsDefaultInstance() {
}

TAdventureGetTeamArrReq::TAdventureGetTeamArrReq(const TAdventureGetTeamArrReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetTeamArrReq)
}

void TAdventureGetTeamArrReq::SharedCtor() {
  _cached_size_ = 0;
  selecttype_ = 0u;
  roomid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetTeamArrReq::~TAdventureGetTeamArrReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetTeamArrReq)
  SharedDtor();
}

void TAdventureGetTeamArrReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureGetTeamArrReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetTeamArrReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetTeamArrReq_descriptor_;
}

const TAdventureGetTeamArrReq& TAdventureGetTeamArrReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureGetTeamArrReq* TAdventureGetTeamArrReq::default_instance_ = NULL;

TAdventureGetTeamArrReq* TAdventureGetTeamArrReq::New() const {
  return new TAdventureGetTeamArrReq;
}

void TAdventureGetTeamArrReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureGetTeamArrReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(selecttype_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetTeamArrReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetTeamArrReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SelectType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selecttype_)));
          set_has_selecttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoomId;
        break;
      }

      // optional uint32 RoomId = 2;
      case 2: {
        if (tag == 16) {
         parse_RoomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 3;
      case 3: {
        if (tag == 24) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetTeamArrReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetTeamArrReq)
  return false;
#undef DO_
}

void TAdventureGetTeamArrReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetTeamArrReq)
  // optional uint32 SelectType = 1;
  if (has_selecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->selecttype(), output);
  }

  // optional uint32 RoomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roomid(), output);
  }

  // optional uint32 Num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetTeamArrReq)
}

::google::protobuf::uint8* TAdventureGetTeamArrReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetTeamArrReq)
  // optional uint32 SelectType = 1;
  if (has_selecttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->selecttype(), target);
  }

  // optional uint32 RoomId = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roomid(), target);
  }

  // optional uint32 Num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetTeamArrReq)
  return target;
}

int TAdventureGetTeamArrReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SelectType = 1;
    if (has_selecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selecttype());
    }

    // optional uint32 RoomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional uint32 Num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetTeamArrReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetTeamArrReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetTeamArrReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetTeamArrReq::MergeFrom(const TAdventureGetTeamArrReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selecttype()) {
      set_selecttype(from.selecttype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetTeamArrReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetTeamArrReq::CopyFrom(const TAdventureGetTeamArrReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetTeamArrReq::IsInitialized() const {

  return true;
}

void TAdventureGetTeamArrReq::Swap(TAdventureGetTeamArrReq* other) {
  if (other != this) {
    std::swap(selecttype_, other->selecttype_);
    std::swap(roomid_, other->roomid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetTeamArrReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetTeamArrReq_descriptor_;
  metadata.reflection = TAdventureGetTeamArrReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetTeamArrRsp::kTeamArrFieldNumber;
#endif  // !_MSC_VER

TAdventureGetTeamArrRsp::TAdventureGetTeamArrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetTeamArrRsp)
}

void TAdventureGetTeamArrRsp::InitAsDefaultInstance() {
}

TAdventureGetTeamArrRsp::TAdventureGetTeamArrRsp(const TAdventureGetTeamArrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetTeamArrRsp)
}

void TAdventureGetTeamArrRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetTeamArrRsp::~TAdventureGetTeamArrRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetTeamArrRsp)
  SharedDtor();
}

void TAdventureGetTeamArrRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureGetTeamArrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetTeamArrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetTeamArrRsp_descriptor_;
}

const TAdventureGetTeamArrRsp& TAdventureGetTeamArrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureGetTeamArrRsp* TAdventureGetTeamArrRsp::default_instance_ = NULL;

TAdventureGetTeamArrRsp* TAdventureGetTeamArrRsp::New() const {
  return new TAdventureGetTeamArrRsp;
}

void TAdventureGetTeamArrRsp::Clear() {
  teamarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetTeamArrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetTeamArrRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAdventureSimpleTeamInfo TeamArr = 1;
      case 1: {
        if (tag == 10) {
         parse_TeamArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TeamArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetTeamArrRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetTeamArrRsp)
  return false;
#undef DO_
}

void TAdventureGetTeamArrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetTeamArrRsp)
  // repeated .pb.TAdventureSimpleTeamInfo TeamArr = 1;
  for (int i = 0; i < this->teamarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teamarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetTeamArrRsp)
}

::google::protobuf::uint8* TAdventureGetTeamArrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetTeamArrRsp)
  // repeated .pb.TAdventureSimpleTeamInfo TeamArr = 1;
  for (int i = 0; i < this->teamarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teamarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetTeamArrRsp)
  return target;
}

int TAdventureGetTeamArrRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TAdventureSimpleTeamInfo TeamArr = 1;
  total_size += 1 * this->teamarr_size();
  for (int i = 0; i < this->teamarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetTeamArrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetTeamArrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetTeamArrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetTeamArrRsp::MergeFrom(const TAdventureGetTeamArrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamarr_.MergeFrom(from.teamarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetTeamArrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetTeamArrRsp::CopyFrom(const TAdventureGetTeamArrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetTeamArrRsp::IsInitialized() const {

  return true;
}

void TAdventureGetTeamArrRsp::Swap(TAdventureGetTeamArrRsp* other) {
  if (other != this) {
    teamarr_.Swap(&other->teamarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetTeamArrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetTeamArrRsp_descriptor_;
  metadata.reflection = TAdventureGetTeamArrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureCreateTeamReq::kIndexIdFieldNumber;
const int TAdventureCreateTeamReq::kTeamStatusFieldNumber;
const int TAdventureCreateTeamReq::kAdventureTypeFieldNumber;
#endif  // !_MSC_VER

TAdventureCreateTeamReq::TAdventureCreateTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureCreateTeamReq)
}

void TAdventureCreateTeamReq::InitAsDefaultInstance() {
}

TAdventureCreateTeamReq::TAdventureCreateTeamReq(const TAdventureCreateTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureCreateTeamReq)
}

void TAdventureCreateTeamReq::SharedCtor() {
  _cached_size_ = 0;
  indexid_ = GOOGLE_ULONGLONG(0);
  teamstatus_ = 1;
  adventuretype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureCreateTeamReq::~TAdventureCreateTeamReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureCreateTeamReq)
  SharedDtor();
}

void TAdventureCreateTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureCreateTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureCreateTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureCreateTeamReq_descriptor_;
}

const TAdventureCreateTeamReq& TAdventureCreateTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureCreateTeamReq* TAdventureCreateTeamReq::default_instance_ = NULL;

TAdventureCreateTeamReq* TAdventureCreateTeamReq::New() const {
  return new TAdventureCreateTeamReq;
}

void TAdventureCreateTeamReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    indexid_ = GOOGLE_ULONGLONG(0);
    teamstatus_ = 1;
    adventuretype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureCreateTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureCreateTeamReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 IndexId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &indexid_)));
          set_has_indexid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamStatus;
        break;
      }

      // optional .pb.EAdventureTeamPrivateStatus TeamStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAdventureTeamPrivateStatus_IsValid(value)) {
            set_teamstatus(static_cast< ::pb::EAdventureTeamPrivateStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AdventureType;
        break;
      }

      // optional .pb.EAdventureType AdventureType = 3;
      case 3: {
        if (tag == 24) {
         parse_AdventureType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAdventureType_IsValid(value)) {
            set_adventuretype(static_cast< ::pb::EAdventureType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureCreateTeamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureCreateTeamReq)
  return false;
#undef DO_
}

void TAdventureCreateTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureCreateTeamReq)
  // optional uint64 IndexId = 1;
  if (has_indexid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->indexid(), output);
  }

  // optional .pb.EAdventureTeamPrivateStatus TeamStatus = 2;
  if (has_teamstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->teamstatus(), output);
  }

  // optional .pb.EAdventureType AdventureType = 3;
  if (has_adventuretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->adventuretype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureCreateTeamReq)
}

::google::protobuf::uint8* TAdventureCreateTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureCreateTeamReq)
  // optional uint64 IndexId = 1;
  if (has_indexid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->indexid(), target);
  }

  // optional .pb.EAdventureTeamPrivateStatus TeamStatus = 2;
  if (has_teamstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->teamstatus(), target);
  }

  // optional .pb.EAdventureType AdventureType = 3;
  if (has_adventuretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->adventuretype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureCreateTeamReq)
  return target;
}

int TAdventureCreateTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 IndexId = 1;
    if (has_indexid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->indexid());
    }

    // optional .pb.EAdventureTeamPrivateStatus TeamStatus = 2;
    if (has_teamstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teamstatus());
    }

    // optional .pb.EAdventureType AdventureType = 3;
    if (has_adventuretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adventuretype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureCreateTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureCreateTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureCreateTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureCreateTeamReq::MergeFrom(const TAdventureCreateTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_indexid()) {
      set_indexid(from.indexid());
    }
    if (from.has_teamstatus()) {
      set_teamstatus(from.teamstatus());
    }
    if (from.has_adventuretype()) {
      set_adventuretype(from.adventuretype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureCreateTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureCreateTeamReq::CopyFrom(const TAdventureCreateTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureCreateTeamReq::IsInitialized() const {

  return true;
}

void TAdventureCreateTeamReq::Swap(TAdventureCreateTeamReq* other) {
  if (other != this) {
    std::swap(indexid_, other->indexid_);
    std::swap(teamstatus_, other->teamstatus_);
    std::swap(adventuretype_, other->adventuretype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureCreateTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureCreateTeamReq_descriptor_;
  metadata.reflection = TAdventureCreateTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureCreateTeamRsp::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

TAdventureCreateTeamRsp::TAdventureCreateTeamRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureCreateTeamRsp)
}

void TAdventureCreateTeamRsp::InitAsDefaultInstance() {
  teaminfo_ = const_cast< ::pb::TAdventureTeamInfo*>(&::pb::TAdventureTeamInfo::default_instance());
}

TAdventureCreateTeamRsp::TAdventureCreateTeamRsp(const TAdventureCreateTeamRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureCreateTeamRsp)
}

void TAdventureCreateTeamRsp::SharedCtor() {
  _cached_size_ = 0;
  teaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureCreateTeamRsp::~TAdventureCreateTeamRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureCreateTeamRsp)
  SharedDtor();
}

void TAdventureCreateTeamRsp::SharedDtor() {
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

void TAdventureCreateTeamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureCreateTeamRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureCreateTeamRsp_descriptor_;
}

const TAdventureCreateTeamRsp& TAdventureCreateTeamRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureCreateTeamRsp* TAdventureCreateTeamRsp::default_instance_ = NULL;

TAdventureCreateTeamRsp* TAdventureCreateTeamRsp::New() const {
  return new TAdventureCreateTeamRsp;
}

void TAdventureCreateTeamRsp::Clear() {
  if (has_teaminfo()) {
    if (teaminfo_ != NULL) teaminfo_->::pb::TAdventureTeamInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureCreateTeamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureCreateTeamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAdventureTeamInfo TeamInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureCreateTeamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureCreateTeamRsp)
  return false;
#undef DO_
}

void TAdventureCreateTeamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureCreateTeamRsp)
  // optional .pb.TAdventureTeamInfo TeamInfo = 1;
  if (has_teaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureCreateTeamRsp)
}

::google::protobuf::uint8* TAdventureCreateTeamRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureCreateTeamRsp)
  // optional .pb.TAdventureTeamInfo TeamInfo = 1;
  if (has_teaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureCreateTeamRsp)
  return target;
}

int TAdventureCreateTeamRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAdventureTeamInfo TeamInfo = 1;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureCreateTeamRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureCreateTeamRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureCreateTeamRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureCreateTeamRsp::MergeFrom(const TAdventureCreateTeamRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teaminfo()) {
      mutable_teaminfo()->::pb::TAdventureTeamInfo::MergeFrom(from.teaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureCreateTeamRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureCreateTeamRsp::CopyFrom(const TAdventureCreateTeamRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureCreateTeamRsp::IsInitialized() const {

  return true;
}

void TAdventureCreateTeamRsp::Swap(TAdventureCreateTeamRsp* other) {
  if (other != this) {
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureCreateTeamRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureCreateTeamRsp_descriptor_;
  metadata.reflection = TAdventureCreateTeamRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTeamInviteReq::kRoomIdFieldNumber;
const int TAdventureTeamInviteReq::kTeamIdFieldNumber;
const int TAdventureTeamInviteReq::kUidArrFieldNumber;
#endif  // !_MSC_VER

TAdventureTeamInviteReq::TAdventureTeamInviteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTeamInviteReq)
}

void TAdventureTeamInviteReq::InitAsDefaultInstance() {
}

TAdventureTeamInviteReq::TAdventureTeamInviteReq(const TAdventureTeamInviteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTeamInviteReq)
}

void TAdventureTeamInviteReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTeamInviteReq::~TAdventureTeamInviteReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTeamInviteReq)
  SharedDtor();
}

void TAdventureTeamInviteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTeamInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTeamInviteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTeamInviteReq_descriptor_;
}

const TAdventureTeamInviteReq& TAdventureTeamInviteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureTeamInviteReq* TAdventureTeamInviteReq::default_instance_ = NULL;

TAdventureTeamInviteReq* TAdventureTeamInviteReq::New() const {
  return new TAdventureTeamInviteReq;
}

void TAdventureTeamInviteReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureTeamInviteReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  uidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTeamInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTeamInviteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UidArr;
        break;
      }

      // repeated uint64 UidArr = 3;
      case 3: {
        if (tag == 24) {
         parse_UidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_uidarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTeamInviteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTeamInviteReq)
  return false;
#undef DO_
}

void TAdventureTeamInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTeamInviteReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // repeated uint64 UidArr = 3;
  for (int i = 0; i < this->uidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->uidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTeamInviteReq)
}

::google::protobuf::uint8* TAdventureTeamInviteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTeamInviteReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // repeated uint64 UidArr = 3;
  for (int i = 0; i < this->uidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->uidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTeamInviteReq)
  return target;
}

int TAdventureTeamInviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  // repeated uint64 UidArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->uidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uidarr(i));
    }
    total_size += 1 * this->uidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTeamInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTeamInviteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTeamInviteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTeamInviteReq::MergeFrom(const TAdventureTeamInviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  uidarr_.MergeFrom(from.uidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTeamInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTeamInviteReq::CopyFrom(const TAdventureTeamInviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTeamInviteReq::IsInitialized() const {

  return true;
}

void TAdventureTeamInviteReq::Swap(TAdventureTeamInviteReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    uidarr_.Swap(&other->uidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTeamInviteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTeamInviteReq_descriptor_;
  metadata.reflection = TAdventureTeamInviteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureJoinTeamReq::kRoomIdFieldNumber;
const int TAdventureJoinTeamReq::kTeamIdFieldNumber;
const int TAdventureJoinTeamReq::kJoinModeFieldNumber;
const int TAdventureJoinTeamReq::kCheckPrivateFieldNumber;
#endif  // !_MSC_VER

TAdventureJoinTeamReq::TAdventureJoinTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureJoinTeamReq)
}

void TAdventureJoinTeamReq::InitAsDefaultInstance() {
}

TAdventureJoinTeamReq::TAdventureJoinTeamReq(const TAdventureJoinTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureJoinTeamReq)
}

void TAdventureJoinTeamReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  joinmode_ = 0;
  checkprivate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureJoinTeamReq::~TAdventureJoinTeamReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureJoinTeamReq)
  SharedDtor();
}

void TAdventureJoinTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureJoinTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureJoinTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureJoinTeamReq_descriptor_;
}

const TAdventureJoinTeamReq& TAdventureJoinTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureJoinTeamReq* TAdventureJoinTeamReq::default_instance_ = NULL;

TAdventureJoinTeamReq* TAdventureJoinTeamReq::New() const {
  return new TAdventureJoinTeamReq;
}

void TAdventureJoinTeamReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureJoinTeamReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, checkprivate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureJoinTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureJoinTeamReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_JoinMode;
        break;
      }

      // optional .pb.ETeamMode JoinMode = 3;
      case 3: {
        if (tag == 24) {
         parse_JoinMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETeamMode_IsValid(value)) {
            set_joinmode(static_cast< ::pb::ETeamMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CheckPrivate;
        break;
      }

      // optional bool CheckPrivate = 4;
      case 4: {
        if (tag == 32) {
         parse_CheckPrivate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &checkprivate_)));
          set_has_checkprivate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureJoinTeamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureJoinTeamReq)
  return false;
#undef DO_
}

void TAdventureJoinTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureJoinTeamReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional .pb.ETeamMode JoinMode = 3;
  if (has_joinmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->joinmode(), output);
  }

  // optional bool CheckPrivate = 4;
  if (has_checkprivate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->checkprivate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureJoinTeamReq)
}

::google::protobuf::uint8* TAdventureJoinTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureJoinTeamReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional .pb.ETeamMode JoinMode = 3;
  if (has_joinmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->joinmode(), target);
  }

  // optional bool CheckPrivate = 4;
  if (has_checkprivate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->checkprivate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureJoinTeamReq)
  return target;
}

int TAdventureJoinTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.ETeamMode JoinMode = 3;
    if (has_joinmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->joinmode());
    }

    // optional bool CheckPrivate = 4;
    if (has_checkprivate()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureJoinTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureJoinTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureJoinTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureJoinTeamReq::MergeFrom(const TAdventureJoinTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_joinmode()) {
      set_joinmode(from.joinmode());
    }
    if (from.has_checkprivate()) {
      set_checkprivate(from.checkprivate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureJoinTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureJoinTeamReq::CopyFrom(const TAdventureJoinTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureJoinTeamReq::IsInitialized() const {

  return true;
}

void TAdventureJoinTeamReq::Swap(TAdventureJoinTeamReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(joinmode_, other->joinmode_);
    std::swap(checkprivate_, other->checkprivate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureJoinTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureJoinTeamReq_descriptor_;
  metadata.reflection = TAdventureJoinTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureJoinTeamRsp::kErrorCodeFieldNumber;
const int TAdventureJoinTeamRsp::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

TAdventureJoinTeamRsp::TAdventureJoinTeamRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureJoinTeamRsp)
}

void TAdventureJoinTeamRsp::InitAsDefaultInstance() {
  teaminfo_ = const_cast< ::pb::TAdventureTeamInfo*>(&::pb::TAdventureTeamInfo::default_instance());
}

TAdventureJoinTeamRsp::TAdventureJoinTeamRsp(const TAdventureJoinTeamRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureJoinTeamRsp)
}

void TAdventureJoinTeamRsp::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  teaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureJoinTeamRsp::~TAdventureJoinTeamRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureJoinTeamRsp)
  SharedDtor();
}

void TAdventureJoinTeamRsp::SharedDtor() {
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

void TAdventureJoinTeamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureJoinTeamRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureJoinTeamRsp_descriptor_;
}

const TAdventureJoinTeamRsp& TAdventureJoinTeamRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureJoinTeamRsp* TAdventureJoinTeamRsp::default_instance_ = NULL;

TAdventureJoinTeamRsp* TAdventureJoinTeamRsp::New() const {
  return new TAdventureJoinTeamRsp;
}

void TAdventureJoinTeamRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errorcode_ = 0;
    if (has_teaminfo()) {
      if (teaminfo_ != NULL) teaminfo_->::pb::TAdventureTeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureJoinTeamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureJoinTeamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EJoinTeamErrorCode ErrorCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EJoinTeamErrorCode_IsValid(value)) {
            set_errorcode(static_cast< ::pb::EJoinTeamErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TeamInfo;
        break;
      }

      // optional .pb.TAdventureTeamInfo TeamInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_TeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureJoinTeamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureJoinTeamRsp)
  return false;
#undef DO_
}

void TAdventureJoinTeamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureJoinTeamRsp)
  // optional .pb.EJoinTeamErrorCode ErrorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errorcode(), output);
  }

  // optional .pb.TAdventureTeamInfo TeamInfo = 2;
  if (has_teaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureJoinTeamRsp)
}

::google::protobuf::uint8* TAdventureJoinTeamRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureJoinTeamRsp)
  // optional .pb.EJoinTeamErrorCode ErrorCode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errorcode(), target);
  }

  // optional .pb.TAdventureTeamInfo TeamInfo = 2;
  if (has_teaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureJoinTeamRsp)
  return target;
}

int TAdventureJoinTeamRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EJoinTeamErrorCode ErrorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorcode());
    }

    // optional .pb.TAdventureTeamInfo TeamInfo = 2;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureJoinTeamRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureJoinTeamRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureJoinTeamRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureJoinTeamRsp::MergeFrom(const TAdventureJoinTeamRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_teaminfo()) {
      mutable_teaminfo()->::pb::TAdventureTeamInfo::MergeFrom(from.teaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureJoinTeamRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureJoinTeamRsp::CopyFrom(const TAdventureJoinTeamRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureJoinTeamRsp::IsInitialized() const {

  return true;
}

void TAdventureJoinTeamRsp::Swap(TAdventureJoinTeamRsp* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureJoinTeamRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureJoinTeamRsp_descriptor_;
  metadata.reflection = TAdventureJoinTeamRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureKickReq::kRoomIdFieldNumber;
const int TAdventureKickReq::kTeamIdFieldNumber;
const int TAdventureKickReq::kKickUidFieldNumber;
#endif  // !_MSC_VER

TAdventureKickReq::TAdventureKickReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureKickReq)
}

void TAdventureKickReq::InitAsDefaultInstance() {
}

TAdventureKickReq::TAdventureKickReq(const TAdventureKickReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureKickReq)
}

void TAdventureKickReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  kickuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureKickReq::~TAdventureKickReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureKickReq)
  SharedDtor();
}

void TAdventureKickReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureKickReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureKickReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureKickReq_descriptor_;
}

const TAdventureKickReq& TAdventureKickReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureKickReq* TAdventureKickReq::default_instance_ = NULL;

TAdventureKickReq* TAdventureKickReq::New() const {
  return new TAdventureKickReq;
}

void TAdventureKickReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureKickReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, kickuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureKickReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureKickReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_KickUid;
        break;
      }

      // optional uint64 KickUid = 3;
      case 3: {
        if (tag == 24) {
         parse_KickUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kickuid_)));
          set_has_kickuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureKickReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureKickReq)
  return false;
#undef DO_
}

void TAdventureKickReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureKickReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional uint64 KickUid = 3;
  if (has_kickuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->kickuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureKickReq)
}

::google::protobuf::uint8* TAdventureKickReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureKickReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional uint64 KickUid = 3;
  if (has_kickuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->kickuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureKickReq)
  return target;
}

int TAdventureKickReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 KickUid = 3;
    if (has_kickuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kickuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureKickReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureKickReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureKickReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureKickReq::MergeFrom(const TAdventureKickReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_kickuid()) {
      set_kickuid(from.kickuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureKickReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureKickReq::CopyFrom(const TAdventureKickReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureKickReq::IsInitialized() const {

  return true;
}

void TAdventureKickReq::Swap(TAdventureKickReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(kickuid_, other->kickuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureKickReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureKickReq_descriptor_;
  metadata.reflection = TAdventureKickReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureQuitTeamReq::kRoomIdFieldNumber;
const int TAdventureQuitTeamReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TAdventureQuitTeamReq::TAdventureQuitTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureQuitTeamReq)
}

void TAdventureQuitTeamReq::InitAsDefaultInstance() {
}

TAdventureQuitTeamReq::TAdventureQuitTeamReq(const TAdventureQuitTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureQuitTeamReq)
}

void TAdventureQuitTeamReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureQuitTeamReq::~TAdventureQuitTeamReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureQuitTeamReq)
  SharedDtor();
}

void TAdventureQuitTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureQuitTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureQuitTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureQuitTeamReq_descriptor_;
}

const TAdventureQuitTeamReq& TAdventureQuitTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureQuitTeamReq* TAdventureQuitTeamReq::default_instance_ = NULL;

TAdventureQuitTeamReq* TAdventureQuitTeamReq::New() const {
  return new TAdventureQuitTeamReq;
}

void TAdventureQuitTeamReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureQuitTeamReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureQuitTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureQuitTeamReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureQuitTeamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureQuitTeamReq)
  return false;
#undef DO_
}

void TAdventureQuitTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureQuitTeamReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureQuitTeamReq)
}

::google::protobuf::uint8* TAdventureQuitTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureQuitTeamReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureQuitTeamReq)
  return target;
}

int TAdventureQuitTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureQuitTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureQuitTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureQuitTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureQuitTeamReq::MergeFrom(const TAdventureQuitTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureQuitTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureQuitTeamReq::CopyFrom(const TAdventureQuitTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureQuitTeamReq::IsInitialized() const {

  return true;
}

void TAdventureQuitTeamReq::Swap(TAdventureQuitTeamReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureQuitTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureQuitTeamReq_descriptor_;
  metadata.reflection = TAdventureQuitTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTeamStartReq::kRoomIdFieldNumber;
const int TAdventureTeamStartReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TAdventureTeamStartReq::TAdventureTeamStartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTeamStartReq)
}

void TAdventureTeamStartReq::InitAsDefaultInstance() {
}

TAdventureTeamStartReq::TAdventureTeamStartReq(const TAdventureTeamStartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTeamStartReq)
}

void TAdventureTeamStartReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTeamStartReq::~TAdventureTeamStartReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTeamStartReq)
  SharedDtor();
}

void TAdventureTeamStartReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTeamStartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTeamStartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTeamStartReq_descriptor_;
}

const TAdventureTeamStartReq& TAdventureTeamStartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureTeamStartReq* TAdventureTeamStartReq::default_instance_ = NULL;

TAdventureTeamStartReq* TAdventureTeamStartReq::New() const {
  return new TAdventureTeamStartReq;
}

void TAdventureTeamStartReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureTeamStartReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTeamStartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTeamStartReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTeamStartReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTeamStartReq)
  return false;
#undef DO_
}

void TAdventureTeamStartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTeamStartReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTeamStartReq)
}

::google::protobuf::uint8* TAdventureTeamStartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTeamStartReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTeamStartReq)
  return target;
}

int TAdventureTeamStartReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTeamStartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTeamStartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTeamStartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTeamStartReq::MergeFrom(const TAdventureTeamStartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTeamStartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTeamStartReq::CopyFrom(const TAdventureTeamStartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTeamStartReq::IsInitialized() const {

  return true;
}

void TAdventureTeamStartReq::Swap(TAdventureTeamStartReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTeamStartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTeamStartReq_descriptor_;
  metadata.reflection = TAdventureTeamStartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureInviteNotify::kRoomIdFieldNumber;
const int TAdventureInviteNotify::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TAdventureInviteNotify::TAdventureInviteNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureInviteNotify)
}

void TAdventureInviteNotify::InitAsDefaultInstance() {
}

TAdventureInviteNotify::TAdventureInviteNotify(const TAdventureInviteNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureInviteNotify)
}

void TAdventureInviteNotify::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureInviteNotify::~TAdventureInviteNotify() {
  // @@protoc_insertion_point(destructor:pb.TAdventureInviteNotify)
  SharedDtor();
}

void TAdventureInviteNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureInviteNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureInviteNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureInviteNotify_descriptor_;
}

const TAdventureInviteNotify& TAdventureInviteNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureInviteNotify* TAdventureInviteNotify::default_instance_ = NULL;

TAdventureInviteNotify* TAdventureInviteNotify::New() const {
  return new TAdventureInviteNotify;
}

void TAdventureInviteNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureInviteNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureInviteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureInviteNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureInviteNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureInviteNotify)
  return false;
#undef DO_
}

void TAdventureInviteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureInviteNotify)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureInviteNotify)
}

::google::protobuf::uint8* TAdventureInviteNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureInviteNotify)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureInviteNotify)
  return target;
}

int TAdventureInviteNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureInviteNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureInviteNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureInviteNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureInviteNotify::MergeFrom(const TAdventureInviteNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureInviteNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureInviteNotify::CopyFrom(const TAdventureInviteNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureInviteNotify::IsInitialized() const {

  return true;
}

void TAdventureInviteNotify::Swap(TAdventureInviteNotify* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureInviteNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureInviteNotify_descriptor_;
  metadata.reflection = TAdventureInviteNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetInviteListReq::kRoomIdFieldNumber;
const int TAdventureGetInviteListReq::kTeamIdFieldNumber;
const int TAdventureGetInviteListReq::kInviteTypeFieldNumber;
const int TAdventureGetInviteListReq::kNumFieldNumber;
const int TAdventureGetInviteListReq::kOffsetFieldNumber;
#endif  // !_MSC_VER

TAdventureGetInviteListReq::TAdventureGetInviteListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetInviteListReq)
}

void TAdventureGetInviteListReq::InitAsDefaultInstance() {
}

TAdventureGetInviteListReq::TAdventureGetInviteListReq(const TAdventureGetInviteListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetInviteListReq)
}

void TAdventureGetInviteListReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  invitetype_ = 1;
  num_ = 0u;
  offset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetInviteListReq::~TAdventureGetInviteListReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetInviteListReq)
  SharedDtor();
}

void TAdventureGetInviteListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureGetInviteListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetInviteListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetInviteListReq_descriptor_;
}

const TAdventureGetInviteListReq& TAdventureGetInviteListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureGetInviteListReq* TAdventureGetInviteListReq::default_instance_ = NULL;

TAdventureGetInviteListReq* TAdventureGetInviteListReq::New() const {
  return new TAdventureGetInviteListReq;
}

void TAdventureGetInviteListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureGetInviteListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(roomid_, teamid_);
    ZR_(num_, offset_);
    invitetype_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetInviteListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetInviteListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_InviteType;
        break;
      }

      // optional .pb.EAdventureInviteType InviteType = 3;
      case 3: {
        if (tag == 24) {
         parse_InviteType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAdventureInviteType_IsValid(value)) {
            set_invitetype(static_cast< ::pb::EAdventureInviteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 4;
      case 4: {
        if (tag == 32) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Offset;
        break;
      }

      // optional uint32 Offset = 5;
      case 5: {
        if (tag == 40) {
         parse_Offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetInviteListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetInviteListReq)
  return false;
#undef DO_
}

void TAdventureGetInviteListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetInviteListReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional .pb.EAdventureInviteType InviteType = 3;
  if (has_invitetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->invitetype(), output);
  }

  // optional uint32 Num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  // optional uint32 Offset = 5;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetInviteListReq)
}

::google::protobuf::uint8* TAdventureGetInviteListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetInviteListReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional .pb.EAdventureInviteType InviteType = 3;
  if (has_invitetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->invitetype(), target);
  }

  // optional uint32 Num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  // optional uint32 Offset = 5;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetInviteListReq)
  return target;
}

int TAdventureGetInviteListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.EAdventureInviteType InviteType = 3;
    if (has_invitetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->invitetype());
    }

    // optional uint32 Num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 Offset = 5;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetInviteListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetInviteListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetInviteListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetInviteListReq::MergeFrom(const TAdventureGetInviteListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_invitetype()) {
      set_invitetype(from.invitetype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetInviteListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetInviteListReq::CopyFrom(const TAdventureGetInviteListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetInviteListReq::IsInitialized() const {

  return true;
}

void TAdventureGetInviteListReq::Swap(TAdventureGetInviteListReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(invitetype_, other->invitetype_);
    std::swap(num_, other->num_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetInviteListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetInviteListReq_descriptor_;
  metadata.reflection = TAdventureGetInviteListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetInviteListRsp::kUserArrFieldNumber;
#endif  // !_MSC_VER

TAdventureGetInviteListRsp::TAdventureGetInviteListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetInviteListRsp)
}

void TAdventureGetInviteListRsp::InitAsDefaultInstance() {
}

TAdventureGetInviteListRsp::TAdventureGetInviteListRsp(const TAdventureGetInviteListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetInviteListRsp)
}

void TAdventureGetInviteListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetInviteListRsp::~TAdventureGetInviteListRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetInviteListRsp)
  SharedDtor();
}

void TAdventureGetInviteListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureGetInviteListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetInviteListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetInviteListRsp_descriptor_;
}

const TAdventureGetInviteListRsp& TAdventureGetInviteListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureGetInviteListRsp* TAdventureGetInviteListRsp::default_instance_ = NULL;

TAdventureGetInviteListRsp* TAdventureGetInviteListRsp::New() const {
  return new TAdventureGetInviteListRsp;
}

void TAdventureGetInviteListRsp::Clear() {
  userarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetInviteListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetInviteListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUserSimpleInfo UserArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UserArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetInviteListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetInviteListRsp)
  return false;
#undef DO_
}

void TAdventureGetInviteListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetInviteListRsp)
  // repeated .pb.TUserSimpleInfo UserArr = 1;
  for (int i = 0; i < this->userarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetInviteListRsp)
}

::google::protobuf::uint8* TAdventureGetInviteListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetInviteListRsp)
  // repeated .pb.TUserSimpleInfo UserArr = 1;
  for (int i = 0; i < this->userarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetInviteListRsp)
  return target;
}

int TAdventureGetInviteListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUserSimpleInfo UserArr = 1;
  total_size += 1 * this->userarr_size();
  for (int i = 0; i < this->userarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetInviteListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetInviteListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetInviteListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetInviteListRsp::MergeFrom(const TAdventureGetInviteListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userarr_.MergeFrom(from.userarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetInviteListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetInviteListRsp::CopyFrom(const TAdventureGetInviteListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetInviteListRsp::IsInitialized() const {

  return true;
}

void TAdventureGetInviteListRsp::Swap(TAdventureGetInviteListRsp* other) {
  if (other != this) {
    userarr_.Swap(&other->userarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetInviteListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetInviteListRsp_descriptor_;
  metadata.reflection = TAdventureGetInviteListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureUniqTeam::kRoomIdFieldNumber;
const int TAdventureUniqTeam::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TAdventureUniqTeam::TAdventureUniqTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureUniqTeam)
}

void TAdventureUniqTeam::InitAsDefaultInstance() {
}

TAdventureUniqTeam::TAdventureUniqTeam(const TAdventureUniqTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureUniqTeam)
}

void TAdventureUniqTeam::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureUniqTeam::~TAdventureUniqTeam() {
  // @@protoc_insertion_point(destructor:pb.TAdventureUniqTeam)
  SharedDtor();
}

void TAdventureUniqTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureUniqTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureUniqTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureUniqTeam_descriptor_;
}

const TAdventureUniqTeam& TAdventureUniqTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureUniqTeam* TAdventureUniqTeam::default_instance_ = NULL;

TAdventureUniqTeam* TAdventureUniqTeam::New() const {
  return new TAdventureUniqTeam;
}

void TAdventureUniqTeam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureUniqTeam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureUniqTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureUniqTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureUniqTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureUniqTeam)
  return false;
#undef DO_
}

void TAdventureUniqTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureUniqTeam)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureUniqTeam)
}

::google::protobuf::uint8* TAdventureUniqTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureUniqTeam)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureUniqTeam)
  return target;
}

int TAdventureUniqTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureUniqTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureUniqTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureUniqTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureUniqTeam::MergeFrom(const TAdventureUniqTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureUniqTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureUniqTeam::CopyFrom(const TAdventureUniqTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureUniqTeam::IsInitialized() const {

  return true;
}

void TAdventureUniqTeam::Swap(TAdventureUniqTeam* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureUniqTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureUniqTeam_descriptor_;
  metadata.reflection = TAdventureUniqTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetInviteTeamArrReq::kTeamArrFieldNumber;
#endif  // !_MSC_VER

TAdventureGetInviteTeamArrReq::TAdventureGetInviteTeamArrReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetInviteTeamArrReq)
}

void TAdventureGetInviteTeamArrReq::InitAsDefaultInstance() {
}

TAdventureGetInviteTeamArrReq::TAdventureGetInviteTeamArrReq(const TAdventureGetInviteTeamArrReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetInviteTeamArrReq)
}

void TAdventureGetInviteTeamArrReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetInviteTeamArrReq::~TAdventureGetInviteTeamArrReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetInviteTeamArrReq)
  SharedDtor();
}

void TAdventureGetInviteTeamArrReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureGetInviteTeamArrReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetInviteTeamArrReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetInviteTeamArrReq_descriptor_;
}

const TAdventureGetInviteTeamArrReq& TAdventureGetInviteTeamArrReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureGetInviteTeamArrReq* TAdventureGetInviteTeamArrReq::default_instance_ = NULL;

TAdventureGetInviteTeamArrReq* TAdventureGetInviteTeamArrReq::New() const {
  return new TAdventureGetInviteTeamArrReq;
}

void TAdventureGetInviteTeamArrReq::Clear() {
  teamarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetInviteTeamArrReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetInviteTeamArrReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAdventureUniqTeam TeamArr = 1;
      case 1: {
        if (tag == 10) {
         parse_TeamArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TeamArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetInviteTeamArrReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetInviteTeamArrReq)
  return false;
#undef DO_
}

void TAdventureGetInviteTeamArrReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetInviteTeamArrReq)
  // repeated .pb.TAdventureUniqTeam TeamArr = 1;
  for (int i = 0; i < this->teamarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teamarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetInviteTeamArrReq)
}

::google::protobuf::uint8* TAdventureGetInviteTeamArrReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetInviteTeamArrReq)
  // repeated .pb.TAdventureUniqTeam TeamArr = 1;
  for (int i = 0; i < this->teamarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teamarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetInviteTeamArrReq)
  return target;
}

int TAdventureGetInviteTeamArrReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TAdventureUniqTeam TeamArr = 1;
  total_size += 1 * this->teamarr_size();
  for (int i = 0; i < this->teamarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetInviteTeamArrReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetInviteTeamArrReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetInviteTeamArrReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetInviteTeamArrReq::MergeFrom(const TAdventureGetInviteTeamArrReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamarr_.MergeFrom(from.teamarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetInviteTeamArrReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetInviteTeamArrReq::CopyFrom(const TAdventureGetInviteTeamArrReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetInviteTeamArrReq::IsInitialized() const {

  return true;
}

void TAdventureGetInviteTeamArrReq::Swap(TAdventureGetInviteTeamArrReq* other) {
  if (other != this) {
    teamarr_.Swap(&other->teamarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetInviteTeamArrReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetInviteTeamArrReq_descriptor_;
  metadata.reflection = TAdventureGetInviteTeamArrReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetInviteTeamArrRsp::kTeamInfoArrFieldNumber;
#endif  // !_MSC_VER

TAdventureGetInviteTeamArrRsp::TAdventureGetInviteTeamArrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetInviteTeamArrRsp)
}

void TAdventureGetInviteTeamArrRsp::InitAsDefaultInstance() {
}

TAdventureGetInviteTeamArrRsp::TAdventureGetInviteTeamArrRsp(const TAdventureGetInviteTeamArrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetInviteTeamArrRsp)
}

void TAdventureGetInviteTeamArrRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetInviteTeamArrRsp::~TAdventureGetInviteTeamArrRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetInviteTeamArrRsp)
  SharedDtor();
}

void TAdventureGetInviteTeamArrRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureGetInviteTeamArrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetInviteTeamArrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetInviteTeamArrRsp_descriptor_;
}

const TAdventureGetInviteTeamArrRsp& TAdventureGetInviteTeamArrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureGetInviteTeamArrRsp* TAdventureGetInviteTeamArrRsp::default_instance_ = NULL;

TAdventureGetInviteTeamArrRsp* TAdventureGetInviteTeamArrRsp::New() const {
  return new TAdventureGetInviteTeamArrRsp;
}

void TAdventureGetInviteTeamArrRsp::Clear() {
  teaminfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetInviteTeamArrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetInviteTeamArrRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAdventureSimpleTeamInfo TeamInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_TeamInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teaminfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TeamInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetInviteTeamArrRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetInviteTeamArrRsp)
  return false;
#undef DO_
}

void TAdventureGetInviteTeamArrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetInviteTeamArrRsp)
  // repeated .pb.TAdventureSimpleTeamInfo TeamInfoArr = 1;
  for (int i = 0; i < this->teaminfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teaminfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetInviteTeamArrRsp)
}

::google::protobuf::uint8* TAdventureGetInviteTeamArrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetInviteTeamArrRsp)
  // repeated .pb.TAdventureSimpleTeamInfo TeamInfoArr = 1;
  for (int i = 0; i < this->teaminfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teaminfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetInviteTeamArrRsp)
  return target;
}

int TAdventureGetInviteTeamArrRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TAdventureSimpleTeamInfo TeamInfoArr = 1;
  total_size += 1 * this->teaminfoarr_size();
  for (int i = 0; i < this->teaminfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teaminfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetInviteTeamArrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetInviteTeamArrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetInviteTeamArrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetInviteTeamArrRsp::MergeFrom(const TAdventureGetInviteTeamArrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  teaminfoarr_.MergeFrom(from.teaminfoarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetInviteTeamArrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetInviteTeamArrRsp::CopyFrom(const TAdventureGetInviteTeamArrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetInviteTeamArrRsp::IsInitialized() const {

  return true;
}

void TAdventureGetInviteTeamArrRsp::Swap(TAdventureGetInviteTeamArrRsp* other) {
  if (other != this) {
    teaminfoarr_.Swap(&other->teaminfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetInviteTeamArrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetInviteTeamArrRsp_descriptor_;
  metadata.reflection = TAdventureGetInviteTeamArrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureChangeTeamModeReq::kRoomIdFieldNumber;
const int TAdventureChangeTeamModeReq::kTeamIdFieldNumber;
const int TAdventureChangeTeamModeReq::kTeamModeFieldNumber;
#endif  // !_MSC_VER

TAdventureChangeTeamModeReq::TAdventureChangeTeamModeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureChangeTeamModeReq)
}

void TAdventureChangeTeamModeReq::InitAsDefaultInstance() {
}

TAdventureChangeTeamModeReq::TAdventureChangeTeamModeReq(const TAdventureChangeTeamModeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureChangeTeamModeReq)
}

void TAdventureChangeTeamModeReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  teammode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureChangeTeamModeReq::~TAdventureChangeTeamModeReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureChangeTeamModeReq)
  SharedDtor();
}

void TAdventureChangeTeamModeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureChangeTeamModeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureChangeTeamModeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureChangeTeamModeReq_descriptor_;
}

const TAdventureChangeTeamModeReq& TAdventureChangeTeamModeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureChangeTeamModeReq* TAdventureChangeTeamModeReq::default_instance_ = NULL;

TAdventureChangeTeamModeReq* TAdventureChangeTeamModeReq::New() const {
  return new TAdventureChangeTeamModeReq;
}

void TAdventureChangeTeamModeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureChangeTeamModeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, teammode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureChangeTeamModeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureChangeTeamModeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TeamMode;
        break;
      }

      // optional .pb.ETeamMode TeamMode = 3;
      case 3: {
        if (tag == 24) {
         parse_TeamMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETeamMode_IsValid(value)) {
            set_teammode(static_cast< ::pb::ETeamMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureChangeTeamModeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureChangeTeamModeReq)
  return false;
#undef DO_
}

void TAdventureChangeTeamModeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureChangeTeamModeReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional .pb.ETeamMode TeamMode = 3;
  if (has_teammode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->teammode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureChangeTeamModeReq)
}

::google::protobuf::uint8* TAdventureChangeTeamModeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureChangeTeamModeReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional .pb.ETeamMode TeamMode = 3;
  if (has_teammode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->teammode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureChangeTeamModeReq)
  return target;
}

int TAdventureChangeTeamModeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.ETeamMode TeamMode = 3;
    if (has_teammode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teammode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureChangeTeamModeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureChangeTeamModeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureChangeTeamModeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureChangeTeamModeReq::MergeFrom(const TAdventureChangeTeamModeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teammode()) {
      set_teammode(from.teammode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureChangeTeamModeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureChangeTeamModeReq::CopyFrom(const TAdventureChangeTeamModeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureChangeTeamModeReq::IsInitialized() const {

  return true;
}

void TAdventureChangeTeamModeReq::Swap(TAdventureChangeTeamModeReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(teammode_, other->teammode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureChangeTeamModeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureChangeTeamModeReq_descriptor_;
  metadata.reflection = TAdventureChangeTeamModeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureChangeTeamModeRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

TAdventureChangeTeamModeRsp::TAdventureChangeTeamModeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureChangeTeamModeRsp)
}

void TAdventureChangeTeamModeRsp::InitAsDefaultInstance() {
}

TAdventureChangeTeamModeRsp::TAdventureChangeTeamModeRsp(const TAdventureChangeTeamModeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureChangeTeamModeRsp)
}

void TAdventureChangeTeamModeRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureChangeTeamModeRsp::~TAdventureChangeTeamModeRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureChangeTeamModeRsp)
  SharedDtor();
}

void TAdventureChangeTeamModeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureChangeTeamModeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureChangeTeamModeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureChangeTeamModeRsp_descriptor_;
}

const TAdventureChangeTeamModeRsp& TAdventureChangeTeamModeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureChangeTeamModeRsp* TAdventureChangeTeamModeRsp::default_instance_ = NULL;

TAdventureChangeTeamModeRsp* TAdventureChangeTeamModeRsp::New() const {
  return new TAdventureChangeTeamModeRsp;
}

void TAdventureChangeTeamModeRsp::Clear() {
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureChangeTeamModeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureChangeTeamModeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EChangeTeamModeRetCode RetCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EChangeTeamModeRetCode_IsValid(value)) {
            set_retcode(static_cast< ::pb::EChangeTeamModeRetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureChangeTeamModeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureChangeTeamModeRsp)
  return false;
#undef DO_
}

void TAdventureChangeTeamModeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureChangeTeamModeRsp)
  // optional .pb.EChangeTeamModeRetCode RetCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureChangeTeamModeRsp)
}

::google::protobuf::uint8* TAdventureChangeTeamModeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureChangeTeamModeRsp)
  // optional .pb.EChangeTeamModeRetCode RetCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureChangeTeamModeRsp)
  return target;
}

int TAdventureChangeTeamModeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EChangeTeamModeRetCode RetCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureChangeTeamModeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureChangeTeamModeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureChangeTeamModeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureChangeTeamModeRsp::MergeFrom(const TAdventureChangeTeamModeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureChangeTeamModeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureChangeTeamModeRsp::CopyFrom(const TAdventureChangeTeamModeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureChangeTeamModeRsp::IsInitialized() const {

  return true;
}

void TAdventureChangeTeamModeRsp::Swap(TAdventureChangeTeamModeRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureChangeTeamModeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureChangeTeamModeRsp_descriptor_;
  metadata.reflection = TAdventureChangeTeamModeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureKickOrQuitTeamRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

TAdventureKickOrQuitTeamRsp::TAdventureKickOrQuitTeamRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureKickOrQuitTeamRsp)
}

void TAdventureKickOrQuitTeamRsp::InitAsDefaultInstance() {
}

TAdventureKickOrQuitTeamRsp::TAdventureKickOrQuitTeamRsp(const TAdventureKickOrQuitTeamRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureKickOrQuitTeamRsp)
}

void TAdventureKickOrQuitTeamRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureKickOrQuitTeamRsp::~TAdventureKickOrQuitTeamRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureKickOrQuitTeamRsp)
  SharedDtor();
}

void TAdventureKickOrQuitTeamRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureKickOrQuitTeamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureKickOrQuitTeamRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureKickOrQuitTeamRsp_descriptor_;
}

const TAdventureKickOrQuitTeamRsp& TAdventureKickOrQuitTeamRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureKickOrQuitTeamRsp* TAdventureKickOrQuitTeamRsp::default_instance_ = NULL;

TAdventureKickOrQuitTeamRsp* TAdventureKickOrQuitTeamRsp::New() const {
  return new TAdventureKickOrQuitTeamRsp;
}

void TAdventureKickOrQuitTeamRsp::Clear() {
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureKickOrQuitTeamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureKickOrQuitTeamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EKickOrQuitTeamRetCode RetCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EKickOrQuitTeamRetCode_IsValid(value)) {
            set_retcode(static_cast< ::pb::EKickOrQuitTeamRetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureKickOrQuitTeamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureKickOrQuitTeamRsp)
  return false;
#undef DO_
}

void TAdventureKickOrQuitTeamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureKickOrQuitTeamRsp)
  // optional .pb.EKickOrQuitTeamRetCode RetCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureKickOrQuitTeamRsp)
}

::google::protobuf::uint8* TAdventureKickOrQuitTeamRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureKickOrQuitTeamRsp)
  // optional .pb.EKickOrQuitTeamRetCode RetCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureKickOrQuitTeamRsp)
  return target;
}

int TAdventureKickOrQuitTeamRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EKickOrQuitTeamRetCode RetCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureKickOrQuitTeamRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureKickOrQuitTeamRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureKickOrQuitTeamRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureKickOrQuitTeamRsp::MergeFrom(const TAdventureKickOrQuitTeamRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureKickOrQuitTeamRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureKickOrQuitTeamRsp::CopyFrom(const TAdventureKickOrQuitTeamRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureKickOrQuitTeamRsp::IsInitialized() const {

  return true;
}

void TAdventureKickOrQuitTeamRsp::Swap(TAdventureKickOrQuitTeamRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureKickOrQuitTeamRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureKickOrQuitTeamRsp_descriptor_;
  metadata.reflection = TAdventureKickOrQuitTeamRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTeamStartRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

TAdventureTeamStartRsp::TAdventureTeamStartRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTeamStartRsp)
}

void TAdventureTeamStartRsp::InitAsDefaultInstance() {
}

TAdventureTeamStartRsp::TAdventureTeamStartRsp(const TAdventureTeamStartRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTeamStartRsp)
}

void TAdventureTeamStartRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTeamStartRsp::~TAdventureTeamStartRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTeamStartRsp)
  SharedDtor();
}

void TAdventureTeamStartRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTeamStartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTeamStartRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTeamStartRsp_descriptor_;
}

const TAdventureTeamStartRsp& TAdventureTeamStartRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureTeamStartRsp* TAdventureTeamStartRsp::default_instance_ = NULL;

TAdventureTeamStartRsp* TAdventureTeamStartRsp::New() const {
  return new TAdventureTeamStartRsp;
}

void TAdventureTeamStartRsp::Clear() {
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTeamStartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTeamStartRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ETeamStartRetCode RetCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETeamStartRetCode_IsValid(value)) {
            set_retcode(static_cast< ::pb::ETeamStartRetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTeamStartRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTeamStartRsp)
  return false;
#undef DO_
}

void TAdventureTeamStartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTeamStartRsp)
  // optional .pb.ETeamStartRetCode RetCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTeamStartRsp)
}

::google::protobuf::uint8* TAdventureTeamStartRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTeamStartRsp)
  // optional .pb.ETeamStartRetCode RetCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTeamStartRsp)
  return target;
}

int TAdventureTeamStartRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ETeamStartRetCode RetCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTeamStartRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTeamStartRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTeamStartRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTeamStartRsp::MergeFrom(const TAdventureTeamStartRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTeamStartRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTeamStartRsp::CopyFrom(const TAdventureTeamStartRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTeamStartRsp::IsInitialized() const {

  return true;
}

void TAdventureTeamStartRsp::Swap(TAdventureTeamStartRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTeamStartRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTeamStartRsp_descriptor_;
  metadata.reflection = TAdventureTeamStartRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureSendTeamInviteMsgReq::kRoomIdFieldNumber;
const int TAdventureSendTeamInviteMsgReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TAdventureSendTeamInviteMsgReq::TAdventureSendTeamInviteMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureSendTeamInviteMsgReq)
}

void TAdventureSendTeamInviteMsgReq::InitAsDefaultInstance() {
}

TAdventureSendTeamInviteMsgReq::TAdventureSendTeamInviteMsgReq(const TAdventureSendTeamInviteMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureSendTeamInviteMsgReq)
}

void TAdventureSendTeamInviteMsgReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureSendTeamInviteMsgReq::~TAdventureSendTeamInviteMsgReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureSendTeamInviteMsgReq)
  SharedDtor();
}

void TAdventureSendTeamInviteMsgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureSendTeamInviteMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureSendTeamInviteMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureSendTeamInviteMsgReq_descriptor_;
}

const TAdventureSendTeamInviteMsgReq& TAdventureSendTeamInviteMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureSendTeamInviteMsgReq* TAdventureSendTeamInviteMsgReq::default_instance_ = NULL;

TAdventureSendTeamInviteMsgReq* TAdventureSendTeamInviteMsgReq::New() const {
  return new TAdventureSendTeamInviteMsgReq;
}

void TAdventureSendTeamInviteMsgReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureSendTeamInviteMsgReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureSendTeamInviteMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureSendTeamInviteMsgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureSendTeamInviteMsgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureSendTeamInviteMsgReq)
  return false;
#undef DO_
}

void TAdventureSendTeamInviteMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureSendTeamInviteMsgReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureSendTeamInviteMsgReq)
}

::google::protobuf::uint8* TAdventureSendTeamInviteMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureSendTeamInviteMsgReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureSendTeamInviteMsgReq)
  return target;
}

int TAdventureSendTeamInviteMsgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureSendTeamInviteMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureSendTeamInviteMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureSendTeamInviteMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureSendTeamInviteMsgReq::MergeFrom(const TAdventureSendTeamInviteMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureSendTeamInviteMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureSendTeamInviteMsgReq::CopyFrom(const TAdventureSendTeamInviteMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureSendTeamInviteMsgReq::IsInitialized() const {

  return true;
}

void TAdventureSendTeamInviteMsgReq::Swap(TAdventureSendTeamInviteMsgReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureSendTeamInviteMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureSendTeamInviteMsgReq_descriptor_;
  metadata.reflection = TAdventureSendTeamInviteMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureSetTeamMemberStatusReq::kRoomIdFieldNumber;
const int TAdventureSetTeamMemberStatusReq::kTeamIdFieldNumber;
const int TAdventureSetTeamMemberStatusReq::kMemberStatusFieldNumber;
#endif  // !_MSC_VER

TAdventureSetTeamMemberStatusReq::TAdventureSetTeamMemberStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureSetTeamMemberStatusReq)
}

void TAdventureSetTeamMemberStatusReq::InitAsDefaultInstance() {
}

TAdventureSetTeamMemberStatusReq::TAdventureSetTeamMemberStatusReq(const TAdventureSetTeamMemberStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureSetTeamMemberStatusReq)
}

void TAdventureSetTeamMemberStatusReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  memberstatus_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureSetTeamMemberStatusReq::~TAdventureSetTeamMemberStatusReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureSetTeamMemberStatusReq)
  SharedDtor();
}

void TAdventureSetTeamMemberStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureSetTeamMemberStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureSetTeamMemberStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureSetTeamMemberStatusReq_descriptor_;
}

const TAdventureSetTeamMemberStatusReq& TAdventureSetTeamMemberStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureSetTeamMemberStatusReq* TAdventureSetTeamMemberStatusReq::default_instance_ = NULL;

TAdventureSetTeamMemberStatusReq* TAdventureSetTeamMemberStatusReq::New() const {
  return new TAdventureSetTeamMemberStatusReq;
}

void TAdventureSetTeamMemberStatusReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureSetTeamMemberStatusReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(roomid_, teamid_);
    memberstatus_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureSetTeamMemberStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureSetTeamMemberStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MemberStatus;
        break;
      }

      // optional .pb.EHallMemberReadyStatus MemberStatus = 3;
      case 3: {
        if (tag == 24) {
         parse_MemberStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EHallMemberReadyStatus_IsValid(value)) {
            set_memberstatus(static_cast< ::pb::EHallMemberReadyStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureSetTeamMemberStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureSetTeamMemberStatusReq)
  return false;
#undef DO_
}

void TAdventureSetTeamMemberStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureSetTeamMemberStatusReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional .pb.EHallMemberReadyStatus MemberStatus = 3;
  if (has_memberstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->memberstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureSetTeamMemberStatusReq)
}

::google::protobuf::uint8* TAdventureSetTeamMemberStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureSetTeamMemberStatusReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional .pb.EHallMemberReadyStatus MemberStatus = 3;
  if (has_memberstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->memberstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureSetTeamMemberStatusReq)
  return target;
}

int TAdventureSetTeamMemberStatusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.EHallMemberReadyStatus MemberStatus = 3;
    if (has_memberstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->memberstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureSetTeamMemberStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureSetTeamMemberStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureSetTeamMemberStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureSetTeamMemberStatusReq::MergeFrom(const TAdventureSetTeamMemberStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_memberstatus()) {
      set_memberstatus(from.memberstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureSetTeamMemberStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureSetTeamMemberStatusReq::CopyFrom(const TAdventureSetTeamMemberStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureSetTeamMemberStatusReq::IsInitialized() const {

  return true;
}

void TAdventureSetTeamMemberStatusReq::Swap(TAdventureSetTeamMemberStatusReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(memberstatus_, other->memberstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureSetTeamMemberStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureSetTeamMemberStatusReq_descriptor_;
  metadata.reflection = TAdventureSetTeamMemberStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureSetTeamMemberStatusRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

TAdventureSetTeamMemberStatusRsp::TAdventureSetTeamMemberStatusRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureSetTeamMemberStatusRsp)
}

void TAdventureSetTeamMemberStatusRsp::InitAsDefaultInstance() {
}

TAdventureSetTeamMemberStatusRsp::TAdventureSetTeamMemberStatusRsp(const TAdventureSetTeamMemberStatusRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureSetTeamMemberStatusRsp)
}

void TAdventureSetTeamMemberStatusRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureSetTeamMemberStatusRsp::~TAdventureSetTeamMemberStatusRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureSetTeamMemberStatusRsp)
  SharedDtor();
}

void TAdventureSetTeamMemberStatusRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureSetTeamMemberStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureSetTeamMemberStatusRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureSetTeamMemberStatusRsp_descriptor_;
}

const TAdventureSetTeamMemberStatusRsp& TAdventureSetTeamMemberStatusRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureSetTeamMemberStatusRsp* TAdventureSetTeamMemberStatusRsp::default_instance_ = NULL;

TAdventureSetTeamMemberStatusRsp* TAdventureSetTeamMemberStatusRsp::New() const {
  return new TAdventureSetTeamMemberStatusRsp;
}

void TAdventureSetTeamMemberStatusRsp::Clear() {
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureSetTeamMemberStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureSetTeamMemberStatusRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EChangeTeamModeRetCode RetCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EChangeTeamModeRetCode_IsValid(value)) {
            set_retcode(static_cast< ::pb::EChangeTeamModeRetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureSetTeamMemberStatusRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureSetTeamMemberStatusRsp)
  return false;
#undef DO_
}

void TAdventureSetTeamMemberStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureSetTeamMemberStatusRsp)
  // optional .pb.EChangeTeamModeRetCode RetCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureSetTeamMemberStatusRsp)
}

::google::protobuf::uint8* TAdventureSetTeamMemberStatusRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureSetTeamMemberStatusRsp)
  // optional .pb.EChangeTeamModeRetCode RetCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureSetTeamMemberStatusRsp)
  return target;
}

int TAdventureSetTeamMemberStatusRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EChangeTeamModeRetCode RetCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureSetTeamMemberStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureSetTeamMemberStatusRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureSetTeamMemberStatusRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureSetTeamMemberStatusRsp::MergeFrom(const TAdventureSetTeamMemberStatusRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureSetTeamMemberStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureSetTeamMemberStatusRsp::CopyFrom(const TAdventureSetTeamMemberStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureSetTeamMemberStatusRsp::IsInitialized() const {

  return true;
}

void TAdventureSetTeamMemberStatusRsp::Swap(TAdventureSetTeamMemberStatusRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureSetTeamMemberStatusRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureSetTeamMemberStatusRsp_descriptor_;
  metadata.reflection = TAdventureSetTeamMemberStatusRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureSetTeamStatusReq::kRoomIdFieldNumber;
const int TAdventureSetTeamStatusReq::kTeamIdFieldNumber;
const int TAdventureSetTeamStatusReq::kTeamStatusFieldNumber;
#endif  // !_MSC_VER

TAdventureSetTeamStatusReq::TAdventureSetTeamStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureSetTeamStatusReq)
}

void TAdventureSetTeamStatusReq::InitAsDefaultInstance() {
}

TAdventureSetTeamStatusReq::TAdventureSetTeamStatusReq(const TAdventureSetTeamStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureSetTeamStatusReq)
}

void TAdventureSetTeamStatusReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  teamstatus_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureSetTeamStatusReq::~TAdventureSetTeamStatusReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureSetTeamStatusReq)
  SharedDtor();
}

void TAdventureSetTeamStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureSetTeamStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureSetTeamStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureSetTeamStatusReq_descriptor_;
}

const TAdventureSetTeamStatusReq& TAdventureSetTeamStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureSetTeamStatusReq* TAdventureSetTeamStatusReq::default_instance_ = NULL;

TAdventureSetTeamStatusReq* TAdventureSetTeamStatusReq::New() const {
  return new TAdventureSetTeamStatusReq;
}

void TAdventureSetTeamStatusReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureSetTeamStatusReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(roomid_, teamid_);
    teamstatus_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureSetTeamStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureSetTeamStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TeamStatus;
        break;
      }

      // optional .pb.EHallTeamType TeamStatus = 3;
      case 3: {
        if (tag == 24) {
         parse_TeamStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EHallTeamType_IsValid(value)) {
            set_teamstatus(static_cast< ::pb::EHallTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureSetTeamStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureSetTeamStatusReq)
  return false;
#undef DO_
}

void TAdventureSetTeamStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureSetTeamStatusReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional .pb.EHallTeamType TeamStatus = 3;
  if (has_teamstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->teamstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureSetTeamStatusReq)
}

::google::protobuf::uint8* TAdventureSetTeamStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureSetTeamStatusReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional .pb.EHallTeamType TeamStatus = 3;
  if (has_teamstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->teamstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureSetTeamStatusReq)
  return target;
}

int TAdventureSetTeamStatusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.EHallTeamType TeamStatus = 3;
    if (has_teamstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teamstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureSetTeamStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureSetTeamStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureSetTeamStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureSetTeamStatusReq::MergeFrom(const TAdventureSetTeamStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teamstatus()) {
      set_teamstatus(from.teamstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureSetTeamStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureSetTeamStatusReq::CopyFrom(const TAdventureSetTeamStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureSetTeamStatusReq::IsInitialized() const {

  return true;
}

void TAdventureSetTeamStatusReq::Swap(TAdventureSetTeamStatusReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(teamstatus_, other->teamstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureSetTeamStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureSetTeamStatusReq_descriptor_;
  metadata.reflection = TAdventureSetTeamStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureSetTeamStatusRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

TAdventureSetTeamStatusRsp::TAdventureSetTeamStatusRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureSetTeamStatusRsp)
}

void TAdventureSetTeamStatusRsp::InitAsDefaultInstance() {
}

TAdventureSetTeamStatusRsp::TAdventureSetTeamStatusRsp(const TAdventureSetTeamStatusRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureSetTeamStatusRsp)
}

void TAdventureSetTeamStatusRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureSetTeamStatusRsp::~TAdventureSetTeamStatusRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureSetTeamStatusRsp)
  SharedDtor();
}

void TAdventureSetTeamStatusRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureSetTeamStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureSetTeamStatusRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureSetTeamStatusRsp_descriptor_;
}

const TAdventureSetTeamStatusRsp& TAdventureSetTeamStatusRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  return *default_instance_;
}

TAdventureSetTeamStatusRsp* TAdventureSetTeamStatusRsp::default_instance_ = NULL;

TAdventureSetTeamStatusRsp* TAdventureSetTeamStatusRsp::New() const {
  return new TAdventureSetTeamStatusRsp;
}

void TAdventureSetTeamStatusRsp::Clear() {
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureSetTeamStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureSetTeamStatusRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EChangeTeamModeRetCode RetCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EChangeTeamModeRetCode_IsValid(value)) {
            set_retcode(static_cast< ::pb::EChangeTeamModeRetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureSetTeamStatusRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureSetTeamStatusRsp)
  return false;
#undef DO_
}

void TAdventureSetTeamStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureSetTeamStatusRsp)
  // optional .pb.EChangeTeamModeRetCode RetCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureSetTeamStatusRsp)
}

::google::protobuf::uint8* TAdventureSetTeamStatusRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureSetTeamStatusRsp)
  // optional .pb.EChangeTeamModeRetCode RetCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureSetTeamStatusRsp)
  return target;
}

int TAdventureSetTeamStatusRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EChangeTeamModeRetCode RetCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureSetTeamStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureSetTeamStatusRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureSetTeamStatusRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureSetTeamStatusRsp::MergeFrom(const TAdventureSetTeamStatusRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureSetTeamStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureSetTeamStatusRsp::CopyFrom(const TAdventureSetTeamStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureSetTeamStatusRsp::IsInitialized() const {

  return true;
}

void TAdventureSetTeamStatusRsp::Swap(TAdventureSetTeamStatusRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureSetTeamStatusRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureSetTeamStatusRsp_descriptor_;
  metadata.reflection = TAdventureSetTeamStatusRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
