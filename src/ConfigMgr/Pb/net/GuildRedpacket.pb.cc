// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/GuildRedpacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/GuildRedpacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TGuildRedPacketSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildRedPacketSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildRedPacketInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildRedPacketInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetRedPacketListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetRedPacketListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetRedPacketListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetRedPacketListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetRedPacketInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetRedPacketInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetRedPacketInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetRedPacketInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGainRedPacketReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGainRedPacketReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGainRedPacketRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGainRedPacketRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildSendRedPacketReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildSendRedPacketReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildSendRedPacketRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildSendRedPacketRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildReceiveRedPacketAchiReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildReceiveRedPacketAchiReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildReceiveRedPacketAchiRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildReceiveRedPacketAchiRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildUpdateRedPacketNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildUpdateRedPacketNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fGuildRedpacket_2eproto() {
  protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/GuildRedpacket.proto");
  GOOGLE_CHECK(file != NULL);
  TGuildRedPacketSingle_descriptor_ = file->message_type(0);
  static const int TGuildRedPacketSingle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketSingle, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketSingle, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketSingle, randrewardarray_),
  };
  TGuildRedPacketSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildRedPacketSingle_descriptor_,
      TGuildRedPacketSingle::default_instance_,
      TGuildRedPacketSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildRedPacketSingle));
  TGuildRedPacketInfo_descriptor_ = file->message_type(1);
  static const int TGuildRedPacketInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketInfo, redpacketid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketInfo, redpackettid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketInfo, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketInfo, rewardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketInfo, rewardsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketInfo, singlecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketInfo, singleremain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketInfo, bestuserinfo_),
  };
  TGuildRedPacketInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildRedPacketInfo_descriptor_,
      TGuildRedPacketInfo::default_instance_,
      TGuildRedPacketInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRedPacketInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildRedPacketInfo));
  TGuildGetRedPacketListReq_descriptor_ = file->message_type(2);
  static const int TGuildGetRedPacketListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetRedPacketListReq, redpacketidarr_),
  };
  TGuildGetRedPacketListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetRedPacketListReq_descriptor_,
      TGuildGetRedPacketListReq::default_instance_,
      TGuildGetRedPacketListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetRedPacketListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetRedPacketListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetRedPacketListReq));
  TGuildGetRedPacketListRsp_descriptor_ = file->message_type(3);
  static const int TGuildGetRedPacketListRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetRedPacketListRsp, redpacketarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetRedPacketListRsp, leaderfreenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetRedPacketListRsp, bigsendnum_),
  };
  TGuildGetRedPacketListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetRedPacketListRsp_descriptor_,
      TGuildGetRedPacketListRsp::default_instance_,
      TGuildGetRedPacketListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetRedPacketListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetRedPacketListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetRedPacketListRsp));
  TGuildGetRedPacketInfoReq_descriptor_ = file->message_type(4);
  static const int TGuildGetRedPacketInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetRedPacketInfoReq, redpacketid_),
  };
  TGuildGetRedPacketInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetRedPacketInfoReq_descriptor_,
      TGuildGetRedPacketInfoReq::default_instance_,
      TGuildGetRedPacketInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetRedPacketInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetRedPacketInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetRedPacketInfoReq));
  TGuildGetRedPacketInfoRsp_descriptor_ = file->message_type(5);
  static const int TGuildGetRedPacketInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetRedPacketInfoRsp, singlearr_),
  };
  TGuildGetRedPacketInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetRedPacketInfoRsp_descriptor_,
      TGuildGetRedPacketInfoRsp::default_instance_,
      TGuildGetRedPacketInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetRedPacketInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetRedPacketInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetRedPacketInfoRsp));
  TGuildGainRedPacketReq_descriptor_ = file->message_type(6);
  static const int TGuildGainRedPacketReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGainRedPacketReq, redpacketid_),
  };
  TGuildGainRedPacketReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGainRedPacketReq_descriptor_,
      TGuildGainRedPacketReq::default_instance_,
      TGuildGainRedPacketReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGainRedPacketReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGainRedPacketReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGainRedPacketReq));
  TGuildGainRedPacketRsp_descriptor_ = file->message_type(7);
  static const int TGuildGainRedPacketRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGainRedPacketRsp, rewardarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGainRedPacketRsp, randrewardarray_),
  };
  TGuildGainRedPacketRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGainRedPacketRsp_descriptor_,
      TGuildGainRedPacketRsp::default_instance_,
      TGuildGainRedPacketRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGainRedPacketRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGainRedPacketRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGainRedPacketRsp));
  TGuildSendRedPacketReq_descriptor_ = file->message_type(8);
  static const int TGuildSendRedPacketReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildSendRedPacketReq, redpackettid_),
  };
  TGuildSendRedPacketReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildSendRedPacketReq_descriptor_,
      TGuildSendRedPacketReq::default_instance_,
      TGuildSendRedPacketReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildSendRedPacketReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildSendRedPacketReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildSendRedPacketReq));
  TGuildSendRedPacketRsp_descriptor_ = file->message_type(9);
  static const int TGuildSendRedPacketRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildSendRedPacketRsp, rewardarray_),
  };
  TGuildSendRedPacketRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildSendRedPacketRsp_descriptor_,
      TGuildSendRedPacketRsp::default_instance_,
      TGuildSendRedPacketRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildSendRedPacketRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildSendRedPacketRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildSendRedPacketRsp));
  TGuildReceiveRedPacketAchiReq_descriptor_ = file->message_type(10);
  static const int TGuildReceiveRedPacketAchiReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildReceiveRedPacketAchiReq, id_),
  };
  TGuildReceiveRedPacketAchiReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildReceiveRedPacketAchiReq_descriptor_,
      TGuildReceiveRedPacketAchiReq::default_instance_,
      TGuildReceiveRedPacketAchiReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildReceiveRedPacketAchiReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildReceiveRedPacketAchiReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildReceiveRedPacketAchiReq));
  TGuildReceiveRedPacketAchiRsp_descriptor_ = file->message_type(11);
  static const int TGuildReceiveRedPacketAchiRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildReceiveRedPacketAchiRsp, rewardarray_),
  };
  TGuildReceiveRedPacketAchiRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildReceiveRedPacketAchiRsp_descriptor_,
      TGuildReceiveRedPacketAchiRsp::default_instance_,
      TGuildReceiveRedPacketAchiRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildReceiveRedPacketAchiRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildReceiveRedPacketAchiRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildReceiveRedPacketAchiRsp));
  TGuildUpdateRedPacketNotify_descriptor_ = file->message_type(12);
  static const int TGuildUpdateRedPacketNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateRedPacketNotify, redpacketinfo_),
  };
  TGuildUpdateRedPacketNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildUpdateRedPacketNotify_descriptor_,
      TGuildUpdateRedPacketNotify::default_instance_,
      TGuildUpdateRedPacketNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateRedPacketNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateRedPacketNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildUpdateRedPacketNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fGuildRedpacket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildRedPacketSingle_descriptor_, &TGuildRedPacketSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildRedPacketInfo_descriptor_, &TGuildRedPacketInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetRedPacketListReq_descriptor_, &TGuildGetRedPacketListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetRedPacketListRsp_descriptor_, &TGuildGetRedPacketListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetRedPacketInfoReq_descriptor_, &TGuildGetRedPacketInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetRedPacketInfoRsp_descriptor_, &TGuildGetRedPacketInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGainRedPacketReq_descriptor_, &TGuildGainRedPacketReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGainRedPacketRsp_descriptor_, &TGuildGainRedPacketRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildSendRedPacketReq_descriptor_, &TGuildSendRedPacketReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildSendRedPacketRsp_descriptor_, &TGuildSendRedPacketRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildReceiveRedPacketAchiReq_descriptor_, &TGuildReceiveRedPacketAchiReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildReceiveRedPacketAchiRsp_descriptor_, &TGuildReceiveRedPacketAchiRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildUpdateRedPacketNotify_descriptor_, &TGuildUpdateRedPacketNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fGuildRedpacket_2eproto() {
  delete TGuildRedPacketSingle::default_instance_;
  delete TGuildRedPacketSingle_reflection_;
  delete TGuildRedPacketInfo::default_instance_;
  delete TGuildRedPacketInfo_reflection_;
  delete TGuildGetRedPacketListReq::default_instance_;
  delete TGuildGetRedPacketListReq_reflection_;
  delete TGuildGetRedPacketListRsp::default_instance_;
  delete TGuildGetRedPacketListRsp_reflection_;
  delete TGuildGetRedPacketInfoReq::default_instance_;
  delete TGuildGetRedPacketInfoReq_reflection_;
  delete TGuildGetRedPacketInfoRsp::default_instance_;
  delete TGuildGetRedPacketInfoRsp_reflection_;
  delete TGuildGainRedPacketReq::default_instance_;
  delete TGuildGainRedPacketReq_reflection_;
  delete TGuildGainRedPacketRsp::default_instance_;
  delete TGuildGainRedPacketRsp_reflection_;
  delete TGuildSendRedPacketReq::default_instance_;
  delete TGuildSendRedPacketReq_reflection_;
  delete TGuildSendRedPacketRsp::default_instance_;
  delete TGuildSendRedPacketRsp_reflection_;
  delete TGuildReceiveRedPacketAchiReq::default_instance_;
  delete TGuildReceiveRedPacketAchiReq_reflection_;
  delete TGuildReceiveRedPacketAchiRsp::default_instance_;
  delete TGuildReceiveRedPacketAchiRsp_reflection_;
  delete TGuildUpdateRedPacketNotify::default_instance_;
  delete TGuildUpdateRedPacketNotify_reflection_;
}

void protobuf_AddDesc_net_2fGuildRedpacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030net/GuildRedpacket.proto\022\002pb\032\026net/Comm"
    "onReward.proto\032\016net/User.proto\"w\n\025TGuild"
    "RedPacketSingle\022%\n\010UserInfo\030\001 \001(\0132\023.pb.T"
    "UserSimpleInfo\022\013\n\003Num\030\002 \001(\r\022*\n\017RandRewar"
    "dArray\030\003 \003(\0132\021.pb.TCommonReward\"\206\002\n\023TGui"
    "ldRedPacketInfo\022\023\n\013RedPacketId\030\001 \001(\r\022\024\n\014"
    "RedPacketTid\030\002 \001(\r\022%\n\010UserInfo\030\003 \001(\0132\023.p"
    "b.TUserSimpleInfo\022\020\n\010SendTime\030\004 \001(\004\022\022\n\nR"
    "ewardType\030\005 \001(\r\022\021\n\tRewardSum\030\006 \001(\r\022\023\n\013Si"
    "ngleCount\030\007 \001(\r\022\024\n\014SingleRemain\030\010 \001(\r\022\016\n"
    "\006Status\030\t \001(\r\022)\n\014BestUserInfo\030\n \001(\0132\023.pb"
    ".TUserSimpleInfo\"3\n\031TGuildGetRedPacketLi"
    "stReq\022\026\n\016RedPacketIdArr\030\001 \003(\r\"u\n\031TGuildG"
    "etRedPacketListRsp\022-\n\014RedPacketArr\030\001 \003(\013"
    "2\027.pb.TGuildRedPacketInfo\022\025\n\rLeaderFreeN"
    "um\030\002 \001(\r\022\022\n\nBigSendNum\030\003 \001(\r\"0\n\031TGuildGe"
    "tRedPacketInfoReq\022\023\n\013RedPacketId\030\001 \001(\r\"I"
    "\n\031TGuildGetRedPacketInfoRsp\022,\n\tSingleArr"
    "\030\001 \003(\0132\031.pb.TGuildRedPacketSingle\"-\n\026TGu"
    "ildGainRedPacketReq\022\023\n\013RedPacketId\030\001 \001(\r"
    "\"l\n\026TGuildGainRedPacketRsp\022&\n\013RewardArra"
    "y\030\001 \003(\0132\021.pb.TCommonReward\022*\n\017RandReward"
    "Array\030\002 \003(\0132\021.pb.TCommonReward\".\n\026TGuild"
    "SendRedPacketReq\022\024\n\014RedPacketTid\030\001 \001(\r\"@"
    "\n\026TGuildSendRedPacketRsp\022&\n\013RewardArray\030"
    "\001 \003(\0132\021.pb.TCommonReward\"+\n\035TGuildReceiv"
    "eRedPacketAchiReq\022\n\n\002Id\030\001 \001(\r\"G\n\035TGuildR"
    "eceiveRedPacketAchiRsp\022&\n\013RewardArray\030\001 "
    "\003(\0132\021.pb.TCommonReward\"M\n\033TGuildUpdateRe"
    "dPacketNotify\022.\n\rRedPacketInfo\030\001 \001(\0132\027.p"
    "b.TGuildRedPacketInfo", 1221);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/GuildRedpacket.proto", &protobuf_RegisterTypes);
  TGuildRedPacketSingle::default_instance_ = new TGuildRedPacketSingle();
  TGuildRedPacketInfo::default_instance_ = new TGuildRedPacketInfo();
  TGuildGetRedPacketListReq::default_instance_ = new TGuildGetRedPacketListReq();
  TGuildGetRedPacketListRsp::default_instance_ = new TGuildGetRedPacketListRsp();
  TGuildGetRedPacketInfoReq::default_instance_ = new TGuildGetRedPacketInfoReq();
  TGuildGetRedPacketInfoRsp::default_instance_ = new TGuildGetRedPacketInfoRsp();
  TGuildGainRedPacketReq::default_instance_ = new TGuildGainRedPacketReq();
  TGuildGainRedPacketRsp::default_instance_ = new TGuildGainRedPacketRsp();
  TGuildSendRedPacketReq::default_instance_ = new TGuildSendRedPacketReq();
  TGuildSendRedPacketRsp::default_instance_ = new TGuildSendRedPacketRsp();
  TGuildReceiveRedPacketAchiReq::default_instance_ = new TGuildReceiveRedPacketAchiReq();
  TGuildReceiveRedPacketAchiRsp::default_instance_ = new TGuildReceiveRedPacketAchiRsp();
  TGuildUpdateRedPacketNotify::default_instance_ = new TGuildUpdateRedPacketNotify();
  TGuildRedPacketSingle::default_instance_->InitAsDefaultInstance();
  TGuildRedPacketInfo::default_instance_->InitAsDefaultInstance();
  TGuildGetRedPacketListReq::default_instance_->InitAsDefaultInstance();
  TGuildGetRedPacketListRsp::default_instance_->InitAsDefaultInstance();
  TGuildGetRedPacketInfoReq::default_instance_->InitAsDefaultInstance();
  TGuildGetRedPacketInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuildGainRedPacketReq::default_instance_->InitAsDefaultInstance();
  TGuildGainRedPacketRsp::default_instance_->InitAsDefaultInstance();
  TGuildSendRedPacketReq::default_instance_->InitAsDefaultInstance();
  TGuildSendRedPacketRsp::default_instance_->InitAsDefaultInstance();
  TGuildReceiveRedPacketAchiReq::default_instance_->InitAsDefaultInstance();
  TGuildReceiveRedPacketAchiRsp::default_instance_->InitAsDefaultInstance();
  TGuildUpdateRedPacketNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fGuildRedpacket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fGuildRedpacket_2eproto {
  StaticDescriptorInitializer_net_2fGuildRedpacket_2eproto() {
    protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  }
} static_descriptor_initializer_net_2fGuildRedpacket_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TGuildRedPacketSingle::kUserInfoFieldNumber;
const int TGuildRedPacketSingle::kNumFieldNumber;
const int TGuildRedPacketSingle::kRandRewardArrayFieldNumber;
#endif  // !_MSC_VER

TGuildRedPacketSingle::TGuildRedPacketSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildRedPacketSingle)
}

void TGuildRedPacketSingle::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TGuildRedPacketSingle::TGuildRedPacketSingle(const TGuildRedPacketSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildRedPacketSingle)
}

void TGuildRedPacketSingle::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildRedPacketSingle::~TGuildRedPacketSingle() {
  // @@protoc_insertion_point(destructor:pb.TGuildRedPacketSingle)
  SharedDtor();
}

void TGuildRedPacketSingle::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TGuildRedPacketSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildRedPacketSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildRedPacketSingle_descriptor_;
}

const TGuildRedPacketSingle& TGuildRedPacketSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  return *default_instance_;
}

TGuildRedPacketSingle* TGuildRedPacketSingle::default_instance_ = NULL;

TGuildRedPacketSingle* TGuildRedPacketSingle::New() const {
  return new TGuildRedPacketSingle;
}

void TGuildRedPacketSingle::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    num_ = 0u;
  }
  randrewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildRedPacketSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildRedPacketSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RandRewardArray;
        break;
      }

      // repeated .pb.TCommonReward RandRewardArray = 3;
      case 3: {
        if (tag == 26) {
         parse_RandRewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_randrewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RandRewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildRedPacketSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildRedPacketSingle)
  return false;
#undef DO_
}

void TGuildRedPacketSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildRedPacketSingle)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // repeated .pb.TCommonReward RandRewardArray = 3;
  for (int i = 0; i < this->randrewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->randrewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildRedPacketSingle)
}

::google::protobuf::uint8* TGuildRedPacketSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildRedPacketSingle)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // repeated .pb.TCommonReward RandRewardArray = 3;
  for (int i = 0; i < this->randrewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->randrewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildRedPacketSingle)
  return target;
}

int TGuildRedPacketSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  // repeated .pb.TCommonReward RandRewardArray = 3;
  total_size += 1 * this->randrewardarray_size();
  for (int i = 0; i < this->randrewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->randrewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildRedPacketSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildRedPacketSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildRedPacketSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildRedPacketSingle::MergeFrom(const TGuildRedPacketSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  randrewardarray_.MergeFrom(from.randrewardarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildRedPacketSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildRedPacketSingle::CopyFrom(const TGuildRedPacketSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildRedPacketSingle::IsInitialized() const {

  return true;
}

void TGuildRedPacketSingle::Swap(TGuildRedPacketSingle* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(num_, other->num_);
    randrewardarray_.Swap(&other->randrewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildRedPacketSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildRedPacketSingle_descriptor_;
  metadata.reflection = TGuildRedPacketSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildRedPacketInfo::kRedPacketIdFieldNumber;
const int TGuildRedPacketInfo::kRedPacketTidFieldNumber;
const int TGuildRedPacketInfo::kUserInfoFieldNumber;
const int TGuildRedPacketInfo::kSendTimeFieldNumber;
const int TGuildRedPacketInfo::kRewardTypeFieldNumber;
const int TGuildRedPacketInfo::kRewardSumFieldNumber;
const int TGuildRedPacketInfo::kSingleCountFieldNumber;
const int TGuildRedPacketInfo::kSingleRemainFieldNumber;
const int TGuildRedPacketInfo::kStatusFieldNumber;
const int TGuildRedPacketInfo::kBestUserInfoFieldNumber;
#endif  // !_MSC_VER

TGuildRedPacketInfo::TGuildRedPacketInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildRedPacketInfo)
}

void TGuildRedPacketInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  bestuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TGuildRedPacketInfo::TGuildRedPacketInfo(const TGuildRedPacketInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildRedPacketInfo)
}

void TGuildRedPacketInfo::SharedCtor() {
  _cached_size_ = 0;
  redpacketid_ = 0u;
  redpackettid_ = 0u;
  userinfo_ = NULL;
  sendtime_ = GOOGLE_ULONGLONG(0);
  rewardtype_ = 0u;
  rewardsum_ = 0u;
  singlecount_ = 0u;
  singleremain_ = 0u;
  status_ = 0u;
  bestuserinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildRedPacketInfo::~TGuildRedPacketInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildRedPacketInfo)
  SharedDtor();
}

void TGuildRedPacketInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
    delete bestuserinfo_;
  }
}

void TGuildRedPacketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildRedPacketInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildRedPacketInfo_descriptor_;
}

const TGuildRedPacketInfo& TGuildRedPacketInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  return *default_instance_;
}

TGuildRedPacketInfo* TGuildRedPacketInfo::default_instance_ = NULL;

TGuildRedPacketInfo* TGuildRedPacketInfo::New() const {
  return new TGuildRedPacketInfo;
}

void TGuildRedPacketInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildRedPacketInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(redpacketid_, redpackettid_);
    ZR_(sendtime_, singleremain_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    status_ = 0u;
    if (has_bestuserinfo()) {
      if (bestuserinfo_ != NULL) bestuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildRedPacketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildRedPacketInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RedPacketId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redpacketid_)));
          set_has_redpacketid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RedPacketTid;
        break;
      }

      // optional uint32 RedPacketTid = 2;
      case 2: {
        if (tag == 16) {
         parse_RedPacketTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redpackettid_)));
          set_has_redpackettid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SendTime;
        break;
      }

      // optional uint64 SendTime = 4;
      case 4: {
        if (tag == 32) {
         parse_SendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_RewardType;
        break;
      }

      // optional uint32 RewardType = 5;
      case 5: {
        if (tag == 40) {
         parse_RewardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardtype_)));
          set_has_rewardtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RewardSum;
        break;
      }

      // optional uint32 RewardSum = 6;
      case 6: {
        if (tag == 48) {
         parse_RewardSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardsum_)));
          set_has_rewardsum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_SingleCount;
        break;
      }

      // optional uint32 SingleCount = 7;
      case 7: {
        if (tag == 56) {
         parse_SingleCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &singlecount_)));
          set_has_singlecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_SingleRemain;
        break;
      }

      // optional uint32 SingleRemain = 8;
      case 8: {
        if (tag == 64) {
         parse_SingleRemain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &singleremain_)));
          set_has_singleremain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Status;
        break;
      }

      // optional uint32 Status = 9;
      case 9: {
        if (tag == 72) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_BestUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo BestUserInfo = 10;
      case 10: {
        if (tag == 82) {
         parse_BestUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bestuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildRedPacketInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildRedPacketInfo)
  return false;
#undef DO_
}

void TGuildRedPacketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildRedPacketInfo)
  // optional uint32 RedPacketId = 1;
  if (has_redpacketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->redpacketid(), output);
  }

  // optional uint32 RedPacketTid = 2;
  if (has_redpackettid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->redpackettid(), output);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(), output);
  }

  // optional uint64 SendTime = 4;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sendtime(), output);
  }

  // optional uint32 RewardType = 5;
  if (has_rewardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rewardtype(), output);
  }

  // optional uint32 RewardSum = 6;
  if (has_rewardsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rewardsum(), output);
  }

  // optional uint32 SingleCount = 7;
  if (has_singlecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->singlecount(), output);
  }

  // optional uint32 SingleRemain = 8;
  if (has_singleremain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->singleremain(), output);
  }

  // optional uint32 Status = 9;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->status(), output);
  }

  // optional .pb.TUserSimpleInfo BestUserInfo = 10;
  if (has_bestuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->bestuserinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildRedPacketInfo)
}

::google::protobuf::uint8* TGuildRedPacketInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildRedPacketInfo)
  // optional uint32 RedPacketId = 1;
  if (has_redpacketid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->redpacketid(), target);
  }

  // optional uint32 RedPacketTid = 2;
  if (has_redpackettid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->redpackettid(), target);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(), target);
  }

  // optional uint64 SendTime = 4;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sendtime(), target);
  }

  // optional uint32 RewardType = 5;
  if (has_rewardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rewardtype(), target);
  }

  // optional uint32 RewardSum = 6;
  if (has_rewardsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rewardsum(), target);
  }

  // optional uint32 SingleCount = 7;
  if (has_singlecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->singlecount(), target);
  }

  // optional uint32 SingleRemain = 8;
  if (has_singleremain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->singleremain(), target);
  }

  // optional uint32 Status = 9;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->status(), target);
  }

  // optional .pb.TUserSimpleInfo BestUserInfo = 10;
  if (has_bestuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->bestuserinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildRedPacketInfo)
  return target;
}

int TGuildRedPacketInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RedPacketId = 1;
    if (has_redpacketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redpacketid());
    }

    // optional uint32 RedPacketTid = 2;
    if (has_redpackettid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redpackettid());
    }

    // optional .pb.TUserSimpleInfo UserInfo = 3;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint64 SendTime = 4;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendtime());
    }

    // optional uint32 RewardType = 5;
    if (has_rewardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardtype());
    }

    // optional uint32 RewardSum = 6;
    if (has_rewardsum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardsum());
    }

    // optional uint32 SingleCount = 7;
    if (has_singlecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->singlecount());
    }

    // optional uint32 SingleRemain = 8;
    if (has_singleremain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->singleremain());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Status = 9;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional .pb.TUserSimpleInfo BestUserInfo = 10;
    if (has_bestuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bestuserinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildRedPacketInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildRedPacketInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildRedPacketInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildRedPacketInfo::MergeFrom(const TGuildRedPacketInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_redpacketid()) {
      set_redpacketid(from.redpacketid());
    }
    if (from.has_redpackettid()) {
      set_redpackettid(from.redpackettid());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_rewardtype()) {
      set_rewardtype(from.rewardtype());
    }
    if (from.has_rewardsum()) {
      set_rewardsum(from.rewardsum());
    }
    if (from.has_singlecount()) {
      set_singlecount(from.singlecount());
    }
    if (from.has_singleremain()) {
      set_singleremain(from.singleremain());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_bestuserinfo()) {
      mutable_bestuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.bestuserinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildRedPacketInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildRedPacketInfo::CopyFrom(const TGuildRedPacketInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildRedPacketInfo::IsInitialized() const {

  return true;
}

void TGuildRedPacketInfo::Swap(TGuildRedPacketInfo* other) {
  if (other != this) {
    std::swap(redpacketid_, other->redpacketid_);
    std::swap(redpackettid_, other->redpackettid_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(rewardtype_, other->rewardtype_);
    std::swap(rewardsum_, other->rewardsum_);
    std::swap(singlecount_, other->singlecount_);
    std::swap(singleremain_, other->singleremain_);
    std::swap(status_, other->status_);
    std::swap(bestuserinfo_, other->bestuserinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildRedPacketInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildRedPacketInfo_descriptor_;
  metadata.reflection = TGuildRedPacketInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetRedPacketListReq::kRedPacketIdArrFieldNumber;
#endif  // !_MSC_VER

TGuildGetRedPacketListReq::TGuildGetRedPacketListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetRedPacketListReq)
}

void TGuildGetRedPacketListReq::InitAsDefaultInstance() {
}

TGuildGetRedPacketListReq::TGuildGetRedPacketListReq(const TGuildGetRedPacketListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetRedPacketListReq)
}

void TGuildGetRedPacketListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetRedPacketListReq::~TGuildGetRedPacketListReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetRedPacketListReq)
  SharedDtor();
}

void TGuildGetRedPacketListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetRedPacketListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetRedPacketListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetRedPacketListReq_descriptor_;
}

const TGuildGetRedPacketListReq& TGuildGetRedPacketListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  return *default_instance_;
}

TGuildGetRedPacketListReq* TGuildGetRedPacketListReq::default_instance_ = NULL;

TGuildGetRedPacketListReq* TGuildGetRedPacketListReq::New() const {
  return new TGuildGetRedPacketListReq;
}

void TGuildGetRedPacketListReq::Clear() {
  redpacketidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetRedPacketListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetRedPacketListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 RedPacketIdArr = 1;
      case 1: {
        if (tag == 8) {
         parse_RedPacketIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_redpacketidarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_redpacketidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_RedPacketIdArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetRedPacketListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetRedPacketListReq)
  return false;
#undef DO_
}

void TGuildGetRedPacketListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetRedPacketListReq)
  // repeated uint32 RedPacketIdArr = 1;
  for (int i = 0; i < this->redpacketidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->redpacketidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetRedPacketListReq)
}

::google::protobuf::uint8* TGuildGetRedPacketListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetRedPacketListReq)
  // repeated uint32 RedPacketIdArr = 1;
  for (int i = 0; i < this->redpacketidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->redpacketidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetRedPacketListReq)
  return target;
}

int TGuildGetRedPacketListReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 RedPacketIdArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->redpacketidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->redpacketidarr(i));
    }
    total_size += 1 * this->redpacketidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetRedPacketListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetRedPacketListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetRedPacketListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetRedPacketListReq::MergeFrom(const TGuildGetRedPacketListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  redpacketidarr_.MergeFrom(from.redpacketidarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetRedPacketListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetRedPacketListReq::CopyFrom(const TGuildGetRedPacketListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetRedPacketListReq::IsInitialized() const {

  return true;
}

void TGuildGetRedPacketListReq::Swap(TGuildGetRedPacketListReq* other) {
  if (other != this) {
    redpacketidarr_.Swap(&other->redpacketidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetRedPacketListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetRedPacketListReq_descriptor_;
  metadata.reflection = TGuildGetRedPacketListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetRedPacketListRsp::kRedPacketArrFieldNumber;
const int TGuildGetRedPacketListRsp::kLeaderFreeNumFieldNumber;
const int TGuildGetRedPacketListRsp::kBigSendNumFieldNumber;
#endif  // !_MSC_VER

TGuildGetRedPacketListRsp::TGuildGetRedPacketListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetRedPacketListRsp)
}

void TGuildGetRedPacketListRsp::InitAsDefaultInstance() {
}

TGuildGetRedPacketListRsp::TGuildGetRedPacketListRsp(const TGuildGetRedPacketListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetRedPacketListRsp)
}

void TGuildGetRedPacketListRsp::SharedCtor() {
  _cached_size_ = 0;
  leaderfreenum_ = 0u;
  bigsendnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetRedPacketListRsp::~TGuildGetRedPacketListRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetRedPacketListRsp)
  SharedDtor();
}

void TGuildGetRedPacketListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetRedPacketListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetRedPacketListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetRedPacketListRsp_descriptor_;
}

const TGuildGetRedPacketListRsp& TGuildGetRedPacketListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  return *default_instance_;
}

TGuildGetRedPacketListRsp* TGuildGetRedPacketListRsp::default_instance_ = NULL;

TGuildGetRedPacketListRsp* TGuildGetRedPacketListRsp::New() const {
  return new TGuildGetRedPacketListRsp;
}

void TGuildGetRedPacketListRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildGetRedPacketListRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(leaderfreenum_, bigsendnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  redpacketarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetRedPacketListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetRedPacketListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildRedPacketInfo RedPacketArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RedPacketArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_redpacketarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RedPacketArr;
        if (input->ExpectTag(16)) goto parse_LeaderFreeNum;
        break;
      }

      // optional uint32 LeaderFreeNum = 2;
      case 2: {
        if (tag == 16) {
         parse_LeaderFreeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaderfreenum_)));
          set_has_leaderfreenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BigSendNum;
        break;
      }

      // optional uint32 BigSendNum = 3;
      case 3: {
        if (tag == 24) {
         parse_BigSendNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bigsendnum_)));
          set_has_bigsendnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetRedPacketListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetRedPacketListRsp)
  return false;
#undef DO_
}

void TGuildGetRedPacketListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetRedPacketListRsp)
  // repeated .pb.TGuildRedPacketInfo RedPacketArr = 1;
  for (int i = 0; i < this->redpacketarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->redpacketarr(i), output);
  }

  // optional uint32 LeaderFreeNum = 2;
  if (has_leaderfreenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leaderfreenum(), output);
  }

  // optional uint32 BigSendNum = 3;
  if (has_bigsendnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bigsendnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetRedPacketListRsp)
}

::google::protobuf::uint8* TGuildGetRedPacketListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetRedPacketListRsp)
  // repeated .pb.TGuildRedPacketInfo RedPacketArr = 1;
  for (int i = 0; i < this->redpacketarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->redpacketarr(i), target);
  }

  // optional uint32 LeaderFreeNum = 2;
  if (has_leaderfreenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leaderfreenum(), target);
  }

  // optional uint32 BigSendNum = 3;
  if (has_bigsendnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bigsendnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetRedPacketListRsp)
  return target;
}

int TGuildGetRedPacketListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 LeaderFreeNum = 2;
    if (has_leaderfreenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaderfreenum());
    }

    // optional uint32 BigSendNum = 3;
    if (has_bigsendnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bigsendnum());
    }

  }
  // repeated .pb.TGuildRedPacketInfo RedPacketArr = 1;
  total_size += 1 * this->redpacketarr_size();
  for (int i = 0; i < this->redpacketarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->redpacketarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetRedPacketListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetRedPacketListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetRedPacketListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetRedPacketListRsp::MergeFrom(const TGuildGetRedPacketListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  redpacketarr_.MergeFrom(from.redpacketarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_leaderfreenum()) {
      set_leaderfreenum(from.leaderfreenum());
    }
    if (from.has_bigsendnum()) {
      set_bigsendnum(from.bigsendnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetRedPacketListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetRedPacketListRsp::CopyFrom(const TGuildGetRedPacketListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetRedPacketListRsp::IsInitialized() const {

  return true;
}

void TGuildGetRedPacketListRsp::Swap(TGuildGetRedPacketListRsp* other) {
  if (other != this) {
    redpacketarr_.Swap(&other->redpacketarr_);
    std::swap(leaderfreenum_, other->leaderfreenum_);
    std::swap(bigsendnum_, other->bigsendnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetRedPacketListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetRedPacketListRsp_descriptor_;
  metadata.reflection = TGuildGetRedPacketListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetRedPacketInfoReq::kRedPacketIdFieldNumber;
#endif  // !_MSC_VER

TGuildGetRedPacketInfoReq::TGuildGetRedPacketInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetRedPacketInfoReq)
}

void TGuildGetRedPacketInfoReq::InitAsDefaultInstance() {
}

TGuildGetRedPacketInfoReq::TGuildGetRedPacketInfoReq(const TGuildGetRedPacketInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetRedPacketInfoReq)
}

void TGuildGetRedPacketInfoReq::SharedCtor() {
  _cached_size_ = 0;
  redpacketid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetRedPacketInfoReq::~TGuildGetRedPacketInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetRedPacketInfoReq)
  SharedDtor();
}

void TGuildGetRedPacketInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetRedPacketInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetRedPacketInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetRedPacketInfoReq_descriptor_;
}

const TGuildGetRedPacketInfoReq& TGuildGetRedPacketInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  return *default_instance_;
}

TGuildGetRedPacketInfoReq* TGuildGetRedPacketInfoReq::default_instance_ = NULL;

TGuildGetRedPacketInfoReq* TGuildGetRedPacketInfoReq::New() const {
  return new TGuildGetRedPacketInfoReq;
}

void TGuildGetRedPacketInfoReq::Clear() {
  redpacketid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetRedPacketInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetRedPacketInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RedPacketId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redpacketid_)));
          set_has_redpacketid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetRedPacketInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetRedPacketInfoReq)
  return false;
#undef DO_
}

void TGuildGetRedPacketInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetRedPacketInfoReq)
  // optional uint32 RedPacketId = 1;
  if (has_redpacketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->redpacketid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetRedPacketInfoReq)
}

::google::protobuf::uint8* TGuildGetRedPacketInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetRedPacketInfoReq)
  // optional uint32 RedPacketId = 1;
  if (has_redpacketid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->redpacketid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetRedPacketInfoReq)
  return target;
}

int TGuildGetRedPacketInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RedPacketId = 1;
    if (has_redpacketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redpacketid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetRedPacketInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetRedPacketInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetRedPacketInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetRedPacketInfoReq::MergeFrom(const TGuildGetRedPacketInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_redpacketid()) {
      set_redpacketid(from.redpacketid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetRedPacketInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetRedPacketInfoReq::CopyFrom(const TGuildGetRedPacketInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetRedPacketInfoReq::IsInitialized() const {

  return true;
}

void TGuildGetRedPacketInfoReq::Swap(TGuildGetRedPacketInfoReq* other) {
  if (other != this) {
    std::swap(redpacketid_, other->redpacketid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetRedPacketInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetRedPacketInfoReq_descriptor_;
  metadata.reflection = TGuildGetRedPacketInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetRedPacketInfoRsp::kSingleArrFieldNumber;
#endif  // !_MSC_VER

TGuildGetRedPacketInfoRsp::TGuildGetRedPacketInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetRedPacketInfoRsp)
}

void TGuildGetRedPacketInfoRsp::InitAsDefaultInstance() {
}

TGuildGetRedPacketInfoRsp::TGuildGetRedPacketInfoRsp(const TGuildGetRedPacketInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetRedPacketInfoRsp)
}

void TGuildGetRedPacketInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetRedPacketInfoRsp::~TGuildGetRedPacketInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetRedPacketInfoRsp)
  SharedDtor();
}

void TGuildGetRedPacketInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetRedPacketInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetRedPacketInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetRedPacketInfoRsp_descriptor_;
}

const TGuildGetRedPacketInfoRsp& TGuildGetRedPacketInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  return *default_instance_;
}

TGuildGetRedPacketInfoRsp* TGuildGetRedPacketInfoRsp::default_instance_ = NULL;

TGuildGetRedPacketInfoRsp* TGuildGetRedPacketInfoRsp::New() const {
  return new TGuildGetRedPacketInfoRsp;
}

void TGuildGetRedPacketInfoRsp::Clear() {
  singlearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetRedPacketInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetRedPacketInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildRedPacketSingle SingleArr = 1;
      case 1: {
        if (tag == 10) {
         parse_SingleArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_singlearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_SingleArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetRedPacketInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetRedPacketInfoRsp)
  return false;
#undef DO_
}

void TGuildGetRedPacketInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetRedPacketInfoRsp)
  // repeated .pb.TGuildRedPacketSingle SingleArr = 1;
  for (int i = 0; i < this->singlearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->singlearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetRedPacketInfoRsp)
}

::google::protobuf::uint8* TGuildGetRedPacketInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetRedPacketInfoRsp)
  // repeated .pb.TGuildRedPacketSingle SingleArr = 1;
  for (int i = 0; i < this->singlearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->singlearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetRedPacketInfoRsp)
  return target;
}

int TGuildGetRedPacketInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildRedPacketSingle SingleArr = 1;
  total_size += 1 * this->singlearr_size();
  for (int i = 0; i < this->singlearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->singlearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetRedPacketInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetRedPacketInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetRedPacketInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetRedPacketInfoRsp::MergeFrom(const TGuildGetRedPacketInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  singlearr_.MergeFrom(from.singlearr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetRedPacketInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetRedPacketInfoRsp::CopyFrom(const TGuildGetRedPacketInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetRedPacketInfoRsp::IsInitialized() const {

  return true;
}

void TGuildGetRedPacketInfoRsp::Swap(TGuildGetRedPacketInfoRsp* other) {
  if (other != this) {
    singlearr_.Swap(&other->singlearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetRedPacketInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetRedPacketInfoRsp_descriptor_;
  metadata.reflection = TGuildGetRedPacketInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGainRedPacketReq::kRedPacketIdFieldNumber;
#endif  // !_MSC_VER

TGuildGainRedPacketReq::TGuildGainRedPacketReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGainRedPacketReq)
}

void TGuildGainRedPacketReq::InitAsDefaultInstance() {
}

TGuildGainRedPacketReq::TGuildGainRedPacketReq(const TGuildGainRedPacketReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGainRedPacketReq)
}

void TGuildGainRedPacketReq::SharedCtor() {
  _cached_size_ = 0;
  redpacketid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGainRedPacketReq::~TGuildGainRedPacketReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildGainRedPacketReq)
  SharedDtor();
}

void TGuildGainRedPacketReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGainRedPacketReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGainRedPacketReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGainRedPacketReq_descriptor_;
}

const TGuildGainRedPacketReq& TGuildGainRedPacketReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  return *default_instance_;
}

TGuildGainRedPacketReq* TGuildGainRedPacketReq::default_instance_ = NULL;

TGuildGainRedPacketReq* TGuildGainRedPacketReq::New() const {
  return new TGuildGainRedPacketReq;
}

void TGuildGainRedPacketReq::Clear() {
  redpacketid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGainRedPacketReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGainRedPacketReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RedPacketId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redpacketid_)));
          set_has_redpacketid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGainRedPacketReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGainRedPacketReq)
  return false;
#undef DO_
}

void TGuildGainRedPacketReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGainRedPacketReq)
  // optional uint32 RedPacketId = 1;
  if (has_redpacketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->redpacketid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGainRedPacketReq)
}

::google::protobuf::uint8* TGuildGainRedPacketReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGainRedPacketReq)
  // optional uint32 RedPacketId = 1;
  if (has_redpacketid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->redpacketid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGainRedPacketReq)
  return target;
}

int TGuildGainRedPacketReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RedPacketId = 1;
    if (has_redpacketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redpacketid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGainRedPacketReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGainRedPacketReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGainRedPacketReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGainRedPacketReq::MergeFrom(const TGuildGainRedPacketReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_redpacketid()) {
      set_redpacketid(from.redpacketid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGainRedPacketReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGainRedPacketReq::CopyFrom(const TGuildGainRedPacketReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGainRedPacketReq::IsInitialized() const {

  return true;
}

void TGuildGainRedPacketReq::Swap(TGuildGainRedPacketReq* other) {
  if (other != this) {
    std::swap(redpacketid_, other->redpacketid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGainRedPacketReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGainRedPacketReq_descriptor_;
  metadata.reflection = TGuildGainRedPacketReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGainRedPacketRsp::kRewardArrayFieldNumber;
const int TGuildGainRedPacketRsp::kRandRewardArrayFieldNumber;
#endif  // !_MSC_VER

TGuildGainRedPacketRsp::TGuildGainRedPacketRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGainRedPacketRsp)
}

void TGuildGainRedPacketRsp::InitAsDefaultInstance() {
}

TGuildGainRedPacketRsp::TGuildGainRedPacketRsp(const TGuildGainRedPacketRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGainRedPacketRsp)
}

void TGuildGainRedPacketRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGainRedPacketRsp::~TGuildGainRedPacketRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildGainRedPacketRsp)
  SharedDtor();
}

void TGuildGainRedPacketRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGainRedPacketRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGainRedPacketRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGainRedPacketRsp_descriptor_;
}

const TGuildGainRedPacketRsp& TGuildGainRedPacketRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  return *default_instance_;
}

TGuildGainRedPacketRsp* TGuildGainRedPacketRsp::default_instance_ = NULL;

TGuildGainRedPacketRsp* TGuildGainRedPacketRsp::New() const {
  return new TGuildGainRedPacketRsp;
}

void TGuildGainRedPacketRsp::Clear() {
  rewardarray_.Clear();
  randrewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGainRedPacketRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGainRedPacketRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectTag(18)) goto parse_RandRewardArray;
        break;
      }

      // repeated .pb.TCommonReward RandRewardArray = 2;
      case 2: {
        if (tag == 18) {
         parse_RandRewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_randrewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RandRewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGainRedPacketRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGainRedPacketRsp)
  return false;
#undef DO_
}

void TGuildGainRedPacketRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGainRedPacketRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  // repeated .pb.TCommonReward RandRewardArray = 2;
  for (int i = 0; i < this->randrewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->randrewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGainRedPacketRsp)
}

::google::protobuf::uint8* TGuildGainRedPacketRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGainRedPacketRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  // repeated .pb.TCommonReward RandRewardArray = 2;
  for (int i = 0; i < this->randrewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->randrewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGainRedPacketRsp)
  return target;
}

int TGuildGainRedPacketRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  // repeated .pb.TCommonReward RandRewardArray = 2;
  total_size += 1 * this->randrewardarray_size();
  for (int i = 0; i < this->randrewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->randrewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGainRedPacketRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGainRedPacketRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGainRedPacketRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGainRedPacketRsp::MergeFrom(const TGuildGainRedPacketRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  randrewardarray_.MergeFrom(from.randrewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGainRedPacketRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGainRedPacketRsp::CopyFrom(const TGuildGainRedPacketRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGainRedPacketRsp::IsInitialized() const {

  return true;
}

void TGuildGainRedPacketRsp::Swap(TGuildGainRedPacketRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    randrewardarray_.Swap(&other->randrewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGainRedPacketRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGainRedPacketRsp_descriptor_;
  metadata.reflection = TGuildGainRedPacketRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildSendRedPacketReq::kRedPacketTidFieldNumber;
#endif  // !_MSC_VER

TGuildSendRedPacketReq::TGuildSendRedPacketReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildSendRedPacketReq)
}

void TGuildSendRedPacketReq::InitAsDefaultInstance() {
}

TGuildSendRedPacketReq::TGuildSendRedPacketReq(const TGuildSendRedPacketReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildSendRedPacketReq)
}

void TGuildSendRedPacketReq::SharedCtor() {
  _cached_size_ = 0;
  redpackettid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildSendRedPacketReq::~TGuildSendRedPacketReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildSendRedPacketReq)
  SharedDtor();
}

void TGuildSendRedPacketReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildSendRedPacketReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildSendRedPacketReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildSendRedPacketReq_descriptor_;
}

const TGuildSendRedPacketReq& TGuildSendRedPacketReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  return *default_instance_;
}

TGuildSendRedPacketReq* TGuildSendRedPacketReq::default_instance_ = NULL;

TGuildSendRedPacketReq* TGuildSendRedPacketReq::New() const {
  return new TGuildSendRedPacketReq;
}

void TGuildSendRedPacketReq::Clear() {
  redpackettid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildSendRedPacketReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildSendRedPacketReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RedPacketTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redpackettid_)));
          set_has_redpackettid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildSendRedPacketReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildSendRedPacketReq)
  return false;
#undef DO_
}

void TGuildSendRedPacketReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildSendRedPacketReq)
  // optional uint32 RedPacketTid = 1;
  if (has_redpackettid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->redpackettid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildSendRedPacketReq)
}

::google::protobuf::uint8* TGuildSendRedPacketReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildSendRedPacketReq)
  // optional uint32 RedPacketTid = 1;
  if (has_redpackettid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->redpackettid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildSendRedPacketReq)
  return target;
}

int TGuildSendRedPacketReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RedPacketTid = 1;
    if (has_redpackettid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redpackettid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildSendRedPacketReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildSendRedPacketReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildSendRedPacketReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildSendRedPacketReq::MergeFrom(const TGuildSendRedPacketReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_redpackettid()) {
      set_redpackettid(from.redpackettid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildSendRedPacketReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildSendRedPacketReq::CopyFrom(const TGuildSendRedPacketReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildSendRedPacketReq::IsInitialized() const {

  return true;
}

void TGuildSendRedPacketReq::Swap(TGuildSendRedPacketReq* other) {
  if (other != this) {
    std::swap(redpackettid_, other->redpackettid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildSendRedPacketReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildSendRedPacketReq_descriptor_;
  metadata.reflection = TGuildSendRedPacketReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildSendRedPacketRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TGuildSendRedPacketRsp::TGuildSendRedPacketRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildSendRedPacketRsp)
}

void TGuildSendRedPacketRsp::InitAsDefaultInstance() {
}

TGuildSendRedPacketRsp::TGuildSendRedPacketRsp(const TGuildSendRedPacketRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildSendRedPacketRsp)
}

void TGuildSendRedPacketRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildSendRedPacketRsp::~TGuildSendRedPacketRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildSendRedPacketRsp)
  SharedDtor();
}

void TGuildSendRedPacketRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildSendRedPacketRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildSendRedPacketRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildSendRedPacketRsp_descriptor_;
}

const TGuildSendRedPacketRsp& TGuildSendRedPacketRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  return *default_instance_;
}

TGuildSendRedPacketRsp* TGuildSendRedPacketRsp::default_instance_ = NULL;

TGuildSendRedPacketRsp* TGuildSendRedPacketRsp::New() const {
  return new TGuildSendRedPacketRsp;
}

void TGuildSendRedPacketRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildSendRedPacketRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildSendRedPacketRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildSendRedPacketRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildSendRedPacketRsp)
  return false;
#undef DO_
}

void TGuildSendRedPacketRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildSendRedPacketRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildSendRedPacketRsp)
}

::google::protobuf::uint8* TGuildSendRedPacketRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildSendRedPacketRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildSendRedPacketRsp)
  return target;
}

int TGuildSendRedPacketRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildSendRedPacketRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildSendRedPacketRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildSendRedPacketRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildSendRedPacketRsp::MergeFrom(const TGuildSendRedPacketRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildSendRedPacketRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildSendRedPacketRsp::CopyFrom(const TGuildSendRedPacketRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildSendRedPacketRsp::IsInitialized() const {

  return true;
}

void TGuildSendRedPacketRsp::Swap(TGuildSendRedPacketRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildSendRedPacketRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildSendRedPacketRsp_descriptor_;
  metadata.reflection = TGuildSendRedPacketRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildReceiveRedPacketAchiReq::kIdFieldNumber;
#endif  // !_MSC_VER

TGuildReceiveRedPacketAchiReq::TGuildReceiveRedPacketAchiReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildReceiveRedPacketAchiReq)
}

void TGuildReceiveRedPacketAchiReq::InitAsDefaultInstance() {
}

TGuildReceiveRedPacketAchiReq::TGuildReceiveRedPacketAchiReq(const TGuildReceiveRedPacketAchiReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildReceiveRedPacketAchiReq)
}

void TGuildReceiveRedPacketAchiReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildReceiveRedPacketAchiReq::~TGuildReceiveRedPacketAchiReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildReceiveRedPacketAchiReq)
  SharedDtor();
}

void TGuildReceiveRedPacketAchiReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildReceiveRedPacketAchiReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildReceiveRedPacketAchiReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildReceiveRedPacketAchiReq_descriptor_;
}

const TGuildReceiveRedPacketAchiReq& TGuildReceiveRedPacketAchiReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  return *default_instance_;
}

TGuildReceiveRedPacketAchiReq* TGuildReceiveRedPacketAchiReq::default_instance_ = NULL;

TGuildReceiveRedPacketAchiReq* TGuildReceiveRedPacketAchiReq::New() const {
  return new TGuildReceiveRedPacketAchiReq;
}

void TGuildReceiveRedPacketAchiReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildReceiveRedPacketAchiReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildReceiveRedPacketAchiReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildReceiveRedPacketAchiReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildReceiveRedPacketAchiReq)
  return false;
#undef DO_
}

void TGuildReceiveRedPacketAchiReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildReceiveRedPacketAchiReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildReceiveRedPacketAchiReq)
}

::google::protobuf::uint8* TGuildReceiveRedPacketAchiReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildReceiveRedPacketAchiReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildReceiveRedPacketAchiReq)
  return target;
}

int TGuildReceiveRedPacketAchiReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildReceiveRedPacketAchiReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildReceiveRedPacketAchiReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildReceiveRedPacketAchiReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildReceiveRedPacketAchiReq::MergeFrom(const TGuildReceiveRedPacketAchiReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildReceiveRedPacketAchiReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildReceiveRedPacketAchiReq::CopyFrom(const TGuildReceiveRedPacketAchiReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildReceiveRedPacketAchiReq::IsInitialized() const {

  return true;
}

void TGuildReceiveRedPacketAchiReq::Swap(TGuildReceiveRedPacketAchiReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildReceiveRedPacketAchiReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildReceiveRedPacketAchiReq_descriptor_;
  metadata.reflection = TGuildReceiveRedPacketAchiReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildReceiveRedPacketAchiRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TGuildReceiveRedPacketAchiRsp::TGuildReceiveRedPacketAchiRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildReceiveRedPacketAchiRsp)
}

void TGuildReceiveRedPacketAchiRsp::InitAsDefaultInstance() {
}

TGuildReceiveRedPacketAchiRsp::TGuildReceiveRedPacketAchiRsp(const TGuildReceiveRedPacketAchiRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildReceiveRedPacketAchiRsp)
}

void TGuildReceiveRedPacketAchiRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildReceiveRedPacketAchiRsp::~TGuildReceiveRedPacketAchiRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildReceiveRedPacketAchiRsp)
  SharedDtor();
}

void TGuildReceiveRedPacketAchiRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildReceiveRedPacketAchiRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildReceiveRedPacketAchiRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildReceiveRedPacketAchiRsp_descriptor_;
}

const TGuildReceiveRedPacketAchiRsp& TGuildReceiveRedPacketAchiRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  return *default_instance_;
}

TGuildReceiveRedPacketAchiRsp* TGuildReceiveRedPacketAchiRsp::default_instance_ = NULL;

TGuildReceiveRedPacketAchiRsp* TGuildReceiveRedPacketAchiRsp::New() const {
  return new TGuildReceiveRedPacketAchiRsp;
}

void TGuildReceiveRedPacketAchiRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildReceiveRedPacketAchiRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildReceiveRedPacketAchiRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildReceiveRedPacketAchiRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildReceiveRedPacketAchiRsp)
  return false;
#undef DO_
}

void TGuildReceiveRedPacketAchiRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildReceiveRedPacketAchiRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildReceiveRedPacketAchiRsp)
}

::google::protobuf::uint8* TGuildReceiveRedPacketAchiRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildReceiveRedPacketAchiRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildReceiveRedPacketAchiRsp)
  return target;
}

int TGuildReceiveRedPacketAchiRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildReceiveRedPacketAchiRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildReceiveRedPacketAchiRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildReceiveRedPacketAchiRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildReceiveRedPacketAchiRsp::MergeFrom(const TGuildReceiveRedPacketAchiRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildReceiveRedPacketAchiRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildReceiveRedPacketAchiRsp::CopyFrom(const TGuildReceiveRedPacketAchiRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildReceiveRedPacketAchiRsp::IsInitialized() const {

  return true;
}

void TGuildReceiveRedPacketAchiRsp::Swap(TGuildReceiveRedPacketAchiRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildReceiveRedPacketAchiRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildReceiveRedPacketAchiRsp_descriptor_;
  metadata.reflection = TGuildReceiveRedPacketAchiRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildUpdateRedPacketNotify::kRedPacketInfoFieldNumber;
#endif  // !_MSC_VER

TGuildUpdateRedPacketNotify::TGuildUpdateRedPacketNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildUpdateRedPacketNotify)
}

void TGuildUpdateRedPacketNotify::InitAsDefaultInstance() {
  redpacketinfo_ = const_cast< ::pb::TGuildRedPacketInfo*>(&::pb::TGuildRedPacketInfo::default_instance());
}

TGuildUpdateRedPacketNotify::TGuildUpdateRedPacketNotify(const TGuildUpdateRedPacketNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildUpdateRedPacketNotify)
}

void TGuildUpdateRedPacketNotify::SharedCtor() {
  _cached_size_ = 0;
  redpacketinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildUpdateRedPacketNotify::~TGuildUpdateRedPacketNotify() {
  // @@protoc_insertion_point(destructor:pb.TGuildUpdateRedPacketNotify)
  SharedDtor();
}

void TGuildUpdateRedPacketNotify::SharedDtor() {
  if (this != default_instance_) {
    delete redpacketinfo_;
  }
}

void TGuildUpdateRedPacketNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildUpdateRedPacketNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildUpdateRedPacketNotify_descriptor_;
}

const TGuildUpdateRedPacketNotify& TGuildUpdateRedPacketNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  return *default_instance_;
}

TGuildUpdateRedPacketNotify* TGuildUpdateRedPacketNotify::default_instance_ = NULL;

TGuildUpdateRedPacketNotify* TGuildUpdateRedPacketNotify::New() const {
  return new TGuildUpdateRedPacketNotify;
}

void TGuildUpdateRedPacketNotify::Clear() {
  if (has_redpacketinfo()) {
    if (redpacketinfo_ != NULL) redpacketinfo_->::pb::TGuildRedPacketInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildUpdateRedPacketNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildUpdateRedPacketNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildRedPacketInfo RedPacketInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redpacketinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildUpdateRedPacketNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildUpdateRedPacketNotify)
  return false;
#undef DO_
}

void TGuildUpdateRedPacketNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildUpdateRedPacketNotify)
  // optional .pb.TGuildRedPacketInfo RedPacketInfo = 1;
  if (has_redpacketinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->redpacketinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildUpdateRedPacketNotify)
}

::google::protobuf::uint8* TGuildUpdateRedPacketNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildUpdateRedPacketNotify)
  // optional .pb.TGuildRedPacketInfo RedPacketInfo = 1;
  if (has_redpacketinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->redpacketinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildUpdateRedPacketNotify)
  return target;
}

int TGuildUpdateRedPacketNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildRedPacketInfo RedPacketInfo = 1;
    if (has_redpacketinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redpacketinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildUpdateRedPacketNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildUpdateRedPacketNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildUpdateRedPacketNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildUpdateRedPacketNotify::MergeFrom(const TGuildUpdateRedPacketNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_redpacketinfo()) {
      mutable_redpacketinfo()->::pb::TGuildRedPacketInfo::MergeFrom(from.redpacketinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildUpdateRedPacketNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildUpdateRedPacketNotify::CopyFrom(const TGuildUpdateRedPacketNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildUpdateRedPacketNotify::IsInitialized() const {

  return true;
}

void TGuildUpdateRedPacketNotify::Swap(TGuildUpdateRedPacketNotify* other) {
  if (other != this) {
    std::swap(redpacketinfo_, other->redpacketinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildUpdateRedPacketNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildUpdateRedPacketNotify_descriptor_;
  metadata.reflection = TGuildUpdateRedPacketNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
