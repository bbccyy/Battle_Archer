// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/BeastIllustration.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/BeastIllustration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TBeastIllustrationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastIllustrationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastIllustrationGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastIllustrationGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastIllustrationActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastIllustrationActiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastIllustrationActiveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastIllustrationActiveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastIllustrationBreakThroughReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastIllustrationBreakThroughReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fBeastIllustration_2eproto() {
  protobuf_AddDesc_net_2fBeastIllustration_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/BeastIllustration.proto");
  GOOGLE_CHECK(file != NULL);
  TBeastIllustrationInfo_descriptor_ = file->message_type(0);
  static const int TBeastIllustrationInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastIllustrationInfo, illustrationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastIllustrationInfo, ispurplegoldbreak_),
  };
  TBeastIllustrationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastIllustrationInfo_descriptor_,
      TBeastIllustrationInfo::default_instance_,
      TBeastIllustrationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastIllustrationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastIllustrationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastIllustrationInfo));
  TBeastIllustrationGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TBeastIllustrationGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastIllustrationGetInfoRsp, illustrationarr_),
  };
  TBeastIllustrationGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastIllustrationGetInfoRsp_descriptor_,
      TBeastIllustrationGetInfoRsp::default_instance_,
      TBeastIllustrationGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastIllustrationGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastIllustrationGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastIllustrationGetInfoRsp));
  TBeastIllustrationActiveReq_descriptor_ = file->message_type(2);
  static const int TBeastIllustrationActiveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastIllustrationActiveReq, illustrationid_),
  };
  TBeastIllustrationActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastIllustrationActiveReq_descriptor_,
      TBeastIllustrationActiveReq::default_instance_,
      TBeastIllustrationActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastIllustrationActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastIllustrationActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastIllustrationActiveReq));
  TBeastIllustrationActiveRsp_descriptor_ = file->message_type(3);
  static const int TBeastIllustrationActiveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastIllustrationActiveRsp, illustrationinfo_),
  };
  TBeastIllustrationActiveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastIllustrationActiveRsp_descriptor_,
      TBeastIllustrationActiveRsp::default_instance_,
      TBeastIllustrationActiveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastIllustrationActiveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastIllustrationActiveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastIllustrationActiveRsp));
  TBeastIllustrationBreakThroughReq_descriptor_ = file->message_type(4);
  static const int TBeastIllustrationBreakThroughReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastIllustrationBreakThroughReq, illustrationid_),
  };
  TBeastIllustrationBreakThroughReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastIllustrationBreakThroughReq_descriptor_,
      TBeastIllustrationBreakThroughReq::default_instance_,
      TBeastIllustrationBreakThroughReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastIllustrationBreakThroughReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastIllustrationBreakThroughReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastIllustrationBreakThroughReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fBeastIllustration_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastIllustrationInfo_descriptor_, &TBeastIllustrationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastIllustrationGetInfoRsp_descriptor_, &TBeastIllustrationGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastIllustrationActiveReq_descriptor_, &TBeastIllustrationActiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastIllustrationActiveRsp_descriptor_, &TBeastIllustrationActiveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastIllustrationBreakThroughReq_descriptor_, &TBeastIllustrationBreakThroughReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fBeastIllustration_2eproto() {
  delete TBeastIllustrationInfo::default_instance_;
  delete TBeastIllustrationInfo_reflection_;
  delete TBeastIllustrationGetInfoRsp::default_instance_;
  delete TBeastIllustrationGetInfoRsp_reflection_;
  delete TBeastIllustrationActiveReq::default_instance_;
  delete TBeastIllustrationActiveReq_reflection_;
  delete TBeastIllustrationActiveRsp::default_instance_;
  delete TBeastIllustrationActiveRsp_reflection_;
  delete TBeastIllustrationBreakThroughReq::default_instance_;
  delete TBeastIllustrationBreakThroughReq_reflection_;
}

void protobuf_AddDesc_net_2fBeastIllustration_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033net/BeastIllustration.proto\022\002pb\"K\n\026TBe"
    "astIllustrationInfo\022\026\n\016IllustrationId\030\001 "
    "\001(\r\022\031\n\021IsPurpleGoldBreak\030\002 \001(\010\"S\n\034TBeast"
    "IllustrationGetInfoRsp\0223\n\017IllustrationAr"
    "r\030\001 \003(\0132\032.pb.TBeastIllustrationInfo\"5\n\033T"
    "BeastIllustrationActiveReq\022\026\n\016Illustrati"
    "onId\030\001 \001(\r\"S\n\033TBeastIllustrationActiveRs"
    "p\0224\n\020IllustrationInfo\030\001 \001(\0132\032.pb.TBeastI"
    "llustrationInfo\";\n!TBeastIllustrationBre"
    "akThroughReq\022\026\n\016IllustrationId\030\001 \001(\r", 396);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/BeastIllustration.proto", &protobuf_RegisterTypes);
  TBeastIllustrationInfo::default_instance_ = new TBeastIllustrationInfo();
  TBeastIllustrationGetInfoRsp::default_instance_ = new TBeastIllustrationGetInfoRsp();
  TBeastIllustrationActiveReq::default_instance_ = new TBeastIllustrationActiveReq();
  TBeastIllustrationActiveRsp::default_instance_ = new TBeastIllustrationActiveRsp();
  TBeastIllustrationBreakThroughReq::default_instance_ = new TBeastIllustrationBreakThroughReq();
  TBeastIllustrationInfo::default_instance_->InitAsDefaultInstance();
  TBeastIllustrationGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TBeastIllustrationActiveReq::default_instance_->InitAsDefaultInstance();
  TBeastIllustrationActiveRsp::default_instance_->InitAsDefaultInstance();
  TBeastIllustrationBreakThroughReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fBeastIllustration_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fBeastIllustration_2eproto {
  StaticDescriptorInitializer_net_2fBeastIllustration_2eproto() {
    protobuf_AddDesc_net_2fBeastIllustration_2eproto();
  }
} static_descriptor_initializer_net_2fBeastIllustration_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TBeastIllustrationInfo::kIllustrationIdFieldNumber;
const int TBeastIllustrationInfo::kIsPurpleGoldBreakFieldNumber;
#endif  // !_MSC_VER

TBeastIllustrationInfo::TBeastIllustrationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastIllustrationInfo)
}

void TBeastIllustrationInfo::InitAsDefaultInstance() {
}

TBeastIllustrationInfo::TBeastIllustrationInfo(const TBeastIllustrationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastIllustrationInfo)
}

void TBeastIllustrationInfo::SharedCtor() {
  _cached_size_ = 0;
  illustrationid_ = 0u;
  ispurplegoldbreak_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastIllustrationInfo::~TBeastIllustrationInfo() {
  // @@protoc_insertion_point(destructor:pb.TBeastIllustrationInfo)
  SharedDtor();
}

void TBeastIllustrationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastIllustrationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastIllustrationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastIllustrationInfo_descriptor_;
}

const TBeastIllustrationInfo& TBeastIllustrationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastIllustration_2eproto();
  return *default_instance_;
}

TBeastIllustrationInfo* TBeastIllustrationInfo::default_instance_ = NULL;

TBeastIllustrationInfo* TBeastIllustrationInfo::New() const {
  return new TBeastIllustrationInfo;
}

void TBeastIllustrationInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBeastIllustrationInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(illustrationid_, ispurplegoldbreak_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastIllustrationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastIllustrationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IllustrationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &illustrationid_)));
          set_has_illustrationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsPurpleGoldBreak;
        break;
      }

      // optional bool IsPurpleGoldBreak = 2;
      case 2: {
        if (tag == 16) {
         parse_IsPurpleGoldBreak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispurplegoldbreak_)));
          set_has_ispurplegoldbreak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastIllustrationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastIllustrationInfo)
  return false;
#undef DO_
}

void TBeastIllustrationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastIllustrationInfo)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->illustrationid(), output);
  }

  // optional bool IsPurpleGoldBreak = 2;
  if (has_ispurplegoldbreak()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ispurplegoldbreak(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastIllustrationInfo)
}

::google::protobuf::uint8* TBeastIllustrationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastIllustrationInfo)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->illustrationid(), target);
  }

  // optional bool IsPurpleGoldBreak = 2;
  if (has_ispurplegoldbreak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ispurplegoldbreak(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastIllustrationInfo)
  return target;
}

int TBeastIllustrationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IllustrationId = 1;
    if (has_illustrationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->illustrationid());
    }

    // optional bool IsPurpleGoldBreak = 2;
    if (has_ispurplegoldbreak()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastIllustrationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastIllustrationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastIllustrationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastIllustrationInfo::MergeFrom(const TBeastIllustrationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_illustrationid()) {
      set_illustrationid(from.illustrationid());
    }
    if (from.has_ispurplegoldbreak()) {
      set_ispurplegoldbreak(from.ispurplegoldbreak());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastIllustrationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastIllustrationInfo::CopyFrom(const TBeastIllustrationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastIllustrationInfo::IsInitialized() const {

  return true;
}

void TBeastIllustrationInfo::Swap(TBeastIllustrationInfo* other) {
  if (other != this) {
    std::swap(illustrationid_, other->illustrationid_);
    std::swap(ispurplegoldbreak_, other->ispurplegoldbreak_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastIllustrationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastIllustrationInfo_descriptor_;
  metadata.reflection = TBeastIllustrationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastIllustrationGetInfoRsp::kIllustrationArrFieldNumber;
#endif  // !_MSC_VER

TBeastIllustrationGetInfoRsp::TBeastIllustrationGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastIllustrationGetInfoRsp)
}

void TBeastIllustrationGetInfoRsp::InitAsDefaultInstance() {
}

TBeastIllustrationGetInfoRsp::TBeastIllustrationGetInfoRsp(const TBeastIllustrationGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastIllustrationGetInfoRsp)
}

void TBeastIllustrationGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastIllustrationGetInfoRsp::~TBeastIllustrationGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TBeastIllustrationGetInfoRsp)
  SharedDtor();
}

void TBeastIllustrationGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastIllustrationGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastIllustrationGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastIllustrationGetInfoRsp_descriptor_;
}

const TBeastIllustrationGetInfoRsp& TBeastIllustrationGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastIllustration_2eproto();
  return *default_instance_;
}

TBeastIllustrationGetInfoRsp* TBeastIllustrationGetInfoRsp::default_instance_ = NULL;

TBeastIllustrationGetInfoRsp* TBeastIllustrationGetInfoRsp::New() const {
  return new TBeastIllustrationGetInfoRsp;
}

void TBeastIllustrationGetInfoRsp::Clear() {
  illustrationarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastIllustrationGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastIllustrationGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBeastIllustrationInfo IllustrationArr = 1;
      case 1: {
        if (tag == 10) {
         parse_IllustrationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_illustrationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_IllustrationArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastIllustrationGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastIllustrationGetInfoRsp)
  return false;
#undef DO_
}

void TBeastIllustrationGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastIllustrationGetInfoRsp)
  // repeated .pb.TBeastIllustrationInfo IllustrationArr = 1;
  for (int i = 0; i < this->illustrationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->illustrationarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastIllustrationGetInfoRsp)
}

::google::protobuf::uint8* TBeastIllustrationGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastIllustrationGetInfoRsp)
  // repeated .pb.TBeastIllustrationInfo IllustrationArr = 1;
  for (int i = 0; i < this->illustrationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->illustrationarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastIllustrationGetInfoRsp)
  return target;
}

int TBeastIllustrationGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TBeastIllustrationInfo IllustrationArr = 1;
  total_size += 1 * this->illustrationarr_size();
  for (int i = 0; i < this->illustrationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->illustrationarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastIllustrationGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastIllustrationGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastIllustrationGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastIllustrationGetInfoRsp::MergeFrom(const TBeastIllustrationGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  illustrationarr_.MergeFrom(from.illustrationarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastIllustrationGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastIllustrationGetInfoRsp::CopyFrom(const TBeastIllustrationGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastIllustrationGetInfoRsp::IsInitialized() const {

  return true;
}

void TBeastIllustrationGetInfoRsp::Swap(TBeastIllustrationGetInfoRsp* other) {
  if (other != this) {
    illustrationarr_.Swap(&other->illustrationarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastIllustrationGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastIllustrationGetInfoRsp_descriptor_;
  metadata.reflection = TBeastIllustrationGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastIllustrationActiveReq::kIllustrationIdFieldNumber;
#endif  // !_MSC_VER

TBeastIllustrationActiveReq::TBeastIllustrationActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastIllustrationActiveReq)
}

void TBeastIllustrationActiveReq::InitAsDefaultInstance() {
}

TBeastIllustrationActiveReq::TBeastIllustrationActiveReq(const TBeastIllustrationActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastIllustrationActiveReq)
}

void TBeastIllustrationActiveReq::SharedCtor() {
  _cached_size_ = 0;
  illustrationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastIllustrationActiveReq::~TBeastIllustrationActiveReq() {
  // @@protoc_insertion_point(destructor:pb.TBeastIllustrationActiveReq)
  SharedDtor();
}

void TBeastIllustrationActiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastIllustrationActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastIllustrationActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastIllustrationActiveReq_descriptor_;
}

const TBeastIllustrationActiveReq& TBeastIllustrationActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastIllustration_2eproto();
  return *default_instance_;
}

TBeastIllustrationActiveReq* TBeastIllustrationActiveReq::default_instance_ = NULL;

TBeastIllustrationActiveReq* TBeastIllustrationActiveReq::New() const {
  return new TBeastIllustrationActiveReq;
}

void TBeastIllustrationActiveReq::Clear() {
  illustrationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastIllustrationActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastIllustrationActiveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IllustrationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &illustrationid_)));
          set_has_illustrationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastIllustrationActiveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastIllustrationActiveReq)
  return false;
#undef DO_
}

void TBeastIllustrationActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastIllustrationActiveReq)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->illustrationid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastIllustrationActiveReq)
}

::google::protobuf::uint8* TBeastIllustrationActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastIllustrationActiveReq)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->illustrationid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastIllustrationActiveReq)
  return target;
}

int TBeastIllustrationActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IllustrationId = 1;
    if (has_illustrationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->illustrationid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastIllustrationActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastIllustrationActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastIllustrationActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastIllustrationActiveReq::MergeFrom(const TBeastIllustrationActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_illustrationid()) {
      set_illustrationid(from.illustrationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastIllustrationActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastIllustrationActiveReq::CopyFrom(const TBeastIllustrationActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastIllustrationActiveReq::IsInitialized() const {

  return true;
}

void TBeastIllustrationActiveReq::Swap(TBeastIllustrationActiveReq* other) {
  if (other != this) {
    std::swap(illustrationid_, other->illustrationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastIllustrationActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastIllustrationActiveReq_descriptor_;
  metadata.reflection = TBeastIllustrationActiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastIllustrationActiveRsp::kIllustrationInfoFieldNumber;
#endif  // !_MSC_VER

TBeastIllustrationActiveRsp::TBeastIllustrationActiveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastIllustrationActiveRsp)
}

void TBeastIllustrationActiveRsp::InitAsDefaultInstance() {
  illustrationinfo_ = const_cast< ::pb::TBeastIllustrationInfo*>(&::pb::TBeastIllustrationInfo::default_instance());
}

TBeastIllustrationActiveRsp::TBeastIllustrationActiveRsp(const TBeastIllustrationActiveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastIllustrationActiveRsp)
}

void TBeastIllustrationActiveRsp::SharedCtor() {
  _cached_size_ = 0;
  illustrationinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastIllustrationActiveRsp::~TBeastIllustrationActiveRsp() {
  // @@protoc_insertion_point(destructor:pb.TBeastIllustrationActiveRsp)
  SharedDtor();
}

void TBeastIllustrationActiveRsp::SharedDtor() {
  if (this != default_instance_) {
    delete illustrationinfo_;
  }
}

void TBeastIllustrationActiveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastIllustrationActiveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastIllustrationActiveRsp_descriptor_;
}

const TBeastIllustrationActiveRsp& TBeastIllustrationActiveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastIllustration_2eproto();
  return *default_instance_;
}

TBeastIllustrationActiveRsp* TBeastIllustrationActiveRsp::default_instance_ = NULL;

TBeastIllustrationActiveRsp* TBeastIllustrationActiveRsp::New() const {
  return new TBeastIllustrationActiveRsp;
}

void TBeastIllustrationActiveRsp::Clear() {
  if (has_illustrationinfo()) {
    if (illustrationinfo_ != NULL) illustrationinfo_->::pb::TBeastIllustrationInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastIllustrationActiveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastIllustrationActiveRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBeastIllustrationInfo IllustrationInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_illustrationinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastIllustrationActiveRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastIllustrationActiveRsp)
  return false;
#undef DO_
}

void TBeastIllustrationActiveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastIllustrationActiveRsp)
  // optional .pb.TBeastIllustrationInfo IllustrationInfo = 1;
  if (has_illustrationinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->illustrationinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastIllustrationActiveRsp)
}

::google::protobuf::uint8* TBeastIllustrationActiveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastIllustrationActiveRsp)
  // optional .pb.TBeastIllustrationInfo IllustrationInfo = 1;
  if (has_illustrationinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->illustrationinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastIllustrationActiveRsp)
  return target;
}

int TBeastIllustrationActiveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBeastIllustrationInfo IllustrationInfo = 1;
    if (has_illustrationinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->illustrationinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastIllustrationActiveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastIllustrationActiveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastIllustrationActiveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastIllustrationActiveRsp::MergeFrom(const TBeastIllustrationActiveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_illustrationinfo()) {
      mutable_illustrationinfo()->::pb::TBeastIllustrationInfo::MergeFrom(from.illustrationinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastIllustrationActiveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastIllustrationActiveRsp::CopyFrom(const TBeastIllustrationActiveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastIllustrationActiveRsp::IsInitialized() const {

  return true;
}

void TBeastIllustrationActiveRsp::Swap(TBeastIllustrationActiveRsp* other) {
  if (other != this) {
    std::swap(illustrationinfo_, other->illustrationinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastIllustrationActiveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastIllustrationActiveRsp_descriptor_;
  metadata.reflection = TBeastIllustrationActiveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastIllustrationBreakThroughReq::kIllustrationIdFieldNumber;
#endif  // !_MSC_VER

TBeastIllustrationBreakThroughReq::TBeastIllustrationBreakThroughReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastIllustrationBreakThroughReq)
}

void TBeastIllustrationBreakThroughReq::InitAsDefaultInstance() {
}

TBeastIllustrationBreakThroughReq::TBeastIllustrationBreakThroughReq(const TBeastIllustrationBreakThroughReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastIllustrationBreakThroughReq)
}

void TBeastIllustrationBreakThroughReq::SharedCtor() {
  _cached_size_ = 0;
  illustrationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastIllustrationBreakThroughReq::~TBeastIllustrationBreakThroughReq() {
  // @@protoc_insertion_point(destructor:pb.TBeastIllustrationBreakThroughReq)
  SharedDtor();
}

void TBeastIllustrationBreakThroughReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastIllustrationBreakThroughReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastIllustrationBreakThroughReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastIllustrationBreakThroughReq_descriptor_;
}

const TBeastIllustrationBreakThroughReq& TBeastIllustrationBreakThroughReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBeastIllustration_2eproto();
  return *default_instance_;
}

TBeastIllustrationBreakThroughReq* TBeastIllustrationBreakThroughReq::default_instance_ = NULL;

TBeastIllustrationBreakThroughReq* TBeastIllustrationBreakThroughReq::New() const {
  return new TBeastIllustrationBreakThroughReq;
}

void TBeastIllustrationBreakThroughReq::Clear() {
  illustrationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastIllustrationBreakThroughReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastIllustrationBreakThroughReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IllustrationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &illustrationid_)));
          set_has_illustrationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastIllustrationBreakThroughReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastIllustrationBreakThroughReq)
  return false;
#undef DO_
}

void TBeastIllustrationBreakThroughReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastIllustrationBreakThroughReq)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->illustrationid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastIllustrationBreakThroughReq)
}

::google::protobuf::uint8* TBeastIllustrationBreakThroughReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastIllustrationBreakThroughReq)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->illustrationid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastIllustrationBreakThroughReq)
  return target;
}

int TBeastIllustrationBreakThroughReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IllustrationId = 1;
    if (has_illustrationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->illustrationid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastIllustrationBreakThroughReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastIllustrationBreakThroughReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastIllustrationBreakThroughReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastIllustrationBreakThroughReq::MergeFrom(const TBeastIllustrationBreakThroughReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_illustrationid()) {
      set_illustrationid(from.illustrationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastIllustrationBreakThroughReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastIllustrationBreakThroughReq::CopyFrom(const TBeastIllustrationBreakThroughReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastIllustrationBreakThroughReq::IsInitialized() const {

  return true;
}

void TBeastIllustrationBreakThroughReq::Swap(TBeastIllustrationBreakThroughReq* other) {
  if (other != this) {
    std::swap(illustrationid_, other->illustrationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastIllustrationBreakThroughReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastIllustrationBreakThroughReq_descriptor_;
  metadata.reflection = TBeastIllustrationBreakThroughReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
