// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/SlgUser.proto

#ifndef PROTOBUF_net_2fSlgUser_2eproto__INCLUDED
#define PROTOBUF_net_2fSlgUser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fSlgUser_2eproto();
void protobuf_AssignDesc_net_2fSlgUser_2eproto();
void protobuf_ShutdownFile_net_2fSlgUser_2eproto();

class TSlgUserGetUserDataReq;
class TSlgUserBaseData;
class TSlgUserGetUserDataRsp;
class TUserRecoverDataSlg;
class TSlgUserResourceData;
class TSlgUserDataNotify;
class TSlgUserGetOtherUserInfoReq;
class TSlgUserGetOtherUserInfoRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TSlgUserGetUserDataReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgUser.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgUserGetUserDataReq : public ::google::protobuf::Message {
 public:
  TSlgUserGetUserDataReq();
  virtual ~TSlgUserGetUserDataReq();

  TSlgUserGetUserDataReq(const TSlgUserGetUserDataReq& from);

  inline TSlgUserGetUserDataReq& operator=(const TSlgUserGetUserDataReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgUserGetUserDataReq& default_instance();

  void Swap(TSlgUserGetUserDataReq* other);

  // implements Message ----------------------------------------------

  TSlgUserGetUserDataReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgUserGetUserDataReq& from);
  void MergeFrom(const TSlgUserGetUserDataReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TSlgUserGetUserDataReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fSlgUser_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgUser_2eproto();

  void InitAsDefaultInstance();
  static TSlgUserGetUserDataReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgUserBaseData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgUser.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgUserBaseData : public ::google::protobuf::Message {
 public:
  TSlgUserBaseData();
  virtual ~TSlgUserBaseData();

  TSlgUserBaseData(const TSlgUserBaseData& from);

  inline TSlgUserBaseData& operator=(const TSlgUserBaseData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgUserBaseData& default_instance();

  void Swap(TSlgUserBaseData* other);

  // implements Message ----------------------------------------------

  TSlgUserBaseData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgUserBaseData& from);
  void MergeFrom(const TSlgUserBaseData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUserRecoverDataSlg RecoverArr = 1;
  inline int recoverarr_size() const;
  inline void clear_recoverarr();
  static const int kRecoverArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgUserBaseData</name>
  	<Function>
  		<name>recoverarr</name>
  		<replaceName>RecoverArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recoverarr</name>
  		<replaceName>RecoverArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recoverarr</name>
  		<replaceName>RecoverArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recoverarr</name>
  		<replaceName>RecoverArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recoverarr_size</name>
  		<replaceName>RecoverArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserRecoverDataSlg& recoverarr(int index) const;
  inline ::pb::TUserRecoverDataSlg* mutable_recoverarr(int index);
  inline ::pb::TUserRecoverDataSlg* add_recoverarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserRecoverDataSlg >&
      recoverarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserRecoverDataSlg >*
      mutable_recoverarr();

  // repeated .pb.TSlgUserResourceData ResourceDataArray = 2;
  inline int resourcedataarray_size() const;
  inline void clear_resourcedataarray();
  static const int kResourceDataArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgUserBaseData</name>
  	<Function>
  		<name>resourcedataarray</name>
  		<replaceName>ResourceDataArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_resourcedataarray</name>
  		<replaceName>ResourceDataArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_resourcedataarray</name>
  		<replaceName>ResourceDataArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resourcedataarray</name>
  		<replaceName>ResourceDataArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>resourcedataarray_size</name>
  		<replaceName>ResourceDataArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgUserResourceData& resourcedataarray(int index) const;
  inline ::pb::TSlgUserResourceData* mutable_resourcedataarray(int index);
  inline ::pb::TSlgUserResourceData* add_resourcedataarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgUserResourceData >&
      resourcedataarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgUserResourceData >*
      mutable_resourcedataarray();

  // optional uint32 Coin = 3;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSlgUserBaseData</name>
  	<Function>
  		<name>coin</name>
  		<replaceName>Coin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_coin</name>
  		<replaceName>Coin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_coin</name>
  		<replaceName>Coin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgUserBaseData)
 private:
  inline void set_has_coin();
  inline void clear_has_coin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserRecoverDataSlg > recoverarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSlgUserResourceData > resourcedataarray_;
  ::google::protobuf::uint32 coin_;
  friend void  protobuf_AddDesc_net_2fSlgUser_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgUser_2eproto();

  void InitAsDefaultInstance();
  static TSlgUserBaseData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgUserGetUserDataRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgUser.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgUserGetUserDataRsp : public ::google::protobuf::Message {
 public:
  TSlgUserGetUserDataRsp();
  virtual ~TSlgUserGetUserDataRsp();

  TSlgUserGetUserDataRsp(const TSlgUserGetUserDataRsp& from);

  inline TSlgUserGetUserDataRsp& operator=(const TSlgUserGetUserDataRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgUserGetUserDataRsp& default_instance();

  void Swap(TSlgUserGetUserDataRsp* other);

  // implements Message ----------------------------------------------

  TSlgUserGetUserDataRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgUserGetUserDataRsp& from);
  void MergeFrom(const TSlgUserGetUserDataRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TSlgUserBaseData UserData = 1;
  inline bool has_userdata() const;
  inline void clear_userdata();
  static const int kUserDataFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgUserGetUserDataRsp</name>
  	<Function>
  		<name>userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgUserBaseData& userdata() const;
  inline ::pb::TSlgUserBaseData* mutable_userdata();
  inline ::pb::TSlgUserBaseData* release_userdata();
  inline void set_allocated_userdata(::pb::TSlgUserBaseData* userdata);

  // optional int64 ServerTime = 2;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServerTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgUserGetUserDataRsp</name>
  	<Function>
  		<name>servertime</name>
  		<replaceName>ServerTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_servertime</name>
  		<replaceName>ServerTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_servertime</name>
  		<replaceName>ServerTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 servertime() const;
  inline void set_servertime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgUserGetUserDataRsp)
 private:
  inline void set_has_userdata();
  inline void clear_has_userdata();
  inline void set_has_servertime();
  inline void clear_has_servertime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TSlgUserBaseData* userdata_;
  ::google::protobuf::int64 servertime_;
  friend void  protobuf_AddDesc_net_2fSlgUser_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgUser_2eproto();

  void InitAsDefaultInstance();
  static TSlgUserGetUserDataRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserRecoverDataSlg</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgUser.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserRecoverDataSlg : public ::google::protobuf::Message {
 public:
  TUserRecoverDataSlg();
  virtual ~TUserRecoverDataSlg();

  TUserRecoverDataSlg(const TUserRecoverDataSlg& from);

  inline TUserRecoverDataSlg& operator=(const TUserRecoverDataSlg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserRecoverDataSlg& default_instance();

  void Swap(TUserRecoverDataSlg* other);

  // implements Message ----------------------------------------------

  TUserRecoverDataSlg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserRecoverDataSlg& from);
  void MergeFrom(const TUserRecoverDataSlg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserRecoverDataSlg</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserRecoverDataSlg</name>
  	<Function>
  		<name>value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // optional int64 RecoverTime = 3;
  inline bool has_recovertime() const;
  inline void clear_recovertime();
  static const int kRecoverTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUserRecoverDataSlg</name>
  	<Function>
  		<name>recovertime</name>
  		<replaceName>RecoverTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recovertime</name>
  		<replaceName>RecoverTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recovertime</name>
  		<replaceName>RecoverTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 recovertime() const;
  inline void set_recovertime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TUserRecoverDataSlg)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_recovertime();
  inline void clear_has_recovertime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int64 recovertime_;
  friend void  protobuf_AddDesc_net_2fSlgUser_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgUser_2eproto();

  void InitAsDefaultInstance();
  static TUserRecoverDataSlg* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgUserResourceData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgUser.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgUserResourceData : public ::google::protobuf::Message {
 public:
  TSlgUserResourceData();
  virtual ~TSlgUserResourceData();

  TSlgUserResourceData(const TSlgUserResourceData& from);

  inline TSlgUserResourceData& operator=(const TSlgUserResourceData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgUserResourceData& default_instance();

  void Swap(TSlgUserResourceData* other);

  // implements Message ----------------------------------------------

  TSlgUserResourceData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgUserResourceData& from);
  void MergeFrom(const TSlgUserResourceData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ResourceType = 1;
  inline bool has_resourcetype() const;
  inline void clear_resourcetype();
  static const int kResourceTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgUserResourceData</name>
  	<Function>
  		<name>resourcetype</name>
  		<replaceName>ResourceType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resourcetype</name>
  		<replaceName>ResourceType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resourcetype</name>
  		<replaceName>ResourceType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 resourcetype() const;
  inline void set_resourcetype(::google::protobuf::uint32 value);

  // optional uint32 ResourceNum = 2;
  inline bool has_resourcenum() const;
  inline void clear_resourcenum();
  static const int kResourceNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgUserResourceData</name>
  	<Function>
  		<name>resourcenum</name>
  		<replaceName>ResourceNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resourcenum</name>
  		<replaceName>ResourceNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resourcenum</name>
  		<replaceName>ResourceNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 resourcenum() const;
  inline void set_resourcenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgUserResourceData)
 private:
  inline void set_has_resourcetype();
  inline void clear_has_resourcetype();
  inline void set_has_resourcenum();
  inline void clear_has_resourcenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 resourcetype_;
  ::google::protobuf::uint32 resourcenum_;
  friend void  protobuf_AddDesc_net_2fSlgUser_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgUser_2eproto();

  void InitAsDefaultInstance();
  static TSlgUserResourceData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgUserDataNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgUser.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgUserDataNotify : public ::google::protobuf::Message {
 public:
  TSlgUserDataNotify();
  virtual ~TSlgUserDataNotify();

  TSlgUserDataNotify(const TSlgUserDataNotify& from);

  inline TSlgUserDataNotify& operator=(const TSlgUserDataNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgUserDataNotify& default_instance();

  void Swap(TSlgUserDataNotify* other);

  // implements Message ----------------------------------------------

  TSlgUserDataNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgUserDataNotify& from);
  void MergeFrom(const TSlgUserDataNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TSlgUserBaseData UserData = 1;
  inline bool has_userdata() const;
  inline void clear_userdata();
  static const int kUserDataFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgUserDataNotify</name>
  	<Function>
  		<name>userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgUserBaseData& userdata() const;
  inline ::pb::TSlgUserBaseData* mutable_userdata();
  inline ::pb::TSlgUserBaseData* release_userdata();
  inline void set_allocated_userdata(::pb::TSlgUserBaseData* userdata);

  // @@protoc_insertion_point(class_scope:pb.TSlgUserDataNotify)
 private:
  inline void set_has_userdata();
  inline void clear_has_userdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TSlgUserBaseData* userdata_;
  friend void  protobuf_AddDesc_net_2fSlgUser_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgUser_2eproto();

  void InitAsDefaultInstance();
  static TSlgUserDataNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgUserGetOtherUserInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgUser.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgUserGetOtherUserInfoReq : public ::google::protobuf::Message {
 public:
  TSlgUserGetOtherUserInfoReq();
  virtual ~TSlgUserGetOtherUserInfoReq();

  TSlgUserGetOtherUserInfoReq(const TSlgUserGetOtherUserInfoReq& from);

  inline TSlgUserGetOtherUserInfoReq& operator=(const TSlgUserGetOtherUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgUserGetOtherUserInfoReq& default_instance();

  void Swap(TSlgUserGetOtherUserInfoReq* other);

  // implements Message ----------------------------------------------

  TSlgUserGetOtherUserInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgUserGetOtherUserInfoReq& from);
  void MergeFrom(const TSlgUserGetOtherUserInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 OtherUid = 1;
  inline bool has_otheruid() const;
  inline void clear_otheruid();
  static const int kOtherUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgUserGetOtherUserInfoReq</name>
  	<Function>
  		<name>otheruid</name>
  		<replaceName>OtherUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_otheruid</name>
  		<replaceName>OtherUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_otheruid</name>
  		<replaceName>OtherUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 otheruid() const;
  inline void set_otheruid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgUserGetOtherUserInfoReq)
 private:
  inline void set_has_otheruid();
  inline void clear_has_otheruid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 otheruid_;
  friend void  protobuf_AddDesc_net_2fSlgUser_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgUser_2eproto();

  void InitAsDefaultInstance();
  static TSlgUserGetOtherUserInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgUserGetOtherUserInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgUser.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgUserGetOtherUserInfoRsp : public ::google::protobuf::Message {
 public:
  TSlgUserGetOtherUserInfoRsp();
  virtual ~TSlgUserGetOtherUserInfoRsp();

  TSlgUserGetOtherUserInfoRsp(const TSlgUserGetOtherUserInfoRsp& from);

  inline TSlgUserGetOtherUserInfoRsp& operator=(const TSlgUserGetOtherUserInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgUserGetOtherUserInfoRsp& default_instance();

  void Swap(TSlgUserGetOtherUserInfoRsp* other);

  // implements Message ----------------------------------------------

  TSlgUserGetOtherUserInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgUserGetOtherUserInfoRsp& from);
  void MergeFrom(const TSlgUserGetOtherUserInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Uname = 1;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgUserGetOtherUserInfoRsp</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 MasterCityLv = 2;
  inline bool has_mastercitylv() const;
  inline void clear_mastercitylv();
  static const int kMasterCityLvFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgUserGetOtherUserInfoRsp</name>
  	<Function>
  		<name>mastercitylv</name>
  		<replaceName>MasterCityLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mastercitylv</name>
  		<replaceName>MasterCityLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mastercitylv</name>
  		<replaceName>MasterCityLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mastercitylv() const;
  inline void set_mastercitylv(::google::protobuf::uint32 value);

  // optional uint32 MasterHeroTid = 3;
  inline bool has_masterherotid() const;
  inline void clear_masterherotid();
  static const int kMasterHeroTidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSlgUserGetOtherUserInfoRsp</name>
  	<Function>
  		<name>masterherotid</name>
  		<replaceName>MasterHeroTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_masterherotid</name>
  		<replaceName>MasterHeroTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_masterherotid</name>
  		<replaceName>MasterHeroTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 masterherotid() const;
  inline void set_masterherotid(::google::protobuf::uint32 value);

  // optional uint32 Investigation = 4;
  inline bool has_investigation() const;
  inline void clear_investigation();
  static const int kInvestigationFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TSlgUserGetOtherUserInfoRsp</name>
  	<Function>
  		<name>investigation</name>
  		<replaceName>Investigation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_investigation</name>
  		<replaceName>Investigation</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_investigation</name>
  		<replaceName>Investigation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 investigation() const;
  inline void set_investigation(::google::protobuf::uint32 value);

  // optional uint32 UserLv = 5;
  inline bool has_userlv() const;
  inline void clear_userlv();
  static const int kUserLvFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TSlgUserGetOtherUserInfoRsp</name>
  	<Function>
  		<name>userlv</name>
  		<replaceName>UserLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userlv</name>
  		<replaceName>UserLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userlv</name>
  		<replaceName>UserLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 userlv() const;
  inline void set_userlv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgUserGetOtherUserInfoRsp)
 private:
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_mastercitylv();
  inline void clear_has_mastercitylv();
  inline void set_has_masterherotid();
  inline void clear_has_masterherotid();
  inline void set_has_investigation();
  inline void clear_has_investigation();
  inline void set_has_userlv();
  inline void clear_has_userlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uname_;
  ::google::protobuf::uint32 mastercitylv_;
  ::google::protobuf::uint32 masterherotid_;
  ::google::protobuf::uint32 investigation_;
  ::google::protobuf::uint32 userlv_;
  friend void  protobuf_AddDesc_net_2fSlgUser_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgUser_2eproto();

  void InitAsDefaultInstance();
  static TSlgUserGetOtherUserInfoRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TSlgUserGetUserDataReq

// -------------------------------------------------------------------

// TSlgUserBaseData

// repeated .pb.TUserRecoverDataSlg RecoverArr = 1;
inline int TSlgUserBaseData::recoverarr_size() const {
  return recoverarr_.size();
}
inline void TSlgUserBaseData::clear_recoverarr() {
  recoverarr_.Clear();
}
inline const ::pb::TUserRecoverDataSlg& TSlgUserBaseData::recoverarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgUserBaseData.RecoverArr)
  return recoverarr_.Get(index);
}
inline ::pb::TUserRecoverDataSlg* TSlgUserBaseData::mutable_recoverarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgUserBaseData.RecoverArr)
  return recoverarr_.Mutable(index);
}
inline ::pb::TUserRecoverDataSlg* TSlgUserBaseData::add_recoverarr() {
  // @@protoc_insertion_point(field_add:pb.TSlgUserBaseData.RecoverArr)
  return recoverarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserRecoverDataSlg >&
TSlgUserBaseData::recoverarr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgUserBaseData.RecoverArr)
  return recoverarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserRecoverDataSlg >*
TSlgUserBaseData::mutable_recoverarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgUserBaseData.RecoverArr)
  return &recoverarr_;
}

// repeated .pb.TSlgUserResourceData ResourceDataArray = 2;
inline int TSlgUserBaseData::resourcedataarray_size() const {
  return resourcedataarray_.size();
}
inline void TSlgUserBaseData::clear_resourcedataarray() {
  resourcedataarray_.Clear();
}
inline const ::pb::TSlgUserResourceData& TSlgUserBaseData::resourcedataarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgUserBaseData.ResourceDataArray)
  return resourcedataarray_.Get(index);
}
inline ::pb::TSlgUserResourceData* TSlgUserBaseData::mutable_resourcedataarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgUserBaseData.ResourceDataArray)
  return resourcedataarray_.Mutable(index);
}
inline ::pb::TSlgUserResourceData* TSlgUserBaseData::add_resourcedataarray() {
  // @@protoc_insertion_point(field_add:pb.TSlgUserBaseData.ResourceDataArray)
  return resourcedataarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgUserResourceData >&
TSlgUserBaseData::resourcedataarray() const {
  // @@protoc_insertion_point(field_list:pb.TSlgUserBaseData.ResourceDataArray)
  return resourcedataarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgUserResourceData >*
TSlgUserBaseData::mutable_resourcedataarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgUserBaseData.ResourceDataArray)
  return &resourcedataarray_;
}

// optional uint32 Coin = 3;
inline bool TSlgUserBaseData::has_coin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSlgUserBaseData::set_has_coin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSlgUserBaseData::clear_has_coin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSlgUserBaseData::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 TSlgUserBaseData::coin() const {
  // @@protoc_insertion_point(field_get:pb.TSlgUserBaseData.Coin)
  return coin_;
}
inline void TSlgUserBaseData::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgUserBaseData.Coin)
}

// -------------------------------------------------------------------

// TSlgUserGetUserDataRsp

// optional .pb.TSlgUserBaseData UserData = 1;
inline bool TSlgUserGetUserDataRsp::has_userdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgUserGetUserDataRsp::set_has_userdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgUserGetUserDataRsp::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgUserGetUserDataRsp::clear_userdata() {
  if (userdata_ != NULL) userdata_->::pb::TSlgUserBaseData::Clear();
  clear_has_userdata();
}
inline const ::pb::TSlgUserBaseData& TSlgUserGetUserDataRsp::userdata() const {
  // @@protoc_insertion_point(field_get:pb.TSlgUserGetUserDataRsp.UserData)
  return userdata_ != NULL ? *userdata_ : *default_instance_->userdata_;
}
inline ::pb::TSlgUserBaseData* TSlgUserGetUserDataRsp::mutable_userdata() {
  set_has_userdata();
  if (userdata_ == NULL) userdata_ = new ::pb::TSlgUserBaseData;
  // @@protoc_insertion_point(field_mutable:pb.TSlgUserGetUserDataRsp.UserData)
  return userdata_;
}
inline ::pb::TSlgUserBaseData* TSlgUserGetUserDataRsp::release_userdata() {
  clear_has_userdata();
  ::pb::TSlgUserBaseData* temp = userdata_;
  userdata_ = NULL;
  return temp;
}
inline void TSlgUserGetUserDataRsp::set_allocated_userdata(::pb::TSlgUserBaseData* userdata) {
  delete userdata_;
  userdata_ = userdata;
  if (userdata) {
    set_has_userdata();
  } else {
    clear_has_userdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSlgUserGetUserDataRsp.UserData)
}

// optional int64 ServerTime = 2;
inline bool TSlgUserGetUserDataRsp::has_servertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSlgUserGetUserDataRsp::set_has_servertime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSlgUserGetUserDataRsp::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSlgUserGetUserDataRsp::clear_servertime() {
  servertime_ = GOOGLE_LONGLONG(0);
  clear_has_servertime();
}
inline ::google::protobuf::int64 TSlgUserGetUserDataRsp::servertime() const {
  // @@protoc_insertion_point(field_get:pb.TSlgUserGetUserDataRsp.ServerTime)
  return servertime_;
}
inline void TSlgUserGetUserDataRsp::set_servertime(::google::protobuf::int64 value) {
  set_has_servertime();
  servertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgUserGetUserDataRsp.ServerTime)
}

// -------------------------------------------------------------------

// TUserRecoverDataSlg

// optional int32 Tid = 1;
inline bool TUserRecoverDataSlg::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserRecoverDataSlg::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserRecoverDataSlg::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserRecoverDataSlg::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 TUserRecoverDataSlg::tid() const {
  // @@protoc_insertion_point(field_get:pb.TUserRecoverDataSlg.Tid)
  return tid_;
}
inline void TUserRecoverDataSlg::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserRecoverDataSlg.Tid)
}

// optional int32 Value = 2;
inline bool TUserRecoverDataSlg::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserRecoverDataSlg::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserRecoverDataSlg::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserRecoverDataSlg::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 TUserRecoverDataSlg::value() const {
  // @@protoc_insertion_point(field_get:pb.TUserRecoverDataSlg.Value)
  return value_;
}
inline void TUserRecoverDataSlg::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserRecoverDataSlg.Value)
}

// optional int64 RecoverTime = 3;
inline bool TUserRecoverDataSlg::has_recovertime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUserRecoverDataSlg::set_has_recovertime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUserRecoverDataSlg::clear_has_recovertime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUserRecoverDataSlg::clear_recovertime() {
  recovertime_ = GOOGLE_LONGLONG(0);
  clear_has_recovertime();
}
inline ::google::protobuf::int64 TUserRecoverDataSlg::recovertime() const {
  // @@protoc_insertion_point(field_get:pb.TUserRecoverDataSlg.RecoverTime)
  return recovertime_;
}
inline void TUserRecoverDataSlg::set_recovertime(::google::protobuf::int64 value) {
  set_has_recovertime();
  recovertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserRecoverDataSlg.RecoverTime)
}

// -------------------------------------------------------------------

// TSlgUserResourceData

// optional uint32 ResourceType = 1;
inline bool TSlgUserResourceData::has_resourcetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgUserResourceData::set_has_resourcetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgUserResourceData::clear_has_resourcetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgUserResourceData::clear_resourcetype() {
  resourcetype_ = 0u;
  clear_has_resourcetype();
}
inline ::google::protobuf::uint32 TSlgUserResourceData::resourcetype() const {
  // @@protoc_insertion_point(field_get:pb.TSlgUserResourceData.ResourceType)
  return resourcetype_;
}
inline void TSlgUserResourceData::set_resourcetype(::google::protobuf::uint32 value) {
  set_has_resourcetype();
  resourcetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgUserResourceData.ResourceType)
}

// optional uint32 ResourceNum = 2;
inline bool TSlgUserResourceData::has_resourcenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSlgUserResourceData::set_has_resourcenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSlgUserResourceData::clear_has_resourcenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSlgUserResourceData::clear_resourcenum() {
  resourcenum_ = 0u;
  clear_has_resourcenum();
}
inline ::google::protobuf::uint32 TSlgUserResourceData::resourcenum() const {
  // @@protoc_insertion_point(field_get:pb.TSlgUserResourceData.ResourceNum)
  return resourcenum_;
}
inline void TSlgUserResourceData::set_resourcenum(::google::protobuf::uint32 value) {
  set_has_resourcenum();
  resourcenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgUserResourceData.ResourceNum)
}

// -------------------------------------------------------------------

// TSlgUserDataNotify

// optional .pb.TSlgUserBaseData UserData = 1;
inline bool TSlgUserDataNotify::has_userdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgUserDataNotify::set_has_userdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgUserDataNotify::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgUserDataNotify::clear_userdata() {
  if (userdata_ != NULL) userdata_->::pb::TSlgUserBaseData::Clear();
  clear_has_userdata();
}
inline const ::pb::TSlgUserBaseData& TSlgUserDataNotify::userdata() const {
  // @@protoc_insertion_point(field_get:pb.TSlgUserDataNotify.UserData)
  return userdata_ != NULL ? *userdata_ : *default_instance_->userdata_;
}
inline ::pb::TSlgUserBaseData* TSlgUserDataNotify::mutable_userdata() {
  set_has_userdata();
  if (userdata_ == NULL) userdata_ = new ::pb::TSlgUserBaseData;
  // @@protoc_insertion_point(field_mutable:pb.TSlgUserDataNotify.UserData)
  return userdata_;
}
inline ::pb::TSlgUserBaseData* TSlgUserDataNotify::release_userdata() {
  clear_has_userdata();
  ::pb::TSlgUserBaseData* temp = userdata_;
  userdata_ = NULL;
  return temp;
}
inline void TSlgUserDataNotify::set_allocated_userdata(::pb::TSlgUserBaseData* userdata) {
  delete userdata_;
  userdata_ = userdata;
  if (userdata) {
    set_has_userdata();
  } else {
    clear_has_userdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSlgUserDataNotify.UserData)
}

// -------------------------------------------------------------------

// TSlgUserGetOtherUserInfoReq

// optional uint64 OtherUid = 1;
inline bool TSlgUserGetOtherUserInfoReq::has_otheruid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgUserGetOtherUserInfoReq::set_has_otheruid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgUserGetOtherUserInfoReq::clear_has_otheruid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgUserGetOtherUserInfoReq::clear_otheruid() {
  otheruid_ = GOOGLE_ULONGLONG(0);
  clear_has_otheruid();
}
inline ::google::protobuf::uint64 TSlgUserGetOtherUserInfoReq::otheruid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgUserGetOtherUserInfoReq.OtherUid)
  return otheruid_;
}
inline void TSlgUserGetOtherUserInfoReq::set_otheruid(::google::protobuf::uint64 value) {
  set_has_otheruid();
  otheruid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgUserGetOtherUserInfoReq.OtherUid)
}

// -------------------------------------------------------------------

// TSlgUserGetOtherUserInfoRsp

// optional string Uname = 1;
inline bool TSlgUserGetOtherUserInfoRsp::has_uname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgUserGetOtherUserInfoRsp::set_has_uname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgUserGetOtherUserInfoRsp::clear_has_uname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgUserGetOtherUserInfoRsp::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TSlgUserGetOtherUserInfoRsp::uname() const {
  // @@protoc_insertion_point(field_get:pb.TSlgUserGetOtherUserInfoRsp.Uname)
  return *uname_;
}
inline void TSlgUserGetOtherUserInfoRsp::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TSlgUserGetOtherUserInfoRsp.Uname)
}
inline void TSlgUserGetOtherUserInfoRsp::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TSlgUserGetOtherUserInfoRsp.Uname)
}
inline void TSlgUserGetOtherUserInfoRsp::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TSlgUserGetOtherUserInfoRsp.Uname)
}
inline ::std::string* TSlgUserGetOtherUserInfoRsp::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TSlgUserGetOtherUserInfoRsp.Uname)
  return uname_;
}
inline ::std::string* TSlgUserGetOtherUserInfoRsp::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TSlgUserGetOtherUserInfoRsp::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSlgUserGetOtherUserInfoRsp.Uname)
}

// optional uint32 MasterCityLv = 2;
inline bool TSlgUserGetOtherUserInfoRsp::has_mastercitylv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSlgUserGetOtherUserInfoRsp::set_has_mastercitylv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSlgUserGetOtherUserInfoRsp::clear_has_mastercitylv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSlgUserGetOtherUserInfoRsp::clear_mastercitylv() {
  mastercitylv_ = 0u;
  clear_has_mastercitylv();
}
inline ::google::protobuf::uint32 TSlgUserGetOtherUserInfoRsp::mastercitylv() const {
  // @@protoc_insertion_point(field_get:pb.TSlgUserGetOtherUserInfoRsp.MasterCityLv)
  return mastercitylv_;
}
inline void TSlgUserGetOtherUserInfoRsp::set_mastercitylv(::google::protobuf::uint32 value) {
  set_has_mastercitylv();
  mastercitylv_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgUserGetOtherUserInfoRsp.MasterCityLv)
}

// optional uint32 MasterHeroTid = 3;
inline bool TSlgUserGetOtherUserInfoRsp::has_masterherotid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSlgUserGetOtherUserInfoRsp::set_has_masterherotid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSlgUserGetOtherUserInfoRsp::clear_has_masterherotid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSlgUserGetOtherUserInfoRsp::clear_masterherotid() {
  masterherotid_ = 0u;
  clear_has_masterherotid();
}
inline ::google::protobuf::uint32 TSlgUserGetOtherUserInfoRsp::masterherotid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgUserGetOtherUserInfoRsp.MasterHeroTid)
  return masterherotid_;
}
inline void TSlgUserGetOtherUserInfoRsp::set_masterherotid(::google::protobuf::uint32 value) {
  set_has_masterherotid();
  masterherotid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgUserGetOtherUserInfoRsp.MasterHeroTid)
}

// optional uint32 Investigation = 4;
inline bool TSlgUserGetOtherUserInfoRsp::has_investigation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSlgUserGetOtherUserInfoRsp::set_has_investigation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSlgUserGetOtherUserInfoRsp::clear_has_investigation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSlgUserGetOtherUserInfoRsp::clear_investigation() {
  investigation_ = 0u;
  clear_has_investigation();
}
inline ::google::protobuf::uint32 TSlgUserGetOtherUserInfoRsp::investigation() const {
  // @@protoc_insertion_point(field_get:pb.TSlgUserGetOtherUserInfoRsp.Investigation)
  return investigation_;
}
inline void TSlgUserGetOtherUserInfoRsp::set_investigation(::google::protobuf::uint32 value) {
  set_has_investigation();
  investigation_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgUserGetOtherUserInfoRsp.Investigation)
}

// optional uint32 UserLv = 5;
inline bool TSlgUserGetOtherUserInfoRsp::has_userlv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TSlgUserGetOtherUserInfoRsp::set_has_userlv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TSlgUserGetOtherUserInfoRsp::clear_has_userlv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TSlgUserGetOtherUserInfoRsp::clear_userlv() {
  userlv_ = 0u;
  clear_has_userlv();
}
inline ::google::protobuf::uint32 TSlgUserGetOtherUserInfoRsp::userlv() const {
  // @@protoc_insertion_point(field_get:pb.TSlgUserGetOtherUserInfoRsp.UserLv)
  return userlv_;
}
inline void TSlgUserGetOtherUserInfoRsp::set_userlv(::google::protobuf::uint32 value) {
  set_has_userlv();
  userlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgUserGetOtherUserInfoRsp.UserLv)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fSlgUser_2eproto__INCLUDED
