// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/TowerFund.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/TowerFund.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TTowerFundGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerFundGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerFundSingleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerFundSingleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerFundReceiveRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerFundReceiveRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerFundBuyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerFundBuyNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fTowerFund_2eproto() {
  protobuf_AddDesc_net_2fTowerFund_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/TowerFund.proto");
  GOOGLE_CHECK(file != NULL);
  TTowerFundGetInfoRsp_descriptor_ = file->message_type(0);
  static const int TTowerFundGetInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundGetInfoRsp, towerfundarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundGetInfoRsp, opentime_),
  };
  TTowerFundGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerFundGetInfoRsp_descriptor_,
      TTowerFundGetInfoRsp::default_instance_,
      TTowerFundGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerFundGetInfoRsp));
  TTowerFundSingleInfo_descriptor_ = file->message_type(1);
  static const int TTowerFundSingleInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundSingleInfo, towerfundid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundSingleInfo, buytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundSingleInfo, receivedrewardindex_),
  };
  TTowerFundSingleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerFundSingleInfo_descriptor_,
      TTowerFundSingleInfo::default_instance_,
      TTowerFundSingleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundSingleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundSingleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerFundSingleInfo));
  TTowerFundReceiveRewardReq_descriptor_ = file->message_type(2);
  static const int TTowerFundReceiveRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundReceiveRewardReq, towerfundid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundReceiveRewardReq, rewardindex_),
  };
  TTowerFundReceiveRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerFundReceiveRewardReq_descriptor_,
      TTowerFundReceiveRewardReq::default_instance_,
      TTowerFundReceiveRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundReceiveRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundReceiveRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerFundReceiveRewardReq));
  TTowerFundBuyNotify_descriptor_ = file->message_type(3);
  static const int TTowerFundBuyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundBuyNotify, towerfundid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundBuyNotify, buytime_),
  };
  TTowerFundBuyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerFundBuyNotify_descriptor_,
      TTowerFundBuyNotify::default_instance_,
      TTowerFundBuyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundBuyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerFundBuyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerFundBuyNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fTowerFund_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerFundGetInfoRsp_descriptor_, &TTowerFundGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerFundSingleInfo_descriptor_, &TTowerFundSingleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerFundReceiveRewardReq_descriptor_, &TTowerFundReceiveRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerFundBuyNotify_descriptor_, &TTowerFundBuyNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fTowerFund_2eproto() {
  delete TTowerFundGetInfoRsp::default_instance_;
  delete TTowerFundGetInfoRsp_reflection_;
  delete TTowerFundSingleInfo::default_instance_;
  delete TTowerFundSingleInfo_reflection_;
  delete TTowerFundReceiveRewardReq::default_instance_;
  delete TTowerFundReceiveRewardReq_reflection_;
  delete TTowerFundBuyNotify::default_instance_;
  delete TTowerFundBuyNotify_reflection_;
}

void protobuf_AddDesc_net_2fTowerFund_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/TowerFund.proto\022\002pb\"X\n\024TTowerFundG"
    "etInfoRsp\022.\n\014TowerFundArr\030\001 \003(\0132\030.pb.TTo"
    "werFundSingleInfo\022\020\n\010OpenTime\030\002 \001(\004\"Y\n\024T"
    "TowerFundSingleInfo\022\023\n\013TowerFundId\030\001 \001(\r"
    "\022\017\n\007BuyTime\030\002 \001(\004\022\033\n\023ReceivedRewardIndex"
    "\030\003 \003(\r\"F\n\032TTowerFundReceiveRewardReq\022\023\n\013"
    "TowerFundId\030\001 \001(\r\022\023\n\013RewardIndex\030\002 \001(\r\";"
    "\n\023TTowerFundBuyNotify\022\023\n\013TowerFundId\030\001 \001"
    "(\r\022\017\n\007BuyTime\030\002 \001(\004", 339);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/TowerFund.proto", &protobuf_RegisterTypes);
  TTowerFundGetInfoRsp::default_instance_ = new TTowerFundGetInfoRsp();
  TTowerFundSingleInfo::default_instance_ = new TTowerFundSingleInfo();
  TTowerFundReceiveRewardReq::default_instance_ = new TTowerFundReceiveRewardReq();
  TTowerFundBuyNotify::default_instance_ = new TTowerFundBuyNotify();
  TTowerFundGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TTowerFundSingleInfo::default_instance_->InitAsDefaultInstance();
  TTowerFundReceiveRewardReq::default_instance_->InitAsDefaultInstance();
  TTowerFundBuyNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fTowerFund_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fTowerFund_2eproto {
  StaticDescriptorInitializer_net_2fTowerFund_2eproto() {
    protobuf_AddDesc_net_2fTowerFund_2eproto();
  }
} static_descriptor_initializer_net_2fTowerFund_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TTowerFundGetInfoRsp::kTowerFundArrFieldNumber;
const int TTowerFundGetInfoRsp::kOpenTimeFieldNumber;
#endif  // !_MSC_VER

TTowerFundGetInfoRsp::TTowerFundGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerFundGetInfoRsp)
}

void TTowerFundGetInfoRsp::InitAsDefaultInstance() {
}

TTowerFundGetInfoRsp::TTowerFundGetInfoRsp(const TTowerFundGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerFundGetInfoRsp)
}

void TTowerFundGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  opentime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerFundGetInfoRsp::~TTowerFundGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerFundGetInfoRsp)
  SharedDtor();
}

void TTowerFundGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerFundGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerFundGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerFundGetInfoRsp_descriptor_;
}

const TTowerFundGetInfoRsp& TTowerFundGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerFund_2eproto();
  return *default_instance_;
}

TTowerFundGetInfoRsp* TTowerFundGetInfoRsp::default_instance_ = NULL;

TTowerFundGetInfoRsp* TTowerFundGetInfoRsp::New() const {
  return new TTowerFundGetInfoRsp;
}

void TTowerFundGetInfoRsp::Clear() {
  opentime_ = GOOGLE_ULONGLONG(0);
  towerfundarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerFundGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerFundGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TTowerFundSingleInfo TowerFundArr = 1;
      case 1: {
        if (tag == 10) {
         parse_TowerFundArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_towerfundarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TowerFundArr;
        if (input->ExpectTag(16)) goto parse_OpenTime;
        break;
      }

      // optional uint64 OpenTime = 2;
      case 2: {
        if (tag == 16) {
         parse_OpenTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerFundGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerFundGetInfoRsp)
  return false;
#undef DO_
}

void TTowerFundGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerFundGetInfoRsp)
  // repeated .pb.TTowerFundSingleInfo TowerFundArr = 1;
  for (int i = 0; i < this->towerfundarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->towerfundarr(i), output);
  }

  // optional uint64 OpenTime = 2;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->opentime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerFundGetInfoRsp)
}

::google::protobuf::uint8* TTowerFundGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerFundGetInfoRsp)
  // repeated .pb.TTowerFundSingleInfo TowerFundArr = 1;
  for (int i = 0; i < this->towerfundarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->towerfundarr(i), target);
  }

  // optional uint64 OpenTime = 2;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->opentime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerFundGetInfoRsp)
  return target;
}

int TTowerFundGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 OpenTime = 2;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opentime());
    }

  }
  // repeated .pb.TTowerFundSingleInfo TowerFundArr = 1;
  total_size += 1 * this->towerfundarr_size();
  for (int i = 0; i < this->towerfundarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->towerfundarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerFundGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerFundGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerFundGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerFundGetInfoRsp::MergeFrom(const TTowerFundGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  towerfundarr_.MergeFrom(from.towerfundarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerFundGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerFundGetInfoRsp::CopyFrom(const TTowerFundGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerFundGetInfoRsp::IsInitialized() const {

  return true;
}

void TTowerFundGetInfoRsp::Swap(TTowerFundGetInfoRsp* other) {
  if (other != this) {
    towerfundarr_.Swap(&other->towerfundarr_);
    std::swap(opentime_, other->opentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerFundGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerFundGetInfoRsp_descriptor_;
  metadata.reflection = TTowerFundGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerFundSingleInfo::kTowerFundIdFieldNumber;
const int TTowerFundSingleInfo::kBuyTimeFieldNumber;
const int TTowerFundSingleInfo::kReceivedRewardIndexFieldNumber;
#endif  // !_MSC_VER

TTowerFundSingleInfo::TTowerFundSingleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerFundSingleInfo)
}

void TTowerFundSingleInfo::InitAsDefaultInstance() {
}

TTowerFundSingleInfo::TTowerFundSingleInfo(const TTowerFundSingleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerFundSingleInfo)
}

void TTowerFundSingleInfo::SharedCtor() {
  _cached_size_ = 0;
  towerfundid_ = 0u;
  buytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerFundSingleInfo::~TTowerFundSingleInfo() {
  // @@protoc_insertion_point(destructor:pb.TTowerFundSingleInfo)
  SharedDtor();
}

void TTowerFundSingleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerFundSingleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerFundSingleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerFundSingleInfo_descriptor_;
}

const TTowerFundSingleInfo& TTowerFundSingleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerFund_2eproto();
  return *default_instance_;
}

TTowerFundSingleInfo* TTowerFundSingleInfo::default_instance_ = NULL;

TTowerFundSingleInfo* TTowerFundSingleInfo::New() const {
  return new TTowerFundSingleInfo;
}

void TTowerFundSingleInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    towerfundid_ = 0u;
    buytime_ = GOOGLE_ULONGLONG(0);
  }
  receivedrewardindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerFundSingleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerFundSingleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TowerFundId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerfundid_)));
          set_has_towerfundid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyTime;
        break;
      }

      // optional uint64 BuyTime = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReceivedRewardIndex;
        break;
      }

      // repeated uint32 ReceivedRewardIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_ReceivedRewardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_receivedrewardindex())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_receivedrewardindex())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReceivedRewardIndex;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerFundSingleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerFundSingleInfo)
  return false;
#undef DO_
}

void TTowerFundSingleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerFundSingleInfo)
  // optional uint32 TowerFundId = 1;
  if (has_towerfundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->towerfundid(), output);
  }

  // optional uint64 BuyTime = 2;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buytime(), output);
  }

  // repeated uint32 ReceivedRewardIndex = 3;
  for (int i = 0; i < this->receivedrewardindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->receivedrewardindex(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerFundSingleInfo)
}

::google::protobuf::uint8* TTowerFundSingleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerFundSingleInfo)
  // optional uint32 TowerFundId = 1;
  if (has_towerfundid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->towerfundid(), target);
  }

  // optional uint64 BuyTime = 2;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buytime(), target);
  }

  // repeated uint32 ReceivedRewardIndex = 3;
  for (int i = 0; i < this->receivedrewardindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->receivedrewardindex(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerFundSingleInfo)
  return target;
}

int TTowerFundSingleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TowerFundId = 1;
    if (has_towerfundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerfundid());
    }

    // optional uint64 BuyTime = 2;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buytime());
    }

  }
  // repeated uint32 ReceivedRewardIndex = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->receivedrewardindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->receivedrewardindex(i));
    }
    total_size += 1 * this->receivedrewardindex_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerFundSingleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerFundSingleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerFundSingleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerFundSingleInfo::MergeFrom(const TTowerFundSingleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  receivedrewardindex_.MergeFrom(from.receivedrewardindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerfundid()) {
      set_towerfundid(from.towerfundid());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerFundSingleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerFundSingleInfo::CopyFrom(const TTowerFundSingleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerFundSingleInfo::IsInitialized() const {

  return true;
}

void TTowerFundSingleInfo::Swap(TTowerFundSingleInfo* other) {
  if (other != this) {
    std::swap(towerfundid_, other->towerfundid_);
    std::swap(buytime_, other->buytime_);
    receivedrewardindex_.Swap(&other->receivedrewardindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerFundSingleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerFundSingleInfo_descriptor_;
  metadata.reflection = TTowerFundSingleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerFundReceiveRewardReq::kTowerFundIdFieldNumber;
const int TTowerFundReceiveRewardReq::kRewardIndexFieldNumber;
#endif  // !_MSC_VER

TTowerFundReceiveRewardReq::TTowerFundReceiveRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerFundReceiveRewardReq)
}

void TTowerFundReceiveRewardReq::InitAsDefaultInstance() {
}

TTowerFundReceiveRewardReq::TTowerFundReceiveRewardReq(const TTowerFundReceiveRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerFundReceiveRewardReq)
}

void TTowerFundReceiveRewardReq::SharedCtor() {
  _cached_size_ = 0;
  towerfundid_ = 0u;
  rewardindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerFundReceiveRewardReq::~TTowerFundReceiveRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TTowerFundReceiveRewardReq)
  SharedDtor();
}

void TTowerFundReceiveRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerFundReceiveRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerFundReceiveRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerFundReceiveRewardReq_descriptor_;
}

const TTowerFundReceiveRewardReq& TTowerFundReceiveRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerFund_2eproto();
  return *default_instance_;
}

TTowerFundReceiveRewardReq* TTowerFundReceiveRewardReq::default_instance_ = NULL;

TTowerFundReceiveRewardReq* TTowerFundReceiveRewardReq::New() const {
  return new TTowerFundReceiveRewardReq;
}

void TTowerFundReceiveRewardReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerFundReceiveRewardReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(towerfundid_, rewardindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerFundReceiveRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerFundReceiveRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TowerFundId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerfundid_)));
          set_has_towerfundid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RewardIndex;
        break;
      }

      // optional uint32 RewardIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardindex_)));
          set_has_rewardindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerFundReceiveRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerFundReceiveRewardReq)
  return false;
#undef DO_
}

void TTowerFundReceiveRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerFundReceiveRewardReq)
  // optional uint32 TowerFundId = 1;
  if (has_towerfundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->towerfundid(), output);
  }

  // optional uint32 RewardIndex = 2;
  if (has_rewardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rewardindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerFundReceiveRewardReq)
}

::google::protobuf::uint8* TTowerFundReceiveRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerFundReceiveRewardReq)
  // optional uint32 TowerFundId = 1;
  if (has_towerfundid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->towerfundid(), target);
  }

  // optional uint32 RewardIndex = 2;
  if (has_rewardindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rewardindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerFundReceiveRewardReq)
  return target;
}

int TTowerFundReceiveRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TowerFundId = 1;
    if (has_towerfundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerfundid());
    }

    // optional uint32 RewardIndex = 2;
    if (has_rewardindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerFundReceiveRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerFundReceiveRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerFundReceiveRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerFundReceiveRewardReq::MergeFrom(const TTowerFundReceiveRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerfundid()) {
      set_towerfundid(from.towerfundid());
    }
    if (from.has_rewardindex()) {
      set_rewardindex(from.rewardindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerFundReceiveRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerFundReceiveRewardReq::CopyFrom(const TTowerFundReceiveRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerFundReceiveRewardReq::IsInitialized() const {

  return true;
}

void TTowerFundReceiveRewardReq::Swap(TTowerFundReceiveRewardReq* other) {
  if (other != this) {
    std::swap(towerfundid_, other->towerfundid_);
    std::swap(rewardindex_, other->rewardindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerFundReceiveRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerFundReceiveRewardReq_descriptor_;
  metadata.reflection = TTowerFundReceiveRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerFundBuyNotify::kTowerFundIdFieldNumber;
const int TTowerFundBuyNotify::kBuyTimeFieldNumber;
#endif  // !_MSC_VER

TTowerFundBuyNotify::TTowerFundBuyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerFundBuyNotify)
}

void TTowerFundBuyNotify::InitAsDefaultInstance() {
}

TTowerFundBuyNotify::TTowerFundBuyNotify(const TTowerFundBuyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerFundBuyNotify)
}

void TTowerFundBuyNotify::SharedCtor() {
  _cached_size_ = 0;
  towerfundid_ = 0u;
  buytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerFundBuyNotify::~TTowerFundBuyNotify() {
  // @@protoc_insertion_point(destructor:pb.TTowerFundBuyNotify)
  SharedDtor();
}

void TTowerFundBuyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerFundBuyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerFundBuyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerFundBuyNotify_descriptor_;
}

const TTowerFundBuyNotify& TTowerFundBuyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerFund_2eproto();
  return *default_instance_;
}

TTowerFundBuyNotify* TTowerFundBuyNotify::default_instance_ = NULL;

TTowerFundBuyNotify* TTowerFundBuyNotify::New() const {
  return new TTowerFundBuyNotify;
}

void TTowerFundBuyNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerFundBuyNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buytime_, towerfundid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerFundBuyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerFundBuyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TowerFundId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerfundid_)));
          set_has_towerfundid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyTime;
        break;
      }

      // optional uint64 BuyTime = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerFundBuyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerFundBuyNotify)
  return false;
#undef DO_
}

void TTowerFundBuyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerFundBuyNotify)
  // optional uint32 TowerFundId = 1;
  if (has_towerfundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->towerfundid(), output);
  }

  // optional uint64 BuyTime = 2;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerFundBuyNotify)
}

::google::protobuf::uint8* TTowerFundBuyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerFundBuyNotify)
  // optional uint32 TowerFundId = 1;
  if (has_towerfundid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->towerfundid(), target);
  }

  // optional uint64 BuyTime = 2;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerFundBuyNotify)
  return target;
}

int TTowerFundBuyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TowerFundId = 1;
    if (has_towerfundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerfundid());
    }

    // optional uint64 BuyTime = 2;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerFundBuyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerFundBuyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerFundBuyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerFundBuyNotify::MergeFrom(const TTowerFundBuyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerfundid()) {
      set_towerfundid(from.towerfundid());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerFundBuyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerFundBuyNotify::CopyFrom(const TTowerFundBuyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerFundBuyNotify::IsInitialized() const {

  return true;
}

void TTowerFundBuyNotify::Swap(TTowerFundBuyNotify* other) {
  if (other != this) {
    std::swap(towerfundid_, other->towerfundid_);
    std::swap(buytime_, other->buytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerFundBuyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerFundBuyNotify_descriptor_;
  metadata.reflection = TTowerFundBuyNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
