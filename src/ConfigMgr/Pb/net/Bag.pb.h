// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Bag.proto

#ifndef PROTOBUF_net_2fBag_2eproto__INCLUDED
#define PROTOBUF_net_2fBag_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Common.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fBag_2eproto();
void protobuf_AssignDesc_net_2fBag_2eproto();
void protobuf_ShutdownFile_net_2fBag_2eproto();

class TBagData;
class TBagUseReq;
class TBagUseRsp;
class TBagCombineFragReq;
class TBagCombineFragRsp;
class TBagNotify;
class TBagGetOtherTreasureInfoReq;
class TBagGetOtherTreasureInfoRsp;
class TBagGetTreasureInfoFromOtherServerReq;
class TBagGetTreasureInfoFromOtherServerRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TBagData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Bag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBagData : public ::google::protobuf::Message {
 public:
  TBagData();
  virtual ~TBagData();

  TBagData(const TBagData& from);

  inline TBagData& operator=(const TBagData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBagData& default_instance();

  void Swap(TBagData* other);

  // implements Message ----------------------------------------------

  TBagData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBagData& from);
  void MergeFrom(const TBagData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TSimpleItem PropArr = 1;
  inline int proparr_size() const;
  inline void clear_proparr();
  static const int kPropArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>proparr</name>
  		<replaceName>PropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_proparr</name>
  		<replaceName>PropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_proparr</name>
  		<replaceName>PropArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_proparr</name>
  		<replaceName>PropArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>proparr_size</name>
  		<replaceName>PropArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& proparr(int index) const;
  inline ::pb::TSimpleItem* mutable_proparr(int index);
  inline ::pb::TSimpleItem* add_proparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      proparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_proparr();

  // repeated .pb.TArmItem ArmArr = 2;
  inline int armarr_size() const;
  inline void clear_armarr();
  static const int kArmArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>armarr</name>
  		<replaceName>ArmArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_armarr</name>
  		<replaceName>ArmArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_armarr</name>
  		<replaceName>ArmArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armarr</name>
  		<replaceName>ArmArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>armarr_size</name>
  		<replaceName>ArmArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmItem& armarr(int index) const;
  inline ::pb::TArmItem* mutable_armarr(int index);
  inline ::pb::TArmItem* add_armarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmItem >&
      armarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmItem >*
      mutable_armarr();

  // repeated .pb.TAccessoryItem AccessoryArr = 3;
  inline int accessoryarr_size() const;
  inline void clear_accessoryarr();
  static const int kAccessoryArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>accessoryarr</name>
  		<replaceName>AccessoryArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_accessoryarr</name>
  		<replaceName>AccessoryArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_accessoryarr</name>
  		<replaceName>AccessoryArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_accessoryarr</name>
  		<replaceName>AccessoryArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>accessoryarr_size</name>
  		<replaceName>AccessoryArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAccessoryItem& accessoryarr(int index) const;
  inline ::pb::TAccessoryItem* mutable_accessoryarr(int index);
  inline ::pb::TAccessoryItem* add_accessoryarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAccessoryItem >&
      accessoryarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAccessoryItem >*
      mutable_accessoryarr();

  // repeated .pb.TSimpleItem ArmFragArr = 4;
  inline int armfragarr_size() const;
  inline void clear_armfragarr();
  static const int kArmFragArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>armfragarr</name>
  		<replaceName>ArmFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_armfragarr</name>
  		<replaceName>ArmFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_armfragarr</name>
  		<replaceName>ArmFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armfragarr</name>
  		<replaceName>ArmFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>armfragarr_size</name>
  		<replaceName>ArmFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& armfragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_armfragarr(int index);
  inline ::pb::TSimpleItem* add_armfragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      armfragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_armfragarr();

  // repeated .pb.TSimpleItem AccessoryFragArr = 5;
  inline int accessoryfragarr_size() const;
  inline void clear_accessoryfragarr();
  static const int kAccessoryFragArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>accessoryfragarr</name>
  		<replaceName>AccessoryFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_accessoryfragarr</name>
  		<replaceName>AccessoryFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_accessoryfragarr</name>
  		<replaceName>AccessoryFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_accessoryfragarr</name>
  		<replaceName>AccessoryFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>accessoryfragarr_size</name>
  		<replaceName>AccessoryFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& accessoryfragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_accessoryfragarr(int index);
  inline ::pb::TSimpleItem* add_accessoryfragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      accessoryfragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_accessoryfragarr();

  // repeated .pb.TSimpleItem HeroFragArr = 6;
  inline int herofragarr_size() const;
  inline void clear_herofragarr();
  static const int kHeroFragArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>herofragarr</name>
  		<replaceName>HeroFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_herofragarr</name>
  		<replaceName>HeroFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_herofragarr</name>
  		<replaceName>HeroFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_herofragarr</name>
  		<replaceName>HeroFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>herofragarr_size</name>
  		<replaceName>HeroFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& herofragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_herofragarr(int index);
  inline ::pb::TSimpleItem* add_herofragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      herofragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_herofragarr();

  // repeated .pb.TSimpleItem PromoteFragArr = 7;
  inline int promotefragarr_size() const;
  inline void clear_promotefragarr();
  static const int kPromoteFragArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>promotefragarr</name>
  		<replaceName>PromoteFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_promotefragarr</name>
  		<replaceName>PromoteFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_promotefragarr</name>
  		<replaceName>PromoteFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_promotefragarr</name>
  		<replaceName>PromoteFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>promotefragarr_size</name>
  		<replaceName>PromoteFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& promotefragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_promotefragarr(int index);
  inline ::pb::TSimpleItem* add_promotefragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      promotefragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_promotefragarr();

  // repeated .pb.TSimpleItem PromoteArr = 8;
  inline int promotearr_size() const;
  inline void clear_promotearr();
  static const int kPromoteArrFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>promotearr</name>
  		<replaceName>PromoteArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_promotearr</name>
  		<replaceName>PromoteArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_promotearr</name>
  		<replaceName>PromoteArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_promotearr</name>
  		<replaceName>PromoteArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>promotearr_size</name>
  		<replaceName>PromoteArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& promotearr(int index) const;
  inline ::pb::TSimpleItem* mutable_promotearr(int index);
  inline ::pb::TSimpleItem* add_promotearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      promotearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_promotearr();

  // repeated .pb.TSoulItem SoulArr = 9;
  inline int soularr_size() const;
  inline void clear_soularr();
  static const int kSoulArrFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>soularr</name>
  		<replaceName>SoulArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_soularr</name>
  		<replaceName>SoulArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_soularr</name>
  		<replaceName>SoulArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_soularr</name>
  		<replaceName>SoulArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>soularr_size</name>
  		<replaceName>SoulArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSoulItem& soularr(int index) const;
  inline ::pb::TSoulItem* mutable_soularr(int index);
  inline ::pb::TSoulItem* add_soularr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSoulItem >&
      soularr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSoulItem >*
      mutable_soularr();

  // repeated .pb.TSimpleItem SynthetiseArr = 10;
  inline int synthetisearr_size() const;
  inline void clear_synthetisearr();
  static const int kSynthetiseArrFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>synthetisearr</name>
  		<replaceName>SynthetiseArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_synthetisearr</name>
  		<replaceName>SynthetiseArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_synthetisearr</name>
  		<replaceName>SynthetiseArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_synthetisearr</name>
  		<replaceName>SynthetiseArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>synthetisearr_size</name>
  		<replaceName>SynthetiseArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& synthetisearr(int index) const;
  inline ::pb::TSimpleItem* mutable_synthetisearr(int index);
  inline ::pb::TSimpleItem* add_synthetisearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      synthetisearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_synthetisearr();

  // repeated .pb.TMountEquipItem MountEquipArr = 11;
  inline int mountequiparr_size() const;
  inline void clear_mountequiparr();
  static const int kMountEquipArrFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>mountequiparr</name>
  		<replaceName>MountEquipArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_mountequiparr</name>
  		<replaceName>MountEquipArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_mountequiparr</name>
  		<replaceName>MountEquipArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mountequiparr</name>
  		<replaceName>MountEquipArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mountequiparr_size</name>
  		<replaceName>MountEquipArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TMountEquipItem& mountequiparr(int index) const;
  inline ::pb::TMountEquipItem* mutable_mountequiparr(int index);
  inline ::pb::TMountEquipItem* add_mountequiparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TMountEquipItem >&
      mountequiparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TMountEquipItem >*
      mutable_mountequiparr();

  // repeated .pb.TExclEquipItem ExclEquipArr = 12;
  inline int exclequiparr_size() const;
  inline void clear_exclequiparr();
  static const int kExclEquipArrFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>exclequiparr</name>
  		<replaceName>ExclEquipArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_exclequiparr</name>
  		<replaceName>ExclEquipArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_exclequiparr</name>
  		<replaceName>ExclEquipArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exclequiparr</name>
  		<replaceName>ExclEquipArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>exclequiparr_size</name>
  		<replaceName>ExclEquipArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExclEquipItem& exclequiparr(int index) const;
  inline ::pb::TExclEquipItem* mutable_exclequiparr(int index);
  inline ::pb::TExclEquipItem* add_exclequiparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TExclEquipItem >&
      exclequiparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TExclEquipItem >*
      mutable_exclequiparr();

  // repeated .pb.TSimpleItem BeastFragArr = 13;
  inline int beastfragarr_size() const;
  inline void clear_beastfragarr();
  static const int kBeastFragArrFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>beastfragarr</name>
  		<replaceName>BeastFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_beastfragarr</name>
  		<replaceName>BeastFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_beastfragarr</name>
  		<replaceName>BeastFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastfragarr</name>
  		<replaceName>BeastFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>beastfragarr_size</name>
  		<replaceName>BeastFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& beastfragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_beastfragarr(int index);
  inline ::pb::TSimpleItem* add_beastfragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      beastfragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_beastfragarr();

  // repeated .pb.TBeastArmItem BeastArmArr = 14;
  inline int beastarmarr_size() const;
  inline void clear_beastarmarr();
  static const int kBeastArmArrFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>beastarmarr</name>
  		<replaceName>BeastArmArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_beastarmarr</name>
  		<replaceName>BeastArmArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_beastarmarr</name>
  		<replaceName>BeastArmArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastarmarr</name>
  		<replaceName>BeastArmArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>beastarmarr_size</name>
  		<replaceName>BeastArmArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastArmItem& beastarmarr(int index) const;
  inline ::pb::TBeastArmItem* mutable_beastarmarr(int index);
  inline ::pb::TBeastArmItem* add_beastarmarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmItem >&
      beastarmarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmItem >*
      mutable_beastarmarr();

  // repeated .pb.TSimpleItem HeroSoulArr = 15;
  inline int herosoularr_size() const;
  inline void clear_herosoularr();
  static const int kHeroSoulArrFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>herosoularr</name>
  		<replaceName>HeroSoulArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_herosoularr</name>
  		<replaceName>HeroSoulArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_herosoularr</name>
  		<replaceName>HeroSoulArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_herosoularr</name>
  		<replaceName>HeroSoulArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>herosoularr_size</name>
  		<replaceName>HeroSoulArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& herosoularr(int index) const;
  inline ::pb::TSimpleItem* mutable_herosoularr(int index);
  inline ::pb::TSimpleItem* add_herosoularr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      herosoularr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_herosoularr();

  // optional uint64 UpdateTime = 16;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 updatetime() const;
  inline void set_updatetime(::google::protobuf::uint64 value);

  // repeated .pb.TTreasureItem TreasureArr = 17;
  inline int treasurearr_size() const;
  inline void clear_treasurearr();
  static const int kTreasureArrFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>treasurearr</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_treasurearr</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_treasurearr</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_treasurearr</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>treasurearr_size</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTreasureItem& treasurearr(int index) const;
  inline ::pb::TTreasureItem* mutable_treasurearr(int index);
  inline ::pb::TTreasureItem* add_treasurearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem >&
      treasurearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem >*
      mutable_treasurearr();

  // repeated .pb.TSimpleItem TreasureFragArr = 18;
  inline int treasurefragarr_size() const;
  inline void clear_treasurefragarr();
  static const int kTreasureFragArrFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>treasurefragarr</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_treasurefragarr</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_treasurefragarr</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_treasurefragarr</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>treasurefragarr_size</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& treasurefragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_treasurefragarr(int index);
  inline ::pb::TSimpleItem* add_treasurefragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      treasurefragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_treasurefragarr();

  // repeated .pb.TSilkBagItem SilkBagArr = 19;
  inline int silkbagarr_size() const;
  inline void clear_silkbagarr();
  static const int kSilkBagArrFieldNumber = 19;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>silkbagarr</name>
  		<replaceName>SilkBagArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_silkbagarr</name>
  		<replaceName>SilkBagArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_silkbagarr</name>
  		<replaceName>SilkBagArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_silkbagarr</name>
  		<replaceName>SilkBagArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>silkbagarr_size</name>
  		<replaceName>SilkBagArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSilkBagItem& silkbagarr(int index) const;
  inline ::pb::TSilkBagItem* mutable_silkbagarr(int index);
  inline ::pb::TSilkBagItem* add_silkbagarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagItem >&
      silkbagarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagItem >*
      mutable_silkbagarr();

  // repeated .pb.TSimpleItem SilkBagFragArr = 20;
  inline int silkbagfragarr_size() const;
  inline void clear_silkbagfragarr();
  static const int kSilkBagFragArrFieldNumber = 20;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>silkbagfragarr</name>
  		<replaceName>SilkBagFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_silkbagfragarr</name>
  		<replaceName>SilkBagFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_silkbagfragarr</name>
  		<replaceName>SilkBagFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_silkbagfragarr</name>
  		<replaceName>SilkBagFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>silkbagfragarr_size</name>
  		<replaceName>SilkBagFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& silkbagfragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_silkbagfragarr(int index);
  inline ::pb::TSimpleItem* add_silkbagfragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      silkbagfragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_silkbagfragarr();

  // repeated .pb.TDecorationBagItem DecorationArr = 21;
  inline int decorationarr_size() const;
  inline void clear_decorationarr();
  static const int kDecorationArrFieldNumber = 21;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>decorationarr</name>
  		<replaceName>DecorationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_decorationarr</name>
  		<replaceName>DecorationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_decorationarr</name>
  		<replaceName>DecorationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_decorationarr</name>
  		<replaceName>DecorationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>decorationarr_size</name>
  		<replaceName>DecorationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDecorationBagItem& decorationarr(int index) const;
  inline ::pb::TDecorationBagItem* mutable_decorationarr(int index);
  inline ::pb::TDecorationBagItem* add_decorationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDecorationBagItem >&
      decorationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDecorationBagItem >*
      mutable_decorationarr();

  // repeated .pb.TSimpleItem WarRidingFragArr = 22;
  inline int warridingfragarr_size() const;
  inline void clear_warridingfragarr();
  static const int kWarRidingFragArrFieldNumber = 22;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>warridingfragarr</name>
  		<replaceName>WarRidingFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_warridingfragarr</name>
  		<replaceName>WarRidingFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_warridingfragarr</name>
  		<replaceName>WarRidingFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_warridingfragarr</name>
  		<replaceName>WarRidingFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>warridingfragarr_size</name>
  		<replaceName>WarRidingFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& warridingfragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_warridingfragarr(int index);
  inline ::pb::TSimpleItem* add_warridingfragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      warridingfragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_warridingfragarr();

  // repeated .pb.TSimpleItem ArtifactFragArr = 23;
  inline int artifactfragarr_size() const;
  inline void clear_artifactfragarr();
  static const int kArtifactFragArrFieldNumber = 23;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>artifactfragarr</name>
  		<replaceName>ArtifactFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_artifactfragarr</name>
  		<replaceName>ArtifactFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_artifactfragarr</name>
  		<replaceName>ArtifactFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_artifactfragarr</name>
  		<replaceName>ArtifactFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>artifactfragarr_size</name>
  		<replaceName>ArtifactFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& artifactfragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_artifactfragarr(int index);
  inline ::pb::TSimpleItem* add_artifactfragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      artifactfragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_artifactfragarr();

  // repeated .pb.TDivineBagItem TDivineBagArr = 24;
  inline int tdivinebagarr_size() const;
  inline void clear_tdivinebagarr();
  static const int kTDivineBagArrFieldNumber = 24;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>tdivinebagarr</name>
  		<replaceName>TDivineBagArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_tdivinebagarr</name>
  		<replaceName>TDivineBagArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_tdivinebagarr</name>
  		<replaceName>TDivineBagArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tdivinebagarr</name>
  		<replaceName>TDivineBagArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>tdivinebagarr_size</name>
  		<replaceName>TDivineBagArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDivineBagItem& tdivinebagarr(int index) const;
  inline ::pb::TDivineBagItem* mutable_tdivinebagarr(int index);
  inline ::pb::TDivineBagItem* add_tdivinebagarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDivineBagItem >&
      tdivinebagarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDivineBagItem >*
      mutable_tdivinebagarr();

  // repeated .pb.TSimpleItem TDivineFragArr = 25;
  inline int tdivinefragarr_size() const;
  inline void clear_tdivinefragarr();
  static const int kTDivineFragArrFieldNumber = 25;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>tdivinefragarr</name>
  		<replaceName>TDivineFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_tdivinefragarr</name>
  		<replaceName>TDivineFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_tdivinefragarr</name>
  		<replaceName>TDivineFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tdivinefragarr</name>
  		<replaceName>TDivineFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>tdivinefragarr_size</name>
  		<replaceName>TDivineFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& tdivinefragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_tdivinefragarr(int index);
  inline ::pb::TSimpleItem* add_tdivinefragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      tdivinefragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_tdivinefragarr();

  // repeated .pb.TForceSoulItem ForceSoulArr = 26;
  inline int forcesoularr_size() const;
  inline void clear_forcesoularr();
  static const int kForceSoulArrFieldNumber = 26;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>forcesoularr</name>
  		<replaceName>ForceSoulArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_forcesoularr</name>
  		<replaceName>ForceSoulArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_forcesoularr</name>
  		<replaceName>ForceSoulArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_forcesoularr</name>
  		<replaceName>ForceSoulArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>forcesoularr_size</name>
  		<replaceName>ForceSoulArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TForceSoulItem& forcesoularr(int index) const;
  inline ::pb::TForceSoulItem* mutable_forcesoularr(int index);
  inline ::pb::TForceSoulItem* add_forcesoularr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TForceSoulItem >&
      forcesoularr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TForceSoulItem >*
      mutable_forcesoularr();

  // repeated .pb.TSimpleItem FashionFragmentArr = 27;
  inline int fashionfragmentarr_size() const;
  inline void clear_fashionfragmentarr();
  static const int kFashionFragmentArrFieldNumber = 27;
  /*FOR2LUA
  <Record>
  	<name>TBagData</name>
  	<Function>
  		<name>fashionfragmentarr</name>
  		<replaceName>FashionFragmentArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fashionfragmentarr</name>
  		<replaceName>FashionFragmentArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fashionfragmentarr</name>
  		<replaceName>FashionFragmentArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fashionfragmentarr</name>
  		<replaceName>FashionFragmentArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fashionfragmentarr_size</name>
  		<replaceName>FashionFragmentArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& fashionfragmentarr(int index) const;
  inline ::pb::TSimpleItem* mutable_fashionfragmentarr(int index);
  inline ::pb::TSimpleItem* add_fashionfragmentarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      fashionfragmentarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_fashionfragmentarr();

  // @@protoc_insertion_point(class_scope:pb.TBagData)
 private:
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > proparr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmItem > armarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAccessoryItem > accessoryarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > armfragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > accessoryfragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > herofragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > promotefragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > promotearr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSoulItem > soularr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > synthetisearr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TMountEquipItem > mountequiparr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TExclEquipItem > exclequiparr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > beastfragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmItem > beastarmarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > herosoularr_;
  ::google::protobuf::uint64 updatetime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem > treasurearr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > treasurefragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagItem > silkbagarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > silkbagfragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDecorationBagItem > decorationarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > warridingfragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > artifactfragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDivineBagItem > tdivinebagarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > tdivinefragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TForceSoulItem > forcesoularr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > fashionfragmentarr_;
  friend void  protobuf_AddDesc_net_2fBag_2eproto();
  friend void protobuf_AssignDesc_net_2fBag_2eproto();
  friend void protobuf_ShutdownFile_net_2fBag_2eproto();

  void InitAsDefaultInstance();
  static TBagData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBagUseReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Bag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBagUseReq : public ::google::protobuf::Message {
 public:
  TBagUseReq();
  virtual ~TBagUseReq();

  TBagUseReq(const TBagUseReq& from);

  inline TBagUseReq& operator=(const TBagUseReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBagUseReq& default_instance();

  void Swap(TBagUseReq* other);

  // implements Message ----------------------------------------------

  TBagUseReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBagUseReq& from);
  void MergeFrom(const TBagUseReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBagUseReq</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 Tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBagUseReq</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 Num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBagUseReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 ChooseIdx = 4;
  inline bool has_chooseidx() const;
  inline void clear_chooseidx();
  static const int kChooseIdxFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBagUseReq</name>
  	<Function>
  		<name>chooseidx</name>
  		<replaceName>ChooseIdx</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chooseidx</name>
  		<replaceName>ChooseIdx</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chooseidx</name>
  		<replaceName>ChooseIdx</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 chooseidx() const;
  inline void set_chooseidx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TBagUseReq)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_chooseidx();
  inline void clear_has_chooseidx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 chooseidx_;
  friend void  protobuf_AddDesc_net_2fBag_2eproto();
  friend void protobuf_AssignDesc_net_2fBag_2eproto();
  friend void protobuf_ShutdownFile_net_2fBag_2eproto();

  void InitAsDefaultInstance();
  static TBagUseReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBagUseRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Bag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBagUseRsp : public ::google::protobuf::Message {
 public:
  TBagUseRsp();
  virtual ~TBagUseRsp();

  TBagUseRsp(const TBagUseRsp& from);

  inline TBagUseRsp& operator=(const TBagUseRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBagUseRsp& default_instance();

  void Swap(TBagUseRsp* other);

  // implements Message ----------------------------------------------

  TBagUseRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBagUseRsp& from);
  void MergeFrom(const TBagUseRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArr = 1;
  inline int droparr_size() const;
  inline void clear_droparr();
  static const int kDropArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBagUseRsp</name>
  	<Function>
  		<name>droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparr_size</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparr(int index) const;
  inline ::pb::TCommonReward* mutable_droparr(int index);
  inline ::pb::TCommonReward* add_droparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparr();

  // optional bool UseSuccess = 2;
  inline bool has_usesuccess() const;
  inline void clear_usesuccess();
  static const int kUseSuccessFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBagUseRsp</name>
  	<Function>
  		<name>usesuccess</name>
  		<replaceName>UseSuccess</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usesuccess</name>
  		<replaceName>UseSuccess</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usesuccess</name>
  		<replaceName>UseSuccess</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool usesuccess() const;
  inline void set_usesuccess(bool value);

  // @@protoc_insertion_point(class_scope:pb.TBagUseRsp)
 private:
  inline void set_has_usesuccess();
  inline void clear_has_usesuccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparr_;
  bool usesuccess_;
  friend void  protobuf_AddDesc_net_2fBag_2eproto();
  friend void protobuf_AssignDesc_net_2fBag_2eproto();
  friend void protobuf_ShutdownFile_net_2fBag_2eproto();

  void InitAsDefaultInstance();
  static TBagUseRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBagCombineFragReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Bag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBagCombineFragReq : public ::google::protobuf::Message {
 public:
  TBagCombineFragReq();
  virtual ~TBagCombineFragReq();

  TBagCombineFragReq(const TBagCombineFragReq& from);

  inline TBagCombineFragReq& operator=(const TBagCombineFragReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBagCombineFragReq& default_instance();

  void Swap(TBagCombineFragReq* other);

  // implements Message ----------------------------------------------

  TBagCombineFragReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBagCombineFragReq& from);
  void MergeFrom(const TBagCombineFragReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBagCombineFragReq</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 Tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBagCombineFragReq</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 FragNum = 3;
  inline bool has_fragnum() const;
  inline void clear_fragnum();
  static const int kFragNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBagCombineFragReq</name>
  	<Function>
  		<name>fragnum</name>
  		<replaceName>FragNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fragnum</name>
  		<replaceName>FragNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fragnum</name>
  		<replaceName>FragNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 fragnum() const;
  inline void set_fragnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TBagCombineFragReq)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_fragnum();
  inline void clear_has_fragnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 fragnum_;
  friend void  protobuf_AddDesc_net_2fBag_2eproto();
  friend void protobuf_AssignDesc_net_2fBag_2eproto();
  friend void protobuf_ShutdownFile_net_2fBag_2eproto();

  void InitAsDefaultInstance();
  static TBagCombineFragReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBagCombineFragRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Bag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBagCombineFragRsp : public ::google::protobuf::Message {
 public:
  TBagCombineFragRsp();
  virtual ~TBagCombineFragRsp();

  TBagCombineFragRsp(const TBagCombineFragRsp& from);

  inline TBagCombineFragRsp& operator=(const TBagCombineFragRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBagCombineFragRsp& default_instance();

  void Swap(TBagCombineFragRsp* other);

  // implements Message ----------------------------------------------

  TBagCombineFragRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBagCombineFragRsp& from);
  void MergeFrom(const TBagCombineFragRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward SynthetiseArr = 1;
  inline int synthetisearr_size() const;
  inline void clear_synthetisearr();
  static const int kSynthetiseArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBagCombineFragRsp</name>
  	<Function>
  		<name>synthetisearr</name>
  		<replaceName>SynthetiseArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_synthetisearr</name>
  		<replaceName>SynthetiseArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_synthetisearr</name>
  		<replaceName>SynthetiseArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_synthetisearr</name>
  		<replaceName>SynthetiseArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>synthetisearr_size</name>
  		<replaceName>SynthetiseArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& synthetisearr(int index) const;
  inline ::pb::TCommonReward* mutable_synthetisearr(int index);
  inline ::pb::TCommonReward* add_synthetisearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      synthetisearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_synthetisearr();

  // @@protoc_insertion_point(class_scope:pb.TBagCombineFragRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > synthetisearr_;
  friend void  protobuf_AddDesc_net_2fBag_2eproto();
  friend void protobuf_AssignDesc_net_2fBag_2eproto();
  friend void protobuf_ShutdownFile_net_2fBag_2eproto();

  void InitAsDefaultInstance();
  static TBagCombineFragRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBagNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Bag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBagNotify : public ::google::protobuf::Message {
 public:
  TBagNotify();
  virtual ~TBagNotify();

  TBagNotify(const TBagNotify& from);

  inline TBagNotify& operator=(const TBagNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBagNotify& default_instance();

  void Swap(TBagNotify* other);

  // implements Message ----------------------------------------------

  TBagNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBagNotify& from);
  void MergeFrom(const TBagNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TSimpleItem PropArr = 1;
  inline int proparr_size() const;
  inline void clear_proparr();
  static const int kPropArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>proparr</name>
  		<replaceName>PropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_proparr</name>
  		<replaceName>PropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_proparr</name>
  		<replaceName>PropArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_proparr</name>
  		<replaceName>PropArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>proparr_size</name>
  		<replaceName>PropArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& proparr(int index) const;
  inline ::pb::TSimpleItem* mutable_proparr(int index);
  inline ::pb::TSimpleItem* add_proparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      proparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_proparr();

  // repeated .pb.TArmItem ArmArr = 2;
  inline int armarr_size() const;
  inline void clear_armarr();
  static const int kArmArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>armarr</name>
  		<replaceName>ArmArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_armarr</name>
  		<replaceName>ArmArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_armarr</name>
  		<replaceName>ArmArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armarr</name>
  		<replaceName>ArmArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>armarr_size</name>
  		<replaceName>ArmArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmItem& armarr(int index) const;
  inline ::pb::TArmItem* mutable_armarr(int index);
  inline ::pb::TArmItem* add_armarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmItem >&
      armarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmItem >*
      mutable_armarr();

  // repeated .pb.TAccessoryItem AccessoryArr = 3;
  inline int accessoryarr_size() const;
  inline void clear_accessoryarr();
  static const int kAccessoryArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>accessoryarr</name>
  		<replaceName>AccessoryArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_accessoryarr</name>
  		<replaceName>AccessoryArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_accessoryarr</name>
  		<replaceName>AccessoryArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_accessoryarr</name>
  		<replaceName>AccessoryArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>accessoryarr_size</name>
  		<replaceName>AccessoryArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAccessoryItem& accessoryarr(int index) const;
  inline ::pb::TAccessoryItem* mutable_accessoryarr(int index);
  inline ::pb::TAccessoryItem* add_accessoryarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAccessoryItem >&
      accessoryarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAccessoryItem >*
      mutable_accessoryarr();

  // repeated .pb.TSimpleItem ArmFragArr = 4;
  inline int armfragarr_size() const;
  inline void clear_armfragarr();
  static const int kArmFragArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>armfragarr</name>
  		<replaceName>ArmFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_armfragarr</name>
  		<replaceName>ArmFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_armfragarr</name>
  		<replaceName>ArmFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armfragarr</name>
  		<replaceName>ArmFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>armfragarr_size</name>
  		<replaceName>ArmFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& armfragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_armfragarr(int index);
  inline ::pb::TSimpleItem* add_armfragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      armfragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_armfragarr();

  // repeated .pb.TSimpleItem AccessoryFragArr = 5;
  inline int accessoryfragarr_size() const;
  inline void clear_accessoryfragarr();
  static const int kAccessoryFragArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>accessoryfragarr</name>
  		<replaceName>AccessoryFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_accessoryfragarr</name>
  		<replaceName>AccessoryFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_accessoryfragarr</name>
  		<replaceName>AccessoryFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_accessoryfragarr</name>
  		<replaceName>AccessoryFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>accessoryfragarr_size</name>
  		<replaceName>AccessoryFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& accessoryfragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_accessoryfragarr(int index);
  inline ::pb::TSimpleItem* add_accessoryfragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      accessoryfragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_accessoryfragarr();

  // repeated .pb.TSimpleItem HeroFragArr = 6;
  inline int herofragarr_size() const;
  inline void clear_herofragarr();
  static const int kHeroFragArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>herofragarr</name>
  		<replaceName>HeroFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_herofragarr</name>
  		<replaceName>HeroFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_herofragarr</name>
  		<replaceName>HeroFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_herofragarr</name>
  		<replaceName>HeroFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>herofragarr_size</name>
  		<replaceName>HeroFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& herofragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_herofragarr(int index);
  inline ::pb::TSimpleItem* add_herofragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      herofragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_herofragarr();

  // repeated .pb.TSimpleItem PromoteFragArr = 7;
  inline int promotefragarr_size() const;
  inline void clear_promotefragarr();
  static const int kPromoteFragArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>promotefragarr</name>
  		<replaceName>PromoteFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_promotefragarr</name>
  		<replaceName>PromoteFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_promotefragarr</name>
  		<replaceName>PromoteFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_promotefragarr</name>
  		<replaceName>PromoteFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>promotefragarr_size</name>
  		<replaceName>PromoteFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& promotefragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_promotefragarr(int index);
  inline ::pb::TSimpleItem* add_promotefragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      promotefragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_promotefragarr();

  // repeated .pb.TSimpleItem PromoteArr = 8;
  inline int promotearr_size() const;
  inline void clear_promotearr();
  static const int kPromoteArrFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>promotearr</name>
  		<replaceName>PromoteArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_promotearr</name>
  		<replaceName>PromoteArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_promotearr</name>
  		<replaceName>PromoteArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_promotearr</name>
  		<replaceName>PromoteArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>promotearr_size</name>
  		<replaceName>PromoteArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& promotearr(int index) const;
  inline ::pb::TSimpleItem* mutable_promotearr(int index);
  inline ::pb::TSimpleItem* add_promotearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      promotearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_promotearr();

  // repeated .pb.TSoulItem SoulArr = 9;
  inline int soularr_size() const;
  inline void clear_soularr();
  static const int kSoulArrFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>soularr</name>
  		<replaceName>SoulArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_soularr</name>
  		<replaceName>SoulArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_soularr</name>
  		<replaceName>SoulArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_soularr</name>
  		<replaceName>SoulArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>soularr_size</name>
  		<replaceName>SoulArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSoulItem& soularr(int index) const;
  inline ::pb::TSoulItem* mutable_soularr(int index);
  inline ::pb::TSoulItem* add_soularr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSoulItem >&
      soularr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSoulItem >*
      mutable_soularr();

  // repeated .pb.TSimpleItem SynthetiseArr = 10;
  inline int synthetisearr_size() const;
  inline void clear_synthetisearr();
  static const int kSynthetiseArrFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>synthetisearr</name>
  		<replaceName>SynthetiseArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_synthetisearr</name>
  		<replaceName>SynthetiseArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_synthetisearr</name>
  		<replaceName>SynthetiseArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_synthetisearr</name>
  		<replaceName>SynthetiseArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>synthetisearr_size</name>
  		<replaceName>SynthetiseArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& synthetisearr(int index) const;
  inline ::pb::TSimpleItem* mutable_synthetisearr(int index);
  inline ::pb::TSimpleItem* add_synthetisearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      synthetisearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_synthetisearr();

  // repeated .pb.TMountEquipItem MountEquipArr = 11;
  inline int mountequiparr_size() const;
  inline void clear_mountequiparr();
  static const int kMountEquipArrFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>mountequiparr</name>
  		<replaceName>MountEquipArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_mountequiparr</name>
  		<replaceName>MountEquipArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_mountequiparr</name>
  		<replaceName>MountEquipArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mountequiparr</name>
  		<replaceName>MountEquipArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mountequiparr_size</name>
  		<replaceName>MountEquipArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TMountEquipItem& mountequiparr(int index) const;
  inline ::pb::TMountEquipItem* mutable_mountequiparr(int index);
  inline ::pb::TMountEquipItem* add_mountequiparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TMountEquipItem >&
      mountequiparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TMountEquipItem >*
      mutable_mountequiparr();

  // repeated .pb.TExclEquipItem ExclEquipArr = 12;
  inline int exclequiparr_size() const;
  inline void clear_exclequiparr();
  static const int kExclEquipArrFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>exclequiparr</name>
  		<replaceName>ExclEquipArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_exclequiparr</name>
  		<replaceName>ExclEquipArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_exclequiparr</name>
  		<replaceName>ExclEquipArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exclequiparr</name>
  		<replaceName>ExclEquipArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>exclequiparr_size</name>
  		<replaceName>ExclEquipArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExclEquipItem& exclequiparr(int index) const;
  inline ::pb::TExclEquipItem* mutable_exclequiparr(int index);
  inline ::pb::TExclEquipItem* add_exclequiparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TExclEquipItem >&
      exclequiparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TExclEquipItem >*
      mutable_exclequiparr();

  // repeated .pb.TSimpleItem BeastFragArr = 13;
  inline int beastfragarr_size() const;
  inline void clear_beastfragarr();
  static const int kBeastFragArrFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>beastfragarr</name>
  		<replaceName>BeastFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_beastfragarr</name>
  		<replaceName>BeastFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_beastfragarr</name>
  		<replaceName>BeastFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastfragarr</name>
  		<replaceName>BeastFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>beastfragarr_size</name>
  		<replaceName>BeastFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& beastfragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_beastfragarr(int index);
  inline ::pb::TSimpleItem* add_beastfragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      beastfragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_beastfragarr();

  // repeated .pb.TBeastArmItem BeastArmArr = 14;
  inline int beastarmarr_size() const;
  inline void clear_beastarmarr();
  static const int kBeastArmArrFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>beastarmarr</name>
  		<replaceName>BeastArmArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_beastarmarr</name>
  		<replaceName>BeastArmArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_beastarmarr</name>
  		<replaceName>BeastArmArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastarmarr</name>
  		<replaceName>BeastArmArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>beastarmarr_size</name>
  		<replaceName>BeastArmArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastArmItem& beastarmarr(int index) const;
  inline ::pb::TBeastArmItem* mutable_beastarmarr(int index);
  inline ::pb::TBeastArmItem* add_beastarmarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmItem >&
      beastarmarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmItem >*
      mutable_beastarmarr();

  // repeated .pb.TSimpleItem HeroSoulArr = 15;
  inline int herosoularr_size() const;
  inline void clear_herosoularr();
  static const int kHeroSoulArrFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>herosoularr</name>
  		<replaceName>HeroSoulArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_herosoularr</name>
  		<replaceName>HeroSoulArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_herosoularr</name>
  		<replaceName>HeroSoulArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_herosoularr</name>
  		<replaceName>HeroSoulArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>herosoularr_size</name>
  		<replaceName>HeroSoulArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& herosoularr(int index) const;
  inline ::pb::TSimpleItem* mutable_herosoularr(int index);
  inline ::pb::TSimpleItem* add_herosoularr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      herosoularr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_herosoularr();

  // optional uint64 UpdateTime = 16;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 updatetime() const;
  inline void set_updatetime(::google::protobuf::uint64 value);

  // repeated .pb.TTreasureItem TreasureArr = 17;
  inline int treasurearr_size() const;
  inline void clear_treasurearr();
  static const int kTreasureArrFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>treasurearr</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_treasurearr</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_treasurearr</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_treasurearr</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>treasurearr_size</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTreasureItem& treasurearr(int index) const;
  inline ::pb::TTreasureItem* mutable_treasurearr(int index);
  inline ::pb::TTreasureItem* add_treasurearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem >&
      treasurearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem >*
      mutable_treasurearr();

  // repeated .pb.TSimpleItem TreasureFragArr = 18;
  inline int treasurefragarr_size() const;
  inline void clear_treasurefragarr();
  static const int kTreasureFragArrFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>treasurefragarr</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_treasurefragarr</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_treasurefragarr</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_treasurefragarr</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>treasurefragarr_size</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& treasurefragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_treasurefragarr(int index);
  inline ::pb::TSimpleItem* add_treasurefragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      treasurefragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_treasurefragarr();

  // repeated .pb.TSilkBagItem SilkBagArr = 19;
  inline int silkbagarr_size() const;
  inline void clear_silkbagarr();
  static const int kSilkBagArrFieldNumber = 19;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>silkbagarr</name>
  		<replaceName>SilkBagArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_silkbagarr</name>
  		<replaceName>SilkBagArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_silkbagarr</name>
  		<replaceName>SilkBagArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_silkbagarr</name>
  		<replaceName>SilkBagArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>silkbagarr_size</name>
  		<replaceName>SilkBagArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSilkBagItem& silkbagarr(int index) const;
  inline ::pb::TSilkBagItem* mutable_silkbagarr(int index);
  inline ::pb::TSilkBagItem* add_silkbagarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagItem >&
      silkbagarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagItem >*
      mutable_silkbagarr();

  // repeated .pb.TSimpleItem SilkBagFragArr = 20;
  inline int silkbagfragarr_size() const;
  inline void clear_silkbagfragarr();
  static const int kSilkBagFragArrFieldNumber = 20;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>silkbagfragarr</name>
  		<replaceName>SilkBagFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_silkbagfragarr</name>
  		<replaceName>SilkBagFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_silkbagfragarr</name>
  		<replaceName>SilkBagFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_silkbagfragarr</name>
  		<replaceName>SilkBagFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>silkbagfragarr_size</name>
  		<replaceName>SilkBagFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& silkbagfragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_silkbagfragarr(int index);
  inline ::pb::TSimpleItem* add_silkbagfragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      silkbagfragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_silkbagfragarr();

  // repeated .pb.TDecorationBagItem DecorationArr = 21;
  inline int decorationarr_size() const;
  inline void clear_decorationarr();
  static const int kDecorationArrFieldNumber = 21;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>decorationarr</name>
  		<replaceName>DecorationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_decorationarr</name>
  		<replaceName>DecorationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_decorationarr</name>
  		<replaceName>DecorationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_decorationarr</name>
  		<replaceName>DecorationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>decorationarr_size</name>
  		<replaceName>DecorationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDecorationBagItem& decorationarr(int index) const;
  inline ::pb::TDecorationBagItem* mutable_decorationarr(int index);
  inline ::pb::TDecorationBagItem* add_decorationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDecorationBagItem >&
      decorationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDecorationBagItem >*
      mutable_decorationarr();

  // repeated .pb.TSimpleItem WarRidingFragArr = 22;
  inline int warridingfragarr_size() const;
  inline void clear_warridingfragarr();
  static const int kWarRidingFragArrFieldNumber = 22;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>warridingfragarr</name>
  		<replaceName>WarRidingFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_warridingfragarr</name>
  		<replaceName>WarRidingFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_warridingfragarr</name>
  		<replaceName>WarRidingFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_warridingfragarr</name>
  		<replaceName>WarRidingFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>warridingfragarr_size</name>
  		<replaceName>WarRidingFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& warridingfragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_warridingfragarr(int index);
  inline ::pb::TSimpleItem* add_warridingfragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      warridingfragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_warridingfragarr();

  // repeated .pb.TSimpleItem ArtifactFragArr = 23;
  inline int artifactfragarr_size() const;
  inline void clear_artifactfragarr();
  static const int kArtifactFragArrFieldNumber = 23;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>artifactfragarr</name>
  		<replaceName>ArtifactFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_artifactfragarr</name>
  		<replaceName>ArtifactFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_artifactfragarr</name>
  		<replaceName>ArtifactFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_artifactfragarr</name>
  		<replaceName>ArtifactFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>artifactfragarr_size</name>
  		<replaceName>ArtifactFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& artifactfragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_artifactfragarr(int index);
  inline ::pb::TSimpleItem* add_artifactfragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      artifactfragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_artifactfragarr();

  // repeated .pb.TDivineBagItem TDivineBagArr = 24;
  inline int tdivinebagarr_size() const;
  inline void clear_tdivinebagarr();
  static const int kTDivineBagArrFieldNumber = 24;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>tdivinebagarr</name>
  		<replaceName>TDivineBagArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_tdivinebagarr</name>
  		<replaceName>TDivineBagArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_tdivinebagarr</name>
  		<replaceName>TDivineBagArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tdivinebagarr</name>
  		<replaceName>TDivineBagArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>tdivinebagarr_size</name>
  		<replaceName>TDivineBagArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDivineBagItem& tdivinebagarr(int index) const;
  inline ::pb::TDivineBagItem* mutable_tdivinebagarr(int index);
  inline ::pb::TDivineBagItem* add_tdivinebagarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDivineBagItem >&
      tdivinebagarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDivineBagItem >*
      mutable_tdivinebagarr();

  // repeated .pb.TSimpleItem TDivineFragArr = 25;
  inline int tdivinefragarr_size() const;
  inline void clear_tdivinefragarr();
  static const int kTDivineFragArrFieldNumber = 25;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>tdivinefragarr</name>
  		<replaceName>TDivineFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_tdivinefragarr</name>
  		<replaceName>TDivineFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_tdivinefragarr</name>
  		<replaceName>TDivineFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tdivinefragarr</name>
  		<replaceName>TDivineFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>tdivinefragarr_size</name>
  		<replaceName>TDivineFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& tdivinefragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_tdivinefragarr(int index);
  inline ::pb::TSimpleItem* add_tdivinefragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      tdivinefragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_tdivinefragarr();

  // repeated .pb.TForceSoulItem ForceSoulArr = 26;
  inline int forcesoularr_size() const;
  inline void clear_forcesoularr();
  static const int kForceSoulArrFieldNumber = 26;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>forcesoularr</name>
  		<replaceName>ForceSoulArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_forcesoularr</name>
  		<replaceName>ForceSoulArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_forcesoularr</name>
  		<replaceName>ForceSoulArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_forcesoularr</name>
  		<replaceName>ForceSoulArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>forcesoularr_size</name>
  		<replaceName>ForceSoulArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TForceSoulItem& forcesoularr(int index) const;
  inline ::pb::TForceSoulItem* mutable_forcesoularr(int index);
  inline ::pb::TForceSoulItem* add_forcesoularr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TForceSoulItem >&
      forcesoularr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TForceSoulItem >*
      mutable_forcesoularr();

  // repeated .pb.TSimpleItem FashionFragmentArr = 27;
  inline int fashionfragmentarr_size() const;
  inline void clear_fashionfragmentarr();
  static const int kFashionFragmentArrFieldNumber = 27;
  /*FOR2LUA
  <Record>
  	<name>TBagNotify</name>
  	<Function>
  		<name>fashionfragmentarr</name>
  		<replaceName>FashionFragmentArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fashionfragmentarr</name>
  		<replaceName>FashionFragmentArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fashionfragmentarr</name>
  		<replaceName>FashionFragmentArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fashionfragmentarr</name>
  		<replaceName>FashionFragmentArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fashionfragmentarr_size</name>
  		<replaceName>FashionFragmentArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& fashionfragmentarr(int index) const;
  inline ::pb::TSimpleItem* mutable_fashionfragmentarr(int index);
  inline ::pb::TSimpleItem* add_fashionfragmentarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      fashionfragmentarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_fashionfragmentarr();

  // @@protoc_insertion_point(class_scope:pb.TBagNotify)
 private:
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > proparr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmItem > armarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAccessoryItem > accessoryarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > armfragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > accessoryfragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > herofragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > promotefragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > promotearr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSoulItem > soularr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > synthetisearr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TMountEquipItem > mountequiparr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TExclEquipItem > exclequiparr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > beastfragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmItem > beastarmarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > herosoularr_;
  ::google::protobuf::uint64 updatetime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem > treasurearr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > treasurefragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagItem > silkbagarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > silkbagfragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDecorationBagItem > decorationarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > warridingfragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > artifactfragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDivineBagItem > tdivinebagarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > tdivinefragarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TForceSoulItem > forcesoularr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > fashionfragmentarr_;
  friend void  protobuf_AddDesc_net_2fBag_2eproto();
  friend void protobuf_AssignDesc_net_2fBag_2eproto();
  friend void protobuf_ShutdownFile_net_2fBag_2eproto();

  void InitAsDefaultInstance();
  static TBagNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBagGetOtherTreasureInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Bag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBagGetOtherTreasureInfoReq : public ::google::protobuf::Message {
 public:
  TBagGetOtherTreasureInfoReq();
  virtual ~TBagGetOtherTreasureInfoReq();

  TBagGetOtherTreasureInfoReq(const TBagGetOtherTreasureInfoReq& from);

  inline TBagGetOtherTreasureInfoReq& operator=(const TBagGetOtherTreasureInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBagGetOtherTreasureInfoReq& default_instance();

  void Swap(TBagGetOtherTreasureInfoReq* other);

  // implements Message ----------------------------------------------

  TBagGetOtherTreasureInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBagGetOtherTreasureInfoReq& from);
  void MergeFrom(const TBagGetOtherTreasureInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBagGetOtherTreasureInfoReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBagGetOtherTreasureInfoReq</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TBagGetOtherTreasureInfoReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* serverid_;
  friend void  protobuf_AddDesc_net_2fBag_2eproto();
  friend void protobuf_AssignDesc_net_2fBag_2eproto();
  friend void protobuf_ShutdownFile_net_2fBag_2eproto();

  void InitAsDefaultInstance();
  static TBagGetOtherTreasureInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBagGetOtherTreasureInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Bag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBagGetOtherTreasureInfoRsp : public ::google::protobuf::Message {
 public:
  TBagGetOtherTreasureInfoRsp();
  virtual ~TBagGetOtherTreasureInfoRsp();

  TBagGetOtherTreasureInfoRsp(const TBagGetOtherTreasureInfoRsp& from);

  inline TBagGetOtherTreasureInfoRsp& operator=(const TBagGetOtherTreasureInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBagGetOtherTreasureInfoRsp& default_instance();

  void Swap(TBagGetOtherTreasureInfoRsp* other);

  // implements Message ----------------------------------------------

  TBagGetOtherTreasureInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBagGetOtherTreasureInfoRsp& from);
  void MergeFrom(const TBagGetOtherTreasureInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTreasureItem TreasureArr = 1;
  inline int treasurearr_size() const;
  inline void clear_treasurearr();
  static const int kTreasureArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBagGetOtherTreasureInfoRsp</name>
  	<Function>
  		<name>treasurearr</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_treasurearr</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_treasurearr</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_treasurearr</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>treasurearr_size</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTreasureItem& treasurearr(int index) const;
  inline ::pb::TTreasureItem* mutable_treasurearr(int index);
  inline ::pb::TTreasureItem* add_treasurearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem >&
      treasurearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem >*
      mutable_treasurearr();

  // repeated .pb.TSimpleItem TreasureFragArr = 2;
  inline int treasurefragarr_size() const;
  inline void clear_treasurefragarr();
  static const int kTreasureFragArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBagGetOtherTreasureInfoRsp</name>
  	<Function>
  		<name>treasurefragarr</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_treasurefragarr</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_treasurefragarr</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_treasurefragarr</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>treasurefragarr_size</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& treasurefragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_treasurefragarr(int index);
  inline ::pb::TSimpleItem* add_treasurefragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      treasurefragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_treasurefragarr();

  // @@protoc_insertion_point(class_scope:pb.TBagGetOtherTreasureInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem > treasurearr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > treasurefragarr_;
  friend void  protobuf_AddDesc_net_2fBag_2eproto();
  friend void protobuf_AssignDesc_net_2fBag_2eproto();
  friend void protobuf_ShutdownFile_net_2fBag_2eproto();

  void InitAsDefaultInstance();
  static TBagGetOtherTreasureInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBagGetTreasureInfoFromOtherServerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Bag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBagGetTreasureInfoFromOtherServerReq : public ::google::protobuf::Message {
 public:
  TBagGetTreasureInfoFromOtherServerReq();
  virtual ~TBagGetTreasureInfoFromOtherServerReq();

  TBagGetTreasureInfoFromOtherServerReq(const TBagGetTreasureInfoFromOtherServerReq& from);

  inline TBagGetTreasureInfoFromOtherServerReq& operator=(const TBagGetTreasureInfoFromOtherServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBagGetTreasureInfoFromOtherServerReq& default_instance();

  void Swap(TBagGetTreasureInfoFromOtherServerReq* other);

  // implements Message ----------------------------------------------

  TBagGetTreasureInfoFromOtherServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBagGetTreasureInfoFromOtherServerReq& from);
  void MergeFrom(const TBagGetTreasureInfoFromOtherServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBagGetTreasureInfoFromOtherServerReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TBagGetTreasureInfoFromOtherServerReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fBag_2eproto();
  friend void protobuf_AssignDesc_net_2fBag_2eproto();
  friend void protobuf_ShutdownFile_net_2fBag_2eproto();

  void InitAsDefaultInstance();
  static TBagGetTreasureInfoFromOtherServerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBagGetTreasureInfoFromOtherServerRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Bag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBagGetTreasureInfoFromOtherServerRsp : public ::google::protobuf::Message {
 public:
  TBagGetTreasureInfoFromOtherServerRsp();
  virtual ~TBagGetTreasureInfoFromOtherServerRsp();

  TBagGetTreasureInfoFromOtherServerRsp(const TBagGetTreasureInfoFromOtherServerRsp& from);

  inline TBagGetTreasureInfoFromOtherServerRsp& operator=(const TBagGetTreasureInfoFromOtherServerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBagGetTreasureInfoFromOtherServerRsp& default_instance();

  void Swap(TBagGetTreasureInfoFromOtherServerRsp* other);

  // implements Message ----------------------------------------------

  TBagGetTreasureInfoFromOtherServerRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBagGetTreasureInfoFromOtherServerRsp& from);
  void MergeFrom(const TBagGetTreasureInfoFromOtherServerRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTreasureItem TreasureArr = 1;
  inline int treasurearr_size() const;
  inline void clear_treasurearr();
  static const int kTreasureArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBagGetTreasureInfoFromOtherServerRsp</name>
  	<Function>
  		<name>treasurearr</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_treasurearr</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_treasurearr</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_treasurearr</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>treasurearr_size</name>
  		<replaceName>TreasureArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTreasureItem& treasurearr(int index) const;
  inline ::pb::TTreasureItem* mutable_treasurearr(int index);
  inline ::pb::TTreasureItem* add_treasurearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem >&
      treasurearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem >*
      mutable_treasurearr();

  // repeated .pb.TSimpleItem TreasureFragArr = 2;
  inline int treasurefragarr_size() const;
  inline void clear_treasurefragarr();
  static const int kTreasureFragArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBagGetTreasureInfoFromOtherServerRsp</name>
  	<Function>
  		<name>treasurefragarr</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_treasurefragarr</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_treasurefragarr</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_treasurefragarr</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>treasurefragarr_size</name>
  		<replaceName>TreasureFragArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& treasurefragarr(int index) const;
  inline ::pb::TSimpleItem* mutable_treasurefragarr(int index);
  inline ::pb::TSimpleItem* add_treasurefragarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      treasurefragarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_treasurefragarr();

  // @@protoc_insertion_point(class_scope:pb.TBagGetTreasureInfoFromOtherServerRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem > treasurearr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > treasurefragarr_;
  friend void  protobuf_AddDesc_net_2fBag_2eproto();
  friend void protobuf_AssignDesc_net_2fBag_2eproto();
  friend void protobuf_ShutdownFile_net_2fBag_2eproto();

  void InitAsDefaultInstance();
  static TBagGetTreasureInfoFromOtherServerRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TBagData

// repeated .pb.TSimpleItem PropArr = 1;
inline int TBagData::proparr_size() const {
  return proparr_.size();
}
inline void TBagData::clear_proparr() {
  proparr_.Clear();
}
inline const ::pb::TSimpleItem& TBagData::proparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.PropArr)
  return proparr_.Get(index);
}
inline ::pb::TSimpleItem* TBagData::mutable_proparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.PropArr)
  return proparr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagData::add_proparr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.PropArr)
  return proparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagData::proparr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.PropArr)
  return proparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagData::mutable_proparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.PropArr)
  return &proparr_;
}

// repeated .pb.TArmItem ArmArr = 2;
inline int TBagData::armarr_size() const {
  return armarr_.size();
}
inline void TBagData::clear_armarr() {
  armarr_.Clear();
}
inline const ::pb::TArmItem& TBagData::armarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.ArmArr)
  return armarr_.Get(index);
}
inline ::pb::TArmItem* TBagData::mutable_armarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.ArmArr)
  return armarr_.Mutable(index);
}
inline ::pb::TArmItem* TBagData::add_armarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.ArmArr)
  return armarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmItem >&
TBagData::armarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.ArmArr)
  return armarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmItem >*
TBagData::mutable_armarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.ArmArr)
  return &armarr_;
}

// repeated .pb.TAccessoryItem AccessoryArr = 3;
inline int TBagData::accessoryarr_size() const {
  return accessoryarr_.size();
}
inline void TBagData::clear_accessoryarr() {
  accessoryarr_.Clear();
}
inline const ::pb::TAccessoryItem& TBagData::accessoryarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.AccessoryArr)
  return accessoryarr_.Get(index);
}
inline ::pb::TAccessoryItem* TBagData::mutable_accessoryarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.AccessoryArr)
  return accessoryarr_.Mutable(index);
}
inline ::pb::TAccessoryItem* TBagData::add_accessoryarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.AccessoryArr)
  return accessoryarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAccessoryItem >&
TBagData::accessoryarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.AccessoryArr)
  return accessoryarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAccessoryItem >*
TBagData::mutable_accessoryarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.AccessoryArr)
  return &accessoryarr_;
}

// repeated .pb.TSimpleItem ArmFragArr = 4;
inline int TBagData::armfragarr_size() const {
  return armfragarr_.size();
}
inline void TBagData::clear_armfragarr() {
  armfragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagData::armfragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.ArmFragArr)
  return armfragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagData::mutable_armfragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.ArmFragArr)
  return armfragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagData::add_armfragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.ArmFragArr)
  return armfragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagData::armfragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.ArmFragArr)
  return armfragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagData::mutable_armfragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.ArmFragArr)
  return &armfragarr_;
}

// repeated .pb.TSimpleItem AccessoryFragArr = 5;
inline int TBagData::accessoryfragarr_size() const {
  return accessoryfragarr_.size();
}
inline void TBagData::clear_accessoryfragarr() {
  accessoryfragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagData::accessoryfragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.AccessoryFragArr)
  return accessoryfragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagData::mutable_accessoryfragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.AccessoryFragArr)
  return accessoryfragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagData::add_accessoryfragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.AccessoryFragArr)
  return accessoryfragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagData::accessoryfragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.AccessoryFragArr)
  return accessoryfragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagData::mutable_accessoryfragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.AccessoryFragArr)
  return &accessoryfragarr_;
}

// repeated .pb.TSimpleItem HeroFragArr = 6;
inline int TBagData::herofragarr_size() const {
  return herofragarr_.size();
}
inline void TBagData::clear_herofragarr() {
  herofragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagData::herofragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.HeroFragArr)
  return herofragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagData::mutable_herofragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.HeroFragArr)
  return herofragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagData::add_herofragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.HeroFragArr)
  return herofragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagData::herofragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.HeroFragArr)
  return herofragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagData::mutable_herofragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.HeroFragArr)
  return &herofragarr_;
}

// repeated .pb.TSimpleItem PromoteFragArr = 7;
inline int TBagData::promotefragarr_size() const {
  return promotefragarr_.size();
}
inline void TBagData::clear_promotefragarr() {
  promotefragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagData::promotefragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.PromoteFragArr)
  return promotefragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagData::mutable_promotefragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.PromoteFragArr)
  return promotefragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagData::add_promotefragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.PromoteFragArr)
  return promotefragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagData::promotefragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.PromoteFragArr)
  return promotefragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagData::mutable_promotefragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.PromoteFragArr)
  return &promotefragarr_;
}

// repeated .pb.TSimpleItem PromoteArr = 8;
inline int TBagData::promotearr_size() const {
  return promotearr_.size();
}
inline void TBagData::clear_promotearr() {
  promotearr_.Clear();
}
inline const ::pb::TSimpleItem& TBagData::promotearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.PromoteArr)
  return promotearr_.Get(index);
}
inline ::pb::TSimpleItem* TBagData::mutable_promotearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.PromoteArr)
  return promotearr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagData::add_promotearr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.PromoteArr)
  return promotearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagData::promotearr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.PromoteArr)
  return promotearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagData::mutable_promotearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.PromoteArr)
  return &promotearr_;
}

// repeated .pb.TSoulItem SoulArr = 9;
inline int TBagData::soularr_size() const {
  return soularr_.size();
}
inline void TBagData::clear_soularr() {
  soularr_.Clear();
}
inline const ::pb::TSoulItem& TBagData::soularr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.SoulArr)
  return soularr_.Get(index);
}
inline ::pb::TSoulItem* TBagData::mutable_soularr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.SoulArr)
  return soularr_.Mutable(index);
}
inline ::pb::TSoulItem* TBagData::add_soularr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.SoulArr)
  return soularr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSoulItem >&
TBagData::soularr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.SoulArr)
  return soularr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSoulItem >*
TBagData::mutable_soularr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.SoulArr)
  return &soularr_;
}

// repeated .pb.TSimpleItem SynthetiseArr = 10;
inline int TBagData::synthetisearr_size() const {
  return synthetisearr_.size();
}
inline void TBagData::clear_synthetisearr() {
  synthetisearr_.Clear();
}
inline const ::pb::TSimpleItem& TBagData::synthetisearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.SynthetiseArr)
  return synthetisearr_.Get(index);
}
inline ::pb::TSimpleItem* TBagData::mutable_synthetisearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.SynthetiseArr)
  return synthetisearr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagData::add_synthetisearr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.SynthetiseArr)
  return synthetisearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagData::synthetisearr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.SynthetiseArr)
  return synthetisearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagData::mutable_synthetisearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.SynthetiseArr)
  return &synthetisearr_;
}

// repeated .pb.TMountEquipItem MountEquipArr = 11;
inline int TBagData::mountequiparr_size() const {
  return mountequiparr_.size();
}
inline void TBagData::clear_mountequiparr() {
  mountequiparr_.Clear();
}
inline const ::pb::TMountEquipItem& TBagData::mountequiparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.MountEquipArr)
  return mountequiparr_.Get(index);
}
inline ::pb::TMountEquipItem* TBagData::mutable_mountequiparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.MountEquipArr)
  return mountequiparr_.Mutable(index);
}
inline ::pb::TMountEquipItem* TBagData::add_mountequiparr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.MountEquipArr)
  return mountequiparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TMountEquipItem >&
TBagData::mountequiparr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.MountEquipArr)
  return mountequiparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TMountEquipItem >*
TBagData::mutable_mountequiparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.MountEquipArr)
  return &mountequiparr_;
}

// repeated .pb.TExclEquipItem ExclEquipArr = 12;
inline int TBagData::exclequiparr_size() const {
  return exclequiparr_.size();
}
inline void TBagData::clear_exclequiparr() {
  exclequiparr_.Clear();
}
inline const ::pb::TExclEquipItem& TBagData::exclequiparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.ExclEquipArr)
  return exclequiparr_.Get(index);
}
inline ::pb::TExclEquipItem* TBagData::mutable_exclequiparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.ExclEquipArr)
  return exclequiparr_.Mutable(index);
}
inline ::pb::TExclEquipItem* TBagData::add_exclequiparr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.ExclEquipArr)
  return exclequiparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TExclEquipItem >&
TBagData::exclequiparr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.ExclEquipArr)
  return exclequiparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TExclEquipItem >*
TBagData::mutable_exclequiparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.ExclEquipArr)
  return &exclequiparr_;
}

// repeated .pb.TSimpleItem BeastFragArr = 13;
inline int TBagData::beastfragarr_size() const {
  return beastfragarr_.size();
}
inline void TBagData::clear_beastfragarr() {
  beastfragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagData::beastfragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.BeastFragArr)
  return beastfragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagData::mutable_beastfragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.BeastFragArr)
  return beastfragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagData::add_beastfragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.BeastFragArr)
  return beastfragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagData::beastfragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.BeastFragArr)
  return beastfragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagData::mutable_beastfragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.BeastFragArr)
  return &beastfragarr_;
}

// repeated .pb.TBeastArmItem BeastArmArr = 14;
inline int TBagData::beastarmarr_size() const {
  return beastarmarr_.size();
}
inline void TBagData::clear_beastarmarr() {
  beastarmarr_.Clear();
}
inline const ::pb::TBeastArmItem& TBagData::beastarmarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.BeastArmArr)
  return beastarmarr_.Get(index);
}
inline ::pb::TBeastArmItem* TBagData::mutable_beastarmarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.BeastArmArr)
  return beastarmarr_.Mutable(index);
}
inline ::pb::TBeastArmItem* TBagData::add_beastarmarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.BeastArmArr)
  return beastarmarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmItem >&
TBagData::beastarmarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.BeastArmArr)
  return beastarmarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmItem >*
TBagData::mutable_beastarmarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.BeastArmArr)
  return &beastarmarr_;
}

// repeated .pb.TSimpleItem HeroSoulArr = 15;
inline int TBagData::herosoularr_size() const {
  return herosoularr_.size();
}
inline void TBagData::clear_herosoularr() {
  herosoularr_.Clear();
}
inline const ::pb::TSimpleItem& TBagData::herosoularr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.HeroSoulArr)
  return herosoularr_.Get(index);
}
inline ::pb::TSimpleItem* TBagData::mutable_herosoularr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.HeroSoulArr)
  return herosoularr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagData::add_herosoularr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.HeroSoulArr)
  return herosoularr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagData::herosoularr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.HeroSoulArr)
  return herosoularr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagData::mutable_herosoularr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.HeroSoulArr)
  return &herosoularr_;
}

// optional uint64 UpdateTime = 16;
inline bool TBagData::has_updatetime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TBagData::set_has_updatetime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TBagData::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TBagData::clear_updatetime() {
  updatetime_ = GOOGLE_ULONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::uint64 TBagData::updatetime() const {
  // @@protoc_insertion_point(field_get:pb.TBagData.UpdateTime)
  return updatetime_;
}
inline void TBagData::set_updatetime(::google::protobuf::uint64 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBagData.UpdateTime)
}

// repeated .pb.TTreasureItem TreasureArr = 17;
inline int TBagData::treasurearr_size() const {
  return treasurearr_.size();
}
inline void TBagData::clear_treasurearr() {
  treasurearr_.Clear();
}
inline const ::pb::TTreasureItem& TBagData::treasurearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.TreasureArr)
  return treasurearr_.Get(index);
}
inline ::pb::TTreasureItem* TBagData::mutable_treasurearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.TreasureArr)
  return treasurearr_.Mutable(index);
}
inline ::pb::TTreasureItem* TBagData::add_treasurearr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.TreasureArr)
  return treasurearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem >&
TBagData::treasurearr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.TreasureArr)
  return treasurearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem >*
TBagData::mutable_treasurearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.TreasureArr)
  return &treasurearr_;
}

// repeated .pb.TSimpleItem TreasureFragArr = 18;
inline int TBagData::treasurefragarr_size() const {
  return treasurefragarr_.size();
}
inline void TBagData::clear_treasurefragarr() {
  treasurefragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagData::treasurefragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.TreasureFragArr)
  return treasurefragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagData::mutable_treasurefragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.TreasureFragArr)
  return treasurefragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagData::add_treasurefragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.TreasureFragArr)
  return treasurefragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagData::treasurefragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.TreasureFragArr)
  return treasurefragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagData::mutable_treasurefragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.TreasureFragArr)
  return &treasurefragarr_;
}

// repeated .pb.TSilkBagItem SilkBagArr = 19;
inline int TBagData::silkbagarr_size() const {
  return silkbagarr_.size();
}
inline void TBagData::clear_silkbagarr() {
  silkbagarr_.Clear();
}
inline const ::pb::TSilkBagItem& TBagData::silkbagarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.SilkBagArr)
  return silkbagarr_.Get(index);
}
inline ::pb::TSilkBagItem* TBagData::mutable_silkbagarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.SilkBagArr)
  return silkbagarr_.Mutable(index);
}
inline ::pb::TSilkBagItem* TBagData::add_silkbagarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.SilkBagArr)
  return silkbagarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagItem >&
TBagData::silkbagarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.SilkBagArr)
  return silkbagarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagItem >*
TBagData::mutable_silkbagarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.SilkBagArr)
  return &silkbagarr_;
}

// repeated .pb.TSimpleItem SilkBagFragArr = 20;
inline int TBagData::silkbagfragarr_size() const {
  return silkbagfragarr_.size();
}
inline void TBagData::clear_silkbagfragarr() {
  silkbagfragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagData::silkbagfragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.SilkBagFragArr)
  return silkbagfragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagData::mutable_silkbagfragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.SilkBagFragArr)
  return silkbagfragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagData::add_silkbagfragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.SilkBagFragArr)
  return silkbagfragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagData::silkbagfragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.SilkBagFragArr)
  return silkbagfragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagData::mutable_silkbagfragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.SilkBagFragArr)
  return &silkbagfragarr_;
}

// repeated .pb.TDecorationBagItem DecorationArr = 21;
inline int TBagData::decorationarr_size() const {
  return decorationarr_.size();
}
inline void TBagData::clear_decorationarr() {
  decorationarr_.Clear();
}
inline const ::pb::TDecorationBagItem& TBagData::decorationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.DecorationArr)
  return decorationarr_.Get(index);
}
inline ::pb::TDecorationBagItem* TBagData::mutable_decorationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.DecorationArr)
  return decorationarr_.Mutable(index);
}
inline ::pb::TDecorationBagItem* TBagData::add_decorationarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.DecorationArr)
  return decorationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDecorationBagItem >&
TBagData::decorationarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.DecorationArr)
  return decorationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDecorationBagItem >*
TBagData::mutable_decorationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.DecorationArr)
  return &decorationarr_;
}

// repeated .pb.TSimpleItem WarRidingFragArr = 22;
inline int TBagData::warridingfragarr_size() const {
  return warridingfragarr_.size();
}
inline void TBagData::clear_warridingfragarr() {
  warridingfragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagData::warridingfragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.WarRidingFragArr)
  return warridingfragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagData::mutable_warridingfragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.WarRidingFragArr)
  return warridingfragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagData::add_warridingfragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.WarRidingFragArr)
  return warridingfragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagData::warridingfragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.WarRidingFragArr)
  return warridingfragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagData::mutable_warridingfragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.WarRidingFragArr)
  return &warridingfragarr_;
}

// repeated .pb.TSimpleItem ArtifactFragArr = 23;
inline int TBagData::artifactfragarr_size() const {
  return artifactfragarr_.size();
}
inline void TBagData::clear_artifactfragarr() {
  artifactfragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagData::artifactfragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.ArtifactFragArr)
  return artifactfragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagData::mutable_artifactfragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.ArtifactFragArr)
  return artifactfragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagData::add_artifactfragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.ArtifactFragArr)
  return artifactfragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagData::artifactfragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.ArtifactFragArr)
  return artifactfragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagData::mutable_artifactfragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.ArtifactFragArr)
  return &artifactfragarr_;
}

// repeated .pb.TDivineBagItem TDivineBagArr = 24;
inline int TBagData::tdivinebagarr_size() const {
  return tdivinebagarr_.size();
}
inline void TBagData::clear_tdivinebagarr() {
  tdivinebagarr_.Clear();
}
inline const ::pb::TDivineBagItem& TBagData::tdivinebagarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.TDivineBagArr)
  return tdivinebagarr_.Get(index);
}
inline ::pb::TDivineBagItem* TBagData::mutable_tdivinebagarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.TDivineBagArr)
  return tdivinebagarr_.Mutable(index);
}
inline ::pb::TDivineBagItem* TBagData::add_tdivinebagarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.TDivineBagArr)
  return tdivinebagarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDivineBagItem >&
TBagData::tdivinebagarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.TDivineBagArr)
  return tdivinebagarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDivineBagItem >*
TBagData::mutable_tdivinebagarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.TDivineBagArr)
  return &tdivinebagarr_;
}

// repeated .pb.TSimpleItem TDivineFragArr = 25;
inline int TBagData::tdivinefragarr_size() const {
  return tdivinefragarr_.size();
}
inline void TBagData::clear_tdivinefragarr() {
  tdivinefragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagData::tdivinefragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.TDivineFragArr)
  return tdivinefragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagData::mutable_tdivinefragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.TDivineFragArr)
  return tdivinefragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagData::add_tdivinefragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.TDivineFragArr)
  return tdivinefragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagData::tdivinefragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.TDivineFragArr)
  return tdivinefragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagData::mutable_tdivinefragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.TDivineFragArr)
  return &tdivinefragarr_;
}

// repeated .pb.TForceSoulItem ForceSoulArr = 26;
inline int TBagData::forcesoularr_size() const {
  return forcesoularr_.size();
}
inline void TBagData::clear_forcesoularr() {
  forcesoularr_.Clear();
}
inline const ::pb::TForceSoulItem& TBagData::forcesoularr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.ForceSoulArr)
  return forcesoularr_.Get(index);
}
inline ::pb::TForceSoulItem* TBagData::mutable_forcesoularr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.ForceSoulArr)
  return forcesoularr_.Mutable(index);
}
inline ::pb::TForceSoulItem* TBagData::add_forcesoularr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.ForceSoulArr)
  return forcesoularr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TForceSoulItem >&
TBagData::forcesoularr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.ForceSoulArr)
  return forcesoularr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TForceSoulItem >*
TBagData::mutable_forcesoularr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.ForceSoulArr)
  return &forcesoularr_;
}

// repeated .pb.TSimpleItem FashionFragmentArr = 27;
inline int TBagData::fashionfragmentarr_size() const {
  return fashionfragmentarr_.size();
}
inline void TBagData::clear_fashionfragmentarr() {
  fashionfragmentarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagData::fashionfragmentarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagData.FashionFragmentArr)
  return fashionfragmentarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagData::mutable_fashionfragmentarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagData.FashionFragmentArr)
  return fashionfragmentarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagData::add_fashionfragmentarr() {
  // @@protoc_insertion_point(field_add:pb.TBagData.FashionFragmentArr)
  return fashionfragmentarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagData::fashionfragmentarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagData.FashionFragmentArr)
  return fashionfragmentarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagData::mutable_fashionfragmentarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagData.FashionFragmentArr)
  return &fashionfragmentarr_;
}

// -------------------------------------------------------------------

// TBagUseReq

// optional int32 ItemId = 1;
inline bool TBagUseReq::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBagUseReq::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBagUseReq::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBagUseReq::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 TBagUseReq::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TBagUseReq.ItemId)
  return itemid_;
}
inline void TBagUseReq::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBagUseReq.ItemId)
}

// optional int32 Tid = 2;
inline bool TBagUseReq::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBagUseReq::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBagUseReq::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBagUseReq::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 TBagUseReq::tid() const {
  // @@protoc_insertion_point(field_get:pb.TBagUseReq.Tid)
  return tid_;
}
inline void TBagUseReq::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBagUseReq.Tid)
}

// optional int32 Num = 3;
inline bool TBagUseReq::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBagUseReq::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBagUseReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBagUseReq::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 TBagUseReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TBagUseReq.Num)
  return num_;
}
inline void TBagUseReq::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TBagUseReq.Num)
}

// optional int32 ChooseIdx = 4;
inline bool TBagUseReq::has_chooseidx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBagUseReq::set_has_chooseidx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBagUseReq::clear_has_chooseidx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBagUseReq::clear_chooseidx() {
  chooseidx_ = 0;
  clear_has_chooseidx();
}
inline ::google::protobuf::int32 TBagUseReq::chooseidx() const {
  // @@protoc_insertion_point(field_get:pb.TBagUseReq.ChooseIdx)
  return chooseidx_;
}
inline void TBagUseReq::set_chooseidx(::google::protobuf::int32 value) {
  set_has_chooseidx();
  chooseidx_ = value;
  // @@protoc_insertion_point(field_set:pb.TBagUseReq.ChooseIdx)
}

// -------------------------------------------------------------------

// TBagUseRsp

// repeated .pb.TCommonReward DropArr = 1;
inline int TBagUseRsp::droparr_size() const {
  return droparr_.size();
}
inline void TBagUseRsp::clear_droparr() {
  droparr_.Clear();
}
inline const ::pb::TCommonReward& TBagUseRsp::droparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagUseRsp.DropArr)
  return droparr_.Get(index);
}
inline ::pb::TCommonReward* TBagUseRsp::mutable_droparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagUseRsp.DropArr)
  return droparr_.Mutable(index);
}
inline ::pb::TCommonReward* TBagUseRsp::add_droparr() {
  // @@protoc_insertion_point(field_add:pb.TBagUseRsp.DropArr)
  return droparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TBagUseRsp::droparr() const {
  // @@protoc_insertion_point(field_list:pb.TBagUseRsp.DropArr)
  return droparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TBagUseRsp::mutable_droparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagUseRsp.DropArr)
  return &droparr_;
}

// optional bool UseSuccess = 2;
inline bool TBagUseRsp::has_usesuccess() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBagUseRsp::set_has_usesuccess() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBagUseRsp::clear_has_usesuccess() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBagUseRsp::clear_usesuccess() {
  usesuccess_ = false;
  clear_has_usesuccess();
}
inline bool TBagUseRsp::usesuccess() const {
  // @@protoc_insertion_point(field_get:pb.TBagUseRsp.UseSuccess)
  return usesuccess_;
}
inline void TBagUseRsp::set_usesuccess(bool value) {
  set_has_usesuccess();
  usesuccess_ = value;
  // @@protoc_insertion_point(field_set:pb.TBagUseRsp.UseSuccess)
}

// -------------------------------------------------------------------

// TBagCombineFragReq

// optional int32 ItemId = 1;
inline bool TBagCombineFragReq::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBagCombineFragReq::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBagCombineFragReq::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBagCombineFragReq::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 TBagCombineFragReq::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TBagCombineFragReq.ItemId)
  return itemid_;
}
inline void TBagCombineFragReq::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBagCombineFragReq.ItemId)
}

// optional int32 Tid = 2;
inline bool TBagCombineFragReq::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBagCombineFragReq::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBagCombineFragReq::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBagCombineFragReq::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 TBagCombineFragReq::tid() const {
  // @@protoc_insertion_point(field_get:pb.TBagCombineFragReq.Tid)
  return tid_;
}
inline void TBagCombineFragReq::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBagCombineFragReq.Tid)
}

// optional int32 FragNum = 3;
inline bool TBagCombineFragReq::has_fragnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBagCombineFragReq::set_has_fragnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBagCombineFragReq::clear_has_fragnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBagCombineFragReq::clear_fragnum() {
  fragnum_ = 0;
  clear_has_fragnum();
}
inline ::google::protobuf::int32 TBagCombineFragReq::fragnum() const {
  // @@protoc_insertion_point(field_get:pb.TBagCombineFragReq.FragNum)
  return fragnum_;
}
inline void TBagCombineFragReq::set_fragnum(::google::protobuf::int32 value) {
  set_has_fragnum();
  fragnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBagCombineFragReq.FragNum)
}

// -------------------------------------------------------------------

// TBagCombineFragRsp

// repeated .pb.TCommonReward SynthetiseArr = 1;
inline int TBagCombineFragRsp::synthetisearr_size() const {
  return synthetisearr_.size();
}
inline void TBagCombineFragRsp::clear_synthetisearr() {
  synthetisearr_.Clear();
}
inline const ::pb::TCommonReward& TBagCombineFragRsp::synthetisearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagCombineFragRsp.SynthetiseArr)
  return synthetisearr_.Get(index);
}
inline ::pb::TCommonReward* TBagCombineFragRsp::mutable_synthetisearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagCombineFragRsp.SynthetiseArr)
  return synthetisearr_.Mutable(index);
}
inline ::pb::TCommonReward* TBagCombineFragRsp::add_synthetisearr() {
  // @@protoc_insertion_point(field_add:pb.TBagCombineFragRsp.SynthetiseArr)
  return synthetisearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TBagCombineFragRsp::synthetisearr() const {
  // @@protoc_insertion_point(field_list:pb.TBagCombineFragRsp.SynthetiseArr)
  return synthetisearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TBagCombineFragRsp::mutable_synthetisearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagCombineFragRsp.SynthetiseArr)
  return &synthetisearr_;
}

// -------------------------------------------------------------------

// TBagNotify

// repeated .pb.TSimpleItem PropArr = 1;
inline int TBagNotify::proparr_size() const {
  return proparr_.size();
}
inline void TBagNotify::clear_proparr() {
  proparr_.Clear();
}
inline const ::pb::TSimpleItem& TBagNotify::proparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.PropArr)
  return proparr_.Get(index);
}
inline ::pb::TSimpleItem* TBagNotify::mutable_proparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.PropArr)
  return proparr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagNotify::add_proparr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.PropArr)
  return proparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagNotify::proparr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.PropArr)
  return proparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagNotify::mutable_proparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.PropArr)
  return &proparr_;
}

// repeated .pb.TArmItem ArmArr = 2;
inline int TBagNotify::armarr_size() const {
  return armarr_.size();
}
inline void TBagNotify::clear_armarr() {
  armarr_.Clear();
}
inline const ::pb::TArmItem& TBagNotify::armarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.ArmArr)
  return armarr_.Get(index);
}
inline ::pb::TArmItem* TBagNotify::mutable_armarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.ArmArr)
  return armarr_.Mutable(index);
}
inline ::pb::TArmItem* TBagNotify::add_armarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.ArmArr)
  return armarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmItem >&
TBagNotify::armarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.ArmArr)
  return armarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmItem >*
TBagNotify::mutable_armarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.ArmArr)
  return &armarr_;
}

// repeated .pb.TAccessoryItem AccessoryArr = 3;
inline int TBagNotify::accessoryarr_size() const {
  return accessoryarr_.size();
}
inline void TBagNotify::clear_accessoryarr() {
  accessoryarr_.Clear();
}
inline const ::pb::TAccessoryItem& TBagNotify::accessoryarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.AccessoryArr)
  return accessoryarr_.Get(index);
}
inline ::pb::TAccessoryItem* TBagNotify::mutable_accessoryarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.AccessoryArr)
  return accessoryarr_.Mutable(index);
}
inline ::pb::TAccessoryItem* TBagNotify::add_accessoryarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.AccessoryArr)
  return accessoryarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAccessoryItem >&
TBagNotify::accessoryarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.AccessoryArr)
  return accessoryarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAccessoryItem >*
TBagNotify::mutable_accessoryarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.AccessoryArr)
  return &accessoryarr_;
}

// repeated .pb.TSimpleItem ArmFragArr = 4;
inline int TBagNotify::armfragarr_size() const {
  return armfragarr_.size();
}
inline void TBagNotify::clear_armfragarr() {
  armfragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagNotify::armfragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.ArmFragArr)
  return armfragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagNotify::mutable_armfragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.ArmFragArr)
  return armfragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagNotify::add_armfragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.ArmFragArr)
  return armfragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagNotify::armfragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.ArmFragArr)
  return armfragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagNotify::mutable_armfragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.ArmFragArr)
  return &armfragarr_;
}

// repeated .pb.TSimpleItem AccessoryFragArr = 5;
inline int TBagNotify::accessoryfragarr_size() const {
  return accessoryfragarr_.size();
}
inline void TBagNotify::clear_accessoryfragarr() {
  accessoryfragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagNotify::accessoryfragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.AccessoryFragArr)
  return accessoryfragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagNotify::mutable_accessoryfragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.AccessoryFragArr)
  return accessoryfragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagNotify::add_accessoryfragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.AccessoryFragArr)
  return accessoryfragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagNotify::accessoryfragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.AccessoryFragArr)
  return accessoryfragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagNotify::mutable_accessoryfragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.AccessoryFragArr)
  return &accessoryfragarr_;
}

// repeated .pb.TSimpleItem HeroFragArr = 6;
inline int TBagNotify::herofragarr_size() const {
  return herofragarr_.size();
}
inline void TBagNotify::clear_herofragarr() {
  herofragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagNotify::herofragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.HeroFragArr)
  return herofragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagNotify::mutable_herofragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.HeroFragArr)
  return herofragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagNotify::add_herofragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.HeroFragArr)
  return herofragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagNotify::herofragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.HeroFragArr)
  return herofragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagNotify::mutable_herofragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.HeroFragArr)
  return &herofragarr_;
}

// repeated .pb.TSimpleItem PromoteFragArr = 7;
inline int TBagNotify::promotefragarr_size() const {
  return promotefragarr_.size();
}
inline void TBagNotify::clear_promotefragarr() {
  promotefragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagNotify::promotefragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.PromoteFragArr)
  return promotefragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagNotify::mutable_promotefragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.PromoteFragArr)
  return promotefragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagNotify::add_promotefragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.PromoteFragArr)
  return promotefragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagNotify::promotefragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.PromoteFragArr)
  return promotefragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagNotify::mutable_promotefragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.PromoteFragArr)
  return &promotefragarr_;
}

// repeated .pb.TSimpleItem PromoteArr = 8;
inline int TBagNotify::promotearr_size() const {
  return promotearr_.size();
}
inline void TBagNotify::clear_promotearr() {
  promotearr_.Clear();
}
inline const ::pb::TSimpleItem& TBagNotify::promotearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.PromoteArr)
  return promotearr_.Get(index);
}
inline ::pb::TSimpleItem* TBagNotify::mutable_promotearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.PromoteArr)
  return promotearr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagNotify::add_promotearr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.PromoteArr)
  return promotearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagNotify::promotearr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.PromoteArr)
  return promotearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagNotify::mutable_promotearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.PromoteArr)
  return &promotearr_;
}

// repeated .pb.TSoulItem SoulArr = 9;
inline int TBagNotify::soularr_size() const {
  return soularr_.size();
}
inline void TBagNotify::clear_soularr() {
  soularr_.Clear();
}
inline const ::pb::TSoulItem& TBagNotify::soularr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.SoulArr)
  return soularr_.Get(index);
}
inline ::pb::TSoulItem* TBagNotify::mutable_soularr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.SoulArr)
  return soularr_.Mutable(index);
}
inline ::pb::TSoulItem* TBagNotify::add_soularr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.SoulArr)
  return soularr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSoulItem >&
TBagNotify::soularr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.SoulArr)
  return soularr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSoulItem >*
TBagNotify::mutable_soularr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.SoulArr)
  return &soularr_;
}

// repeated .pb.TSimpleItem SynthetiseArr = 10;
inline int TBagNotify::synthetisearr_size() const {
  return synthetisearr_.size();
}
inline void TBagNotify::clear_synthetisearr() {
  synthetisearr_.Clear();
}
inline const ::pb::TSimpleItem& TBagNotify::synthetisearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.SynthetiseArr)
  return synthetisearr_.Get(index);
}
inline ::pb::TSimpleItem* TBagNotify::mutable_synthetisearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.SynthetiseArr)
  return synthetisearr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagNotify::add_synthetisearr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.SynthetiseArr)
  return synthetisearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagNotify::synthetisearr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.SynthetiseArr)
  return synthetisearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagNotify::mutable_synthetisearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.SynthetiseArr)
  return &synthetisearr_;
}

// repeated .pb.TMountEquipItem MountEquipArr = 11;
inline int TBagNotify::mountequiparr_size() const {
  return mountequiparr_.size();
}
inline void TBagNotify::clear_mountequiparr() {
  mountequiparr_.Clear();
}
inline const ::pb::TMountEquipItem& TBagNotify::mountequiparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.MountEquipArr)
  return mountequiparr_.Get(index);
}
inline ::pb::TMountEquipItem* TBagNotify::mutable_mountequiparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.MountEquipArr)
  return mountequiparr_.Mutable(index);
}
inline ::pb::TMountEquipItem* TBagNotify::add_mountequiparr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.MountEquipArr)
  return mountequiparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TMountEquipItem >&
TBagNotify::mountequiparr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.MountEquipArr)
  return mountequiparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TMountEquipItem >*
TBagNotify::mutable_mountequiparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.MountEquipArr)
  return &mountequiparr_;
}

// repeated .pb.TExclEquipItem ExclEquipArr = 12;
inline int TBagNotify::exclequiparr_size() const {
  return exclequiparr_.size();
}
inline void TBagNotify::clear_exclequiparr() {
  exclequiparr_.Clear();
}
inline const ::pb::TExclEquipItem& TBagNotify::exclequiparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.ExclEquipArr)
  return exclequiparr_.Get(index);
}
inline ::pb::TExclEquipItem* TBagNotify::mutable_exclequiparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.ExclEquipArr)
  return exclequiparr_.Mutable(index);
}
inline ::pb::TExclEquipItem* TBagNotify::add_exclequiparr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.ExclEquipArr)
  return exclequiparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TExclEquipItem >&
TBagNotify::exclequiparr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.ExclEquipArr)
  return exclequiparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TExclEquipItem >*
TBagNotify::mutable_exclequiparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.ExclEquipArr)
  return &exclequiparr_;
}

// repeated .pb.TSimpleItem BeastFragArr = 13;
inline int TBagNotify::beastfragarr_size() const {
  return beastfragarr_.size();
}
inline void TBagNotify::clear_beastfragarr() {
  beastfragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagNotify::beastfragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.BeastFragArr)
  return beastfragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagNotify::mutable_beastfragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.BeastFragArr)
  return beastfragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagNotify::add_beastfragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.BeastFragArr)
  return beastfragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagNotify::beastfragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.BeastFragArr)
  return beastfragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagNotify::mutable_beastfragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.BeastFragArr)
  return &beastfragarr_;
}

// repeated .pb.TBeastArmItem BeastArmArr = 14;
inline int TBagNotify::beastarmarr_size() const {
  return beastarmarr_.size();
}
inline void TBagNotify::clear_beastarmarr() {
  beastarmarr_.Clear();
}
inline const ::pb::TBeastArmItem& TBagNotify::beastarmarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.BeastArmArr)
  return beastarmarr_.Get(index);
}
inline ::pb::TBeastArmItem* TBagNotify::mutable_beastarmarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.BeastArmArr)
  return beastarmarr_.Mutable(index);
}
inline ::pb::TBeastArmItem* TBagNotify::add_beastarmarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.BeastArmArr)
  return beastarmarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmItem >&
TBagNotify::beastarmarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.BeastArmArr)
  return beastarmarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmItem >*
TBagNotify::mutable_beastarmarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.BeastArmArr)
  return &beastarmarr_;
}

// repeated .pb.TSimpleItem HeroSoulArr = 15;
inline int TBagNotify::herosoularr_size() const {
  return herosoularr_.size();
}
inline void TBagNotify::clear_herosoularr() {
  herosoularr_.Clear();
}
inline const ::pb::TSimpleItem& TBagNotify::herosoularr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.HeroSoulArr)
  return herosoularr_.Get(index);
}
inline ::pb::TSimpleItem* TBagNotify::mutable_herosoularr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.HeroSoulArr)
  return herosoularr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagNotify::add_herosoularr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.HeroSoulArr)
  return herosoularr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagNotify::herosoularr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.HeroSoulArr)
  return herosoularr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagNotify::mutable_herosoularr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.HeroSoulArr)
  return &herosoularr_;
}

// optional uint64 UpdateTime = 16;
inline bool TBagNotify::has_updatetime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TBagNotify::set_has_updatetime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TBagNotify::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TBagNotify::clear_updatetime() {
  updatetime_ = GOOGLE_ULONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::uint64 TBagNotify::updatetime() const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.UpdateTime)
  return updatetime_;
}
inline void TBagNotify::set_updatetime(::google::protobuf::uint64 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBagNotify.UpdateTime)
}

// repeated .pb.TTreasureItem TreasureArr = 17;
inline int TBagNotify::treasurearr_size() const {
  return treasurearr_.size();
}
inline void TBagNotify::clear_treasurearr() {
  treasurearr_.Clear();
}
inline const ::pb::TTreasureItem& TBagNotify::treasurearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.TreasureArr)
  return treasurearr_.Get(index);
}
inline ::pb::TTreasureItem* TBagNotify::mutable_treasurearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.TreasureArr)
  return treasurearr_.Mutable(index);
}
inline ::pb::TTreasureItem* TBagNotify::add_treasurearr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.TreasureArr)
  return treasurearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem >&
TBagNotify::treasurearr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.TreasureArr)
  return treasurearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem >*
TBagNotify::mutable_treasurearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.TreasureArr)
  return &treasurearr_;
}

// repeated .pb.TSimpleItem TreasureFragArr = 18;
inline int TBagNotify::treasurefragarr_size() const {
  return treasurefragarr_.size();
}
inline void TBagNotify::clear_treasurefragarr() {
  treasurefragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagNotify::treasurefragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.TreasureFragArr)
  return treasurefragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagNotify::mutable_treasurefragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.TreasureFragArr)
  return treasurefragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagNotify::add_treasurefragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.TreasureFragArr)
  return treasurefragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagNotify::treasurefragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.TreasureFragArr)
  return treasurefragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagNotify::mutable_treasurefragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.TreasureFragArr)
  return &treasurefragarr_;
}

// repeated .pb.TSilkBagItem SilkBagArr = 19;
inline int TBagNotify::silkbagarr_size() const {
  return silkbagarr_.size();
}
inline void TBagNotify::clear_silkbagarr() {
  silkbagarr_.Clear();
}
inline const ::pb::TSilkBagItem& TBagNotify::silkbagarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.SilkBagArr)
  return silkbagarr_.Get(index);
}
inline ::pb::TSilkBagItem* TBagNotify::mutable_silkbagarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.SilkBagArr)
  return silkbagarr_.Mutable(index);
}
inline ::pb::TSilkBagItem* TBagNotify::add_silkbagarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.SilkBagArr)
  return silkbagarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagItem >&
TBagNotify::silkbagarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.SilkBagArr)
  return silkbagarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagItem >*
TBagNotify::mutable_silkbagarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.SilkBagArr)
  return &silkbagarr_;
}

// repeated .pb.TSimpleItem SilkBagFragArr = 20;
inline int TBagNotify::silkbagfragarr_size() const {
  return silkbagfragarr_.size();
}
inline void TBagNotify::clear_silkbagfragarr() {
  silkbagfragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagNotify::silkbagfragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.SilkBagFragArr)
  return silkbagfragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagNotify::mutable_silkbagfragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.SilkBagFragArr)
  return silkbagfragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagNotify::add_silkbagfragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.SilkBagFragArr)
  return silkbagfragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagNotify::silkbagfragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.SilkBagFragArr)
  return silkbagfragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagNotify::mutable_silkbagfragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.SilkBagFragArr)
  return &silkbagfragarr_;
}

// repeated .pb.TDecorationBagItem DecorationArr = 21;
inline int TBagNotify::decorationarr_size() const {
  return decorationarr_.size();
}
inline void TBagNotify::clear_decorationarr() {
  decorationarr_.Clear();
}
inline const ::pb::TDecorationBagItem& TBagNotify::decorationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.DecorationArr)
  return decorationarr_.Get(index);
}
inline ::pb::TDecorationBagItem* TBagNotify::mutable_decorationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.DecorationArr)
  return decorationarr_.Mutable(index);
}
inline ::pb::TDecorationBagItem* TBagNotify::add_decorationarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.DecorationArr)
  return decorationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDecorationBagItem >&
TBagNotify::decorationarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.DecorationArr)
  return decorationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDecorationBagItem >*
TBagNotify::mutable_decorationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.DecorationArr)
  return &decorationarr_;
}

// repeated .pb.TSimpleItem WarRidingFragArr = 22;
inline int TBagNotify::warridingfragarr_size() const {
  return warridingfragarr_.size();
}
inline void TBagNotify::clear_warridingfragarr() {
  warridingfragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagNotify::warridingfragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.WarRidingFragArr)
  return warridingfragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagNotify::mutable_warridingfragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.WarRidingFragArr)
  return warridingfragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagNotify::add_warridingfragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.WarRidingFragArr)
  return warridingfragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagNotify::warridingfragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.WarRidingFragArr)
  return warridingfragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagNotify::mutable_warridingfragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.WarRidingFragArr)
  return &warridingfragarr_;
}

// repeated .pb.TSimpleItem ArtifactFragArr = 23;
inline int TBagNotify::artifactfragarr_size() const {
  return artifactfragarr_.size();
}
inline void TBagNotify::clear_artifactfragarr() {
  artifactfragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagNotify::artifactfragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.ArtifactFragArr)
  return artifactfragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagNotify::mutable_artifactfragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.ArtifactFragArr)
  return artifactfragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagNotify::add_artifactfragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.ArtifactFragArr)
  return artifactfragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagNotify::artifactfragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.ArtifactFragArr)
  return artifactfragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagNotify::mutable_artifactfragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.ArtifactFragArr)
  return &artifactfragarr_;
}

// repeated .pb.TDivineBagItem TDivineBagArr = 24;
inline int TBagNotify::tdivinebagarr_size() const {
  return tdivinebagarr_.size();
}
inline void TBagNotify::clear_tdivinebagarr() {
  tdivinebagarr_.Clear();
}
inline const ::pb::TDivineBagItem& TBagNotify::tdivinebagarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.TDivineBagArr)
  return tdivinebagarr_.Get(index);
}
inline ::pb::TDivineBagItem* TBagNotify::mutable_tdivinebagarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.TDivineBagArr)
  return tdivinebagarr_.Mutable(index);
}
inline ::pb::TDivineBagItem* TBagNotify::add_tdivinebagarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.TDivineBagArr)
  return tdivinebagarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDivineBagItem >&
TBagNotify::tdivinebagarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.TDivineBagArr)
  return tdivinebagarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDivineBagItem >*
TBagNotify::mutable_tdivinebagarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.TDivineBagArr)
  return &tdivinebagarr_;
}

// repeated .pb.TSimpleItem TDivineFragArr = 25;
inline int TBagNotify::tdivinefragarr_size() const {
  return tdivinefragarr_.size();
}
inline void TBagNotify::clear_tdivinefragarr() {
  tdivinefragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagNotify::tdivinefragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.TDivineFragArr)
  return tdivinefragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagNotify::mutable_tdivinefragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.TDivineFragArr)
  return tdivinefragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagNotify::add_tdivinefragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.TDivineFragArr)
  return tdivinefragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagNotify::tdivinefragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.TDivineFragArr)
  return tdivinefragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagNotify::mutable_tdivinefragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.TDivineFragArr)
  return &tdivinefragarr_;
}

// repeated .pb.TForceSoulItem ForceSoulArr = 26;
inline int TBagNotify::forcesoularr_size() const {
  return forcesoularr_.size();
}
inline void TBagNotify::clear_forcesoularr() {
  forcesoularr_.Clear();
}
inline const ::pb::TForceSoulItem& TBagNotify::forcesoularr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.ForceSoulArr)
  return forcesoularr_.Get(index);
}
inline ::pb::TForceSoulItem* TBagNotify::mutable_forcesoularr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.ForceSoulArr)
  return forcesoularr_.Mutable(index);
}
inline ::pb::TForceSoulItem* TBagNotify::add_forcesoularr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.ForceSoulArr)
  return forcesoularr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TForceSoulItem >&
TBagNotify::forcesoularr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.ForceSoulArr)
  return forcesoularr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TForceSoulItem >*
TBagNotify::mutable_forcesoularr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.ForceSoulArr)
  return &forcesoularr_;
}

// repeated .pb.TSimpleItem FashionFragmentArr = 27;
inline int TBagNotify::fashionfragmentarr_size() const {
  return fashionfragmentarr_.size();
}
inline void TBagNotify::clear_fashionfragmentarr() {
  fashionfragmentarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagNotify::fashionfragmentarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagNotify.FashionFragmentArr)
  return fashionfragmentarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagNotify::mutable_fashionfragmentarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagNotify.FashionFragmentArr)
  return fashionfragmentarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagNotify::add_fashionfragmentarr() {
  // @@protoc_insertion_point(field_add:pb.TBagNotify.FashionFragmentArr)
  return fashionfragmentarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagNotify::fashionfragmentarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagNotify.FashionFragmentArr)
  return fashionfragmentarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagNotify::mutable_fashionfragmentarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagNotify.FashionFragmentArr)
  return &fashionfragmentarr_;
}

// -------------------------------------------------------------------

// TBagGetOtherTreasureInfoReq

// optional uint64 Uid = 1;
inline bool TBagGetOtherTreasureInfoReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBagGetOtherTreasureInfoReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBagGetOtherTreasureInfoReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBagGetOtherTreasureInfoReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TBagGetOtherTreasureInfoReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TBagGetOtherTreasureInfoReq.Uid)
  return uid_;
}
inline void TBagGetOtherTreasureInfoReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBagGetOtherTreasureInfoReq.Uid)
}

// optional string ServerId = 2;
inline bool TBagGetOtherTreasureInfoReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBagGetOtherTreasureInfoReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBagGetOtherTreasureInfoReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBagGetOtherTreasureInfoReq::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TBagGetOtherTreasureInfoReq::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TBagGetOtherTreasureInfoReq.ServerId)
  return *serverid_;
}
inline void TBagGetOtherTreasureInfoReq::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBagGetOtherTreasureInfoReq.ServerId)
}
inline void TBagGetOtherTreasureInfoReq::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBagGetOtherTreasureInfoReq.ServerId)
}
inline void TBagGetOtherTreasureInfoReq::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBagGetOtherTreasureInfoReq.ServerId)
}
inline ::std::string* TBagGetOtherTreasureInfoReq::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBagGetOtherTreasureInfoReq.ServerId)
  return serverid_;
}
inline ::std::string* TBagGetOtherTreasureInfoReq::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBagGetOtherTreasureInfoReq::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBagGetOtherTreasureInfoReq.ServerId)
}

// -------------------------------------------------------------------

// TBagGetOtherTreasureInfoRsp

// repeated .pb.TTreasureItem TreasureArr = 1;
inline int TBagGetOtherTreasureInfoRsp::treasurearr_size() const {
  return treasurearr_.size();
}
inline void TBagGetOtherTreasureInfoRsp::clear_treasurearr() {
  treasurearr_.Clear();
}
inline const ::pb::TTreasureItem& TBagGetOtherTreasureInfoRsp::treasurearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagGetOtherTreasureInfoRsp.TreasureArr)
  return treasurearr_.Get(index);
}
inline ::pb::TTreasureItem* TBagGetOtherTreasureInfoRsp::mutable_treasurearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagGetOtherTreasureInfoRsp.TreasureArr)
  return treasurearr_.Mutable(index);
}
inline ::pb::TTreasureItem* TBagGetOtherTreasureInfoRsp::add_treasurearr() {
  // @@protoc_insertion_point(field_add:pb.TBagGetOtherTreasureInfoRsp.TreasureArr)
  return treasurearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem >&
TBagGetOtherTreasureInfoRsp::treasurearr() const {
  // @@protoc_insertion_point(field_list:pb.TBagGetOtherTreasureInfoRsp.TreasureArr)
  return treasurearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem >*
TBagGetOtherTreasureInfoRsp::mutable_treasurearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagGetOtherTreasureInfoRsp.TreasureArr)
  return &treasurearr_;
}

// repeated .pb.TSimpleItem TreasureFragArr = 2;
inline int TBagGetOtherTreasureInfoRsp::treasurefragarr_size() const {
  return treasurefragarr_.size();
}
inline void TBagGetOtherTreasureInfoRsp::clear_treasurefragarr() {
  treasurefragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagGetOtherTreasureInfoRsp::treasurefragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagGetOtherTreasureInfoRsp.TreasureFragArr)
  return treasurefragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagGetOtherTreasureInfoRsp::mutable_treasurefragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagGetOtherTreasureInfoRsp.TreasureFragArr)
  return treasurefragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagGetOtherTreasureInfoRsp::add_treasurefragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagGetOtherTreasureInfoRsp.TreasureFragArr)
  return treasurefragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagGetOtherTreasureInfoRsp::treasurefragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagGetOtherTreasureInfoRsp.TreasureFragArr)
  return treasurefragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagGetOtherTreasureInfoRsp::mutable_treasurefragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagGetOtherTreasureInfoRsp.TreasureFragArr)
  return &treasurefragarr_;
}

// -------------------------------------------------------------------

// TBagGetTreasureInfoFromOtherServerReq

// optional uint64 Uid = 1;
inline bool TBagGetTreasureInfoFromOtherServerReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBagGetTreasureInfoFromOtherServerReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBagGetTreasureInfoFromOtherServerReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBagGetTreasureInfoFromOtherServerReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TBagGetTreasureInfoFromOtherServerReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TBagGetTreasureInfoFromOtherServerReq.Uid)
  return uid_;
}
inline void TBagGetTreasureInfoFromOtherServerReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBagGetTreasureInfoFromOtherServerReq.Uid)
}

// -------------------------------------------------------------------

// TBagGetTreasureInfoFromOtherServerRsp

// repeated .pb.TTreasureItem TreasureArr = 1;
inline int TBagGetTreasureInfoFromOtherServerRsp::treasurearr_size() const {
  return treasurearr_.size();
}
inline void TBagGetTreasureInfoFromOtherServerRsp::clear_treasurearr() {
  treasurearr_.Clear();
}
inline const ::pb::TTreasureItem& TBagGetTreasureInfoFromOtherServerRsp::treasurearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagGetTreasureInfoFromOtherServerRsp.TreasureArr)
  return treasurearr_.Get(index);
}
inline ::pb::TTreasureItem* TBagGetTreasureInfoFromOtherServerRsp::mutable_treasurearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagGetTreasureInfoFromOtherServerRsp.TreasureArr)
  return treasurearr_.Mutable(index);
}
inline ::pb::TTreasureItem* TBagGetTreasureInfoFromOtherServerRsp::add_treasurearr() {
  // @@protoc_insertion_point(field_add:pb.TBagGetTreasureInfoFromOtherServerRsp.TreasureArr)
  return treasurearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem >&
TBagGetTreasureInfoFromOtherServerRsp::treasurearr() const {
  // @@protoc_insertion_point(field_list:pb.TBagGetTreasureInfoFromOtherServerRsp.TreasureArr)
  return treasurearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItem >*
TBagGetTreasureInfoFromOtherServerRsp::mutable_treasurearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagGetTreasureInfoFromOtherServerRsp.TreasureArr)
  return &treasurearr_;
}

// repeated .pb.TSimpleItem TreasureFragArr = 2;
inline int TBagGetTreasureInfoFromOtherServerRsp::treasurefragarr_size() const {
  return treasurefragarr_.size();
}
inline void TBagGetTreasureInfoFromOtherServerRsp::clear_treasurefragarr() {
  treasurefragarr_.Clear();
}
inline const ::pb::TSimpleItem& TBagGetTreasureInfoFromOtherServerRsp::treasurefragarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBagGetTreasureInfoFromOtherServerRsp.TreasureFragArr)
  return treasurefragarr_.Get(index);
}
inline ::pb::TSimpleItem* TBagGetTreasureInfoFromOtherServerRsp::mutable_treasurefragarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBagGetTreasureInfoFromOtherServerRsp.TreasureFragArr)
  return treasurefragarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TBagGetTreasureInfoFromOtherServerRsp::add_treasurefragarr() {
  // @@protoc_insertion_point(field_add:pb.TBagGetTreasureInfoFromOtherServerRsp.TreasureFragArr)
  return treasurefragarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBagGetTreasureInfoFromOtherServerRsp::treasurefragarr() const {
  // @@protoc_insertion_point(field_list:pb.TBagGetTreasureInfoFromOtherServerRsp.TreasureFragArr)
  return treasurefragarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBagGetTreasureInfoFromOtherServerRsp::mutable_treasurefragarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBagGetTreasureInfoFromOtherServerRsp.TreasureFragArr)
  return &treasurefragarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fBag_2eproto__INCLUDED
