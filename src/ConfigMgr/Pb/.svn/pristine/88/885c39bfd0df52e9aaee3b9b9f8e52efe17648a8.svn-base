// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Barrack.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Barrack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TSingleDecorationItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSingleDecorationItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSingleBarrackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSingleBarrackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSingleBarrackPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSingleBarrackPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackEquipDecorationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackEquipDecorationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPriorityQueue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPriorityQueue_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackAutoEquipDecorationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackAutoEquipDecorationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackAutoEquipDecorationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackAutoEquipDecorationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackLotteryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackLotteryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackLotteryRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackLotteryRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackSwapBarrackPosReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackSwapBarrackPosReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackServerRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackServerRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackGetRankListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackGetRankListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackGetRankListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackGetRankListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackGetTreasuerBoxAwardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackGetTreasuerBoxAwardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackGetTreasuerBoxAwardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackGetTreasuerBoxAwardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackGetFriendBarrackInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackGetFriendBarrackInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackGetBarrackInfoAndUserInfoByServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackGetBarrackInfoAndUserInfoByServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackOtherUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackOtherUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBarrackGetBarrackInfoAndUserInfoByServerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBarrackGetBarrackInfoAndUserInfoByServerRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Priority_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fBarrack_2eproto() {
  protobuf_AddDesc_net_2fBarrack_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Barrack.proto");
  GOOGLE_CHECK(file != NULL);
  TSingleDecorationItem_descriptor_ = file->message_type(0);
  static const int TSingleDecorationItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSingleDecorationItem, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSingleDecorationItem, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSingleDecorationItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSingleDecorationItem, starlv_),
  };
  TSingleDecorationItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSingleDecorationItem_descriptor_,
      TSingleDecorationItem::default_instance_,
      TSingleDecorationItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSingleDecorationItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSingleDecorationItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSingleDecorationItem));
  TSingleBarrackInfo_descriptor_ = file->message_type(1);
  static const int TSingleBarrackInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSingleBarrackInfo, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSingleBarrackInfo, decorationarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSingleBarrackInfo, htid_),
  };
  TSingleBarrackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSingleBarrackInfo_descriptor_,
      TSingleBarrackInfo::default_instance_,
      TSingleBarrackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSingleBarrackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSingleBarrackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSingleBarrackInfo));
  TSingleBarrackPos_descriptor_ = file->message_type(2);
  static const int TSingleBarrackPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSingleBarrackPos, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSingleBarrackPos, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSingleBarrackPos, htid_),
  };
  TSingleBarrackPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSingleBarrackPos_descriptor_,
      TSingleBarrackPos::default_instance_,
      TSingleBarrackPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSingleBarrackPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSingleBarrackPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSingleBarrackPos));
  TBarrackGetInfoRsp_descriptor_ = file->message_type(3);
  static const int TBarrackGetInfoRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetInfoRsp, arrbarrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetInfoRsp, freetimetoday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetInfoRsp, priorityqueue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetInfoRsp, maxbarrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetInfoRsp, refreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetInfoRsp, barrackposarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetInfoRsp, receivedfriend_),
  };
  TBarrackGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackGetInfoRsp_descriptor_,
      TBarrackGetInfoRsp::default_instance_,
      TBarrackGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackGetInfoRsp));
  TBarrackEquipDecorationReq_descriptor_ = file->message_type(4);
  static const int TBarrackEquipDecorationReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackEquipDecorationReq, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackEquipDecorationReq, decorationitemarr_),
  };
  TBarrackEquipDecorationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackEquipDecorationReq_descriptor_,
      TBarrackEquipDecorationReq::default_instance_,
      TBarrackEquipDecorationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackEquipDecorationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackEquipDecorationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackEquipDecorationReq));
  TPriorityQueue_descriptor_ = file->message_type(5);
  static const int TPriorityQueue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPriorityQueue, prioritylev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPriorityQueue, hid_),
  };
  TPriorityQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPriorityQueue_descriptor_,
      TPriorityQueue::default_instance_,
      TPriorityQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPriorityQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPriorityQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPriorityQueue));
  TBarrackAutoEquipDecorationReq_descriptor_ = file->message_type(6);
  static const int TBarrackAutoEquipDecorationReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackAutoEquipDecorationReq, priorityqueue_),
  };
  TBarrackAutoEquipDecorationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackAutoEquipDecorationReq_descriptor_,
      TBarrackAutoEquipDecorationReq::default_instance_,
      TBarrackAutoEquipDecorationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackAutoEquipDecorationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackAutoEquipDecorationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackAutoEquipDecorationReq));
  TBarrackAutoEquipDecorationRsp_descriptor_ = file->message_type(7);
  static const int TBarrackAutoEquipDecorationRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackAutoEquipDecorationRsp, barrack_),
  };
  TBarrackAutoEquipDecorationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackAutoEquipDecorationRsp_descriptor_,
      TBarrackAutoEquipDecorationRsp::default_instance_,
      TBarrackAutoEquipDecorationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackAutoEquipDecorationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackAutoEquipDecorationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackAutoEquipDecorationRsp));
  TBarrackLotteryReq_descriptor_ = file->message_type(8);
  static const int TBarrackLotteryReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackLotteryReq, lotterytype_),
  };
  TBarrackLotteryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackLotteryReq_descriptor_,
      TBarrackLotteryReq::default_instance_,
      TBarrackLotteryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackLotteryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackLotteryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackLotteryReq));
  TBarrackLotteryRsp_descriptor_ = file->message_type(9);
  static const int TBarrackLotteryRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackLotteryRsp, rewardarray_),
  };
  TBarrackLotteryRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackLotteryRsp_descriptor_,
      TBarrackLotteryRsp::default_instance_,
      TBarrackLotteryRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackLotteryRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackLotteryRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackLotteryRsp));
  TBarrackSwapBarrackPosReq_descriptor_ = file->message_type(10);
  static const int TBarrackSwapBarrackPosReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackSwapBarrackPosReq, hidarr_),
  };
  TBarrackSwapBarrackPosReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackSwapBarrackPosReq_descriptor_,
      TBarrackSwapBarrackPosReq::default_instance_,
      TBarrackSwapBarrackPosReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackSwapBarrackPosReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackSwapBarrackPosReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackSwapBarrackPosReq));
  TBarrackChangeNotify_descriptor_ = file->message_type(11);
  static const int TBarrackChangeNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackChangeNotify, barrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackChangeNotify, priorityqueue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackChangeNotify, delhid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackChangeNotify, maxbarrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackChangeNotify, barrackposarr_),
  };
  TBarrackChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackChangeNotify_descriptor_,
      TBarrackChangeNotify::default_instance_,
      TBarrackChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackChangeNotify));
  TBarrackServerRankInfo_descriptor_ = file->message_type(12);
  static const int TBarrackServerRankInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackServerRankInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackServerRankInfo, barrackscore_),
  };
  TBarrackServerRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackServerRankInfo_descriptor_,
      TBarrackServerRankInfo::default_instance_,
      TBarrackServerRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackServerRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackServerRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackServerRankInfo));
  TBarrackGetRankListReq_descriptor_ = file->message_type(13);
  static const int TBarrackGetRankListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetRankListReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetRankListReq, limit_),
  };
  TBarrackGetRankListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackGetRankListReq_descriptor_,
      TBarrackGetRankListReq::default_instance_,
      TBarrackGetRankListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetRankListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetRankListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackGetRankListReq));
  TBarrackGetRankListRsp_descriptor_ = file->message_type(14);
  static const int TBarrackGetRankListRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetRankListRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetRankListRsp, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetRankListRsp, barrackscore_),
  };
  TBarrackGetRankListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackGetRankListRsp_descriptor_,
      TBarrackGetRankListRsp::default_instance_,
      TBarrackGetRankListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetRankListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetRankListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackGetRankListRsp));
  TBarrackGetTreasuerBoxAwardReq_descriptor_ = file->message_type(15);
  static const int TBarrackGetTreasuerBoxAwardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetTreasuerBoxAwardReq, frienduid_),
  };
  TBarrackGetTreasuerBoxAwardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackGetTreasuerBoxAwardReq_descriptor_,
      TBarrackGetTreasuerBoxAwardReq::default_instance_,
      TBarrackGetTreasuerBoxAwardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetTreasuerBoxAwardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetTreasuerBoxAwardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackGetTreasuerBoxAwardReq));
  TBarrackGetTreasuerBoxAwardRsp_descriptor_ = file->message_type(16);
  static const int TBarrackGetTreasuerBoxAwardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetTreasuerBoxAwardRsp, rewardarray_),
  };
  TBarrackGetTreasuerBoxAwardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackGetTreasuerBoxAwardRsp_descriptor_,
      TBarrackGetTreasuerBoxAwardRsp::default_instance_,
      TBarrackGetTreasuerBoxAwardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetTreasuerBoxAwardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetTreasuerBoxAwardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackGetTreasuerBoxAwardRsp));
  TBarrackGetFriendBarrackInfoRsp_descriptor_ = file->message_type(17);
  static const int TBarrackGetFriendBarrackInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetFriendBarrackInfoRsp, receivednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetFriendBarrackInfoRsp, havabarrackfriendnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetFriendBarrackInfoRsp, receviedfrienduid_),
  };
  TBarrackGetFriendBarrackInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackGetFriendBarrackInfoRsp_descriptor_,
      TBarrackGetFriendBarrackInfoRsp::default_instance_,
      TBarrackGetFriendBarrackInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetFriendBarrackInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetFriendBarrackInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackGetFriendBarrackInfoRsp));
  TBarrackGetBarrackInfoAndUserInfoByServerReq_descriptor_ = file->message_type(18);
  static const int TBarrackGetBarrackInfoAndUserInfoByServerReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetBarrackInfoAndUserInfoByServerReq, frienduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetBarrackInfoAndUserInfoByServerReq, serverid_),
  };
  TBarrackGetBarrackInfoAndUserInfoByServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackGetBarrackInfoAndUserInfoByServerReq_descriptor_,
      TBarrackGetBarrackInfoAndUserInfoByServerReq::default_instance_,
      TBarrackGetBarrackInfoAndUserInfoByServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetBarrackInfoAndUserInfoByServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetBarrackInfoAndUserInfoByServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackGetBarrackInfoAndUserInfoByServerReq));
  TBarrackOtherUserInfo_descriptor_ = file->message_type(19);
  static const int TBarrackOtherUserInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackOtherUserInfo, arrbarrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackOtherUserInfo, barrackposarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackOtherUserInfo, friendusersimpleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackOtherUserInfo, barrackscore_),
  };
  TBarrackOtherUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackOtherUserInfo_descriptor_,
      TBarrackOtherUserInfo::default_instance_,
      TBarrackOtherUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackOtherUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackOtherUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackOtherUserInfo));
  TBarrackGetBarrackInfoAndUserInfoByServerRsp_descriptor_ = file->message_type(20);
  static const int TBarrackGetBarrackInfoAndUserInfoByServerRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetBarrackInfoAndUserInfoByServerRsp, friendinfoarr_),
  };
  TBarrackGetBarrackInfoAndUserInfoByServerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBarrackGetBarrackInfoAndUserInfoByServerRsp_descriptor_,
      TBarrackGetBarrackInfoAndUserInfoByServerRsp::default_instance_,
      TBarrackGetBarrackInfoAndUserInfoByServerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetBarrackInfoAndUserInfoByServerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBarrackGetBarrackInfoAndUserInfoByServerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBarrackGetBarrackInfoAndUserInfoByServerRsp));
  Priority_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fBarrack_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSingleDecorationItem_descriptor_, &TSingleDecorationItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSingleBarrackInfo_descriptor_, &TSingleBarrackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSingleBarrackPos_descriptor_, &TSingleBarrackPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackGetInfoRsp_descriptor_, &TBarrackGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackEquipDecorationReq_descriptor_, &TBarrackEquipDecorationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPriorityQueue_descriptor_, &TPriorityQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackAutoEquipDecorationReq_descriptor_, &TBarrackAutoEquipDecorationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackAutoEquipDecorationRsp_descriptor_, &TBarrackAutoEquipDecorationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackLotteryReq_descriptor_, &TBarrackLotteryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackLotteryRsp_descriptor_, &TBarrackLotteryRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackSwapBarrackPosReq_descriptor_, &TBarrackSwapBarrackPosReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackChangeNotify_descriptor_, &TBarrackChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackServerRankInfo_descriptor_, &TBarrackServerRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackGetRankListReq_descriptor_, &TBarrackGetRankListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackGetRankListRsp_descriptor_, &TBarrackGetRankListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackGetTreasuerBoxAwardReq_descriptor_, &TBarrackGetTreasuerBoxAwardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackGetTreasuerBoxAwardRsp_descriptor_, &TBarrackGetTreasuerBoxAwardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackGetFriendBarrackInfoRsp_descriptor_, &TBarrackGetFriendBarrackInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackGetBarrackInfoAndUserInfoByServerReq_descriptor_, &TBarrackGetBarrackInfoAndUserInfoByServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackOtherUserInfo_descriptor_, &TBarrackOtherUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBarrackGetBarrackInfoAndUserInfoByServerRsp_descriptor_, &TBarrackGetBarrackInfoAndUserInfoByServerRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fBarrack_2eproto() {
  delete TSingleDecorationItem::default_instance_;
  delete TSingleDecorationItem_reflection_;
  delete TSingleBarrackInfo::default_instance_;
  delete TSingleBarrackInfo_reflection_;
  delete TSingleBarrackPos::default_instance_;
  delete TSingleBarrackPos_reflection_;
  delete TBarrackGetInfoRsp::default_instance_;
  delete TBarrackGetInfoRsp_reflection_;
  delete TBarrackEquipDecorationReq::default_instance_;
  delete TBarrackEquipDecorationReq_reflection_;
  delete TPriorityQueue::default_instance_;
  delete TPriorityQueue_reflection_;
  delete TBarrackAutoEquipDecorationReq::default_instance_;
  delete TBarrackAutoEquipDecorationReq_reflection_;
  delete TBarrackAutoEquipDecorationRsp::default_instance_;
  delete TBarrackAutoEquipDecorationRsp_reflection_;
  delete TBarrackLotteryReq::default_instance_;
  delete TBarrackLotteryReq_reflection_;
  delete TBarrackLotteryRsp::default_instance_;
  delete TBarrackLotteryRsp_reflection_;
  delete TBarrackSwapBarrackPosReq::default_instance_;
  delete TBarrackSwapBarrackPosReq_reflection_;
  delete TBarrackChangeNotify::default_instance_;
  delete TBarrackChangeNotify_reflection_;
  delete TBarrackServerRankInfo::default_instance_;
  delete TBarrackServerRankInfo_reflection_;
  delete TBarrackGetRankListReq::default_instance_;
  delete TBarrackGetRankListReq_reflection_;
  delete TBarrackGetRankListRsp::default_instance_;
  delete TBarrackGetRankListRsp_reflection_;
  delete TBarrackGetTreasuerBoxAwardReq::default_instance_;
  delete TBarrackGetTreasuerBoxAwardReq_reflection_;
  delete TBarrackGetTreasuerBoxAwardRsp::default_instance_;
  delete TBarrackGetTreasuerBoxAwardRsp_reflection_;
  delete TBarrackGetFriendBarrackInfoRsp::default_instance_;
  delete TBarrackGetFriendBarrackInfoRsp_reflection_;
  delete TBarrackGetBarrackInfoAndUserInfoByServerReq::default_instance_;
  delete TBarrackGetBarrackInfoAndUserInfoByServerReq_reflection_;
  delete TBarrackOtherUserInfo::default_instance_;
  delete TBarrackOtherUserInfo_reflection_;
  delete TBarrackGetBarrackInfoAndUserInfoByServerRsp::default_instance_;
  delete TBarrackGetBarrackInfoAndUserInfoByServerRsp_reflection_;
}

void protobuf_AddDesc_net_2fBarrack_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommon_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021net/Barrack.proto\022\002pb\032\020net/Common.prot"
    "o\032\026net/CommonReward.proto\032\016net/User.prot"
    "o\"Q\n\025TSingleDecorationItem\022\013\n\003Pos\030\001 \001(\r\022"
    "\013\n\003Tid\030\002 \001(\r\022\016\n\006ItemId\030\003 \001(\r\022\016\n\006StarLv\030\004"
    " \001(\r\"a\n\022TSingleBarrackInfo\022\013\n\003Hid\030\001 \001(\r\022"
    "0\n\rDecorationArr\030\002 \003(\0132\031.pb.TSingleDecor"
    "ationItem\022\014\n\004Htid\030\003 \001(\r\";\n\021TSingleBarrac"
    "kPos\022\013\n\003Hid\030\001 \001(\r\022\013\n\003Pos\030\002 \001(\r\022\014\n\004Htid\030\003"
    " \001(\r\"\361\001\n\022TBarrackGetInfoRsp\022*\n\nArrBarrac"
    "k\030\001 \003(\0132\026.pb.TSingleBarrackInfo\022\025\n\rFreeT"
    "imeToday\030\002 \001(\r\022)\n\rPriorityQueue\030\003 \003(\0132\022."
    "pb.TPriorityQueue\022\022\n\nMaxBarrack\030\004 \001(\r\022\023\n"
    "\013RefreshTime\030\005 \001(\004\022,\n\rBarrackPosArr\030\006 \003("
    "\0132\025.pb.TSingleBarrackPos\022\026\n\016ReceivedFrie"
    "nd\030\007 \003(\004\"_\n\032TBarrackEquipDecorationReq\022\013"
    "\n\003Hid\030\001 \001(\r\0224\n\021DecorationItemArr\030\002 \003(\0132\031"
    ".pb.TSingleDecorationItem\"@\n\016TPriorityQu"
    "eue\022!\n\013PriorityLev\030\001 \001(\0162\014.pb.Priority\022\013"
    "\n\003Hid\030\002 \003(\r\"K\n\036TBarrackAutoEquipDecorati"
    "onReq\022)\n\rPriorityQueue\030\001 \003(\0132\022.pb.TPrior"
    "ityQueue\"I\n\036TBarrackAutoEquipDecorationR"
    "sp\022\'\n\007Barrack\030\001 \003(\0132\026.pb.TSingleBarrackI"
    "nfo\")\n\022TBarrackLotteryReq\022\023\n\013LotteryType"
    "\030\001 \001(\r\"<\n\022TBarrackLotteryRsp\022&\n\013RewardAr"
    "ray\030\001 \003(\0132\021.pb.TCommonReward\"+\n\031TBarrack"
    "SwapBarrackPosReq\022\016\n\006HidArr\030\001 \003(\r\"\274\001\n\024TB"
    "arrackChangeNotify\022\'\n\007Barrack\030\001 \003(\0132\026.pb"
    ".TSingleBarrackInfo\022)\n\rPriorityQueue\030\002 \003"
    "(\0132\022.pb.TPriorityQueue\022\016\n\006DelHid\030\003 \003(\r\022\022"
    "\n\nMaxBarrack\030\004 \001(\r\022,\n\rBarrackPosArr\030\005 \003("
    "\0132\025.pb.TSingleBarrackPos\"U\n\026TBarrackServ"
    "erRankInfo\022%\n\010UserInfo\030\001 \001(\0132\023.pb.TUserS"
    "impleInfo\022\024\n\014BarrackScore\030\002 \001(\r\"7\n\026TBarr"
    "ackGetRankListReq\022\016\n\006Offset\030\001 \001(\r\022\r\n\005Lim"
    "it\030\002 \001(\r\"k\n\026TBarrackGetRankListRsp\022+\n\007Ra"
    "nkArr\030\001 \003(\0132\032.pb.TBarrackServerRankInfo\022"
    "\016\n\006MyRank\030\002 \001(\005\022\024\n\014BarrackScore\030\003 \001(\r\"3\n"
    "\036TBarrackGetTreasuerBoxAwardReq\022\021\n\tFrien"
    "dUid\030\001 \001(\004\"H\n\036TBarrackGetTreasuerBoxAwar"
    "dRsp\022&\n\013RewardArray\030\001 \003(\0132\021.pb.TCommonRe"
    "ward\"o\n\037TBarrackGetFriendBarrackInfoRsp\022"
    "\023\n\013ReceivedNum\030\001 \001(\r\022\034\n\024HavaBarrackFrien"
    "dNum\030\002 \001(\r\022\031\n\021ReceviedFriendUid\030\003 \003(\004\"S\n"
    ",TBarrackGetBarrackInfoAndUserInfoByServ"
    "erReq\022\021\n\tFriendUid\030\001 \003(\004\022\020\n\010ServerId\030\002 \003"
    "(\t\"\272\001\n\025TBarrackOtherUserInfo\022*\n\nArrBarra"
    "ck\030\001 \003(\0132\026.pb.TSingleBarrackInfo\022,\n\rBarr"
    "ackPosArr\030\002 \003(\0132\025.pb.TSingleBarrackPos\0221"
    "\n\024FriendUserSimpleInfo\030\003 \001(\0132\023.pb.TUserS"
    "impleInfo\022\024\n\014BarrackScore\030\004 \001(\r\"`\n,TBarr"
    "ackGetBarrackInfoAndUserInfoByServerRsp\022"
    "0\n\rFriendInfoArr\030\001 \003(\0132\031.pb.TBarrackOthe"
    "rUserInfo*&\n\010Priority\022\010\n\004HIGH\020\001\022\007\n\003MID\020\002"
    "\022\007\n\003LOW\020\003", 2129);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Barrack.proto", &protobuf_RegisterTypes);
  TSingleDecorationItem::default_instance_ = new TSingleDecorationItem();
  TSingleBarrackInfo::default_instance_ = new TSingleBarrackInfo();
  TSingleBarrackPos::default_instance_ = new TSingleBarrackPos();
  TBarrackGetInfoRsp::default_instance_ = new TBarrackGetInfoRsp();
  TBarrackEquipDecorationReq::default_instance_ = new TBarrackEquipDecorationReq();
  TPriorityQueue::default_instance_ = new TPriorityQueue();
  TBarrackAutoEquipDecorationReq::default_instance_ = new TBarrackAutoEquipDecorationReq();
  TBarrackAutoEquipDecorationRsp::default_instance_ = new TBarrackAutoEquipDecorationRsp();
  TBarrackLotteryReq::default_instance_ = new TBarrackLotteryReq();
  TBarrackLotteryRsp::default_instance_ = new TBarrackLotteryRsp();
  TBarrackSwapBarrackPosReq::default_instance_ = new TBarrackSwapBarrackPosReq();
  TBarrackChangeNotify::default_instance_ = new TBarrackChangeNotify();
  TBarrackServerRankInfo::default_instance_ = new TBarrackServerRankInfo();
  TBarrackGetRankListReq::default_instance_ = new TBarrackGetRankListReq();
  TBarrackGetRankListRsp::default_instance_ = new TBarrackGetRankListRsp();
  TBarrackGetTreasuerBoxAwardReq::default_instance_ = new TBarrackGetTreasuerBoxAwardReq();
  TBarrackGetTreasuerBoxAwardRsp::default_instance_ = new TBarrackGetTreasuerBoxAwardRsp();
  TBarrackGetFriendBarrackInfoRsp::default_instance_ = new TBarrackGetFriendBarrackInfoRsp();
  TBarrackGetBarrackInfoAndUserInfoByServerReq::default_instance_ = new TBarrackGetBarrackInfoAndUserInfoByServerReq();
  TBarrackOtherUserInfo::default_instance_ = new TBarrackOtherUserInfo();
  TBarrackGetBarrackInfoAndUserInfoByServerRsp::default_instance_ = new TBarrackGetBarrackInfoAndUserInfoByServerRsp();
  TSingleDecorationItem::default_instance_->InitAsDefaultInstance();
  TSingleBarrackInfo::default_instance_->InitAsDefaultInstance();
  TSingleBarrackPos::default_instance_->InitAsDefaultInstance();
  TBarrackGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TBarrackEquipDecorationReq::default_instance_->InitAsDefaultInstance();
  TPriorityQueue::default_instance_->InitAsDefaultInstance();
  TBarrackAutoEquipDecorationReq::default_instance_->InitAsDefaultInstance();
  TBarrackAutoEquipDecorationRsp::default_instance_->InitAsDefaultInstance();
  TBarrackLotteryReq::default_instance_->InitAsDefaultInstance();
  TBarrackLotteryRsp::default_instance_->InitAsDefaultInstance();
  TBarrackSwapBarrackPosReq::default_instance_->InitAsDefaultInstance();
  TBarrackChangeNotify::default_instance_->InitAsDefaultInstance();
  TBarrackServerRankInfo::default_instance_->InitAsDefaultInstance();
  TBarrackGetRankListReq::default_instance_->InitAsDefaultInstance();
  TBarrackGetRankListRsp::default_instance_->InitAsDefaultInstance();
  TBarrackGetTreasuerBoxAwardReq::default_instance_->InitAsDefaultInstance();
  TBarrackGetTreasuerBoxAwardRsp::default_instance_->InitAsDefaultInstance();
  TBarrackGetFriendBarrackInfoRsp::default_instance_->InitAsDefaultInstance();
  TBarrackGetBarrackInfoAndUserInfoByServerReq::default_instance_->InitAsDefaultInstance();
  TBarrackOtherUserInfo::default_instance_->InitAsDefaultInstance();
  TBarrackGetBarrackInfoAndUserInfoByServerRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fBarrack_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fBarrack_2eproto {
  StaticDescriptorInitializer_net_2fBarrack_2eproto() {
    protobuf_AddDesc_net_2fBarrack_2eproto();
  }
} static_descriptor_initializer_net_2fBarrack_2eproto_;
const ::google::protobuf::EnumDescriptor* Priority_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Priority_descriptor_;
}
bool Priority_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TSingleDecorationItem::kPosFieldNumber;
const int TSingleDecorationItem::kTidFieldNumber;
const int TSingleDecorationItem::kItemIdFieldNumber;
const int TSingleDecorationItem::kStarLvFieldNumber;
#endif  // !_MSC_VER

TSingleDecorationItem::TSingleDecorationItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSingleDecorationItem)
}

void TSingleDecorationItem::InitAsDefaultInstance() {
}

TSingleDecorationItem::TSingleDecorationItem(const TSingleDecorationItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSingleDecorationItem)
}

void TSingleDecorationItem::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  tid_ = 0u;
  itemid_ = 0u;
  starlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSingleDecorationItem::~TSingleDecorationItem() {
  // @@protoc_insertion_point(destructor:pb.TSingleDecorationItem)
  SharedDtor();
}

void TSingleDecorationItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSingleDecorationItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSingleDecorationItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSingleDecorationItem_descriptor_;
}

const TSingleDecorationItem& TSingleDecorationItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TSingleDecorationItem* TSingleDecorationItem::default_instance_ = NULL;

TSingleDecorationItem* TSingleDecorationItem::New() const {
  return new TSingleDecorationItem;
}

void TSingleDecorationItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSingleDecorationItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pos_, starlv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSingleDecorationItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSingleDecorationItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Tid;
        break;
      }

      // optional uint32 Tid = 2;
      case 2: {
        if (tag == 16) {
         parse_Tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ItemId;
        break;
      }

      // optional uint32 ItemId = 3;
      case 3: {
        if (tag == 24) {
         parse_ItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_StarLv;
        break;
      }

      // optional uint32 StarLv = 4;
      case 4: {
        if (tag == 32) {
         parse_StarLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSingleDecorationItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSingleDecorationItem)
  return false;
#undef DO_
}

void TSingleDecorationItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSingleDecorationItem)
  // optional uint32 Pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // optional uint32 Tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
  }

  // optional uint32 ItemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  // optional uint32 StarLv = 4;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->starlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSingleDecorationItem)
}

::google::protobuf::uint8* TSingleDecorationItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSingleDecorationItem)
  // optional uint32 Pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // optional uint32 Tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tid(), target);
  }

  // optional uint32 ItemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  // optional uint32 StarLv = 4;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->starlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSingleDecorationItem)
  return target;
}

int TSingleDecorationItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 Tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint32 ItemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 StarLv = 4;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSingleDecorationItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSingleDecorationItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSingleDecorationItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSingleDecorationItem::MergeFrom(const TSingleDecorationItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSingleDecorationItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSingleDecorationItem::CopyFrom(const TSingleDecorationItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSingleDecorationItem::IsInitialized() const {

  return true;
}

void TSingleDecorationItem::Swap(TSingleDecorationItem* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(tid_, other->tid_);
    std::swap(itemid_, other->itemid_);
    std::swap(starlv_, other->starlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSingleDecorationItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSingleDecorationItem_descriptor_;
  metadata.reflection = TSingleDecorationItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSingleBarrackInfo::kHidFieldNumber;
const int TSingleBarrackInfo::kDecorationArrFieldNumber;
const int TSingleBarrackInfo::kHtidFieldNumber;
#endif  // !_MSC_VER

TSingleBarrackInfo::TSingleBarrackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSingleBarrackInfo)
}

void TSingleBarrackInfo::InitAsDefaultInstance() {
}

TSingleBarrackInfo::TSingleBarrackInfo(const TSingleBarrackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSingleBarrackInfo)
}

void TSingleBarrackInfo::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  htid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSingleBarrackInfo::~TSingleBarrackInfo() {
  // @@protoc_insertion_point(destructor:pb.TSingleBarrackInfo)
  SharedDtor();
}

void TSingleBarrackInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSingleBarrackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSingleBarrackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSingleBarrackInfo_descriptor_;
}

const TSingleBarrackInfo& TSingleBarrackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TSingleBarrackInfo* TSingleBarrackInfo::default_instance_ = NULL;

TSingleBarrackInfo* TSingleBarrackInfo::New() const {
  return new TSingleBarrackInfo;
}

void TSingleBarrackInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSingleBarrackInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hid_, htid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  decorationarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSingleBarrackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSingleBarrackInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DecorationArr;
        break;
      }

      // repeated .pb.TSingleDecorationItem DecorationArr = 2;
      case 2: {
        if (tag == 18) {
         parse_DecorationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_decorationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DecorationArr;
        if (input->ExpectTag(24)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 3;
      case 3: {
        if (tag == 24) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSingleBarrackInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSingleBarrackInfo)
  return false;
#undef DO_
}

void TSingleBarrackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSingleBarrackInfo)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // repeated .pb.TSingleDecorationItem DecorationArr = 2;
  for (int i = 0; i < this->decorationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->decorationarr(i), output);
  }

  // optional uint32 Htid = 3;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->htid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSingleBarrackInfo)
}

::google::protobuf::uint8* TSingleBarrackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSingleBarrackInfo)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // repeated .pb.TSingleDecorationItem DecorationArr = 2;
  for (int i = 0; i < this->decorationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->decorationarr(i), target);
  }

  // optional uint32 Htid = 3;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->htid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSingleBarrackInfo)
  return target;
}

int TSingleBarrackInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 Htid = 3;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

  }
  // repeated .pb.TSingleDecorationItem DecorationArr = 2;
  total_size += 1 * this->decorationarr_size();
  for (int i = 0; i < this->decorationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->decorationarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSingleBarrackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSingleBarrackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSingleBarrackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSingleBarrackInfo::MergeFrom(const TSingleBarrackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  decorationarr_.MergeFrom(from.decorationarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSingleBarrackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSingleBarrackInfo::CopyFrom(const TSingleBarrackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSingleBarrackInfo::IsInitialized() const {

  return true;
}

void TSingleBarrackInfo::Swap(TSingleBarrackInfo* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    decorationarr_.Swap(&other->decorationarr_);
    std::swap(htid_, other->htid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSingleBarrackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSingleBarrackInfo_descriptor_;
  metadata.reflection = TSingleBarrackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSingleBarrackPos::kHidFieldNumber;
const int TSingleBarrackPos::kPosFieldNumber;
const int TSingleBarrackPos::kHtidFieldNumber;
#endif  // !_MSC_VER

TSingleBarrackPos::TSingleBarrackPos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSingleBarrackPos)
}

void TSingleBarrackPos::InitAsDefaultInstance() {
}

TSingleBarrackPos::TSingleBarrackPos(const TSingleBarrackPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSingleBarrackPos)
}

void TSingleBarrackPos::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  pos_ = 0u;
  htid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSingleBarrackPos::~TSingleBarrackPos() {
  // @@protoc_insertion_point(destructor:pb.TSingleBarrackPos)
  SharedDtor();
}

void TSingleBarrackPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSingleBarrackPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSingleBarrackPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSingleBarrackPos_descriptor_;
}

const TSingleBarrackPos& TSingleBarrackPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TSingleBarrackPos* TSingleBarrackPos::default_instance_ = NULL;

TSingleBarrackPos* TSingleBarrackPos::New() const {
  return new TSingleBarrackPos;
}

void TSingleBarrackPos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSingleBarrackPos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hid_, htid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSingleBarrackPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSingleBarrackPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // optional uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 3;
      case 3: {
        if (tag == 24) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSingleBarrackPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSingleBarrackPos)
  return false;
#undef DO_
}

void TSingleBarrackPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSingleBarrackPos)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint32 Htid = 3;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->htid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSingleBarrackPos)
}

::google::protobuf::uint8* TSingleBarrackPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSingleBarrackPos)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint32 Htid = 3;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->htid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSingleBarrackPos)
  return target;
}

int TSingleBarrackPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 Htid = 3;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSingleBarrackPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSingleBarrackPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSingleBarrackPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSingleBarrackPos::MergeFrom(const TSingleBarrackPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSingleBarrackPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSingleBarrackPos::CopyFrom(const TSingleBarrackPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSingleBarrackPos::IsInitialized() const {

  return true;
}

void TSingleBarrackPos::Swap(TSingleBarrackPos* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(pos_, other->pos_);
    std::swap(htid_, other->htid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSingleBarrackPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSingleBarrackPos_descriptor_;
  metadata.reflection = TSingleBarrackPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackGetInfoRsp::kArrBarrackFieldNumber;
const int TBarrackGetInfoRsp::kFreeTimeTodayFieldNumber;
const int TBarrackGetInfoRsp::kPriorityQueueFieldNumber;
const int TBarrackGetInfoRsp::kMaxBarrackFieldNumber;
const int TBarrackGetInfoRsp::kRefreshTimeFieldNumber;
const int TBarrackGetInfoRsp::kBarrackPosArrFieldNumber;
const int TBarrackGetInfoRsp::kReceivedFriendFieldNumber;
#endif  // !_MSC_VER

TBarrackGetInfoRsp::TBarrackGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackGetInfoRsp)
}

void TBarrackGetInfoRsp::InitAsDefaultInstance() {
}

TBarrackGetInfoRsp::TBarrackGetInfoRsp(const TBarrackGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackGetInfoRsp)
}

void TBarrackGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  freetimetoday_ = 0u;
  maxbarrack_ = 0u;
  refreshtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackGetInfoRsp::~TBarrackGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TBarrackGetInfoRsp)
  SharedDtor();
}

void TBarrackGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBarrackGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackGetInfoRsp_descriptor_;
}

const TBarrackGetInfoRsp& TBarrackGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackGetInfoRsp* TBarrackGetInfoRsp::default_instance_ = NULL;

TBarrackGetInfoRsp* TBarrackGetInfoRsp::New() const {
  return new TBarrackGetInfoRsp;
}

void TBarrackGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBarrackGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(freetimetoday_, refreshtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrbarrack_.Clear();
  priorityqueue_.Clear();
  barrackposarr_.Clear();
  receivedfriend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TSingleBarrackInfo ArrBarrack = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrBarrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrbarrack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrBarrack;
        if (input->ExpectTag(16)) goto parse_FreeTimeToday;
        break;
      }

      // optional uint32 FreeTimeToday = 2;
      case 2: {
        if (tag == 16) {
         parse_FreeTimeToday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freetimetoday_)));
          set_has_freetimetoday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PriorityQueue;
        break;
      }

      // repeated .pb.TPriorityQueue PriorityQueue = 3;
      case 3: {
        if (tag == 26) {
         parse_PriorityQueue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_priorityqueue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PriorityQueue;
        if (input->ExpectTag(32)) goto parse_MaxBarrack;
        break;
      }

      // optional uint32 MaxBarrack = 4;
      case 4: {
        if (tag == 32) {
         parse_MaxBarrack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxbarrack_)));
          set_has_maxbarrack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_RefreshTime;
        break;
      }

      // optional uint64 RefreshTime = 5;
      case 5: {
        if (tag == 40) {
         parse_RefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_BarrackPosArr;
        break;
      }

      // repeated .pb.TSingleBarrackPos BarrackPosArr = 6;
      case 6: {
        if (tag == 50) {
         parse_BarrackPosArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_barrackposarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_BarrackPosArr;
        if (input->ExpectTag(56)) goto parse_ReceivedFriend;
        break;
      }

      // repeated uint64 ReceivedFriend = 7;
      case 7: {
        if (tag == 56) {
         parse_ReceivedFriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_receivedfriend())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_receivedfriend())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ReceivedFriend;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackGetInfoRsp)
  return false;
#undef DO_
}

void TBarrackGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackGetInfoRsp)
  // repeated .pb.TSingleBarrackInfo ArrBarrack = 1;
  for (int i = 0; i < this->arrbarrack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrbarrack(i), output);
  }

  // optional uint32 FreeTimeToday = 2;
  if (has_freetimetoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->freetimetoday(), output);
  }

  // repeated .pb.TPriorityQueue PriorityQueue = 3;
  for (int i = 0; i < this->priorityqueue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->priorityqueue(i), output);
  }

  // optional uint32 MaxBarrack = 4;
  if (has_maxbarrack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxbarrack(), output);
  }

  // optional uint64 RefreshTime = 5;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->refreshtime(), output);
  }

  // repeated .pb.TSingleBarrackPos BarrackPosArr = 6;
  for (int i = 0; i < this->barrackposarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->barrackposarr(i), output);
  }

  // repeated uint64 ReceivedFriend = 7;
  for (int i = 0; i < this->receivedfriend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->receivedfriend(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackGetInfoRsp)
}

::google::protobuf::uint8* TBarrackGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackGetInfoRsp)
  // repeated .pb.TSingleBarrackInfo ArrBarrack = 1;
  for (int i = 0; i < this->arrbarrack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrbarrack(i), target);
  }

  // optional uint32 FreeTimeToday = 2;
  if (has_freetimetoday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->freetimetoday(), target);
  }

  // repeated .pb.TPriorityQueue PriorityQueue = 3;
  for (int i = 0; i < this->priorityqueue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->priorityqueue(i), target);
  }

  // optional uint32 MaxBarrack = 4;
  if (has_maxbarrack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxbarrack(), target);
  }

  // optional uint64 RefreshTime = 5;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->refreshtime(), target);
  }

  // repeated .pb.TSingleBarrackPos BarrackPosArr = 6;
  for (int i = 0; i < this->barrackposarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->barrackposarr(i), target);
  }

  // repeated uint64 ReceivedFriend = 7;
  for (int i = 0; i < this->receivedfriend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->receivedfriend(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackGetInfoRsp)
  return target;
}

int TBarrackGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 FreeTimeToday = 2;
    if (has_freetimetoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freetimetoday());
    }

    // optional uint32 MaxBarrack = 4;
    if (has_maxbarrack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxbarrack());
    }

    // optional uint64 RefreshTime = 5;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refreshtime());
    }

  }
  // repeated .pb.TSingleBarrackInfo ArrBarrack = 1;
  total_size += 1 * this->arrbarrack_size();
  for (int i = 0; i < this->arrbarrack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrbarrack(i));
  }

  // repeated .pb.TPriorityQueue PriorityQueue = 3;
  total_size += 1 * this->priorityqueue_size();
  for (int i = 0; i < this->priorityqueue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->priorityqueue(i));
  }

  // repeated .pb.TSingleBarrackPos BarrackPosArr = 6;
  total_size += 1 * this->barrackposarr_size();
  for (int i = 0; i < this->barrackposarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->barrackposarr(i));
  }

  // repeated uint64 ReceivedFriend = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->receivedfriend_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->receivedfriend(i));
    }
    total_size += 1 * this->receivedfriend_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackGetInfoRsp::MergeFrom(const TBarrackGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrbarrack_.MergeFrom(from.arrbarrack_);
  priorityqueue_.MergeFrom(from.priorityqueue_);
  barrackposarr_.MergeFrom(from.barrackposarr_);
  receivedfriend_.MergeFrom(from.receivedfriend_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_freetimetoday()) {
      set_freetimetoday(from.freetimetoday());
    }
    if (from.has_maxbarrack()) {
      set_maxbarrack(from.maxbarrack());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackGetInfoRsp::CopyFrom(const TBarrackGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackGetInfoRsp::IsInitialized() const {

  return true;
}

void TBarrackGetInfoRsp::Swap(TBarrackGetInfoRsp* other) {
  if (other != this) {
    arrbarrack_.Swap(&other->arrbarrack_);
    std::swap(freetimetoday_, other->freetimetoday_);
    priorityqueue_.Swap(&other->priorityqueue_);
    std::swap(maxbarrack_, other->maxbarrack_);
    std::swap(refreshtime_, other->refreshtime_);
    barrackposarr_.Swap(&other->barrackposarr_);
    receivedfriend_.Swap(&other->receivedfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackGetInfoRsp_descriptor_;
  metadata.reflection = TBarrackGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackEquipDecorationReq::kHidFieldNumber;
const int TBarrackEquipDecorationReq::kDecorationItemArrFieldNumber;
#endif  // !_MSC_VER

TBarrackEquipDecorationReq::TBarrackEquipDecorationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackEquipDecorationReq)
}

void TBarrackEquipDecorationReq::InitAsDefaultInstance() {
}

TBarrackEquipDecorationReq::TBarrackEquipDecorationReq(const TBarrackEquipDecorationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackEquipDecorationReq)
}

void TBarrackEquipDecorationReq::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackEquipDecorationReq::~TBarrackEquipDecorationReq() {
  // @@protoc_insertion_point(destructor:pb.TBarrackEquipDecorationReq)
  SharedDtor();
}

void TBarrackEquipDecorationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBarrackEquipDecorationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackEquipDecorationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackEquipDecorationReq_descriptor_;
}

const TBarrackEquipDecorationReq& TBarrackEquipDecorationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackEquipDecorationReq* TBarrackEquipDecorationReq::default_instance_ = NULL;

TBarrackEquipDecorationReq* TBarrackEquipDecorationReq::New() const {
  return new TBarrackEquipDecorationReq;
}

void TBarrackEquipDecorationReq::Clear() {
  hid_ = 0u;
  decorationitemarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackEquipDecorationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackEquipDecorationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DecorationItemArr;
        break;
      }

      // repeated .pb.TSingleDecorationItem DecorationItemArr = 2;
      case 2: {
        if (tag == 18) {
         parse_DecorationItemArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_decorationitemarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DecorationItemArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackEquipDecorationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackEquipDecorationReq)
  return false;
#undef DO_
}

void TBarrackEquipDecorationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackEquipDecorationReq)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // repeated .pb.TSingleDecorationItem DecorationItemArr = 2;
  for (int i = 0; i < this->decorationitemarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->decorationitemarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackEquipDecorationReq)
}

::google::protobuf::uint8* TBarrackEquipDecorationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackEquipDecorationReq)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // repeated .pb.TSingleDecorationItem DecorationItemArr = 2;
  for (int i = 0; i < this->decorationitemarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->decorationitemarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackEquipDecorationReq)
  return target;
}

int TBarrackEquipDecorationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

  }
  // repeated .pb.TSingleDecorationItem DecorationItemArr = 2;
  total_size += 1 * this->decorationitemarr_size();
  for (int i = 0; i < this->decorationitemarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->decorationitemarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackEquipDecorationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackEquipDecorationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackEquipDecorationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackEquipDecorationReq::MergeFrom(const TBarrackEquipDecorationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  decorationitemarr_.MergeFrom(from.decorationitemarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackEquipDecorationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackEquipDecorationReq::CopyFrom(const TBarrackEquipDecorationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackEquipDecorationReq::IsInitialized() const {

  return true;
}

void TBarrackEquipDecorationReq::Swap(TBarrackEquipDecorationReq* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    decorationitemarr_.Swap(&other->decorationitemarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackEquipDecorationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackEquipDecorationReq_descriptor_;
  metadata.reflection = TBarrackEquipDecorationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPriorityQueue::kPriorityLevFieldNumber;
const int TPriorityQueue::kHidFieldNumber;
#endif  // !_MSC_VER

TPriorityQueue::TPriorityQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPriorityQueue)
}

void TPriorityQueue::InitAsDefaultInstance() {
}

TPriorityQueue::TPriorityQueue(const TPriorityQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPriorityQueue)
}

void TPriorityQueue::SharedCtor() {
  _cached_size_ = 0;
  prioritylev_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPriorityQueue::~TPriorityQueue() {
  // @@protoc_insertion_point(destructor:pb.TPriorityQueue)
  SharedDtor();
}

void TPriorityQueue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPriorityQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPriorityQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPriorityQueue_descriptor_;
}

const TPriorityQueue& TPriorityQueue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TPriorityQueue* TPriorityQueue::default_instance_ = NULL;

TPriorityQueue* TPriorityQueue::New() const {
  return new TPriorityQueue;
}

void TPriorityQueue::Clear() {
  prioritylev_ = 1;
  hid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPriorityQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPriorityQueue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.Priority PriorityLev = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Priority_IsValid(value)) {
            set_prioritylev(static_cast< ::pb::Priority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Hid;
        break;
      }

      // repeated uint32 Hid = 2;
      case 2: {
        if (tag == 16) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Hid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPriorityQueue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPriorityQueue)
  return false;
#undef DO_
}

void TPriorityQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPriorityQueue)
  // optional .pb.Priority PriorityLev = 1;
  if (has_prioritylev()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->prioritylev(), output);
  }

  // repeated uint32 Hid = 2;
  for (int i = 0; i < this->hid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPriorityQueue)
}

::google::protobuf::uint8* TPriorityQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPriorityQueue)
  // optional .pb.Priority PriorityLev = 1;
  if (has_prioritylev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->prioritylev(), target);
  }

  // repeated uint32 Hid = 2;
  for (int i = 0; i < this->hid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->hid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPriorityQueue)
  return target;
}

int TPriorityQueue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.Priority PriorityLev = 1;
    if (has_prioritylev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prioritylev());
    }

  }
  // repeated uint32 Hid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hid(i));
    }
    total_size += 1 * this->hid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPriorityQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPriorityQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPriorityQueue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPriorityQueue::MergeFrom(const TPriorityQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  hid_.MergeFrom(from.hid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prioritylev()) {
      set_prioritylev(from.prioritylev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPriorityQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPriorityQueue::CopyFrom(const TPriorityQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPriorityQueue::IsInitialized() const {

  return true;
}

void TPriorityQueue::Swap(TPriorityQueue* other) {
  if (other != this) {
    std::swap(prioritylev_, other->prioritylev_);
    hid_.Swap(&other->hid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPriorityQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPriorityQueue_descriptor_;
  metadata.reflection = TPriorityQueue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackAutoEquipDecorationReq::kPriorityQueueFieldNumber;
#endif  // !_MSC_VER

TBarrackAutoEquipDecorationReq::TBarrackAutoEquipDecorationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackAutoEquipDecorationReq)
}

void TBarrackAutoEquipDecorationReq::InitAsDefaultInstance() {
}

TBarrackAutoEquipDecorationReq::TBarrackAutoEquipDecorationReq(const TBarrackAutoEquipDecorationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackAutoEquipDecorationReq)
}

void TBarrackAutoEquipDecorationReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackAutoEquipDecorationReq::~TBarrackAutoEquipDecorationReq() {
  // @@protoc_insertion_point(destructor:pb.TBarrackAutoEquipDecorationReq)
  SharedDtor();
}

void TBarrackAutoEquipDecorationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBarrackAutoEquipDecorationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackAutoEquipDecorationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackAutoEquipDecorationReq_descriptor_;
}

const TBarrackAutoEquipDecorationReq& TBarrackAutoEquipDecorationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackAutoEquipDecorationReq* TBarrackAutoEquipDecorationReq::default_instance_ = NULL;

TBarrackAutoEquipDecorationReq* TBarrackAutoEquipDecorationReq::New() const {
  return new TBarrackAutoEquipDecorationReq;
}

void TBarrackAutoEquipDecorationReq::Clear() {
  priorityqueue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackAutoEquipDecorationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackAutoEquipDecorationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPriorityQueue PriorityQueue = 1;
      case 1: {
        if (tag == 10) {
         parse_PriorityQueue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_priorityqueue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_PriorityQueue;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackAutoEquipDecorationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackAutoEquipDecorationReq)
  return false;
#undef DO_
}

void TBarrackAutoEquipDecorationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackAutoEquipDecorationReq)
  // repeated .pb.TPriorityQueue PriorityQueue = 1;
  for (int i = 0; i < this->priorityqueue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->priorityqueue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackAutoEquipDecorationReq)
}

::google::protobuf::uint8* TBarrackAutoEquipDecorationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackAutoEquipDecorationReq)
  // repeated .pb.TPriorityQueue PriorityQueue = 1;
  for (int i = 0; i < this->priorityqueue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->priorityqueue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackAutoEquipDecorationReq)
  return target;
}

int TBarrackAutoEquipDecorationReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPriorityQueue PriorityQueue = 1;
  total_size += 1 * this->priorityqueue_size();
  for (int i = 0; i < this->priorityqueue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->priorityqueue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackAutoEquipDecorationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackAutoEquipDecorationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackAutoEquipDecorationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackAutoEquipDecorationReq::MergeFrom(const TBarrackAutoEquipDecorationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  priorityqueue_.MergeFrom(from.priorityqueue_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackAutoEquipDecorationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackAutoEquipDecorationReq::CopyFrom(const TBarrackAutoEquipDecorationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackAutoEquipDecorationReq::IsInitialized() const {

  return true;
}

void TBarrackAutoEquipDecorationReq::Swap(TBarrackAutoEquipDecorationReq* other) {
  if (other != this) {
    priorityqueue_.Swap(&other->priorityqueue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackAutoEquipDecorationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackAutoEquipDecorationReq_descriptor_;
  metadata.reflection = TBarrackAutoEquipDecorationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackAutoEquipDecorationRsp::kBarrackFieldNumber;
#endif  // !_MSC_VER

TBarrackAutoEquipDecorationRsp::TBarrackAutoEquipDecorationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackAutoEquipDecorationRsp)
}

void TBarrackAutoEquipDecorationRsp::InitAsDefaultInstance() {
}

TBarrackAutoEquipDecorationRsp::TBarrackAutoEquipDecorationRsp(const TBarrackAutoEquipDecorationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackAutoEquipDecorationRsp)
}

void TBarrackAutoEquipDecorationRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackAutoEquipDecorationRsp::~TBarrackAutoEquipDecorationRsp() {
  // @@protoc_insertion_point(destructor:pb.TBarrackAutoEquipDecorationRsp)
  SharedDtor();
}

void TBarrackAutoEquipDecorationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBarrackAutoEquipDecorationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackAutoEquipDecorationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackAutoEquipDecorationRsp_descriptor_;
}

const TBarrackAutoEquipDecorationRsp& TBarrackAutoEquipDecorationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackAutoEquipDecorationRsp* TBarrackAutoEquipDecorationRsp::default_instance_ = NULL;

TBarrackAutoEquipDecorationRsp* TBarrackAutoEquipDecorationRsp::New() const {
  return new TBarrackAutoEquipDecorationRsp;
}

void TBarrackAutoEquipDecorationRsp::Clear() {
  barrack_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackAutoEquipDecorationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackAutoEquipDecorationRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TSingleBarrackInfo Barrack = 1;
      case 1: {
        if (tag == 10) {
         parse_Barrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_barrack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Barrack;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackAutoEquipDecorationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackAutoEquipDecorationRsp)
  return false;
#undef DO_
}

void TBarrackAutoEquipDecorationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackAutoEquipDecorationRsp)
  // repeated .pb.TSingleBarrackInfo Barrack = 1;
  for (int i = 0; i < this->barrack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->barrack(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackAutoEquipDecorationRsp)
}

::google::protobuf::uint8* TBarrackAutoEquipDecorationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackAutoEquipDecorationRsp)
  // repeated .pb.TSingleBarrackInfo Barrack = 1;
  for (int i = 0; i < this->barrack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->barrack(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackAutoEquipDecorationRsp)
  return target;
}

int TBarrackAutoEquipDecorationRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TSingleBarrackInfo Barrack = 1;
  total_size += 1 * this->barrack_size();
  for (int i = 0; i < this->barrack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->barrack(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackAutoEquipDecorationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackAutoEquipDecorationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackAutoEquipDecorationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackAutoEquipDecorationRsp::MergeFrom(const TBarrackAutoEquipDecorationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  barrack_.MergeFrom(from.barrack_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackAutoEquipDecorationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackAutoEquipDecorationRsp::CopyFrom(const TBarrackAutoEquipDecorationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackAutoEquipDecorationRsp::IsInitialized() const {

  return true;
}

void TBarrackAutoEquipDecorationRsp::Swap(TBarrackAutoEquipDecorationRsp* other) {
  if (other != this) {
    barrack_.Swap(&other->barrack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackAutoEquipDecorationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackAutoEquipDecorationRsp_descriptor_;
  metadata.reflection = TBarrackAutoEquipDecorationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackLotteryReq::kLotteryTypeFieldNumber;
#endif  // !_MSC_VER

TBarrackLotteryReq::TBarrackLotteryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackLotteryReq)
}

void TBarrackLotteryReq::InitAsDefaultInstance() {
}

TBarrackLotteryReq::TBarrackLotteryReq(const TBarrackLotteryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackLotteryReq)
}

void TBarrackLotteryReq::SharedCtor() {
  _cached_size_ = 0;
  lotterytype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackLotteryReq::~TBarrackLotteryReq() {
  // @@protoc_insertion_point(destructor:pb.TBarrackLotteryReq)
  SharedDtor();
}

void TBarrackLotteryReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBarrackLotteryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackLotteryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackLotteryReq_descriptor_;
}

const TBarrackLotteryReq& TBarrackLotteryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackLotteryReq* TBarrackLotteryReq::default_instance_ = NULL;

TBarrackLotteryReq* TBarrackLotteryReq::New() const {
  return new TBarrackLotteryReq;
}

void TBarrackLotteryReq::Clear() {
  lotterytype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackLotteryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackLotteryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LotteryType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lotterytype_)));
          set_has_lotterytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackLotteryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackLotteryReq)
  return false;
#undef DO_
}

void TBarrackLotteryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackLotteryReq)
  // optional uint32 LotteryType = 1;
  if (has_lotterytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lotterytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackLotteryReq)
}

::google::protobuf::uint8* TBarrackLotteryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackLotteryReq)
  // optional uint32 LotteryType = 1;
  if (has_lotterytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lotterytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackLotteryReq)
  return target;
}

int TBarrackLotteryReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LotteryType = 1;
    if (has_lotterytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lotterytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackLotteryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackLotteryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackLotteryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackLotteryReq::MergeFrom(const TBarrackLotteryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lotterytype()) {
      set_lotterytype(from.lotterytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackLotteryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackLotteryReq::CopyFrom(const TBarrackLotteryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackLotteryReq::IsInitialized() const {

  return true;
}

void TBarrackLotteryReq::Swap(TBarrackLotteryReq* other) {
  if (other != this) {
    std::swap(lotterytype_, other->lotterytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackLotteryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackLotteryReq_descriptor_;
  metadata.reflection = TBarrackLotteryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackLotteryRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TBarrackLotteryRsp::TBarrackLotteryRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackLotteryRsp)
}

void TBarrackLotteryRsp::InitAsDefaultInstance() {
}

TBarrackLotteryRsp::TBarrackLotteryRsp(const TBarrackLotteryRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackLotteryRsp)
}

void TBarrackLotteryRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackLotteryRsp::~TBarrackLotteryRsp() {
  // @@protoc_insertion_point(destructor:pb.TBarrackLotteryRsp)
  SharedDtor();
}

void TBarrackLotteryRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBarrackLotteryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackLotteryRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackLotteryRsp_descriptor_;
}

const TBarrackLotteryRsp& TBarrackLotteryRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackLotteryRsp* TBarrackLotteryRsp::default_instance_ = NULL;

TBarrackLotteryRsp* TBarrackLotteryRsp::New() const {
  return new TBarrackLotteryRsp;
}

void TBarrackLotteryRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackLotteryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackLotteryRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackLotteryRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackLotteryRsp)
  return false;
#undef DO_
}

void TBarrackLotteryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackLotteryRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackLotteryRsp)
}

::google::protobuf::uint8* TBarrackLotteryRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackLotteryRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackLotteryRsp)
  return target;
}

int TBarrackLotteryRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackLotteryRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackLotteryRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackLotteryRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackLotteryRsp::MergeFrom(const TBarrackLotteryRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackLotteryRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackLotteryRsp::CopyFrom(const TBarrackLotteryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackLotteryRsp::IsInitialized() const {

  return true;
}

void TBarrackLotteryRsp::Swap(TBarrackLotteryRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackLotteryRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackLotteryRsp_descriptor_;
  metadata.reflection = TBarrackLotteryRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackSwapBarrackPosReq::kHidArrFieldNumber;
#endif  // !_MSC_VER

TBarrackSwapBarrackPosReq::TBarrackSwapBarrackPosReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackSwapBarrackPosReq)
}

void TBarrackSwapBarrackPosReq::InitAsDefaultInstance() {
}

TBarrackSwapBarrackPosReq::TBarrackSwapBarrackPosReq(const TBarrackSwapBarrackPosReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackSwapBarrackPosReq)
}

void TBarrackSwapBarrackPosReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackSwapBarrackPosReq::~TBarrackSwapBarrackPosReq() {
  // @@protoc_insertion_point(destructor:pb.TBarrackSwapBarrackPosReq)
  SharedDtor();
}

void TBarrackSwapBarrackPosReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBarrackSwapBarrackPosReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackSwapBarrackPosReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackSwapBarrackPosReq_descriptor_;
}

const TBarrackSwapBarrackPosReq& TBarrackSwapBarrackPosReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackSwapBarrackPosReq* TBarrackSwapBarrackPosReq::default_instance_ = NULL;

TBarrackSwapBarrackPosReq* TBarrackSwapBarrackPosReq::New() const {
  return new TBarrackSwapBarrackPosReq;
}

void TBarrackSwapBarrackPosReq::Clear() {
  hidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackSwapBarrackPosReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackSwapBarrackPosReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 HidArr = 1;
      case 1: {
        if (tag == 8) {
         parse_HidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_hidarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_HidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackSwapBarrackPosReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackSwapBarrackPosReq)
  return false;
#undef DO_
}

void TBarrackSwapBarrackPosReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackSwapBarrackPosReq)
  // repeated uint32 HidArr = 1;
  for (int i = 0; i < this->hidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->hidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackSwapBarrackPosReq)
}

::google::protobuf::uint8* TBarrackSwapBarrackPosReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackSwapBarrackPosReq)
  // repeated uint32 HidArr = 1;
  for (int i = 0; i < this->hidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->hidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackSwapBarrackPosReq)
  return target;
}

int TBarrackSwapBarrackPosReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 HidArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hidarr(i));
    }
    total_size += 1 * this->hidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackSwapBarrackPosReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackSwapBarrackPosReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackSwapBarrackPosReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackSwapBarrackPosReq::MergeFrom(const TBarrackSwapBarrackPosReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  hidarr_.MergeFrom(from.hidarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackSwapBarrackPosReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackSwapBarrackPosReq::CopyFrom(const TBarrackSwapBarrackPosReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackSwapBarrackPosReq::IsInitialized() const {

  return true;
}

void TBarrackSwapBarrackPosReq::Swap(TBarrackSwapBarrackPosReq* other) {
  if (other != this) {
    hidarr_.Swap(&other->hidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackSwapBarrackPosReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackSwapBarrackPosReq_descriptor_;
  metadata.reflection = TBarrackSwapBarrackPosReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackChangeNotify::kBarrackFieldNumber;
const int TBarrackChangeNotify::kPriorityQueueFieldNumber;
const int TBarrackChangeNotify::kDelHidFieldNumber;
const int TBarrackChangeNotify::kMaxBarrackFieldNumber;
const int TBarrackChangeNotify::kBarrackPosArrFieldNumber;
#endif  // !_MSC_VER

TBarrackChangeNotify::TBarrackChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackChangeNotify)
}

void TBarrackChangeNotify::InitAsDefaultInstance() {
}

TBarrackChangeNotify::TBarrackChangeNotify(const TBarrackChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackChangeNotify)
}

void TBarrackChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  maxbarrack_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackChangeNotify::~TBarrackChangeNotify() {
  // @@protoc_insertion_point(destructor:pb.TBarrackChangeNotify)
  SharedDtor();
}

void TBarrackChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBarrackChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackChangeNotify_descriptor_;
}

const TBarrackChangeNotify& TBarrackChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackChangeNotify* TBarrackChangeNotify::default_instance_ = NULL;

TBarrackChangeNotify* TBarrackChangeNotify::New() const {
  return new TBarrackChangeNotify;
}

void TBarrackChangeNotify::Clear() {
  maxbarrack_ = 0u;
  barrack_.Clear();
  priorityqueue_.Clear();
  delhid_.Clear();
  barrackposarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackChangeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TSingleBarrackInfo Barrack = 1;
      case 1: {
        if (tag == 10) {
         parse_Barrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_barrack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Barrack;
        if (input->ExpectTag(18)) goto parse_PriorityQueue;
        break;
      }

      // repeated .pb.TPriorityQueue PriorityQueue = 2;
      case 2: {
        if (tag == 18) {
         parse_PriorityQueue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_priorityqueue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PriorityQueue;
        if (input->ExpectTag(24)) goto parse_DelHid;
        break;
      }

      // repeated uint32 DelHid = 3;
      case 3: {
        if (tag == 24) {
         parse_DelHid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_delhid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_delhid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DelHid;
        if (input->ExpectTag(32)) goto parse_MaxBarrack;
        break;
      }

      // optional uint32 MaxBarrack = 4;
      case 4: {
        if (tag == 32) {
         parse_MaxBarrack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxbarrack_)));
          set_has_maxbarrack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_BarrackPosArr;
        break;
      }

      // repeated .pb.TSingleBarrackPos BarrackPosArr = 5;
      case 5: {
        if (tag == 42) {
         parse_BarrackPosArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_barrackposarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_BarrackPosArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackChangeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackChangeNotify)
  return false;
#undef DO_
}

void TBarrackChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackChangeNotify)
  // repeated .pb.TSingleBarrackInfo Barrack = 1;
  for (int i = 0; i < this->barrack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->barrack(i), output);
  }

  // repeated .pb.TPriorityQueue PriorityQueue = 2;
  for (int i = 0; i < this->priorityqueue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->priorityqueue(i), output);
  }

  // repeated uint32 DelHid = 3;
  for (int i = 0; i < this->delhid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->delhid(i), output);
  }

  // optional uint32 MaxBarrack = 4;
  if (has_maxbarrack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxbarrack(), output);
  }

  // repeated .pb.TSingleBarrackPos BarrackPosArr = 5;
  for (int i = 0; i < this->barrackposarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->barrackposarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackChangeNotify)
}

::google::protobuf::uint8* TBarrackChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackChangeNotify)
  // repeated .pb.TSingleBarrackInfo Barrack = 1;
  for (int i = 0; i < this->barrack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->barrack(i), target);
  }

  // repeated .pb.TPriorityQueue PriorityQueue = 2;
  for (int i = 0; i < this->priorityqueue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->priorityqueue(i), target);
  }

  // repeated uint32 DelHid = 3;
  for (int i = 0; i < this->delhid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->delhid(i), target);
  }

  // optional uint32 MaxBarrack = 4;
  if (has_maxbarrack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxbarrack(), target);
  }

  // repeated .pb.TSingleBarrackPos BarrackPosArr = 5;
  for (int i = 0; i < this->barrackposarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->barrackposarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackChangeNotify)
  return target;
}

int TBarrackChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 MaxBarrack = 4;
    if (has_maxbarrack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxbarrack());
    }

  }
  // repeated .pb.TSingleBarrackInfo Barrack = 1;
  total_size += 1 * this->barrack_size();
  for (int i = 0; i < this->barrack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->barrack(i));
  }

  // repeated .pb.TPriorityQueue PriorityQueue = 2;
  total_size += 1 * this->priorityqueue_size();
  for (int i = 0; i < this->priorityqueue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->priorityqueue(i));
  }

  // repeated uint32 DelHid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->delhid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->delhid(i));
    }
    total_size += 1 * this->delhid_size() + data_size;
  }

  // repeated .pb.TSingleBarrackPos BarrackPosArr = 5;
  total_size += 1 * this->barrackposarr_size();
  for (int i = 0; i < this->barrackposarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->barrackposarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackChangeNotify::MergeFrom(const TBarrackChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  barrack_.MergeFrom(from.barrack_);
  priorityqueue_.MergeFrom(from.priorityqueue_);
  delhid_.MergeFrom(from.delhid_);
  barrackposarr_.MergeFrom(from.barrackposarr_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_maxbarrack()) {
      set_maxbarrack(from.maxbarrack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackChangeNotify::CopyFrom(const TBarrackChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackChangeNotify::IsInitialized() const {

  return true;
}

void TBarrackChangeNotify::Swap(TBarrackChangeNotify* other) {
  if (other != this) {
    barrack_.Swap(&other->barrack_);
    priorityqueue_.Swap(&other->priorityqueue_);
    delhid_.Swap(&other->delhid_);
    std::swap(maxbarrack_, other->maxbarrack_);
    barrackposarr_.Swap(&other->barrackposarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackChangeNotify_descriptor_;
  metadata.reflection = TBarrackChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackServerRankInfo::kUserInfoFieldNumber;
const int TBarrackServerRankInfo::kBarrackScoreFieldNumber;
#endif  // !_MSC_VER

TBarrackServerRankInfo::TBarrackServerRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackServerRankInfo)
}

void TBarrackServerRankInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TBarrackServerRankInfo::TBarrackServerRankInfo(const TBarrackServerRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackServerRankInfo)
}

void TBarrackServerRankInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  barrackscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackServerRankInfo::~TBarrackServerRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TBarrackServerRankInfo)
  SharedDtor();
}

void TBarrackServerRankInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TBarrackServerRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackServerRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackServerRankInfo_descriptor_;
}

const TBarrackServerRankInfo& TBarrackServerRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackServerRankInfo* TBarrackServerRankInfo::default_instance_ = NULL;

TBarrackServerRankInfo* TBarrackServerRankInfo::New() const {
  return new TBarrackServerRankInfo;
}

void TBarrackServerRankInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    barrackscore_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackServerRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackServerRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BarrackScore;
        break;
      }

      // optional uint32 BarrackScore = 2;
      case 2: {
        if (tag == 16) {
         parse_BarrackScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &barrackscore_)));
          set_has_barrackscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackServerRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackServerRankInfo)
  return false;
#undef DO_
}

void TBarrackServerRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackServerRankInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 BarrackScore = 2;
  if (has_barrackscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->barrackscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackServerRankInfo)
}

::google::protobuf::uint8* TBarrackServerRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackServerRankInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 BarrackScore = 2;
  if (has_barrackscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->barrackscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackServerRankInfo)
  return target;
}

int TBarrackServerRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 BarrackScore = 2;
    if (has_barrackscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->barrackscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackServerRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackServerRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackServerRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackServerRankInfo::MergeFrom(const TBarrackServerRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_barrackscore()) {
      set_barrackscore(from.barrackscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackServerRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackServerRankInfo::CopyFrom(const TBarrackServerRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackServerRankInfo::IsInitialized() const {

  return true;
}

void TBarrackServerRankInfo::Swap(TBarrackServerRankInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(barrackscore_, other->barrackscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackServerRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackServerRankInfo_descriptor_;
  metadata.reflection = TBarrackServerRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackGetRankListReq::kOffsetFieldNumber;
const int TBarrackGetRankListReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TBarrackGetRankListReq::TBarrackGetRankListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackGetRankListReq)
}

void TBarrackGetRankListReq::InitAsDefaultInstance() {
}

TBarrackGetRankListReq::TBarrackGetRankListReq(const TBarrackGetRankListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackGetRankListReq)
}

void TBarrackGetRankListReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackGetRankListReq::~TBarrackGetRankListReq() {
  // @@protoc_insertion_point(destructor:pb.TBarrackGetRankListReq)
  SharedDtor();
}

void TBarrackGetRankListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBarrackGetRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackGetRankListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackGetRankListReq_descriptor_;
}

const TBarrackGetRankListReq& TBarrackGetRankListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackGetRankListReq* TBarrackGetRankListReq::default_instance_ = NULL;

TBarrackGetRankListReq* TBarrackGetRankListReq::New() const {
  return new TBarrackGetRankListReq;
}

void TBarrackGetRankListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBarrackGetRankListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackGetRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackGetRankListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackGetRankListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackGetRankListReq)
  return false;
#undef DO_
}

void TBarrackGetRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackGetRankListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackGetRankListReq)
}

::google::protobuf::uint8* TBarrackGetRankListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackGetRankListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackGetRankListReq)
  return target;
}

int TBarrackGetRankListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackGetRankListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackGetRankListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackGetRankListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackGetRankListReq::MergeFrom(const TBarrackGetRankListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackGetRankListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackGetRankListReq::CopyFrom(const TBarrackGetRankListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackGetRankListReq::IsInitialized() const {

  return true;
}

void TBarrackGetRankListReq::Swap(TBarrackGetRankListReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackGetRankListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackGetRankListReq_descriptor_;
  metadata.reflection = TBarrackGetRankListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackGetRankListRsp::kRankArrFieldNumber;
const int TBarrackGetRankListRsp::kMyRankFieldNumber;
const int TBarrackGetRankListRsp::kBarrackScoreFieldNumber;
#endif  // !_MSC_VER

TBarrackGetRankListRsp::TBarrackGetRankListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackGetRankListRsp)
}

void TBarrackGetRankListRsp::InitAsDefaultInstance() {
}

TBarrackGetRankListRsp::TBarrackGetRankListRsp(const TBarrackGetRankListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackGetRankListRsp)
}

void TBarrackGetRankListRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  barrackscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackGetRankListRsp::~TBarrackGetRankListRsp() {
  // @@protoc_insertion_point(destructor:pb.TBarrackGetRankListRsp)
  SharedDtor();
}

void TBarrackGetRankListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBarrackGetRankListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackGetRankListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackGetRankListRsp_descriptor_;
}

const TBarrackGetRankListRsp& TBarrackGetRankListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackGetRankListRsp* TBarrackGetRankListRsp::default_instance_ = NULL;

TBarrackGetRankListRsp* TBarrackGetRankListRsp::New() const {
  return new TBarrackGetRankListRsp;
}

void TBarrackGetRankListRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBarrackGetRankListRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(myrank_, barrackscore_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackGetRankListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackGetRankListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBarrackServerRankInfo RankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankArr;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional int32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BarrackScore;
        break;
      }

      // optional uint32 BarrackScore = 3;
      case 3: {
        if (tag == 24) {
         parse_BarrackScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &barrackscore_)));
          set_has_barrackscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackGetRankListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackGetRankListRsp)
  return false;
#undef DO_
}

void TBarrackGetRankListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackGetRankListRsp)
  // repeated .pb.TBarrackServerRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankarr(i), output);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }

  // optional uint32 BarrackScore = 3;
  if (has_barrackscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->barrackscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackGetRankListRsp)
}

::google::protobuf::uint8* TBarrackGetRankListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackGetRankListRsp)
  // repeated .pb.TBarrackServerRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankarr(i), target);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }

  // optional uint32 BarrackScore = 3;
  if (has_barrackscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->barrackscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackGetRankListRsp)
  return target;
}

int TBarrackGetRankListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

    // optional uint32 BarrackScore = 3;
    if (has_barrackscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->barrackscore());
    }

  }
  // repeated .pb.TBarrackServerRankInfo RankArr = 1;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackGetRankListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackGetRankListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackGetRankListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackGetRankListRsp::MergeFrom(const TBarrackGetRankListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_barrackscore()) {
      set_barrackscore(from.barrackscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackGetRankListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackGetRankListRsp::CopyFrom(const TBarrackGetRankListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackGetRankListRsp::IsInitialized() const {

  return true;
}

void TBarrackGetRankListRsp::Swap(TBarrackGetRankListRsp* other) {
  if (other != this) {
    rankarr_.Swap(&other->rankarr_);
    std::swap(myrank_, other->myrank_);
    std::swap(barrackscore_, other->barrackscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackGetRankListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackGetRankListRsp_descriptor_;
  metadata.reflection = TBarrackGetRankListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackGetTreasuerBoxAwardReq::kFriendUidFieldNumber;
#endif  // !_MSC_VER

TBarrackGetTreasuerBoxAwardReq::TBarrackGetTreasuerBoxAwardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackGetTreasuerBoxAwardReq)
}

void TBarrackGetTreasuerBoxAwardReq::InitAsDefaultInstance() {
}

TBarrackGetTreasuerBoxAwardReq::TBarrackGetTreasuerBoxAwardReq(const TBarrackGetTreasuerBoxAwardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackGetTreasuerBoxAwardReq)
}

void TBarrackGetTreasuerBoxAwardReq::SharedCtor() {
  _cached_size_ = 0;
  frienduid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackGetTreasuerBoxAwardReq::~TBarrackGetTreasuerBoxAwardReq() {
  // @@protoc_insertion_point(destructor:pb.TBarrackGetTreasuerBoxAwardReq)
  SharedDtor();
}

void TBarrackGetTreasuerBoxAwardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBarrackGetTreasuerBoxAwardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackGetTreasuerBoxAwardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackGetTreasuerBoxAwardReq_descriptor_;
}

const TBarrackGetTreasuerBoxAwardReq& TBarrackGetTreasuerBoxAwardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackGetTreasuerBoxAwardReq* TBarrackGetTreasuerBoxAwardReq::default_instance_ = NULL;

TBarrackGetTreasuerBoxAwardReq* TBarrackGetTreasuerBoxAwardReq::New() const {
  return new TBarrackGetTreasuerBoxAwardReq;
}

void TBarrackGetTreasuerBoxAwardReq::Clear() {
  frienduid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackGetTreasuerBoxAwardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackGetTreasuerBoxAwardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 FriendUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frienduid_)));
          set_has_frienduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackGetTreasuerBoxAwardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackGetTreasuerBoxAwardReq)
  return false;
#undef DO_
}

void TBarrackGetTreasuerBoxAwardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackGetTreasuerBoxAwardReq)
  // optional uint64 FriendUid = 1;
  if (has_frienduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->frienduid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackGetTreasuerBoxAwardReq)
}

::google::protobuf::uint8* TBarrackGetTreasuerBoxAwardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackGetTreasuerBoxAwardReq)
  // optional uint64 FriendUid = 1;
  if (has_frienduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->frienduid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackGetTreasuerBoxAwardReq)
  return target;
}

int TBarrackGetTreasuerBoxAwardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 FriendUid = 1;
    if (has_frienduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frienduid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackGetTreasuerBoxAwardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackGetTreasuerBoxAwardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackGetTreasuerBoxAwardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackGetTreasuerBoxAwardReq::MergeFrom(const TBarrackGetTreasuerBoxAwardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frienduid()) {
      set_frienduid(from.frienduid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackGetTreasuerBoxAwardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackGetTreasuerBoxAwardReq::CopyFrom(const TBarrackGetTreasuerBoxAwardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackGetTreasuerBoxAwardReq::IsInitialized() const {

  return true;
}

void TBarrackGetTreasuerBoxAwardReq::Swap(TBarrackGetTreasuerBoxAwardReq* other) {
  if (other != this) {
    std::swap(frienduid_, other->frienduid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackGetTreasuerBoxAwardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackGetTreasuerBoxAwardReq_descriptor_;
  metadata.reflection = TBarrackGetTreasuerBoxAwardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackGetTreasuerBoxAwardRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TBarrackGetTreasuerBoxAwardRsp::TBarrackGetTreasuerBoxAwardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackGetTreasuerBoxAwardRsp)
}

void TBarrackGetTreasuerBoxAwardRsp::InitAsDefaultInstance() {
}

TBarrackGetTreasuerBoxAwardRsp::TBarrackGetTreasuerBoxAwardRsp(const TBarrackGetTreasuerBoxAwardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackGetTreasuerBoxAwardRsp)
}

void TBarrackGetTreasuerBoxAwardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackGetTreasuerBoxAwardRsp::~TBarrackGetTreasuerBoxAwardRsp() {
  // @@protoc_insertion_point(destructor:pb.TBarrackGetTreasuerBoxAwardRsp)
  SharedDtor();
}

void TBarrackGetTreasuerBoxAwardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBarrackGetTreasuerBoxAwardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackGetTreasuerBoxAwardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackGetTreasuerBoxAwardRsp_descriptor_;
}

const TBarrackGetTreasuerBoxAwardRsp& TBarrackGetTreasuerBoxAwardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackGetTreasuerBoxAwardRsp* TBarrackGetTreasuerBoxAwardRsp::default_instance_ = NULL;

TBarrackGetTreasuerBoxAwardRsp* TBarrackGetTreasuerBoxAwardRsp::New() const {
  return new TBarrackGetTreasuerBoxAwardRsp;
}

void TBarrackGetTreasuerBoxAwardRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackGetTreasuerBoxAwardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackGetTreasuerBoxAwardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackGetTreasuerBoxAwardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackGetTreasuerBoxAwardRsp)
  return false;
#undef DO_
}

void TBarrackGetTreasuerBoxAwardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackGetTreasuerBoxAwardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackGetTreasuerBoxAwardRsp)
}

::google::protobuf::uint8* TBarrackGetTreasuerBoxAwardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackGetTreasuerBoxAwardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackGetTreasuerBoxAwardRsp)
  return target;
}

int TBarrackGetTreasuerBoxAwardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackGetTreasuerBoxAwardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackGetTreasuerBoxAwardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackGetTreasuerBoxAwardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackGetTreasuerBoxAwardRsp::MergeFrom(const TBarrackGetTreasuerBoxAwardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackGetTreasuerBoxAwardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackGetTreasuerBoxAwardRsp::CopyFrom(const TBarrackGetTreasuerBoxAwardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackGetTreasuerBoxAwardRsp::IsInitialized() const {

  return true;
}

void TBarrackGetTreasuerBoxAwardRsp::Swap(TBarrackGetTreasuerBoxAwardRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackGetTreasuerBoxAwardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackGetTreasuerBoxAwardRsp_descriptor_;
  metadata.reflection = TBarrackGetTreasuerBoxAwardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackGetFriendBarrackInfoRsp::kReceivedNumFieldNumber;
const int TBarrackGetFriendBarrackInfoRsp::kHavaBarrackFriendNumFieldNumber;
const int TBarrackGetFriendBarrackInfoRsp::kReceviedFriendUidFieldNumber;
#endif  // !_MSC_VER

TBarrackGetFriendBarrackInfoRsp::TBarrackGetFriendBarrackInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackGetFriendBarrackInfoRsp)
}

void TBarrackGetFriendBarrackInfoRsp::InitAsDefaultInstance() {
}

TBarrackGetFriendBarrackInfoRsp::TBarrackGetFriendBarrackInfoRsp(const TBarrackGetFriendBarrackInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackGetFriendBarrackInfoRsp)
}

void TBarrackGetFriendBarrackInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  receivednum_ = 0u;
  havabarrackfriendnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackGetFriendBarrackInfoRsp::~TBarrackGetFriendBarrackInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TBarrackGetFriendBarrackInfoRsp)
  SharedDtor();
}

void TBarrackGetFriendBarrackInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBarrackGetFriendBarrackInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackGetFriendBarrackInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackGetFriendBarrackInfoRsp_descriptor_;
}

const TBarrackGetFriendBarrackInfoRsp& TBarrackGetFriendBarrackInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackGetFriendBarrackInfoRsp* TBarrackGetFriendBarrackInfoRsp::default_instance_ = NULL;

TBarrackGetFriendBarrackInfoRsp* TBarrackGetFriendBarrackInfoRsp::New() const {
  return new TBarrackGetFriendBarrackInfoRsp;
}

void TBarrackGetFriendBarrackInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBarrackGetFriendBarrackInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(receivednum_, havabarrackfriendnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  receviedfrienduid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackGetFriendBarrackInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackGetFriendBarrackInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ReceivedNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receivednum_)));
          set_has_receivednum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HavaBarrackFriendNum;
        break;
      }

      // optional uint32 HavaBarrackFriendNum = 2;
      case 2: {
        if (tag == 16) {
         parse_HavaBarrackFriendNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &havabarrackfriendnum_)));
          set_has_havabarrackfriendnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReceviedFriendUid;
        break;
      }

      // repeated uint64 ReceviedFriendUid = 3;
      case 3: {
        if (tag == 24) {
         parse_ReceviedFriendUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_receviedfrienduid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_receviedfrienduid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReceviedFriendUid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackGetFriendBarrackInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackGetFriendBarrackInfoRsp)
  return false;
#undef DO_
}

void TBarrackGetFriendBarrackInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackGetFriendBarrackInfoRsp)
  // optional uint32 ReceivedNum = 1;
  if (has_receivednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->receivednum(), output);
  }

  // optional uint32 HavaBarrackFriendNum = 2;
  if (has_havabarrackfriendnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->havabarrackfriendnum(), output);
  }

  // repeated uint64 ReceviedFriendUid = 3;
  for (int i = 0; i < this->receviedfrienduid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->receviedfrienduid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackGetFriendBarrackInfoRsp)
}

::google::protobuf::uint8* TBarrackGetFriendBarrackInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackGetFriendBarrackInfoRsp)
  // optional uint32 ReceivedNum = 1;
  if (has_receivednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->receivednum(), target);
  }

  // optional uint32 HavaBarrackFriendNum = 2;
  if (has_havabarrackfriendnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->havabarrackfriendnum(), target);
  }

  // repeated uint64 ReceviedFriendUid = 3;
  for (int i = 0; i < this->receviedfrienduid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->receviedfrienduid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackGetFriendBarrackInfoRsp)
  return target;
}

int TBarrackGetFriendBarrackInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ReceivedNum = 1;
    if (has_receivednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receivednum());
    }

    // optional uint32 HavaBarrackFriendNum = 2;
    if (has_havabarrackfriendnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->havabarrackfriendnum());
    }

  }
  // repeated uint64 ReceviedFriendUid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->receviedfrienduid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->receviedfrienduid(i));
    }
    total_size += 1 * this->receviedfrienduid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackGetFriendBarrackInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackGetFriendBarrackInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackGetFriendBarrackInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackGetFriendBarrackInfoRsp::MergeFrom(const TBarrackGetFriendBarrackInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  receviedfrienduid_.MergeFrom(from.receviedfrienduid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receivednum()) {
      set_receivednum(from.receivednum());
    }
    if (from.has_havabarrackfriendnum()) {
      set_havabarrackfriendnum(from.havabarrackfriendnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackGetFriendBarrackInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackGetFriendBarrackInfoRsp::CopyFrom(const TBarrackGetFriendBarrackInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackGetFriendBarrackInfoRsp::IsInitialized() const {

  return true;
}

void TBarrackGetFriendBarrackInfoRsp::Swap(TBarrackGetFriendBarrackInfoRsp* other) {
  if (other != this) {
    std::swap(receivednum_, other->receivednum_);
    std::swap(havabarrackfriendnum_, other->havabarrackfriendnum_);
    receviedfrienduid_.Swap(&other->receviedfrienduid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackGetFriendBarrackInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackGetFriendBarrackInfoRsp_descriptor_;
  metadata.reflection = TBarrackGetFriendBarrackInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackGetBarrackInfoAndUserInfoByServerReq::kFriendUidFieldNumber;
const int TBarrackGetBarrackInfoAndUserInfoByServerReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

TBarrackGetBarrackInfoAndUserInfoByServerReq::TBarrackGetBarrackInfoAndUserInfoByServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackGetBarrackInfoAndUserInfoByServerReq)
}

void TBarrackGetBarrackInfoAndUserInfoByServerReq::InitAsDefaultInstance() {
}

TBarrackGetBarrackInfoAndUserInfoByServerReq::TBarrackGetBarrackInfoAndUserInfoByServerReq(const TBarrackGetBarrackInfoAndUserInfoByServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackGetBarrackInfoAndUserInfoByServerReq)
}

void TBarrackGetBarrackInfoAndUserInfoByServerReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackGetBarrackInfoAndUserInfoByServerReq::~TBarrackGetBarrackInfoAndUserInfoByServerReq() {
  // @@protoc_insertion_point(destructor:pb.TBarrackGetBarrackInfoAndUserInfoByServerReq)
  SharedDtor();
}

void TBarrackGetBarrackInfoAndUserInfoByServerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBarrackGetBarrackInfoAndUserInfoByServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackGetBarrackInfoAndUserInfoByServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackGetBarrackInfoAndUserInfoByServerReq_descriptor_;
}

const TBarrackGetBarrackInfoAndUserInfoByServerReq& TBarrackGetBarrackInfoAndUserInfoByServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackGetBarrackInfoAndUserInfoByServerReq* TBarrackGetBarrackInfoAndUserInfoByServerReq::default_instance_ = NULL;

TBarrackGetBarrackInfoAndUserInfoByServerReq* TBarrackGetBarrackInfoAndUserInfoByServerReq::New() const {
  return new TBarrackGetBarrackInfoAndUserInfoByServerReq;
}

void TBarrackGetBarrackInfoAndUserInfoByServerReq::Clear() {
  frienduid_.Clear();
  serverid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackGetBarrackInfoAndUserInfoByServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackGetBarrackInfoAndUserInfoByServerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 FriendUid = 1;
      case 1: {
        if (tag == 8) {
         parse_FriendUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_frienduid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_frienduid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_FriendUid;
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // repeated string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid(this->serverid_size() - 1).data(),
            this->serverid(this->serverid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackGetBarrackInfoAndUserInfoByServerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackGetBarrackInfoAndUserInfoByServerReq)
  return false;
#undef DO_
}

void TBarrackGetBarrackInfoAndUserInfoByServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackGetBarrackInfoAndUserInfoByServerReq)
  // repeated uint64 FriendUid = 1;
  for (int i = 0; i < this->frienduid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->frienduid(i), output);
  }

  // repeated string ServerId = 2;
  for (int i = 0; i < this->serverid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->serverid(i).data(), this->serverid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->serverid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackGetBarrackInfoAndUserInfoByServerReq)
}

::google::protobuf::uint8* TBarrackGetBarrackInfoAndUserInfoByServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackGetBarrackInfoAndUserInfoByServerReq)
  // repeated uint64 FriendUid = 1;
  for (int i = 0; i < this->frienduid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->frienduid(i), target);
  }

  // repeated string ServerId = 2;
  for (int i = 0; i < this->serverid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid(i).data(), this->serverid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->serverid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackGetBarrackInfoAndUserInfoByServerReq)
  return target;
}

int TBarrackGetBarrackInfoAndUserInfoByServerReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 FriendUid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->frienduid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->frienduid(i));
    }
    total_size += 1 * this->frienduid_size() + data_size;
  }

  // repeated string ServerId = 2;
  total_size += 1 * this->serverid_size();
  for (int i = 0; i < this->serverid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->serverid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackGetBarrackInfoAndUserInfoByServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackGetBarrackInfoAndUserInfoByServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackGetBarrackInfoAndUserInfoByServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackGetBarrackInfoAndUserInfoByServerReq::MergeFrom(const TBarrackGetBarrackInfoAndUserInfoByServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  frienduid_.MergeFrom(from.frienduid_);
  serverid_.MergeFrom(from.serverid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackGetBarrackInfoAndUserInfoByServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackGetBarrackInfoAndUserInfoByServerReq::CopyFrom(const TBarrackGetBarrackInfoAndUserInfoByServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackGetBarrackInfoAndUserInfoByServerReq::IsInitialized() const {

  return true;
}

void TBarrackGetBarrackInfoAndUserInfoByServerReq::Swap(TBarrackGetBarrackInfoAndUserInfoByServerReq* other) {
  if (other != this) {
    frienduid_.Swap(&other->frienduid_);
    serverid_.Swap(&other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackGetBarrackInfoAndUserInfoByServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackGetBarrackInfoAndUserInfoByServerReq_descriptor_;
  metadata.reflection = TBarrackGetBarrackInfoAndUserInfoByServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackOtherUserInfo::kArrBarrackFieldNumber;
const int TBarrackOtherUserInfo::kBarrackPosArrFieldNumber;
const int TBarrackOtherUserInfo::kFriendUserSimpleInfoFieldNumber;
const int TBarrackOtherUserInfo::kBarrackScoreFieldNumber;
#endif  // !_MSC_VER

TBarrackOtherUserInfo::TBarrackOtherUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackOtherUserInfo)
}

void TBarrackOtherUserInfo::InitAsDefaultInstance() {
  friendusersimpleinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TBarrackOtherUserInfo::TBarrackOtherUserInfo(const TBarrackOtherUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackOtherUserInfo)
}

void TBarrackOtherUserInfo::SharedCtor() {
  _cached_size_ = 0;
  friendusersimpleinfo_ = NULL;
  barrackscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackOtherUserInfo::~TBarrackOtherUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TBarrackOtherUserInfo)
  SharedDtor();
}

void TBarrackOtherUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete friendusersimpleinfo_;
  }
}

void TBarrackOtherUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackOtherUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackOtherUserInfo_descriptor_;
}

const TBarrackOtherUserInfo& TBarrackOtherUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackOtherUserInfo* TBarrackOtherUserInfo::default_instance_ = NULL;

TBarrackOtherUserInfo* TBarrackOtherUserInfo::New() const {
  return new TBarrackOtherUserInfo;
}

void TBarrackOtherUserInfo::Clear() {
  if (_has_bits_[0 / 32] & 12) {
    if (has_friendusersimpleinfo()) {
      if (friendusersimpleinfo_ != NULL) friendusersimpleinfo_->::pb::TUserSimpleInfo::Clear();
    }
    barrackscore_ = 0u;
  }
  arrbarrack_.Clear();
  barrackposarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackOtherUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackOtherUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TSingleBarrackInfo ArrBarrack = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrBarrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrbarrack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrBarrack;
        if (input->ExpectTag(18)) goto parse_BarrackPosArr;
        break;
      }

      // repeated .pb.TSingleBarrackPos BarrackPosArr = 2;
      case 2: {
        if (tag == 18) {
         parse_BarrackPosArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_barrackposarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BarrackPosArr;
        if (input->ExpectTag(26)) goto parse_FriendUserSimpleInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo FriendUserSimpleInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_FriendUserSimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendusersimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BarrackScore;
        break;
      }

      // optional uint32 BarrackScore = 4;
      case 4: {
        if (tag == 32) {
         parse_BarrackScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &barrackscore_)));
          set_has_barrackscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackOtherUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackOtherUserInfo)
  return false;
#undef DO_
}

void TBarrackOtherUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackOtherUserInfo)
  // repeated .pb.TSingleBarrackInfo ArrBarrack = 1;
  for (int i = 0; i < this->arrbarrack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrbarrack(i), output);
  }

  // repeated .pb.TSingleBarrackPos BarrackPosArr = 2;
  for (int i = 0; i < this->barrackposarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->barrackposarr(i), output);
  }

  // optional .pb.TUserSimpleInfo FriendUserSimpleInfo = 3;
  if (has_friendusersimpleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->friendusersimpleinfo(), output);
  }

  // optional uint32 BarrackScore = 4;
  if (has_barrackscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->barrackscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackOtherUserInfo)
}

::google::protobuf::uint8* TBarrackOtherUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackOtherUserInfo)
  // repeated .pb.TSingleBarrackInfo ArrBarrack = 1;
  for (int i = 0; i < this->arrbarrack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrbarrack(i), target);
  }

  // repeated .pb.TSingleBarrackPos BarrackPosArr = 2;
  for (int i = 0; i < this->barrackposarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->barrackposarr(i), target);
  }

  // optional .pb.TUserSimpleInfo FriendUserSimpleInfo = 3;
  if (has_friendusersimpleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->friendusersimpleinfo(), target);
  }

  // optional uint32 BarrackScore = 4;
  if (has_barrackscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->barrackscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackOtherUserInfo)
  return target;
}

int TBarrackOtherUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .pb.TUserSimpleInfo FriendUserSimpleInfo = 3;
    if (has_friendusersimpleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendusersimpleinfo());
    }

    // optional uint32 BarrackScore = 4;
    if (has_barrackscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->barrackscore());
    }

  }
  // repeated .pb.TSingleBarrackInfo ArrBarrack = 1;
  total_size += 1 * this->arrbarrack_size();
  for (int i = 0; i < this->arrbarrack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrbarrack(i));
  }

  // repeated .pb.TSingleBarrackPos BarrackPosArr = 2;
  total_size += 1 * this->barrackposarr_size();
  for (int i = 0; i < this->barrackposarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->barrackposarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackOtherUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackOtherUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackOtherUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackOtherUserInfo::MergeFrom(const TBarrackOtherUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrbarrack_.MergeFrom(from.arrbarrack_);
  barrackposarr_.MergeFrom(from.barrackposarr_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_friendusersimpleinfo()) {
      mutable_friendusersimpleinfo()->::pb::TUserSimpleInfo::MergeFrom(from.friendusersimpleinfo());
    }
    if (from.has_barrackscore()) {
      set_barrackscore(from.barrackscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackOtherUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackOtherUserInfo::CopyFrom(const TBarrackOtherUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackOtherUserInfo::IsInitialized() const {

  return true;
}

void TBarrackOtherUserInfo::Swap(TBarrackOtherUserInfo* other) {
  if (other != this) {
    arrbarrack_.Swap(&other->arrbarrack_);
    barrackposarr_.Swap(&other->barrackposarr_);
    std::swap(friendusersimpleinfo_, other->friendusersimpleinfo_);
    std::swap(barrackscore_, other->barrackscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackOtherUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackOtherUserInfo_descriptor_;
  metadata.reflection = TBarrackOtherUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBarrackGetBarrackInfoAndUserInfoByServerRsp::kFriendInfoArrFieldNumber;
#endif  // !_MSC_VER

TBarrackGetBarrackInfoAndUserInfoByServerRsp::TBarrackGetBarrackInfoAndUserInfoByServerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBarrackGetBarrackInfoAndUserInfoByServerRsp)
}

void TBarrackGetBarrackInfoAndUserInfoByServerRsp::InitAsDefaultInstance() {
}

TBarrackGetBarrackInfoAndUserInfoByServerRsp::TBarrackGetBarrackInfoAndUserInfoByServerRsp(const TBarrackGetBarrackInfoAndUserInfoByServerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBarrackGetBarrackInfoAndUserInfoByServerRsp)
}

void TBarrackGetBarrackInfoAndUserInfoByServerRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBarrackGetBarrackInfoAndUserInfoByServerRsp::~TBarrackGetBarrackInfoAndUserInfoByServerRsp() {
  // @@protoc_insertion_point(destructor:pb.TBarrackGetBarrackInfoAndUserInfoByServerRsp)
  SharedDtor();
}

void TBarrackGetBarrackInfoAndUserInfoByServerRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBarrackGetBarrackInfoAndUserInfoByServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBarrackGetBarrackInfoAndUserInfoByServerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBarrackGetBarrackInfoAndUserInfoByServerRsp_descriptor_;
}

const TBarrackGetBarrackInfoAndUserInfoByServerRsp& TBarrackGetBarrackInfoAndUserInfoByServerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBarrack_2eproto();
  return *default_instance_;
}

TBarrackGetBarrackInfoAndUserInfoByServerRsp* TBarrackGetBarrackInfoAndUserInfoByServerRsp::default_instance_ = NULL;

TBarrackGetBarrackInfoAndUserInfoByServerRsp* TBarrackGetBarrackInfoAndUserInfoByServerRsp::New() const {
  return new TBarrackGetBarrackInfoAndUserInfoByServerRsp;
}

void TBarrackGetBarrackInfoAndUserInfoByServerRsp::Clear() {
  friendinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBarrackGetBarrackInfoAndUserInfoByServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBarrackGetBarrackInfoAndUserInfoByServerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBarrackOtherUserInfo FriendInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FriendInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FriendInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBarrackGetBarrackInfoAndUserInfoByServerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBarrackGetBarrackInfoAndUserInfoByServerRsp)
  return false;
#undef DO_
}

void TBarrackGetBarrackInfoAndUserInfoByServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBarrackGetBarrackInfoAndUserInfoByServerRsp)
  // repeated .pb.TBarrackOtherUserInfo FriendInfoArr = 1;
  for (int i = 0; i < this->friendinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBarrackGetBarrackInfoAndUserInfoByServerRsp)
}

::google::protobuf::uint8* TBarrackGetBarrackInfoAndUserInfoByServerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBarrackGetBarrackInfoAndUserInfoByServerRsp)
  // repeated .pb.TBarrackOtherUserInfo FriendInfoArr = 1;
  for (int i = 0; i < this->friendinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBarrackGetBarrackInfoAndUserInfoByServerRsp)
  return target;
}

int TBarrackGetBarrackInfoAndUserInfoByServerRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TBarrackOtherUserInfo FriendInfoArr = 1;
  total_size += 1 * this->friendinfoarr_size();
  for (int i = 0; i < this->friendinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBarrackGetBarrackInfoAndUserInfoByServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBarrackGetBarrackInfoAndUserInfoByServerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBarrackGetBarrackInfoAndUserInfoByServerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBarrackGetBarrackInfoAndUserInfoByServerRsp::MergeFrom(const TBarrackGetBarrackInfoAndUserInfoByServerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendinfoarr_.MergeFrom(from.friendinfoarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBarrackGetBarrackInfoAndUserInfoByServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBarrackGetBarrackInfoAndUserInfoByServerRsp::CopyFrom(const TBarrackGetBarrackInfoAndUserInfoByServerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBarrackGetBarrackInfoAndUserInfoByServerRsp::IsInitialized() const {

  return true;
}

void TBarrackGetBarrackInfoAndUserInfoByServerRsp::Swap(TBarrackGetBarrackInfoAndUserInfoByServerRsp* other) {
  if (other != this) {
    friendinfoarr_.Swap(&other->friendinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBarrackGetBarrackInfoAndUserInfoByServerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBarrackGetBarrackInfoAndUserInfoByServerRsp_descriptor_;
  metadata.reflection = TBarrackGetBarrackInfoAndUserInfoByServerRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
