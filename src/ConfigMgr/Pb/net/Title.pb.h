// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Title.proto

#ifndef PROTOBUF_net_2fTitle_2eproto__INCLUDED
#define PROTOBUF_net_2fTitle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fTitle_2eproto();
void protobuf_AssignDesc_net_2fTitle_2eproto();
void protobuf_ShutdownFile_net_2fTitle_2eproto();

class TTitleInfo;
class TTitleGetInfoRsp;
class TTitleActivateTitleReq;
class TTitleSetTitleReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TTitleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Title.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitleInfo : public ::google::protobuf::Message {
 public:
  TTitleInfo();
  virtual ~TTitleInfo();

  TTitleInfo(const TTitleInfo& from);

  inline TTitleInfo& operator=(const TTitleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitleInfo& default_instance();

  void Swap(TTitleInfo* other);

  // implements Message ----------------------------------------------

  TTitleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitleInfo& from);
  void MergeFrom(const TTitleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitleInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTitleInfo</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional uint64 EndTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTitleInfo</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTitleInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint64 endtime_;
  friend void  protobuf_AddDesc_net_2fTitle_2eproto();
  friend void protobuf_AssignDesc_net_2fTitle_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitle_2eproto();

  void InitAsDefaultInstance();
  static TTitleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTitleGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Title.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitleGetInfoRsp : public ::google::protobuf::Message {
 public:
  TTitleGetInfoRsp();
  virtual ~TTitleGetInfoRsp();

  TTitleGetInfoRsp(const TTitleGetInfoRsp& from);

  inline TTitleGetInfoRsp& operator=(const TTitleGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitleGetInfoRsp& default_instance();

  void Swap(TTitleGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TTitleGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitleGetInfoRsp& from);
  void MergeFrom(const TTitleGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTitleInfo ArrTitle = 1;
  inline int arrtitle_size() const;
  inline void clear_arrtitle();
  static const int kArrTitleFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitleGetInfoRsp</name>
  	<Function>
  		<name>arrtitle</name>
  		<replaceName>ArrTitle</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtitle</name>
  		<replaceName>ArrTitle</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtitle</name>
  		<replaceName>ArrTitle</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtitle</name>
  		<replaceName>ArrTitle</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtitle_size</name>
  		<replaceName>ArrTitle</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTitleInfo& arrtitle(int index) const;
  inline ::pb::TTitleInfo* mutable_arrtitle(int index);
  inline ::pb::TTitleInfo* add_arrtitle();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTitleInfo >&
      arrtitle() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTitleInfo >*
      mutable_arrtitle();

  // repeated uint32 HandBook = 2;
  inline int handbook_size() const;
  inline void clear_handbook();
  static const int kHandBookFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTitleGetInfoRsp</name>
  	<Function>
  		<name>handbook</name>
  		<replaceName>HandBook</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_handbook</name>
  		<replaceName>HandBook</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_handbook</name>
  		<replaceName>HandBook</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_handbook</name>
  		<replaceName>HandBook</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>handbook_size</name>
  		<replaceName>HandBook</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 handbook(int index) const;
  inline void set_handbook(int index, ::google::protobuf::uint32 value);
  inline void add_handbook(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      handbook() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_handbook();

  // @@protoc_insertion_point(class_scope:pb.TTitleGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTitleInfo > arrtitle_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > handbook_;
  friend void  protobuf_AddDesc_net_2fTitle_2eproto();
  friend void protobuf_AssignDesc_net_2fTitle_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitle_2eproto();

  void InitAsDefaultInstance();
  static TTitleGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTitleActivateTitleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Title.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitleActivateTitleReq : public ::google::protobuf::Message {
 public:
  TTitleActivateTitleReq();
  virtual ~TTitleActivateTitleReq();

  TTitleActivateTitleReq(const TTitleActivateTitleReq& from);

  inline TTitleActivateTitleReq& operator=(const TTitleActivateTitleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitleActivateTitleReq& default_instance();

  void Swap(TTitleActivateTitleReq* other);

  // implements Message ----------------------------------------------

  TTitleActivateTitleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitleActivateTitleReq& from);
  void MergeFrom(const TTitleActivateTitleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitleActivateTitleReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTitleActivateTitleReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fTitle_2eproto();
  friend void protobuf_AssignDesc_net_2fTitle_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitle_2eproto();

  void InitAsDefaultInstance();
  static TTitleActivateTitleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTitleSetTitleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Title.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitleSetTitleReq : public ::google::protobuf::Message {
 public:
  TTitleSetTitleReq();
  virtual ~TTitleSetTitleReq();

  TTitleSetTitleReq(const TTitleSetTitleReq& from);

  inline TTitleSetTitleReq& operator=(const TTitleSetTitleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitleSetTitleReq& default_instance();

  void Swap(TTitleSetTitleReq* other);

  // implements Message ----------------------------------------------

  TTitleSetTitleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitleSetTitleReq& from);
  void MergeFrom(const TTitleSetTitleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitleSetTitleReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTitleSetTitleReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fTitle_2eproto();
  friend void protobuf_AssignDesc_net_2fTitle_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitle_2eproto();

  void InitAsDefaultInstance();
  static TTitleSetTitleReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TTitleInfo

// optional uint32 Id = 1;
inline bool TTitleInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTitleInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTitleInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTitleInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TTitleInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TTitleInfo.Id)
  return id_;
}
inline void TTitleInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitleInfo.Id)
}

// optional uint32 Status = 2;
inline bool TTitleInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTitleInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTitleInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTitleInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 TTitleInfo::status() const {
  // @@protoc_insertion_point(field_get:pb.TTitleInfo.Status)
  return status_;
}
inline void TTitleInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitleInfo.Status)
}

// optional uint64 EndTime = 3;
inline bool TTitleInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTitleInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTitleInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTitleInfo::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TTitleInfo::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TTitleInfo.EndTime)
  return endtime_;
}
inline void TTitleInfo::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitleInfo.EndTime)
}

// -------------------------------------------------------------------

// TTitleGetInfoRsp

// repeated .pb.TTitleInfo ArrTitle = 1;
inline int TTitleGetInfoRsp::arrtitle_size() const {
  return arrtitle_.size();
}
inline void TTitleGetInfoRsp::clear_arrtitle() {
  arrtitle_.Clear();
}
inline const ::pb::TTitleInfo& TTitleGetInfoRsp::arrtitle(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTitleGetInfoRsp.ArrTitle)
  return arrtitle_.Get(index);
}
inline ::pb::TTitleInfo* TTitleGetInfoRsp::mutable_arrtitle(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTitleGetInfoRsp.ArrTitle)
  return arrtitle_.Mutable(index);
}
inline ::pb::TTitleInfo* TTitleGetInfoRsp::add_arrtitle() {
  // @@protoc_insertion_point(field_add:pb.TTitleGetInfoRsp.ArrTitle)
  return arrtitle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTitleInfo >&
TTitleGetInfoRsp::arrtitle() const {
  // @@protoc_insertion_point(field_list:pb.TTitleGetInfoRsp.ArrTitle)
  return arrtitle_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTitleInfo >*
TTitleGetInfoRsp::mutable_arrtitle() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTitleGetInfoRsp.ArrTitle)
  return &arrtitle_;
}

// repeated uint32 HandBook = 2;
inline int TTitleGetInfoRsp::handbook_size() const {
  return handbook_.size();
}
inline void TTitleGetInfoRsp::clear_handbook() {
  handbook_.Clear();
}
inline ::google::protobuf::uint32 TTitleGetInfoRsp::handbook(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTitleGetInfoRsp.HandBook)
  return handbook_.Get(index);
}
inline void TTitleGetInfoRsp::set_handbook(int index, ::google::protobuf::uint32 value) {
  handbook_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TTitleGetInfoRsp.HandBook)
}
inline void TTitleGetInfoRsp::add_handbook(::google::protobuf::uint32 value) {
  handbook_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TTitleGetInfoRsp.HandBook)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TTitleGetInfoRsp::handbook() const {
  // @@protoc_insertion_point(field_list:pb.TTitleGetInfoRsp.HandBook)
  return handbook_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TTitleGetInfoRsp::mutable_handbook() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTitleGetInfoRsp.HandBook)
  return &handbook_;
}

// -------------------------------------------------------------------

// TTitleActivateTitleReq

// optional uint32 Id = 1;
inline bool TTitleActivateTitleReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTitleActivateTitleReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTitleActivateTitleReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTitleActivateTitleReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TTitleActivateTitleReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TTitleActivateTitleReq.Id)
  return id_;
}
inline void TTitleActivateTitleReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitleActivateTitleReq.Id)
}

// -------------------------------------------------------------------

// TTitleSetTitleReq

// optional uint32 Id = 1;
inline bool TTitleSetTitleReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTitleSetTitleReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTitleSetTitleReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTitleSetTitleReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TTitleSetTitleReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TTitleSetTitleReq.Id)
  return id_;
}
inline void TTitleSetTitleReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitleSetTitleReq.Id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fTitle_2eproto__INCLUDED
