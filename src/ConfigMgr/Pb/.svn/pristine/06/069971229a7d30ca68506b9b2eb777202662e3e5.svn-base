// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SceneInteractiveObjectAudio.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/SceneInteractiveObjectAudio.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* SceneInteractiveObjectAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneInteractiveObjectAudio_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneTypeAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneTypeAudio_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EAudioSceneType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fSceneInteractiveObjectAudio_2eproto() {
  protobuf_AddDesc_module_2fSceneInteractiveObjectAudio_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/SceneInteractiveObjectAudio.proto");
  GOOGLE_CHECK(file != NULL);
  SceneInteractiveObjectAudio_descriptor_ = file->message_type(0);
  static const int SceneInteractiveObjectAudio_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneInteractiveObjectAudio, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneInteractiveObjectAudio, scenetypeaudioarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneInteractiveObjectAudio, objectname_),
  };
  SceneInteractiveObjectAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneInteractiveObjectAudio_descriptor_,
      SceneInteractiveObjectAudio::default_instance_,
      SceneInteractiveObjectAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneInteractiveObjectAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneInteractiveObjectAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneInteractiveObjectAudio));
  SceneTypeAudio_descriptor_ = file->message_type(1);
  static const int SceneTypeAudio_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTypeAudio, scenetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTypeAudio, downaduioinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTypeAudio, upaudioinfo_),
  };
  SceneTypeAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneTypeAudio_descriptor_,
      SceneTypeAudio::default_instance_,
      SceneTypeAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTypeAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneTypeAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneTypeAudio));
  EAudioSceneType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fSceneInteractiveObjectAudio_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneInteractiveObjectAudio_descriptor_, &SceneInteractiveObjectAudio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneTypeAudio_descriptor_, &SceneTypeAudio::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fSceneInteractiveObjectAudio_2eproto() {
  delete SceneInteractiveObjectAudio::default_instance_;
  delete SceneInteractiveObjectAudio_reflection_;
  delete SceneTypeAudio::default_instance_;
  delete SceneTypeAudio_reflection_;
}

void protobuf_AddDesc_module_2fSceneInteractiveObjectAudio_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fAudioDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(module/SceneInteractiveObjectAudio.pro"
    "to\022\002pb\032\030module/AudioDefine.proto\"l\n\033Scen"
    "eInteractiveObjectAudio\022\n\n\002Id\030\001 \001(\005\022-\n\021S"
    "ceneTypeAudioArr\030\002 \003(\0132\022.pb.SceneTypeAud"
    "io\022\022\n\nObjectName\030\003 \001(\t\"\202\001\n\016SceneTypeAudi"
    "o\022&\n\tSceneType\030\001 \001(\0162\023.pb.EAudioSceneTyp"
    "e\022$\n\rDownAduioInfo\030\002 \001(\0132\r.pb.AudioInfo\022"
    "\"\n\013UpAudioInfo\030\003 \001(\0132\r.pb.AudioInfo*C\n\017E"
    "AudioSceneType\022\030\n\024INSTANCE_SCENE_AUDIO\020\001"
    "\022\026\n\022SYSTEM_SCENE_AUDIO\020\002", 384);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/SceneInteractiveObjectAudio.proto", &protobuf_RegisterTypes);
  SceneInteractiveObjectAudio::default_instance_ = new SceneInteractiveObjectAudio();
  SceneTypeAudio::default_instance_ = new SceneTypeAudio();
  SceneInteractiveObjectAudio::default_instance_->InitAsDefaultInstance();
  SceneTypeAudio::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fSceneInteractiveObjectAudio_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fSceneInteractiveObjectAudio_2eproto {
  StaticDescriptorInitializer_module_2fSceneInteractiveObjectAudio_2eproto() {
    protobuf_AddDesc_module_2fSceneInteractiveObjectAudio_2eproto();
  }
} static_descriptor_initializer_module_2fSceneInteractiveObjectAudio_2eproto_;
const ::google::protobuf::EnumDescriptor* EAudioSceneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAudioSceneType_descriptor_;
}
bool EAudioSceneType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SceneInteractiveObjectAudio::kIdFieldNumber;
const int SceneInteractiveObjectAudio::kSceneTypeAudioArrFieldNumber;
const int SceneInteractiveObjectAudio::kObjectNameFieldNumber;
#endif  // !_MSC_VER

SceneInteractiveObjectAudio::SceneInteractiveObjectAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SceneInteractiveObjectAudio)
}

void SceneInteractiveObjectAudio::InitAsDefaultInstance() {
}

SceneInteractiveObjectAudio::SceneInteractiveObjectAudio(const SceneInteractiveObjectAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SceneInteractiveObjectAudio)
}

void SceneInteractiveObjectAudio::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneInteractiveObjectAudio::~SceneInteractiveObjectAudio() {
  // @@protoc_insertion_point(destructor:pb.SceneInteractiveObjectAudio)
  SharedDtor();
}

void SceneInteractiveObjectAudio::SharedDtor() {
  if (objectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete objectname_;
  }
  if (this != default_instance_) {
  }
}

void SceneInteractiveObjectAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneInteractiveObjectAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneInteractiveObjectAudio_descriptor_;
}

const SceneInteractiveObjectAudio& SceneInteractiveObjectAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneInteractiveObjectAudio_2eproto();
  return *default_instance_;
}

SceneInteractiveObjectAudio* SceneInteractiveObjectAudio::default_instance_ = NULL;

SceneInteractiveObjectAudio* SceneInteractiveObjectAudio::New() const {
  return new SceneInteractiveObjectAudio;
}

void SceneInteractiveObjectAudio::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    id_ = 0;
    if (has_objectname()) {
      if (objectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        objectname_->clear();
      }
    }
  }
  scenetypeaudioarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneInteractiveObjectAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SceneInteractiveObjectAudio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SceneTypeAudioArr;
        break;
      }

      // repeated .pb.SceneTypeAudio SceneTypeAudioArr = 2;
      case 2: {
        if (tag == 18) {
         parse_SceneTypeAudioArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scenetypeaudioarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SceneTypeAudioArr;
        if (input->ExpectTag(26)) goto parse_ObjectName;
        break;
      }

      // optional string ObjectName = 3;
      case 3: {
        if (tag == 26) {
         parse_ObjectName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->objectname().data(), this->objectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "objectname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SceneInteractiveObjectAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SceneInteractiveObjectAudio)
  return false;
#undef DO_
}

void SceneInteractiveObjectAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SceneInteractiveObjectAudio)
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .pb.SceneTypeAudio SceneTypeAudioArr = 2;
  for (int i = 0; i < this->scenetypeaudioarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scenetypeaudioarr(i), output);
  }

  // optional string ObjectName = 3;
  if (has_objectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objectname().data(), this->objectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "objectname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->objectname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SceneInteractiveObjectAudio)
}

::google::protobuf::uint8* SceneInteractiveObjectAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SceneInteractiveObjectAudio)
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .pb.SceneTypeAudio SceneTypeAudioArr = 2;
  for (int i = 0; i < this->scenetypeaudioarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scenetypeaudioarr(i), target);
  }

  // optional string ObjectName = 3;
  if (has_objectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objectname().data(), this->objectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "objectname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->objectname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SceneInteractiveObjectAudio)
  return target;
}

int SceneInteractiveObjectAudio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string ObjectName = 3;
    if (has_objectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectname());
    }

  }
  // repeated .pb.SceneTypeAudio SceneTypeAudioArr = 2;
  total_size += 1 * this->scenetypeaudioarr_size();
  for (int i = 0; i < this->scenetypeaudioarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scenetypeaudioarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneInteractiveObjectAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneInteractiveObjectAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneInteractiveObjectAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneInteractiveObjectAudio::MergeFrom(const SceneInteractiveObjectAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  scenetypeaudioarr_.MergeFrom(from.scenetypeaudioarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_objectname()) {
      set_objectname(from.objectname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneInteractiveObjectAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneInteractiveObjectAudio::CopyFrom(const SceneInteractiveObjectAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneInteractiveObjectAudio::IsInitialized() const {

  return true;
}

void SceneInteractiveObjectAudio::Swap(SceneInteractiveObjectAudio* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    scenetypeaudioarr_.Swap(&other->scenetypeaudioarr_);
    std::swap(objectname_, other->objectname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneInteractiveObjectAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneInteractiveObjectAudio_descriptor_;
  metadata.reflection = SceneInteractiveObjectAudio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneTypeAudio::kSceneTypeFieldNumber;
const int SceneTypeAudio::kDownAduioInfoFieldNumber;
const int SceneTypeAudio::kUpAudioInfoFieldNumber;
#endif  // !_MSC_VER

SceneTypeAudio::SceneTypeAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SceneTypeAudio)
}

void SceneTypeAudio::InitAsDefaultInstance() {
  downaduioinfo_ = const_cast< ::pb::AudioInfo*>(&::pb::AudioInfo::default_instance());
  upaudioinfo_ = const_cast< ::pb::AudioInfo*>(&::pb::AudioInfo::default_instance());
}

SceneTypeAudio::SceneTypeAudio(const SceneTypeAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SceneTypeAudio)
}

void SceneTypeAudio::SharedCtor() {
  _cached_size_ = 0;
  scenetype_ = 1;
  downaduioinfo_ = NULL;
  upaudioinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneTypeAudio::~SceneTypeAudio() {
  // @@protoc_insertion_point(destructor:pb.SceneTypeAudio)
  SharedDtor();
}

void SceneTypeAudio::SharedDtor() {
  if (this != default_instance_) {
    delete downaduioinfo_;
    delete upaudioinfo_;
  }
}

void SceneTypeAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneTypeAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneTypeAudio_descriptor_;
}

const SceneTypeAudio& SceneTypeAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneInteractiveObjectAudio_2eproto();
  return *default_instance_;
}

SceneTypeAudio* SceneTypeAudio::default_instance_ = NULL;

SceneTypeAudio* SceneTypeAudio::New() const {
  return new SceneTypeAudio;
}

void SceneTypeAudio::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    scenetype_ = 1;
    if (has_downaduioinfo()) {
      if (downaduioinfo_ != NULL) downaduioinfo_->::pb::AudioInfo::Clear();
    }
    if (has_upaudioinfo()) {
      if (upaudioinfo_ != NULL) upaudioinfo_->::pb::AudioInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneTypeAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SceneTypeAudio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EAudioSceneType SceneType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAudioSceneType_IsValid(value)) {
            set_scenetype(static_cast< ::pb::EAudioSceneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DownAduioInfo;
        break;
      }

      // optional .pb.AudioInfo DownAduioInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_DownAduioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_downaduioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UpAudioInfo;
        break;
      }

      // optional .pb.AudioInfo UpAudioInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_UpAudioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upaudioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SceneTypeAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SceneTypeAudio)
  return false;
#undef DO_
}

void SceneTypeAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SceneTypeAudio)
  // optional .pb.EAudioSceneType SceneType = 1;
  if (has_scenetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->scenetype(), output);
  }

  // optional .pb.AudioInfo DownAduioInfo = 2;
  if (has_downaduioinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->downaduioinfo(), output);
  }

  // optional .pb.AudioInfo UpAudioInfo = 3;
  if (has_upaudioinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->upaudioinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SceneTypeAudio)
}

::google::protobuf::uint8* SceneTypeAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SceneTypeAudio)
  // optional .pb.EAudioSceneType SceneType = 1;
  if (has_scenetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->scenetype(), target);
  }

  // optional .pb.AudioInfo DownAduioInfo = 2;
  if (has_downaduioinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->downaduioinfo(), target);
  }

  // optional .pb.AudioInfo UpAudioInfo = 3;
  if (has_upaudioinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->upaudioinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SceneTypeAudio)
  return target;
}

int SceneTypeAudio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EAudioSceneType SceneType = 1;
    if (has_scenetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scenetype());
    }

    // optional .pb.AudioInfo DownAduioInfo = 2;
    if (has_downaduioinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->downaduioinfo());
    }

    // optional .pb.AudioInfo UpAudioInfo = 3;
    if (has_upaudioinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upaudioinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneTypeAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneTypeAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneTypeAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneTypeAudio::MergeFrom(const SceneTypeAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scenetype()) {
      set_scenetype(from.scenetype());
    }
    if (from.has_downaduioinfo()) {
      mutable_downaduioinfo()->::pb::AudioInfo::MergeFrom(from.downaduioinfo());
    }
    if (from.has_upaudioinfo()) {
      mutable_upaudioinfo()->::pb::AudioInfo::MergeFrom(from.upaudioinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneTypeAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneTypeAudio::CopyFrom(const SceneTypeAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneTypeAudio::IsInitialized() const {

  return true;
}

void SceneTypeAudio::Swap(SceneTypeAudio* other) {
  if (other != this) {
    std::swap(scenetype_, other->scenetype_);
    std::swap(downaduioinfo_, other->downaduioinfo_);
    std::swap(upaudioinfo_, other->upaudioinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneTypeAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneTypeAudio_descriptor_;
  metadata.reflection = SceneTypeAudio_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
