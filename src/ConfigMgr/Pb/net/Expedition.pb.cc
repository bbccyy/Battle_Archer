// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Expedition.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Expedition.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TExpeditionTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionHeroStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionHeroStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionStrongholdInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionStrongholdInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionBuffInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionBuffInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionRebornBuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionRebornBuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionGetInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionGetInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionDoBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionDoBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionDoBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionDoBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionDoBattleReportReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionDoBattleReportReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionGetRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionGetRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionGetRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionGetRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionGetBuffReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionGetBuffReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionGetBuffRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionGetBuffRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionSelectBuffReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionSelectBuffReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionSelectTreasureBuffReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionSelectTreasureBuffReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionShoppingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionShoppingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionShoppingRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionShoppingRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionResetRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionResetRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionBuyResetNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionBuyResetNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionRebornReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionRebornReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionSetSquadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionSetSquadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionUseRebornBuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionUseRebornBuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionUseRebornBuildRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionUseRebornBuildRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionQuickPassReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionQuickPassReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExpeditionQuickPassRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExpeditionQuickPassRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fExpedition_2eproto() {
  protobuf_AddDesc_net_2fExpedition_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Expedition.proto");
  GOOGLE_CHECK(file != NULL);
  TExpeditionTeamInfo_descriptor_ = file->message_type(0);
  static const int TExpeditionTeamInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionTeamInfo, squad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionTeamInfo, herostatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionTeamInfo, addskill_),
  };
  TExpeditionTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionTeamInfo_descriptor_,
      TExpeditionTeamInfo::default_instance_,
      TExpeditionTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionTeamInfo));
  TExpeditionHeroStatus_descriptor_ = file->message_type(1);
  static const int TExpeditionHeroStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionHeroStatus, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionHeroStatus, curhppercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionHeroStatus, currage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionHeroStatus, buffattrarr_),
  };
  TExpeditionHeroStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionHeroStatus_descriptor_,
      TExpeditionHeroStatus::default_instance_,
      TExpeditionHeroStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionHeroStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionHeroStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionHeroStatus));
  TExpeditionStrongholdInfo_descriptor_ = file->message_type(2);
  static const int TExpeditionStrongholdInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionStrongholdInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionStrongholdInfo, mirror_),
  };
  TExpeditionStrongholdInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionStrongholdInfo_descriptor_,
      TExpeditionStrongholdInfo::default_instance_,
      TExpeditionStrongholdInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionStrongholdInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionStrongholdInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionStrongholdInfo));
  TExpeditionRewardInfo_descriptor_ = file->message_type(3);
  static const int TExpeditionRewardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionRewardInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionRewardInfo, received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionRewardInfo, rewardarr_),
  };
  TExpeditionRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionRewardInfo_descriptor_,
      TExpeditionRewardInfo::default_instance_,
      TExpeditionRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionRewardInfo));
  TExpeditionBuffInfo_descriptor_ = file->message_type(4);
  static const int TExpeditionBuffInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionBuffInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionBuffInfo, buffarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionBuffInfo, selectedindex_),
  };
  TExpeditionBuffInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionBuffInfo_descriptor_,
      TExpeditionBuffInfo::default_instance_,
      TExpeditionBuffInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionBuffInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionBuffInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionBuffInfo));
  TExpeditionShopInfo_descriptor_ = file->message_type(5);
  static const int TExpeditionShopInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionShopInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionShopInfo, num_),
  };
  TExpeditionShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionShopInfo_descriptor_,
      TExpeditionShopInfo::default_instance_,
      TExpeditionShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionShopInfo));
  TExpeditionRebornBuildInfo_descriptor_ = file->message_type(6);
  static const int TExpeditionRebornBuildInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionRebornBuildInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionRebornBuildInfo, hid_),
  };
  TExpeditionRebornBuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionRebornBuildInfo_descriptor_,
      TExpeditionRebornBuildInfo::default_instance_,
      TExpeditionRebornBuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionRebornBuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionRebornBuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionRebornBuildInfo));
  TExpeditionInfo_descriptor_ = file->message_type(7);
  static const int TExpeditionInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionInfo, myteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionInfo, strongholdarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionInfo, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionInfo, buffarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionInfo, buyarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionInfo, resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionInfo, buyrebornnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionInfo, rebornbuildarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionInfo, treasurebuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionInfo, isquickpasschoose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionInfo, lastpassmainnum_),
  };
  TExpeditionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionInfo_descriptor_,
      TExpeditionInfo::default_instance_,
      TExpeditionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionInfo));
  TExpeditionGetInfoRsp_descriptor_ = file->message_type(8);
  static const int TExpeditionGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetInfoRsp, info_),
  };
  TExpeditionGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionGetInfoRsp_descriptor_,
      TExpeditionGetInfoRsp::default_instance_,
      TExpeditionGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionGetInfoRsp));
  TExpeditionGetInfoNotify_descriptor_ = file->message_type(9);
  static const int TExpeditionGetInfoNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetInfoNotify, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetInfoNotify, rewardinfo_),
  };
  TExpeditionGetInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionGetInfoNotify_descriptor_,
      TExpeditionGetInfoNotify::default_instance_,
      TExpeditionGetInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionGetInfoNotify));
  TExpeditionDoBattleReq_descriptor_ = file->message_type(10);
  static const int TExpeditionDoBattleReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionDoBattleReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionDoBattleReq, battlecheckparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionDoBattleReq, hidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionDoBattleReq, squad_),
  };
  TExpeditionDoBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionDoBattleReq_descriptor_,
      TExpeditionDoBattleReq::default_instance_,
      TExpeditionDoBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionDoBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionDoBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionDoBattleReq));
  TExpeditionDoBattleRsp_descriptor_ = file->message_type(11);
  static const int TExpeditionDoBattleRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionDoBattleRsp, battleargs_),
  };
  TExpeditionDoBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionDoBattleRsp_descriptor_,
      TExpeditionDoBattleRsp::default_instance_,
      TExpeditionDoBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionDoBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionDoBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionDoBattleRsp));
  TExpeditionDoBattleReportReq_descriptor_ = file->message_type(12);
  static const int TExpeditionDoBattleReportReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionDoBattleReportReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionDoBattleReportReq, battleresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionDoBattleReportReq, iswindirect_),
  };
  TExpeditionDoBattleReportReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionDoBattleReportReq_descriptor_,
      TExpeditionDoBattleReportReq::default_instance_,
      TExpeditionDoBattleReportReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionDoBattleReportReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionDoBattleReportReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionDoBattleReportReq));
  TExpeditionGetRewardReq_descriptor_ = file->message_type(13);
  static const int TExpeditionGetRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetRewardReq, id_),
  };
  TExpeditionGetRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionGetRewardReq_descriptor_,
      TExpeditionGetRewardReq::default_instance_,
      TExpeditionGetRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionGetRewardReq));
  TExpeditionGetRewardRsp_descriptor_ = file->message_type(14);
  static const int TExpeditionGetRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetRewardRsp, reward_),
  };
  TExpeditionGetRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionGetRewardRsp_descriptor_,
      TExpeditionGetRewardRsp::default_instance_,
      TExpeditionGetRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionGetRewardRsp));
  TExpeditionGetBuffReq_descriptor_ = file->message_type(15);
  static const int TExpeditionGetBuffReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetBuffReq, id_),
  };
  TExpeditionGetBuffReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionGetBuffReq_descriptor_,
      TExpeditionGetBuffReq::default_instance_,
      TExpeditionGetBuffReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetBuffReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetBuffReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionGetBuffReq));
  TExpeditionGetBuffRsp_descriptor_ = file->message_type(16);
  static const int TExpeditionGetBuffRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetBuffRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetBuffRsp, buffarr_),
  };
  TExpeditionGetBuffRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionGetBuffRsp_descriptor_,
      TExpeditionGetBuffRsp::default_instance_,
      TExpeditionGetBuffRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetBuffRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionGetBuffRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionGetBuffRsp));
  TExpeditionSelectBuffReq_descriptor_ = file->message_type(17);
  static const int TExpeditionSelectBuffReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionSelectBuffReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionSelectBuffReq, buffindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionSelectBuffReq, heros_),
  };
  TExpeditionSelectBuffReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionSelectBuffReq_descriptor_,
      TExpeditionSelectBuffReq::default_instance_,
      TExpeditionSelectBuffReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionSelectBuffReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionSelectBuffReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionSelectBuffReq));
  TExpeditionSelectTreasureBuffReq_descriptor_ = file->message_type(18);
  static const int TExpeditionSelectTreasureBuffReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionSelectTreasureBuffReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionSelectTreasureBuffReq, buffindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionSelectTreasureBuffReq, heros_),
  };
  TExpeditionSelectTreasureBuffReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionSelectTreasureBuffReq_descriptor_,
      TExpeditionSelectTreasureBuffReq::default_instance_,
      TExpeditionSelectTreasureBuffReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionSelectTreasureBuffReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionSelectTreasureBuffReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionSelectTreasureBuffReq));
  TExpeditionShoppingReq_descriptor_ = file->message_type(19);
  static const int TExpeditionShoppingReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionShoppingReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionShoppingReq, num_),
  };
  TExpeditionShoppingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionShoppingReq_descriptor_,
      TExpeditionShoppingReq::default_instance_,
      TExpeditionShoppingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionShoppingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionShoppingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionShoppingReq));
  TExpeditionShoppingRsp_descriptor_ = file->message_type(20);
  static const int TExpeditionShoppingRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionShoppingRsp, rewardarr_),
  };
  TExpeditionShoppingRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionShoppingRsp_descriptor_,
      TExpeditionShoppingRsp::default_instance_,
      TExpeditionShoppingRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionShoppingRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionShoppingRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionShoppingRsp));
  TExpeditionResetRsp_descriptor_ = file->message_type(21);
  static const int TExpeditionResetRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionResetRsp, info_),
  };
  TExpeditionResetRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionResetRsp_descriptor_,
      TExpeditionResetRsp::default_instance_,
      TExpeditionResetRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionResetRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionResetRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionResetRsp));
  TExpeditionBuyResetNumReq_descriptor_ = file->message_type(22);
  static const int TExpeditionBuyResetNumReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionBuyResetNumReq, num_),
  };
  TExpeditionBuyResetNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionBuyResetNumReq_descriptor_,
      TExpeditionBuyResetNumReq::default_instance_,
      TExpeditionBuyResetNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionBuyResetNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionBuyResetNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionBuyResetNumReq));
  TExpeditionRebornReq_descriptor_ = file->message_type(23);
  static const int TExpeditionRebornReq_offsets_[1] = {
  };
  TExpeditionRebornReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionRebornReq_descriptor_,
      TExpeditionRebornReq::default_instance_,
      TExpeditionRebornReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionRebornReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionRebornReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionRebornReq));
  TExpeditionSetSquadReq_descriptor_ = file->message_type(24);
  static const int TExpeditionSetSquadReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionSetSquadReq, squad_),
  };
  TExpeditionSetSquadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionSetSquadReq_descriptor_,
      TExpeditionSetSquadReq::default_instance_,
      TExpeditionSetSquadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionSetSquadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionSetSquadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionSetSquadReq));
  TExpeditionUseRebornBuildReq_descriptor_ = file->message_type(25);
  static const int TExpeditionUseRebornBuildReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionUseRebornBuildReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionUseRebornBuildReq, hid_),
  };
  TExpeditionUseRebornBuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionUseRebornBuildReq_descriptor_,
      TExpeditionUseRebornBuildReq::default_instance_,
      TExpeditionUseRebornBuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionUseRebornBuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionUseRebornBuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionUseRebornBuildReq));
  TExpeditionUseRebornBuildRsp_descriptor_ = file->message_type(26);
  static const int TExpeditionUseRebornBuildRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionUseRebornBuildRsp, heroinfo_),
  };
  TExpeditionUseRebornBuildRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionUseRebornBuildRsp_descriptor_,
      TExpeditionUseRebornBuildRsp::default_instance_,
      TExpeditionUseRebornBuildRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionUseRebornBuildRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionUseRebornBuildRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionUseRebornBuildRsp));
  TExpeditionQuickPassReq_descriptor_ = file->message_type(27);
  static const int TExpeditionQuickPassReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionQuickPassReq, ischoosepass_),
  };
  TExpeditionQuickPassReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionQuickPassReq_descriptor_,
      TExpeditionQuickPassReq::default_instance_,
      TExpeditionQuickPassReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionQuickPassReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionQuickPassReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionQuickPassReq));
  TExpeditionQuickPassRsp_descriptor_ = file->message_type(28);
  static const int TExpeditionQuickPassRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionQuickPassRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionQuickPassRsp, shoprewardarr_),
  };
  TExpeditionQuickPassRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExpeditionQuickPassRsp_descriptor_,
      TExpeditionQuickPassRsp::default_instance_,
      TExpeditionQuickPassRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionQuickPassRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExpeditionQuickPassRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExpeditionQuickPassRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fExpedition_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionTeamInfo_descriptor_, &TExpeditionTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionHeroStatus_descriptor_, &TExpeditionHeroStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionStrongholdInfo_descriptor_, &TExpeditionStrongholdInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionRewardInfo_descriptor_, &TExpeditionRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionBuffInfo_descriptor_, &TExpeditionBuffInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionShopInfo_descriptor_, &TExpeditionShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionRebornBuildInfo_descriptor_, &TExpeditionRebornBuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionInfo_descriptor_, &TExpeditionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionGetInfoRsp_descriptor_, &TExpeditionGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionGetInfoNotify_descriptor_, &TExpeditionGetInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionDoBattleReq_descriptor_, &TExpeditionDoBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionDoBattleRsp_descriptor_, &TExpeditionDoBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionDoBattleReportReq_descriptor_, &TExpeditionDoBattleReportReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionGetRewardReq_descriptor_, &TExpeditionGetRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionGetRewardRsp_descriptor_, &TExpeditionGetRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionGetBuffReq_descriptor_, &TExpeditionGetBuffReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionGetBuffRsp_descriptor_, &TExpeditionGetBuffRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionSelectBuffReq_descriptor_, &TExpeditionSelectBuffReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionSelectTreasureBuffReq_descriptor_, &TExpeditionSelectTreasureBuffReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionShoppingReq_descriptor_, &TExpeditionShoppingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionShoppingRsp_descriptor_, &TExpeditionShoppingRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionResetRsp_descriptor_, &TExpeditionResetRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionBuyResetNumReq_descriptor_, &TExpeditionBuyResetNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionRebornReq_descriptor_, &TExpeditionRebornReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionSetSquadReq_descriptor_, &TExpeditionSetSquadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionUseRebornBuildReq_descriptor_, &TExpeditionUseRebornBuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionUseRebornBuildRsp_descriptor_, &TExpeditionUseRebornBuildRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionQuickPassReq_descriptor_, &TExpeditionQuickPassReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExpeditionQuickPassRsp_descriptor_, &TExpeditionQuickPassRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fExpedition_2eproto() {
  delete TExpeditionTeamInfo::default_instance_;
  delete TExpeditionTeamInfo_reflection_;
  delete TExpeditionHeroStatus::default_instance_;
  delete TExpeditionHeroStatus_reflection_;
  delete TExpeditionStrongholdInfo::default_instance_;
  delete TExpeditionStrongholdInfo_reflection_;
  delete TExpeditionRewardInfo::default_instance_;
  delete TExpeditionRewardInfo_reflection_;
  delete TExpeditionBuffInfo::default_instance_;
  delete TExpeditionBuffInfo_reflection_;
  delete TExpeditionShopInfo::default_instance_;
  delete TExpeditionShopInfo_reflection_;
  delete TExpeditionRebornBuildInfo::default_instance_;
  delete TExpeditionRebornBuildInfo_reflection_;
  delete TExpeditionInfo::default_instance_;
  delete TExpeditionInfo_reflection_;
  delete TExpeditionGetInfoRsp::default_instance_;
  delete TExpeditionGetInfoRsp_reflection_;
  delete TExpeditionGetInfoNotify::default_instance_;
  delete TExpeditionGetInfoNotify_reflection_;
  delete TExpeditionDoBattleReq::default_instance_;
  delete TExpeditionDoBattleReq_reflection_;
  delete TExpeditionDoBattleRsp::default_instance_;
  delete TExpeditionDoBattleRsp_reflection_;
  delete TExpeditionDoBattleReportReq::default_instance_;
  delete TExpeditionDoBattleReportReq_reflection_;
  delete TExpeditionGetRewardReq::default_instance_;
  delete TExpeditionGetRewardReq_reflection_;
  delete TExpeditionGetRewardRsp::default_instance_;
  delete TExpeditionGetRewardRsp_reflection_;
  delete TExpeditionGetBuffReq::default_instance_;
  delete TExpeditionGetBuffReq_reflection_;
  delete TExpeditionGetBuffRsp::default_instance_;
  delete TExpeditionGetBuffRsp_reflection_;
  delete TExpeditionSelectBuffReq::default_instance_;
  delete TExpeditionSelectBuffReq_reflection_;
  delete TExpeditionSelectTreasureBuffReq::default_instance_;
  delete TExpeditionSelectTreasureBuffReq_reflection_;
  delete TExpeditionShoppingReq::default_instance_;
  delete TExpeditionShoppingReq_reflection_;
  delete TExpeditionShoppingRsp::default_instance_;
  delete TExpeditionShoppingRsp_reflection_;
  delete TExpeditionResetRsp::default_instance_;
  delete TExpeditionResetRsp_reflection_;
  delete TExpeditionBuyResetNumReq::default_instance_;
  delete TExpeditionBuyResetNumReq_reflection_;
  delete TExpeditionRebornReq::default_instance_;
  delete TExpeditionRebornReq_reflection_;
  delete TExpeditionSetSquadReq::default_instance_;
  delete TExpeditionSetSquadReq_reflection_;
  delete TExpeditionUseRebornBuildReq::default_instance_;
  delete TExpeditionUseRebornBuildReq_reflection_;
  delete TExpeditionUseRebornBuildRsp::default_instance_;
  delete TExpeditionUseRebornBuildRsp_reflection_;
  delete TExpeditionQuickPassReq::default_instance_;
  delete TExpeditionQuickPassReq_reflection_;
  delete TExpeditionQuickPassRsp::default_instance_;
  delete TExpeditionQuickPassRsp_reflection_;
}

void protobuf_AddDesc_net_2fExpedition_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fMirror_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_module_2fAttributer_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024net/Expedition.proto\022\002pb\032\026net/CommonRe"
    "ward.proto\032\020net/Mirror.proto\032\020net/Battle"
    ".proto\032\027module/Attributer.proto\"z\n\023TExpe"
    "ditionTeamInfo\022\r\n\005Squad\030\001 \003(\r\022-\n\nHeroSta"
    "tus\030\002 \003(\0132\031.pb.TExpeditionHeroStatus\022%\n\010"
    "AddSkill\030\003 \003(\0132\023.pb.TSkillAttribute\"p\n\025T"
    "ExpeditionHeroStatus\022\013\n\003Hid\030\001 \001(\r\022\024\n\014Cur"
    "HpPercent\030\002 \001(\r\022\017\n\007CurRage\030\003 \001(\r\022#\n\013Buff"
    "AttrArr\030\004 \003(\0132\016.pb.TAttribute\"H\n\031TExpedi"
    "tionStrongholdInfo\022\n\n\002ID\030\001 \001(\r\022\037\n\006Mirror"
    "\030\002 \001(\0132\017.pb.TMirrorInfo\"[\n\025TExpeditionRe"
    "wardInfo\022\n\n\002ID\030\001 \001(\r\022\020\n\010Received\030\002 \001(\r\022$"
    "\n\tRewardArr\030\003 \003(\0132\021.pb.TCommonReward\"I\n\023"
    "TExpeditionBuffInfo\022\n\n\002ID\030\001 \001(\r\022\017\n\007BuffA"
    "rr\030\002 \003(\r\022\025\n\rSelectedIndex\030\003 \001(\r\".\n\023TExpe"
    "ditionShopInfo\022\n\n\002ID\030\001 \001(\r\022\013\n\003Num\030\002 \001(\r\""
    "5\n\032TExpeditionRebornBuildInfo\022\n\n\002ID\030\001 \001("
    "\r\022\013\n\003Hid\030\002 \001(\r\"\265\003\n\017TExpeditionInfo\022\'\n\006My"
    "Team\030\001 \001(\0132\027.pb.TExpeditionTeamInfo\0224\n\rS"
    "trongholdArr\030\002 \003(\0132\035.pb.TExpeditionStron"
    "gholdInfo\022,\n\tRewardArr\030\003 \003(\0132\031.pb.TExped"
    "itionRewardInfo\022(\n\007BuffArr\030\004 \003(\0132\027.pb.TE"
    "xpeditionBuffInfo\022\'\n\006BuyArr\030\005 \003(\0132\027.pb.T"
    "ExpeditionShopInfo\022\021\n\tResetTime\030\006 \001(\004\022\024\n"
    "\014BuyRebornNum\030\007 \001(\r\0226\n\016RebornBuildArr\030\010 "
    "\003(\0132\036.pb.TExpeditionRebornBuildInfo\022-\n\014T"
    "reasureBuff\030\t \001(\0132\027.pb.TExpeditionBuffIn"
    "fo\022\031\n\021IsQuickPassChoose\030\n \001(\010\022\027\n\017LastPas"
    "sMainNum\030\013 \001(\r\":\n\025TExpeditionGetInfoRsp\022"
    "!\n\004Info\030\001 \001(\0132\023.pb.TExpeditionInfo\"l\n\030TE"
    "xpeditionGetInfoNotify\022!\n\004Info\030\001 \001(\0132\023.p"
    "b.TExpeditionInfo\022-\n\nRewardInfo\030\002 \001(\0132\031."
    "pb.TExpeditionRewardInfo\"t\n\026TExpeditionD"
    "oBattleReq\022\n\n\002ID\030\001 \001(\r\022/\n\020BattleCheckPar"
    "am\030\002 \001(\0132\025.pb.TBattleCheckParam\022\016\n\006HidAr"
    "r\030\003 \003(\r\022\r\n\005Squad\030\004 \003(\r\"=\n\026TExpeditionDoB"
    "attleRsp\022#\n\nBattleArgs\030\001 \001(\0132\017.pb.TBattl"
    "eArgs\"h\n\034TExpeditionDoBattleReportReq\022\n\n"
    "\002ID\030\001 \001(\r\022\'\n\014BattleResult\030\002 \001(\0132\021.pb.TBa"
    "ttleResult\022\023\n\013IsWinDirect\030\003 \001(\r\"%\n\027TExpe"
    "ditionGetRewardReq\022\n\n\002ID\030\001 \001(\r\"D\n\027TExped"
    "itionGetRewardRsp\022)\n\006Reward\030\001 \001(\0132\031.pb.T"
    "ExpeditionRewardInfo\"#\n\025TExpeditionGetBu"
    "ffReq\022\n\n\002ID\030\001 \001(\r\"4\n\025TExpeditionGetBuffR"
    "sp\022\n\n\002ID\030\001 \001(\r\022\017\n\007BuffArr\030\002 \003(\r\"H\n\030TExpe"
    "ditionSelectBuffReq\022\n\n\002ID\030\001 \001(\r\022\021\n\tBuffI"
    "ndex\030\002 \001(\r\022\r\n\005Heros\030\003 \003(\r\"P\n TExpedition"
    "SelectTreasureBuffReq\022\n\n\002ID\030\001 \001(\r\022\021\n\tBuf"
    "fIndex\030\002 \001(\r\022\r\n\005Heros\030\003 \003(\r\"1\n\026TExpediti"
    "onShoppingReq\022\n\n\002ID\030\001 \001(\r\022\013\n\003Num\030\002 \001(\r\">"
    "\n\026TExpeditionShoppingRsp\022$\n\tRewardArr\030\001 "
    "\003(\0132\021.pb.TCommonReward\"8\n\023TExpeditionRes"
    "etRsp\022!\n\004Info\030\001 \001(\0132\023.pb.TExpeditionInfo"
    "\"(\n\031TExpeditionBuyResetNumReq\022\013\n\003Num\030\001 \001"
    "(\r\"\026\n\024TExpeditionRebornReq\"\'\n\026TExpeditio"
    "nSetSquadReq\022\r\n\005Squad\030\001 \003(\r\"7\n\034TExpediti"
    "onUseRebornBuildReq\022\n\n\002ID\030\001 \001(\r\022\013\n\003Hid\030\002"
    " \001(\r\"K\n\034TExpeditionUseRebornBuildRsp\022+\n\010"
    "HeroInfo\030\001 \001(\0132\031.pb.TExpeditionHeroStatu"
    "s\"/\n\027TExpeditionQuickPassReq\022\024\n\014IsChoose"
    "Pass\030\001 \001(\010\"f\n\027TExpeditionQuickPassRsp\022!\n"
    "\004Info\030\001 \001(\0132\023.pb.TExpeditionInfo\022(\n\rShop"
    "RewardArr\030\002 \003(\0132\021.pb.TCommonReward", 2514);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Expedition.proto", &protobuf_RegisterTypes);
  TExpeditionTeamInfo::default_instance_ = new TExpeditionTeamInfo();
  TExpeditionHeroStatus::default_instance_ = new TExpeditionHeroStatus();
  TExpeditionStrongholdInfo::default_instance_ = new TExpeditionStrongholdInfo();
  TExpeditionRewardInfo::default_instance_ = new TExpeditionRewardInfo();
  TExpeditionBuffInfo::default_instance_ = new TExpeditionBuffInfo();
  TExpeditionShopInfo::default_instance_ = new TExpeditionShopInfo();
  TExpeditionRebornBuildInfo::default_instance_ = new TExpeditionRebornBuildInfo();
  TExpeditionInfo::default_instance_ = new TExpeditionInfo();
  TExpeditionGetInfoRsp::default_instance_ = new TExpeditionGetInfoRsp();
  TExpeditionGetInfoNotify::default_instance_ = new TExpeditionGetInfoNotify();
  TExpeditionDoBattleReq::default_instance_ = new TExpeditionDoBattleReq();
  TExpeditionDoBattleRsp::default_instance_ = new TExpeditionDoBattleRsp();
  TExpeditionDoBattleReportReq::default_instance_ = new TExpeditionDoBattleReportReq();
  TExpeditionGetRewardReq::default_instance_ = new TExpeditionGetRewardReq();
  TExpeditionGetRewardRsp::default_instance_ = new TExpeditionGetRewardRsp();
  TExpeditionGetBuffReq::default_instance_ = new TExpeditionGetBuffReq();
  TExpeditionGetBuffRsp::default_instance_ = new TExpeditionGetBuffRsp();
  TExpeditionSelectBuffReq::default_instance_ = new TExpeditionSelectBuffReq();
  TExpeditionSelectTreasureBuffReq::default_instance_ = new TExpeditionSelectTreasureBuffReq();
  TExpeditionShoppingReq::default_instance_ = new TExpeditionShoppingReq();
  TExpeditionShoppingRsp::default_instance_ = new TExpeditionShoppingRsp();
  TExpeditionResetRsp::default_instance_ = new TExpeditionResetRsp();
  TExpeditionBuyResetNumReq::default_instance_ = new TExpeditionBuyResetNumReq();
  TExpeditionRebornReq::default_instance_ = new TExpeditionRebornReq();
  TExpeditionSetSquadReq::default_instance_ = new TExpeditionSetSquadReq();
  TExpeditionUseRebornBuildReq::default_instance_ = new TExpeditionUseRebornBuildReq();
  TExpeditionUseRebornBuildRsp::default_instance_ = new TExpeditionUseRebornBuildRsp();
  TExpeditionQuickPassReq::default_instance_ = new TExpeditionQuickPassReq();
  TExpeditionQuickPassRsp::default_instance_ = new TExpeditionQuickPassRsp();
  TExpeditionTeamInfo::default_instance_->InitAsDefaultInstance();
  TExpeditionHeroStatus::default_instance_->InitAsDefaultInstance();
  TExpeditionStrongholdInfo::default_instance_->InitAsDefaultInstance();
  TExpeditionRewardInfo::default_instance_->InitAsDefaultInstance();
  TExpeditionBuffInfo::default_instance_->InitAsDefaultInstance();
  TExpeditionShopInfo::default_instance_->InitAsDefaultInstance();
  TExpeditionRebornBuildInfo::default_instance_->InitAsDefaultInstance();
  TExpeditionInfo::default_instance_->InitAsDefaultInstance();
  TExpeditionGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TExpeditionGetInfoNotify::default_instance_->InitAsDefaultInstance();
  TExpeditionDoBattleReq::default_instance_->InitAsDefaultInstance();
  TExpeditionDoBattleRsp::default_instance_->InitAsDefaultInstance();
  TExpeditionDoBattleReportReq::default_instance_->InitAsDefaultInstance();
  TExpeditionGetRewardReq::default_instance_->InitAsDefaultInstance();
  TExpeditionGetRewardRsp::default_instance_->InitAsDefaultInstance();
  TExpeditionGetBuffReq::default_instance_->InitAsDefaultInstance();
  TExpeditionGetBuffRsp::default_instance_->InitAsDefaultInstance();
  TExpeditionSelectBuffReq::default_instance_->InitAsDefaultInstance();
  TExpeditionSelectTreasureBuffReq::default_instance_->InitAsDefaultInstance();
  TExpeditionShoppingReq::default_instance_->InitAsDefaultInstance();
  TExpeditionShoppingRsp::default_instance_->InitAsDefaultInstance();
  TExpeditionResetRsp::default_instance_->InitAsDefaultInstance();
  TExpeditionBuyResetNumReq::default_instance_->InitAsDefaultInstance();
  TExpeditionRebornReq::default_instance_->InitAsDefaultInstance();
  TExpeditionSetSquadReq::default_instance_->InitAsDefaultInstance();
  TExpeditionUseRebornBuildReq::default_instance_->InitAsDefaultInstance();
  TExpeditionUseRebornBuildRsp::default_instance_->InitAsDefaultInstance();
  TExpeditionQuickPassReq::default_instance_->InitAsDefaultInstance();
  TExpeditionQuickPassRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fExpedition_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fExpedition_2eproto {
  StaticDescriptorInitializer_net_2fExpedition_2eproto() {
    protobuf_AddDesc_net_2fExpedition_2eproto();
  }
} static_descriptor_initializer_net_2fExpedition_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TExpeditionTeamInfo::kSquadFieldNumber;
const int TExpeditionTeamInfo::kHeroStatusFieldNumber;
const int TExpeditionTeamInfo::kAddSkillFieldNumber;
#endif  // !_MSC_VER

TExpeditionTeamInfo::TExpeditionTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionTeamInfo)
}

void TExpeditionTeamInfo::InitAsDefaultInstance() {
}

TExpeditionTeamInfo::TExpeditionTeamInfo(const TExpeditionTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionTeamInfo)
}

void TExpeditionTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionTeamInfo::~TExpeditionTeamInfo() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionTeamInfo)
  SharedDtor();
}

void TExpeditionTeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionTeamInfo_descriptor_;
}

const TExpeditionTeamInfo& TExpeditionTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionTeamInfo* TExpeditionTeamInfo::default_instance_ = NULL;

TExpeditionTeamInfo* TExpeditionTeamInfo::New() const {
  return new TExpeditionTeamInfo;
}

void TExpeditionTeamInfo::Clear() {
  squad_.Clear();
  herostatus_.Clear();
  addskill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 Squad = 1;
      case 1: {
        if (tag == 8) {
         parse_Squad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_squad())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_squad())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_Squad;
        if (input->ExpectTag(18)) goto parse_HeroStatus;
        break;
      }

      // repeated .pb.TExpeditionHeroStatus HeroStatus = 2;
      case 2: {
        if (tag == 18) {
         parse_HeroStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herostatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_HeroStatus;
        if (input->ExpectTag(26)) goto parse_AddSkill;
        break;
      }

      // repeated .pb.TSkillAttribute AddSkill = 3;
      case 3: {
        if (tag == 26) {
         parse_AddSkill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addskill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AddSkill;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionTeamInfo)
  return false;
#undef DO_
}

void TExpeditionTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionTeamInfo)
  // repeated uint32 Squad = 1;
  for (int i = 0; i < this->squad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->squad(i), output);
  }

  // repeated .pb.TExpeditionHeroStatus HeroStatus = 2;
  for (int i = 0; i < this->herostatus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->herostatus(i), output);
  }

  // repeated .pb.TSkillAttribute AddSkill = 3;
  for (int i = 0; i < this->addskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->addskill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionTeamInfo)
}

::google::protobuf::uint8* TExpeditionTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionTeamInfo)
  // repeated uint32 Squad = 1;
  for (int i = 0; i < this->squad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->squad(i), target);
  }

  // repeated .pb.TExpeditionHeroStatus HeroStatus = 2;
  for (int i = 0; i < this->herostatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->herostatus(i), target);
  }

  // repeated .pb.TSkillAttribute AddSkill = 3;
  for (int i = 0; i < this->addskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->addskill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionTeamInfo)
  return target;
}

int TExpeditionTeamInfo::ByteSize() const {
  int total_size = 0;

  // repeated uint32 Squad = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->squad_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->squad(i));
    }
    total_size += 1 * this->squad_size() + data_size;
  }

  // repeated .pb.TExpeditionHeroStatus HeroStatus = 2;
  total_size += 1 * this->herostatus_size();
  for (int i = 0; i < this->herostatus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herostatus(i));
  }

  // repeated .pb.TSkillAttribute AddSkill = 3;
  total_size += 1 * this->addskill_size();
  for (int i = 0; i < this->addskill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addskill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionTeamInfo::MergeFrom(const TExpeditionTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  squad_.MergeFrom(from.squad_);
  herostatus_.MergeFrom(from.herostatus_);
  addskill_.MergeFrom(from.addskill_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionTeamInfo::CopyFrom(const TExpeditionTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionTeamInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->herostatus())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->addskill())) return false;
  return true;
}

void TExpeditionTeamInfo::Swap(TExpeditionTeamInfo* other) {
  if (other != this) {
    squad_.Swap(&other->squad_);
    herostatus_.Swap(&other->herostatus_);
    addskill_.Swap(&other->addskill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionTeamInfo_descriptor_;
  metadata.reflection = TExpeditionTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionHeroStatus::kHidFieldNumber;
const int TExpeditionHeroStatus::kCurHpPercentFieldNumber;
const int TExpeditionHeroStatus::kCurRageFieldNumber;
const int TExpeditionHeroStatus::kBuffAttrArrFieldNumber;
#endif  // !_MSC_VER

TExpeditionHeroStatus::TExpeditionHeroStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionHeroStatus)
}

void TExpeditionHeroStatus::InitAsDefaultInstance() {
}

TExpeditionHeroStatus::TExpeditionHeroStatus(const TExpeditionHeroStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionHeroStatus)
}

void TExpeditionHeroStatus::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  curhppercent_ = 0u;
  currage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionHeroStatus::~TExpeditionHeroStatus() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionHeroStatus)
  SharedDtor();
}

void TExpeditionHeroStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionHeroStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionHeroStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionHeroStatus_descriptor_;
}

const TExpeditionHeroStatus& TExpeditionHeroStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionHeroStatus* TExpeditionHeroStatus::default_instance_ = NULL;

TExpeditionHeroStatus* TExpeditionHeroStatus::New() const {
  return new TExpeditionHeroStatus;
}

void TExpeditionHeroStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TExpeditionHeroStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(hid_, curhppercent_);
    currage_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  buffattrarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionHeroStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionHeroStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurHpPercent;
        break;
      }

      // optional uint32 CurHpPercent = 2;
      case 2: {
        if (tag == 16) {
         parse_CurHpPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhppercent_)));
          set_has_curhppercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurRage;
        break;
      }

      // optional uint32 CurRage = 3;
      case 3: {
        if (tag == 24) {
         parse_CurRage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currage_)));
          set_has_currage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BuffAttrArr;
        break;
      }

      // repeated .pb.TAttribute BuffAttrArr = 4;
      case 4: {
        if (tag == 34) {
         parse_BuffAttrArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffattrarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BuffAttrArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionHeroStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionHeroStatus)
  return false;
#undef DO_
}

void TExpeditionHeroStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionHeroStatus)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 CurHpPercent = 2;
  if (has_curhppercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curhppercent(), output);
  }

  // optional uint32 CurRage = 3;
  if (has_currage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->currage(), output);
  }

  // repeated .pb.TAttribute BuffAttrArr = 4;
  for (int i = 0; i < this->buffattrarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buffattrarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionHeroStatus)
}

::google::protobuf::uint8* TExpeditionHeroStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionHeroStatus)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 CurHpPercent = 2;
  if (has_curhppercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curhppercent(), target);
  }

  // optional uint32 CurRage = 3;
  if (has_currage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->currage(), target);
  }

  // repeated .pb.TAttribute BuffAttrArr = 4;
  for (int i = 0; i < this->buffattrarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buffattrarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionHeroStatus)
  return target;
}

int TExpeditionHeroStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 CurHpPercent = 2;
    if (has_curhppercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhppercent());
    }

    // optional uint32 CurRage = 3;
    if (has_currage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currage());
    }

  }
  // repeated .pb.TAttribute BuffAttrArr = 4;
  total_size += 1 * this->buffattrarr_size();
  for (int i = 0; i < this->buffattrarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffattrarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionHeroStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionHeroStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionHeroStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionHeroStatus::MergeFrom(const TExpeditionHeroStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffattrarr_.MergeFrom(from.buffattrarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_curhppercent()) {
      set_curhppercent(from.curhppercent());
    }
    if (from.has_currage()) {
      set_currage(from.currage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionHeroStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionHeroStatus::CopyFrom(const TExpeditionHeroStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionHeroStatus::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->buffattrarr())) return false;
  return true;
}

void TExpeditionHeroStatus::Swap(TExpeditionHeroStatus* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(curhppercent_, other->curhppercent_);
    std::swap(currage_, other->currage_);
    buffattrarr_.Swap(&other->buffattrarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionHeroStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionHeroStatus_descriptor_;
  metadata.reflection = TExpeditionHeroStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionStrongholdInfo::kIDFieldNumber;
const int TExpeditionStrongholdInfo::kMirrorFieldNumber;
#endif  // !_MSC_VER

TExpeditionStrongholdInfo::TExpeditionStrongholdInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionStrongholdInfo)
}

void TExpeditionStrongholdInfo::InitAsDefaultInstance() {
  mirror_ = const_cast< ::pb::TMirrorInfo*>(&::pb::TMirrorInfo::default_instance());
}

TExpeditionStrongholdInfo::TExpeditionStrongholdInfo(const TExpeditionStrongholdInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionStrongholdInfo)
}

void TExpeditionStrongholdInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  mirror_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionStrongholdInfo::~TExpeditionStrongholdInfo() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionStrongholdInfo)
  SharedDtor();
}

void TExpeditionStrongholdInfo::SharedDtor() {
  if (this != default_instance_) {
    delete mirror_;
  }
}

void TExpeditionStrongholdInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionStrongholdInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionStrongholdInfo_descriptor_;
}

const TExpeditionStrongholdInfo& TExpeditionStrongholdInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionStrongholdInfo* TExpeditionStrongholdInfo::default_instance_ = NULL;

TExpeditionStrongholdInfo* TExpeditionStrongholdInfo::New() const {
  return new TExpeditionStrongholdInfo;
}

void TExpeditionStrongholdInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_mirror()) {
      if (mirror_ != NULL) mirror_->::pb::TMirrorInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionStrongholdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionStrongholdInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Mirror;
        break;
      }

      // optional .pb.TMirrorInfo Mirror = 2;
      case 2: {
        if (tag == 18) {
         parse_Mirror:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mirror()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionStrongholdInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionStrongholdInfo)
  return false;
#undef DO_
}

void TExpeditionStrongholdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionStrongholdInfo)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .pb.TMirrorInfo Mirror = 2;
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mirror(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionStrongholdInfo)
}

::google::protobuf::uint8* TExpeditionStrongholdInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionStrongholdInfo)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .pb.TMirrorInfo Mirror = 2;
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mirror(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionStrongholdInfo)
  return target;
}

int TExpeditionStrongholdInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .pb.TMirrorInfo Mirror = 2;
    if (has_mirror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mirror());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionStrongholdInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionStrongholdInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionStrongholdInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionStrongholdInfo::MergeFrom(const TExpeditionStrongholdInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mirror()) {
      mutable_mirror()->::pb::TMirrorInfo::MergeFrom(from.mirror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionStrongholdInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionStrongholdInfo::CopyFrom(const TExpeditionStrongholdInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionStrongholdInfo::IsInitialized() const {

  if (has_mirror()) {
    if (!this->mirror().IsInitialized()) return false;
  }
  return true;
}

void TExpeditionStrongholdInfo::Swap(TExpeditionStrongholdInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mirror_, other->mirror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionStrongholdInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionStrongholdInfo_descriptor_;
  metadata.reflection = TExpeditionStrongholdInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionRewardInfo::kIDFieldNumber;
const int TExpeditionRewardInfo::kReceivedFieldNumber;
const int TExpeditionRewardInfo::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TExpeditionRewardInfo::TExpeditionRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionRewardInfo)
}

void TExpeditionRewardInfo::InitAsDefaultInstance() {
}

TExpeditionRewardInfo::TExpeditionRewardInfo(const TExpeditionRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionRewardInfo)
}

void TExpeditionRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  received_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionRewardInfo::~TExpeditionRewardInfo() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionRewardInfo)
  SharedDtor();
}

void TExpeditionRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionRewardInfo_descriptor_;
}

const TExpeditionRewardInfo& TExpeditionRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionRewardInfo* TExpeditionRewardInfo::default_instance_ = NULL;

TExpeditionRewardInfo* TExpeditionRewardInfo::New() const {
  return new TExpeditionRewardInfo;
}

void TExpeditionRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TExpeditionRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, received_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Received;
        break;
      }

      // optional uint32 Received = 2;
      case 2: {
        if (tag == 16) {
         parse_Received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &received_)));
          set_has_received();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionRewardInfo)
  return false;
#undef DO_
}

void TExpeditionRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionRewardInfo)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Received = 2;
  if (has_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->received(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionRewardInfo)
}

::google::protobuf::uint8* TExpeditionRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionRewardInfo)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Received = 2;
  if (has_received()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->received(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionRewardInfo)
  return target;
}

int TExpeditionRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Received = 2;
    if (has_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->received());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 3;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionRewardInfo::MergeFrom(const TExpeditionRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_received()) {
      set_received(from.received());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionRewardInfo::CopyFrom(const TExpeditionRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionRewardInfo::IsInitialized() const {

  return true;
}

void TExpeditionRewardInfo::Swap(TExpeditionRewardInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(received_, other->received_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionRewardInfo_descriptor_;
  metadata.reflection = TExpeditionRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionBuffInfo::kIDFieldNumber;
const int TExpeditionBuffInfo::kBuffArrFieldNumber;
const int TExpeditionBuffInfo::kSelectedIndexFieldNumber;
#endif  // !_MSC_VER

TExpeditionBuffInfo::TExpeditionBuffInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionBuffInfo)
}

void TExpeditionBuffInfo::InitAsDefaultInstance() {
}

TExpeditionBuffInfo::TExpeditionBuffInfo(const TExpeditionBuffInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionBuffInfo)
}

void TExpeditionBuffInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  selectedindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionBuffInfo::~TExpeditionBuffInfo() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionBuffInfo)
  SharedDtor();
}

void TExpeditionBuffInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionBuffInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionBuffInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionBuffInfo_descriptor_;
}

const TExpeditionBuffInfo& TExpeditionBuffInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionBuffInfo* TExpeditionBuffInfo::default_instance_ = NULL;

TExpeditionBuffInfo* TExpeditionBuffInfo::New() const {
  return new TExpeditionBuffInfo;
}

void TExpeditionBuffInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TExpeditionBuffInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, selectedindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  buffarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionBuffInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionBuffInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuffArr;
        break;
      }

      // repeated uint32 BuffArr = 2;
      case 2: {
        if (tag == 16) {
         parse_BuffArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_buffarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buffarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuffArr;
        if (input->ExpectTag(24)) goto parse_SelectedIndex;
        break;
      }

      // optional uint32 SelectedIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_SelectedIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selectedindex_)));
          set_has_selectedindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionBuffInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionBuffInfo)
  return false;
#undef DO_
}

void TExpeditionBuffInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionBuffInfo)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated uint32 BuffArr = 2;
  for (int i = 0; i < this->buffarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->buffarr(i), output);
  }

  // optional uint32 SelectedIndex = 3;
  if (has_selectedindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selectedindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionBuffInfo)
}

::google::protobuf::uint8* TExpeditionBuffInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionBuffInfo)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated uint32 BuffArr = 2;
  for (int i = 0; i < this->buffarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->buffarr(i), target);
  }

  // optional uint32 SelectedIndex = 3;
  if (has_selectedindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->selectedindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionBuffInfo)
  return target;
}

int TExpeditionBuffInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 SelectedIndex = 3;
    if (has_selectedindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selectedindex());
    }

  }
  // repeated uint32 BuffArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buffarr(i));
    }
    total_size += 1 * this->buffarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionBuffInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionBuffInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionBuffInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionBuffInfo::MergeFrom(const TExpeditionBuffInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffarr_.MergeFrom(from.buffarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_selectedindex()) {
      set_selectedindex(from.selectedindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionBuffInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionBuffInfo::CopyFrom(const TExpeditionBuffInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionBuffInfo::IsInitialized() const {

  return true;
}

void TExpeditionBuffInfo::Swap(TExpeditionBuffInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    buffarr_.Swap(&other->buffarr_);
    std::swap(selectedindex_, other->selectedindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionBuffInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionBuffInfo_descriptor_;
  metadata.reflection = TExpeditionBuffInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionShopInfo::kIDFieldNumber;
const int TExpeditionShopInfo::kNumFieldNumber;
#endif  // !_MSC_VER

TExpeditionShopInfo::TExpeditionShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionShopInfo)
}

void TExpeditionShopInfo::InitAsDefaultInstance() {
}

TExpeditionShopInfo::TExpeditionShopInfo(const TExpeditionShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionShopInfo)
}

void TExpeditionShopInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionShopInfo::~TExpeditionShopInfo() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionShopInfo)
  SharedDtor();
}

void TExpeditionShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionShopInfo_descriptor_;
}

const TExpeditionShopInfo& TExpeditionShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionShopInfo* TExpeditionShopInfo::default_instance_ = NULL;

TExpeditionShopInfo* TExpeditionShopInfo::New() const {
  return new TExpeditionShopInfo;
}

void TExpeditionShopInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TExpeditionShopInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionShopInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionShopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionShopInfo)
  return false;
#undef DO_
}

void TExpeditionShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionShopInfo)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionShopInfo)
}

::google::protobuf::uint8* TExpeditionShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionShopInfo)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionShopInfo)
  return target;
}

int TExpeditionShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionShopInfo::MergeFrom(const TExpeditionShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionShopInfo::CopyFrom(const TExpeditionShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionShopInfo::IsInitialized() const {

  return true;
}

void TExpeditionShopInfo::Swap(TExpeditionShopInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionShopInfo_descriptor_;
  metadata.reflection = TExpeditionShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionRebornBuildInfo::kIDFieldNumber;
const int TExpeditionRebornBuildInfo::kHidFieldNumber;
#endif  // !_MSC_VER

TExpeditionRebornBuildInfo::TExpeditionRebornBuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionRebornBuildInfo)
}

void TExpeditionRebornBuildInfo::InitAsDefaultInstance() {
}

TExpeditionRebornBuildInfo::TExpeditionRebornBuildInfo(const TExpeditionRebornBuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionRebornBuildInfo)
}

void TExpeditionRebornBuildInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  hid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionRebornBuildInfo::~TExpeditionRebornBuildInfo() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionRebornBuildInfo)
  SharedDtor();
}

void TExpeditionRebornBuildInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionRebornBuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionRebornBuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionRebornBuildInfo_descriptor_;
}

const TExpeditionRebornBuildInfo& TExpeditionRebornBuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionRebornBuildInfo* TExpeditionRebornBuildInfo::default_instance_ = NULL;

TExpeditionRebornBuildInfo* TExpeditionRebornBuildInfo::New() const {
  return new TExpeditionRebornBuildInfo;
}

void TExpeditionRebornBuildInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TExpeditionRebornBuildInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, hid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionRebornBuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionRebornBuildInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Hid;
        break;
      }

      // optional uint32 Hid = 2;
      case 2: {
        if (tag == 16) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionRebornBuildInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionRebornBuildInfo)
  return false;
#undef DO_
}

void TExpeditionRebornBuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionRebornBuildInfo)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionRebornBuildInfo)
}

::google::protobuf::uint8* TExpeditionRebornBuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionRebornBuildInfo)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionRebornBuildInfo)
  return target;
}

int TExpeditionRebornBuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Hid = 2;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionRebornBuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionRebornBuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionRebornBuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionRebornBuildInfo::MergeFrom(const TExpeditionRebornBuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionRebornBuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionRebornBuildInfo::CopyFrom(const TExpeditionRebornBuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionRebornBuildInfo::IsInitialized() const {

  return true;
}

void TExpeditionRebornBuildInfo::Swap(TExpeditionRebornBuildInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hid_, other->hid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionRebornBuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionRebornBuildInfo_descriptor_;
  metadata.reflection = TExpeditionRebornBuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionInfo::kMyTeamFieldNumber;
const int TExpeditionInfo::kStrongholdArrFieldNumber;
const int TExpeditionInfo::kRewardArrFieldNumber;
const int TExpeditionInfo::kBuffArrFieldNumber;
const int TExpeditionInfo::kBuyArrFieldNumber;
const int TExpeditionInfo::kResetTimeFieldNumber;
const int TExpeditionInfo::kBuyRebornNumFieldNumber;
const int TExpeditionInfo::kRebornBuildArrFieldNumber;
const int TExpeditionInfo::kTreasureBuffFieldNumber;
const int TExpeditionInfo::kIsQuickPassChooseFieldNumber;
const int TExpeditionInfo::kLastPassMainNumFieldNumber;
#endif  // !_MSC_VER

TExpeditionInfo::TExpeditionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionInfo)
}

void TExpeditionInfo::InitAsDefaultInstance() {
  myteam_ = const_cast< ::pb::TExpeditionTeamInfo*>(&::pb::TExpeditionTeamInfo::default_instance());
  treasurebuff_ = const_cast< ::pb::TExpeditionBuffInfo*>(&::pb::TExpeditionBuffInfo::default_instance());
}

TExpeditionInfo::TExpeditionInfo(const TExpeditionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionInfo)
}

void TExpeditionInfo::SharedCtor() {
  _cached_size_ = 0;
  myteam_ = NULL;
  resettime_ = GOOGLE_ULONGLONG(0);
  buyrebornnum_ = 0u;
  treasurebuff_ = NULL;
  isquickpasschoose_ = false;
  lastpassmainnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionInfo::~TExpeditionInfo() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionInfo)
  SharedDtor();
}

void TExpeditionInfo::SharedDtor() {
  if (this != default_instance_) {
    delete myteam_;
    delete treasurebuff_;
  }
}

void TExpeditionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionInfo_descriptor_;
}

const TExpeditionInfo& TExpeditionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionInfo* TExpeditionInfo::default_instance_ = NULL;

TExpeditionInfo* TExpeditionInfo::New() const {
  return new TExpeditionInfo;
}

void TExpeditionInfo::Clear() {
  if (_has_bits_[0 / 32] & 97) {
    if (has_myteam()) {
      if (myteam_ != NULL) myteam_->::pb::TExpeditionTeamInfo::Clear();
    }
    resettime_ = GOOGLE_ULONGLONG(0);
    buyrebornnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_treasurebuff()) {
      if (treasurebuff_ != NULL) treasurebuff_->::pb::TExpeditionBuffInfo::Clear();
    }
    isquickpasschoose_ = false;
    lastpassmainnum_ = 0u;
  }
  strongholdarr_.Clear();
  rewardarr_.Clear();
  buffarr_.Clear();
  buyarr_.Clear();
  rebornbuildarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TExpeditionTeamInfo MyTeam = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myteam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StrongholdArr;
        break;
      }

      // repeated .pb.TExpeditionStrongholdInfo StrongholdArr = 2;
      case 2: {
        if (tag == 18) {
         parse_StrongholdArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strongholdarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StrongholdArr;
        if (input->ExpectTag(26)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TExpeditionRewardInfo RewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        if (input->ExpectTag(34)) goto parse_BuffArr;
        break;
      }

      // repeated .pb.TExpeditionBuffInfo BuffArr = 4;
      case 4: {
        if (tag == 34) {
         parse_BuffArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BuffArr;
        if (input->ExpectTag(42)) goto parse_BuyArr;
        break;
      }

      // repeated .pb.TExpeditionShopInfo BuyArr = 5;
      case 5: {
        if (tag == 42) {
         parse_BuyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_BuyArr;
        if (input->ExpectTag(48)) goto parse_ResetTime;
        break;
      }

      // optional uint64 ResetTime = 6;
      case 6: {
        if (tag == 48) {
         parse_ResetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_BuyRebornNum;
        break;
      }

      // optional uint32 BuyRebornNum = 7;
      case 7: {
        if (tag == 56) {
         parse_BuyRebornNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyrebornnum_)));
          set_has_buyrebornnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_RebornBuildArr;
        break;
      }

      // repeated .pb.TExpeditionRebornBuildInfo RebornBuildArr = 8;
      case 8: {
        if (tag == 66) {
         parse_RebornBuildArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rebornbuildarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_RebornBuildArr;
        if (input->ExpectTag(74)) goto parse_TreasureBuff;
        break;
      }

      // optional .pb.TExpeditionBuffInfo TreasureBuff = 9;
      case 9: {
        if (tag == 74) {
         parse_TreasureBuff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasurebuff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_IsQuickPassChoose;
        break;
      }

      // optional bool IsQuickPassChoose = 10;
      case 10: {
        if (tag == 80) {
         parse_IsQuickPassChoose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isquickpasschoose_)));
          set_has_isquickpasschoose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_LastPassMainNum;
        break;
      }

      // optional uint32 LastPassMainNum = 11;
      case 11: {
        if (tag == 88) {
         parse_LastPassMainNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastpassmainnum_)));
          set_has_lastpassmainnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionInfo)
  return false;
#undef DO_
}

void TExpeditionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionInfo)
  // optional .pb.TExpeditionTeamInfo MyTeam = 1;
  if (has_myteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->myteam(), output);
  }

  // repeated .pb.TExpeditionStrongholdInfo StrongholdArr = 2;
  for (int i = 0; i < this->strongholdarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strongholdarr(i), output);
  }

  // repeated .pb.TExpeditionRewardInfo RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardarr(i), output);
  }

  // repeated .pb.TExpeditionBuffInfo BuffArr = 4;
  for (int i = 0; i < this->buffarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buffarr(i), output);
  }

  // repeated .pb.TExpeditionShopInfo BuyArr = 5;
  for (int i = 0; i < this->buyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->buyarr(i), output);
  }

  // optional uint64 ResetTime = 6;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->resettime(), output);
  }

  // optional uint32 BuyRebornNum = 7;
  if (has_buyrebornnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->buyrebornnum(), output);
  }

  // repeated .pb.TExpeditionRebornBuildInfo RebornBuildArr = 8;
  for (int i = 0; i < this->rebornbuildarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->rebornbuildarr(i), output);
  }

  // optional .pb.TExpeditionBuffInfo TreasureBuff = 9;
  if (has_treasurebuff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->treasurebuff(), output);
  }

  // optional bool IsQuickPassChoose = 10;
  if (has_isquickpasschoose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isquickpasschoose(), output);
  }

  // optional uint32 LastPassMainNum = 11;
  if (has_lastpassmainnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->lastpassmainnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionInfo)
}

::google::protobuf::uint8* TExpeditionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionInfo)
  // optional .pb.TExpeditionTeamInfo MyTeam = 1;
  if (has_myteam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->myteam(), target);
  }

  // repeated .pb.TExpeditionStrongholdInfo StrongholdArr = 2;
  for (int i = 0; i < this->strongholdarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strongholdarr(i), target);
  }

  // repeated .pb.TExpeditionRewardInfo RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardarr(i), target);
  }

  // repeated .pb.TExpeditionBuffInfo BuffArr = 4;
  for (int i = 0; i < this->buffarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buffarr(i), target);
  }

  // repeated .pb.TExpeditionShopInfo BuyArr = 5;
  for (int i = 0; i < this->buyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->buyarr(i), target);
  }

  // optional uint64 ResetTime = 6;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->resettime(), target);
  }

  // optional uint32 BuyRebornNum = 7;
  if (has_buyrebornnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->buyrebornnum(), target);
  }

  // repeated .pb.TExpeditionRebornBuildInfo RebornBuildArr = 8;
  for (int i = 0; i < this->rebornbuildarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->rebornbuildarr(i), target);
  }

  // optional .pb.TExpeditionBuffInfo TreasureBuff = 9;
  if (has_treasurebuff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->treasurebuff(), target);
  }

  // optional bool IsQuickPassChoose = 10;
  if (has_isquickpasschoose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isquickpasschoose(), target);
  }

  // optional uint32 LastPassMainNum = 11;
  if (has_lastpassmainnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->lastpassmainnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionInfo)
  return target;
}

int TExpeditionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TExpeditionTeamInfo MyTeam = 1;
    if (has_myteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myteam());
    }

    // optional uint64 ResetTime = 6;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resettime());
    }

    // optional uint32 BuyRebornNum = 7;
    if (has_buyrebornnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyrebornnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.TExpeditionBuffInfo TreasureBuff = 9;
    if (has_treasurebuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasurebuff());
    }

    // optional bool IsQuickPassChoose = 10;
    if (has_isquickpasschoose()) {
      total_size += 1 + 1;
    }

    // optional uint32 LastPassMainNum = 11;
    if (has_lastpassmainnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastpassmainnum());
    }

  }
  // repeated .pb.TExpeditionStrongholdInfo StrongholdArr = 2;
  total_size += 1 * this->strongholdarr_size();
  for (int i = 0; i < this->strongholdarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strongholdarr(i));
  }

  // repeated .pb.TExpeditionRewardInfo RewardArr = 3;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  // repeated .pb.TExpeditionBuffInfo BuffArr = 4;
  total_size += 1 * this->buffarr_size();
  for (int i = 0; i < this->buffarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffarr(i));
  }

  // repeated .pb.TExpeditionShopInfo BuyArr = 5;
  total_size += 1 * this->buyarr_size();
  for (int i = 0; i < this->buyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buyarr(i));
  }

  // repeated .pb.TExpeditionRebornBuildInfo RebornBuildArr = 8;
  total_size += 1 * this->rebornbuildarr_size();
  for (int i = 0; i < this->rebornbuildarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rebornbuildarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionInfo::MergeFrom(const TExpeditionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  strongholdarr_.MergeFrom(from.strongholdarr_);
  rewardarr_.MergeFrom(from.rewardarr_);
  buffarr_.MergeFrom(from.buffarr_);
  buyarr_.MergeFrom(from.buyarr_);
  rebornbuildarr_.MergeFrom(from.rebornbuildarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myteam()) {
      mutable_myteam()->::pb::TExpeditionTeamInfo::MergeFrom(from.myteam());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
    if (from.has_buyrebornnum()) {
      set_buyrebornnum(from.buyrebornnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_treasurebuff()) {
      mutable_treasurebuff()->::pb::TExpeditionBuffInfo::MergeFrom(from.treasurebuff());
    }
    if (from.has_isquickpasschoose()) {
      set_isquickpasschoose(from.isquickpasschoose());
    }
    if (from.has_lastpassmainnum()) {
      set_lastpassmainnum(from.lastpassmainnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionInfo::CopyFrom(const TExpeditionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionInfo::IsInitialized() const {

  if (has_myteam()) {
    if (!this->myteam().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->strongholdarr())) return false;
  return true;
}

void TExpeditionInfo::Swap(TExpeditionInfo* other) {
  if (other != this) {
    std::swap(myteam_, other->myteam_);
    strongholdarr_.Swap(&other->strongholdarr_);
    rewardarr_.Swap(&other->rewardarr_);
    buffarr_.Swap(&other->buffarr_);
    buyarr_.Swap(&other->buyarr_);
    std::swap(resettime_, other->resettime_);
    std::swap(buyrebornnum_, other->buyrebornnum_);
    rebornbuildarr_.Swap(&other->rebornbuildarr_);
    std::swap(treasurebuff_, other->treasurebuff_);
    std::swap(isquickpasschoose_, other->isquickpasschoose_);
    std::swap(lastpassmainnum_, other->lastpassmainnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionInfo_descriptor_;
  metadata.reflection = TExpeditionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionGetInfoRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

TExpeditionGetInfoRsp::TExpeditionGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionGetInfoRsp)
}

void TExpeditionGetInfoRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::TExpeditionInfo*>(&::pb::TExpeditionInfo::default_instance());
}

TExpeditionGetInfoRsp::TExpeditionGetInfoRsp(const TExpeditionGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionGetInfoRsp)
}

void TExpeditionGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionGetInfoRsp::~TExpeditionGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionGetInfoRsp)
  SharedDtor();
}

void TExpeditionGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void TExpeditionGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionGetInfoRsp_descriptor_;
}

const TExpeditionGetInfoRsp& TExpeditionGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionGetInfoRsp* TExpeditionGetInfoRsp::default_instance_ = NULL;

TExpeditionGetInfoRsp* TExpeditionGetInfoRsp::New() const {
  return new TExpeditionGetInfoRsp;
}

void TExpeditionGetInfoRsp::Clear() {
  if (has_info()) {
    if (info_ != NULL) info_->::pb::TExpeditionInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TExpeditionInfo Info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionGetInfoRsp)
  return false;
#undef DO_
}

void TExpeditionGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionGetInfoRsp)
  // optional .pb.TExpeditionInfo Info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionGetInfoRsp)
}

::google::protobuf::uint8* TExpeditionGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionGetInfoRsp)
  // optional .pb.TExpeditionInfo Info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionGetInfoRsp)
  return target;
}

int TExpeditionGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TExpeditionInfo Info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionGetInfoRsp::MergeFrom(const TExpeditionGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::pb::TExpeditionInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionGetInfoRsp::CopyFrom(const TExpeditionGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionGetInfoRsp::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void TExpeditionGetInfoRsp::Swap(TExpeditionGetInfoRsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionGetInfoRsp_descriptor_;
  metadata.reflection = TExpeditionGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionGetInfoNotify::kInfoFieldNumber;
const int TExpeditionGetInfoNotify::kRewardInfoFieldNumber;
#endif  // !_MSC_VER

TExpeditionGetInfoNotify::TExpeditionGetInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionGetInfoNotify)
}

void TExpeditionGetInfoNotify::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::TExpeditionInfo*>(&::pb::TExpeditionInfo::default_instance());
  rewardinfo_ = const_cast< ::pb::TExpeditionRewardInfo*>(&::pb::TExpeditionRewardInfo::default_instance());
}

TExpeditionGetInfoNotify::TExpeditionGetInfoNotify(const TExpeditionGetInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionGetInfoNotify)
}

void TExpeditionGetInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  rewardinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionGetInfoNotify::~TExpeditionGetInfoNotify() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionGetInfoNotify)
  SharedDtor();
}

void TExpeditionGetInfoNotify::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete rewardinfo_;
  }
}

void TExpeditionGetInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionGetInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionGetInfoNotify_descriptor_;
}

const TExpeditionGetInfoNotify& TExpeditionGetInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionGetInfoNotify* TExpeditionGetInfoNotify::default_instance_ = NULL;

TExpeditionGetInfoNotify* TExpeditionGetInfoNotify::New() const {
  return new TExpeditionGetInfoNotify;
}

void TExpeditionGetInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_info()) {
      if (info_ != NULL) info_->::pb::TExpeditionInfo::Clear();
    }
    if (has_rewardinfo()) {
      if (rewardinfo_ != NULL) rewardinfo_->::pb::TExpeditionRewardInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionGetInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionGetInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TExpeditionInfo Info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardInfo;
        break;
      }

      // optional .pb.TExpeditionRewardInfo RewardInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionGetInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionGetInfoNotify)
  return false;
#undef DO_
}

void TExpeditionGetInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionGetInfoNotify)
  // optional .pb.TExpeditionInfo Info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional .pb.TExpeditionRewardInfo RewardInfo = 2;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionGetInfoNotify)
}

::google::protobuf::uint8* TExpeditionGetInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionGetInfoNotify)
  // optional .pb.TExpeditionInfo Info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional .pb.TExpeditionRewardInfo RewardInfo = 2;
  if (has_rewardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionGetInfoNotify)
  return target;
}

int TExpeditionGetInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TExpeditionInfo Info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .pb.TExpeditionRewardInfo RewardInfo = 2;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewardinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionGetInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionGetInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionGetInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionGetInfoNotify::MergeFrom(const TExpeditionGetInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::pb::TExpeditionInfo::MergeFrom(from.info());
    }
    if (from.has_rewardinfo()) {
      mutable_rewardinfo()->::pb::TExpeditionRewardInfo::MergeFrom(from.rewardinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionGetInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionGetInfoNotify::CopyFrom(const TExpeditionGetInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionGetInfoNotify::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void TExpeditionGetInfoNotify::Swap(TExpeditionGetInfoNotify* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(rewardinfo_, other->rewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionGetInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionGetInfoNotify_descriptor_;
  metadata.reflection = TExpeditionGetInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionDoBattleReq::kIDFieldNumber;
const int TExpeditionDoBattleReq::kBattleCheckParamFieldNumber;
const int TExpeditionDoBattleReq::kHidArrFieldNumber;
const int TExpeditionDoBattleReq::kSquadFieldNumber;
#endif  // !_MSC_VER

TExpeditionDoBattleReq::TExpeditionDoBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionDoBattleReq)
}

void TExpeditionDoBattleReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TExpeditionDoBattleReq::TExpeditionDoBattleReq(const TExpeditionDoBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionDoBattleReq)
}

void TExpeditionDoBattleReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionDoBattleReq::~TExpeditionDoBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionDoBattleReq)
  SharedDtor();
}

void TExpeditionDoBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TExpeditionDoBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionDoBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionDoBattleReq_descriptor_;
}

const TExpeditionDoBattleReq& TExpeditionDoBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionDoBattleReq* TExpeditionDoBattleReq::default_instance_ = NULL;

TExpeditionDoBattleReq* TExpeditionDoBattleReq::New() const {
  return new TExpeditionDoBattleReq;
}

void TExpeditionDoBattleReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }
  hidarr_.Clear();
  squad_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionDoBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionDoBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_HidArr;
        break;
      }

      // repeated uint32 HidArr = 3;
      case 3: {
        if (tag == 24) {
         parse_HidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_hidarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_HidArr;
        if (input->ExpectTag(32)) goto parse_Squad;
        break;
      }

      // repeated uint32 Squad = 4;
      case 4: {
        if (tag == 32) {
         parse_Squad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_squad())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_squad())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Squad;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionDoBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionDoBattleReq)
  return false;
#undef DO_
}

void TExpeditionDoBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionDoBattleReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battlecheckparam(), output);
  }

  // repeated uint32 HidArr = 3;
  for (int i = 0; i < this->hidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->hidarr(i), output);
  }

  // repeated uint32 Squad = 4;
  for (int i = 0; i < this->squad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->squad(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionDoBattleReq)
}

::google::protobuf::uint8* TExpeditionDoBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionDoBattleReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battlecheckparam(), target);
  }

  // repeated uint32 HidArr = 3;
  for (int i = 0; i < this->hidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->hidarr(i), target);
  }

  // repeated uint32 Squad = 4;
  for (int i = 0; i < this->squad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->squad(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionDoBattleReq)
  return target;
}

int TExpeditionDoBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 2;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  // repeated uint32 HidArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hidarr(i));
    }
    total_size += 1 * this->hidarr_size() + data_size;
  }

  // repeated uint32 Squad = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->squad_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->squad(i));
    }
    total_size += 1 * this->squad_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionDoBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionDoBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionDoBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionDoBattleReq::MergeFrom(const TExpeditionDoBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  hidarr_.MergeFrom(from.hidarr_);
  squad_.MergeFrom(from.squad_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionDoBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionDoBattleReq::CopyFrom(const TExpeditionDoBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionDoBattleReq::IsInitialized() const {

  return true;
}

void TExpeditionDoBattleReq::Swap(TExpeditionDoBattleReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    hidarr_.Swap(&other->hidarr_);
    squad_.Swap(&other->squad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionDoBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionDoBattleReq_descriptor_;
  metadata.reflection = TExpeditionDoBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionDoBattleRsp::kBattleArgsFieldNumber;
#endif  // !_MSC_VER

TExpeditionDoBattleRsp::TExpeditionDoBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionDoBattleRsp)
}

void TExpeditionDoBattleRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TExpeditionDoBattleRsp::TExpeditionDoBattleRsp(const TExpeditionDoBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionDoBattleRsp)
}

void TExpeditionDoBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionDoBattleRsp::~TExpeditionDoBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionDoBattleRsp)
  SharedDtor();
}

void TExpeditionDoBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TExpeditionDoBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionDoBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionDoBattleRsp_descriptor_;
}

const TExpeditionDoBattleRsp& TExpeditionDoBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionDoBattleRsp* TExpeditionDoBattleRsp::default_instance_ = NULL;

TExpeditionDoBattleRsp* TExpeditionDoBattleRsp::New() const {
  return new TExpeditionDoBattleRsp;
}

void TExpeditionDoBattleRsp::Clear() {
  if (has_battleargs()) {
    if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionDoBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionDoBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleArgs BattleArgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionDoBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionDoBattleRsp)
  return false;
#undef DO_
}

void TExpeditionDoBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionDoBattleRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionDoBattleRsp)
}

::google::protobuf::uint8* TExpeditionDoBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionDoBattleRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionDoBattleRsp)
  return target;
}

int TExpeditionDoBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleArgs BattleArgs = 1;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionDoBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionDoBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionDoBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionDoBattleRsp::MergeFrom(const TExpeditionDoBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionDoBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionDoBattleRsp::CopyFrom(const TExpeditionDoBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionDoBattleRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TExpeditionDoBattleRsp::Swap(TExpeditionDoBattleRsp* other) {
  if (other != this) {
    std::swap(battleargs_, other->battleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionDoBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionDoBattleRsp_descriptor_;
  metadata.reflection = TExpeditionDoBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionDoBattleReportReq::kIDFieldNumber;
const int TExpeditionDoBattleReportReq::kBattleResultFieldNumber;
const int TExpeditionDoBattleReportReq::kIsWinDirectFieldNumber;
#endif  // !_MSC_VER

TExpeditionDoBattleReportReq::TExpeditionDoBattleReportReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionDoBattleReportReq)
}

void TExpeditionDoBattleReportReq::InitAsDefaultInstance() {
  battleresult_ = const_cast< ::pb::TBattleResult*>(&::pb::TBattleResult::default_instance());
}

TExpeditionDoBattleReportReq::TExpeditionDoBattleReportReq(const TExpeditionDoBattleReportReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionDoBattleReportReq)
}

void TExpeditionDoBattleReportReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  battleresult_ = NULL;
  iswindirect_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionDoBattleReportReq::~TExpeditionDoBattleReportReq() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionDoBattleReportReq)
  SharedDtor();
}

void TExpeditionDoBattleReportReq::SharedDtor() {
  if (this != default_instance_) {
    delete battleresult_;
  }
}

void TExpeditionDoBattleReportReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionDoBattleReportReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionDoBattleReportReq_descriptor_;
}

const TExpeditionDoBattleReportReq& TExpeditionDoBattleReportReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionDoBattleReportReq* TExpeditionDoBattleReportReq::default_instance_ = NULL;

TExpeditionDoBattleReportReq* TExpeditionDoBattleReportReq::New() const {
  return new TExpeditionDoBattleReportReq;
}

void TExpeditionDoBattleReportReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TExpeditionDoBattleReportReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, iswindirect_);
    if (has_battleresult()) {
      if (battleresult_ != NULL) battleresult_->::pb::TBattleResult::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionDoBattleReportReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionDoBattleReportReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleResult;
        break;
      }

      // optional .pb.TBattleResult BattleResult = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsWinDirect;
        break;
      }

      // optional uint32 IsWinDirect = 3;
      case 3: {
        if (tag == 24) {
         parse_IsWinDirect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iswindirect_)));
          set_has_iswindirect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionDoBattleReportReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionDoBattleReportReq)
  return false;
#undef DO_
}

void TExpeditionDoBattleReportReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionDoBattleReportReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .pb.TBattleResult BattleResult = 2;
  if (has_battleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battleresult(), output);
  }

  // optional uint32 IsWinDirect = 3;
  if (has_iswindirect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->iswindirect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionDoBattleReportReq)
}

::google::protobuf::uint8* TExpeditionDoBattleReportReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionDoBattleReportReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .pb.TBattleResult BattleResult = 2;
  if (has_battleresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battleresult(), target);
  }

  // optional uint32 IsWinDirect = 3;
  if (has_iswindirect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->iswindirect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionDoBattleReportReq)
  return target;
}

int TExpeditionDoBattleReportReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .pb.TBattleResult BattleResult = 2;
    if (has_battleresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleresult());
    }

    // optional uint32 IsWinDirect = 3;
    if (has_iswindirect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iswindirect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionDoBattleReportReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionDoBattleReportReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionDoBattleReportReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionDoBattleReportReq::MergeFrom(const TExpeditionDoBattleReportReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_battleresult()) {
      mutable_battleresult()->::pb::TBattleResult::MergeFrom(from.battleresult());
    }
    if (from.has_iswindirect()) {
      set_iswindirect(from.iswindirect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionDoBattleReportReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionDoBattleReportReq::CopyFrom(const TExpeditionDoBattleReportReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionDoBattleReportReq::IsInitialized() const {

  if (has_battleresult()) {
    if (!this->battleresult().IsInitialized()) return false;
  }
  return true;
}

void TExpeditionDoBattleReportReq::Swap(TExpeditionDoBattleReportReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(battleresult_, other->battleresult_);
    std::swap(iswindirect_, other->iswindirect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionDoBattleReportReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionDoBattleReportReq_descriptor_;
  metadata.reflection = TExpeditionDoBattleReportReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionGetRewardReq::kIDFieldNumber;
#endif  // !_MSC_VER

TExpeditionGetRewardReq::TExpeditionGetRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionGetRewardReq)
}

void TExpeditionGetRewardReq::InitAsDefaultInstance() {
}

TExpeditionGetRewardReq::TExpeditionGetRewardReq(const TExpeditionGetRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionGetRewardReq)
}

void TExpeditionGetRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionGetRewardReq::~TExpeditionGetRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionGetRewardReq)
  SharedDtor();
}

void TExpeditionGetRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionGetRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionGetRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionGetRewardReq_descriptor_;
}

const TExpeditionGetRewardReq& TExpeditionGetRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionGetRewardReq* TExpeditionGetRewardReq::default_instance_ = NULL;

TExpeditionGetRewardReq* TExpeditionGetRewardReq::New() const {
  return new TExpeditionGetRewardReq;
}

void TExpeditionGetRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionGetRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionGetRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionGetRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionGetRewardReq)
  return false;
#undef DO_
}

void TExpeditionGetRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionGetRewardReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionGetRewardReq)
}

::google::protobuf::uint8* TExpeditionGetRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionGetRewardReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionGetRewardReq)
  return target;
}

int TExpeditionGetRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionGetRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionGetRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionGetRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionGetRewardReq::MergeFrom(const TExpeditionGetRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionGetRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionGetRewardReq::CopyFrom(const TExpeditionGetRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionGetRewardReq::IsInitialized() const {

  return true;
}

void TExpeditionGetRewardReq::Swap(TExpeditionGetRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionGetRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionGetRewardReq_descriptor_;
  metadata.reflection = TExpeditionGetRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionGetRewardRsp::kRewardFieldNumber;
#endif  // !_MSC_VER

TExpeditionGetRewardRsp::TExpeditionGetRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionGetRewardRsp)
}

void TExpeditionGetRewardRsp::InitAsDefaultInstance() {
  reward_ = const_cast< ::pb::TExpeditionRewardInfo*>(&::pb::TExpeditionRewardInfo::default_instance());
}

TExpeditionGetRewardRsp::TExpeditionGetRewardRsp(const TExpeditionGetRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionGetRewardRsp)
}

void TExpeditionGetRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionGetRewardRsp::~TExpeditionGetRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionGetRewardRsp)
  SharedDtor();
}

void TExpeditionGetRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void TExpeditionGetRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionGetRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionGetRewardRsp_descriptor_;
}

const TExpeditionGetRewardRsp& TExpeditionGetRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionGetRewardRsp* TExpeditionGetRewardRsp::default_instance_ = NULL;

TExpeditionGetRewardRsp* TExpeditionGetRewardRsp::New() const {
  return new TExpeditionGetRewardRsp;
}

void TExpeditionGetRewardRsp::Clear() {
  if (has_reward()) {
    if (reward_ != NULL) reward_->::pb::TExpeditionRewardInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionGetRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionGetRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TExpeditionRewardInfo Reward = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionGetRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionGetRewardRsp)
  return false;
#undef DO_
}

void TExpeditionGetRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionGetRewardRsp)
  // optional .pb.TExpeditionRewardInfo Reward = 1;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionGetRewardRsp)
}

::google::protobuf::uint8* TExpeditionGetRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionGetRewardRsp)
  // optional .pb.TExpeditionRewardInfo Reward = 1;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionGetRewardRsp)
  return target;
}

int TExpeditionGetRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TExpeditionRewardInfo Reward = 1;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionGetRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionGetRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionGetRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionGetRewardRsp::MergeFrom(const TExpeditionGetRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward()) {
      mutable_reward()->::pb::TExpeditionRewardInfo::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionGetRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionGetRewardRsp::CopyFrom(const TExpeditionGetRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionGetRewardRsp::IsInitialized() const {

  return true;
}

void TExpeditionGetRewardRsp::Swap(TExpeditionGetRewardRsp* other) {
  if (other != this) {
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionGetRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionGetRewardRsp_descriptor_;
  metadata.reflection = TExpeditionGetRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionGetBuffReq::kIDFieldNumber;
#endif  // !_MSC_VER

TExpeditionGetBuffReq::TExpeditionGetBuffReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionGetBuffReq)
}

void TExpeditionGetBuffReq::InitAsDefaultInstance() {
}

TExpeditionGetBuffReq::TExpeditionGetBuffReq(const TExpeditionGetBuffReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionGetBuffReq)
}

void TExpeditionGetBuffReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionGetBuffReq::~TExpeditionGetBuffReq() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionGetBuffReq)
  SharedDtor();
}

void TExpeditionGetBuffReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionGetBuffReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionGetBuffReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionGetBuffReq_descriptor_;
}

const TExpeditionGetBuffReq& TExpeditionGetBuffReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionGetBuffReq* TExpeditionGetBuffReq::default_instance_ = NULL;

TExpeditionGetBuffReq* TExpeditionGetBuffReq::New() const {
  return new TExpeditionGetBuffReq;
}

void TExpeditionGetBuffReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionGetBuffReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionGetBuffReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionGetBuffReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionGetBuffReq)
  return false;
#undef DO_
}

void TExpeditionGetBuffReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionGetBuffReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionGetBuffReq)
}

::google::protobuf::uint8* TExpeditionGetBuffReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionGetBuffReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionGetBuffReq)
  return target;
}

int TExpeditionGetBuffReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionGetBuffReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionGetBuffReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionGetBuffReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionGetBuffReq::MergeFrom(const TExpeditionGetBuffReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionGetBuffReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionGetBuffReq::CopyFrom(const TExpeditionGetBuffReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionGetBuffReq::IsInitialized() const {

  return true;
}

void TExpeditionGetBuffReq::Swap(TExpeditionGetBuffReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionGetBuffReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionGetBuffReq_descriptor_;
  metadata.reflection = TExpeditionGetBuffReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionGetBuffRsp::kIDFieldNumber;
const int TExpeditionGetBuffRsp::kBuffArrFieldNumber;
#endif  // !_MSC_VER

TExpeditionGetBuffRsp::TExpeditionGetBuffRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionGetBuffRsp)
}

void TExpeditionGetBuffRsp::InitAsDefaultInstance() {
}

TExpeditionGetBuffRsp::TExpeditionGetBuffRsp(const TExpeditionGetBuffRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionGetBuffRsp)
}

void TExpeditionGetBuffRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionGetBuffRsp::~TExpeditionGetBuffRsp() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionGetBuffRsp)
  SharedDtor();
}

void TExpeditionGetBuffRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionGetBuffRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionGetBuffRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionGetBuffRsp_descriptor_;
}

const TExpeditionGetBuffRsp& TExpeditionGetBuffRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionGetBuffRsp* TExpeditionGetBuffRsp::default_instance_ = NULL;

TExpeditionGetBuffRsp* TExpeditionGetBuffRsp::New() const {
  return new TExpeditionGetBuffRsp;
}

void TExpeditionGetBuffRsp::Clear() {
  id_ = 0u;
  buffarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionGetBuffRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionGetBuffRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuffArr;
        break;
      }

      // repeated uint32 BuffArr = 2;
      case 2: {
        if (tag == 16) {
         parse_BuffArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_buffarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buffarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuffArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionGetBuffRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionGetBuffRsp)
  return false;
#undef DO_
}

void TExpeditionGetBuffRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionGetBuffRsp)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated uint32 BuffArr = 2;
  for (int i = 0; i < this->buffarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->buffarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionGetBuffRsp)
}

::google::protobuf::uint8* TExpeditionGetBuffRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionGetBuffRsp)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated uint32 BuffArr = 2;
  for (int i = 0; i < this->buffarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->buffarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionGetBuffRsp)
  return target;
}

int TExpeditionGetBuffRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated uint32 BuffArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buffarr(i));
    }
    total_size += 1 * this->buffarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionGetBuffRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionGetBuffRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionGetBuffRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionGetBuffRsp::MergeFrom(const TExpeditionGetBuffRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffarr_.MergeFrom(from.buffarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionGetBuffRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionGetBuffRsp::CopyFrom(const TExpeditionGetBuffRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionGetBuffRsp::IsInitialized() const {

  return true;
}

void TExpeditionGetBuffRsp::Swap(TExpeditionGetBuffRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    buffarr_.Swap(&other->buffarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionGetBuffRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionGetBuffRsp_descriptor_;
  metadata.reflection = TExpeditionGetBuffRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionSelectBuffReq::kIDFieldNumber;
const int TExpeditionSelectBuffReq::kBuffIndexFieldNumber;
const int TExpeditionSelectBuffReq::kHerosFieldNumber;
#endif  // !_MSC_VER

TExpeditionSelectBuffReq::TExpeditionSelectBuffReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionSelectBuffReq)
}

void TExpeditionSelectBuffReq::InitAsDefaultInstance() {
}

TExpeditionSelectBuffReq::TExpeditionSelectBuffReq(const TExpeditionSelectBuffReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionSelectBuffReq)
}

void TExpeditionSelectBuffReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  buffindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionSelectBuffReq::~TExpeditionSelectBuffReq() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionSelectBuffReq)
  SharedDtor();
}

void TExpeditionSelectBuffReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionSelectBuffReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionSelectBuffReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionSelectBuffReq_descriptor_;
}

const TExpeditionSelectBuffReq& TExpeditionSelectBuffReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionSelectBuffReq* TExpeditionSelectBuffReq::default_instance_ = NULL;

TExpeditionSelectBuffReq* TExpeditionSelectBuffReq::New() const {
  return new TExpeditionSelectBuffReq;
}

void TExpeditionSelectBuffReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TExpeditionSelectBuffReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buffindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionSelectBuffReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionSelectBuffReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuffIndex;
        break;
      }

      // optional uint32 BuffIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_BuffIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffindex_)));
          set_has_buffindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Heros;
        break;
      }

      // repeated uint32 Heros = 3;
      case 3: {
        if (tag == 24) {
         parse_Heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_heros())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heros())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Heros;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionSelectBuffReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionSelectBuffReq)
  return false;
#undef DO_
}

void TExpeditionSelectBuffReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionSelectBuffReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 BuffIndex = 2;
  if (has_buffindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buffindex(), output);
  }

  // repeated uint32 Heros = 3;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionSelectBuffReq)
}

::google::protobuf::uint8* TExpeditionSelectBuffReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionSelectBuffReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 BuffIndex = 2;
  if (has_buffindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buffindex(), target);
  }

  // repeated uint32 Heros = 3;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionSelectBuffReq)
  return target;
}

int TExpeditionSelectBuffReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 BuffIndex = 2;
    if (has_buffindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffindex());
    }

  }
  // repeated uint32 Heros = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionSelectBuffReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionSelectBuffReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionSelectBuffReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionSelectBuffReq::MergeFrom(const TExpeditionSelectBuffReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buffindex()) {
      set_buffindex(from.buffindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionSelectBuffReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionSelectBuffReq::CopyFrom(const TExpeditionSelectBuffReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionSelectBuffReq::IsInitialized() const {

  return true;
}

void TExpeditionSelectBuffReq::Swap(TExpeditionSelectBuffReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buffindex_, other->buffindex_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionSelectBuffReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionSelectBuffReq_descriptor_;
  metadata.reflection = TExpeditionSelectBuffReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionSelectTreasureBuffReq::kIDFieldNumber;
const int TExpeditionSelectTreasureBuffReq::kBuffIndexFieldNumber;
const int TExpeditionSelectTreasureBuffReq::kHerosFieldNumber;
#endif  // !_MSC_VER

TExpeditionSelectTreasureBuffReq::TExpeditionSelectTreasureBuffReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionSelectTreasureBuffReq)
}

void TExpeditionSelectTreasureBuffReq::InitAsDefaultInstance() {
}

TExpeditionSelectTreasureBuffReq::TExpeditionSelectTreasureBuffReq(const TExpeditionSelectTreasureBuffReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionSelectTreasureBuffReq)
}

void TExpeditionSelectTreasureBuffReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  buffindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionSelectTreasureBuffReq::~TExpeditionSelectTreasureBuffReq() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionSelectTreasureBuffReq)
  SharedDtor();
}

void TExpeditionSelectTreasureBuffReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionSelectTreasureBuffReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionSelectTreasureBuffReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionSelectTreasureBuffReq_descriptor_;
}

const TExpeditionSelectTreasureBuffReq& TExpeditionSelectTreasureBuffReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionSelectTreasureBuffReq* TExpeditionSelectTreasureBuffReq::default_instance_ = NULL;

TExpeditionSelectTreasureBuffReq* TExpeditionSelectTreasureBuffReq::New() const {
  return new TExpeditionSelectTreasureBuffReq;
}

void TExpeditionSelectTreasureBuffReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TExpeditionSelectTreasureBuffReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buffindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionSelectTreasureBuffReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionSelectTreasureBuffReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuffIndex;
        break;
      }

      // optional uint32 BuffIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_BuffIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffindex_)));
          set_has_buffindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Heros;
        break;
      }

      // repeated uint32 Heros = 3;
      case 3: {
        if (tag == 24) {
         parse_Heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_heros())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heros())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Heros;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionSelectTreasureBuffReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionSelectTreasureBuffReq)
  return false;
#undef DO_
}

void TExpeditionSelectTreasureBuffReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionSelectTreasureBuffReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 BuffIndex = 2;
  if (has_buffindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buffindex(), output);
  }

  // repeated uint32 Heros = 3;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionSelectTreasureBuffReq)
}

::google::protobuf::uint8* TExpeditionSelectTreasureBuffReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionSelectTreasureBuffReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 BuffIndex = 2;
  if (has_buffindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buffindex(), target);
  }

  // repeated uint32 Heros = 3;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionSelectTreasureBuffReq)
  return target;
}

int TExpeditionSelectTreasureBuffReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 BuffIndex = 2;
    if (has_buffindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffindex());
    }

  }
  // repeated uint32 Heros = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionSelectTreasureBuffReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionSelectTreasureBuffReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionSelectTreasureBuffReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionSelectTreasureBuffReq::MergeFrom(const TExpeditionSelectTreasureBuffReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buffindex()) {
      set_buffindex(from.buffindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionSelectTreasureBuffReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionSelectTreasureBuffReq::CopyFrom(const TExpeditionSelectTreasureBuffReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionSelectTreasureBuffReq::IsInitialized() const {

  return true;
}

void TExpeditionSelectTreasureBuffReq::Swap(TExpeditionSelectTreasureBuffReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buffindex_, other->buffindex_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionSelectTreasureBuffReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionSelectTreasureBuffReq_descriptor_;
  metadata.reflection = TExpeditionSelectTreasureBuffReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionShoppingReq::kIDFieldNumber;
const int TExpeditionShoppingReq::kNumFieldNumber;
#endif  // !_MSC_VER

TExpeditionShoppingReq::TExpeditionShoppingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionShoppingReq)
}

void TExpeditionShoppingReq::InitAsDefaultInstance() {
}

TExpeditionShoppingReq::TExpeditionShoppingReq(const TExpeditionShoppingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionShoppingReq)
}

void TExpeditionShoppingReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionShoppingReq::~TExpeditionShoppingReq() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionShoppingReq)
  SharedDtor();
}

void TExpeditionShoppingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionShoppingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionShoppingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionShoppingReq_descriptor_;
}

const TExpeditionShoppingReq& TExpeditionShoppingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionShoppingReq* TExpeditionShoppingReq::default_instance_ = NULL;

TExpeditionShoppingReq* TExpeditionShoppingReq::New() const {
  return new TExpeditionShoppingReq;
}

void TExpeditionShoppingReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TExpeditionShoppingReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionShoppingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionShoppingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionShoppingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionShoppingReq)
  return false;
#undef DO_
}

void TExpeditionShoppingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionShoppingReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionShoppingReq)
}

::google::protobuf::uint8* TExpeditionShoppingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionShoppingReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionShoppingReq)
  return target;
}

int TExpeditionShoppingReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionShoppingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionShoppingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionShoppingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionShoppingReq::MergeFrom(const TExpeditionShoppingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionShoppingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionShoppingReq::CopyFrom(const TExpeditionShoppingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionShoppingReq::IsInitialized() const {

  return true;
}

void TExpeditionShoppingReq::Swap(TExpeditionShoppingReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionShoppingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionShoppingReq_descriptor_;
  metadata.reflection = TExpeditionShoppingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionShoppingRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TExpeditionShoppingRsp::TExpeditionShoppingRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionShoppingRsp)
}

void TExpeditionShoppingRsp::InitAsDefaultInstance() {
}

TExpeditionShoppingRsp::TExpeditionShoppingRsp(const TExpeditionShoppingRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionShoppingRsp)
}

void TExpeditionShoppingRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionShoppingRsp::~TExpeditionShoppingRsp() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionShoppingRsp)
  SharedDtor();
}

void TExpeditionShoppingRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionShoppingRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionShoppingRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionShoppingRsp_descriptor_;
}

const TExpeditionShoppingRsp& TExpeditionShoppingRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionShoppingRsp* TExpeditionShoppingRsp::default_instance_ = NULL;

TExpeditionShoppingRsp* TExpeditionShoppingRsp::New() const {
  return new TExpeditionShoppingRsp;
}

void TExpeditionShoppingRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionShoppingRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionShoppingRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionShoppingRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionShoppingRsp)
  return false;
#undef DO_
}

void TExpeditionShoppingRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionShoppingRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionShoppingRsp)
}

::google::protobuf::uint8* TExpeditionShoppingRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionShoppingRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionShoppingRsp)
  return target;
}

int TExpeditionShoppingRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionShoppingRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionShoppingRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionShoppingRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionShoppingRsp::MergeFrom(const TExpeditionShoppingRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionShoppingRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionShoppingRsp::CopyFrom(const TExpeditionShoppingRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionShoppingRsp::IsInitialized() const {

  return true;
}

void TExpeditionShoppingRsp::Swap(TExpeditionShoppingRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionShoppingRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionShoppingRsp_descriptor_;
  metadata.reflection = TExpeditionShoppingRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionResetRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

TExpeditionResetRsp::TExpeditionResetRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionResetRsp)
}

void TExpeditionResetRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::TExpeditionInfo*>(&::pb::TExpeditionInfo::default_instance());
}

TExpeditionResetRsp::TExpeditionResetRsp(const TExpeditionResetRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionResetRsp)
}

void TExpeditionResetRsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionResetRsp::~TExpeditionResetRsp() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionResetRsp)
  SharedDtor();
}

void TExpeditionResetRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void TExpeditionResetRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionResetRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionResetRsp_descriptor_;
}

const TExpeditionResetRsp& TExpeditionResetRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionResetRsp* TExpeditionResetRsp::default_instance_ = NULL;

TExpeditionResetRsp* TExpeditionResetRsp::New() const {
  return new TExpeditionResetRsp;
}

void TExpeditionResetRsp::Clear() {
  if (has_info()) {
    if (info_ != NULL) info_->::pb::TExpeditionInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionResetRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionResetRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TExpeditionInfo Info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionResetRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionResetRsp)
  return false;
#undef DO_
}

void TExpeditionResetRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionResetRsp)
  // optional .pb.TExpeditionInfo Info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionResetRsp)
}

::google::protobuf::uint8* TExpeditionResetRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionResetRsp)
  // optional .pb.TExpeditionInfo Info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionResetRsp)
  return target;
}

int TExpeditionResetRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TExpeditionInfo Info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionResetRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionResetRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionResetRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionResetRsp::MergeFrom(const TExpeditionResetRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::pb::TExpeditionInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionResetRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionResetRsp::CopyFrom(const TExpeditionResetRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionResetRsp::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void TExpeditionResetRsp::Swap(TExpeditionResetRsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionResetRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionResetRsp_descriptor_;
  metadata.reflection = TExpeditionResetRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionBuyResetNumReq::kNumFieldNumber;
#endif  // !_MSC_VER

TExpeditionBuyResetNumReq::TExpeditionBuyResetNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionBuyResetNumReq)
}

void TExpeditionBuyResetNumReq::InitAsDefaultInstance() {
}

TExpeditionBuyResetNumReq::TExpeditionBuyResetNumReq(const TExpeditionBuyResetNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionBuyResetNumReq)
}

void TExpeditionBuyResetNumReq::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionBuyResetNumReq::~TExpeditionBuyResetNumReq() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionBuyResetNumReq)
  SharedDtor();
}

void TExpeditionBuyResetNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionBuyResetNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionBuyResetNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionBuyResetNumReq_descriptor_;
}

const TExpeditionBuyResetNumReq& TExpeditionBuyResetNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionBuyResetNumReq* TExpeditionBuyResetNumReq::default_instance_ = NULL;

TExpeditionBuyResetNumReq* TExpeditionBuyResetNumReq::New() const {
  return new TExpeditionBuyResetNumReq;
}

void TExpeditionBuyResetNumReq::Clear() {
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionBuyResetNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionBuyResetNumReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionBuyResetNumReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionBuyResetNumReq)
  return false;
#undef DO_
}

void TExpeditionBuyResetNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionBuyResetNumReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionBuyResetNumReq)
}

::google::protobuf::uint8* TExpeditionBuyResetNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionBuyResetNumReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionBuyResetNumReq)
  return target;
}

int TExpeditionBuyResetNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionBuyResetNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionBuyResetNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionBuyResetNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionBuyResetNumReq::MergeFrom(const TExpeditionBuyResetNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionBuyResetNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionBuyResetNumReq::CopyFrom(const TExpeditionBuyResetNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionBuyResetNumReq::IsInitialized() const {

  return true;
}

void TExpeditionBuyResetNumReq::Swap(TExpeditionBuyResetNumReq* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionBuyResetNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionBuyResetNumReq_descriptor_;
  metadata.reflection = TExpeditionBuyResetNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TExpeditionRebornReq::TExpeditionRebornReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionRebornReq)
}

void TExpeditionRebornReq::InitAsDefaultInstance() {
}

TExpeditionRebornReq::TExpeditionRebornReq(const TExpeditionRebornReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionRebornReq)
}

void TExpeditionRebornReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionRebornReq::~TExpeditionRebornReq() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionRebornReq)
  SharedDtor();
}

void TExpeditionRebornReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionRebornReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionRebornReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionRebornReq_descriptor_;
}

const TExpeditionRebornReq& TExpeditionRebornReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionRebornReq* TExpeditionRebornReq::default_instance_ = NULL;

TExpeditionRebornReq* TExpeditionRebornReq::New() const {
  return new TExpeditionRebornReq;
}

void TExpeditionRebornReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionRebornReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionRebornReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionRebornReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionRebornReq)
  return false;
#undef DO_
}

void TExpeditionRebornReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionRebornReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionRebornReq)
}

::google::protobuf::uint8* TExpeditionRebornReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionRebornReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionRebornReq)
  return target;
}

int TExpeditionRebornReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionRebornReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionRebornReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionRebornReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionRebornReq::MergeFrom(const TExpeditionRebornReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionRebornReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionRebornReq::CopyFrom(const TExpeditionRebornReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionRebornReq::IsInitialized() const {

  return true;
}

void TExpeditionRebornReq::Swap(TExpeditionRebornReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionRebornReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionRebornReq_descriptor_;
  metadata.reflection = TExpeditionRebornReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionSetSquadReq::kSquadFieldNumber;
#endif  // !_MSC_VER

TExpeditionSetSquadReq::TExpeditionSetSquadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionSetSquadReq)
}

void TExpeditionSetSquadReq::InitAsDefaultInstance() {
}

TExpeditionSetSquadReq::TExpeditionSetSquadReq(const TExpeditionSetSquadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionSetSquadReq)
}

void TExpeditionSetSquadReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionSetSquadReq::~TExpeditionSetSquadReq() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionSetSquadReq)
  SharedDtor();
}

void TExpeditionSetSquadReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionSetSquadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionSetSquadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionSetSquadReq_descriptor_;
}

const TExpeditionSetSquadReq& TExpeditionSetSquadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionSetSquadReq* TExpeditionSetSquadReq::default_instance_ = NULL;

TExpeditionSetSquadReq* TExpeditionSetSquadReq::New() const {
  return new TExpeditionSetSquadReq;
}

void TExpeditionSetSquadReq::Clear() {
  squad_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionSetSquadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionSetSquadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 Squad = 1;
      case 1: {
        if (tag == 8) {
         parse_Squad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_squad())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_squad())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_Squad;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionSetSquadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionSetSquadReq)
  return false;
#undef DO_
}

void TExpeditionSetSquadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionSetSquadReq)
  // repeated uint32 Squad = 1;
  for (int i = 0; i < this->squad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->squad(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionSetSquadReq)
}

::google::protobuf::uint8* TExpeditionSetSquadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionSetSquadReq)
  // repeated uint32 Squad = 1;
  for (int i = 0; i < this->squad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->squad(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionSetSquadReq)
  return target;
}

int TExpeditionSetSquadReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 Squad = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->squad_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->squad(i));
    }
    total_size += 1 * this->squad_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionSetSquadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionSetSquadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionSetSquadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionSetSquadReq::MergeFrom(const TExpeditionSetSquadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  squad_.MergeFrom(from.squad_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionSetSquadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionSetSquadReq::CopyFrom(const TExpeditionSetSquadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionSetSquadReq::IsInitialized() const {

  return true;
}

void TExpeditionSetSquadReq::Swap(TExpeditionSetSquadReq* other) {
  if (other != this) {
    squad_.Swap(&other->squad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionSetSquadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionSetSquadReq_descriptor_;
  metadata.reflection = TExpeditionSetSquadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionUseRebornBuildReq::kIDFieldNumber;
const int TExpeditionUseRebornBuildReq::kHidFieldNumber;
#endif  // !_MSC_VER

TExpeditionUseRebornBuildReq::TExpeditionUseRebornBuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionUseRebornBuildReq)
}

void TExpeditionUseRebornBuildReq::InitAsDefaultInstance() {
}

TExpeditionUseRebornBuildReq::TExpeditionUseRebornBuildReq(const TExpeditionUseRebornBuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionUseRebornBuildReq)
}

void TExpeditionUseRebornBuildReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  hid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionUseRebornBuildReq::~TExpeditionUseRebornBuildReq() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionUseRebornBuildReq)
  SharedDtor();
}

void TExpeditionUseRebornBuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionUseRebornBuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionUseRebornBuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionUseRebornBuildReq_descriptor_;
}

const TExpeditionUseRebornBuildReq& TExpeditionUseRebornBuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionUseRebornBuildReq* TExpeditionUseRebornBuildReq::default_instance_ = NULL;

TExpeditionUseRebornBuildReq* TExpeditionUseRebornBuildReq::New() const {
  return new TExpeditionUseRebornBuildReq;
}

void TExpeditionUseRebornBuildReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TExpeditionUseRebornBuildReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, hid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionUseRebornBuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionUseRebornBuildReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Hid;
        break;
      }

      // optional uint32 Hid = 2;
      case 2: {
        if (tag == 16) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionUseRebornBuildReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionUseRebornBuildReq)
  return false;
#undef DO_
}

void TExpeditionUseRebornBuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionUseRebornBuildReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionUseRebornBuildReq)
}

::google::protobuf::uint8* TExpeditionUseRebornBuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionUseRebornBuildReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionUseRebornBuildReq)
  return target;
}

int TExpeditionUseRebornBuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Hid = 2;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionUseRebornBuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionUseRebornBuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionUseRebornBuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionUseRebornBuildReq::MergeFrom(const TExpeditionUseRebornBuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionUseRebornBuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionUseRebornBuildReq::CopyFrom(const TExpeditionUseRebornBuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionUseRebornBuildReq::IsInitialized() const {

  return true;
}

void TExpeditionUseRebornBuildReq::Swap(TExpeditionUseRebornBuildReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hid_, other->hid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionUseRebornBuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionUseRebornBuildReq_descriptor_;
  metadata.reflection = TExpeditionUseRebornBuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionUseRebornBuildRsp::kHeroInfoFieldNumber;
#endif  // !_MSC_VER

TExpeditionUseRebornBuildRsp::TExpeditionUseRebornBuildRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionUseRebornBuildRsp)
}

void TExpeditionUseRebornBuildRsp::InitAsDefaultInstance() {
  heroinfo_ = const_cast< ::pb::TExpeditionHeroStatus*>(&::pb::TExpeditionHeroStatus::default_instance());
}

TExpeditionUseRebornBuildRsp::TExpeditionUseRebornBuildRsp(const TExpeditionUseRebornBuildRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionUseRebornBuildRsp)
}

void TExpeditionUseRebornBuildRsp::SharedCtor() {
  _cached_size_ = 0;
  heroinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionUseRebornBuildRsp::~TExpeditionUseRebornBuildRsp() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionUseRebornBuildRsp)
  SharedDtor();
}

void TExpeditionUseRebornBuildRsp::SharedDtor() {
  if (this != default_instance_) {
    delete heroinfo_;
  }
}

void TExpeditionUseRebornBuildRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionUseRebornBuildRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionUseRebornBuildRsp_descriptor_;
}

const TExpeditionUseRebornBuildRsp& TExpeditionUseRebornBuildRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionUseRebornBuildRsp* TExpeditionUseRebornBuildRsp::default_instance_ = NULL;

TExpeditionUseRebornBuildRsp* TExpeditionUseRebornBuildRsp::New() const {
  return new TExpeditionUseRebornBuildRsp;
}

void TExpeditionUseRebornBuildRsp::Clear() {
  if (has_heroinfo()) {
    if (heroinfo_ != NULL) heroinfo_->::pb::TExpeditionHeroStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionUseRebornBuildRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionUseRebornBuildRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TExpeditionHeroStatus HeroInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heroinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionUseRebornBuildRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionUseRebornBuildRsp)
  return false;
#undef DO_
}

void TExpeditionUseRebornBuildRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionUseRebornBuildRsp)
  // optional .pb.TExpeditionHeroStatus HeroInfo = 1;
  if (has_heroinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heroinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionUseRebornBuildRsp)
}

::google::protobuf::uint8* TExpeditionUseRebornBuildRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionUseRebornBuildRsp)
  // optional .pb.TExpeditionHeroStatus HeroInfo = 1;
  if (has_heroinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heroinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionUseRebornBuildRsp)
  return target;
}

int TExpeditionUseRebornBuildRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TExpeditionHeroStatus HeroInfo = 1;
    if (has_heroinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heroinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionUseRebornBuildRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionUseRebornBuildRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionUseRebornBuildRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionUseRebornBuildRsp::MergeFrom(const TExpeditionUseRebornBuildRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroinfo()) {
      mutable_heroinfo()->::pb::TExpeditionHeroStatus::MergeFrom(from.heroinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionUseRebornBuildRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionUseRebornBuildRsp::CopyFrom(const TExpeditionUseRebornBuildRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionUseRebornBuildRsp::IsInitialized() const {

  if (has_heroinfo()) {
    if (!this->heroinfo().IsInitialized()) return false;
  }
  return true;
}

void TExpeditionUseRebornBuildRsp::Swap(TExpeditionUseRebornBuildRsp* other) {
  if (other != this) {
    std::swap(heroinfo_, other->heroinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionUseRebornBuildRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionUseRebornBuildRsp_descriptor_;
  metadata.reflection = TExpeditionUseRebornBuildRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionQuickPassReq::kIsChoosePassFieldNumber;
#endif  // !_MSC_VER

TExpeditionQuickPassReq::TExpeditionQuickPassReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionQuickPassReq)
}

void TExpeditionQuickPassReq::InitAsDefaultInstance() {
}

TExpeditionQuickPassReq::TExpeditionQuickPassReq(const TExpeditionQuickPassReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionQuickPassReq)
}

void TExpeditionQuickPassReq::SharedCtor() {
  _cached_size_ = 0;
  ischoosepass_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionQuickPassReq::~TExpeditionQuickPassReq() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionQuickPassReq)
  SharedDtor();
}

void TExpeditionQuickPassReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExpeditionQuickPassReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionQuickPassReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionQuickPassReq_descriptor_;
}

const TExpeditionQuickPassReq& TExpeditionQuickPassReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionQuickPassReq* TExpeditionQuickPassReq::default_instance_ = NULL;

TExpeditionQuickPassReq* TExpeditionQuickPassReq::New() const {
  return new TExpeditionQuickPassReq;
}

void TExpeditionQuickPassReq::Clear() {
  ischoosepass_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionQuickPassReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionQuickPassReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsChoosePass = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischoosepass_)));
          set_has_ischoosepass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionQuickPassReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionQuickPassReq)
  return false;
#undef DO_
}

void TExpeditionQuickPassReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionQuickPassReq)
  // optional bool IsChoosePass = 1;
  if (has_ischoosepass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ischoosepass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionQuickPassReq)
}

::google::protobuf::uint8* TExpeditionQuickPassReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionQuickPassReq)
  // optional bool IsChoosePass = 1;
  if (has_ischoosepass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ischoosepass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionQuickPassReq)
  return target;
}

int TExpeditionQuickPassReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsChoosePass = 1;
    if (has_ischoosepass()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionQuickPassReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionQuickPassReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionQuickPassReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionQuickPassReq::MergeFrom(const TExpeditionQuickPassReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ischoosepass()) {
      set_ischoosepass(from.ischoosepass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionQuickPassReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionQuickPassReq::CopyFrom(const TExpeditionQuickPassReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionQuickPassReq::IsInitialized() const {

  return true;
}

void TExpeditionQuickPassReq::Swap(TExpeditionQuickPassReq* other) {
  if (other != this) {
    std::swap(ischoosepass_, other->ischoosepass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionQuickPassReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionQuickPassReq_descriptor_;
  metadata.reflection = TExpeditionQuickPassReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExpeditionQuickPassRsp::kInfoFieldNumber;
const int TExpeditionQuickPassRsp::kShopRewardArrFieldNumber;
#endif  // !_MSC_VER

TExpeditionQuickPassRsp::TExpeditionQuickPassRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExpeditionQuickPassRsp)
}

void TExpeditionQuickPassRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::TExpeditionInfo*>(&::pb::TExpeditionInfo::default_instance());
}

TExpeditionQuickPassRsp::TExpeditionQuickPassRsp(const TExpeditionQuickPassRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExpeditionQuickPassRsp)
}

void TExpeditionQuickPassRsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExpeditionQuickPassRsp::~TExpeditionQuickPassRsp() {
  // @@protoc_insertion_point(destructor:pb.TExpeditionQuickPassRsp)
  SharedDtor();
}

void TExpeditionQuickPassRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void TExpeditionQuickPassRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExpeditionQuickPassRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExpeditionQuickPassRsp_descriptor_;
}

const TExpeditionQuickPassRsp& TExpeditionQuickPassRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fExpedition_2eproto();
  return *default_instance_;
}

TExpeditionQuickPassRsp* TExpeditionQuickPassRsp::default_instance_ = NULL;

TExpeditionQuickPassRsp* TExpeditionQuickPassRsp::New() const {
  return new TExpeditionQuickPassRsp;
}

void TExpeditionQuickPassRsp::Clear() {
  if (has_info()) {
    if (info_ != NULL) info_->::pb::TExpeditionInfo::Clear();
  }
  shoprewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExpeditionQuickPassRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExpeditionQuickPassRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TExpeditionInfo Info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ShopRewardArr;
        break;
      }

      // repeated .pb.TCommonReward ShopRewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_ShopRewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shoprewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ShopRewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExpeditionQuickPassRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExpeditionQuickPassRsp)
  return false;
#undef DO_
}

void TExpeditionQuickPassRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExpeditionQuickPassRsp)
  // optional .pb.TExpeditionInfo Info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // repeated .pb.TCommonReward ShopRewardArr = 2;
  for (int i = 0; i < this->shoprewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shoprewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExpeditionQuickPassRsp)
}

::google::protobuf::uint8* TExpeditionQuickPassRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExpeditionQuickPassRsp)
  // optional .pb.TExpeditionInfo Info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // repeated .pb.TCommonReward ShopRewardArr = 2;
  for (int i = 0; i < this->shoprewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shoprewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExpeditionQuickPassRsp)
  return target;
}

int TExpeditionQuickPassRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TExpeditionInfo Info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated .pb.TCommonReward ShopRewardArr = 2;
  total_size += 1 * this->shoprewardarr_size();
  for (int i = 0; i < this->shoprewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shoprewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExpeditionQuickPassRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExpeditionQuickPassRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExpeditionQuickPassRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExpeditionQuickPassRsp::MergeFrom(const TExpeditionQuickPassRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  shoprewardarr_.MergeFrom(from.shoprewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::pb::TExpeditionInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExpeditionQuickPassRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExpeditionQuickPassRsp::CopyFrom(const TExpeditionQuickPassRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExpeditionQuickPassRsp::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void TExpeditionQuickPassRsp::Swap(TExpeditionQuickPassRsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    shoprewardarr_.Swap(&other->shoprewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExpeditionQuickPassRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExpeditionQuickPassRsp_descriptor_;
  metadata.reflection = TExpeditionQuickPassRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
