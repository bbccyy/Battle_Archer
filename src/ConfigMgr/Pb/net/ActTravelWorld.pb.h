// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActTravelWorld.proto

#ifndef PROTOBUF_net_2fActTravelWorld_2eproto__INCLUDED
#define PROTOBUF_net_2fActTravelWorld_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActTravelWorld_2eproto();
void protobuf_AssignDesc_net_2fActTravelWorld_2eproto();
void protobuf_ShutdownFile_net_2fActTravelWorld_2eproto();

class TActTravelWorldTaskInfo;
class TActTravelWorldGetInfoRsp;
class TActTravelWorldSignInRsp;
class TActTravelWorldReceiveScoresRewardReq;
class TActTravelWorldReceiveScoresRewardRsp;
class TActTravelWorldReceiveDailyTaskRewardReq;
class TActTravelWorldReceiveDailyTaskRewardRsp;
class TActTravelWorldReceiveAchiTaskRewardReq;
class TActTravelWorldReceiveAchiTaskRewardRsp;
class TActTravelWorldNotify;

enum EActTravelWorldTaskType {
  ArenaChallengeNum = 1,
  LevyAttackUserWinNum = 2,
  LevyGetCoinNum = 3,
  InstanceChallengeWinNum = 4,
  ArenaAdvancedChallengeNum = 5,
  BeastInstanceWinNum = 6,
  GuildDonateNum = 7,
  ExpeditionWinNum = 8,
  WorldBossChallengeNum = 9,
  AdventureWinNum = 10,
  AdventureRebelArmyWinNum = 11
};
bool EActTravelWorldTaskType_IsValid(int value);
const EActTravelWorldTaskType EActTravelWorldTaskType_MIN = ArenaChallengeNum;
const EActTravelWorldTaskType EActTravelWorldTaskType_MAX = AdventureRebelArmyWinNum;
const int EActTravelWorldTaskType_ARRAYSIZE = EActTravelWorldTaskType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EActTravelWorldTaskType_descriptor();
inline const ::std::string& EActTravelWorldTaskType_Name(EActTravelWorldTaskType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EActTravelWorldTaskType_descriptor(), value);
}
inline bool EActTravelWorldTaskType_Parse(
    const ::std::string& name, EActTravelWorldTaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EActTravelWorldTaskType>(
    EActTravelWorldTaskType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TActTravelWorldTaskInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActTravelWorld.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActTravelWorldTaskInfo : public ::google::protobuf::Message {
 public:
  TActTravelWorldTaskInfo();
  virtual ~TActTravelWorldTaskInfo();

  TActTravelWorldTaskInfo(const TActTravelWorldTaskInfo& from);

  inline TActTravelWorldTaskInfo& operator=(const TActTravelWorldTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActTravelWorldTaskInfo& default_instance();

  void Swap(TActTravelWorldTaskInfo* other);

  // implements Message ----------------------------------------------

  TActTravelWorldTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActTravelWorldTaskInfo& from);
  void MergeFrom(const TActTravelWorldTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EActTravelWorldTaskType TaskType = 1;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldTaskInfo</name>
  	<Function>
  		<name>tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EActTravelWorldTaskType tasktype() const;
  inline void set_tasktype(::pb::EActTravelWorldTaskType value);

  // optional uint64 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldTaskInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 num() const;
  inline void set_num(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActTravelWorldTaskInfo)
 private:
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 num_;
  int tasktype_;
  friend void  protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_AssignDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_ShutdownFile_net_2fActTravelWorld_2eproto();

  void InitAsDefaultInstance();
  static TActTravelWorldTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActTravelWorldGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActTravelWorld.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActTravelWorldGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActTravelWorldGetInfoRsp();
  virtual ~TActTravelWorldGetInfoRsp();

  TActTravelWorldGetInfoRsp(const TActTravelWorldGetInfoRsp& from);

  inline TActTravelWorldGetInfoRsp& operator=(const TActTravelWorldGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActTravelWorldGetInfoRsp& default_instance();

  void Swap(TActTravelWorldGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActTravelWorldGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActTravelWorldGetInfoRsp& from);
  void MergeFrom(const TActTravelWorldGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SignDays = 1;
  inline bool has_signdays() const;
  inline void clear_signdays();
  static const int kSignDaysFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldGetInfoRsp</name>
  	<Function>
  		<name>signdays</name>
  		<replaceName>SignDays</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signdays</name>
  		<replaceName>SignDays</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signdays</name>
  		<replaceName>SignDays</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 signdays() const;
  inline void set_signdays(::google::protobuf::uint32 value);

  // repeated uint32 ScoresRewardedIds = 2;
  inline int scoresrewardedids_size() const;
  inline void clear_scoresrewardedids();
  static const int kScoresRewardedIdsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldGetInfoRsp</name>
  	<Function>
  		<name>scoresrewardedids</name>
  		<replaceName>ScoresRewardedIds</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_scoresrewardedids</name>
  		<replaceName>ScoresRewardedIds</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_scoresrewardedids</name>
  		<replaceName>ScoresRewardedIds</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scoresrewardedids</name>
  		<replaceName>ScoresRewardedIds</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>scoresrewardedids_size</name>
  		<replaceName>ScoresRewardedIds</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scoresrewardedids(int index) const;
  inline void set_scoresrewardedids(int index, ::google::protobuf::uint32 value);
  inline void add_scoresrewardedids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      scoresrewardedids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_scoresrewardedids();

  // repeated .pb.TActTravelWorldTaskInfo DailyTaskArr = 3;
  inline int dailytaskarr_size() const;
  inline void clear_dailytaskarr();
  static const int kDailyTaskArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldGetInfoRsp</name>
  	<Function>
  		<name>dailytaskarr</name>
  		<replaceName>DailyTaskArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_dailytaskarr</name>
  		<replaceName>DailyTaskArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_dailytaskarr</name>
  		<replaceName>DailyTaskArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dailytaskarr</name>
  		<replaceName>DailyTaskArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>dailytaskarr_size</name>
  		<replaceName>DailyTaskArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActTravelWorldTaskInfo& dailytaskarr(int index) const;
  inline ::pb::TActTravelWorldTaskInfo* mutable_dailytaskarr(int index);
  inline ::pb::TActTravelWorldTaskInfo* add_dailytaskarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo >&
      dailytaskarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo >*
      mutable_dailytaskarr();

  // repeated uint32 DailyTaskRewardedIds = 4;
  inline int dailytaskrewardedids_size() const;
  inline void clear_dailytaskrewardedids();
  static const int kDailyTaskRewardedIdsFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldGetInfoRsp</name>
  	<Function>
  		<name>dailytaskrewardedids</name>
  		<replaceName>DailyTaskRewardedIds</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_dailytaskrewardedids</name>
  		<replaceName>DailyTaskRewardedIds</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_dailytaskrewardedids</name>
  		<replaceName>DailyTaskRewardedIds</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dailytaskrewardedids</name>
  		<replaceName>DailyTaskRewardedIds</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>dailytaskrewardedids_size</name>
  		<replaceName>DailyTaskRewardedIds</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 dailytaskrewardedids(int index) const;
  inline void set_dailytaskrewardedids(int index, ::google::protobuf::uint32 value);
  inline void add_dailytaskrewardedids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dailytaskrewardedids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dailytaskrewardedids();

  // repeated .pb.TActTravelWorldTaskInfo AchiTaskArr = 5;
  inline int achitaskarr_size() const;
  inline void clear_achitaskarr();
  static const int kAchiTaskArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldGetInfoRsp</name>
  	<Function>
  		<name>achitaskarr</name>
  		<replaceName>AchiTaskArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_achitaskarr</name>
  		<replaceName>AchiTaskArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_achitaskarr</name>
  		<replaceName>AchiTaskArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achitaskarr</name>
  		<replaceName>AchiTaskArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>achitaskarr_size</name>
  		<replaceName>AchiTaskArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActTravelWorldTaskInfo& achitaskarr(int index) const;
  inline ::pb::TActTravelWorldTaskInfo* mutable_achitaskarr(int index);
  inline ::pb::TActTravelWorldTaskInfo* add_achitaskarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo >&
      achitaskarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo >*
      mutable_achitaskarr();

  // repeated uint32 AchiTaskRewardedIds = 6;
  inline int achitaskrewardedids_size() const;
  inline void clear_achitaskrewardedids();
  static const int kAchiTaskRewardedIdsFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldGetInfoRsp</name>
  	<Function>
  		<name>achitaskrewardedids</name>
  		<replaceName>AchiTaskRewardedIds</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_achitaskrewardedids</name>
  		<replaceName>AchiTaskRewardedIds</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_achitaskrewardedids</name>
  		<replaceName>AchiTaskRewardedIds</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achitaskrewardedids</name>
  		<replaceName>AchiTaskRewardedIds</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>achitaskrewardedids_size</name>
  		<replaceName>AchiTaskRewardedIds</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 achitaskrewardedids(int index) const;
  inline void set_achitaskrewardedids(int index, ::google::protobuf::uint32 value);
  inline void add_achitaskrewardedids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      achitaskrewardedids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_achitaskrewardedids();

  // optional uint64 SignTime = 7;
  inline bool has_signtime() const;
  inline void clear_signtime();
  static const int kSignTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldGetInfoRsp</name>
  	<Function>
  		<name>signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 signtime() const;
  inline void set_signtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActTravelWorldGetInfoRsp)
 private:
  inline void set_has_signdays();
  inline void clear_has_signdays();
  inline void set_has_signtime();
  inline void clear_has_signtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > scoresrewardedids_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo > dailytaskarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dailytaskrewardedids_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo > achitaskarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > achitaskrewardedids_;
  ::google::protobuf::uint64 signtime_;
  ::google::protobuf::uint32 signdays_;
  friend void  protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_AssignDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_ShutdownFile_net_2fActTravelWorld_2eproto();

  void InitAsDefaultInstance();
  static TActTravelWorldGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActTravelWorldSignInRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActTravelWorld.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActTravelWorldSignInRsp : public ::google::protobuf::Message {
 public:
  TActTravelWorldSignInRsp();
  virtual ~TActTravelWorldSignInRsp();

  TActTravelWorldSignInRsp(const TActTravelWorldSignInRsp& from);

  inline TActTravelWorldSignInRsp& operator=(const TActTravelWorldSignInRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActTravelWorldSignInRsp& default_instance();

  void Swap(TActTravelWorldSignInRsp* other);

  // implements Message ----------------------------------------------

  TActTravelWorldSignInRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActTravelWorldSignInRsp& from);
  void MergeFrom(const TActTravelWorldSignInRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 SignTime = 1;
  inline bool has_signtime() const;
  inline void clear_signtime();
  static const int kSignTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldSignInRsp</name>
  	<Function>
  		<name>signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 signtime() const;
  inline void set_signtime(::google::protobuf::uint64 value);

  // optional uint32 SignDays = 2;
  inline bool has_signdays() const;
  inline void clear_signdays();
  static const int kSignDaysFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldSignInRsp</name>
  	<Function>
  		<name>signdays</name>
  		<replaceName>SignDays</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signdays</name>
  		<replaceName>SignDays</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signdays</name>
  		<replaceName>SignDays</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 signdays() const;
  inline void set_signdays(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward RewardArr = 3;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldSignInRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TActTravelWorldSignInRsp)
 private:
  inline void set_has_signtime();
  inline void clear_has_signtime();
  inline void set_has_signdays();
  inline void clear_has_signdays();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 signtime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 signdays_;
  friend void  protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_AssignDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_ShutdownFile_net_2fActTravelWorld_2eproto();

  void InitAsDefaultInstance();
  static TActTravelWorldSignInRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActTravelWorldReceiveScoresRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActTravelWorld.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActTravelWorldReceiveScoresRewardReq : public ::google::protobuf::Message {
 public:
  TActTravelWorldReceiveScoresRewardReq();
  virtual ~TActTravelWorldReceiveScoresRewardReq();

  TActTravelWorldReceiveScoresRewardReq(const TActTravelWorldReceiveScoresRewardReq& from);

  inline TActTravelWorldReceiveScoresRewardReq& operator=(const TActTravelWorldReceiveScoresRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActTravelWorldReceiveScoresRewardReq& default_instance();

  void Swap(TActTravelWorldReceiveScoresRewardReq* other);

  // implements Message ----------------------------------------------

  TActTravelWorldReceiveScoresRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActTravelWorldReceiveScoresRewardReq& from);
  void MergeFrom(const TActTravelWorldReceiveScoresRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RewardTid = 1;
  inline bool has_rewardtid() const;
  inline void clear_rewardtid();
  static const int kRewardTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldReceiveScoresRewardReq</name>
  	<Function>
  		<name>rewardtid</name>
  		<replaceName>RewardTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtid</name>
  		<replaceName>RewardTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtid</name>
  		<replaceName>RewardTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardtid() const;
  inline void set_rewardtid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActTravelWorldReceiveScoresRewardReq)
 private:
  inline void set_has_rewardtid();
  inline void clear_has_rewardtid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rewardtid_;
  friend void  protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_AssignDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_ShutdownFile_net_2fActTravelWorld_2eproto();

  void InitAsDefaultInstance();
  static TActTravelWorldReceiveScoresRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActTravelWorldReceiveScoresRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActTravelWorld.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActTravelWorldReceiveScoresRewardRsp : public ::google::protobuf::Message {
 public:
  TActTravelWorldReceiveScoresRewardRsp();
  virtual ~TActTravelWorldReceiveScoresRewardRsp();

  TActTravelWorldReceiveScoresRewardRsp(const TActTravelWorldReceiveScoresRewardRsp& from);

  inline TActTravelWorldReceiveScoresRewardRsp& operator=(const TActTravelWorldReceiveScoresRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActTravelWorldReceiveScoresRewardRsp& default_instance();

  void Swap(TActTravelWorldReceiveScoresRewardRsp* other);

  // implements Message ----------------------------------------------

  TActTravelWorldReceiveScoresRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActTravelWorldReceiveScoresRewardRsp& from);
  void MergeFrom(const TActTravelWorldReceiveScoresRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldReceiveScoresRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TActTravelWorldReceiveScoresRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_AssignDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_ShutdownFile_net_2fActTravelWorld_2eproto();

  void InitAsDefaultInstance();
  static TActTravelWorldReceiveScoresRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActTravelWorldReceiveDailyTaskRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActTravelWorld.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActTravelWorldReceiveDailyTaskRewardReq : public ::google::protobuf::Message {
 public:
  TActTravelWorldReceiveDailyTaskRewardReq();
  virtual ~TActTravelWorldReceiveDailyTaskRewardReq();

  TActTravelWorldReceiveDailyTaskRewardReq(const TActTravelWorldReceiveDailyTaskRewardReq& from);

  inline TActTravelWorldReceiveDailyTaskRewardReq& operator=(const TActTravelWorldReceiveDailyTaskRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActTravelWorldReceiveDailyTaskRewardReq& default_instance();

  void Swap(TActTravelWorldReceiveDailyTaskRewardReq* other);

  // implements Message ----------------------------------------------

  TActTravelWorldReceiveDailyTaskRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActTravelWorldReceiveDailyTaskRewardReq& from);
  void MergeFrom(const TActTravelWorldReceiveDailyTaskRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RewardTid = 1;
  inline bool has_rewardtid() const;
  inline void clear_rewardtid();
  static const int kRewardTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldReceiveDailyTaskRewardReq</name>
  	<Function>
  		<name>rewardtid</name>
  		<replaceName>RewardTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtid</name>
  		<replaceName>RewardTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtid</name>
  		<replaceName>RewardTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardtid() const;
  inline void set_rewardtid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActTravelWorldReceiveDailyTaskRewardReq)
 private:
  inline void set_has_rewardtid();
  inline void clear_has_rewardtid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rewardtid_;
  friend void  protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_AssignDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_ShutdownFile_net_2fActTravelWorld_2eproto();

  void InitAsDefaultInstance();
  static TActTravelWorldReceiveDailyTaskRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActTravelWorldReceiveDailyTaskRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActTravelWorld.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActTravelWorldReceiveDailyTaskRewardRsp : public ::google::protobuf::Message {
 public:
  TActTravelWorldReceiveDailyTaskRewardRsp();
  virtual ~TActTravelWorldReceiveDailyTaskRewardRsp();

  TActTravelWorldReceiveDailyTaskRewardRsp(const TActTravelWorldReceiveDailyTaskRewardRsp& from);

  inline TActTravelWorldReceiveDailyTaskRewardRsp& operator=(const TActTravelWorldReceiveDailyTaskRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActTravelWorldReceiveDailyTaskRewardRsp& default_instance();

  void Swap(TActTravelWorldReceiveDailyTaskRewardRsp* other);

  // implements Message ----------------------------------------------

  TActTravelWorldReceiveDailyTaskRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActTravelWorldReceiveDailyTaskRewardRsp& from);
  void MergeFrom(const TActTravelWorldReceiveDailyTaskRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldReceiveDailyTaskRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TActTravelWorldReceiveDailyTaskRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_AssignDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_ShutdownFile_net_2fActTravelWorld_2eproto();

  void InitAsDefaultInstance();
  static TActTravelWorldReceiveDailyTaskRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActTravelWorldReceiveAchiTaskRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActTravelWorld.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActTravelWorldReceiveAchiTaskRewardReq : public ::google::protobuf::Message {
 public:
  TActTravelWorldReceiveAchiTaskRewardReq();
  virtual ~TActTravelWorldReceiveAchiTaskRewardReq();

  TActTravelWorldReceiveAchiTaskRewardReq(const TActTravelWorldReceiveAchiTaskRewardReq& from);

  inline TActTravelWorldReceiveAchiTaskRewardReq& operator=(const TActTravelWorldReceiveAchiTaskRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActTravelWorldReceiveAchiTaskRewardReq& default_instance();

  void Swap(TActTravelWorldReceiveAchiTaskRewardReq* other);

  // implements Message ----------------------------------------------

  TActTravelWorldReceiveAchiTaskRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActTravelWorldReceiveAchiTaskRewardReq& from);
  void MergeFrom(const TActTravelWorldReceiveAchiTaskRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RewardTid = 1;
  inline bool has_rewardtid() const;
  inline void clear_rewardtid();
  static const int kRewardTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldReceiveAchiTaskRewardReq</name>
  	<Function>
  		<name>rewardtid</name>
  		<replaceName>RewardTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtid</name>
  		<replaceName>RewardTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtid</name>
  		<replaceName>RewardTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardtid() const;
  inline void set_rewardtid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActTravelWorldReceiveAchiTaskRewardReq)
 private:
  inline void set_has_rewardtid();
  inline void clear_has_rewardtid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rewardtid_;
  friend void  protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_AssignDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_ShutdownFile_net_2fActTravelWorld_2eproto();

  void InitAsDefaultInstance();
  static TActTravelWorldReceiveAchiTaskRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActTravelWorldReceiveAchiTaskRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActTravelWorld.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActTravelWorldReceiveAchiTaskRewardRsp : public ::google::protobuf::Message {
 public:
  TActTravelWorldReceiveAchiTaskRewardRsp();
  virtual ~TActTravelWorldReceiveAchiTaskRewardRsp();

  TActTravelWorldReceiveAchiTaskRewardRsp(const TActTravelWorldReceiveAchiTaskRewardRsp& from);

  inline TActTravelWorldReceiveAchiTaskRewardRsp& operator=(const TActTravelWorldReceiveAchiTaskRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActTravelWorldReceiveAchiTaskRewardRsp& default_instance();

  void Swap(TActTravelWorldReceiveAchiTaskRewardRsp* other);

  // implements Message ----------------------------------------------

  TActTravelWorldReceiveAchiTaskRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActTravelWorldReceiveAchiTaskRewardRsp& from);
  void MergeFrom(const TActTravelWorldReceiveAchiTaskRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldReceiveAchiTaskRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TActTravelWorldReceiveAchiTaskRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_AssignDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_ShutdownFile_net_2fActTravelWorld_2eproto();

  void InitAsDefaultInstance();
  static TActTravelWorldReceiveAchiTaskRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActTravelWorldNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActTravelWorld.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActTravelWorldNotify : public ::google::protobuf::Message {
 public:
  TActTravelWorldNotify();
  virtual ~TActTravelWorldNotify();

  TActTravelWorldNotify(const TActTravelWorldNotify& from);

  inline TActTravelWorldNotify& operator=(const TActTravelWorldNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActTravelWorldNotify& default_instance();

  void Swap(TActTravelWorldNotify* other);

  // implements Message ----------------------------------------------

  TActTravelWorldNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActTravelWorldNotify& from);
  void MergeFrom(const TActTravelWorldNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActTravelWorldTaskInfo DailyTaskArr = 1;
  inline int dailytaskarr_size() const;
  inline void clear_dailytaskarr();
  static const int kDailyTaskArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldNotify</name>
  	<Function>
  		<name>dailytaskarr</name>
  		<replaceName>DailyTaskArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_dailytaskarr</name>
  		<replaceName>DailyTaskArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_dailytaskarr</name>
  		<replaceName>DailyTaskArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dailytaskarr</name>
  		<replaceName>DailyTaskArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>dailytaskarr_size</name>
  		<replaceName>DailyTaskArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActTravelWorldTaskInfo& dailytaskarr(int index) const;
  inline ::pb::TActTravelWorldTaskInfo* mutable_dailytaskarr(int index);
  inline ::pb::TActTravelWorldTaskInfo* add_dailytaskarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo >&
      dailytaskarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo >*
      mutable_dailytaskarr();

  // repeated .pb.TActTravelWorldTaskInfo AchiTaskArr = 2;
  inline int achitaskarr_size() const;
  inline void clear_achitaskarr();
  static const int kAchiTaskArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActTravelWorldNotify</name>
  	<Function>
  		<name>achitaskarr</name>
  		<replaceName>AchiTaskArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_achitaskarr</name>
  		<replaceName>AchiTaskArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_achitaskarr</name>
  		<replaceName>AchiTaskArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achitaskarr</name>
  		<replaceName>AchiTaskArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>achitaskarr_size</name>
  		<replaceName>AchiTaskArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActTravelWorldTaskInfo& achitaskarr(int index) const;
  inline ::pb::TActTravelWorldTaskInfo* mutable_achitaskarr(int index);
  inline ::pb::TActTravelWorldTaskInfo* add_achitaskarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo >&
      achitaskarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo >*
      mutable_achitaskarr();

  // @@protoc_insertion_point(class_scope:pb.TActTravelWorldNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo > dailytaskarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo > achitaskarr_;
  friend void  protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_AssignDesc_net_2fActTravelWorld_2eproto();
  friend void protobuf_ShutdownFile_net_2fActTravelWorld_2eproto();

  void InitAsDefaultInstance();
  static TActTravelWorldNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActTravelWorldTaskInfo

// optional .pb.EActTravelWorldTaskType TaskType = 1;
inline bool TActTravelWorldTaskInfo::has_tasktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActTravelWorldTaskInfo::set_has_tasktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActTravelWorldTaskInfo::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActTravelWorldTaskInfo::clear_tasktype() {
  tasktype_ = 1;
  clear_has_tasktype();
}
inline ::pb::EActTravelWorldTaskType TActTravelWorldTaskInfo::tasktype() const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldTaskInfo.TaskType)
  return static_cast< ::pb::EActTravelWorldTaskType >(tasktype_);
}
inline void TActTravelWorldTaskInfo::set_tasktype(::pb::EActTravelWorldTaskType value) {
  assert(::pb::EActTravelWorldTaskType_IsValid(value));
  set_has_tasktype();
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:pb.TActTravelWorldTaskInfo.TaskType)
}

// optional uint64 Num = 2;
inline bool TActTravelWorldTaskInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActTravelWorldTaskInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActTravelWorldTaskInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActTravelWorldTaskInfo::clear_num() {
  num_ = GOOGLE_ULONGLONG(0);
  clear_has_num();
}
inline ::google::protobuf::uint64 TActTravelWorldTaskInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldTaskInfo.Num)
  return num_;
}
inline void TActTravelWorldTaskInfo::set_num(::google::protobuf::uint64 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActTravelWorldTaskInfo.Num)
}

// -------------------------------------------------------------------

// TActTravelWorldGetInfoRsp

// optional uint32 SignDays = 1;
inline bool TActTravelWorldGetInfoRsp::has_signdays() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActTravelWorldGetInfoRsp::set_has_signdays() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActTravelWorldGetInfoRsp::clear_has_signdays() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActTravelWorldGetInfoRsp::clear_signdays() {
  signdays_ = 0u;
  clear_has_signdays();
}
inline ::google::protobuf::uint32 TActTravelWorldGetInfoRsp::signdays() const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldGetInfoRsp.SignDays)
  return signdays_;
}
inline void TActTravelWorldGetInfoRsp::set_signdays(::google::protobuf::uint32 value) {
  set_has_signdays();
  signdays_ = value;
  // @@protoc_insertion_point(field_set:pb.TActTravelWorldGetInfoRsp.SignDays)
}

// repeated uint32 ScoresRewardedIds = 2;
inline int TActTravelWorldGetInfoRsp::scoresrewardedids_size() const {
  return scoresrewardedids_.size();
}
inline void TActTravelWorldGetInfoRsp::clear_scoresrewardedids() {
  scoresrewardedids_.Clear();
}
inline ::google::protobuf::uint32 TActTravelWorldGetInfoRsp::scoresrewardedids(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldGetInfoRsp.ScoresRewardedIds)
  return scoresrewardedids_.Get(index);
}
inline void TActTravelWorldGetInfoRsp::set_scoresrewardedids(int index, ::google::protobuf::uint32 value) {
  scoresrewardedids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActTravelWorldGetInfoRsp.ScoresRewardedIds)
}
inline void TActTravelWorldGetInfoRsp::add_scoresrewardedids(::google::protobuf::uint32 value) {
  scoresrewardedids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActTravelWorldGetInfoRsp.ScoresRewardedIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActTravelWorldGetInfoRsp::scoresrewardedids() const {
  // @@protoc_insertion_point(field_list:pb.TActTravelWorldGetInfoRsp.ScoresRewardedIds)
  return scoresrewardedids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActTravelWorldGetInfoRsp::mutable_scoresrewardedids() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActTravelWorldGetInfoRsp.ScoresRewardedIds)
  return &scoresrewardedids_;
}

// repeated .pb.TActTravelWorldTaskInfo DailyTaskArr = 3;
inline int TActTravelWorldGetInfoRsp::dailytaskarr_size() const {
  return dailytaskarr_.size();
}
inline void TActTravelWorldGetInfoRsp::clear_dailytaskarr() {
  dailytaskarr_.Clear();
}
inline const ::pb::TActTravelWorldTaskInfo& TActTravelWorldGetInfoRsp::dailytaskarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldGetInfoRsp.DailyTaskArr)
  return dailytaskarr_.Get(index);
}
inline ::pb::TActTravelWorldTaskInfo* TActTravelWorldGetInfoRsp::mutable_dailytaskarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActTravelWorldGetInfoRsp.DailyTaskArr)
  return dailytaskarr_.Mutable(index);
}
inline ::pb::TActTravelWorldTaskInfo* TActTravelWorldGetInfoRsp::add_dailytaskarr() {
  // @@protoc_insertion_point(field_add:pb.TActTravelWorldGetInfoRsp.DailyTaskArr)
  return dailytaskarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo >&
TActTravelWorldGetInfoRsp::dailytaskarr() const {
  // @@protoc_insertion_point(field_list:pb.TActTravelWorldGetInfoRsp.DailyTaskArr)
  return dailytaskarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo >*
TActTravelWorldGetInfoRsp::mutable_dailytaskarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActTravelWorldGetInfoRsp.DailyTaskArr)
  return &dailytaskarr_;
}

// repeated uint32 DailyTaskRewardedIds = 4;
inline int TActTravelWorldGetInfoRsp::dailytaskrewardedids_size() const {
  return dailytaskrewardedids_.size();
}
inline void TActTravelWorldGetInfoRsp::clear_dailytaskrewardedids() {
  dailytaskrewardedids_.Clear();
}
inline ::google::protobuf::uint32 TActTravelWorldGetInfoRsp::dailytaskrewardedids(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldGetInfoRsp.DailyTaskRewardedIds)
  return dailytaskrewardedids_.Get(index);
}
inline void TActTravelWorldGetInfoRsp::set_dailytaskrewardedids(int index, ::google::protobuf::uint32 value) {
  dailytaskrewardedids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActTravelWorldGetInfoRsp.DailyTaskRewardedIds)
}
inline void TActTravelWorldGetInfoRsp::add_dailytaskrewardedids(::google::protobuf::uint32 value) {
  dailytaskrewardedids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActTravelWorldGetInfoRsp.DailyTaskRewardedIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActTravelWorldGetInfoRsp::dailytaskrewardedids() const {
  // @@protoc_insertion_point(field_list:pb.TActTravelWorldGetInfoRsp.DailyTaskRewardedIds)
  return dailytaskrewardedids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActTravelWorldGetInfoRsp::mutable_dailytaskrewardedids() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActTravelWorldGetInfoRsp.DailyTaskRewardedIds)
  return &dailytaskrewardedids_;
}

// repeated .pb.TActTravelWorldTaskInfo AchiTaskArr = 5;
inline int TActTravelWorldGetInfoRsp::achitaskarr_size() const {
  return achitaskarr_.size();
}
inline void TActTravelWorldGetInfoRsp::clear_achitaskarr() {
  achitaskarr_.Clear();
}
inline const ::pb::TActTravelWorldTaskInfo& TActTravelWorldGetInfoRsp::achitaskarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldGetInfoRsp.AchiTaskArr)
  return achitaskarr_.Get(index);
}
inline ::pb::TActTravelWorldTaskInfo* TActTravelWorldGetInfoRsp::mutable_achitaskarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActTravelWorldGetInfoRsp.AchiTaskArr)
  return achitaskarr_.Mutable(index);
}
inline ::pb::TActTravelWorldTaskInfo* TActTravelWorldGetInfoRsp::add_achitaskarr() {
  // @@protoc_insertion_point(field_add:pb.TActTravelWorldGetInfoRsp.AchiTaskArr)
  return achitaskarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo >&
TActTravelWorldGetInfoRsp::achitaskarr() const {
  // @@protoc_insertion_point(field_list:pb.TActTravelWorldGetInfoRsp.AchiTaskArr)
  return achitaskarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo >*
TActTravelWorldGetInfoRsp::mutable_achitaskarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActTravelWorldGetInfoRsp.AchiTaskArr)
  return &achitaskarr_;
}

// repeated uint32 AchiTaskRewardedIds = 6;
inline int TActTravelWorldGetInfoRsp::achitaskrewardedids_size() const {
  return achitaskrewardedids_.size();
}
inline void TActTravelWorldGetInfoRsp::clear_achitaskrewardedids() {
  achitaskrewardedids_.Clear();
}
inline ::google::protobuf::uint32 TActTravelWorldGetInfoRsp::achitaskrewardedids(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldGetInfoRsp.AchiTaskRewardedIds)
  return achitaskrewardedids_.Get(index);
}
inline void TActTravelWorldGetInfoRsp::set_achitaskrewardedids(int index, ::google::protobuf::uint32 value) {
  achitaskrewardedids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActTravelWorldGetInfoRsp.AchiTaskRewardedIds)
}
inline void TActTravelWorldGetInfoRsp::add_achitaskrewardedids(::google::protobuf::uint32 value) {
  achitaskrewardedids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActTravelWorldGetInfoRsp.AchiTaskRewardedIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActTravelWorldGetInfoRsp::achitaskrewardedids() const {
  // @@protoc_insertion_point(field_list:pb.TActTravelWorldGetInfoRsp.AchiTaskRewardedIds)
  return achitaskrewardedids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActTravelWorldGetInfoRsp::mutable_achitaskrewardedids() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActTravelWorldGetInfoRsp.AchiTaskRewardedIds)
  return &achitaskrewardedids_;
}

// optional uint64 SignTime = 7;
inline bool TActTravelWorldGetInfoRsp::has_signtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TActTravelWorldGetInfoRsp::set_has_signtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TActTravelWorldGetInfoRsp::clear_has_signtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TActTravelWorldGetInfoRsp::clear_signtime() {
  signtime_ = GOOGLE_ULONGLONG(0);
  clear_has_signtime();
}
inline ::google::protobuf::uint64 TActTravelWorldGetInfoRsp::signtime() const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldGetInfoRsp.SignTime)
  return signtime_;
}
inline void TActTravelWorldGetInfoRsp::set_signtime(::google::protobuf::uint64 value) {
  set_has_signtime();
  signtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActTravelWorldGetInfoRsp.SignTime)
}

// -------------------------------------------------------------------

// TActTravelWorldSignInRsp

// optional uint64 SignTime = 1;
inline bool TActTravelWorldSignInRsp::has_signtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActTravelWorldSignInRsp::set_has_signtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActTravelWorldSignInRsp::clear_has_signtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActTravelWorldSignInRsp::clear_signtime() {
  signtime_ = GOOGLE_ULONGLONG(0);
  clear_has_signtime();
}
inline ::google::protobuf::uint64 TActTravelWorldSignInRsp::signtime() const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldSignInRsp.SignTime)
  return signtime_;
}
inline void TActTravelWorldSignInRsp::set_signtime(::google::protobuf::uint64 value) {
  set_has_signtime();
  signtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActTravelWorldSignInRsp.SignTime)
}

// optional uint32 SignDays = 2;
inline bool TActTravelWorldSignInRsp::has_signdays() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActTravelWorldSignInRsp::set_has_signdays() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActTravelWorldSignInRsp::clear_has_signdays() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActTravelWorldSignInRsp::clear_signdays() {
  signdays_ = 0u;
  clear_has_signdays();
}
inline ::google::protobuf::uint32 TActTravelWorldSignInRsp::signdays() const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldSignInRsp.SignDays)
  return signdays_;
}
inline void TActTravelWorldSignInRsp::set_signdays(::google::protobuf::uint32 value) {
  set_has_signdays();
  signdays_ = value;
  // @@protoc_insertion_point(field_set:pb.TActTravelWorldSignInRsp.SignDays)
}

// repeated .pb.TCommonReward RewardArr = 3;
inline int TActTravelWorldSignInRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TActTravelWorldSignInRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TActTravelWorldSignInRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldSignInRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TActTravelWorldSignInRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActTravelWorldSignInRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TActTravelWorldSignInRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TActTravelWorldSignInRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActTravelWorldSignInRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TActTravelWorldSignInRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActTravelWorldSignInRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActTravelWorldSignInRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TActTravelWorldReceiveScoresRewardReq

// optional uint32 RewardTid = 1;
inline bool TActTravelWorldReceiveScoresRewardReq::has_rewardtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActTravelWorldReceiveScoresRewardReq::set_has_rewardtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActTravelWorldReceiveScoresRewardReq::clear_has_rewardtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActTravelWorldReceiveScoresRewardReq::clear_rewardtid() {
  rewardtid_ = 0u;
  clear_has_rewardtid();
}
inline ::google::protobuf::uint32 TActTravelWorldReceiveScoresRewardReq::rewardtid() const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldReceiveScoresRewardReq.RewardTid)
  return rewardtid_;
}
inline void TActTravelWorldReceiveScoresRewardReq::set_rewardtid(::google::protobuf::uint32 value) {
  set_has_rewardtid();
  rewardtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActTravelWorldReceiveScoresRewardReq.RewardTid)
}

// -------------------------------------------------------------------

// TActTravelWorldReceiveScoresRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TActTravelWorldReceiveScoresRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TActTravelWorldReceiveScoresRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TActTravelWorldReceiveScoresRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldReceiveScoresRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TActTravelWorldReceiveScoresRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActTravelWorldReceiveScoresRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TActTravelWorldReceiveScoresRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TActTravelWorldReceiveScoresRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActTravelWorldReceiveScoresRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TActTravelWorldReceiveScoresRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActTravelWorldReceiveScoresRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActTravelWorldReceiveScoresRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TActTravelWorldReceiveDailyTaskRewardReq

// optional uint32 RewardTid = 1;
inline bool TActTravelWorldReceiveDailyTaskRewardReq::has_rewardtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActTravelWorldReceiveDailyTaskRewardReq::set_has_rewardtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActTravelWorldReceiveDailyTaskRewardReq::clear_has_rewardtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActTravelWorldReceiveDailyTaskRewardReq::clear_rewardtid() {
  rewardtid_ = 0u;
  clear_has_rewardtid();
}
inline ::google::protobuf::uint32 TActTravelWorldReceiveDailyTaskRewardReq::rewardtid() const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldReceiveDailyTaskRewardReq.RewardTid)
  return rewardtid_;
}
inline void TActTravelWorldReceiveDailyTaskRewardReq::set_rewardtid(::google::protobuf::uint32 value) {
  set_has_rewardtid();
  rewardtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActTravelWorldReceiveDailyTaskRewardReq.RewardTid)
}

// -------------------------------------------------------------------

// TActTravelWorldReceiveDailyTaskRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TActTravelWorldReceiveDailyTaskRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TActTravelWorldReceiveDailyTaskRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TActTravelWorldReceiveDailyTaskRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldReceiveDailyTaskRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TActTravelWorldReceiveDailyTaskRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActTravelWorldReceiveDailyTaskRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TActTravelWorldReceiveDailyTaskRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TActTravelWorldReceiveDailyTaskRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActTravelWorldReceiveDailyTaskRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TActTravelWorldReceiveDailyTaskRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActTravelWorldReceiveDailyTaskRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActTravelWorldReceiveDailyTaskRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TActTravelWorldReceiveAchiTaskRewardReq

// optional uint32 RewardTid = 1;
inline bool TActTravelWorldReceiveAchiTaskRewardReq::has_rewardtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActTravelWorldReceiveAchiTaskRewardReq::set_has_rewardtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActTravelWorldReceiveAchiTaskRewardReq::clear_has_rewardtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActTravelWorldReceiveAchiTaskRewardReq::clear_rewardtid() {
  rewardtid_ = 0u;
  clear_has_rewardtid();
}
inline ::google::protobuf::uint32 TActTravelWorldReceiveAchiTaskRewardReq::rewardtid() const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldReceiveAchiTaskRewardReq.RewardTid)
  return rewardtid_;
}
inline void TActTravelWorldReceiveAchiTaskRewardReq::set_rewardtid(::google::protobuf::uint32 value) {
  set_has_rewardtid();
  rewardtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActTravelWorldReceiveAchiTaskRewardReq.RewardTid)
}

// -------------------------------------------------------------------

// TActTravelWorldReceiveAchiTaskRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TActTravelWorldReceiveAchiTaskRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TActTravelWorldReceiveAchiTaskRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TActTravelWorldReceiveAchiTaskRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldReceiveAchiTaskRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TActTravelWorldReceiveAchiTaskRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActTravelWorldReceiveAchiTaskRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TActTravelWorldReceiveAchiTaskRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TActTravelWorldReceiveAchiTaskRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActTravelWorldReceiveAchiTaskRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TActTravelWorldReceiveAchiTaskRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActTravelWorldReceiveAchiTaskRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActTravelWorldReceiveAchiTaskRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TActTravelWorldNotify

// repeated .pb.TActTravelWorldTaskInfo DailyTaskArr = 1;
inline int TActTravelWorldNotify::dailytaskarr_size() const {
  return dailytaskarr_.size();
}
inline void TActTravelWorldNotify::clear_dailytaskarr() {
  dailytaskarr_.Clear();
}
inline const ::pb::TActTravelWorldTaskInfo& TActTravelWorldNotify::dailytaskarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldNotify.DailyTaskArr)
  return dailytaskarr_.Get(index);
}
inline ::pb::TActTravelWorldTaskInfo* TActTravelWorldNotify::mutable_dailytaskarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActTravelWorldNotify.DailyTaskArr)
  return dailytaskarr_.Mutable(index);
}
inline ::pb::TActTravelWorldTaskInfo* TActTravelWorldNotify::add_dailytaskarr() {
  // @@protoc_insertion_point(field_add:pb.TActTravelWorldNotify.DailyTaskArr)
  return dailytaskarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo >&
TActTravelWorldNotify::dailytaskarr() const {
  // @@protoc_insertion_point(field_list:pb.TActTravelWorldNotify.DailyTaskArr)
  return dailytaskarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo >*
TActTravelWorldNotify::mutable_dailytaskarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActTravelWorldNotify.DailyTaskArr)
  return &dailytaskarr_;
}

// repeated .pb.TActTravelWorldTaskInfo AchiTaskArr = 2;
inline int TActTravelWorldNotify::achitaskarr_size() const {
  return achitaskarr_.size();
}
inline void TActTravelWorldNotify::clear_achitaskarr() {
  achitaskarr_.Clear();
}
inline const ::pb::TActTravelWorldTaskInfo& TActTravelWorldNotify::achitaskarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActTravelWorldNotify.AchiTaskArr)
  return achitaskarr_.Get(index);
}
inline ::pb::TActTravelWorldTaskInfo* TActTravelWorldNotify::mutable_achitaskarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActTravelWorldNotify.AchiTaskArr)
  return achitaskarr_.Mutable(index);
}
inline ::pb::TActTravelWorldTaskInfo* TActTravelWorldNotify::add_achitaskarr() {
  // @@protoc_insertion_point(field_add:pb.TActTravelWorldNotify.AchiTaskArr)
  return achitaskarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo >&
TActTravelWorldNotify::achitaskarr() const {
  // @@protoc_insertion_point(field_list:pb.TActTravelWorldNotify.AchiTaskArr)
  return achitaskarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActTravelWorldTaskInfo >*
TActTravelWorldNotify::mutable_achitaskarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActTravelWorldNotify.AchiTaskArr)
  return &achitaskarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EActTravelWorldTaskType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EActTravelWorldTaskType>() {
  return ::pb::EActTravelWorldTaskType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActTravelWorld_2eproto__INCLUDED
