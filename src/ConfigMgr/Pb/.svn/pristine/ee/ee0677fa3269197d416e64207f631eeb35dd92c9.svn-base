// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/NationalWarMap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/NationalWarMap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* NationalWarMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NationalWarMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrnamentGroupData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrnamentGroupData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrnamentGroupGridIdxData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrnamentGroupGridIdxData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrnamentGroupBlockData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrnamentGroupBlockData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrnamentGroupGridData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrnamentGroupGridData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fNationalWarMap_2eproto() {
  protobuf_AddDesc_module_2fNationalWarMap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/NationalWarMap.proto");
  GOOGLE_CHECK(file != NULL);
  NationalWarMap_descriptor_ = file->message_type(0);
  static const int NationalWarMap_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMap, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMap, mapname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMap, mapwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMap, mapheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMap, circlecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMap, griddataarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMap, ornamentgroupdataarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMap, ornamentgroupgrididxarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMap, ornamentgroupblockdataarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMap, ornamentgroupgriddataarr_),
  };
  NationalWarMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NationalWarMap_descriptor_,
      NationalWarMap::default_instance_,
      NationalWarMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NationalWarMap));
  GridData_descriptor_ = file->message_type(1);
  static const int GridData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, circleidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, isobstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, isspecial_),
  };
  GridData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridData_descriptor_,
      GridData::default_instance_,
      GridData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridData));
  OrnamentGroupData_descriptor_ = file->message_type(2);
  static const int OrnamentGroupData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupData, ornamentgroupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupData, grididxarr_),
  };
  OrnamentGroupData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrnamentGroupData_descriptor_,
      OrnamentGroupData::default_instance_,
      OrnamentGroupData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrnamentGroupData));
  OrnamentGroupGridIdxData_descriptor_ = file->message_type(3);
  static const int OrnamentGroupGridIdxData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupGridIdxData, ornamentgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupGridIdxData, grididx_),
  };
  OrnamentGroupGridIdxData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrnamentGroupGridIdxData_descriptor_,
      OrnamentGroupGridIdxData::default_instance_,
      OrnamentGroupGridIdxData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupGridIdxData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupGridIdxData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrnamentGroupGridIdxData));
  OrnamentGroupBlockData_descriptor_ = file->message_type(4);
  static const int OrnamentGroupBlockData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupBlockData, blockidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupBlockData, ornamentgroupidarr_),
  };
  OrnamentGroupBlockData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrnamentGroupBlockData_descriptor_,
      OrnamentGroupBlockData::default_instance_,
      OrnamentGroupBlockData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupBlockData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupBlockData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrnamentGroupBlockData));
  OrnamentGroupGridData_descriptor_ = file->message_type(5);
  static const int OrnamentGroupGridData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupGridData, grididx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupGridData, ornamentgroupid_),
  };
  OrnamentGroupGridData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrnamentGroupGridData_descriptor_,
      OrnamentGroupGridData::default_instance_,
      OrnamentGroupGridData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupGridData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupGridData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrnamentGroupGridData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fNationalWarMap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NationalWarMap_descriptor_, &NationalWarMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridData_descriptor_, &GridData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrnamentGroupData_descriptor_, &OrnamentGroupData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrnamentGroupGridIdxData_descriptor_, &OrnamentGroupGridIdxData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrnamentGroupBlockData_descriptor_, &OrnamentGroupBlockData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrnamentGroupGridData_descriptor_, &OrnamentGroupGridData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fNationalWarMap_2eproto() {
  delete NationalWarMap::default_instance_;
  delete NationalWarMap_reflection_;
  delete GridData::default_instance_;
  delete GridData_reflection_;
  delete OrnamentGroupData::default_instance_;
  delete OrnamentGroupData_reflection_;
  delete OrnamentGroupGridIdxData::default_instance_;
  delete OrnamentGroupGridIdxData_reflection_;
  delete OrnamentGroupBlockData::default_instance_;
  delete OrnamentGroupBlockData_reflection_;
  delete OrnamentGroupGridData::default_instance_;
  delete OrnamentGroupGridData_reflection_;
}

void protobuf_AddDesc_module_2fNationalWarMap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033module/NationalWarMap.proto\022\002pb\"\372\002\n\016Na"
    "tionalWarMap\022\n\n\002Id\030\001 \002(\005\022\017\n\007MapName\030\002 \002("
    "\t\022\020\n\010MapWidth\030\003 \001(\005\022\021\n\tMapHeight\030\004 \001(\005\022\023"
    "\n\013CircleCount\030\005 \001(\005\022!\n\013GridDataArr\030\006 \003(\013"
    "2\014.pb.GridData\0223\n\024OrnamentGroupDataArr\030\007"
    " \003(\0132\025.pb.OrnamentGroupData\022=\n\027OrnamentG"
    "roupGridIdxArr\030\010 \003(\0132\034.pb.OrnamentGroupG"
    "ridIdxData\022=\n\031OrnamentGroupBlockDataArr\030"
    "\t \003(\0132\032.pb.OrnamentGroupBlockData\022;\n\030Orn"
    "amentGroupGridDataArr\030\n \003(\0132\031.pb.Ornamen"
    "tGroupGridData\"S\n\010GridData\022\021\n\tCircleIdx\030"
    "\001 \001(\005\022\r\n\005ResId\030\002 \001(\r\022\022\n\nIsObstacle\030\003 \001(\010"
    "\022\021\n\tIsSpecial\030\004 \001(\010\"B\n\021OrnamentGroupData"
    "\022\031\n\021OrnamentGroupName\030\001 \001(\t\022\022\n\nGridIdxAr"
    "r\030\002 \003(\005\"D\n\030OrnamentGroupGridIdxData\022\027\n\017O"
    "rnamentGroupId\030\001 \001(\005\022\017\n\007GridIdx\030\002 \001(\005\"F\n"
    "\026OrnamentGroupBlockData\022\020\n\010BlockIdx\030\001 \001("
    "\005\022\032\n\022OrnamentGroupIdArr\030\002 \003(\005\"A\n\025Ornamen"
    "tGroupGridData\022\017\n\007GridIdx\030\001 \001(\005\022\027\n\017Ornam"
    "entGroupId\030\002 \003(\005", 776);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/NationalWarMap.proto", &protobuf_RegisterTypes);
  NationalWarMap::default_instance_ = new NationalWarMap();
  GridData::default_instance_ = new GridData();
  OrnamentGroupData::default_instance_ = new OrnamentGroupData();
  OrnamentGroupGridIdxData::default_instance_ = new OrnamentGroupGridIdxData();
  OrnamentGroupBlockData::default_instance_ = new OrnamentGroupBlockData();
  OrnamentGroupGridData::default_instance_ = new OrnamentGroupGridData();
  NationalWarMap::default_instance_->InitAsDefaultInstance();
  GridData::default_instance_->InitAsDefaultInstance();
  OrnamentGroupData::default_instance_->InitAsDefaultInstance();
  OrnamentGroupGridIdxData::default_instance_->InitAsDefaultInstance();
  OrnamentGroupBlockData::default_instance_->InitAsDefaultInstance();
  OrnamentGroupGridData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fNationalWarMap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fNationalWarMap_2eproto {
  StaticDescriptorInitializer_module_2fNationalWarMap_2eproto() {
    protobuf_AddDesc_module_2fNationalWarMap_2eproto();
  }
} static_descriptor_initializer_module_2fNationalWarMap_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NationalWarMap::kIdFieldNumber;
const int NationalWarMap::kMapNameFieldNumber;
const int NationalWarMap::kMapWidthFieldNumber;
const int NationalWarMap::kMapHeightFieldNumber;
const int NationalWarMap::kCircleCountFieldNumber;
const int NationalWarMap::kGridDataArrFieldNumber;
const int NationalWarMap::kOrnamentGroupDataArrFieldNumber;
const int NationalWarMap::kOrnamentGroupGridIdxArrFieldNumber;
const int NationalWarMap::kOrnamentGroupBlockDataArrFieldNumber;
const int NationalWarMap::kOrnamentGroupGridDataArrFieldNumber;
#endif  // !_MSC_VER

NationalWarMap::NationalWarMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.NationalWarMap)
}

void NationalWarMap::InitAsDefaultInstance() {
}

NationalWarMap::NationalWarMap(const NationalWarMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.NationalWarMap)
}

void NationalWarMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapwidth_ = 0;
  mapheight_ = 0;
  circlecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NationalWarMap::~NationalWarMap() {
  // @@protoc_insertion_point(destructor:pb.NationalWarMap)
  SharedDtor();
}

void NationalWarMap::SharedDtor() {
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapname_;
  }
  if (this != default_instance_) {
  }
}

void NationalWarMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NationalWarMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NationalWarMap_descriptor_;
}

const NationalWarMap& NationalWarMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fNationalWarMap_2eproto();
  return *default_instance_;
}

NationalWarMap* NationalWarMap::default_instance_ = NULL;

NationalWarMap* NationalWarMap::New() const {
  return new NationalWarMap;
}

void NationalWarMap::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NationalWarMap*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, circlecount_);
    if (has_mapname()) {
      if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mapname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  griddataarr_.Clear();
  ornamentgroupdataarr_.Clear();
  ornamentgroupgrididxarr_.Clear();
  ornamentgroupblockdataarr_.Clear();
  ornamentgroupgriddataarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NationalWarMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.NationalWarMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MapName;
        break;
      }

      // required string MapName = 2;
      case 2: {
        if (tag == 18) {
         parse_MapName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MapWidth;
        break;
      }

      // optional int32 MapWidth = 3;
      case 3: {
        if (tag == 24) {
         parse_MapWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapwidth_)));
          set_has_mapwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MapHeight;
        break;
      }

      // optional int32 MapHeight = 4;
      case 4: {
        if (tag == 32) {
         parse_MapHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapheight_)));
          set_has_mapheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CircleCount;
        break;
      }

      // optional int32 CircleCount = 5;
      case 5: {
        if (tag == 40) {
         parse_CircleCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &circlecount_)));
          set_has_circlecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_GridDataArr;
        break;
      }

      // repeated .pb.GridData GridDataArr = 6;
      case 6: {
        if (tag == 50) {
         parse_GridDataArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_griddataarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_GridDataArr;
        if (input->ExpectTag(58)) goto parse_OrnamentGroupDataArr;
        break;
      }

      // repeated .pb.OrnamentGroupData OrnamentGroupDataArr = 7;
      case 7: {
        if (tag == 58) {
         parse_OrnamentGroupDataArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ornamentgroupdataarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_OrnamentGroupDataArr;
        if (input->ExpectTag(66)) goto parse_OrnamentGroupGridIdxArr;
        break;
      }

      // repeated .pb.OrnamentGroupGridIdxData OrnamentGroupGridIdxArr = 8;
      case 8: {
        if (tag == 66) {
         parse_OrnamentGroupGridIdxArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ornamentgroupgrididxarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_OrnamentGroupGridIdxArr;
        if (input->ExpectTag(74)) goto parse_OrnamentGroupBlockDataArr;
        break;
      }

      // repeated .pb.OrnamentGroupBlockData OrnamentGroupBlockDataArr = 9;
      case 9: {
        if (tag == 74) {
         parse_OrnamentGroupBlockDataArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ornamentgroupblockdataarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_OrnamentGroupBlockDataArr;
        if (input->ExpectTag(82)) goto parse_OrnamentGroupGridDataArr;
        break;
      }

      // repeated .pb.OrnamentGroupGridData OrnamentGroupGridDataArr = 10;
      case 10: {
        if (tag == 82) {
         parse_OrnamentGroupGridDataArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ornamentgroupgriddataarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_OrnamentGroupGridDataArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.NationalWarMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.NationalWarMap)
  return false;
#undef DO_
}

void NationalWarMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.NationalWarMap)
  // required int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string MapName = 2;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mapname(), output);
  }

  // optional int32 MapWidth = 3;
  if (has_mapwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapwidth(), output);
  }

  // optional int32 MapHeight = 4;
  if (has_mapheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapheight(), output);
  }

  // optional int32 CircleCount = 5;
  if (has_circlecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->circlecount(), output);
  }

  // repeated .pb.GridData GridDataArr = 6;
  for (int i = 0; i < this->griddataarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->griddataarr(i), output);
  }

  // repeated .pb.OrnamentGroupData OrnamentGroupDataArr = 7;
  for (int i = 0; i < this->ornamentgroupdataarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ornamentgroupdataarr(i), output);
  }

  // repeated .pb.OrnamentGroupGridIdxData OrnamentGroupGridIdxArr = 8;
  for (int i = 0; i < this->ornamentgroupgrididxarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ornamentgroupgrididxarr(i), output);
  }

  // repeated .pb.OrnamentGroupBlockData OrnamentGroupBlockDataArr = 9;
  for (int i = 0; i < this->ornamentgroupblockdataarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->ornamentgroupblockdataarr(i), output);
  }

  // repeated .pb.OrnamentGroupGridData OrnamentGroupGridDataArr = 10;
  for (int i = 0; i < this->ornamentgroupgriddataarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->ornamentgroupgriddataarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.NationalWarMap)
}

::google::protobuf::uint8* NationalWarMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.NationalWarMap)
  // required int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string MapName = 2;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mapname(), target);
  }

  // optional int32 MapWidth = 3;
  if (has_mapwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapwidth(), target);
  }

  // optional int32 MapHeight = 4;
  if (has_mapheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapheight(), target);
  }

  // optional int32 CircleCount = 5;
  if (has_circlecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->circlecount(), target);
  }

  // repeated .pb.GridData GridDataArr = 6;
  for (int i = 0; i < this->griddataarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->griddataarr(i), target);
  }

  // repeated .pb.OrnamentGroupData OrnamentGroupDataArr = 7;
  for (int i = 0; i < this->ornamentgroupdataarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ornamentgroupdataarr(i), target);
  }

  // repeated .pb.OrnamentGroupGridIdxData OrnamentGroupGridIdxArr = 8;
  for (int i = 0; i < this->ornamentgroupgrididxarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ornamentgroupgrididxarr(i), target);
  }

  // repeated .pb.OrnamentGroupBlockData OrnamentGroupBlockDataArr = 9;
  for (int i = 0; i < this->ornamentgroupblockdataarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->ornamentgroupblockdataarr(i), target);
  }

  // repeated .pb.OrnamentGroupGridData OrnamentGroupGridDataArr = 10;
  for (int i = 0; i < this->ornamentgroupgriddataarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->ornamentgroupgriddataarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.NationalWarMap)
  return target;
}

int NationalWarMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string MapName = 2;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapname());
    }

    // optional int32 MapWidth = 3;
    if (has_mapwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapwidth());
    }

    // optional int32 MapHeight = 4;
    if (has_mapheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapheight());
    }

    // optional int32 CircleCount = 5;
    if (has_circlecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->circlecount());
    }

  }
  // repeated .pb.GridData GridDataArr = 6;
  total_size += 1 * this->griddataarr_size();
  for (int i = 0; i < this->griddataarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->griddataarr(i));
  }

  // repeated .pb.OrnamentGroupData OrnamentGroupDataArr = 7;
  total_size += 1 * this->ornamentgroupdataarr_size();
  for (int i = 0; i < this->ornamentgroupdataarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ornamentgroupdataarr(i));
  }

  // repeated .pb.OrnamentGroupGridIdxData OrnamentGroupGridIdxArr = 8;
  total_size += 1 * this->ornamentgroupgrididxarr_size();
  for (int i = 0; i < this->ornamentgroupgrididxarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ornamentgroupgrididxarr(i));
  }

  // repeated .pb.OrnamentGroupBlockData OrnamentGroupBlockDataArr = 9;
  total_size += 1 * this->ornamentgroupblockdataarr_size();
  for (int i = 0; i < this->ornamentgroupblockdataarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ornamentgroupblockdataarr(i));
  }

  // repeated .pb.OrnamentGroupGridData OrnamentGroupGridDataArr = 10;
  total_size += 1 * this->ornamentgroupgriddataarr_size();
  for (int i = 0; i < this->ornamentgroupgriddataarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ornamentgroupgriddataarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NationalWarMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NationalWarMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NationalWarMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NationalWarMap::MergeFrom(const NationalWarMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  griddataarr_.MergeFrom(from.griddataarr_);
  ornamentgroupdataarr_.MergeFrom(from.ornamentgroupdataarr_);
  ornamentgroupgrididxarr_.MergeFrom(from.ornamentgroupgrididxarr_);
  ornamentgroupblockdataarr_.MergeFrom(from.ornamentgroupblockdataarr_);
  ornamentgroupgriddataarr_.MergeFrom(from.ornamentgroupgriddataarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mapname()) {
      set_mapname(from.mapname());
    }
    if (from.has_mapwidth()) {
      set_mapwidth(from.mapwidth());
    }
    if (from.has_mapheight()) {
      set_mapheight(from.mapheight());
    }
    if (from.has_circlecount()) {
      set_circlecount(from.circlecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NationalWarMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NationalWarMap::CopyFrom(const NationalWarMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NationalWarMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NationalWarMap::Swap(NationalWarMap* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mapname_, other->mapname_);
    std::swap(mapwidth_, other->mapwidth_);
    std::swap(mapheight_, other->mapheight_);
    std::swap(circlecount_, other->circlecount_);
    griddataarr_.Swap(&other->griddataarr_);
    ornamentgroupdataarr_.Swap(&other->ornamentgroupdataarr_);
    ornamentgroupgrididxarr_.Swap(&other->ornamentgroupgrididxarr_);
    ornamentgroupblockdataarr_.Swap(&other->ornamentgroupblockdataarr_);
    ornamentgroupgriddataarr_.Swap(&other->ornamentgroupgriddataarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NationalWarMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NationalWarMap_descriptor_;
  metadata.reflection = NationalWarMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GridData::kCircleIdxFieldNumber;
const int GridData::kResIdFieldNumber;
const int GridData::kIsObstacleFieldNumber;
const int GridData::kIsSpecialFieldNumber;
#endif  // !_MSC_VER

GridData::GridData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.GridData)
}

void GridData::InitAsDefaultInstance() {
}

GridData::GridData(const GridData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.GridData)
}

void GridData::SharedCtor() {
  _cached_size_ = 0;
  circleidx_ = 0;
  resid_ = 0u;
  isobstacle_ = false;
  isspecial_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridData::~GridData() {
  // @@protoc_insertion_point(destructor:pb.GridData)
  SharedDtor();
}

void GridData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GridData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridData_descriptor_;
}

const GridData& GridData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fNationalWarMap_2eproto();
  return *default_instance_;
}

GridData* GridData::default_instance_ = NULL;

GridData* GridData::New() const {
  return new GridData;
}

void GridData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GridData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(circleidx_, isspecial_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.GridData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CircleIdx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &circleidx_)));
          set_has_circleidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ResId;
        break;
      }

      // optional uint32 ResId = 2;
      case 2: {
        if (tag == 16) {
         parse_ResId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid_)));
          set_has_resid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsObstacle;
        break;
      }

      // optional bool IsObstacle = 3;
      case 3: {
        if (tag == 24) {
         parse_IsObstacle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isobstacle_)));
          set_has_isobstacle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_IsSpecial;
        break;
      }

      // optional bool IsSpecial = 4;
      case 4: {
        if (tag == 32) {
         parse_IsSpecial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isspecial_)));
          set_has_isspecial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.GridData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.GridData)
  return false;
#undef DO_
}

void GridData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.GridData)
  // optional int32 CircleIdx = 1;
  if (has_circleidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->circleidx(), output);
  }

  // optional uint32 ResId = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resid(), output);
  }

  // optional bool IsObstacle = 3;
  if (has_isobstacle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isobstacle(), output);
  }

  // optional bool IsSpecial = 4;
  if (has_isspecial()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isspecial(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.GridData)
}

::google::protobuf::uint8* GridData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GridData)
  // optional int32 CircleIdx = 1;
  if (has_circleidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->circleidx(), target);
  }

  // optional uint32 ResId = 2;
  if (has_resid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resid(), target);
  }

  // optional bool IsObstacle = 3;
  if (has_isobstacle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isobstacle(), target);
  }

  // optional bool IsSpecial = 4;
  if (has_isspecial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isspecial(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GridData)
  return target;
}

int GridData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CircleIdx = 1;
    if (has_circleidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->circleidx());
    }

    // optional uint32 ResId = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid());
    }

    // optional bool IsObstacle = 3;
    if (has_isobstacle()) {
      total_size += 1 + 1;
    }

    // optional bool IsSpecial = 4;
    if (has_isspecial()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridData::MergeFrom(const GridData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_circleidx()) {
      set_circleidx(from.circleidx());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_isobstacle()) {
      set_isobstacle(from.isobstacle());
    }
    if (from.has_isspecial()) {
      set_isspecial(from.isspecial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridData::CopyFrom(const GridData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridData::IsInitialized() const {

  return true;
}

void GridData::Swap(GridData* other) {
  if (other != this) {
    std::swap(circleidx_, other->circleidx_);
    std::swap(resid_, other->resid_);
    std::swap(isobstacle_, other->isobstacle_);
    std::swap(isspecial_, other->isspecial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridData_descriptor_;
  metadata.reflection = GridData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrnamentGroupData::kOrnamentGroupNameFieldNumber;
const int OrnamentGroupData::kGridIdxArrFieldNumber;
#endif  // !_MSC_VER

OrnamentGroupData::OrnamentGroupData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.OrnamentGroupData)
}

void OrnamentGroupData::InitAsDefaultInstance() {
}

OrnamentGroupData::OrnamentGroupData(const OrnamentGroupData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.OrnamentGroupData)
}

void OrnamentGroupData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ornamentgroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrnamentGroupData::~OrnamentGroupData() {
  // @@protoc_insertion_point(destructor:pb.OrnamentGroupData)
  SharedDtor();
}

void OrnamentGroupData::SharedDtor() {
  if (ornamentgroupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ornamentgroupname_;
  }
  if (this != default_instance_) {
  }
}

void OrnamentGroupData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrnamentGroupData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrnamentGroupData_descriptor_;
}

const OrnamentGroupData& OrnamentGroupData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fNationalWarMap_2eproto();
  return *default_instance_;
}

OrnamentGroupData* OrnamentGroupData::default_instance_ = NULL;

OrnamentGroupData* OrnamentGroupData::New() const {
  return new OrnamentGroupData;
}

void OrnamentGroupData::Clear() {
  if (has_ornamentgroupname()) {
    if (ornamentgroupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      ornamentgroupname_->clear();
    }
  }
  grididxarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrnamentGroupData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.OrnamentGroupData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string OrnamentGroupName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ornamentgroupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ornamentgroupname().data(), this->ornamentgroupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ornamentgroupname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GridIdxArr;
        break;
      }

      // repeated int32 GridIdxArr = 2;
      case 2: {
        if (tag == 16) {
         parse_GridIdxArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_grididxarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_grididxarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GridIdxArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.OrnamentGroupData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.OrnamentGroupData)
  return false;
#undef DO_
}

void OrnamentGroupData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.OrnamentGroupData)
  // optional string OrnamentGroupName = 1;
  if (has_ornamentgroupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ornamentgroupname().data(), this->ornamentgroupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ornamentgroupname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ornamentgroupname(), output);
  }

  // repeated int32 GridIdxArr = 2;
  for (int i = 0; i < this->grididxarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->grididxarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.OrnamentGroupData)
}

::google::protobuf::uint8* OrnamentGroupData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.OrnamentGroupData)
  // optional string OrnamentGroupName = 1;
  if (has_ornamentgroupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ornamentgroupname().data(), this->ornamentgroupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ornamentgroupname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ornamentgroupname(), target);
  }

  // repeated int32 GridIdxArr = 2;
  for (int i = 0; i < this->grididxarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->grididxarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.OrnamentGroupData)
  return target;
}

int OrnamentGroupData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string OrnamentGroupName = 1;
    if (has_ornamentgroupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ornamentgroupname());
    }

  }
  // repeated int32 GridIdxArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->grididxarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->grididxarr(i));
    }
    total_size += 1 * this->grididxarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrnamentGroupData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrnamentGroupData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrnamentGroupData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrnamentGroupData::MergeFrom(const OrnamentGroupData& from) {
  GOOGLE_CHECK_NE(&from, this);
  grididxarr_.MergeFrom(from.grididxarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ornamentgroupname()) {
      set_ornamentgroupname(from.ornamentgroupname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrnamentGroupData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrnamentGroupData::CopyFrom(const OrnamentGroupData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrnamentGroupData::IsInitialized() const {

  return true;
}

void OrnamentGroupData::Swap(OrnamentGroupData* other) {
  if (other != this) {
    std::swap(ornamentgroupname_, other->ornamentgroupname_);
    grididxarr_.Swap(&other->grididxarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrnamentGroupData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrnamentGroupData_descriptor_;
  metadata.reflection = OrnamentGroupData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrnamentGroupGridIdxData::kOrnamentGroupIdFieldNumber;
const int OrnamentGroupGridIdxData::kGridIdxFieldNumber;
#endif  // !_MSC_VER

OrnamentGroupGridIdxData::OrnamentGroupGridIdxData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.OrnamentGroupGridIdxData)
}

void OrnamentGroupGridIdxData::InitAsDefaultInstance() {
}

OrnamentGroupGridIdxData::OrnamentGroupGridIdxData(const OrnamentGroupGridIdxData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.OrnamentGroupGridIdxData)
}

void OrnamentGroupGridIdxData::SharedCtor() {
  _cached_size_ = 0;
  ornamentgroupid_ = 0;
  grididx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrnamentGroupGridIdxData::~OrnamentGroupGridIdxData() {
  // @@protoc_insertion_point(destructor:pb.OrnamentGroupGridIdxData)
  SharedDtor();
}

void OrnamentGroupGridIdxData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrnamentGroupGridIdxData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrnamentGroupGridIdxData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrnamentGroupGridIdxData_descriptor_;
}

const OrnamentGroupGridIdxData& OrnamentGroupGridIdxData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fNationalWarMap_2eproto();
  return *default_instance_;
}

OrnamentGroupGridIdxData* OrnamentGroupGridIdxData::default_instance_ = NULL;

OrnamentGroupGridIdxData* OrnamentGroupGridIdxData::New() const {
  return new OrnamentGroupGridIdxData;
}

void OrnamentGroupGridIdxData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrnamentGroupGridIdxData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ornamentgroupid_, grididx_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrnamentGroupGridIdxData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.OrnamentGroupGridIdxData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 OrnamentGroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ornamentgroupid_)));
          set_has_ornamentgroupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GridIdx;
        break;
      }

      // optional int32 GridIdx = 2;
      case 2: {
        if (tag == 16) {
         parse_GridIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grididx_)));
          set_has_grididx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.OrnamentGroupGridIdxData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.OrnamentGroupGridIdxData)
  return false;
#undef DO_
}

void OrnamentGroupGridIdxData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.OrnamentGroupGridIdxData)
  // optional int32 OrnamentGroupId = 1;
  if (has_ornamentgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ornamentgroupid(), output);
  }

  // optional int32 GridIdx = 2;
  if (has_grididx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grididx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.OrnamentGroupGridIdxData)
}

::google::protobuf::uint8* OrnamentGroupGridIdxData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.OrnamentGroupGridIdxData)
  // optional int32 OrnamentGroupId = 1;
  if (has_ornamentgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ornamentgroupid(), target);
  }

  // optional int32 GridIdx = 2;
  if (has_grididx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grididx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.OrnamentGroupGridIdxData)
  return target;
}

int OrnamentGroupGridIdxData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 OrnamentGroupId = 1;
    if (has_ornamentgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ornamentgroupid());
    }

    // optional int32 GridIdx = 2;
    if (has_grididx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grididx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrnamentGroupGridIdxData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrnamentGroupGridIdxData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrnamentGroupGridIdxData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrnamentGroupGridIdxData::MergeFrom(const OrnamentGroupGridIdxData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ornamentgroupid()) {
      set_ornamentgroupid(from.ornamentgroupid());
    }
    if (from.has_grididx()) {
      set_grididx(from.grididx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrnamentGroupGridIdxData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrnamentGroupGridIdxData::CopyFrom(const OrnamentGroupGridIdxData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrnamentGroupGridIdxData::IsInitialized() const {

  return true;
}

void OrnamentGroupGridIdxData::Swap(OrnamentGroupGridIdxData* other) {
  if (other != this) {
    std::swap(ornamentgroupid_, other->ornamentgroupid_);
    std::swap(grididx_, other->grididx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrnamentGroupGridIdxData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrnamentGroupGridIdxData_descriptor_;
  metadata.reflection = OrnamentGroupGridIdxData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrnamentGroupBlockData::kBlockIdxFieldNumber;
const int OrnamentGroupBlockData::kOrnamentGroupIdArrFieldNumber;
#endif  // !_MSC_VER

OrnamentGroupBlockData::OrnamentGroupBlockData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.OrnamentGroupBlockData)
}

void OrnamentGroupBlockData::InitAsDefaultInstance() {
}

OrnamentGroupBlockData::OrnamentGroupBlockData(const OrnamentGroupBlockData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.OrnamentGroupBlockData)
}

void OrnamentGroupBlockData::SharedCtor() {
  _cached_size_ = 0;
  blockidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrnamentGroupBlockData::~OrnamentGroupBlockData() {
  // @@protoc_insertion_point(destructor:pb.OrnamentGroupBlockData)
  SharedDtor();
}

void OrnamentGroupBlockData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrnamentGroupBlockData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrnamentGroupBlockData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrnamentGroupBlockData_descriptor_;
}

const OrnamentGroupBlockData& OrnamentGroupBlockData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fNationalWarMap_2eproto();
  return *default_instance_;
}

OrnamentGroupBlockData* OrnamentGroupBlockData::default_instance_ = NULL;

OrnamentGroupBlockData* OrnamentGroupBlockData::New() const {
  return new OrnamentGroupBlockData;
}

void OrnamentGroupBlockData::Clear() {
  blockidx_ = 0;
  ornamentgroupidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrnamentGroupBlockData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.OrnamentGroupBlockData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 BlockIdx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blockidx_)));
          set_has_blockidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OrnamentGroupIdArr;
        break;
      }

      // repeated int32 OrnamentGroupIdArr = 2;
      case 2: {
        if (tag == 16) {
         parse_OrnamentGroupIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_ornamentgroupidarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ornamentgroupidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OrnamentGroupIdArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.OrnamentGroupBlockData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.OrnamentGroupBlockData)
  return false;
#undef DO_
}

void OrnamentGroupBlockData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.OrnamentGroupBlockData)
  // optional int32 BlockIdx = 1;
  if (has_blockidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blockidx(), output);
  }

  // repeated int32 OrnamentGroupIdArr = 2;
  for (int i = 0; i < this->ornamentgroupidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->ornamentgroupidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.OrnamentGroupBlockData)
}

::google::protobuf::uint8* OrnamentGroupBlockData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.OrnamentGroupBlockData)
  // optional int32 BlockIdx = 1;
  if (has_blockidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->blockidx(), target);
  }

  // repeated int32 OrnamentGroupIdArr = 2;
  for (int i = 0; i < this->ornamentgroupidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->ornamentgroupidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.OrnamentGroupBlockData)
  return target;
}

int OrnamentGroupBlockData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 BlockIdx = 1;
    if (has_blockidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blockidx());
    }

  }
  // repeated int32 OrnamentGroupIdArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ornamentgroupidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ornamentgroupidarr(i));
    }
    total_size += 1 * this->ornamentgroupidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrnamentGroupBlockData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrnamentGroupBlockData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrnamentGroupBlockData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrnamentGroupBlockData::MergeFrom(const OrnamentGroupBlockData& from) {
  GOOGLE_CHECK_NE(&from, this);
  ornamentgroupidarr_.MergeFrom(from.ornamentgroupidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blockidx()) {
      set_blockidx(from.blockidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrnamentGroupBlockData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrnamentGroupBlockData::CopyFrom(const OrnamentGroupBlockData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrnamentGroupBlockData::IsInitialized() const {

  return true;
}

void OrnamentGroupBlockData::Swap(OrnamentGroupBlockData* other) {
  if (other != this) {
    std::swap(blockidx_, other->blockidx_);
    ornamentgroupidarr_.Swap(&other->ornamentgroupidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrnamentGroupBlockData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrnamentGroupBlockData_descriptor_;
  metadata.reflection = OrnamentGroupBlockData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrnamentGroupGridData::kGridIdxFieldNumber;
const int OrnamentGroupGridData::kOrnamentGroupIdFieldNumber;
#endif  // !_MSC_VER

OrnamentGroupGridData::OrnamentGroupGridData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.OrnamentGroupGridData)
}

void OrnamentGroupGridData::InitAsDefaultInstance() {
}

OrnamentGroupGridData::OrnamentGroupGridData(const OrnamentGroupGridData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.OrnamentGroupGridData)
}

void OrnamentGroupGridData::SharedCtor() {
  _cached_size_ = 0;
  grididx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrnamentGroupGridData::~OrnamentGroupGridData() {
  // @@protoc_insertion_point(destructor:pb.OrnamentGroupGridData)
  SharedDtor();
}

void OrnamentGroupGridData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrnamentGroupGridData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrnamentGroupGridData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrnamentGroupGridData_descriptor_;
}

const OrnamentGroupGridData& OrnamentGroupGridData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fNationalWarMap_2eproto();
  return *default_instance_;
}

OrnamentGroupGridData* OrnamentGroupGridData::default_instance_ = NULL;

OrnamentGroupGridData* OrnamentGroupGridData::New() const {
  return new OrnamentGroupGridData;
}

void OrnamentGroupGridData::Clear() {
  grididx_ = 0;
  ornamentgroupid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrnamentGroupGridData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.OrnamentGroupGridData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GridIdx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grididx_)));
          set_has_grididx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OrnamentGroupId;
        break;
      }

      // repeated int32 OrnamentGroupId = 2;
      case 2: {
        if (tag == 16) {
         parse_OrnamentGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_ornamentgroupid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ornamentgroupid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OrnamentGroupId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.OrnamentGroupGridData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.OrnamentGroupGridData)
  return false;
#undef DO_
}

void OrnamentGroupGridData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.OrnamentGroupGridData)
  // optional int32 GridIdx = 1;
  if (has_grididx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grididx(), output);
  }

  // repeated int32 OrnamentGroupId = 2;
  for (int i = 0; i < this->ornamentgroupid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->ornamentgroupid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.OrnamentGroupGridData)
}

::google::protobuf::uint8* OrnamentGroupGridData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.OrnamentGroupGridData)
  // optional int32 GridIdx = 1;
  if (has_grididx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grididx(), target);
  }

  // repeated int32 OrnamentGroupId = 2;
  for (int i = 0; i < this->ornamentgroupid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->ornamentgroupid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.OrnamentGroupGridData)
  return target;
}

int OrnamentGroupGridData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GridIdx = 1;
    if (has_grididx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grididx());
    }

  }
  // repeated int32 OrnamentGroupId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ornamentgroupid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ornamentgroupid(i));
    }
    total_size += 1 * this->ornamentgroupid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrnamentGroupGridData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrnamentGroupGridData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrnamentGroupGridData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrnamentGroupGridData::MergeFrom(const OrnamentGroupGridData& from) {
  GOOGLE_CHECK_NE(&from, this);
  ornamentgroupid_.MergeFrom(from.ornamentgroupid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grididx()) {
      set_grididx(from.grididx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrnamentGroupGridData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrnamentGroupGridData::CopyFrom(const OrnamentGroupGridData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrnamentGroupGridData::IsInitialized() const {

  return true;
}

void OrnamentGroupGridData::Swap(OrnamentGroupGridData* other) {
  if (other != this) {
    std::swap(grididx_, other->grididx_);
    ornamentgroupid_.Swap(&other->ornamentgroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrnamentGroupGridData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrnamentGroupGridData_descriptor_;
  metadata.reflection = OrnamentGroupGridData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
