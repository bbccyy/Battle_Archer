// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/FightSoul.proto

#ifndef PROTOBUF_net_2fFightSoul_2eproto__INCLUDED
#define PROTOBUF_net_2fFightSoul_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/Battle.pb.h"
#include "net/Common.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fFightSoul_2eproto();
void protobuf_AssignDesc_net_2fFightSoul_2eproto();
void protobuf_ShutdownFile_net_2fFightSoul_2eproto();

class TFightSoulHuntInfo;
class TFightSoulGetHuntInfoRsp;
class TFightSoulHuntSoulRsp;
class TFightSoulGiveUpBattleReq;
class TFightSoulReportBattleReq;
class TFightSoulReportBattleRsp;
class TFightSoulCombineRecord;
class TFightSoulGetCombineRecordRsp;
class TFightSoulCombineSoulReq;
class TFightSoulCombineSoulRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TFightSoulHuntInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FightSoul.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFightSoulHuntInfo : public ::google::protobuf::Message {
 public:
  TFightSoulHuntInfo();
  virtual ~TFightSoulHuntInfo();

  TFightSoulHuntInfo(const TFightSoulHuntInfo& from);

  inline TFightSoulHuntInfo& operator=(const TFightSoulHuntInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFightSoulHuntInfo& default_instance();

  void Swap(TFightSoulHuntInfo* other);

  // implements Message ----------------------------------------------

  TFightSoulHuntInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFightSoulHuntInfo& from);
  void MergeFrom(const TFightSoulHuntInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CurSoulHeroId = 1;
  inline bool has_cursoulheroid() const;
  inline void clear_cursoulheroid();
  static const int kCurSoulHeroIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulHuntInfo</name>
  	<Function>
  		<name>cursoulheroid</name>
  		<replaceName>CurSoulHeroId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cursoulheroid</name>
  		<replaceName>CurSoulHeroId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cursoulheroid</name>
  		<replaceName>CurSoulHeroId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cursoulheroid() const;
  inline void set_cursoulheroid(::google::protobuf::uint32 value);

  // optional uint32 CurHuntNum = 2;
  inline bool has_curhuntnum() const;
  inline void clear_curhuntnum();
  static const int kCurHuntNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulHuntInfo</name>
  	<Function>
  		<name>curhuntnum</name>
  		<replaceName>CurHuntNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhuntnum</name>
  		<replaceName>CurHuntNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhuntnum</name>
  		<replaceName>CurHuntNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curhuntnum() const;
  inline void set_curhuntnum(::google::protobuf::uint32 value);

  // optional uint32 HuntLimit = 3;
  inline bool has_huntlimit() const;
  inline void clear_huntlimit();
  static const int kHuntLimitFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulHuntInfo</name>
  	<Function>
  		<name>huntlimit</name>
  		<replaceName>HuntLimit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_huntlimit</name>
  		<replaceName>HuntLimit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_huntlimit</name>
  		<replaceName>HuntLimit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 huntlimit() const;
  inline void set_huntlimit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TFightSoulHuntInfo)
 private:
  inline void set_has_cursoulheroid();
  inline void clear_has_cursoulheroid();
  inline void set_has_curhuntnum();
  inline void clear_has_curhuntnum();
  inline void set_has_huntlimit();
  inline void clear_has_huntlimit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cursoulheroid_;
  ::google::protobuf::uint32 curhuntnum_;
  ::google::protobuf::uint32 huntlimit_;
  friend void  protobuf_AddDesc_net_2fFightSoul_2eproto();
  friend void protobuf_AssignDesc_net_2fFightSoul_2eproto();
  friend void protobuf_ShutdownFile_net_2fFightSoul_2eproto();

  void InitAsDefaultInstance();
  static TFightSoulHuntInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFightSoulGetHuntInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FightSoul.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFightSoulGetHuntInfoRsp : public ::google::protobuf::Message {
 public:
  TFightSoulGetHuntInfoRsp();
  virtual ~TFightSoulGetHuntInfoRsp();

  TFightSoulGetHuntInfoRsp(const TFightSoulGetHuntInfoRsp& from);

  inline TFightSoulGetHuntInfoRsp& operator=(const TFightSoulGetHuntInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFightSoulGetHuntInfoRsp& default_instance();

  void Swap(TFightSoulGetHuntInfoRsp* other);

  // implements Message ----------------------------------------------

  TFightSoulGetHuntInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFightSoulGetHuntInfoRsp& from);
  void MergeFrom(const TFightSoulGetHuntInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TFightSoulHuntInfo HuntInfo = 1;
  inline bool has_huntinfo() const;
  inline void clear_huntinfo();
  static const int kHuntInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulGetHuntInfoRsp</name>
  	<Function>
  		<name>huntinfo</name>
  		<replaceName>HuntInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_huntinfo</name>
  		<replaceName>HuntInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_huntinfo</name>
  		<replaceName>HuntInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_huntinfo</name>
  		<replaceName>HuntInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TFightSoulHuntInfo& huntinfo() const;
  inline ::pb::TFightSoulHuntInfo* mutable_huntinfo();
  inline ::pb::TFightSoulHuntInfo* release_huntinfo();
  inline void set_allocated_huntinfo(::pb::TFightSoulHuntInfo* huntinfo);

  // optional uint32 BattleEventId = 2;
  inline bool has_battleeventid() const;
  inline void clear_battleeventid();
  static const int kBattleEventIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulGetHuntInfoRsp</name>
  	<Function>
  		<name>battleeventid</name>
  		<replaceName>BattleEventId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleeventid</name>
  		<replaceName>BattleEventId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleeventid</name>
  		<replaceName>BattleEventId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleeventid() const;
  inline void set_battleeventid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TFightSoulGetHuntInfoRsp)
 private:
  inline void set_has_huntinfo();
  inline void clear_has_huntinfo();
  inline void set_has_battleeventid();
  inline void clear_has_battleeventid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TFightSoulHuntInfo* huntinfo_;
  ::google::protobuf::uint32 battleeventid_;
  friend void  protobuf_AddDesc_net_2fFightSoul_2eproto();
  friend void protobuf_AssignDesc_net_2fFightSoul_2eproto();
  friend void protobuf_ShutdownFile_net_2fFightSoul_2eproto();

  void InitAsDefaultInstance();
  static TFightSoulGetHuntInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFightSoulHuntSoulRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FightSoul.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFightSoulHuntSoulRsp : public ::google::protobuf::Message {
 public:
  TFightSoulHuntSoulRsp();
  virtual ~TFightSoulHuntSoulRsp();

  TFightSoulHuntSoulRsp(const TFightSoulHuntSoulRsp& from);

  inline TFightSoulHuntSoulRsp& operator=(const TFightSoulHuntSoulRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFightSoulHuntSoulRsp& default_instance();

  void Swap(TFightSoulHuntSoulRsp* other);

  // implements Message ----------------------------------------------

  TFightSoulHuntSoulRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFightSoulHuntSoulRsp& from);
  void MergeFrom(const TFightSoulHuntSoulRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward SoulArr = 1;
  inline int soularr_size() const;
  inline void clear_soularr();
  static const int kSoulArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulHuntSoulRsp</name>
  	<Function>
  		<name>soularr</name>
  		<replaceName>SoulArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_soularr</name>
  		<replaceName>SoulArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_soularr</name>
  		<replaceName>SoulArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_soularr</name>
  		<replaceName>SoulArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>soularr_size</name>
  		<replaceName>SoulArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& soularr(int index) const;
  inline ::pb::TCommonReward* mutable_soularr(int index);
  inline ::pb::TCommonReward* add_soularr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      soularr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_soularr();

  // repeated .pb.TCommonReward ExtraArr = 2;
  inline int extraarr_size() const;
  inline void clear_extraarr();
  static const int kExtraArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulHuntSoulRsp</name>
  	<Function>
  		<name>extraarr</name>
  		<replaceName>ExtraArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_extraarr</name>
  		<replaceName>ExtraArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_extraarr</name>
  		<replaceName>ExtraArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extraarr</name>
  		<replaceName>ExtraArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>extraarr_size</name>
  		<replaceName>ExtraArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& extraarr(int index) const;
  inline ::pb::TCommonReward* mutable_extraarr(int index);
  inline ::pb::TCommonReward* add_extraarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      extraarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_extraarr();

  // optional uint32 EventId = 3;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulHuntSoulRsp</name>
  	<Function>
  		<name>eventid</name>
  		<replaceName>EventId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eventid</name>
  		<replaceName>EventId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventid</name>
  		<replaceName>EventId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 eventid() const;
  inline void set_eventid(::google::protobuf::uint32 value);

  // optional .pb.TFightSoulHuntInfo HuntInfo = 4;
  inline bool has_huntinfo() const;
  inline void clear_huntinfo();
  static const int kHuntInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulHuntSoulRsp</name>
  	<Function>
  		<name>huntinfo</name>
  		<replaceName>HuntInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_huntinfo</name>
  		<replaceName>HuntInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_huntinfo</name>
  		<replaceName>HuntInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_huntinfo</name>
  		<replaceName>HuntInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TFightSoulHuntInfo& huntinfo() const;
  inline ::pb::TFightSoulHuntInfo* mutable_huntinfo();
  inline ::pb::TFightSoulHuntInfo* release_huntinfo();
  inline void set_allocated_huntinfo(::pb::TFightSoulHuntInfo* huntinfo);

  // @@protoc_insertion_point(class_scope:pb.TFightSoulHuntSoulRsp)
 private:
  inline void set_has_eventid();
  inline void clear_has_eventid();
  inline void set_has_huntinfo();
  inline void clear_has_huntinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > soularr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > extraarr_;
  ::pb::TFightSoulHuntInfo* huntinfo_;
  ::google::protobuf::uint32 eventid_;
  friend void  protobuf_AddDesc_net_2fFightSoul_2eproto();
  friend void protobuf_AssignDesc_net_2fFightSoul_2eproto();
  friend void protobuf_ShutdownFile_net_2fFightSoul_2eproto();

  void InitAsDefaultInstance();
  static TFightSoulHuntSoulRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFightSoulGiveUpBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FightSoul.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFightSoulGiveUpBattleReq : public ::google::protobuf::Message {
 public:
  TFightSoulGiveUpBattleReq();
  virtual ~TFightSoulGiveUpBattleReq();

  TFightSoulGiveUpBattleReq(const TFightSoulGiveUpBattleReq& from);

  inline TFightSoulGiveUpBattleReq& operator=(const TFightSoulGiveUpBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFightSoulGiveUpBattleReq& default_instance();

  void Swap(TFightSoulGiveUpBattleReq* other);

  // implements Message ----------------------------------------------

  TFightSoulGiveUpBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFightSoulGiveUpBattleReq& from);
  void MergeFrom(const TFightSoulGiveUpBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BattleEventId = 1;
  inline bool has_battleeventid() const;
  inline void clear_battleeventid();
  static const int kBattleEventIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulGiveUpBattleReq</name>
  	<Function>
  		<name>battleeventid</name>
  		<replaceName>BattleEventId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleeventid</name>
  		<replaceName>BattleEventId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleeventid</name>
  		<replaceName>BattleEventId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleeventid() const;
  inline void set_battleeventid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TFightSoulGiveUpBattleReq)
 private:
  inline void set_has_battleeventid();
  inline void clear_has_battleeventid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 battleeventid_;
  friend void  protobuf_AddDesc_net_2fFightSoul_2eproto();
  friend void protobuf_AssignDesc_net_2fFightSoul_2eproto();
  friend void protobuf_ShutdownFile_net_2fFightSoul_2eproto();

  void InitAsDefaultInstance();
  static TFightSoulGiveUpBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFightSoulReportBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FightSoul.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFightSoulReportBattleReq : public ::google::protobuf::Message {
 public:
  TFightSoulReportBattleReq();
  virtual ~TFightSoulReportBattleReq();

  TFightSoulReportBattleReq(const TFightSoulReportBattleReq& from);

  inline TFightSoulReportBattleReq& operator=(const TFightSoulReportBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFightSoulReportBattleReq& default_instance();

  void Swap(TFightSoulReportBattleReq* other);

  // implements Message ----------------------------------------------

  TFightSoulReportBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFightSoulReportBattleReq& from);
  void MergeFrom(const TFightSoulReportBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BattleEventId = 1;
  inline bool has_battleeventid() const;
  inline void clear_battleeventid();
  static const int kBattleEventIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulReportBattleReq</name>
  	<Function>
  		<name>battleeventid</name>
  		<replaceName>BattleEventId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleeventid</name>
  		<replaceName>BattleEventId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleeventid</name>
  		<replaceName>BattleEventId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleeventid() const;
  inline void set_battleeventid(::google::protobuf::uint32 value);

  // optional .pb.TBattleResult BattleResult = 2;
  inline bool has_battleresult() const;
  inline void clear_battleresult();
  static const int kBattleResultFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulReportBattleReq</name>
  	<Function>
  		<name>battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleresult() const;
  inline ::pb::TBattleResult* mutable_battleresult();
  inline ::pb::TBattleResult* release_battleresult();
  inline void set_allocated_battleresult(::pb::TBattleResult* battleresult);

  // @@protoc_insertion_point(class_scope:pb.TFightSoulReportBattleReq)
 private:
  inline void set_has_battleeventid();
  inline void clear_has_battleeventid();
  inline void set_has_battleresult();
  inline void clear_has_battleresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleResult* battleresult_;
  ::google::protobuf::uint32 battleeventid_;
  friend void  protobuf_AddDesc_net_2fFightSoul_2eproto();
  friend void protobuf_AssignDesc_net_2fFightSoul_2eproto();
  friend void protobuf_ShutdownFile_net_2fFightSoul_2eproto();

  void InitAsDefaultInstance();
  static TFightSoulReportBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFightSoulReportBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FightSoul.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFightSoulReportBattleRsp : public ::google::protobuf::Message {
 public:
  TFightSoulReportBattleRsp();
  virtual ~TFightSoulReportBattleRsp();

  TFightSoulReportBattleRsp(const TFightSoulReportBattleRsp& from);

  inline TFightSoulReportBattleRsp& operator=(const TFightSoulReportBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFightSoulReportBattleRsp& default_instance();

  void Swap(TFightSoulReportBattleRsp* other);

  // implements Message ----------------------------------------------

  TFightSoulReportBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFightSoulReportBattleRsp& from);
  void MergeFrom(const TFightSoulReportBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IsPass = 1;
  inline bool has_ispass() const;
  inline void clear_ispass();
  static const int kIsPassFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulReportBattleRsp</name>
  	<Function>
  		<name>ispass</name>
  		<replaceName>IsPass</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ispass</name>
  		<replaceName>IsPass</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ispass</name>
  		<replaceName>IsPass</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 ispass() const;
  inline void set_ispass(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward RewardArr = 2;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulReportBattleRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TFightSoulReportBattleRsp)
 private:
  inline void set_has_ispass();
  inline void clear_has_ispass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 ispass_;
  friend void  protobuf_AddDesc_net_2fFightSoul_2eproto();
  friend void protobuf_AssignDesc_net_2fFightSoul_2eproto();
  friend void protobuf_ShutdownFile_net_2fFightSoul_2eproto();

  void InitAsDefaultInstance();
  static TFightSoulReportBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFightSoulCombineRecord</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FightSoul.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFightSoulCombineRecord : public ::google::protobuf::Message {
 public:
  TFightSoulCombineRecord();
  virtual ~TFightSoulCombineRecord();

  TFightSoulCombineRecord(const TFightSoulCombineRecord& from);

  inline TFightSoulCombineRecord& operator=(const TFightSoulCombineRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFightSoulCombineRecord& default_instance();

  void Swap(TFightSoulCombineRecord* other);

  // implements Message ----------------------------------------------

  TFightSoulCombineRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFightSoulCombineRecord& from);
  void MergeFrom(const TFightSoulCombineRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Quality = 1;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulCombineRecord</name>
  	<Function>
  		<name>quality</name>
  		<replaceName>Quality</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_quality</name>
  		<replaceName>Quality</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_quality</name>
  		<replaceName>Quality</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // optional uint32 FailNum = 2;
  inline bool has_failnum() const;
  inline void clear_failnum();
  static const int kFailNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulCombineRecord</name>
  	<Function>
  		<name>failnum</name>
  		<replaceName>FailNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_failnum</name>
  		<replaceName>FailNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_failnum</name>
  		<replaceName>FailNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 failnum() const;
  inline void set_failnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TFightSoulCombineRecord)
 private:
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_failnum();
  inline void clear_has_failnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 failnum_;
  friend void  protobuf_AddDesc_net_2fFightSoul_2eproto();
  friend void protobuf_AssignDesc_net_2fFightSoul_2eproto();
  friend void protobuf_ShutdownFile_net_2fFightSoul_2eproto();

  void InitAsDefaultInstance();
  static TFightSoulCombineRecord* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFightSoulGetCombineRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FightSoul.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFightSoulGetCombineRecordRsp : public ::google::protobuf::Message {
 public:
  TFightSoulGetCombineRecordRsp();
  virtual ~TFightSoulGetCombineRecordRsp();

  TFightSoulGetCombineRecordRsp(const TFightSoulGetCombineRecordRsp& from);

  inline TFightSoulGetCombineRecordRsp& operator=(const TFightSoulGetCombineRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFightSoulGetCombineRecordRsp& default_instance();

  void Swap(TFightSoulGetCombineRecordRsp* other);

  // implements Message ----------------------------------------------

  TFightSoulGetCombineRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFightSoulGetCombineRecordRsp& from);
  void MergeFrom(const TFightSoulGetCombineRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TFightSoulCombineRecord RecordArr = 1;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulGetCombineRecordRsp</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TFightSoulCombineRecord& recordarr(int index) const;
  inline ::pb::TFightSoulCombineRecord* mutable_recordarr(int index);
  inline ::pb::TFightSoulCombineRecord* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TFightSoulCombineRecord >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TFightSoulCombineRecord >*
      mutable_recordarr();

  // @@protoc_insertion_point(class_scope:pb.TFightSoulGetCombineRecordRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TFightSoulCombineRecord > recordarr_;
  friend void  protobuf_AddDesc_net_2fFightSoul_2eproto();
  friend void protobuf_AssignDesc_net_2fFightSoul_2eproto();
  friend void protobuf_ShutdownFile_net_2fFightSoul_2eproto();

  void InitAsDefaultInstance();
  static TFightSoulGetCombineRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFightSoulCombineSoulReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FightSoul.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFightSoulCombineSoulReq : public ::google::protobuf::Message {
 public:
  TFightSoulCombineSoulReq();
  virtual ~TFightSoulCombineSoulReq();

  TFightSoulCombineSoulReq(const TFightSoulCombineSoulReq& from);

  inline TFightSoulCombineSoulReq& operator=(const TFightSoulCombineSoulReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFightSoulCombineSoulReq& default_instance();

  void Swap(TFightSoulCombineSoulReq* other);

  // implements Message ----------------------------------------------

  TFightSoulCombineSoulReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFightSoulCombineSoulReq& from);
  void MergeFrom(const TFightSoulCombineSoulReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TSimpleItem ItemArr = 1;
  inline int itemarr_size() const;
  inline void clear_itemarr();
  static const int kItemArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulCombineSoulReq</name>
  	<Function>
  		<name>itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>itemarr_size</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& itemarr(int index) const;
  inline ::pb::TSimpleItem* mutable_itemarr(int index);
  inline ::pb::TSimpleItem* add_itemarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      itemarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_itemarr();

  // @@protoc_insertion_point(class_scope:pb.TFightSoulCombineSoulReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > itemarr_;
  friend void  protobuf_AddDesc_net_2fFightSoul_2eproto();
  friend void protobuf_AssignDesc_net_2fFightSoul_2eproto();
  friend void protobuf_ShutdownFile_net_2fFightSoul_2eproto();

  void InitAsDefaultInstance();
  static TFightSoulCombineSoulReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFightSoulCombineSoulRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FightSoul.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFightSoulCombineSoulRsp : public ::google::protobuf::Message {
 public:
  TFightSoulCombineSoulRsp();
  virtual ~TFightSoulCombineSoulRsp();

  TFightSoulCombineSoulRsp(const TFightSoulCombineSoulRsp& from);

  inline TFightSoulCombineSoulRsp& operator=(const TFightSoulCombineSoulRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFightSoulCombineSoulRsp& default_instance();

  void Swap(TFightSoulCombineSoulRsp* other);

  // implements Message ----------------------------------------------

  TFightSoulCombineSoulRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFightSoulCombineSoulRsp& from);
  void MergeFrom(const TFightSoulCombineSoulRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IsSuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIsSuccessFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulCombineSoulRsp</name>
  	<Function>
  		<name>issuccess</name>
  		<replaceName>IsSuccess</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_issuccess</name>
  		<replaceName>IsSuccess</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_issuccess</name>
  		<replaceName>IsSuccess</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 issuccess() const;
  inline void set_issuccess(::google::protobuf::uint32 value);

  // optional .pb.TSimpleItem SoulItem = 2;
  inline bool has_soulitem() const;
  inline void clear_soulitem();
  static const int kSoulItemFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFightSoulCombineSoulRsp</name>
  	<Function>
  		<name>soulitem</name>
  		<replaceName>SoulItem</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_soulitem</name>
  		<replaceName>SoulItem</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_soulitem</name>
  		<replaceName>SoulItem</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_soulitem</name>
  		<replaceName>SoulItem</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& soulitem() const;
  inline ::pb::TSimpleItem* mutable_soulitem();
  inline ::pb::TSimpleItem* release_soulitem();
  inline void set_allocated_soulitem(::pb::TSimpleItem* soulitem);

  // @@protoc_insertion_point(class_scope:pb.TFightSoulCombineSoulRsp)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_soulitem();
  inline void clear_has_soulitem();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TSimpleItem* soulitem_;
  ::google::protobuf::uint32 issuccess_;
  friend void  protobuf_AddDesc_net_2fFightSoul_2eproto();
  friend void protobuf_AssignDesc_net_2fFightSoul_2eproto();
  friend void protobuf_ShutdownFile_net_2fFightSoul_2eproto();

  void InitAsDefaultInstance();
  static TFightSoulCombineSoulRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TFightSoulHuntInfo

// optional uint32 CurSoulHeroId = 1;
inline bool TFightSoulHuntInfo::has_cursoulheroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFightSoulHuntInfo::set_has_cursoulheroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFightSoulHuntInfo::clear_has_cursoulheroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFightSoulHuntInfo::clear_cursoulheroid() {
  cursoulheroid_ = 0u;
  clear_has_cursoulheroid();
}
inline ::google::protobuf::uint32 TFightSoulHuntInfo::cursoulheroid() const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulHuntInfo.CurSoulHeroId)
  return cursoulheroid_;
}
inline void TFightSoulHuntInfo::set_cursoulheroid(::google::protobuf::uint32 value) {
  set_has_cursoulheroid();
  cursoulheroid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightSoulHuntInfo.CurSoulHeroId)
}

// optional uint32 CurHuntNum = 2;
inline bool TFightSoulHuntInfo::has_curhuntnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFightSoulHuntInfo::set_has_curhuntnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFightSoulHuntInfo::clear_has_curhuntnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFightSoulHuntInfo::clear_curhuntnum() {
  curhuntnum_ = 0u;
  clear_has_curhuntnum();
}
inline ::google::protobuf::uint32 TFightSoulHuntInfo::curhuntnum() const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulHuntInfo.CurHuntNum)
  return curhuntnum_;
}
inline void TFightSoulHuntInfo::set_curhuntnum(::google::protobuf::uint32 value) {
  set_has_curhuntnum();
  curhuntnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightSoulHuntInfo.CurHuntNum)
}

// optional uint32 HuntLimit = 3;
inline bool TFightSoulHuntInfo::has_huntlimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFightSoulHuntInfo::set_has_huntlimit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFightSoulHuntInfo::clear_has_huntlimit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFightSoulHuntInfo::clear_huntlimit() {
  huntlimit_ = 0u;
  clear_has_huntlimit();
}
inline ::google::protobuf::uint32 TFightSoulHuntInfo::huntlimit() const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulHuntInfo.HuntLimit)
  return huntlimit_;
}
inline void TFightSoulHuntInfo::set_huntlimit(::google::protobuf::uint32 value) {
  set_has_huntlimit();
  huntlimit_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightSoulHuntInfo.HuntLimit)
}

// -------------------------------------------------------------------

// TFightSoulGetHuntInfoRsp

// optional .pb.TFightSoulHuntInfo HuntInfo = 1;
inline bool TFightSoulGetHuntInfoRsp::has_huntinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFightSoulGetHuntInfoRsp::set_has_huntinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFightSoulGetHuntInfoRsp::clear_has_huntinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFightSoulGetHuntInfoRsp::clear_huntinfo() {
  if (huntinfo_ != NULL) huntinfo_->::pb::TFightSoulHuntInfo::Clear();
  clear_has_huntinfo();
}
inline const ::pb::TFightSoulHuntInfo& TFightSoulGetHuntInfoRsp::huntinfo() const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulGetHuntInfoRsp.HuntInfo)
  return huntinfo_ != NULL ? *huntinfo_ : *default_instance_->huntinfo_;
}
inline ::pb::TFightSoulHuntInfo* TFightSoulGetHuntInfoRsp::mutable_huntinfo() {
  set_has_huntinfo();
  if (huntinfo_ == NULL) huntinfo_ = new ::pb::TFightSoulHuntInfo;
  // @@protoc_insertion_point(field_mutable:pb.TFightSoulGetHuntInfoRsp.HuntInfo)
  return huntinfo_;
}
inline ::pb::TFightSoulHuntInfo* TFightSoulGetHuntInfoRsp::release_huntinfo() {
  clear_has_huntinfo();
  ::pb::TFightSoulHuntInfo* temp = huntinfo_;
  huntinfo_ = NULL;
  return temp;
}
inline void TFightSoulGetHuntInfoRsp::set_allocated_huntinfo(::pb::TFightSoulHuntInfo* huntinfo) {
  delete huntinfo_;
  huntinfo_ = huntinfo;
  if (huntinfo) {
    set_has_huntinfo();
  } else {
    clear_has_huntinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFightSoulGetHuntInfoRsp.HuntInfo)
}

// optional uint32 BattleEventId = 2;
inline bool TFightSoulGetHuntInfoRsp::has_battleeventid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFightSoulGetHuntInfoRsp::set_has_battleeventid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFightSoulGetHuntInfoRsp::clear_has_battleeventid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFightSoulGetHuntInfoRsp::clear_battleeventid() {
  battleeventid_ = 0u;
  clear_has_battleeventid();
}
inline ::google::protobuf::uint32 TFightSoulGetHuntInfoRsp::battleeventid() const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulGetHuntInfoRsp.BattleEventId)
  return battleeventid_;
}
inline void TFightSoulGetHuntInfoRsp::set_battleeventid(::google::protobuf::uint32 value) {
  set_has_battleeventid();
  battleeventid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightSoulGetHuntInfoRsp.BattleEventId)
}

// -------------------------------------------------------------------

// TFightSoulHuntSoulRsp

// repeated .pb.TCommonReward SoulArr = 1;
inline int TFightSoulHuntSoulRsp::soularr_size() const {
  return soularr_.size();
}
inline void TFightSoulHuntSoulRsp::clear_soularr() {
  soularr_.Clear();
}
inline const ::pb::TCommonReward& TFightSoulHuntSoulRsp::soularr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulHuntSoulRsp.SoulArr)
  return soularr_.Get(index);
}
inline ::pb::TCommonReward* TFightSoulHuntSoulRsp::mutable_soularr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TFightSoulHuntSoulRsp.SoulArr)
  return soularr_.Mutable(index);
}
inline ::pb::TCommonReward* TFightSoulHuntSoulRsp::add_soularr() {
  // @@protoc_insertion_point(field_add:pb.TFightSoulHuntSoulRsp.SoulArr)
  return soularr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TFightSoulHuntSoulRsp::soularr() const {
  // @@protoc_insertion_point(field_list:pb.TFightSoulHuntSoulRsp.SoulArr)
  return soularr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TFightSoulHuntSoulRsp::mutable_soularr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFightSoulHuntSoulRsp.SoulArr)
  return &soularr_;
}

// repeated .pb.TCommonReward ExtraArr = 2;
inline int TFightSoulHuntSoulRsp::extraarr_size() const {
  return extraarr_.size();
}
inline void TFightSoulHuntSoulRsp::clear_extraarr() {
  extraarr_.Clear();
}
inline const ::pb::TCommonReward& TFightSoulHuntSoulRsp::extraarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulHuntSoulRsp.ExtraArr)
  return extraarr_.Get(index);
}
inline ::pb::TCommonReward* TFightSoulHuntSoulRsp::mutable_extraarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TFightSoulHuntSoulRsp.ExtraArr)
  return extraarr_.Mutable(index);
}
inline ::pb::TCommonReward* TFightSoulHuntSoulRsp::add_extraarr() {
  // @@protoc_insertion_point(field_add:pb.TFightSoulHuntSoulRsp.ExtraArr)
  return extraarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TFightSoulHuntSoulRsp::extraarr() const {
  // @@protoc_insertion_point(field_list:pb.TFightSoulHuntSoulRsp.ExtraArr)
  return extraarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TFightSoulHuntSoulRsp::mutable_extraarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFightSoulHuntSoulRsp.ExtraArr)
  return &extraarr_;
}

// optional uint32 EventId = 3;
inline bool TFightSoulHuntSoulRsp::has_eventid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFightSoulHuntSoulRsp::set_has_eventid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFightSoulHuntSoulRsp::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFightSoulHuntSoulRsp::clear_eventid() {
  eventid_ = 0u;
  clear_has_eventid();
}
inline ::google::protobuf::uint32 TFightSoulHuntSoulRsp::eventid() const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulHuntSoulRsp.EventId)
  return eventid_;
}
inline void TFightSoulHuntSoulRsp::set_eventid(::google::protobuf::uint32 value) {
  set_has_eventid();
  eventid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightSoulHuntSoulRsp.EventId)
}

// optional .pb.TFightSoulHuntInfo HuntInfo = 4;
inline bool TFightSoulHuntSoulRsp::has_huntinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TFightSoulHuntSoulRsp::set_has_huntinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TFightSoulHuntSoulRsp::clear_has_huntinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TFightSoulHuntSoulRsp::clear_huntinfo() {
  if (huntinfo_ != NULL) huntinfo_->::pb::TFightSoulHuntInfo::Clear();
  clear_has_huntinfo();
}
inline const ::pb::TFightSoulHuntInfo& TFightSoulHuntSoulRsp::huntinfo() const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulHuntSoulRsp.HuntInfo)
  return huntinfo_ != NULL ? *huntinfo_ : *default_instance_->huntinfo_;
}
inline ::pb::TFightSoulHuntInfo* TFightSoulHuntSoulRsp::mutable_huntinfo() {
  set_has_huntinfo();
  if (huntinfo_ == NULL) huntinfo_ = new ::pb::TFightSoulHuntInfo;
  // @@protoc_insertion_point(field_mutable:pb.TFightSoulHuntSoulRsp.HuntInfo)
  return huntinfo_;
}
inline ::pb::TFightSoulHuntInfo* TFightSoulHuntSoulRsp::release_huntinfo() {
  clear_has_huntinfo();
  ::pb::TFightSoulHuntInfo* temp = huntinfo_;
  huntinfo_ = NULL;
  return temp;
}
inline void TFightSoulHuntSoulRsp::set_allocated_huntinfo(::pb::TFightSoulHuntInfo* huntinfo) {
  delete huntinfo_;
  huntinfo_ = huntinfo;
  if (huntinfo) {
    set_has_huntinfo();
  } else {
    clear_has_huntinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFightSoulHuntSoulRsp.HuntInfo)
}

// -------------------------------------------------------------------

// TFightSoulGiveUpBattleReq

// optional uint32 BattleEventId = 1;
inline bool TFightSoulGiveUpBattleReq::has_battleeventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFightSoulGiveUpBattleReq::set_has_battleeventid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFightSoulGiveUpBattleReq::clear_has_battleeventid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFightSoulGiveUpBattleReq::clear_battleeventid() {
  battleeventid_ = 0u;
  clear_has_battleeventid();
}
inline ::google::protobuf::uint32 TFightSoulGiveUpBattleReq::battleeventid() const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulGiveUpBattleReq.BattleEventId)
  return battleeventid_;
}
inline void TFightSoulGiveUpBattleReq::set_battleeventid(::google::protobuf::uint32 value) {
  set_has_battleeventid();
  battleeventid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightSoulGiveUpBattleReq.BattleEventId)
}

// -------------------------------------------------------------------

// TFightSoulReportBattleReq

// optional uint32 BattleEventId = 1;
inline bool TFightSoulReportBattleReq::has_battleeventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFightSoulReportBattleReq::set_has_battleeventid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFightSoulReportBattleReq::clear_has_battleeventid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFightSoulReportBattleReq::clear_battleeventid() {
  battleeventid_ = 0u;
  clear_has_battleeventid();
}
inline ::google::protobuf::uint32 TFightSoulReportBattleReq::battleeventid() const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulReportBattleReq.BattleEventId)
  return battleeventid_;
}
inline void TFightSoulReportBattleReq::set_battleeventid(::google::protobuf::uint32 value) {
  set_has_battleeventid();
  battleeventid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightSoulReportBattleReq.BattleEventId)
}

// optional .pb.TBattleResult BattleResult = 2;
inline bool TFightSoulReportBattleReq::has_battleresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFightSoulReportBattleReq::set_has_battleresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFightSoulReportBattleReq::clear_has_battleresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFightSoulReportBattleReq::clear_battleresult() {
  if (battleresult_ != NULL) battleresult_->::pb::TBattleResult::Clear();
  clear_has_battleresult();
}
inline const ::pb::TBattleResult& TFightSoulReportBattleReq::battleresult() const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulReportBattleReq.BattleResult)
  return battleresult_ != NULL ? *battleresult_ : *default_instance_->battleresult_;
}
inline ::pb::TBattleResult* TFightSoulReportBattleReq::mutable_battleresult() {
  set_has_battleresult();
  if (battleresult_ == NULL) battleresult_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TFightSoulReportBattleReq.BattleResult)
  return battleresult_;
}
inline ::pb::TBattleResult* TFightSoulReportBattleReq::release_battleresult() {
  clear_has_battleresult();
  ::pb::TBattleResult* temp = battleresult_;
  battleresult_ = NULL;
  return temp;
}
inline void TFightSoulReportBattleReq::set_allocated_battleresult(::pb::TBattleResult* battleresult) {
  delete battleresult_;
  battleresult_ = battleresult;
  if (battleresult) {
    set_has_battleresult();
  } else {
    clear_has_battleresult();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFightSoulReportBattleReq.BattleResult)
}

// -------------------------------------------------------------------

// TFightSoulReportBattleRsp

// optional uint32 IsPass = 1;
inline bool TFightSoulReportBattleRsp::has_ispass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFightSoulReportBattleRsp::set_has_ispass() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFightSoulReportBattleRsp::clear_has_ispass() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFightSoulReportBattleRsp::clear_ispass() {
  ispass_ = 0u;
  clear_has_ispass();
}
inline ::google::protobuf::uint32 TFightSoulReportBattleRsp::ispass() const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulReportBattleRsp.IsPass)
  return ispass_;
}
inline void TFightSoulReportBattleRsp::set_ispass(::google::protobuf::uint32 value) {
  set_has_ispass();
  ispass_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightSoulReportBattleRsp.IsPass)
}

// repeated .pb.TCommonReward RewardArr = 2;
inline int TFightSoulReportBattleRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TFightSoulReportBattleRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TFightSoulReportBattleRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulReportBattleRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TFightSoulReportBattleRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TFightSoulReportBattleRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TFightSoulReportBattleRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TFightSoulReportBattleRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TFightSoulReportBattleRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TFightSoulReportBattleRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TFightSoulReportBattleRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFightSoulReportBattleRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TFightSoulCombineRecord

// optional uint32 Quality = 1;
inline bool TFightSoulCombineRecord::has_quality() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFightSoulCombineRecord::set_has_quality() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFightSoulCombineRecord::clear_has_quality() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFightSoulCombineRecord::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 TFightSoulCombineRecord::quality() const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulCombineRecord.Quality)
  return quality_;
}
inline void TFightSoulCombineRecord::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightSoulCombineRecord.Quality)
}

// optional uint32 FailNum = 2;
inline bool TFightSoulCombineRecord::has_failnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFightSoulCombineRecord::set_has_failnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFightSoulCombineRecord::clear_has_failnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFightSoulCombineRecord::clear_failnum() {
  failnum_ = 0u;
  clear_has_failnum();
}
inline ::google::protobuf::uint32 TFightSoulCombineRecord::failnum() const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulCombineRecord.FailNum)
  return failnum_;
}
inline void TFightSoulCombineRecord::set_failnum(::google::protobuf::uint32 value) {
  set_has_failnum();
  failnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightSoulCombineRecord.FailNum)
}

// -------------------------------------------------------------------

// TFightSoulGetCombineRecordRsp

// repeated .pb.TFightSoulCombineRecord RecordArr = 1;
inline int TFightSoulGetCombineRecordRsp::recordarr_size() const {
  return recordarr_.size();
}
inline void TFightSoulGetCombineRecordRsp::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TFightSoulCombineRecord& TFightSoulGetCombineRecordRsp::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulGetCombineRecordRsp.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TFightSoulCombineRecord* TFightSoulGetCombineRecordRsp::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TFightSoulGetCombineRecordRsp.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TFightSoulCombineRecord* TFightSoulGetCombineRecordRsp::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TFightSoulGetCombineRecordRsp.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TFightSoulCombineRecord >&
TFightSoulGetCombineRecordRsp::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TFightSoulGetCombineRecordRsp.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TFightSoulCombineRecord >*
TFightSoulGetCombineRecordRsp::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFightSoulGetCombineRecordRsp.RecordArr)
  return &recordarr_;
}

// -------------------------------------------------------------------

// TFightSoulCombineSoulReq

// repeated .pb.TSimpleItem ItemArr = 1;
inline int TFightSoulCombineSoulReq::itemarr_size() const {
  return itemarr_.size();
}
inline void TFightSoulCombineSoulReq::clear_itemarr() {
  itemarr_.Clear();
}
inline const ::pb::TSimpleItem& TFightSoulCombineSoulReq::itemarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulCombineSoulReq.ItemArr)
  return itemarr_.Get(index);
}
inline ::pb::TSimpleItem* TFightSoulCombineSoulReq::mutable_itemarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TFightSoulCombineSoulReq.ItemArr)
  return itemarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TFightSoulCombineSoulReq::add_itemarr() {
  // @@protoc_insertion_point(field_add:pb.TFightSoulCombineSoulReq.ItemArr)
  return itemarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TFightSoulCombineSoulReq::itemarr() const {
  // @@protoc_insertion_point(field_list:pb.TFightSoulCombineSoulReq.ItemArr)
  return itemarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TFightSoulCombineSoulReq::mutable_itemarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFightSoulCombineSoulReq.ItemArr)
  return &itemarr_;
}

// -------------------------------------------------------------------

// TFightSoulCombineSoulRsp

// optional uint32 IsSuccess = 1;
inline bool TFightSoulCombineSoulRsp::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFightSoulCombineSoulRsp::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFightSoulCombineSoulRsp::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFightSoulCombineSoulRsp::clear_issuccess() {
  issuccess_ = 0u;
  clear_has_issuccess();
}
inline ::google::protobuf::uint32 TFightSoulCombineSoulRsp::issuccess() const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulCombineSoulRsp.IsSuccess)
  return issuccess_;
}
inline void TFightSoulCombineSoulRsp::set_issuccess(::google::protobuf::uint32 value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightSoulCombineSoulRsp.IsSuccess)
}

// optional .pb.TSimpleItem SoulItem = 2;
inline bool TFightSoulCombineSoulRsp::has_soulitem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFightSoulCombineSoulRsp::set_has_soulitem() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFightSoulCombineSoulRsp::clear_has_soulitem() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFightSoulCombineSoulRsp::clear_soulitem() {
  if (soulitem_ != NULL) soulitem_->::pb::TSimpleItem::Clear();
  clear_has_soulitem();
}
inline const ::pb::TSimpleItem& TFightSoulCombineSoulRsp::soulitem() const {
  // @@protoc_insertion_point(field_get:pb.TFightSoulCombineSoulRsp.SoulItem)
  return soulitem_ != NULL ? *soulitem_ : *default_instance_->soulitem_;
}
inline ::pb::TSimpleItem* TFightSoulCombineSoulRsp::mutable_soulitem() {
  set_has_soulitem();
  if (soulitem_ == NULL) soulitem_ = new ::pb::TSimpleItem;
  // @@protoc_insertion_point(field_mutable:pb.TFightSoulCombineSoulRsp.SoulItem)
  return soulitem_;
}
inline ::pb::TSimpleItem* TFightSoulCombineSoulRsp::release_soulitem() {
  clear_has_soulitem();
  ::pb::TSimpleItem* temp = soulitem_;
  soulitem_ = NULL;
  return temp;
}
inline void TFightSoulCombineSoulRsp::set_allocated_soulitem(::pb::TSimpleItem* soulitem) {
  delete soulitem_;
  soulitem_ = soulitem;
  if (soulitem) {
    set_has_soulitem();
  } else {
    clear_has_soulitem();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFightSoulCombineSoulRsp.SoulItem)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fFightSoul_2eproto__INCLUDED
