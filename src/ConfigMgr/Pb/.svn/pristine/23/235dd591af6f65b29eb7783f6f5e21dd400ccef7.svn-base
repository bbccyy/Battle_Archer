// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SceneConfArcher.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/SceneConfArcher.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* ArcherScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArcherScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArcherMonsterBronPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArcherMonsterBronPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridBlock_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EGridType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fSceneConfArcher_2eproto() {
  protobuf_AddDesc_module_2fSceneConfArcher_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/SceneConfArcher.proto");
  GOOGLE_CHECK(file != NULL);
  ArcherScene_descriptor_ = file->message_type(0);
  static const int ArcherScene_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArcherScene, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArcherScene, scenetilewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArcherScene, scenetileheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArcherScene, tilesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArcherScene, centerwspos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArcherScene, sceneforward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArcherScene, gridblockarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArcherScene, monsterbronpointarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArcherScene, playerbrontileindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArcherScene, missioncompletetileindexarr_),
  };
  ArcherScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArcherScene_descriptor_,
      ArcherScene::default_instance_,
      ArcherScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArcherScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArcherScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArcherScene));
  ArcherMonsterBronPoint_descriptor_ = file->message_type(1);
  static const int ArcherMonsterBronPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArcherMonsterBronPoint, brontileindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArcherMonsterBronPoint, refreshid_),
  };
  ArcherMonsterBronPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArcherMonsterBronPoint_descriptor_,
      ArcherMonsterBronPoint::default_instance_,
      ArcherMonsterBronPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArcherMonsterBronPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArcherMonsterBronPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArcherMonsterBronPoint));
  GridBlock_descriptor_ = file->message_type(2);
  static const int GridBlock_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridBlock, gridtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridBlock, gridindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridBlock, configid_),
  };
  GridBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridBlock_descriptor_,
      GridBlock::default_instance_,
      GridBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridBlock));
  EGridType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fSceneConfArcher_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArcherScene_descriptor_, &ArcherScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArcherMonsterBronPoint_descriptor_, &ArcherMonsterBronPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridBlock_descriptor_, &GridBlock::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fSceneConfArcher_2eproto() {
  delete ArcherScene::default_instance_;
  delete ArcherScene_reflection_;
  delete ArcherMonsterBronPoint::default_instance_;
  delete ArcherMonsterBronPoint_reflection_;
  delete GridBlock::default_instance_;
  delete GridBlock_reflection_;
}

void protobuf_AddDesc_module_2fSceneConfArcher_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::pb::protobuf_AddDesc_module_2fSceneElementDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034module/SceneConfArcher.proto\022\002pb\032\021modu"
    "le/Util.proto\032\037module/SceneElementDefine"
    ".proto\"\312\002\n\013ArcherScene\022\017\n\007SceneId\030\001 \002(\r\022"
    "\026\n\016SceneTileWidth\030\002 \002(\r\022\027\n\017SceneTileHeig"
    "ht\030\003 \002(\r\022\020\n\010TileSize\030\004 \002(\r\022\"\n\013CenterWSPo"
    "s\030\005 \002(\0132\r.pb.PbVector3\022#\n\014SceneForward\030\006"
    " \002(\0132\r.pb.PbVector3\022#\n\014GridBlockArr\030\007 \003("
    "\0132\r.pb.GridBlock\0227\n\023MonsterBronPointArr\030"
    "\010 \003(\0132\032.pb.ArcherMonsterBronPoint\022\033\n\023Pla"
    "yerBronTileIndex\030\t \002(\r\022#\n\033MissionComplet"
    "eTileIndexArr\030\n \003(\r\"B\n\026ArcherMonsterBron"
    "Point\022\025\n\rBronTileIndex\030\001 \002(\r\022\021\n\tRefreshI"
    "d\030\002 \002(\r\"Q\n\tGridBlock\022\037\n\010GridType\030\001 \002(\0162\r"
    ".pb.EGridType\022\021\n\tGridIndex\030\002 \002(\r\022\020\n\010Conf"
    "igId\030\003 \002(\r*A\n\tEGridType\022\020\n\014Obstacle_All\020"
    "\001\022\030\n\024Obstacle_Ground_Only\020\002\022\010\n\004Trap\020\003", 637);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/SceneConfArcher.proto", &protobuf_RegisterTypes);
  ArcherScene::default_instance_ = new ArcherScene();
  ArcherMonsterBronPoint::default_instance_ = new ArcherMonsterBronPoint();
  GridBlock::default_instance_ = new GridBlock();
  ArcherScene::default_instance_->InitAsDefaultInstance();
  ArcherMonsterBronPoint::default_instance_->InitAsDefaultInstance();
  GridBlock::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fSceneConfArcher_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fSceneConfArcher_2eproto {
  StaticDescriptorInitializer_module_2fSceneConfArcher_2eproto() {
    protobuf_AddDesc_module_2fSceneConfArcher_2eproto();
  }
} static_descriptor_initializer_module_2fSceneConfArcher_2eproto_;
const ::google::protobuf::EnumDescriptor* EGridType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGridType_descriptor_;
}
bool EGridType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ArcherScene::kSceneIdFieldNumber;
const int ArcherScene::kSceneTileWidthFieldNumber;
const int ArcherScene::kSceneTileHeightFieldNumber;
const int ArcherScene::kTileSizeFieldNumber;
const int ArcherScene::kCenterWSPosFieldNumber;
const int ArcherScene::kSceneForwardFieldNumber;
const int ArcherScene::kGridBlockArrFieldNumber;
const int ArcherScene::kMonsterBronPointArrFieldNumber;
const int ArcherScene::kPlayerBronTileIndexFieldNumber;
const int ArcherScene::kMissionCompleteTileIndexArrFieldNumber;
#endif  // !_MSC_VER

ArcherScene::ArcherScene()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ArcherScene)
}

void ArcherScene::InitAsDefaultInstance() {
  centerwspos_ = const_cast< ::pb::PbVector3*>(&::pb::PbVector3::default_instance());
  sceneforward_ = const_cast< ::pb::PbVector3*>(&::pb::PbVector3::default_instance());
}

ArcherScene::ArcherScene(const ArcherScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.ArcherScene)
}

void ArcherScene::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  scenetilewidth_ = 0u;
  scenetileheight_ = 0u;
  tilesize_ = 0u;
  centerwspos_ = NULL;
  sceneforward_ = NULL;
  playerbrontileindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArcherScene::~ArcherScene() {
  // @@protoc_insertion_point(destructor:pb.ArcherScene)
  SharedDtor();
}

void ArcherScene::SharedDtor() {
  if (this != default_instance_) {
    delete centerwspos_;
    delete sceneforward_;
  }
}

void ArcherScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArcherScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArcherScene_descriptor_;
}

const ArcherScene& ArcherScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConfArcher_2eproto();
  return *default_instance_;
}

ArcherScene* ArcherScene::default_instance_ = NULL;

ArcherScene* ArcherScene::New() const {
  return new ArcherScene;
}

void ArcherScene::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ArcherScene*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(sceneid_, tilesize_);
    if (has_centerwspos()) {
      if (centerwspos_ != NULL) centerwspos_->::pb::PbVector3::Clear();
    }
    if (has_sceneforward()) {
      if (sceneforward_ != NULL) sceneforward_->::pb::PbVector3::Clear();
    }
  }
  playerbrontileindex_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  gridblockarr_.Clear();
  monsterbronpointarr_.Clear();
  missioncompletetileindexarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArcherScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ArcherScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 SceneId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SceneTileWidth;
        break;
      }

      // required uint32 SceneTileWidth = 2;
      case 2: {
        if (tag == 16) {
         parse_SceneTileWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetilewidth_)));
          set_has_scenetilewidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SceneTileHeight;
        break;
      }

      // required uint32 SceneTileHeight = 3;
      case 3: {
        if (tag == 24) {
         parse_SceneTileHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetileheight_)));
          set_has_scenetileheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TileSize;
        break;
      }

      // required uint32 TileSize = 4;
      case 4: {
        if (tag == 32) {
         parse_TileSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tilesize_)));
          set_has_tilesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_CenterWSPos;
        break;
      }

      // required .pb.PbVector3 CenterWSPos = 5;
      case 5: {
        if (tag == 42) {
         parse_CenterWSPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centerwspos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SceneForward;
        break;
      }

      // required .pb.PbVector3 SceneForward = 6;
      case 6: {
        if (tag == 50) {
         parse_SceneForward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sceneforward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_GridBlockArr;
        break;
      }

      // repeated .pb.GridBlock GridBlockArr = 7;
      case 7: {
        if (tag == 58) {
         parse_GridBlockArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gridblockarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_GridBlockArr;
        if (input->ExpectTag(66)) goto parse_MonsterBronPointArr;
        break;
      }

      // repeated .pb.ArcherMonsterBronPoint MonsterBronPointArr = 8;
      case 8: {
        if (tag == 66) {
         parse_MonsterBronPointArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterbronpointarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_MonsterBronPointArr;
        if (input->ExpectTag(72)) goto parse_PlayerBronTileIndex;
        break;
      }

      // required uint32 PlayerBronTileIndex = 9;
      case 9: {
        if (tag == 72) {
         parse_PlayerBronTileIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerbrontileindex_)));
          set_has_playerbrontileindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_MissionCompleteTileIndexArr;
        break;
      }

      // repeated uint32 MissionCompleteTileIndexArr = 10;
      case 10: {
        if (tag == 80) {
         parse_MissionCompleteTileIndexArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_missioncompletetileindexarr())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_missioncompletetileindexarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_MissionCompleteTileIndexArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ArcherScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ArcherScene)
  return false;
#undef DO_
}

void ArcherScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ArcherScene)
  // required uint32 SceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }

  // required uint32 SceneTileWidth = 2;
  if (has_scenetilewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scenetilewidth(), output);
  }

  // required uint32 SceneTileHeight = 3;
  if (has_scenetileheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scenetileheight(), output);
  }

  // required uint32 TileSize = 4;
  if (has_tilesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tilesize(), output);
  }

  // required .pb.PbVector3 CenterWSPos = 5;
  if (has_centerwspos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->centerwspos(), output);
  }

  // required .pb.PbVector3 SceneForward = 6;
  if (has_sceneforward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sceneforward(), output);
  }

  // repeated .pb.GridBlock GridBlockArr = 7;
  for (int i = 0; i < this->gridblockarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->gridblockarr(i), output);
  }

  // repeated .pb.ArcherMonsterBronPoint MonsterBronPointArr = 8;
  for (int i = 0; i < this->monsterbronpointarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->monsterbronpointarr(i), output);
  }

  // required uint32 PlayerBronTileIndex = 9;
  if (has_playerbrontileindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->playerbrontileindex(), output);
  }

  // repeated uint32 MissionCompleteTileIndexArr = 10;
  for (int i = 0; i < this->missioncompletetileindexarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->missioncompletetileindexarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ArcherScene)
}

::google::protobuf::uint8* ArcherScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ArcherScene)
  // required uint32 SceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }

  // required uint32 SceneTileWidth = 2;
  if (has_scenetilewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scenetilewidth(), target);
  }

  // required uint32 SceneTileHeight = 3;
  if (has_scenetileheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scenetileheight(), target);
  }

  // required uint32 TileSize = 4;
  if (has_tilesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tilesize(), target);
  }

  // required .pb.PbVector3 CenterWSPos = 5;
  if (has_centerwspos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->centerwspos(), target);
  }

  // required .pb.PbVector3 SceneForward = 6;
  if (has_sceneforward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sceneforward(), target);
  }

  // repeated .pb.GridBlock GridBlockArr = 7;
  for (int i = 0; i < this->gridblockarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->gridblockarr(i), target);
  }

  // repeated .pb.ArcherMonsterBronPoint MonsterBronPointArr = 8;
  for (int i = 0; i < this->monsterbronpointarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->monsterbronpointarr(i), target);
  }

  // required uint32 PlayerBronTileIndex = 9;
  if (has_playerbrontileindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->playerbrontileindex(), target);
  }

  // repeated uint32 MissionCompleteTileIndexArr = 10;
  for (int i = 0; i < this->missioncompletetileindexarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->missioncompletetileindexarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ArcherScene)
  return target;
}

int ArcherScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 SceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // required uint32 SceneTileWidth = 2;
    if (has_scenetilewidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenetilewidth());
    }

    // required uint32 SceneTileHeight = 3;
    if (has_scenetileheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenetileheight());
    }

    // required uint32 TileSize = 4;
    if (has_tilesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tilesize());
    }

    // required .pb.PbVector3 CenterWSPos = 5;
    if (has_centerwspos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->centerwspos());
    }

    // required .pb.PbVector3 SceneForward = 6;
    if (has_sceneforward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sceneforward());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 PlayerBronTileIndex = 9;
    if (has_playerbrontileindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerbrontileindex());
    }

  }
  // repeated .pb.GridBlock GridBlockArr = 7;
  total_size += 1 * this->gridblockarr_size();
  for (int i = 0; i < this->gridblockarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gridblockarr(i));
  }

  // repeated .pb.ArcherMonsterBronPoint MonsterBronPointArr = 8;
  total_size += 1 * this->monsterbronpointarr_size();
  for (int i = 0; i < this->monsterbronpointarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterbronpointarr(i));
  }

  // repeated uint32 MissionCompleteTileIndexArr = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->missioncompletetileindexarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->missioncompletetileindexarr(i));
    }
    total_size += 1 * this->missioncompletetileindexarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArcherScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArcherScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArcherScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArcherScene::MergeFrom(const ArcherScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  gridblockarr_.MergeFrom(from.gridblockarr_);
  monsterbronpointarr_.MergeFrom(from.monsterbronpointarr_);
  missioncompletetileindexarr_.MergeFrom(from.missioncompletetileindexarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenetilewidth()) {
      set_scenetilewidth(from.scenetilewidth());
    }
    if (from.has_scenetileheight()) {
      set_scenetileheight(from.scenetileheight());
    }
    if (from.has_tilesize()) {
      set_tilesize(from.tilesize());
    }
    if (from.has_centerwspos()) {
      mutable_centerwspos()->::pb::PbVector3::MergeFrom(from.centerwspos());
    }
    if (from.has_sceneforward()) {
      mutable_sceneforward()->::pb::PbVector3::MergeFrom(from.sceneforward());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playerbrontileindex()) {
      set_playerbrontileindex(from.playerbrontileindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArcherScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArcherScene::CopyFrom(const ArcherScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArcherScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000013f) != 0x0000013f) return false;

  if (has_centerwspos()) {
    if (!this->centerwspos().IsInitialized()) return false;
  }
  if (has_sceneforward()) {
    if (!this->sceneforward().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->gridblockarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->monsterbronpointarr())) return false;
  return true;
}

void ArcherScene::Swap(ArcherScene* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenetilewidth_, other->scenetilewidth_);
    std::swap(scenetileheight_, other->scenetileheight_);
    std::swap(tilesize_, other->tilesize_);
    std::swap(centerwspos_, other->centerwspos_);
    std::swap(sceneforward_, other->sceneforward_);
    gridblockarr_.Swap(&other->gridblockarr_);
    monsterbronpointarr_.Swap(&other->monsterbronpointarr_);
    std::swap(playerbrontileindex_, other->playerbrontileindex_);
    missioncompletetileindexarr_.Swap(&other->missioncompletetileindexarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArcherScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArcherScene_descriptor_;
  metadata.reflection = ArcherScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArcherMonsterBronPoint::kBronTileIndexFieldNumber;
const int ArcherMonsterBronPoint::kRefreshIdFieldNumber;
#endif  // !_MSC_VER

ArcherMonsterBronPoint::ArcherMonsterBronPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ArcherMonsterBronPoint)
}

void ArcherMonsterBronPoint::InitAsDefaultInstance() {
}

ArcherMonsterBronPoint::ArcherMonsterBronPoint(const ArcherMonsterBronPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.ArcherMonsterBronPoint)
}

void ArcherMonsterBronPoint::SharedCtor() {
  _cached_size_ = 0;
  brontileindex_ = 0u;
  refreshid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArcherMonsterBronPoint::~ArcherMonsterBronPoint() {
  // @@protoc_insertion_point(destructor:pb.ArcherMonsterBronPoint)
  SharedDtor();
}

void ArcherMonsterBronPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArcherMonsterBronPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArcherMonsterBronPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArcherMonsterBronPoint_descriptor_;
}

const ArcherMonsterBronPoint& ArcherMonsterBronPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConfArcher_2eproto();
  return *default_instance_;
}

ArcherMonsterBronPoint* ArcherMonsterBronPoint::default_instance_ = NULL;

ArcherMonsterBronPoint* ArcherMonsterBronPoint::New() const {
  return new ArcherMonsterBronPoint;
}

void ArcherMonsterBronPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ArcherMonsterBronPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(brontileindex_, refreshid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArcherMonsterBronPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ArcherMonsterBronPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 BronTileIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brontileindex_)));
          set_has_brontileindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RefreshId;
        break;
      }

      // required uint32 RefreshId = 2;
      case 2: {
        if (tag == 16) {
         parse_RefreshId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshid_)));
          set_has_refreshid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ArcherMonsterBronPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ArcherMonsterBronPoint)
  return false;
#undef DO_
}

void ArcherMonsterBronPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ArcherMonsterBronPoint)
  // required uint32 BronTileIndex = 1;
  if (has_brontileindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->brontileindex(), output);
  }

  // required uint32 RefreshId = 2;
  if (has_refreshid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->refreshid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ArcherMonsterBronPoint)
}

::google::protobuf::uint8* ArcherMonsterBronPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ArcherMonsterBronPoint)
  // required uint32 BronTileIndex = 1;
  if (has_brontileindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->brontileindex(), target);
  }

  // required uint32 RefreshId = 2;
  if (has_refreshid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->refreshid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ArcherMonsterBronPoint)
  return target;
}

int ArcherMonsterBronPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 BronTileIndex = 1;
    if (has_brontileindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->brontileindex());
    }

    // required uint32 RefreshId = 2;
    if (has_refreshid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArcherMonsterBronPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArcherMonsterBronPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArcherMonsterBronPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArcherMonsterBronPoint::MergeFrom(const ArcherMonsterBronPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brontileindex()) {
      set_brontileindex(from.brontileindex());
    }
    if (from.has_refreshid()) {
      set_refreshid(from.refreshid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArcherMonsterBronPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArcherMonsterBronPoint::CopyFrom(const ArcherMonsterBronPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArcherMonsterBronPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ArcherMonsterBronPoint::Swap(ArcherMonsterBronPoint* other) {
  if (other != this) {
    std::swap(brontileindex_, other->brontileindex_);
    std::swap(refreshid_, other->refreshid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArcherMonsterBronPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArcherMonsterBronPoint_descriptor_;
  metadata.reflection = ArcherMonsterBronPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GridBlock::kGridTypeFieldNumber;
const int GridBlock::kGridIndexFieldNumber;
const int GridBlock::kConfigIdFieldNumber;
#endif  // !_MSC_VER

GridBlock::GridBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.GridBlock)
}

void GridBlock::InitAsDefaultInstance() {
}

GridBlock::GridBlock(const GridBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.GridBlock)
}

void GridBlock::SharedCtor() {
  _cached_size_ = 0;
  gridtype_ = 1;
  gridindex_ = 0u;
  configid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridBlock::~GridBlock() {
  // @@protoc_insertion_point(destructor:pb.GridBlock)
  SharedDtor();
}

void GridBlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GridBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridBlock_descriptor_;
}

const GridBlock& GridBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConfArcher_2eproto();
  return *default_instance_;
}

GridBlock* GridBlock::default_instance_ = NULL;

GridBlock* GridBlock::New() const {
  return new GridBlock;
}

void GridBlock::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GridBlock*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gridindex_, configid_);
    gridtype_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.GridBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.EGridType GridType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EGridType_IsValid(value)) {
            set_gridtype(static_cast< ::pb::EGridType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GridIndex;
        break;
      }

      // required uint32 GridIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_GridIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridindex_)));
          set_has_gridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ConfigId;
        break;
      }

      // required uint32 ConfigId = 3;
      case 3: {
        if (tag == 24) {
         parse_ConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.GridBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.GridBlock)
  return false;
#undef DO_
}

void GridBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.GridBlock)
  // required .pb.EGridType GridType = 1;
  if (has_gridtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gridtype(), output);
  }

  // required uint32 GridIndex = 2;
  if (has_gridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gridindex(), output);
  }

  // required uint32 ConfigId = 3;
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->configid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.GridBlock)
}

::google::protobuf::uint8* GridBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GridBlock)
  // required .pb.EGridType GridType = 1;
  if (has_gridtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gridtype(), target);
  }

  // required uint32 GridIndex = 2;
  if (has_gridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gridindex(), target);
  }

  // required uint32 ConfigId = 3;
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->configid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GridBlock)
  return target;
}

int GridBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.EGridType GridType = 1;
    if (has_gridtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gridtype());
    }

    // required uint32 GridIndex = 2;
    if (has_gridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridindex());
    }

    // required uint32 ConfigId = 3;
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->configid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridBlock::MergeFrom(const GridBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gridtype()) {
      set_gridtype(from.gridtype());
    }
    if (from.has_gridindex()) {
      set_gridindex(from.gridindex());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridBlock::CopyFrom(const GridBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GridBlock::Swap(GridBlock* other) {
  if (other != this) {
    std::swap(gridtype_, other->gridtype_);
    std::swap(gridindex_, other->gridindex_);
    std::swap(configid_, other->configid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridBlock_descriptor_;
  metadata.reflection = GridBlock_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
