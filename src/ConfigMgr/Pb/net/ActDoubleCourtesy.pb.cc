// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActDoubleCourtesy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActDoubleCourtesy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActDoubleCourtesyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActDoubleCourtesyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActDoubleCourtesyGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActDoubleCourtesyGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActDoubleCourtesyExchangeGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActDoubleCourtesyExchangeGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActDoubleCourtesyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActDoubleCourtesyNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActDoubleCourtesy_2eproto() {
  protobuf_AddDesc_net_2fActDoubleCourtesy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActDoubleCourtesy.proto");
  GOOGLE_CHECK(file != NULL);
  TActDoubleCourtesyInfo_descriptor_ = file->message_type(0);
  static const int TActDoubleCourtesyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyInfo, purchasenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyInfo, exchangenum_),
  };
  TActDoubleCourtesyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActDoubleCourtesyInfo_descriptor_,
      TActDoubleCourtesyInfo::default_instance_,
      TActDoubleCourtesyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActDoubleCourtesyInfo));
  TActDoubleCourtesyGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TActDoubleCourtesyGetInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyGetInfoRsp, arrinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyGetInfoRsp, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyGetInfoRsp, rechargenum_),
  };
  TActDoubleCourtesyGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActDoubleCourtesyGetInfoRsp_descriptor_,
      TActDoubleCourtesyGetInfoRsp::default_instance_,
      TActDoubleCourtesyGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActDoubleCourtesyGetInfoRsp));
  TActDoubleCourtesyExchangeGiftReq_descriptor_ = file->message_type(2);
  static const int TActDoubleCourtesyExchangeGiftReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyExchangeGiftReq, id_),
  };
  TActDoubleCourtesyExchangeGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActDoubleCourtesyExchangeGiftReq_descriptor_,
      TActDoubleCourtesyExchangeGiftReq::default_instance_,
      TActDoubleCourtesyExchangeGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyExchangeGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyExchangeGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActDoubleCourtesyExchangeGiftReq));
  TActDoubleCourtesyNotify_descriptor_ = file->message_type(3);
  static const int TActDoubleCourtesyNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyNotify, arrinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyNotify, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyNotify, rechargenum_),
  };
  TActDoubleCourtesyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActDoubleCourtesyNotify_descriptor_,
      TActDoubleCourtesyNotify::default_instance_,
      TActDoubleCourtesyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActDoubleCourtesyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActDoubleCourtesyNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActDoubleCourtesy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActDoubleCourtesyInfo_descriptor_, &TActDoubleCourtesyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActDoubleCourtesyGetInfoRsp_descriptor_, &TActDoubleCourtesyGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActDoubleCourtesyExchangeGiftReq_descriptor_, &TActDoubleCourtesyExchangeGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActDoubleCourtesyNotify_descriptor_, &TActDoubleCourtesyNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActDoubleCourtesy_2eproto() {
  delete TActDoubleCourtesyInfo::default_instance_;
  delete TActDoubleCourtesyInfo_reflection_;
  delete TActDoubleCourtesyGetInfoRsp::default_instance_;
  delete TActDoubleCourtesyGetInfoRsp_reflection_;
  delete TActDoubleCourtesyExchangeGiftReq::default_instance_;
  delete TActDoubleCourtesyExchangeGiftReq_reflection_;
  delete TActDoubleCourtesyNotify::default_instance_;
  delete TActDoubleCourtesyNotify_reflection_;
}

void protobuf_AddDesc_net_2fActDoubleCourtesy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033net/ActDoubleCourtesy.proto\022\002pb\"N\n\026TAc"
    "tDoubleCourtesyInfo\022\n\n\002Id\030\001 \001(\r\022\023\n\013Purch"
    "aseNum\030\002 \001(\r\022\023\n\013ExchangeNum\030\003 \001(\r\"o\n\034TAc"
    "tDoubleCourtesyGetInfoRsp\022+\n\007ArrInfo\030\001 \003"
    "(\0132\032.pb.TActDoubleCourtesyInfo\022\r\n\005Score\030"
    "\002 \001(\r\022\023\n\013RechargeNum\030\003 \001(\r\"/\n!TActDouble"
    "CourtesyExchangeGiftReq\022\n\n\002Id\030\001 \001(\r\"k\n\030T"
    "ActDoubleCourtesyNotify\022+\n\007ArrInfo\030\001 \003(\013"
    "2\032.pb.TActDoubleCourtesyInfo\022\r\n\005Score\030\002 "
    "\001(\r\022\023\n\013RechargeNum\030\003 \001(\r", 384);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActDoubleCourtesy.proto", &protobuf_RegisterTypes);
  TActDoubleCourtesyInfo::default_instance_ = new TActDoubleCourtesyInfo();
  TActDoubleCourtesyGetInfoRsp::default_instance_ = new TActDoubleCourtesyGetInfoRsp();
  TActDoubleCourtesyExchangeGiftReq::default_instance_ = new TActDoubleCourtesyExchangeGiftReq();
  TActDoubleCourtesyNotify::default_instance_ = new TActDoubleCourtesyNotify();
  TActDoubleCourtesyInfo::default_instance_->InitAsDefaultInstance();
  TActDoubleCourtesyGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActDoubleCourtesyExchangeGiftReq::default_instance_->InitAsDefaultInstance();
  TActDoubleCourtesyNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActDoubleCourtesy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActDoubleCourtesy_2eproto {
  StaticDescriptorInitializer_net_2fActDoubleCourtesy_2eproto() {
    protobuf_AddDesc_net_2fActDoubleCourtesy_2eproto();
  }
} static_descriptor_initializer_net_2fActDoubleCourtesy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActDoubleCourtesyInfo::kIdFieldNumber;
const int TActDoubleCourtesyInfo::kPurchaseNumFieldNumber;
const int TActDoubleCourtesyInfo::kExchangeNumFieldNumber;
#endif  // !_MSC_VER

TActDoubleCourtesyInfo::TActDoubleCourtesyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActDoubleCourtesyInfo)
}

void TActDoubleCourtesyInfo::InitAsDefaultInstance() {
}

TActDoubleCourtesyInfo::TActDoubleCourtesyInfo(const TActDoubleCourtesyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActDoubleCourtesyInfo)
}

void TActDoubleCourtesyInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  purchasenum_ = 0u;
  exchangenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActDoubleCourtesyInfo::~TActDoubleCourtesyInfo() {
  // @@protoc_insertion_point(destructor:pb.TActDoubleCourtesyInfo)
  SharedDtor();
}

void TActDoubleCourtesyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActDoubleCourtesyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActDoubleCourtesyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActDoubleCourtesyInfo_descriptor_;
}

const TActDoubleCourtesyInfo& TActDoubleCourtesyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActDoubleCourtesy_2eproto();
  return *default_instance_;
}

TActDoubleCourtesyInfo* TActDoubleCourtesyInfo::default_instance_ = NULL;

TActDoubleCourtesyInfo* TActDoubleCourtesyInfo::New() const {
  return new TActDoubleCourtesyInfo;
}

void TActDoubleCourtesyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActDoubleCourtesyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, exchangenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActDoubleCourtesyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActDoubleCourtesyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PurchaseNum;
        break;
      }

      // optional uint32 PurchaseNum = 2;
      case 2: {
        if (tag == 16) {
         parse_PurchaseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &purchasenum_)));
          set_has_purchasenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ExchangeNum;
        break;
      }

      // optional uint32 ExchangeNum = 3;
      case 3: {
        if (tag == 24) {
         parse_ExchangeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchangenum_)));
          set_has_exchangenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActDoubleCourtesyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActDoubleCourtesyInfo)
  return false;
#undef DO_
}

void TActDoubleCourtesyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActDoubleCourtesyInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 PurchaseNum = 2;
  if (has_purchasenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->purchasenum(), output);
  }

  // optional uint32 ExchangeNum = 3;
  if (has_exchangenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exchangenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActDoubleCourtesyInfo)
}

::google::protobuf::uint8* TActDoubleCourtesyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActDoubleCourtesyInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 PurchaseNum = 2;
  if (has_purchasenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->purchasenum(), target);
  }

  // optional uint32 ExchangeNum = 3;
  if (has_exchangenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exchangenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActDoubleCourtesyInfo)
  return target;
}

int TActDoubleCourtesyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 PurchaseNum = 2;
    if (has_purchasenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->purchasenum());
    }

    // optional uint32 ExchangeNum = 3;
    if (has_exchangenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchangenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActDoubleCourtesyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActDoubleCourtesyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActDoubleCourtesyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActDoubleCourtesyInfo::MergeFrom(const TActDoubleCourtesyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_purchasenum()) {
      set_purchasenum(from.purchasenum());
    }
    if (from.has_exchangenum()) {
      set_exchangenum(from.exchangenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActDoubleCourtesyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActDoubleCourtesyInfo::CopyFrom(const TActDoubleCourtesyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActDoubleCourtesyInfo::IsInitialized() const {

  return true;
}

void TActDoubleCourtesyInfo::Swap(TActDoubleCourtesyInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(purchasenum_, other->purchasenum_);
    std::swap(exchangenum_, other->exchangenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActDoubleCourtesyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActDoubleCourtesyInfo_descriptor_;
  metadata.reflection = TActDoubleCourtesyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActDoubleCourtesyGetInfoRsp::kArrInfoFieldNumber;
const int TActDoubleCourtesyGetInfoRsp::kScoreFieldNumber;
const int TActDoubleCourtesyGetInfoRsp::kRechargeNumFieldNumber;
#endif  // !_MSC_VER

TActDoubleCourtesyGetInfoRsp::TActDoubleCourtesyGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActDoubleCourtesyGetInfoRsp)
}

void TActDoubleCourtesyGetInfoRsp::InitAsDefaultInstance() {
}

TActDoubleCourtesyGetInfoRsp::TActDoubleCourtesyGetInfoRsp(const TActDoubleCourtesyGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActDoubleCourtesyGetInfoRsp)
}

void TActDoubleCourtesyGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  rechargenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActDoubleCourtesyGetInfoRsp::~TActDoubleCourtesyGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActDoubleCourtesyGetInfoRsp)
  SharedDtor();
}

void TActDoubleCourtesyGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActDoubleCourtesyGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActDoubleCourtesyGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActDoubleCourtesyGetInfoRsp_descriptor_;
}

const TActDoubleCourtesyGetInfoRsp& TActDoubleCourtesyGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActDoubleCourtesy_2eproto();
  return *default_instance_;
}

TActDoubleCourtesyGetInfoRsp* TActDoubleCourtesyGetInfoRsp::default_instance_ = NULL;

TActDoubleCourtesyGetInfoRsp* TActDoubleCourtesyGetInfoRsp::New() const {
  return new TActDoubleCourtesyGetInfoRsp;
}

void TActDoubleCourtesyGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActDoubleCourtesyGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(score_, rechargenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActDoubleCourtesyGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActDoubleCourtesyGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActDoubleCourtesyInfo ArrInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrInfo;
        if (input->ExpectTag(16)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 2;
      case 2: {
        if (tag == 16) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RechargeNum;
        break;
      }

      // optional uint32 RechargeNum = 3;
      case 3: {
        if (tag == 24) {
         parse_RechargeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rechargenum_)));
          set_has_rechargenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActDoubleCourtesyGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActDoubleCourtesyGetInfoRsp)
  return false;
#undef DO_
}

void TActDoubleCourtesyGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActDoubleCourtesyGetInfoRsp)
  // repeated .pb.TActDoubleCourtesyInfo ArrInfo = 1;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrinfo(i), output);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional uint32 RechargeNum = 3;
  if (has_rechargenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rechargenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActDoubleCourtesyGetInfoRsp)
}

::google::protobuf::uint8* TActDoubleCourtesyGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActDoubleCourtesyGetInfoRsp)
  // repeated .pb.TActDoubleCourtesyInfo ArrInfo = 1;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrinfo(i), target);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional uint32 RechargeNum = 3;
  if (has_rechargenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rechargenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActDoubleCourtesyGetInfoRsp)
  return target;
}

int TActDoubleCourtesyGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 Score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 RechargeNum = 3;
    if (has_rechargenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rechargenum());
    }

  }
  // repeated .pb.TActDoubleCourtesyInfo ArrInfo = 1;
  total_size += 1 * this->arrinfo_size();
  for (int i = 0; i < this->arrinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActDoubleCourtesyGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActDoubleCourtesyGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActDoubleCourtesyGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActDoubleCourtesyGetInfoRsp::MergeFrom(const TActDoubleCourtesyGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrinfo_.MergeFrom(from.arrinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_rechargenum()) {
      set_rechargenum(from.rechargenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActDoubleCourtesyGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActDoubleCourtesyGetInfoRsp::CopyFrom(const TActDoubleCourtesyGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActDoubleCourtesyGetInfoRsp::IsInitialized() const {

  return true;
}

void TActDoubleCourtesyGetInfoRsp::Swap(TActDoubleCourtesyGetInfoRsp* other) {
  if (other != this) {
    arrinfo_.Swap(&other->arrinfo_);
    std::swap(score_, other->score_);
    std::swap(rechargenum_, other->rechargenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActDoubleCourtesyGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActDoubleCourtesyGetInfoRsp_descriptor_;
  metadata.reflection = TActDoubleCourtesyGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActDoubleCourtesyExchangeGiftReq::kIdFieldNumber;
#endif  // !_MSC_VER

TActDoubleCourtesyExchangeGiftReq::TActDoubleCourtesyExchangeGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActDoubleCourtesyExchangeGiftReq)
}

void TActDoubleCourtesyExchangeGiftReq::InitAsDefaultInstance() {
}

TActDoubleCourtesyExchangeGiftReq::TActDoubleCourtesyExchangeGiftReq(const TActDoubleCourtesyExchangeGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActDoubleCourtesyExchangeGiftReq)
}

void TActDoubleCourtesyExchangeGiftReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActDoubleCourtesyExchangeGiftReq::~TActDoubleCourtesyExchangeGiftReq() {
  // @@protoc_insertion_point(destructor:pb.TActDoubleCourtesyExchangeGiftReq)
  SharedDtor();
}

void TActDoubleCourtesyExchangeGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActDoubleCourtesyExchangeGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActDoubleCourtesyExchangeGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActDoubleCourtesyExchangeGiftReq_descriptor_;
}

const TActDoubleCourtesyExchangeGiftReq& TActDoubleCourtesyExchangeGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActDoubleCourtesy_2eproto();
  return *default_instance_;
}

TActDoubleCourtesyExchangeGiftReq* TActDoubleCourtesyExchangeGiftReq::default_instance_ = NULL;

TActDoubleCourtesyExchangeGiftReq* TActDoubleCourtesyExchangeGiftReq::New() const {
  return new TActDoubleCourtesyExchangeGiftReq;
}

void TActDoubleCourtesyExchangeGiftReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActDoubleCourtesyExchangeGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActDoubleCourtesyExchangeGiftReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActDoubleCourtesyExchangeGiftReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActDoubleCourtesyExchangeGiftReq)
  return false;
#undef DO_
}

void TActDoubleCourtesyExchangeGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActDoubleCourtesyExchangeGiftReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActDoubleCourtesyExchangeGiftReq)
}

::google::protobuf::uint8* TActDoubleCourtesyExchangeGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActDoubleCourtesyExchangeGiftReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActDoubleCourtesyExchangeGiftReq)
  return target;
}

int TActDoubleCourtesyExchangeGiftReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActDoubleCourtesyExchangeGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActDoubleCourtesyExchangeGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActDoubleCourtesyExchangeGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActDoubleCourtesyExchangeGiftReq::MergeFrom(const TActDoubleCourtesyExchangeGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActDoubleCourtesyExchangeGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActDoubleCourtesyExchangeGiftReq::CopyFrom(const TActDoubleCourtesyExchangeGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActDoubleCourtesyExchangeGiftReq::IsInitialized() const {

  return true;
}

void TActDoubleCourtesyExchangeGiftReq::Swap(TActDoubleCourtesyExchangeGiftReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActDoubleCourtesyExchangeGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActDoubleCourtesyExchangeGiftReq_descriptor_;
  metadata.reflection = TActDoubleCourtesyExchangeGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActDoubleCourtesyNotify::kArrInfoFieldNumber;
const int TActDoubleCourtesyNotify::kScoreFieldNumber;
const int TActDoubleCourtesyNotify::kRechargeNumFieldNumber;
#endif  // !_MSC_VER

TActDoubleCourtesyNotify::TActDoubleCourtesyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActDoubleCourtesyNotify)
}

void TActDoubleCourtesyNotify::InitAsDefaultInstance() {
}

TActDoubleCourtesyNotify::TActDoubleCourtesyNotify(const TActDoubleCourtesyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActDoubleCourtesyNotify)
}

void TActDoubleCourtesyNotify::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  rechargenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActDoubleCourtesyNotify::~TActDoubleCourtesyNotify() {
  // @@protoc_insertion_point(destructor:pb.TActDoubleCourtesyNotify)
  SharedDtor();
}

void TActDoubleCourtesyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActDoubleCourtesyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActDoubleCourtesyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActDoubleCourtesyNotify_descriptor_;
}

const TActDoubleCourtesyNotify& TActDoubleCourtesyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActDoubleCourtesy_2eproto();
  return *default_instance_;
}

TActDoubleCourtesyNotify* TActDoubleCourtesyNotify::default_instance_ = NULL;

TActDoubleCourtesyNotify* TActDoubleCourtesyNotify::New() const {
  return new TActDoubleCourtesyNotify;
}

void TActDoubleCourtesyNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActDoubleCourtesyNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(score_, rechargenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActDoubleCourtesyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActDoubleCourtesyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActDoubleCourtesyInfo ArrInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrInfo;
        if (input->ExpectTag(16)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 2;
      case 2: {
        if (tag == 16) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RechargeNum;
        break;
      }

      // optional uint32 RechargeNum = 3;
      case 3: {
        if (tag == 24) {
         parse_RechargeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rechargenum_)));
          set_has_rechargenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActDoubleCourtesyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActDoubleCourtesyNotify)
  return false;
#undef DO_
}

void TActDoubleCourtesyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActDoubleCourtesyNotify)
  // repeated .pb.TActDoubleCourtesyInfo ArrInfo = 1;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrinfo(i), output);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional uint32 RechargeNum = 3;
  if (has_rechargenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rechargenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActDoubleCourtesyNotify)
}

::google::protobuf::uint8* TActDoubleCourtesyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActDoubleCourtesyNotify)
  // repeated .pb.TActDoubleCourtesyInfo ArrInfo = 1;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrinfo(i), target);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional uint32 RechargeNum = 3;
  if (has_rechargenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rechargenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActDoubleCourtesyNotify)
  return target;
}

int TActDoubleCourtesyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 Score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 RechargeNum = 3;
    if (has_rechargenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rechargenum());
    }

  }
  // repeated .pb.TActDoubleCourtesyInfo ArrInfo = 1;
  total_size += 1 * this->arrinfo_size();
  for (int i = 0; i < this->arrinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActDoubleCourtesyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActDoubleCourtesyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActDoubleCourtesyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActDoubleCourtesyNotify::MergeFrom(const TActDoubleCourtesyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrinfo_.MergeFrom(from.arrinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_rechargenum()) {
      set_rechargenum(from.rechargenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActDoubleCourtesyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActDoubleCourtesyNotify::CopyFrom(const TActDoubleCourtesyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActDoubleCourtesyNotify::IsInitialized() const {

  return true;
}

void TActDoubleCourtesyNotify::Swap(TActDoubleCourtesyNotify* other) {
  if (other != this) {
    arrinfo_.Swap(&other->arrinfo_);
    std::swap(score_, other->score_);
    std::swap(rechargenum_, other->rechargenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActDoubleCourtesyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActDoubleCourtesyNotify_descriptor_;
  metadata.reflection = TActDoubleCourtesyNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
