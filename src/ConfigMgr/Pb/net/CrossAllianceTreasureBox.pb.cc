// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossAllianceTreasureBox.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/CrossAllianceTreasureBox.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceTreasureBoxInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxGetSimpleInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceTreasureBoxGetSimpleInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxGetBoxInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceTreasureBoxGetBoxInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxGetBoxInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceTreasureBoxGetBoxInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxReceiveTreasureBoxReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceTreasureBoxReceiveTreasureBoxReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxReceiveTreasureBoxRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceTreasureBoxReceiveTreasureBoxRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxSetAnonymityReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceTreasureBoxSetAnonymityReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxSetAnonymityRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceTreasureBoxSetAnonymityRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxDataChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossAllianceTreasureBoxDataChangeNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EBoxType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fCrossAllianceTreasureBox_2eproto() {
  protobuf_AddDesc_net_2fCrossAllianceTreasureBox_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/CrossAllianceTreasureBox.proto");
  GOOGLE_CHECK(file != NULL);
  TCrossAllianceTreasureBoxInfo_descriptor_ = file->message_type(0);
  static const int TCrossAllianceTreasureBoxInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxInfo, gaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxInfo, pickuptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxInfo, boxstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxInfo, tid_),
  };
  TCrossAllianceTreasureBoxInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceTreasureBoxInfo_descriptor_,
      TCrossAllianceTreasureBoxInfo::default_instance_,
      TCrossAllianceTreasureBoxInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceTreasureBoxInfo));
  TCrossAllianceTreasureBoxGetSimpleInfoRsp_descriptor_ = file->message_type(1);
  static const int TCrossAllianceTreasureBoxGetSimpleInfoRsp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetSimpleInfoRsp, resourcepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetSimpleInfoRsp, boxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetSimpleInfoRsp, openedtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetSimpleInfoRsp, activeboxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetSimpleInfoRsp, rechargeboxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetSimpleInfoRsp, resourceboxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetSimpleInfoRsp, userstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetSimpleInfoRsp, activeboxlasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetSimpleInfoRsp, rechargeboxlasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetSimpleInfoRsp, resourceboxlasttime_),
  };
  TCrossAllianceTreasureBoxGetSimpleInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceTreasureBoxGetSimpleInfoRsp_descriptor_,
      TCrossAllianceTreasureBoxGetSimpleInfoRsp::default_instance_,
      TCrossAllianceTreasureBoxGetSimpleInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetSimpleInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetSimpleInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceTreasureBoxGetSimpleInfoRsp));
  TCrossAllianceTreasureBoxGetBoxInfoReq_descriptor_ = file->message_type(2);
  static const int TCrossAllianceTreasureBoxGetBoxInfoReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetBoxInfoReq, boxtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetBoxInfoReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetBoxInfoReq, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetBoxInfoReq, boxidarr_),
  };
  TCrossAllianceTreasureBoxGetBoxInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceTreasureBoxGetBoxInfoReq_descriptor_,
      TCrossAllianceTreasureBoxGetBoxInfoReq::default_instance_,
      TCrossAllianceTreasureBoxGetBoxInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetBoxInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetBoxInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceTreasureBoxGetBoxInfoReq));
  TCrossAllianceTreasureBoxGetBoxInfoRsp_descriptor_ = file->message_type(3);
  static const int TCrossAllianceTreasureBoxGetBoxInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetBoxInfoRsp, boxinfoarr_),
  };
  TCrossAllianceTreasureBoxGetBoxInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceTreasureBoxGetBoxInfoRsp_descriptor_,
      TCrossAllianceTreasureBoxGetBoxInfoRsp::default_instance_,
      TCrossAllianceTreasureBoxGetBoxInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetBoxInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxGetBoxInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceTreasureBoxGetBoxInfoRsp));
  TCrossAllianceTreasureBoxReceiveTreasureBoxReq_descriptor_ = file->message_type(4);
  static const int TCrossAllianceTreasureBoxReceiveTreasureBoxReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxReceiveTreasureBoxReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxReceiveTreasureBoxReq, type_),
  };
  TCrossAllianceTreasureBoxReceiveTreasureBoxReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceTreasureBoxReceiveTreasureBoxReq_descriptor_,
      TCrossAllianceTreasureBoxReceiveTreasureBoxReq::default_instance_,
      TCrossAllianceTreasureBoxReceiveTreasureBoxReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxReceiveTreasureBoxReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxReceiveTreasureBoxReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceTreasureBoxReceiveTreasureBoxReq));
  TCrossAllianceTreasureBoxReceiveTreasureBoxRsp_descriptor_ = file->message_type(5);
  static const int TCrossAllianceTreasureBoxReceiveTreasureBoxRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxReceiveTreasureBoxRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxReceiveTreasureBoxRsp, lasttime_),
  };
  TCrossAllianceTreasureBoxReceiveTreasureBoxRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceTreasureBoxReceiveTreasureBoxRsp_descriptor_,
      TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::default_instance_,
      TCrossAllianceTreasureBoxReceiveTreasureBoxRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxReceiveTreasureBoxRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxReceiveTreasureBoxRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceTreasureBoxReceiveTreasureBoxRsp));
  TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp_descriptor_ = file->message_type(6);
  static const int TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp, rewardarr_),
  };
  TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp_descriptor_,
      TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::default_instance_,
      TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp));
  TCrossAllianceTreasureBoxSetAnonymityReq_descriptor_ = file->message_type(7);
  static const int TCrossAllianceTreasureBoxSetAnonymityReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxSetAnonymityReq, setanonymity_),
  };
  TCrossAllianceTreasureBoxSetAnonymityReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceTreasureBoxSetAnonymityReq_descriptor_,
      TCrossAllianceTreasureBoxSetAnonymityReq::default_instance_,
      TCrossAllianceTreasureBoxSetAnonymityReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxSetAnonymityReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxSetAnonymityReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceTreasureBoxSetAnonymityReq));
  TCrossAllianceTreasureBoxSetAnonymityRsp_descriptor_ = file->message_type(8);
  static const int TCrossAllianceTreasureBoxSetAnonymityRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxSetAnonymityRsp, isanonymity_),
  };
  TCrossAllianceTreasureBoxSetAnonymityRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceTreasureBoxSetAnonymityRsp_descriptor_,
      TCrossAllianceTreasureBoxSetAnonymityRsp::default_instance_,
      TCrossAllianceTreasureBoxSetAnonymityRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxSetAnonymityRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxSetAnonymityRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceTreasureBoxSetAnonymityRsp));
  TCrossAllianceTreasureBoxDataChangeNotify_descriptor_ = file->message_type(9);
  static const int TCrossAllianceTreasureBoxDataChangeNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxDataChangeNotify, resourcepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxDataChangeNotify, boxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxDataChangeNotify, openedtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxDataChangeNotify, activeboxinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxDataChangeNotify, rechargeboxinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxDataChangeNotify, resourceboxinfo_),
  };
  TCrossAllianceTreasureBoxDataChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossAllianceTreasureBoxDataChangeNotify_descriptor_,
      TCrossAllianceTreasureBoxDataChangeNotify::default_instance_,
      TCrossAllianceTreasureBoxDataChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxDataChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossAllianceTreasureBoxDataChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossAllianceTreasureBoxDataChangeNotify));
  EBoxType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fCrossAllianceTreasureBox_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceTreasureBoxInfo_descriptor_, &TCrossAllianceTreasureBoxInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceTreasureBoxGetSimpleInfoRsp_descriptor_, &TCrossAllianceTreasureBoxGetSimpleInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceTreasureBoxGetBoxInfoReq_descriptor_, &TCrossAllianceTreasureBoxGetBoxInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceTreasureBoxGetBoxInfoRsp_descriptor_, &TCrossAllianceTreasureBoxGetBoxInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceTreasureBoxReceiveTreasureBoxReq_descriptor_, &TCrossAllianceTreasureBoxReceiveTreasureBoxReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceTreasureBoxReceiveTreasureBoxRsp_descriptor_, &TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp_descriptor_, &TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceTreasureBoxSetAnonymityReq_descriptor_, &TCrossAllianceTreasureBoxSetAnonymityReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceTreasureBoxSetAnonymityRsp_descriptor_, &TCrossAllianceTreasureBoxSetAnonymityRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossAllianceTreasureBoxDataChangeNotify_descriptor_, &TCrossAllianceTreasureBoxDataChangeNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fCrossAllianceTreasureBox_2eproto() {
  delete TCrossAllianceTreasureBoxInfo::default_instance_;
  delete TCrossAllianceTreasureBoxInfo_reflection_;
  delete TCrossAllianceTreasureBoxGetSimpleInfoRsp::default_instance_;
  delete TCrossAllianceTreasureBoxGetSimpleInfoRsp_reflection_;
  delete TCrossAllianceTreasureBoxGetBoxInfoReq::default_instance_;
  delete TCrossAllianceTreasureBoxGetBoxInfoReq_reflection_;
  delete TCrossAllianceTreasureBoxGetBoxInfoRsp::default_instance_;
  delete TCrossAllianceTreasureBoxGetBoxInfoRsp_reflection_;
  delete TCrossAllianceTreasureBoxReceiveTreasureBoxReq::default_instance_;
  delete TCrossAllianceTreasureBoxReceiveTreasureBoxReq_reflection_;
  delete TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::default_instance_;
  delete TCrossAllianceTreasureBoxReceiveTreasureBoxRsp_reflection_;
  delete TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::default_instance_;
  delete TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp_reflection_;
  delete TCrossAllianceTreasureBoxSetAnonymityReq::default_instance_;
  delete TCrossAllianceTreasureBoxSetAnonymityReq_reflection_;
  delete TCrossAllianceTreasureBoxSetAnonymityRsp::default_instance_;
  delete TCrossAllianceTreasureBoxSetAnonymityRsp_reflection_;
  delete TCrossAllianceTreasureBoxDataChangeNotify::default_instance_;
  delete TCrossAllianceTreasureBoxDataChangeNotify_reflection_;
}

void protobuf_AddDesc_net_2fCrossAllianceTreasureBox_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"net/CrossAllianceTreasureBox.proto\022\002pb"
    "\032\026net/CommonReward.proto\032\016net/User.proto"
    "\"\227\001\n\035TCrossAllianceTreasureBoxInfo\022\n\n\002Id"
    "\030\001 \001(\r\022\020\n\010GainTime\030\002 \001(\004\022\022\n\nPickUpTime\030\003"
    " \001(\004\022%\n\010UserInfo\030\004 \001(\0132\023.pb.TUserSimpleI"
    "nfo\022\020\n\010BoxState\030\005 \001(\r\022\013\n\003Tid\030\006 \001(\r\"\227\002\n)T"
    "CrossAllianceTreasureBoxGetSimpleInfoRsp"
    "\022\025\n\rResourcePoint\030\001 \001(\r\022\020\n\010BoxLevel\030\002 \001("
    "\r\022\023\n\013OpenedTimes\030\003 \001(\r\022\024\n\014ActiveBoxNum\030\004"
    " \001(\r\022\026\n\016RechargeBoxNum\030\005 \001(\r\022\026\n\016Resource"
    "BoxNum\030\006 \001(\r\022\021\n\tUserState\030\007 \001(\r\022\031\n\021Activ"
    "eBoxLastTime\030\010 \001(\004\022\033\n\023RechargeBoxLastTim"
    "e\030\t \001(\004\022\033\n\023ResourceBoxLastTime\030\n \001(\004\"x\n&"
    "TCrossAllianceTreasureBoxGetBoxInfoReq\022\035"
    "\n\007BoxType\030\001 \001(\0162\014.pb.EBoxType\022\016\n\006OffSet\030"
    "\002 \001(\r\022\r\n\005Limit\030\003 \001(\r\022\020\n\010BoxIdArr\030\004 \003(\r\"_"
    "\n&TCrossAllianceTreasureBoxGetBoxInfoRsp"
    "\0225\n\nBoxInfoArr\030\001 \003(\0132!.pb.TCrossAlliance"
    "TreasureBoxInfo\"X\n.TCrossAllianceTreasur"
    "eBoxReceiveTreasureBoxReq\022\n\n\002Id\030\001 \001(\r\022\032\n"
    "\004Type\030\002 \001(\0162\014.pb.EBoxType\"h\n.TCrossAllia"
    "nceTreasureBoxReceiveTreasureBoxRsp\022$\n\tR"
    "ewardArr\030\001 \003(\0132\021.pb.TCommonReward\022\020\n\010Las"
    "tTime\030\002 \001(\004\"X\n0TCrossAllianceTreasureBox"
    "ReceiveReceiveAllBoxRsp\022$\n\tRewardArr\030\001 \003"
    "(\0132\021.pb.TCommonReward\"@\n(TCrossAllianceT"
    "reasureBoxSetAnonymityReq\022\024\n\014SetAnonymit"
    "y\030\001 \001(\r\"\?\n(TCrossAllianceTreasureBoxSetA"
    "nonymityRsp\022\023\n\013IsAnonymity\030\002 \001(\r\"\233\002\n)TCr"
    "ossAllianceTreasureBoxDataChangeNotify\022\025"
    "\n\rResourcePoint\030\001 \001(\r\022\020\n\010BoxLevel\030\002 \001(\r\022"
    "\023\n\013OpenedTimes\030\003 \001(\r\0228\n\rActiveBoxInfo\030\004 "
    "\001(\0132!.pb.TCrossAllianceTreasureBoxInfo\022:"
    "\n\017RechargeBoxInfo\030\005 \001(\0132!.pb.TCrossAllia"
    "nceTreasureBoxInfo\022:\n\017ResourceBoxInfo\030\006 "
    "\001(\0132!.pb.TCrossAllianceTreasureBoxInfo*A"
    "\n\010EBoxType\022\017\n\013EBox_Active\020\001\022\021\n\rEBox_Rech"
    "arge\020\002\022\021\n\rEBox_Resource\020\003", 1505);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/CrossAllianceTreasureBox.proto", &protobuf_RegisterTypes);
  TCrossAllianceTreasureBoxInfo::default_instance_ = new TCrossAllianceTreasureBoxInfo();
  TCrossAllianceTreasureBoxGetSimpleInfoRsp::default_instance_ = new TCrossAllianceTreasureBoxGetSimpleInfoRsp();
  TCrossAllianceTreasureBoxGetBoxInfoReq::default_instance_ = new TCrossAllianceTreasureBoxGetBoxInfoReq();
  TCrossAllianceTreasureBoxGetBoxInfoRsp::default_instance_ = new TCrossAllianceTreasureBoxGetBoxInfoRsp();
  TCrossAllianceTreasureBoxReceiveTreasureBoxReq::default_instance_ = new TCrossAllianceTreasureBoxReceiveTreasureBoxReq();
  TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::default_instance_ = new TCrossAllianceTreasureBoxReceiveTreasureBoxRsp();
  TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::default_instance_ = new TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp();
  TCrossAllianceTreasureBoxSetAnonymityReq::default_instance_ = new TCrossAllianceTreasureBoxSetAnonymityReq();
  TCrossAllianceTreasureBoxSetAnonymityRsp::default_instance_ = new TCrossAllianceTreasureBoxSetAnonymityRsp();
  TCrossAllianceTreasureBoxDataChangeNotify::default_instance_ = new TCrossAllianceTreasureBoxDataChangeNotify();
  TCrossAllianceTreasureBoxInfo::default_instance_->InitAsDefaultInstance();
  TCrossAllianceTreasureBoxGetSimpleInfoRsp::default_instance_->InitAsDefaultInstance();
  TCrossAllianceTreasureBoxGetBoxInfoReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceTreasureBoxGetBoxInfoRsp::default_instance_->InitAsDefaultInstance();
  TCrossAllianceTreasureBoxReceiveTreasureBoxReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::default_instance_->InitAsDefaultInstance();
  TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::default_instance_->InitAsDefaultInstance();
  TCrossAllianceTreasureBoxSetAnonymityReq::default_instance_->InitAsDefaultInstance();
  TCrossAllianceTreasureBoxSetAnonymityRsp::default_instance_->InitAsDefaultInstance();
  TCrossAllianceTreasureBoxDataChangeNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fCrossAllianceTreasureBox_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fCrossAllianceTreasureBox_2eproto {
  StaticDescriptorInitializer_net_2fCrossAllianceTreasureBox_2eproto() {
    protobuf_AddDesc_net_2fCrossAllianceTreasureBox_2eproto();
  }
} static_descriptor_initializer_net_2fCrossAllianceTreasureBox_2eproto_;
const ::google::protobuf::EnumDescriptor* EBoxType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBoxType_descriptor_;
}
bool EBoxType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceTreasureBoxInfo::kIdFieldNumber;
const int TCrossAllianceTreasureBoxInfo::kGainTimeFieldNumber;
const int TCrossAllianceTreasureBoxInfo::kPickUpTimeFieldNumber;
const int TCrossAllianceTreasureBoxInfo::kUserInfoFieldNumber;
const int TCrossAllianceTreasureBoxInfo::kBoxStateFieldNumber;
const int TCrossAllianceTreasureBoxInfo::kTidFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceTreasureBoxInfo::TCrossAllianceTreasureBoxInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceTreasureBoxInfo)
}

void TCrossAllianceTreasureBoxInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TCrossAllianceTreasureBoxInfo::TCrossAllianceTreasureBoxInfo(const TCrossAllianceTreasureBoxInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceTreasureBoxInfo)
}

void TCrossAllianceTreasureBoxInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  gaintime_ = GOOGLE_ULONGLONG(0);
  pickuptime_ = GOOGLE_ULONGLONG(0);
  userinfo_ = NULL;
  boxstate_ = 0u;
  tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceTreasureBoxInfo::~TCrossAllianceTreasureBoxInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceTreasureBoxInfo)
  SharedDtor();
}

void TCrossAllianceTreasureBoxInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TCrossAllianceTreasureBoxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceTreasureBoxInfo_descriptor_;
}

const TCrossAllianceTreasureBoxInfo& TCrossAllianceTreasureBoxInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossAllianceTreasureBox_2eproto();
  return *default_instance_;
}

TCrossAllianceTreasureBoxInfo* TCrossAllianceTreasureBoxInfo::default_instance_ = NULL;

TCrossAllianceTreasureBoxInfo* TCrossAllianceTreasureBoxInfo::New() const {
  return new TCrossAllianceTreasureBoxInfo;
}

void TCrossAllianceTreasureBoxInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossAllianceTreasureBoxInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(gaintime_, boxstate_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    tid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceTreasureBoxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceTreasureBoxInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GainTime;
        break;
      }

      // optional uint64 GainTime = 2;
      case 2: {
        if (tag == 16) {
         parse_GainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gaintime_)));
          set_has_gaintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PickUpTime;
        break;
      }

      // optional uint64 PickUpTime = 3;
      case 3: {
        if (tag == 24) {
         parse_PickUpTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pickuptime_)));
          set_has_pickuptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BoxState;
        break;
      }

      // optional uint32 BoxState = 5;
      case 5: {
        if (tag == 40) {
         parse_BoxState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxstate_)));
          set_has_boxstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Tid;
        break;
      }

      // optional uint32 Tid = 6;
      case 6: {
        if (tag == 48) {
         parse_Tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceTreasureBoxInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceTreasureBoxInfo)
  return false;
#undef DO_
}

void TCrossAllianceTreasureBoxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceTreasureBoxInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 GainTime = 2;
  if (has_gaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gaintime(), output);
  }

  // optional uint64 PickUpTime = 3;
  if (has_pickuptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pickuptime(), output);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userinfo(), output);
  }

  // optional uint32 BoxState = 5;
  if (has_boxstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->boxstate(), output);
  }

  // optional uint32 Tid = 6;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceTreasureBoxInfo)
}

::google::protobuf::uint8* TCrossAllianceTreasureBoxInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceTreasureBoxInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 GainTime = 2;
  if (has_gaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gaintime(), target);
  }

  // optional uint64 PickUpTime = 3;
  if (has_pickuptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pickuptime(), target);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userinfo(), target);
  }

  // optional uint32 BoxState = 5;
  if (has_boxstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->boxstate(), target);
  }

  // optional uint32 Tid = 6;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceTreasureBoxInfo)
  return target;
}

int TCrossAllianceTreasureBoxInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 GainTime = 2;
    if (has_gaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gaintime());
    }

    // optional uint64 PickUpTime = 3;
    if (has_pickuptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pickuptime());
    }

    // optional .pb.TUserSimpleInfo UserInfo = 4;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 BoxState = 5;
    if (has_boxstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxstate());
    }

    // optional uint32 Tid = 6;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceTreasureBoxInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceTreasureBoxInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceTreasureBoxInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceTreasureBoxInfo::MergeFrom(const TCrossAllianceTreasureBoxInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gaintime()) {
      set_gaintime(from.gaintime());
    }
    if (from.has_pickuptime()) {
      set_pickuptime(from.pickuptime());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_boxstate()) {
      set_boxstate(from.boxstate());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceTreasureBoxInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceTreasureBoxInfo::CopyFrom(const TCrossAllianceTreasureBoxInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceTreasureBoxInfo::IsInitialized() const {

  return true;
}

void TCrossAllianceTreasureBoxInfo::Swap(TCrossAllianceTreasureBoxInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gaintime_, other->gaintime_);
    std::swap(pickuptime_, other->pickuptime_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(boxstate_, other->boxstate_);
    std::swap(tid_, other->tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceTreasureBoxInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceTreasureBoxInfo_descriptor_;
  metadata.reflection = TCrossAllianceTreasureBoxInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceTreasureBoxGetSimpleInfoRsp::kResourcePointFieldNumber;
const int TCrossAllianceTreasureBoxGetSimpleInfoRsp::kBoxLevelFieldNumber;
const int TCrossAllianceTreasureBoxGetSimpleInfoRsp::kOpenedTimesFieldNumber;
const int TCrossAllianceTreasureBoxGetSimpleInfoRsp::kActiveBoxNumFieldNumber;
const int TCrossAllianceTreasureBoxGetSimpleInfoRsp::kRechargeBoxNumFieldNumber;
const int TCrossAllianceTreasureBoxGetSimpleInfoRsp::kResourceBoxNumFieldNumber;
const int TCrossAllianceTreasureBoxGetSimpleInfoRsp::kUserStateFieldNumber;
const int TCrossAllianceTreasureBoxGetSimpleInfoRsp::kActiveBoxLastTimeFieldNumber;
const int TCrossAllianceTreasureBoxGetSimpleInfoRsp::kRechargeBoxLastTimeFieldNumber;
const int TCrossAllianceTreasureBoxGetSimpleInfoRsp::kResourceBoxLastTimeFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceTreasureBoxGetSimpleInfoRsp::TCrossAllianceTreasureBoxGetSimpleInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceTreasureBoxGetSimpleInfoRsp)
}

void TCrossAllianceTreasureBoxGetSimpleInfoRsp::InitAsDefaultInstance() {
}

TCrossAllianceTreasureBoxGetSimpleInfoRsp::TCrossAllianceTreasureBoxGetSimpleInfoRsp(const TCrossAllianceTreasureBoxGetSimpleInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceTreasureBoxGetSimpleInfoRsp)
}

void TCrossAllianceTreasureBoxGetSimpleInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  resourcepoint_ = 0u;
  boxlevel_ = 0u;
  openedtimes_ = 0u;
  activeboxnum_ = 0u;
  rechargeboxnum_ = 0u;
  resourceboxnum_ = 0u;
  userstate_ = 0u;
  activeboxlasttime_ = GOOGLE_ULONGLONG(0);
  rechargeboxlasttime_ = GOOGLE_ULONGLONG(0);
  resourceboxlasttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceTreasureBoxGetSimpleInfoRsp::~TCrossAllianceTreasureBoxGetSimpleInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceTreasureBoxGetSimpleInfoRsp)
  SharedDtor();
}

void TCrossAllianceTreasureBoxGetSimpleInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceTreasureBoxGetSimpleInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxGetSimpleInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceTreasureBoxGetSimpleInfoRsp_descriptor_;
}

const TCrossAllianceTreasureBoxGetSimpleInfoRsp& TCrossAllianceTreasureBoxGetSimpleInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossAllianceTreasureBox_2eproto();
  return *default_instance_;
}

TCrossAllianceTreasureBoxGetSimpleInfoRsp* TCrossAllianceTreasureBoxGetSimpleInfoRsp::default_instance_ = NULL;

TCrossAllianceTreasureBoxGetSimpleInfoRsp* TCrossAllianceTreasureBoxGetSimpleInfoRsp::New() const {
  return new TCrossAllianceTreasureBoxGetSimpleInfoRsp;
}

void TCrossAllianceTreasureBoxGetSimpleInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossAllianceTreasureBoxGetSimpleInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(resourcepoint_, activeboxlasttime_);
    userstate_ = 0u;
  }
  ZR_(rechargeboxlasttime_, resourceboxlasttime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceTreasureBoxGetSimpleInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceTreasureBoxGetSimpleInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ResourcePoint = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resourcepoint_)));
          set_has_resourcepoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BoxLevel;
        break;
      }

      // optional uint32 BoxLevel = 2;
      case 2: {
        if (tag == 16) {
         parse_BoxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxlevel_)));
          set_has_boxlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_OpenedTimes;
        break;
      }

      // optional uint32 OpenedTimes = 3;
      case 3: {
        if (tag == 24) {
         parse_OpenedTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openedtimes_)));
          set_has_openedtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ActiveBoxNum;
        break;
      }

      // optional uint32 ActiveBoxNum = 4;
      case 4: {
        if (tag == 32) {
         parse_ActiveBoxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activeboxnum_)));
          set_has_activeboxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_RechargeBoxNum;
        break;
      }

      // optional uint32 RechargeBoxNum = 5;
      case 5: {
        if (tag == 40) {
         parse_RechargeBoxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rechargeboxnum_)));
          set_has_rechargeboxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ResourceBoxNum;
        break;
      }

      // optional uint32 ResourceBoxNum = 6;
      case 6: {
        if (tag == 48) {
         parse_ResourceBoxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resourceboxnum_)));
          set_has_resourceboxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_UserState;
        break;
      }

      // optional uint32 UserState = 7;
      case 7: {
        if (tag == 56) {
         parse_UserState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userstate_)));
          set_has_userstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ActiveBoxLastTime;
        break;
      }

      // optional uint64 ActiveBoxLastTime = 8;
      case 8: {
        if (tag == 64) {
         parse_ActiveBoxLastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activeboxlasttime_)));
          set_has_activeboxlasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_RechargeBoxLastTime;
        break;
      }

      // optional uint64 RechargeBoxLastTime = 9;
      case 9: {
        if (tag == 72) {
         parse_RechargeBoxLastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rechargeboxlasttime_)));
          set_has_rechargeboxlasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ResourceBoxLastTime;
        break;
      }

      // optional uint64 ResourceBoxLastTime = 10;
      case 10: {
        if (tag == 80) {
         parse_ResourceBoxLastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resourceboxlasttime_)));
          set_has_resourceboxlasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceTreasureBoxGetSimpleInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceTreasureBoxGetSimpleInfoRsp)
  return false;
#undef DO_
}

void TCrossAllianceTreasureBoxGetSimpleInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceTreasureBoxGetSimpleInfoRsp)
  // optional uint32 ResourcePoint = 1;
  if (has_resourcepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resourcepoint(), output);
  }

  // optional uint32 BoxLevel = 2;
  if (has_boxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boxlevel(), output);
  }

  // optional uint32 OpenedTimes = 3;
  if (has_openedtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->openedtimes(), output);
  }

  // optional uint32 ActiveBoxNum = 4;
  if (has_activeboxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->activeboxnum(), output);
  }

  // optional uint32 RechargeBoxNum = 5;
  if (has_rechargeboxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rechargeboxnum(), output);
  }

  // optional uint32 ResourceBoxNum = 6;
  if (has_resourceboxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->resourceboxnum(), output);
  }

  // optional uint32 UserState = 7;
  if (has_userstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->userstate(), output);
  }

  // optional uint64 ActiveBoxLastTime = 8;
  if (has_activeboxlasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->activeboxlasttime(), output);
  }

  // optional uint64 RechargeBoxLastTime = 9;
  if (has_rechargeboxlasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->rechargeboxlasttime(), output);
  }

  // optional uint64 ResourceBoxLastTime = 10;
  if (has_resourceboxlasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->resourceboxlasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceTreasureBoxGetSimpleInfoRsp)
}

::google::protobuf::uint8* TCrossAllianceTreasureBoxGetSimpleInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceTreasureBoxGetSimpleInfoRsp)
  // optional uint32 ResourcePoint = 1;
  if (has_resourcepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resourcepoint(), target);
  }

  // optional uint32 BoxLevel = 2;
  if (has_boxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boxlevel(), target);
  }

  // optional uint32 OpenedTimes = 3;
  if (has_openedtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->openedtimes(), target);
  }

  // optional uint32 ActiveBoxNum = 4;
  if (has_activeboxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->activeboxnum(), target);
  }

  // optional uint32 RechargeBoxNum = 5;
  if (has_rechargeboxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rechargeboxnum(), target);
  }

  // optional uint32 ResourceBoxNum = 6;
  if (has_resourceboxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->resourceboxnum(), target);
  }

  // optional uint32 UserState = 7;
  if (has_userstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->userstate(), target);
  }

  // optional uint64 ActiveBoxLastTime = 8;
  if (has_activeboxlasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->activeboxlasttime(), target);
  }

  // optional uint64 RechargeBoxLastTime = 9;
  if (has_rechargeboxlasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->rechargeboxlasttime(), target);
  }

  // optional uint64 ResourceBoxLastTime = 10;
  if (has_resourceboxlasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->resourceboxlasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceTreasureBoxGetSimpleInfoRsp)
  return target;
}

int TCrossAllianceTreasureBoxGetSimpleInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ResourcePoint = 1;
    if (has_resourcepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resourcepoint());
    }

    // optional uint32 BoxLevel = 2;
    if (has_boxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxlevel());
    }

    // optional uint32 OpenedTimes = 3;
    if (has_openedtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openedtimes());
    }

    // optional uint32 ActiveBoxNum = 4;
    if (has_activeboxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activeboxnum());
    }

    // optional uint32 RechargeBoxNum = 5;
    if (has_rechargeboxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rechargeboxnum());
    }

    // optional uint32 ResourceBoxNum = 6;
    if (has_resourceboxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resourceboxnum());
    }

    // optional uint32 UserState = 7;
    if (has_userstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userstate());
    }

    // optional uint64 ActiveBoxLastTime = 8;
    if (has_activeboxlasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activeboxlasttime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 RechargeBoxLastTime = 9;
    if (has_rechargeboxlasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rechargeboxlasttime());
    }

    // optional uint64 ResourceBoxLastTime = 10;
    if (has_resourceboxlasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resourceboxlasttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceTreasureBoxGetSimpleInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceTreasureBoxGetSimpleInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceTreasureBoxGetSimpleInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceTreasureBoxGetSimpleInfoRsp::MergeFrom(const TCrossAllianceTreasureBoxGetSimpleInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resourcepoint()) {
      set_resourcepoint(from.resourcepoint());
    }
    if (from.has_boxlevel()) {
      set_boxlevel(from.boxlevel());
    }
    if (from.has_openedtimes()) {
      set_openedtimes(from.openedtimes());
    }
    if (from.has_activeboxnum()) {
      set_activeboxnum(from.activeboxnum());
    }
    if (from.has_rechargeboxnum()) {
      set_rechargeboxnum(from.rechargeboxnum());
    }
    if (from.has_resourceboxnum()) {
      set_resourceboxnum(from.resourceboxnum());
    }
    if (from.has_userstate()) {
      set_userstate(from.userstate());
    }
    if (from.has_activeboxlasttime()) {
      set_activeboxlasttime(from.activeboxlasttime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rechargeboxlasttime()) {
      set_rechargeboxlasttime(from.rechargeboxlasttime());
    }
    if (from.has_resourceboxlasttime()) {
      set_resourceboxlasttime(from.resourceboxlasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceTreasureBoxGetSimpleInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceTreasureBoxGetSimpleInfoRsp::CopyFrom(const TCrossAllianceTreasureBoxGetSimpleInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceTreasureBoxGetSimpleInfoRsp::IsInitialized() const {

  return true;
}

void TCrossAllianceTreasureBoxGetSimpleInfoRsp::Swap(TCrossAllianceTreasureBoxGetSimpleInfoRsp* other) {
  if (other != this) {
    std::swap(resourcepoint_, other->resourcepoint_);
    std::swap(boxlevel_, other->boxlevel_);
    std::swap(openedtimes_, other->openedtimes_);
    std::swap(activeboxnum_, other->activeboxnum_);
    std::swap(rechargeboxnum_, other->rechargeboxnum_);
    std::swap(resourceboxnum_, other->resourceboxnum_);
    std::swap(userstate_, other->userstate_);
    std::swap(activeboxlasttime_, other->activeboxlasttime_);
    std::swap(rechargeboxlasttime_, other->rechargeboxlasttime_);
    std::swap(resourceboxlasttime_, other->resourceboxlasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceTreasureBoxGetSimpleInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceTreasureBoxGetSimpleInfoRsp_descriptor_;
  metadata.reflection = TCrossAllianceTreasureBoxGetSimpleInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceTreasureBoxGetBoxInfoReq::kBoxTypeFieldNumber;
const int TCrossAllianceTreasureBoxGetBoxInfoReq::kOffSetFieldNumber;
const int TCrossAllianceTreasureBoxGetBoxInfoReq::kLimitFieldNumber;
const int TCrossAllianceTreasureBoxGetBoxInfoReq::kBoxIdArrFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceTreasureBoxGetBoxInfoReq::TCrossAllianceTreasureBoxGetBoxInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceTreasureBoxGetBoxInfoReq)
}

void TCrossAllianceTreasureBoxGetBoxInfoReq::InitAsDefaultInstance() {
}

TCrossAllianceTreasureBoxGetBoxInfoReq::TCrossAllianceTreasureBoxGetBoxInfoReq(const TCrossAllianceTreasureBoxGetBoxInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceTreasureBoxGetBoxInfoReq)
}

void TCrossAllianceTreasureBoxGetBoxInfoReq::SharedCtor() {
  _cached_size_ = 0;
  boxtype_ = 1;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceTreasureBoxGetBoxInfoReq::~TCrossAllianceTreasureBoxGetBoxInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceTreasureBoxGetBoxInfoReq)
  SharedDtor();
}

void TCrossAllianceTreasureBoxGetBoxInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceTreasureBoxGetBoxInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxGetBoxInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceTreasureBoxGetBoxInfoReq_descriptor_;
}

const TCrossAllianceTreasureBoxGetBoxInfoReq& TCrossAllianceTreasureBoxGetBoxInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossAllianceTreasureBox_2eproto();
  return *default_instance_;
}

TCrossAllianceTreasureBoxGetBoxInfoReq* TCrossAllianceTreasureBoxGetBoxInfoReq::default_instance_ = NULL;

TCrossAllianceTreasureBoxGetBoxInfoReq* TCrossAllianceTreasureBoxGetBoxInfoReq::New() const {
  return new TCrossAllianceTreasureBoxGetBoxInfoReq;
}

void TCrossAllianceTreasureBoxGetBoxInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    boxtype_ = 1;
    offset_ = 0u;
    limit_ = 0u;
  }
  boxidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceTreasureBoxGetBoxInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceTreasureBoxGetBoxInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EBoxType BoxType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EBoxType_IsValid(value)) {
            set_boxtype(static_cast< ::pb::EBoxType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OffSet;
        break;
      }

      // optional uint32 OffSet = 2;
      case 2: {
        if (tag == 16) {
         parse_OffSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 3;
      case 3: {
        if (tag == 24) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BoxIdArr;
        break;
      }

      // repeated uint32 BoxIdArr = 4;
      case 4: {
        if (tag == 32) {
         parse_BoxIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_boxidarr())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_boxidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BoxIdArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceTreasureBoxGetBoxInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceTreasureBoxGetBoxInfoReq)
  return false;
#undef DO_
}

void TCrossAllianceTreasureBoxGetBoxInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceTreasureBoxGetBoxInfoReq)
  // optional .pb.EBoxType BoxType = 1;
  if (has_boxtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->boxtype(), output);
  }

  // optional uint32 OffSet = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // optional uint32 Limit = 3;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  // repeated uint32 BoxIdArr = 4;
  for (int i = 0; i < this->boxidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->boxidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceTreasureBoxGetBoxInfoReq)
}

::google::protobuf::uint8* TCrossAllianceTreasureBoxGetBoxInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceTreasureBoxGetBoxInfoReq)
  // optional .pb.EBoxType BoxType = 1;
  if (has_boxtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->boxtype(), target);
  }

  // optional uint32 OffSet = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  // optional uint32 Limit = 3;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  // repeated uint32 BoxIdArr = 4;
  for (int i = 0; i < this->boxidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->boxidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceTreasureBoxGetBoxInfoReq)
  return target;
}

int TCrossAllianceTreasureBoxGetBoxInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EBoxType BoxType = 1;
    if (has_boxtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->boxtype());
    }

    // optional uint32 OffSet = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 3;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  // repeated uint32 BoxIdArr = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->boxidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->boxidarr(i));
    }
    total_size += 1 * this->boxidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceTreasureBoxGetBoxInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceTreasureBoxGetBoxInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceTreasureBoxGetBoxInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceTreasureBoxGetBoxInfoReq::MergeFrom(const TCrossAllianceTreasureBoxGetBoxInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxidarr_.MergeFrom(from.boxidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxtype()) {
      set_boxtype(from.boxtype());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceTreasureBoxGetBoxInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceTreasureBoxGetBoxInfoReq::CopyFrom(const TCrossAllianceTreasureBoxGetBoxInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceTreasureBoxGetBoxInfoReq::IsInitialized() const {

  return true;
}

void TCrossAllianceTreasureBoxGetBoxInfoReq::Swap(TCrossAllianceTreasureBoxGetBoxInfoReq* other) {
  if (other != this) {
    std::swap(boxtype_, other->boxtype_);
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    boxidarr_.Swap(&other->boxidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceTreasureBoxGetBoxInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceTreasureBoxGetBoxInfoReq_descriptor_;
  metadata.reflection = TCrossAllianceTreasureBoxGetBoxInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceTreasureBoxGetBoxInfoRsp::kBoxInfoArrFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceTreasureBoxGetBoxInfoRsp::TCrossAllianceTreasureBoxGetBoxInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceTreasureBoxGetBoxInfoRsp)
}

void TCrossAllianceTreasureBoxGetBoxInfoRsp::InitAsDefaultInstance() {
}

TCrossAllianceTreasureBoxGetBoxInfoRsp::TCrossAllianceTreasureBoxGetBoxInfoRsp(const TCrossAllianceTreasureBoxGetBoxInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceTreasureBoxGetBoxInfoRsp)
}

void TCrossAllianceTreasureBoxGetBoxInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceTreasureBoxGetBoxInfoRsp::~TCrossAllianceTreasureBoxGetBoxInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceTreasureBoxGetBoxInfoRsp)
  SharedDtor();
}

void TCrossAllianceTreasureBoxGetBoxInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceTreasureBoxGetBoxInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxGetBoxInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceTreasureBoxGetBoxInfoRsp_descriptor_;
}

const TCrossAllianceTreasureBoxGetBoxInfoRsp& TCrossAllianceTreasureBoxGetBoxInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossAllianceTreasureBox_2eproto();
  return *default_instance_;
}

TCrossAllianceTreasureBoxGetBoxInfoRsp* TCrossAllianceTreasureBoxGetBoxInfoRsp::default_instance_ = NULL;

TCrossAllianceTreasureBoxGetBoxInfoRsp* TCrossAllianceTreasureBoxGetBoxInfoRsp::New() const {
  return new TCrossAllianceTreasureBoxGetBoxInfoRsp;
}

void TCrossAllianceTreasureBoxGetBoxInfoRsp::Clear() {
  boxinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceTreasureBoxGetBoxInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceTreasureBoxGetBoxInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossAllianceTreasureBoxInfo BoxInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_BoxInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BoxInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceTreasureBoxGetBoxInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceTreasureBoxGetBoxInfoRsp)
  return false;
#undef DO_
}

void TCrossAllianceTreasureBoxGetBoxInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceTreasureBoxGetBoxInfoRsp)
  // repeated .pb.TCrossAllianceTreasureBoxInfo BoxInfoArr = 1;
  for (int i = 0; i < this->boxinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->boxinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceTreasureBoxGetBoxInfoRsp)
}

::google::protobuf::uint8* TCrossAllianceTreasureBoxGetBoxInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceTreasureBoxGetBoxInfoRsp)
  // repeated .pb.TCrossAllianceTreasureBoxInfo BoxInfoArr = 1;
  for (int i = 0; i < this->boxinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->boxinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceTreasureBoxGetBoxInfoRsp)
  return target;
}

int TCrossAllianceTreasureBoxGetBoxInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossAllianceTreasureBoxInfo BoxInfoArr = 1;
  total_size += 1 * this->boxinfoarr_size();
  for (int i = 0; i < this->boxinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceTreasureBoxGetBoxInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceTreasureBoxGetBoxInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceTreasureBoxGetBoxInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceTreasureBoxGetBoxInfoRsp::MergeFrom(const TCrossAllianceTreasureBoxGetBoxInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxinfoarr_.MergeFrom(from.boxinfoarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceTreasureBoxGetBoxInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceTreasureBoxGetBoxInfoRsp::CopyFrom(const TCrossAllianceTreasureBoxGetBoxInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceTreasureBoxGetBoxInfoRsp::IsInitialized() const {

  return true;
}

void TCrossAllianceTreasureBoxGetBoxInfoRsp::Swap(TCrossAllianceTreasureBoxGetBoxInfoRsp* other) {
  if (other != this) {
    boxinfoarr_.Swap(&other->boxinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceTreasureBoxGetBoxInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceTreasureBoxGetBoxInfoRsp_descriptor_;
  metadata.reflection = TCrossAllianceTreasureBoxGetBoxInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceTreasureBoxReceiveTreasureBoxReq::kIdFieldNumber;
const int TCrossAllianceTreasureBoxReceiveTreasureBoxReq::kTypeFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceTreasureBoxReceiveTreasureBoxReq::TCrossAllianceTreasureBoxReceiveTreasureBoxReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxReq)
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxReq::InitAsDefaultInstance() {
}

TCrossAllianceTreasureBoxReceiveTreasureBoxReq::TCrossAllianceTreasureBoxReceiveTreasureBoxReq(const TCrossAllianceTreasureBoxReceiveTreasureBoxReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxReq)
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceTreasureBoxReceiveTreasureBoxReq::~TCrossAllianceTreasureBoxReceiveTreasureBoxReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxReq)
  SharedDtor();
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxReceiveTreasureBoxReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceTreasureBoxReceiveTreasureBoxReq_descriptor_;
}

const TCrossAllianceTreasureBoxReceiveTreasureBoxReq& TCrossAllianceTreasureBoxReceiveTreasureBoxReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossAllianceTreasureBox_2eproto();
  return *default_instance_;
}

TCrossAllianceTreasureBoxReceiveTreasureBoxReq* TCrossAllianceTreasureBoxReceiveTreasureBoxReq::default_instance_ = NULL;

TCrossAllianceTreasureBoxReceiveTreasureBoxReq* TCrossAllianceTreasureBoxReceiveTreasureBoxReq::New() const {
  return new TCrossAllianceTreasureBoxReceiveTreasureBoxReq;
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceTreasureBoxReceiveTreasureBoxReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional .pb.EBoxType Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EBoxType_IsValid(value)) {
            set_type(static_cast< ::pb::EBoxType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxReq)
  return false;
#undef DO_
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .pb.EBoxType Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxReq)
}

::google::protobuf::uint8* TCrossAllianceTreasureBoxReceiveTreasureBoxReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .pb.EBoxType Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxReq)
  return target;
}

int TCrossAllianceTreasureBoxReceiveTreasureBoxReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .pb.EBoxType Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceTreasureBoxReceiveTreasureBoxReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceTreasureBoxReceiveTreasureBoxReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxReq::MergeFrom(const TCrossAllianceTreasureBoxReceiveTreasureBoxReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxReq::CopyFrom(const TCrossAllianceTreasureBoxReceiveTreasureBoxReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceTreasureBoxReceiveTreasureBoxReq::IsInitialized() const {

  return true;
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxReq::Swap(TCrossAllianceTreasureBoxReceiveTreasureBoxReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceTreasureBoxReceiveTreasureBoxReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceTreasureBoxReceiveTreasureBoxReq_descriptor_;
  metadata.reflection = TCrossAllianceTreasureBoxReceiveTreasureBoxReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::kRewardArrFieldNumber;
const int TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::kLastTimeFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::TCrossAllianceTreasureBoxReceiveTreasureBoxRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxRsp)
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::InitAsDefaultInstance() {
}

TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::TCrossAllianceTreasureBoxReceiveTreasureBoxRsp(const TCrossAllianceTreasureBoxReceiveTreasureBoxRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxRsp)
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::SharedCtor() {
  _cached_size_ = 0;
  lasttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::~TCrossAllianceTreasureBoxReceiveTreasureBoxRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxRsp)
  SharedDtor();
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceTreasureBoxReceiveTreasureBoxRsp_descriptor_;
}

const TCrossAllianceTreasureBoxReceiveTreasureBoxRsp& TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossAllianceTreasureBox_2eproto();
  return *default_instance_;
}

TCrossAllianceTreasureBoxReceiveTreasureBoxRsp* TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::default_instance_ = NULL;

TCrossAllianceTreasureBoxReceiveTreasureBoxRsp* TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::New() const {
  return new TCrossAllianceTreasureBoxReceiveTreasureBoxRsp;
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::Clear() {
  lasttime_ = GOOGLE_ULONGLONG(0);
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectTag(16)) goto parse_LastTime;
        break;
      }

      // optional uint64 LastTime = 2;
      case 2: {
        if (tag == 16) {
         parse_LastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxRsp)
  return false;
#undef DO_
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  // optional uint64 LastTime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxRsp)
}

::google::protobuf::uint8* TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  // optional uint64 LastTime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceTreasureBoxReceiveTreasureBoxRsp)
  return target;
}

int TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 LastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lasttime());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceTreasureBoxReceiveTreasureBoxRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceTreasureBoxReceiveTreasureBoxRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::MergeFrom(const TCrossAllianceTreasureBoxReceiveTreasureBoxRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::CopyFrom(const TCrossAllianceTreasureBoxReceiveTreasureBoxRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::IsInitialized() const {

  return true;
}

void TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::Swap(TCrossAllianceTreasureBoxReceiveTreasureBoxRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceTreasureBoxReceiveTreasureBoxRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceTreasureBoxReceiveTreasureBoxRsp_descriptor_;
  metadata.reflection = TCrossAllianceTreasureBoxReceiveTreasureBoxRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp)
}

void TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::InitAsDefaultInstance() {
}

TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp(const TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp)
}

void TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::~TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp)
  SharedDtor();
}

void TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp_descriptor_;
}

const TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp& TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossAllianceTreasureBox_2eproto();
  return *default_instance_;
}

TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp* TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::default_instance_ = NULL;

TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp* TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::New() const {
  return new TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp;
}

void TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp)
  return false;
#undef DO_
}

void TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp)
}

::google::protobuf::uint8* TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp)
  return target;
}

int TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::MergeFrom(const TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::CopyFrom(const TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::IsInitialized() const {

  return true;
}

void TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::Swap(TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp_descriptor_;
  metadata.reflection = TCrossAllianceTreasureBoxReceiveReceiveAllBoxRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceTreasureBoxSetAnonymityReq::kSetAnonymityFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceTreasureBoxSetAnonymityReq::TCrossAllianceTreasureBoxSetAnonymityReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceTreasureBoxSetAnonymityReq)
}

void TCrossAllianceTreasureBoxSetAnonymityReq::InitAsDefaultInstance() {
}

TCrossAllianceTreasureBoxSetAnonymityReq::TCrossAllianceTreasureBoxSetAnonymityReq(const TCrossAllianceTreasureBoxSetAnonymityReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceTreasureBoxSetAnonymityReq)
}

void TCrossAllianceTreasureBoxSetAnonymityReq::SharedCtor() {
  _cached_size_ = 0;
  setanonymity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceTreasureBoxSetAnonymityReq::~TCrossAllianceTreasureBoxSetAnonymityReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceTreasureBoxSetAnonymityReq)
  SharedDtor();
}

void TCrossAllianceTreasureBoxSetAnonymityReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceTreasureBoxSetAnonymityReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxSetAnonymityReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceTreasureBoxSetAnonymityReq_descriptor_;
}

const TCrossAllianceTreasureBoxSetAnonymityReq& TCrossAllianceTreasureBoxSetAnonymityReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossAllianceTreasureBox_2eproto();
  return *default_instance_;
}

TCrossAllianceTreasureBoxSetAnonymityReq* TCrossAllianceTreasureBoxSetAnonymityReq::default_instance_ = NULL;

TCrossAllianceTreasureBoxSetAnonymityReq* TCrossAllianceTreasureBoxSetAnonymityReq::New() const {
  return new TCrossAllianceTreasureBoxSetAnonymityReq;
}

void TCrossAllianceTreasureBoxSetAnonymityReq::Clear() {
  setanonymity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceTreasureBoxSetAnonymityReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceTreasureBoxSetAnonymityReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SetAnonymity = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setanonymity_)));
          set_has_setanonymity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceTreasureBoxSetAnonymityReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceTreasureBoxSetAnonymityReq)
  return false;
#undef DO_
}

void TCrossAllianceTreasureBoxSetAnonymityReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceTreasureBoxSetAnonymityReq)
  // optional uint32 SetAnonymity = 1;
  if (has_setanonymity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->setanonymity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceTreasureBoxSetAnonymityReq)
}

::google::protobuf::uint8* TCrossAllianceTreasureBoxSetAnonymityReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceTreasureBoxSetAnonymityReq)
  // optional uint32 SetAnonymity = 1;
  if (has_setanonymity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->setanonymity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceTreasureBoxSetAnonymityReq)
  return target;
}

int TCrossAllianceTreasureBoxSetAnonymityReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SetAnonymity = 1;
    if (has_setanonymity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setanonymity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceTreasureBoxSetAnonymityReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceTreasureBoxSetAnonymityReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceTreasureBoxSetAnonymityReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceTreasureBoxSetAnonymityReq::MergeFrom(const TCrossAllianceTreasureBoxSetAnonymityReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setanonymity()) {
      set_setanonymity(from.setanonymity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceTreasureBoxSetAnonymityReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceTreasureBoxSetAnonymityReq::CopyFrom(const TCrossAllianceTreasureBoxSetAnonymityReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceTreasureBoxSetAnonymityReq::IsInitialized() const {

  return true;
}

void TCrossAllianceTreasureBoxSetAnonymityReq::Swap(TCrossAllianceTreasureBoxSetAnonymityReq* other) {
  if (other != this) {
    std::swap(setanonymity_, other->setanonymity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceTreasureBoxSetAnonymityReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceTreasureBoxSetAnonymityReq_descriptor_;
  metadata.reflection = TCrossAllianceTreasureBoxSetAnonymityReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceTreasureBoxSetAnonymityRsp::kIsAnonymityFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceTreasureBoxSetAnonymityRsp::TCrossAllianceTreasureBoxSetAnonymityRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceTreasureBoxSetAnonymityRsp)
}

void TCrossAllianceTreasureBoxSetAnonymityRsp::InitAsDefaultInstance() {
}

TCrossAllianceTreasureBoxSetAnonymityRsp::TCrossAllianceTreasureBoxSetAnonymityRsp(const TCrossAllianceTreasureBoxSetAnonymityRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceTreasureBoxSetAnonymityRsp)
}

void TCrossAllianceTreasureBoxSetAnonymityRsp::SharedCtor() {
  _cached_size_ = 0;
  isanonymity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceTreasureBoxSetAnonymityRsp::~TCrossAllianceTreasureBoxSetAnonymityRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceTreasureBoxSetAnonymityRsp)
  SharedDtor();
}

void TCrossAllianceTreasureBoxSetAnonymityRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossAllianceTreasureBoxSetAnonymityRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxSetAnonymityRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceTreasureBoxSetAnonymityRsp_descriptor_;
}

const TCrossAllianceTreasureBoxSetAnonymityRsp& TCrossAllianceTreasureBoxSetAnonymityRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossAllianceTreasureBox_2eproto();
  return *default_instance_;
}

TCrossAllianceTreasureBoxSetAnonymityRsp* TCrossAllianceTreasureBoxSetAnonymityRsp::default_instance_ = NULL;

TCrossAllianceTreasureBoxSetAnonymityRsp* TCrossAllianceTreasureBoxSetAnonymityRsp::New() const {
  return new TCrossAllianceTreasureBoxSetAnonymityRsp;
}

void TCrossAllianceTreasureBoxSetAnonymityRsp::Clear() {
  isanonymity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceTreasureBoxSetAnonymityRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceTreasureBoxSetAnonymityRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IsAnonymity = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isanonymity_)));
          set_has_isanonymity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceTreasureBoxSetAnonymityRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceTreasureBoxSetAnonymityRsp)
  return false;
#undef DO_
}

void TCrossAllianceTreasureBoxSetAnonymityRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceTreasureBoxSetAnonymityRsp)
  // optional uint32 IsAnonymity = 2;
  if (has_isanonymity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isanonymity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceTreasureBoxSetAnonymityRsp)
}

::google::protobuf::uint8* TCrossAllianceTreasureBoxSetAnonymityRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceTreasureBoxSetAnonymityRsp)
  // optional uint32 IsAnonymity = 2;
  if (has_isanonymity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isanonymity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceTreasureBoxSetAnonymityRsp)
  return target;
}

int TCrossAllianceTreasureBoxSetAnonymityRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IsAnonymity = 2;
    if (has_isanonymity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isanonymity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceTreasureBoxSetAnonymityRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceTreasureBoxSetAnonymityRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceTreasureBoxSetAnonymityRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceTreasureBoxSetAnonymityRsp::MergeFrom(const TCrossAllianceTreasureBoxSetAnonymityRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isanonymity()) {
      set_isanonymity(from.isanonymity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceTreasureBoxSetAnonymityRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceTreasureBoxSetAnonymityRsp::CopyFrom(const TCrossAllianceTreasureBoxSetAnonymityRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceTreasureBoxSetAnonymityRsp::IsInitialized() const {

  return true;
}

void TCrossAllianceTreasureBoxSetAnonymityRsp::Swap(TCrossAllianceTreasureBoxSetAnonymityRsp* other) {
  if (other != this) {
    std::swap(isanonymity_, other->isanonymity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceTreasureBoxSetAnonymityRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceTreasureBoxSetAnonymityRsp_descriptor_;
  metadata.reflection = TCrossAllianceTreasureBoxSetAnonymityRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossAllianceTreasureBoxDataChangeNotify::kResourcePointFieldNumber;
const int TCrossAllianceTreasureBoxDataChangeNotify::kBoxLevelFieldNumber;
const int TCrossAllianceTreasureBoxDataChangeNotify::kOpenedTimesFieldNumber;
const int TCrossAllianceTreasureBoxDataChangeNotify::kActiveBoxInfoFieldNumber;
const int TCrossAllianceTreasureBoxDataChangeNotify::kRechargeBoxInfoFieldNumber;
const int TCrossAllianceTreasureBoxDataChangeNotify::kResourceBoxInfoFieldNumber;
#endif  // !_MSC_VER

TCrossAllianceTreasureBoxDataChangeNotify::TCrossAllianceTreasureBoxDataChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossAllianceTreasureBoxDataChangeNotify)
}

void TCrossAllianceTreasureBoxDataChangeNotify::InitAsDefaultInstance() {
  activeboxinfo_ = const_cast< ::pb::TCrossAllianceTreasureBoxInfo*>(&::pb::TCrossAllianceTreasureBoxInfo::default_instance());
  rechargeboxinfo_ = const_cast< ::pb::TCrossAllianceTreasureBoxInfo*>(&::pb::TCrossAllianceTreasureBoxInfo::default_instance());
  resourceboxinfo_ = const_cast< ::pb::TCrossAllianceTreasureBoxInfo*>(&::pb::TCrossAllianceTreasureBoxInfo::default_instance());
}

TCrossAllianceTreasureBoxDataChangeNotify::TCrossAllianceTreasureBoxDataChangeNotify(const TCrossAllianceTreasureBoxDataChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossAllianceTreasureBoxDataChangeNotify)
}

void TCrossAllianceTreasureBoxDataChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  resourcepoint_ = 0u;
  boxlevel_ = 0u;
  openedtimes_ = 0u;
  activeboxinfo_ = NULL;
  rechargeboxinfo_ = NULL;
  resourceboxinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossAllianceTreasureBoxDataChangeNotify::~TCrossAllianceTreasureBoxDataChangeNotify() {
  // @@protoc_insertion_point(destructor:pb.TCrossAllianceTreasureBoxDataChangeNotify)
  SharedDtor();
}

void TCrossAllianceTreasureBoxDataChangeNotify::SharedDtor() {
  if (this != default_instance_) {
    delete activeboxinfo_;
    delete rechargeboxinfo_;
    delete resourceboxinfo_;
  }
}

void TCrossAllianceTreasureBoxDataChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossAllianceTreasureBoxDataChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossAllianceTreasureBoxDataChangeNotify_descriptor_;
}

const TCrossAllianceTreasureBoxDataChangeNotify& TCrossAllianceTreasureBoxDataChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossAllianceTreasureBox_2eproto();
  return *default_instance_;
}

TCrossAllianceTreasureBoxDataChangeNotify* TCrossAllianceTreasureBoxDataChangeNotify::default_instance_ = NULL;

TCrossAllianceTreasureBoxDataChangeNotify* TCrossAllianceTreasureBoxDataChangeNotify::New() const {
  return new TCrossAllianceTreasureBoxDataChangeNotify;
}

void TCrossAllianceTreasureBoxDataChangeNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossAllianceTreasureBoxDataChangeNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(resourcepoint_, boxlevel_);
    openedtimes_ = 0u;
    if (has_activeboxinfo()) {
      if (activeboxinfo_ != NULL) activeboxinfo_->::pb::TCrossAllianceTreasureBoxInfo::Clear();
    }
    if (has_rechargeboxinfo()) {
      if (rechargeboxinfo_ != NULL) rechargeboxinfo_->::pb::TCrossAllianceTreasureBoxInfo::Clear();
    }
    if (has_resourceboxinfo()) {
      if (resourceboxinfo_ != NULL) resourceboxinfo_->::pb::TCrossAllianceTreasureBoxInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossAllianceTreasureBoxDataChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossAllianceTreasureBoxDataChangeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ResourcePoint = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resourcepoint_)));
          set_has_resourcepoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BoxLevel;
        break;
      }

      // optional uint32 BoxLevel = 2;
      case 2: {
        if (tag == 16) {
         parse_BoxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxlevel_)));
          set_has_boxlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_OpenedTimes;
        break;
      }

      // optional uint32 OpenedTimes = 3;
      case 3: {
        if (tag == 24) {
         parse_OpenedTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openedtimes_)));
          set_has_openedtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ActiveBoxInfo;
        break;
      }

      // optional .pb.TCrossAllianceTreasureBoxInfo ActiveBoxInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_ActiveBoxInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activeboxinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RechargeBoxInfo;
        break;
      }

      // optional .pb.TCrossAllianceTreasureBoxInfo RechargeBoxInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_RechargeBoxInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rechargeboxinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ResourceBoxInfo;
        break;
      }

      // optional .pb.TCrossAllianceTreasureBoxInfo ResourceBoxInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_ResourceBoxInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resourceboxinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossAllianceTreasureBoxDataChangeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossAllianceTreasureBoxDataChangeNotify)
  return false;
#undef DO_
}

void TCrossAllianceTreasureBoxDataChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossAllianceTreasureBoxDataChangeNotify)
  // optional uint32 ResourcePoint = 1;
  if (has_resourcepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resourcepoint(), output);
  }

  // optional uint32 BoxLevel = 2;
  if (has_boxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boxlevel(), output);
  }

  // optional uint32 OpenedTimes = 3;
  if (has_openedtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->openedtimes(), output);
  }

  // optional .pb.TCrossAllianceTreasureBoxInfo ActiveBoxInfo = 4;
  if (has_activeboxinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->activeboxinfo(), output);
  }

  // optional .pb.TCrossAllianceTreasureBoxInfo RechargeBoxInfo = 5;
  if (has_rechargeboxinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rechargeboxinfo(), output);
  }

  // optional .pb.TCrossAllianceTreasureBoxInfo ResourceBoxInfo = 6;
  if (has_resourceboxinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->resourceboxinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossAllianceTreasureBoxDataChangeNotify)
}

::google::protobuf::uint8* TCrossAllianceTreasureBoxDataChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossAllianceTreasureBoxDataChangeNotify)
  // optional uint32 ResourcePoint = 1;
  if (has_resourcepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resourcepoint(), target);
  }

  // optional uint32 BoxLevel = 2;
  if (has_boxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boxlevel(), target);
  }

  // optional uint32 OpenedTimes = 3;
  if (has_openedtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->openedtimes(), target);
  }

  // optional .pb.TCrossAllianceTreasureBoxInfo ActiveBoxInfo = 4;
  if (has_activeboxinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->activeboxinfo(), target);
  }

  // optional .pb.TCrossAllianceTreasureBoxInfo RechargeBoxInfo = 5;
  if (has_rechargeboxinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rechargeboxinfo(), target);
  }

  // optional .pb.TCrossAllianceTreasureBoxInfo ResourceBoxInfo = 6;
  if (has_resourceboxinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->resourceboxinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossAllianceTreasureBoxDataChangeNotify)
  return target;
}

int TCrossAllianceTreasureBoxDataChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ResourcePoint = 1;
    if (has_resourcepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resourcepoint());
    }

    // optional uint32 BoxLevel = 2;
    if (has_boxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxlevel());
    }

    // optional uint32 OpenedTimes = 3;
    if (has_openedtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openedtimes());
    }

    // optional .pb.TCrossAllianceTreasureBoxInfo ActiveBoxInfo = 4;
    if (has_activeboxinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activeboxinfo());
    }

    // optional .pb.TCrossAllianceTreasureBoxInfo RechargeBoxInfo = 5;
    if (has_rechargeboxinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rechargeboxinfo());
    }

    // optional .pb.TCrossAllianceTreasureBoxInfo ResourceBoxInfo = 6;
    if (has_resourceboxinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resourceboxinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossAllianceTreasureBoxDataChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossAllianceTreasureBoxDataChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossAllianceTreasureBoxDataChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossAllianceTreasureBoxDataChangeNotify::MergeFrom(const TCrossAllianceTreasureBoxDataChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resourcepoint()) {
      set_resourcepoint(from.resourcepoint());
    }
    if (from.has_boxlevel()) {
      set_boxlevel(from.boxlevel());
    }
    if (from.has_openedtimes()) {
      set_openedtimes(from.openedtimes());
    }
    if (from.has_activeboxinfo()) {
      mutable_activeboxinfo()->::pb::TCrossAllianceTreasureBoxInfo::MergeFrom(from.activeboxinfo());
    }
    if (from.has_rechargeboxinfo()) {
      mutable_rechargeboxinfo()->::pb::TCrossAllianceTreasureBoxInfo::MergeFrom(from.rechargeboxinfo());
    }
    if (from.has_resourceboxinfo()) {
      mutable_resourceboxinfo()->::pb::TCrossAllianceTreasureBoxInfo::MergeFrom(from.resourceboxinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossAllianceTreasureBoxDataChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossAllianceTreasureBoxDataChangeNotify::CopyFrom(const TCrossAllianceTreasureBoxDataChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossAllianceTreasureBoxDataChangeNotify::IsInitialized() const {

  return true;
}

void TCrossAllianceTreasureBoxDataChangeNotify::Swap(TCrossAllianceTreasureBoxDataChangeNotify* other) {
  if (other != this) {
    std::swap(resourcepoint_, other->resourcepoint_);
    std::swap(boxlevel_, other->boxlevel_);
    std::swap(openedtimes_, other->openedtimes_);
    std::swap(activeboxinfo_, other->activeboxinfo_);
    std::swap(rechargeboxinfo_, other->rechargeboxinfo_);
    std::swap(resourceboxinfo_, other->resourceboxinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossAllianceTreasureBoxDataChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossAllianceTreasureBoxDataChangeNotify_descriptor_;
  metadata.reflection = TCrossAllianceTreasureBoxDataChangeNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
