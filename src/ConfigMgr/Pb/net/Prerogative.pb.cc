// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Prerogative.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Prerogative.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TPrerogativeGainData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPrerogativeGainData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPrerogativeBuffData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPrerogativeBuffData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPrerogativeRankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPrerogativeRankData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPrerogativeGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPrerogativeGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPrerogativeInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPrerogativeInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPrerogativeGainLevelUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPrerogativeGainLevelUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPrerogativeGainLevelUpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPrerogativeGainLevelUpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPrerogativePrerogativeLevelUpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPrerogativePrerogativeLevelUpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPrerogativePrerogativeBuyBuffReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPrerogativePrerogativeBuyBuffReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPrerogativePrerogativeBuyBuffRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPrerogativePrerogativeBuyBuffRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fPrerogative_2eproto() {
  protobuf_AddDesc_net_2fPrerogative_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Prerogative.proto");
  GOOGLE_CHECK(file != NULL);
  TPrerogativeGainData_descriptor_ = file->message_type(0);
  static const int TPrerogativeGainData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGainData, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGainData, level_),
  };
  TPrerogativeGainData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPrerogativeGainData_descriptor_,
      TPrerogativeGainData::default_instance_,
      TPrerogativeGainData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGainData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGainData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPrerogativeGainData));
  TPrerogativeBuffData_descriptor_ = file->message_type(1);
  static const int TPrerogativeBuffData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeBuffData, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeBuffData, resettime_),
  };
  TPrerogativeBuffData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPrerogativeBuffData_descriptor_,
      TPrerogativeBuffData::default_instance_,
      TPrerogativeBuffData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeBuffData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeBuffData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPrerogativeBuffData));
  TPrerogativeRankData_descriptor_ = file->message_type(2);
  static const int TPrerogativeRankData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeRankData, ranklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeRankData, gainarr_),
  };
  TPrerogativeRankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPrerogativeRankData_descriptor_,
      TPrerogativeRankData::default_instance_,
      TPrerogativeRankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeRankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeRankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPrerogativeRankData));
  TPrerogativeGetInfoRsp_descriptor_ = file->message_type(3);
  static const int TPrerogativeGetInfoRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGetInfoRsp, prerogativelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGetInfoRsp, exploitnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGetInfoRsp, exploitconsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGetInfoRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGetInfoRsp, buffarr_),
  };
  TPrerogativeGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPrerogativeGetInfoRsp_descriptor_,
      TPrerogativeGetInfoRsp::default_instance_,
      TPrerogativeGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPrerogativeGetInfoRsp));
  TPrerogativeInfoNotify_descriptor_ = file->message_type(4);
  static const int TPrerogativeInfoNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeInfoNotify, exploitnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeInfoNotify, exploitconsum_),
  };
  TPrerogativeInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPrerogativeInfoNotify_descriptor_,
      TPrerogativeInfoNotify::default_instance_,
      TPrerogativeInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPrerogativeInfoNotify));
  TPrerogativeGainLevelUpReq_descriptor_ = file->message_type(5);
  static const int TPrerogativeGainLevelUpReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGainLevelUpReq, prerogativelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGainLevelUpReq, gaintid_),
  };
  TPrerogativeGainLevelUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPrerogativeGainLevelUpReq_descriptor_,
      TPrerogativeGainLevelUpReq::default_instance_,
      TPrerogativeGainLevelUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGainLevelUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGainLevelUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPrerogativeGainLevelUpReq));
  TPrerogativeGainLevelUpRsp_descriptor_ = file->message_type(6);
  static const int TPrerogativeGainLevelUpRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGainLevelUpRsp, level_),
  };
  TPrerogativeGainLevelUpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPrerogativeGainLevelUpRsp_descriptor_,
      TPrerogativeGainLevelUpRsp::default_instance_,
      TPrerogativeGainLevelUpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGainLevelUpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativeGainLevelUpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPrerogativeGainLevelUpRsp));
  TPrerogativePrerogativeLevelUpRsp_descriptor_ = file->message_type(7);
  static const int TPrerogativePrerogativeLevelUpRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativePrerogativeLevelUpRsp, level_),
  };
  TPrerogativePrerogativeLevelUpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPrerogativePrerogativeLevelUpRsp_descriptor_,
      TPrerogativePrerogativeLevelUpRsp::default_instance_,
      TPrerogativePrerogativeLevelUpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativePrerogativeLevelUpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativePrerogativeLevelUpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPrerogativePrerogativeLevelUpRsp));
  TPrerogativePrerogativeBuyBuffReq_descriptor_ = file->message_type(8);
  static const int TPrerogativePrerogativeBuyBuffReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativePrerogativeBuyBuffReq, bufftid_),
  };
  TPrerogativePrerogativeBuyBuffReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPrerogativePrerogativeBuyBuffReq_descriptor_,
      TPrerogativePrerogativeBuyBuffReq::default_instance_,
      TPrerogativePrerogativeBuyBuffReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativePrerogativeBuyBuffReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativePrerogativeBuyBuffReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPrerogativePrerogativeBuyBuffReq));
  TPrerogativePrerogativeBuyBuffRsp_descriptor_ = file->message_type(9);
  static const int TPrerogativePrerogativeBuyBuffRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativePrerogativeBuyBuffRsp, resettime_),
  };
  TPrerogativePrerogativeBuyBuffRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPrerogativePrerogativeBuyBuffRsp_descriptor_,
      TPrerogativePrerogativeBuyBuffRsp::default_instance_,
      TPrerogativePrerogativeBuyBuffRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativePrerogativeBuyBuffRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPrerogativePrerogativeBuyBuffRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPrerogativePrerogativeBuyBuffRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fPrerogative_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPrerogativeGainData_descriptor_, &TPrerogativeGainData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPrerogativeBuffData_descriptor_, &TPrerogativeBuffData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPrerogativeRankData_descriptor_, &TPrerogativeRankData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPrerogativeGetInfoRsp_descriptor_, &TPrerogativeGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPrerogativeInfoNotify_descriptor_, &TPrerogativeInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPrerogativeGainLevelUpReq_descriptor_, &TPrerogativeGainLevelUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPrerogativeGainLevelUpRsp_descriptor_, &TPrerogativeGainLevelUpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPrerogativePrerogativeLevelUpRsp_descriptor_, &TPrerogativePrerogativeLevelUpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPrerogativePrerogativeBuyBuffReq_descriptor_, &TPrerogativePrerogativeBuyBuffReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPrerogativePrerogativeBuyBuffRsp_descriptor_, &TPrerogativePrerogativeBuyBuffRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fPrerogative_2eproto() {
  delete TPrerogativeGainData::default_instance_;
  delete TPrerogativeGainData_reflection_;
  delete TPrerogativeBuffData::default_instance_;
  delete TPrerogativeBuffData_reflection_;
  delete TPrerogativeRankData::default_instance_;
  delete TPrerogativeRankData_reflection_;
  delete TPrerogativeGetInfoRsp::default_instance_;
  delete TPrerogativeGetInfoRsp_reflection_;
  delete TPrerogativeInfoNotify::default_instance_;
  delete TPrerogativeInfoNotify_reflection_;
  delete TPrerogativeGainLevelUpReq::default_instance_;
  delete TPrerogativeGainLevelUpReq_reflection_;
  delete TPrerogativeGainLevelUpRsp::default_instance_;
  delete TPrerogativeGainLevelUpRsp_reflection_;
  delete TPrerogativePrerogativeLevelUpRsp::default_instance_;
  delete TPrerogativePrerogativeLevelUpRsp_reflection_;
  delete TPrerogativePrerogativeBuyBuffReq::default_instance_;
  delete TPrerogativePrerogativeBuyBuffReq_reflection_;
  delete TPrerogativePrerogativeBuyBuffRsp::default_instance_;
  delete TPrerogativePrerogativeBuyBuffRsp_reflection_;
}

void protobuf_AddDesc_net_2fPrerogative_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025net/Prerogative.proto\022\002pb\"2\n\024TPrerogat"
    "iveGainData\022\013\n\003Tid\030\001 \001(\r\022\r\n\005Level\030\002 \001(\r\""
    "6\n\024TPrerogativeBuffData\022\013\n\003Tid\030\001 \001(\r\022\021\n\t"
    "ResetTime\030\002 \001(\003\"Q\n\024TPrerogativeRankData\022"
    "\016\n\006RankLv\030\001 \001(\r\022)\n\007GainArr\030\002 \003(\0132\030.pb.TP"
    "rerogativeGainData\"\260\001\n\026TPrerogativeGetIn"
    "foRsp\022\025\n\rPrerogativeLv\030\001 \001(\r\022\022\n\nExploitN"
    "um\030\002 \001(\r\022\025\n\rExploitConsum\030\003 \001(\r\022)\n\007RankA"
    "rr\030\004 \003(\0132\030.pb.TPrerogativeRankData\022)\n\007Bu"
    "ffArr\030\005 \003(\0132\030.pb.TPrerogativeBuffData\"C\n"
    "\026TPrerogativeInfoNotify\022\022\n\nExploitNum\030\001 "
    "\001(\r\022\025\n\rExploitConsum\030\002 \001(\r\"D\n\032TPrerogati"
    "veGainLevelUpReq\022\025\n\rPrerogativeLv\030\001 \001(\r\022"
    "\017\n\007GainTid\030\002 \001(\r\"+\n\032TPrerogativeGainLeve"
    "lUpRsp\022\r\n\005Level\030\003 \001(\r\"2\n!TPrerogativePre"
    "rogativeLevelUpRsp\022\r\n\005Level\030\001 \001(\r\"4\n!TPr"
    "erogativePrerogativeBuyBuffReq\022\017\n\007BuffTi"
    "d\030\001 \001(\r\"6\n!TPrerogativePrerogativeBuyBuf"
    "fRsp\022\021\n\tResetTime\030\002 \001(\003", 743);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Prerogative.proto", &protobuf_RegisterTypes);
  TPrerogativeGainData::default_instance_ = new TPrerogativeGainData();
  TPrerogativeBuffData::default_instance_ = new TPrerogativeBuffData();
  TPrerogativeRankData::default_instance_ = new TPrerogativeRankData();
  TPrerogativeGetInfoRsp::default_instance_ = new TPrerogativeGetInfoRsp();
  TPrerogativeInfoNotify::default_instance_ = new TPrerogativeInfoNotify();
  TPrerogativeGainLevelUpReq::default_instance_ = new TPrerogativeGainLevelUpReq();
  TPrerogativeGainLevelUpRsp::default_instance_ = new TPrerogativeGainLevelUpRsp();
  TPrerogativePrerogativeLevelUpRsp::default_instance_ = new TPrerogativePrerogativeLevelUpRsp();
  TPrerogativePrerogativeBuyBuffReq::default_instance_ = new TPrerogativePrerogativeBuyBuffReq();
  TPrerogativePrerogativeBuyBuffRsp::default_instance_ = new TPrerogativePrerogativeBuyBuffRsp();
  TPrerogativeGainData::default_instance_->InitAsDefaultInstance();
  TPrerogativeBuffData::default_instance_->InitAsDefaultInstance();
  TPrerogativeRankData::default_instance_->InitAsDefaultInstance();
  TPrerogativeGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TPrerogativeInfoNotify::default_instance_->InitAsDefaultInstance();
  TPrerogativeGainLevelUpReq::default_instance_->InitAsDefaultInstance();
  TPrerogativeGainLevelUpRsp::default_instance_->InitAsDefaultInstance();
  TPrerogativePrerogativeLevelUpRsp::default_instance_->InitAsDefaultInstance();
  TPrerogativePrerogativeBuyBuffReq::default_instance_->InitAsDefaultInstance();
  TPrerogativePrerogativeBuyBuffRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fPrerogative_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fPrerogative_2eproto {
  StaticDescriptorInitializer_net_2fPrerogative_2eproto() {
    protobuf_AddDesc_net_2fPrerogative_2eproto();
  }
} static_descriptor_initializer_net_2fPrerogative_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TPrerogativeGainData::kTidFieldNumber;
const int TPrerogativeGainData::kLevelFieldNumber;
#endif  // !_MSC_VER

TPrerogativeGainData::TPrerogativeGainData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPrerogativeGainData)
}

void TPrerogativeGainData::InitAsDefaultInstance() {
}

TPrerogativeGainData::TPrerogativeGainData(const TPrerogativeGainData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPrerogativeGainData)
}

void TPrerogativeGainData::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPrerogativeGainData::~TPrerogativeGainData() {
  // @@protoc_insertion_point(destructor:pb.TPrerogativeGainData)
  SharedDtor();
}

void TPrerogativeGainData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPrerogativeGainData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPrerogativeGainData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPrerogativeGainData_descriptor_;
}

const TPrerogativeGainData& TPrerogativeGainData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPrerogative_2eproto();
  return *default_instance_;
}

TPrerogativeGainData* TPrerogativeGainData::default_instance_ = NULL;

TPrerogativeGainData* TPrerogativeGainData::New() const {
  return new TPrerogativeGainData;
}

void TPrerogativeGainData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPrerogativeGainData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tid_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPrerogativeGainData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPrerogativeGainData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 2;
      case 2: {
        if (tag == 16) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPrerogativeGainData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPrerogativeGainData)
  return false;
#undef DO_
}

void TPrerogativeGainData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPrerogativeGainData)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPrerogativeGainData)
}

::google::protobuf::uint8* TPrerogativeGainData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPrerogativeGainData)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPrerogativeGainData)
  return target;
}

int TPrerogativeGainData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPrerogativeGainData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPrerogativeGainData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPrerogativeGainData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPrerogativeGainData::MergeFrom(const TPrerogativeGainData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPrerogativeGainData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPrerogativeGainData::CopyFrom(const TPrerogativeGainData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPrerogativeGainData::IsInitialized() const {

  return true;
}

void TPrerogativeGainData::Swap(TPrerogativeGainData* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPrerogativeGainData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPrerogativeGainData_descriptor_;
  metadata.reflection = TPrerogativeGainData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPrerogativeBuffData::kTidFieldNumber;
const int TPrerogativeBuffData::kResetTimeFieldNumber;
#endif  // !_MSC_VER

TPrerogativeBuffData::TPrerogativeBuffData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPrerogativeBuffData)
}

void TPrerogativeBuffData::InitAsDefaultInstance() {
}

TPrerogativeBuffData::TPrerogativeBuffData(const TPrerogativeBuffData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPrerogativeBuffData)
}

void TPrerogativeBuffData::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  resettime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPrerogativeBuffData::~TPrerogativeBuffData() {
  // @@protoc_insertion_point(destructor:pb.TPrerogativeBuffData)
  SharedDtor();
}

void TPrerogativeBuffData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPrerogativeBuffData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPrerogativeBuffData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPrerogativeBuffData_descriptor_;
}

const TPrerogativeBuffData& TPrerogativeBuffData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPrerogative_2eproto();
  return *default_instance_;
}

TPrerogativeBuffData* TPrerogativeBuffData::default_instance_ = NULL;

TPrerogativeBuffData* TPrerogativeBuffData::New() const {
  return new TPrerogativeBuffData;
}

void TPrerogativeBuffData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPrerogativeBuffData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(resettime_, tid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPrerogativeBuffData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPrerogativeBuffData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ResetTime;
        break;
      }

      // optional int64 ResetTime = 2;
      case 2: {
        if (tag == 16) {
         parse_ResetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPrerogativeBuffData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPrerogativeBuffData)
  return false;
#undef DO_
}

void TPrerogativeBuffData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPrerogativeBuffData)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  // optional int64 ResetTime = 2;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->resettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPrerogativeBuffData)
}

::google::protobuf::uint8* TPrerogativeBuffData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPrerogativeBuffData)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  // optional int64 ResetTime = 2;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->resettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPrerogativeBuffData)
  return target;
}

int TPrerogativeBuffData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional int64 ResetTime = 2;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->resettime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPrerogativeBuffData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPrerogativeBuffData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPrerogativeBuffData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPrerogativeBuffData::MergeFrom(const TPrerogativeBuffData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPrerogativeBuffData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPrerogativeBuffData::CopyFrom(const TPrerogativeBuffData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPrerogativeBuffData::IsInitialized() const {

  return true;
}

void TPrerogativeBuffData::Swap(TPrerogativeBuffData* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(resettime_, other->resettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPrerogativeBuffData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPrerogativeBuffData_descriptor_;
  metadata.reflection = TPrerogativeBuffData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPrerogativeRankData::kRankLvFieldNumber;
const int TPrerogativeRankData::kGainArrFieldNumber;
#endif  // !_MSC_VER

TPrerogativeRankData::TPrerogativeRankData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPrerogativeRankData)
}

void TPrerogativeRankData::InitAsDefaultInstance() {
}

TPrerogativeRankData::TPrerogativeRankData(const TPrerogativeRankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPrerogativeRankData)
}

void TPrerogativeRankData::SharedCtor() {
  _cached_size_ = 0;
  ranklv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPrerogativeRankData::~TPrerogativeRankData() {
  // @@protoc_insertion_point(destructor:pb.TPrerogativeRankData)
  SharedDtor();
}

void TPrerogativeRankData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPrerogativeRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPrerogativeRankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPrerogativeRankData_descriptor_;
}

const TPrerogativeRankData& TPrerogativeRankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPrerogative_2eproto();
  return *default_instance_;
}

TPrerogativeRankData* TPrerogativeRankData::default_instance_ = NULL;

TPrerogativeRankData* TPrerogativeRankData::New() const {
  return new TPrerogativeRankData;
}

void TPrerogativeRankData::Clear() {
  ranklv_ = 0u;
  gainarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPrerogativeRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPrerogativeRankData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RankLv = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranklv_)));
          set_has_ranklv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GainArr;
        break;
      }

      // repeated .pb.TPrerogativeGainData GainArr = 2;
      case 2: {
        if (tag == 18) {
         parse_GainArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gainarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GainArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPrerogativeRankData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPrerogativeRankData)
  return false;
#undef DO_
}

void TPrerogativeRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPrerogativeRankData)
  // optional uint32 RankLv = 1;
  if (has_ranklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranklv(), output);
  }

  // repeated .pb.TPrerogativeGainData GainArr = 2;
  for (int i = 0; i < this->gainarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gainarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPrerogativeRankData)
}

::google::protobuf::uint8* TPrerogativeRankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPrerogativeRankData)
  // optional uint32 RankLv = 1;
  if (has_ranklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ranklv(), target);
  }

  // repeated .pb.TPrerogativeGainData GainArr = 2;
  for (int i = 0; i < this->gainarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gainarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPrerogativeRankData)
  return target;
}

int TPrerogativeRankData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RankLv = 1;
    if (has_ranklv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranklv());
    }

  }
  // repeated .pb.TPrerogativeGainData GainArr = 2;
  total_size += 1 * this->gainarr_size();
  for (int i = 0; i < this->gainarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gainarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPrerogativeRankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPrerogativeRankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPrerogativeRankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPrerogativeRankData::MergeFrom(const TPrerogativeRankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  gainarr_.MergeFrom(from.gainarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranklv()) {
      set_ranklv(from.ranklv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPrerogativeRankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPrerogativeRankData::CopyFrom(const TPrerogativeRankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPrerogativeRankData::IsInitialized() const {

  return true;
}

void TPrerogativeRankData::Swap(TPrerogativeRankData* other) {
  if (other != this) {
    std::swap(ranklv_, other->ranklv_);
    gainarr_.Swap(&other->gainarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPrerogativeRankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPrerogativeRankData_descriptor_;
  metadata.reflection = TPrerogativeRankData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPrerogativeGetInfoRsp::kPrerogativeLvFieldNumber;
const int TPrerogativeGetInfoRsp::kExploitNumFieldNumber;
const int TPrerogativeGetInfoRsp::kExploitConsumFieldNumber;
const int TPrerogativeGetInfoRsp::kRankArrFieldNumber;
const int TPrerogativeGetInfoRsp::kBuffArrFieldNumber;
#endif  // !_MSC_VER

TPrerogativeGetInfoRsp::TPrerogativeGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPrerogativeGetInfoRsp)
}

void TPrerogativeGetInfoRsp::InitAsDefaultInstance() {
}

TPrerogativeGetInfoRsp::TPrerogativeGetInfoRsp(const TPrerogativeGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPrerogativeGetInfoRsp)
}

void TPrerogativeGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  prerogativelv_ = 0u;
  exploitnum_ = 0u;
  exploitconsum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPrerogativeGetInfoRsp::~TPrerogativeGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TPrerogativeGetInfoRsp)
  SharedDtor();
}

void TPrerogativeGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPrerogativeGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPrerogativeGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPrerogativeGetInfoRsp_descriptor_;
}

const TPrerogativeGetInfoRsp& TPrerogativeGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPrerogative_2eproto();
  return *default_instance_;
}

TPrerogativeGetInfoRsp* TPrerogativeGetInfoRsp::default_instance_ = NULL;

TPrerogativeGetInfoRsp* TPrerogativeGetInfoRsp::New() const {
  return new TPrerogativeGetInfoRsp;
}

void TPrerogativeGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPrerogativeGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(prerogativelv_, exploitnum_);
    exploitconsum_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rankarr_.Clear();
  buffarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPrerogativeGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPrerogativeGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PrerogativeLv = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prerogativelv_)));
          set_has_prerogativelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ExploitNum;
        break;
      }

      // optional uint32 ExploitNum = 2;
      case 2: {
        if (tag == 16) {
         parse_ExploitNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exploitnum_)));
          set_has_exploitnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ExploitConsum;
        break;
      }

      // optional uint32 ExploitConsum = 3;
      case 3: {
        if (tag == 24) {
         parse_ExploitConsum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exploitconsum_)));
          set_has_exploitconsum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RankArr;
        break;
      }

      // repeated .pb.TPrerogativeRankData RankArr = 4;
      case 4: {
        if (tag == 34) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RankArr;
        if (input->ExpectTag(42)) goto parse_BuffArr;
        break;
      }

      // repeated .pb.TPrerogativeBuffData BuffArr = 5;
      case 5: {
        if (tag == 42) {
         parse_BuffArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_BuffArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPrerogativeGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPrerogativeGetInfoRsp)
  return false;
#undef DO_
}

void TPrerogativeGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPrerogativeGetInfoRsp)
  // optional uint32 PrerogativeLv = 1;
  if (has_prerogativelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prerogativelv(), output);
  }

  // optional uint32 ExploitNum = 2;
  if (has_exploitnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exploitnum(), output);
  }

  // optional uint32 ExploitConsum = 3;
  if (has_exploitconsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exploitconsum(), output);
  }

  // repeated .pb.TPrerogativeRankData RankArr = 4;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rankarr(i), output);
  }

  // repeated .pb.TPrerogativeBuffData BuffArr = 5;
  for (int i = 0; i < this->buffarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->buffarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPrerogativeGetInfoRsp)
}

::google::protobuf::uint8* TPrerogativeGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPrerogativeGetInfoRsp)
  // optional uint32 PrerogativeLv = 1;
  if (has_prerogativelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prerogativelv(), target);
  }

  // optional uint32 ExploitNum = 2;
  if (has_exploitnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exploitnum(), target);
  }

  // optional uint32 ExploitConsum = 3;
  if (has_exploitconsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exploitconsum(), target);
  }

  // repeated .pb.TPrerogativeRankData RankArr = 4;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rankarr(i), target);
  }

  // repeated .pb.TPrerogativeBuffData BuffArr = 5;
  for (int i = 0; i < this->buffarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->buffarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPrerogativeGetInfoRsp)
  return target;
}

int TPrerogativeGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PrerogativeLv = 1;
    if (has_prerogativelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prerogativelv());
    }

    // optional uint32 ExploitNum = 2;
    if (has_exploitnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exploitnum());
    }

    // optional uint32 ExploitConsum = 3;
    if (has_exploitconsum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exploitconsum());
    }

  }
  // repeated .pb.TPrerogativeRankData RankArr = 4;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  // repeated .pb.TPrerogativeBuffData BuffArr = 5;
  total_size += 1 * this->buffarr_size();
  for (int i = 0; i < this->buffarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPrerogativeGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPrerogativeGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPrerogativeGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPrerogativeGetInfoRsp::MergeFrom(const TPrerogativeGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  buffarr_.MergeFrom(from.buffarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prerogativelv()) {
      set_prerogativelv(from.prerogativelv());
    }
    if (from.has_exploitnum()) {
      set_exploitnum(from.exploitnum());
    }
    if (from.has_exploitconsum()) {
      set_exploitconsum(from.exploitconsum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPrerogativeGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPrerogativeGetInfoRsp::CopyFrom(const TPrerogativeGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPrerogativeGetInfoRsp::IsInitialized() const {

  return true;
}

void TPrerogativeGetInfoRsp::Swap(TPrerogativeGetInfoRsp* other) {
  if (other != this) {
    std::swap(prerogativelv_, other->prerogativelv_);
    std::swap(exploitnum_, other->exploitnum_);
    std::swap(exploitconsum_, other->exploitconsum_);
    rankarr_.Swap(&other->rankarr_);
    buffarr_.Swap(&other->buffarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPrerogativeGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPrerogativeGetInfoRsp_descriptor_;
  metadata.reflection = TPrerogativeGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPrerogativeInfoNotify::kExploitNumFieldNumber;
const int TPrerogativeInfoNotify::kExploitConsumFieldNumber;
#endif  // !_MSC_VER

TPrerogativeInfoNotify::TPrerogativeInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPrerogativeInfoNotify)
}

void TPrerogativeInfoNotify::InitAsDefaultInstance() {
}

TPrerogativeInfoNotify::TPrerogativeInfoNotify(const TPrerogativeInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPrerogativeInfoNotify)
}

void TPrerogativeInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  exploitnum_ = 0u;
  exploitconsum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPrerogativeInfoNotify::~TPrerogativeInfoNotify() {
  // @@protoc_insertion_point(destructor:pb.TPrerogativeInfoNotify)
  SharedDtor();
}

void TPrerogativeInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPrerogativeInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPrerogativeInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPrerogativeInfoNotify_descriptor_;
}

const TPrerogativeInfoNotify& TPrerogativeInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPrerogative_2eproto();
  return *default_instance_;
}

TPrerogativeInfoNotify* TPrerogativeInfoNotify::default_instance_ = NULL;

TPrerogativeInfoNotify* TPrerogativeInfoNotify::New() const {
  return new TPrerogativeInfoNotify;
}

void TPrerogativeInfoNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPrerogativeInfoNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(exploitnum_, exploitconsum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPrerogativeInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPrerogativeInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ExploitNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exploitnum_)));
          set_has_exploitnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ExploitConsum;
        break;
      }

      // optional uint32 ExploitConsum = 2;
      case 2: {
        if (tag == 16) {
         parse_ExploitConsum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exploitconsum_)));
          set_has_exploitconsum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPrerogativeInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPrerogativeInfoNotify)
  return false;
#undef DO_
}

void TPrerogativeInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPrerogativeInfoNotify)
  // optional uint32 ExploitNum = 1;
  if (has_exploitnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exploitnum(), output);
  }

  // optional uint32 ExploitConsum = 2;
  if (has_exploitconsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exploitconsum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPrerogativeInfoNotify)
}

::google::protobuf::uint8* TPrerogativeInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPrerogativeInfoNotify)
  // optional uint32 ExploitNum = 1;
  if (has_exploitnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exploitnum(), target);
  }

  // optional uint32 ExploitConsum = 2;
  if (has_exploitconsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exploitconsum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPrerogativeInfoNotify)
  return target;
}

int TPrerogativeInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ExploitNum = 1;
    if (has_exploitnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exploitnum());
    }

    // optional uint32 ExploitConsum = 2;
    if (has_exploitconsum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exploitconsum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPrerogativeInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPrerogativeInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPrerogativeInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPrerogativeInfoNotify::MergeFrom(const TPrerogativeInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exploitnum()) {
      set_exploitnum(from.exploitnum());
    }
    if (from.has_exploitconsum()) {
      set_exploitconsum(from.exploitconsum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPrerogativeInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPrerogativeInfoNotify::CopyFrom(const TPrerogativeInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPrerogativeInfoNotify::IsInitialized() const {

  return true;
}

void TPrerogativeInfoNotify::Swap(TPrerogativeInfoNotify* other) {
  if (other != this) {
    std::swap(exploitnum_, other->exploitnum_);
    std::swap(exploitconsum_, other->exploitconsum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPrerogativeInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPrerogativeInfoNotify_descriptor_;
  metadata.reflection = TPrerogativeInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPrerogativeGainLevelUpReq::kPrerogativeLvFieldNumber;
const int TPrerogativeGainLevelUpReq::kGainTidFieldNumber;
#endif  // !_MSC_VER

TPrerogativeGainLevelUpReq::TPrerogativeGainLevelUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPrerogativeGainLevelUpReq)
}

void TPrerogativeGainLevelUpReq::InitAsDefaultInstance() {
}

TPrerogativeGainLevelUpReq::TPrerogativeGainLevelUpReq(const TPrerogativeGainLevelUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPrerogativeGainLevelUpReq)
}

void TPrerogativeGainLevelUpReq::SharedCtor() {
  _cached_size_ = 0;
  prerogativelv_ = 0u;
  gaintid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPrerogativeGainLevelUpReq::~TPrerogativeGainLevelUpReq() {
  // @@protoc_insertion_point(destructor:pb.TPrerogativeGainLevelUpReq)
  SharedDtor();
}

void TPrerogativeGainLevelUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPrerogativeGainLevelUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPrerogativeGainLevelUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPrerogativeGainLevelUpReq_descriptor_;
}

const TPrerogativeGainLevelUpReq& TPrerogativeGainLevelUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPrerogative_2eproto();
  return *default_instance_;
}

TPrerogativeGainLevelUpReq* TPrerogativeGainLevelUpReq::default_instance_ = NULL;

TPrerogativeGainLevelUpReq* TPrerogativeGainLevelUpReq::New() const {
  return new TPrerogativeGainLevelUpReq;
}

void TPrerogativeGainLevelUpReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPrerogativeGainLevelUpReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(prerogativelv_, gaintid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPrerogativeGainLevelUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPrerogativeGainLevelUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PrerogativeLv = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prerogativelv_)));
          set_has_prerogativelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GainTid;
        break;
      }

      // optional uint32 GainTid = 2;
      case 2: {
        if (tag == 16) {
         parse_GainTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gaintid_)));
          set_has_gaintid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPrerogativeGainLevelUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPrerogativeGainLevelUpReq)
  return false;
#undef DO_
}

void TPrerogativeGainLevelUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPrerogativeGainLevelUpReq)
  // optional uint32 PrerogativeLv = 1;
  if (has_prerogativelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prerogativelv(), output);
  }

  // optional uint32 GainTid = 2;
  if (has_gaintid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gaintid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPrerogativeGainLevelUpReq)
}

::google::protobuf::uint8* TPrerogativeGainLevelUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPrerogativeGainLevelUpReq)
  // optional uint32 PrerogativeLv = 1;
  if (has_prerogativelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prerogativelv(), target);
  }

  // optional uint32 GainTid = 2;
  if (has_gaintid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gaintid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPrerogativeGainLevelUpReq)
  return target;
}

int TPrerogativeGainLevelUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PrerogativeLv = 1;
    if (has_prerogativelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prerogativelv());
    }

    // optional uint32 GainTid = 2;
    if (has_gaintid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gaintid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPrerogativeGainLevelUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPrerogativeGainLevelUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPrerogativeGainLevelUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPrerogativeGainLevelUpReq::MergeFrom(const TPrerogativeGainLevelUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prerogativelv()) {
      set_prerogativelv(from.prerogativelv());
    }
    if (from.has_gaintid()) {
      set_gaintid(from.gaintid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPrerogativeGainLevelUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPrerogativeGainLevelUpReq::CopyFrom(const TPrerogativeGainLevelUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPrerogativeGainLevelUpReq::IsInitialized() const {

  return true;
}

void TPrerogativeGainLevelUpReq::Swap(TPrerogativeGainLevelUpReq* other) {
  if (other != this) {
    std::swap(prerogativelv_, other->prerogativelv_);
    std::swap(gaintid_, other->gaintid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPrerogativeGainLevelUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPrerogativeGainLevelUpReq_descriptor_;
  metadata.reflection = TPrerogativeGainLevelUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPrerogativeGainLevelUpRsp::kLevelFieldNumber;
#endif  // !_MSC_VER

TPrerogativeGainLevelUpRsp::TPrerogativeGainLevelUpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPrerogativeGainLevelUpRsp)
}

void TPrerogativeGainLevelUpRsp::InitAsDefaultInstance() {
}

TPrerogativeGainLevelUpRsp::TPrerogativeGainLevelUpRsp(const TPrerogativeGainLevelUpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPrerogativeGainLevelUpRsp)
}

void TPrerogativeGainLevelUpRsp::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPrerogativeGainLevelUpRsp::~TPrerogativeGainLevelUpRsp() {
  // @@protoc_insertion_point(destructor:pb.TPrerogativeGainLevelUpRsp)
  SharedDtor();
}

void TPrerogativeGainLevelUpRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPrerogativeGainLevelUpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPrerogativeGainLevelUpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPrerogativeGainLevelUpRsp_descriptor_;
}

const TPrerogativeGainLevelUpRsp& TPrerogativeGainLevelUpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPrerogative_2eproto();
  return *default_instance_;
}

TPrerogativeGainLevelUpRsp* TPrerogativeGainLevelUpRsp::default_instance_ = NULL;

TPrerogativeGainLevelUpRsp* TPrerogativeGainLevelUpRsp::New() const {
  return new TPrerogativeGainLevelUpRsp;
}

void TPrerogativeGainLevelUpRsp::Clear() {
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPrerogativeGainLevelUpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPrerogativeGainLevelUpRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Level = 3;
      case 3: {
        if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPrerogativeGainLevelUpRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPrerogativeGainLevelUpRsp)
  return false;
#undef DO_
}

void TPrerogativeGainLevelUpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPrerogativeGainLevelUpRsp)
  // optional uint32 Level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPrerogativeGainLevelUpRsp)
}

::google::protobuf::uint8* TPrerogativeGainLevelUpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPrerogativeGainLevelUpRsp)
  // optional uint32 Level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPrerogativeGainLevelUpRsp)
  return target;
}

int TPrerogativeGainLevelUpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPrerogativeGainLevelUpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPrerogativeGainLevelUpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPrerogativeGainLevelUpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPrerogativeGainLevelUpRsp::MergeFrom(const TPrerogativeGainLevelUpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPrerogativeGainLevelUpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPrerogativeGainLevelUpRsp::CopyFrom(const TPrerogativeGainLevelUpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPrerogativeGainLevelUpRsp::IsInitialized() const {

  return true;
}

void TPrerogativeGainLevelUpRsp::Swap(TPrerogativeGainLevelUpRsp* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPrerogativeGainLevelUpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPrerogativeGainLevelUpRsp_descriptor_;
  metadata.reflection = TPrerogativeGainLevelUpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPrerogativePrerogativeLevelUpRsp::kLevelFieldNumber;
#endif  // !_MSC_VER

TPrerogativePrerogativeLevelUpRsp::TPrerogativePrerogativeLevelUpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPrerogativePrerogativeLevelUpRsp)
}

void TPrerogativePrerogativeLevelUpRsp::InitAsDefaultInstance() {
}

TPrerogativePrerogativeLevelUpRsp::TPrerogativePrerogativeLevelUpRsp(const TPrerogativePrerogativeLevelUpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPrerogativePrerogativeLevelUpRsp)
}

void TPrerogativePrerogativeLevelUpRsp::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPrerogativePrerogativeLevelUpRsp::~TPrerogativePrerogativeLevelUpRsp() {
  // @@protoc_insertion_point(destructor:pb.TPrerogativePrerogativeLevelUpRsp)
  SharedDtor();
}

void TPrerogativePrerogativeLevelUpRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPrerogativePrerogativeLevelUpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPrerogativePrerogativeLevelUpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPrerogativePrerogativeLevelUpRsp_descriptor_;
}

const TPrerogativePrerogativeLevelUpRsp& TPrerogativePrerogativeLevelUpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPrerogative_2eproto();
  return *default_instance_;
}

TPrerogativePrerogativeLevelUpRsp* TPrerogativePrerogativeLevelUpRsp::default_instance_ = NULL;

TPrerogativePrerogativeLevelUpRsp* TPrerogativePrerogativeLevelUpRsp::New() const {
  return new TPrerogativePrerogativeLevelUpRsp;
}

void TPrerogativePrerogativeLevelUpRsp::Clear() {
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPrerogativePrerogativeLevelUpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPrerogativePrerogativeLevelUpRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPrerogativePrerogativeLevelUpRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPrerogativePrerogativeLevelUpRsp)
  return false;
#undef DO_
}

void TPrerogativePrerogativeLevelUpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPrerogativePrerogativeLevelUpRsp)
  // optional uint32 Level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPrerogativePrerogativeLevelUpRsp)
}

::google::protobuf::uint8* TPrerogativePrerogativeLevelUpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPrerogativePrerogativeLevelUpRsp)
  // optional uint32 Level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPrerogativePrerogativeLevelUpRsp)
  return target;
}

int TPrerogativePrerogativeLevelUpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPrerogativePrerogativeLevelUpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPrerogativePrerogativeLevelUpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPrerogativePrerogativeLevelUpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPrerogativePrerogativeLevelUpRsp::MergeFrom(const TPrerogativePrerogativeLevelUpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPrerogativePrerogativeLevelUpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPrerogativePrerogativeLevelUpRsp::CopyFrom(const TPrerogativePrerogativeLevelUpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPrerogativePrerogativeLevelUpRsp::IsInitialized() const {

  return true;
}

void TPrerogativePrerogativeLevelUpRsp::Swap(TPrerogativePrerogativeLevelUpRsp* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPrerogativePrerogativeLevelUpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPrerogativePrerogativeLevelUpRsp_descriptor_;
  metadata.reflection = TPrerogativePrerogativeLevelUpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPrerogativePrerogativeBuyBuffReq::kBuffTidFieldNumber;
#endif  // !_MSC_VER

TPrerogativePrerogativeBuyBuffReq::TPrerogativePrerogativeBuyBuffReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPrerogativePrerogativeBuyBuffReq)
}

void TPrerogativePrerogativeBuyBuffReq::InitAsDefaultInstance() {
}

TPrerogativePrerogativeBuyBuffReq::TPrerogativePrerogativeBuyBuffReq(const TPrerogativePrerogativeBuyBuffReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPrerogativePrerogativeBuyBuffReq)
}

void TPrerogativePrerogativeBuyBuffReq::SharedCtor() {
  _cached_size_ = 0;
  bufftid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPrerogativePrerogativeBuyBuffReq::~TPrerogativePrerogativeBuyBuffReq() {
  // @@protoc_insertion_point(destructor:pb.TPrerogativePrerogativeBuyBuffReq)
  SharedDtor();
}

void TPrerogativePrerogativeBuyBuffReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPrerogativePrerogativeBuyBuffReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPrerogativePrerogativeBuyBuffReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPrerogativePrerogativeBuyBuffReq_descriptor_;
}

const TPrerogativePrerogativeBuyBuffReq& TPrerogativePrerogativeBuyBuffReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPrerogative_2eproto();
  return *default_instance_;
}

TPrerogativePrerogativeBuyBuffReq* TPrerogativePrerogativeBuyBuffReq::default_instance_ = NULL;

TPrerogativePrerogativeBuyBuffReq* TPrerogativePrerogativeBuyBuffReq::New() const {
  return new TPrerogativePrerogativeBuyBuffReq;
}

void TPrerogativePrerogativeBuyBuffReq::Clear() {
  bufftid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPrerogativePrerogativeBuyBuffReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPrerogativePrerogativeBuyBuffReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuffTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bufftid_)));
          set_has_bufftid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPrerogativePrerogativeBuyBuffReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPrerogativePrerogativeBuyBuffReq)
  return false;
#undef DO_
}

void TPrerogativePrerogativeBuyBuffReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPrerogativePrerogativeBuyBuffReq)
  // optional uint32 BuffTid = 1;
  if (has_bufftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bufftid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPrerogativePrerogativeBuyBuffReq)
}

::google::protobuf::uint8* TPrerogativePrerogativeBuyBuffReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPrerogativePrerogativeBuyBuffReq)
  // optional uint32 BuffTid = 1;
  if (has_bufftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bufftid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPrerogativePrerogativeBuyBuffReq)
  return target;
}

int TPrerogativePrerogativeBuyBuffReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuffTid = 1;
    if (has_bufftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bufftid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPrerogativePrerogativeBuyBuffReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPrerogativePrerogativeBuyBuffReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPrerogativePrerogativeBuyBuffReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPrerogativePrerogativeBuyBuffReq::MergeFrom(const TPrerogativePrerogativeBuyBuffReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bufftid()) {
      set_bufftid(from.bufftid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPrerogativePrerogativeBuyBuffReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPrerogativePrerogativeBuyBuffReq::CopyFrom(const TPrerogativePrerogativeBuyBuffReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPrerogativePrerogativeBuyBuffReq::IsInitialized() const {

  return true;
}

void TPrerogativePrerogativeBuyBuffReq::Swap(TPrerogativePrerogativeBuyBuffReq* other) {
  if (other != this) {
    std::swap(bufftid_, other->bufftid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPrerogativePrerogativeBuyBuffReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPrerogativePrerogativeBuyBuffReq_descriptor_;
  metadata.reflection = TPrerogativePrerogativeBuyBuffReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPrerogativePrerogativeBuyBuffRsp::kResetTimeFieldNumber;
#endif  // !_MSC_VER

TPrerogativePrerogativeBuyBuffRsp::TPrerogativePrerogativeBuyBuffRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPrerogativePrerogativeBuyBuffRsp)
}

void TPrerogativePrerogativeBuyBuffRsp::InitAsDefaultInstance() {
}

TPrerogativePrerogativeBuyBuffRsp::TPrerogativePrerogativeBuyBuffRsp(const TPrerogativePrerogativeBuyBuffRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPrerogativePrerogativeBuyBuffRsp)
}

void TPrerogativePrerogativeBuyBuffRsp::SharedCtor() {
  _cached_size_ = 0;
  resettime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPrerogativePrerogativeBuyBuffRsp::~TPrerogativePrerogativeBuyBuffRsp() {
  // @@protoc_insertion_point(destructor:pb.TPrerogativePrerogativeBuyBuffRsp)
  SharedDtor();
}

void TPrerogativePrerogativeBuyBuffRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPrerogativePrerogativeBuyBuffRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPrerogativePrerogativeBuyBuffRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPrerogativePrerogativeBuyBuffRsp_descriptor_;
}

const TPrerogativePrerogativeBuyBuffRsp& TPrerogativePrerogativeBuyBuffRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPrerogative_2eproto();
  return *default_instance_;
}

TPrerogativePrerogativeBuyBuffRsp* TPrerogativePrerogativeBuyBuffRsp::default_instance_ = NULL;

TPrerogativePrerogativeBuyBuffRsp* TPrerogativePrerogativeBuyBuffRsp::New() const {
  return new TPrerogativePrerogativeBuyBuffRsp;
}

void TPrerogativePrerogativeBuyBuffRsp::Clear() {
  resettime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPrerogativePrerogativeBuyBuffRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPrerogativePrerogativeBuyBuffRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ResetTime = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPrerogativePrerogativeBuyBuffRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPrerogativePrerogativeBuyBuffRsp)
  return false;
#undef DO_
}

void TPrerogativePrerogativeBuyBuffRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPrerogativePrerogativeBuyBuffRsp)
  // optional int64 ResetTime = 2;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->resettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPrerogativePrerogativeBuyBuffRsp)
}

::google::protobuf::uint8* TPrerogativePrerogativeBuyBuffRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPrerogativePrerogativeBuyBuffRsp)
  // optional int64 ResetTime = 2;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->resettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPrerogativePrerogativeBuyBuffRsp)
  return target;
}

int TPrerogativePrerogativeBuyBuffRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ResetTime = 2;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->resettime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPrerogativePrerogativeBuyBuffRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPrerogativePrerogativeBuyBuffRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPrerogativePrerogativeBuyBuffRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPrerogativePrerogativeBuyBuffRsp::MergeFrom(const TPrerogativePrerogativeBuyBuffRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPrerogativePrerogativeBuyBuffRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPrerogativePrerogativeBuyBuffRsp::CopyFrom(const TPrerogativePrerogativeBuyBuffRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPrerogativePrerogativeBuyBuffRsp::IsInitialized() const {

  return true;
}

void TPrerogativePrerogativeBuyBuffRsp::Swap(TPrerogativePrerogativeBuyBuffRsp* other) {
  if (other != this) {
    std::swap(resettime_, other->resettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPrerogativePrerogativeBuyBuffRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPrerogativePrerogativeBuyBuffRsp_descriptor_;
  metadata.reflection = TPrerogativePrerogativeBuyBuffRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
