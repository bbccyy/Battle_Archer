// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossPlunder.proto

#ifndef PROTOBUF_net_2fCrossPlunder_2eproto__INCLUDED
#define PROTOBUF_net_2fCrossPlunder_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
#include "net/Battle.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

class TPlunderMinePos;
class TPlunderBaseInfo;
class TPlunderMapInfo;
class TPlunderPageInfo;
class TPlunderEnemyInfo;
class TPlunderRecordInfo;
class TPlunderRevengeRecordInfo;
class TPlunderMineInfo;
class TPlunderGetServerTeamInfoRsp;
class TPlunderGetBaseInfoRsp;
class TPlunderChallengeGuardStartBattleReq;
class TPlunderChallengeGuardStartBattleRsp;
class TPlunderChallengeGuardReportBattleReq;
class TPlunderChallengeGuardReportBattleRsp;
class TPlunderEnterReq;
class TPlunderEnterRsp;
class TPlunderGetPageInfoReq;
class TPlunderGetPageInfoRsp;
class TPlunderGetRivalFormationReq;
class TPlunderGetRivalFormationRsp;
class TPlunderGatherRsp;
class TPlunderAttackReq;
class TPlunderAttackRsp;
class TPlunderGiveupRsp;
class TPlunderAutoSetMineReq;
class TPlunderAutoSetMineRsp;
class TPlunderGetSelfRecordListRsp;
class TPlunderGetSelfRecordInfoReq;
class TPlunderGetSelfRecordInfoRsp;
class TPlunderGetEnemyListRsp;
class TPlunderRemoveEnemyReq;
class TPlunderGetEnemyMineListReq;
class TPlunderGetEnemyMineListRsp;
class TPlunderRevengeReq;
class TPlunderRevengeRsp;
class TPlunderRankInfo;
class TPlunderGetRevengeRecordListRsp;
class TPlunderGetRevengeRecordInfoReq;
class TPlunderGetRevengeRecordInfoRsp;
class TPlunderRankReq;
class TPlunderRankRsp;
class TPlunderGetPalaceCDNumRsp;
class TPlunderBaseInfoNotify;
class TPlunderMapInfoNotify;
class TPlunderMineInfoNotify;
class TPlunderRecordNotify;

enum EMineGiveupResult {
  NORMAL = 0,
  BE_OCCUPY = 1
};
bool EMineGiveupResult_IsValid(int value);
const EMineGiveupResult EMineGiveupResult_MIN = NORMAL;
const EMineGiveupResult EMineGiveupResult_MAX = BE_OCCUPY;
const int EMineGiveupResult_ARRAYSIZE = EMineGiveupResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMineGiveupResult_descriptor();
inline const ::std::string& EMineGiveupResult_Name(EMineGiveupResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMineGiveupResult_descriptor(), value);
}
inline bool EMineGiveupResult_Parse(
    const ::std::string& name, EMineGiveupResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMineGiveupResult>(
    EMineGiveupResult_descriptor(), name, value);
}
enum EPlunderGatherResult {
  GATHER_SUCCEED = 0,
  GATHER_BEOCCUPY = 1,
  GATHER_ADJOURNING = 2
};
bool EPlunderGatherResult_IsValid(int value);
const EPlunderGatherResult EPlunderGatherResult_MIN = GATHER_SUCCEED;
const EPlunderGatherResult EPlunderGatherResult_MAX = GATHER_ADJOURNING;
const int EPlunderGatherResult_ARRAYSIZE = EPlunderGatherResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPlunderGatherResult_descriptor();
inline const ::std::string& EPlunderGatherResult_Name(EPlunderGatherResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPlunderGatherResult_descriptor(), value);
}
inline bool EPlunderGatherResult_Parse(
    const ::std::string& name, EPlunderGatherResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPlunderGatherResult>(
    EPlunderGatherResult_descriptor(), name, value);
}
enum EPlunderAttackResult {
  ATTACK_SUCCEED = 0,
  ATTACK_OCCUPY = 1,
  ATTACK_BEOCCUPY = 2,
  ATTACK_CD = 3,
  ATTACK_FULL = 4,
  ATTACK_GIVEUP = 5,
  ATTACK_PROTECTION = 6,
  ATTACK_DEFEATPUNISH = 7,
  ATTACK_FAILED = 8,
  ATTACK_PROTECTEDTIME = 9
};
bool EPlunderAttackResult_IsValid(int value);
const EPlunderAttackResult EPlunderAttackResult_MIN = ATTACK_SUCCEED;
const EPlunderAttackResult EPlunderAttackResult_MAX = ATTACK_PROTECTEDTIME;
const int EPlunderAttackResult_ARRAYSIZE = EPlunderAttackResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPlunderAttackResult_descriptor();
inline const ::std::string& EPlunderAttackResult_Name(EPlunderAttackResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPlunderAttackResult_descriptor(), value);
}
inline bool EPlunderAttackResult_Parse(
    const ::std::string& name, EPlunderAttackResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPlunderAttackResult>(
    EPlunderAttackResult_descriptor(), name, value);
}
enum EPlunderEvent {
  PLUNDER_NONE = 0,
  PLUNDER_ATTACK = 1,
  PLUNDER_EXPEL = 2
};
bool EPlunderEvent_IsValid(int value);
const EPlunderEvent EPlunderEvent_MIN = PLUNDER_NONE;
const EPlunderEvent EPlunderEvent_MAX = PLUNDER_EXPEL;
const int EPlunderEvent_ARRAYSIZE = EPlunderEvent_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPlunderEvent_descriptor();
inline const ::std::string& EPlunderEvent_Name(EPlunderEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPlunderEvent_descriptor(), value);
}
inline bool EPlunderEvent_Parse(
    const ::std::string& name, EPlunderEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPlunderEvent>(
    EPlunderEvent_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TPlunderMinePos</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderMinePos : public ::google::protobuf::Message {
 public:
  TPlunderMinePos();
  virtual ~TPlunderMinePos();

  TPlunderMinePos(const TPlunderMinePos& from);

  inline TPlunderMinePos& operator=(const TPlunderMinePos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderMinePos& default_instance();

  void Swap(TPlunderMinePos* other);

  // implements Message ----------------------------------------------

  TPlunderMinePos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderMinePos& from);
  void MergeFrom(const TPlunderMinePos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AreaLevel = 1;
  inline bool has_arealevel() const;
  inline void clear_arealevel();
  static const int kAreaLevelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderMinePos</name>
  	<Function>
  		<name>arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arealevel() const;
  inline void set_arealevel(::google::protobuf::uint32 value);

  // optional uint32 Page = 2;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderMinePos</name>
  	<Function>
  		<name>page</name>
  		<replaceName>Page</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_page</name>
  		<replaceName>Page</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_page</name>
  		<replaceName>Page</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 page() const;
  inline void set_page(::google::protobuf::uint32 value);

  // optional uint32 MineId = 3;
  inline bool has_mineid() const;
  inline void clear_mineid();
  static const int kMineIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlunderMinePos</name>
  	<Function>
  		<name>mineid</name>
  		<replaceName>MineId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mineid</name>
  		<replaceName>MineId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mineid</name>
  		<replaceName>MineId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mineid() const;
  inline void set_mineid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderMinePos)
 private:
  inline void set_has_arealevel();
  inline void clear_has_arealevel();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_mineid();
  inline void clear_has_mineid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 arealevel_;
  ::google::protobuf::uint32 page_;
  ::google::protobuf::uint32 mineid_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderMinePos* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderBaseInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderBaseInfo : public ::google::protobuf::Message {
 public:
  TPlunderBaseInfo();
  virtual ~TPlunderBaseInfo();

  TPlunderBaseInfo(const TPlunderBaseInfo& from);

  inline TPlunderBaseInfo& operator=(const TPlunderBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderBaseInfo& default_instance();

  void Swap(TPlunderBaseInfo* other);

  // implements Message ----------------------------------------------

  TPlunderBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderBaseInfo& from);
  void MergeFrom(const TPlunderBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPlunderMineInfo MyMineInfo = 1;
  inline bool has_mymineinfo() const;
  inline void clear_mymineinfo();
  static const int kMyMineInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderBaseInfo</name>
  	<Function>
  		<name>mymineinfo</name>
  		<replaceName>MyMineInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mymineinfo</name>
  		<replaceName>MyMineInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_mymineinfo</name>
  		<replaceName>MyMineInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mymineinfo</name>
  		<replaceName>MyMineInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderMineInfo& mymineinfo() const;
  inline ::pb::TPlunderMineInfo* mutable_mymineinfo();
  inline ::pb::TPlunderMineInfo* release_mymineinfo();
  inline void set_allocated_mymineinfo(::pb::TPlunderMineInfo* mymineinfo);

  // optional uint32 PlunderNum = 2;
  inline bool has_plundernum() const;
  inline void clear_plundernum();
  static const int kPlunderNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderBaseInfo</name>
  	<Function>
  		<name>plundernum</name>
  		<replaceName>PlunderNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_plundernum</name>
  		<replaceName>PlunderNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_plundernum</name>
  		<replaceName>PlunderNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 plundernum() const;
  inline void set_plundernum(::google::protobuf::uint32 value);

  // optional int64 LastPlunderTime = 3;
  inline bool has_lastplundertime() const;
  inline void clear_lastplundertime();
  static const int kLastPlunderTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlunderBaseInfo</name>
  	<Function>
  		<name>lastplundertime</name>
  		<replaceName>LastPlunderTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastplundertime</name>
  		<replaceName>LastPlunderTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastplundertime</name>
  		<replaceName>LastPlunderTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 lastplundertime() const;
  inline void set_lastplundertime(::google::protobuf::int64 value);

  // optional uint32 TotalScore = 4;
  inline bool has_totalscore() const;
  inline void clear_totalscore();
  static const int kTotalScoreFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlunderBaseInfo</name>
  	<Function>
  		<name>totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 totalscore() const;
  inline void set_totalscore(::google::protobuf::uint32 value);

  // optional uint32 MaxAreaLevel = 5;
  inline bool has_maxarealevel() const;
  inline void clear_maxarealevel();
  static const int kMaxAreaLevelFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlunderBaseInfo</name>
  	<Function>
  		<name>maxarealevel</name>
  		<replaceName>MaxAreaLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxarealevel</name>
  		<replaceName>MaxAreaLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxarealevel</name>
  		<replaceName>MaxAreaLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxarealevel() const;
  inline void set_maxarealevel(::google::protobuf::uint32 value);

  // optional uint32 DefeatedNum = 6;
  inline bool has_defeatednum() const;
  inline void clear_defeatednum();
  static const int kDefeatedNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TPlunderBaseInfo</name>
  	<Function>
  		<name>defeatednum</name>
  		<replaceName>DefeatedNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defeatednum</name>
  		<replaceName>DefeatedNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defeatednum</name>
  		<replaceName>DefeatedNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defeatednum() const;
  inline void set_defeatednum(::google::protobuf::uint32 value);

  // optional int64 EnablePlunderTime = 7;
  inline bool has_enableplundertime() const;
  inline void clear_enableplundertime();
  static const int kEnablePlunderTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TPlunderBaseInfo</name>
  	<Function>
  		<name>enableplundertime</name>
  		<replaceName>EnablePlunderTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enableplundertime</name>
  		<replaceName>EnablePlunderTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enableplundertime</name>
  		<replaceName>EnablePlunderTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 enableplundertime() const;
  inline void set_enableplundertime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderBaseInfo)
 private:
  inline void set_has_mymineinfo();
  inline void clear_has_mymineinfo();
  inline void set_has_plundernum();
  inline void clear_has_plundernum();
  inline void set_has_lastplundertime();
  inline void clear_has_lastplundertime();
  inline void set_has_totalscore();
  inline void clear_has_totalscore();
  inline void set_has_maxarealevel();
  inline void clear_has_maxarealevel();
  inline void set_has_defeatednum();
  inline void clear_has_defeatednum();
  inline void set_has_enableplundertime();
  inline void clear_has_enableplundertime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPlunderMineInfo* mymineinfo_;
  ::google::protobuf::int64 lastplundertime_;
  ::google::protobuf::uint32 plundernum_;
  ::google::protobuf::uint32 totalscore_;
  ::google::protobuf::uint32 maxarealevel_;
  ::google::protobuf::uint32 defeatednum_;
  ::google::protobuf::int64 enableplundertime_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderMapInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderMapInfo : public ::google::protobuf::Message {
 public:
  TPlunderMapInfo();
  virtual ~TPlunderMapInfo();

  TPlunderMapInfo(const TPlunderMapInfo& from);

  inline TPlunderMapInfo& operator=(const TPlunderMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderMapInfo& default_instance();

  void Swap(TPlunderMapInfo* other);

  // implements Message ----------------------------------------------

  TPlunderMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderMapInfo& from);
  void MergeFrom(const TPlunderMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AreaLevel = 1;
  inline bool has_arealevel() const;
  inline void clear_arealevel();
  static const int kAreaLevelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderMapInfo</name>
  	<Function>
  		<name>arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arealevel() const;
  inline void set_arealevel(::google::protobuf::uint32 value);

  // optional uint32 MineNum = 2;
  inline bool has_minenum() const;
  inline void clear_minenum();
  static const int kMineNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderMapInfo</name>
  	<Function>
  		<name>minenum</name>
  		<replaceName>MineNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_minenum</name>
  		<replaceName>MineNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_minenum</name>
  		<replaceName>MineNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 minenum() const;
  inline void set_minenum(::google::protobuf::uint32 value);

  // optional uint32 UserNum = 3;
  inline bool has_usernum() const;
  inline void clear_usernum();
  static const int kUserNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlunderMapInfo</name>
  	<Function>
  		<name>usernum</name>
  		<replaceName>UserNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usernum</name>
  		<replaceName>UserNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usernum</name>
  		<replaceName>UserNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 usernum() const;
  inline void set_usernum(::google::protobuf::uint32 value);

  // optional uint32 PageNum = 4;
  inline bool has_pagenum() const;
  inline void clear_pagenum();
  static const int kPageNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlunderMapInfo</name>
  	<Function>
  		<name>pagenum</name>
  		<replaceName>PageNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pagenum</name>
  		<replaceName>PageNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pagenum</name>
  		<replaceName>PageNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pagenum() const;
  inline void set_pagenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderMapInfo)
 private:
  inline void set_has_arealevel();
  inline void clear_has_arealevel();
  inline void set_has_minenum();
  inline void clear_has_minenum();
  inline void set_has_usernum();
  inline void clear_has_usernum();
  inline void set_has_pagenum();
  inline void clear_has_pagenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 arealevel_;
  ::google::protobuf::uint32 minenum_;
  ::google::protobuf::uint32 usernum_;
  ::google::protobuf::uint32 pagenum_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderMapInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderPageInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderPageInfo : public ::google::protobuf::Message {
 public:
  TPlunderPageInfo();
  virtual ~TPlunderPageInfo();

  TPlunderPageInfo(const TPlunderPageInfo& from);

  inline TPlunderPageInfo& operator=(const TPlunderPageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderPageInfo& default_instance();

  void Swap(TPlunderPageInfo* other);

  // implements Message ----------------------------------------------

  TPlunderPageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderPageInfo& from);
  void MergeFrom(const TPlunderPageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AreaLevel = 1;
  inline bool has_arealevel() const;
  inline void clear_arealevel();
  static const int kAreaLevelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderPageInfo</name>
  	<Function>
  		<name>arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arealevel() const;
  inline void set_arealevel(::google::protobuf::uint32 value);

  // optional uint32 Page = 2;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderPageInfo</name>
  	<Function>
  		<name>page</name>
  		<replaceName>Page</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_page</name>
  		<replaceName>Page</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_page</name>
  		<replaceName>Page</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 page() const;
  inline void set_page(::google::protobuf::uint32 value);

  // repeated .pb.TPlunderMineInfo ArrMineInfo = 3;
  inline int arrmineinfo_size() const;
  inline void clear_arrmineinfo();
  static const int kArrMineInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlunderPageInfo</name>
  	<Function>
  		<name>arrmineinfo</name>
  		<replaceName>ArrMineInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrmineinfo</name>
  		<replaceName>ArrMineInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrmineinfo</name>
  		<replaceName>ArrMineInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrmineinfo</name>
  		<replaceName>ArrMineInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrmineinfo_size</name>
  		<replaceName>ArrMineInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderMineInfo& arrmineinfo(int index) const;
  inline ::pb::TPlunderMineInfo* mutable_arrmineinfo(int index);
  inline ::pb::TPlunderMineInfo* add_arrmineinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlunderMineInfo >&
      arrmineinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlunderMineInfo >*
      mutable_arrmineinfo();

  // @@protoc_insertion_point(class_scope:pb.TPlunderPageInfo)
 private:
  inline void set_has_arealevel();
  inline void clear_has_arealevel();
  inline void set_has_page();
  inline void clear_has_page();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 arealevel_;
  ::google::protobuf::uint32 page_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlunderMineInfo > arrmineinfo_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderPageInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderEnemyInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderEnemyInfo : public ::google::protobuf::Message {
 public:
  TPlunderEnemyInfo();
  virtual ~TPlunderEnemyInfo();

  TPlunderEnemyInfo(const TPlunderEnemyInfo& from);

  inline TPlunderEnemyInfo& operator=(const TPlunderEnemyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderEnemyInfo& default_instance();

  void Swap(TPlunderEnemyInfo* other);

  // implements Message ----------------------------------------------

  TPlunderEnemyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderEnemyInfo& from);
  void MergeFrom(const TPlunderEnemyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderEnemyInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 HateNum = 2;
  inline bool has_hatenum() const;
  inline void clear_hatenum();
  static const int kHateNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderEnemyInfo</name>
  	<Function>
  		<name>hatenum</name>
  		<replaceName>HateNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hatenum</name>
  		<replaceName>HateNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hatenum</name>
  		<replaceName>HateNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hatenum() const;
  inline void set_hatenum(::google::protobuf::uint32 value);

  // optional int64 FirstTime = 3;
  inline bool has_firsttime() const;
  inline void clear_firsttime();
  static const int kFirstTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlunderEnemyInfo</name>
  	<Function>
  		<name>firsttime</name>
  		<replaceName>FirstTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_firsttime</name>
  		<replaceName>FirstTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_firsttime</name>
  		<replaceName>FirstTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 firsttime() const;
  inline void set_firsttime(::google::protobuf::int64 value);

  // optional int64 PlunderTime = 4;
  inline bool has_plundertime() const;
  inline void clear_plundertime();
  static const int kPlunderTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlunderEnemyInfo</name>
  	<Function>
  		<name>plundertime</name>
  		<replaceName>PlunderTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_plundertime</name>
  		<replaceName>PlunderTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_plundertime</name>
  		<replaceName>PlunderTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 plundertime() const;
  inline void set_plundertime(::google::protobuf::int64 value);

  // optional uint32 HateScore = 5;
  inline bool has_hatescore() const;
  inline void clear_hatescore();
  static const int kHateScoreFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlunderEnemyInfo</name>
  	<Function>
  		<name>hatescore</name>
  		<replaceName>HateScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hatescore</name>
  		<replaceName>HateScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hatescore</name>
  		<replaceName>HateScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hatescore() const;
  inline void set_hatescore(::google::protobuf::uint32 value);

  // optional bool Revenged = 6;
  inline bool has_revenged() const;
  inline void clear_revenged();
  static const int kRevengedFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TPlunderEnemyInfo</name>
  	<Function>
  		<name>revenged</name>
  		<replaceName>Revenged</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_revenged</name>
  		<replaceName>Revenged</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_revenged</name>
  		<replaceName>Revenged</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool revenged() const;
  inline void set_revenged(bool value);

  // optional uint32 HateSeniorRewardScore = 7;
  inline bool has_hateseniorrewardscore() const;
  inline void clear_hateseniorrewardscore();
  static const int kHateSeniorRewardScoreFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TPlunderEnemyInfo</name>
  	<Function>
  		<name>hateseniorrewardscore</name>
  		<replaceName>HateSeniorRewardScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hateseniorrewardscore</name>
  		<replaceName>HateSeniorRewardScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hateseniorrewardscore</name>
  		<replaceName>HateSeniorRewardScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hateseniorrewardscore() const;
  inline void set_hateseniorrewardscore(::google::protobuf::uint32 value);

  // optional .pb.TUserSimpleInfoWithAlly UserInfo = 10;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TPlunderEnemyInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfoWithAlly& userinfo() const;
  inline ::pb::TUserSimpleInfoWithAlly* mutable_userinfo();
  inline ::pb::TUserSimpleInfoWithAlly* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfoWithAlly* userinfo);

  // @@protoc_insertion_point(class_scope:pb.TPlunderEnemyInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_hatenum();
  inline void clear_has_hatenum();
  inline void set_has_firsttime();
  inline void clear_has_firsttime();
  inline void set_has_plundertime();
  inline void clear_has_plundertime();
  inline void set_has_hatescore();
  inline void clear_has_hatescore();
  inline void set_has_revenged();
  inline void clear_has_revenged();
  inline void set_has_hateseniorrewardscore();
  inline void clear_has_hateseniorrewardscore();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::int64 firsttime_;
  ::google::protobuf::uint32 hatenum_;
  ::google::protobuf::uint32 hatescore_;
  ::google::protobuf::int64 plundertime_;
  bool revenged_;
  ::google::protobuf::uint32 hateseniorrewardscore_;
  ::pb::TUserSimpleInfoWithAlly* userinfo_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderEnemyInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderRecordInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderRecordInfo : public ::google::protobuf::Message {
 public:
  TPlunderRecordInfo();
  virtual ~TPlunderRecordInfo();

  TPlunderRecordInfo(const TPlunderRecordInfo& from);

  inline TPlunderRecordInfo& operator=(const TPlunderRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderRecordInfo& default_instance();

  void Swap(TPlunderRecordInfo* other);

  // implements Message ----------------------------------------------

  TPlunderRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderRecordInfo& from);
  void MergeFrom(const TPlunderRecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RecordId = 1;
  inline bool has_recordid() const;
  inline void clear_recordid();
  static const int kRecordIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRecordInfo</name>
  	<Function>
  		<name>recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordid() const;
  inline void set_recordid(::google::protobuf::uint64 value);

  // optional int64 RecordTime = 2;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRecordInfo</name>
  	<Function>
  		<name>recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 recordtime() const;
  inline void set_recordtime(::google::protobuf::int64 value);

  // optional .pb.TPlunderMinePos MinePos = 3;
  inline bool has_minepos() const;
  inline void clear_minepos();
  static const int kMinePosFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRecordInfo</name>
  	<Function>
  		<name>minepos</name>
  		<replaceName>MinePos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_minepos</name>
  		<replaceName>MinePos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_minepos</name>
  		<replaceName>MinePos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_minepos</name>
  		<replaceName>MinePos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderMinePos& minepos() const;
  inline ::pb::TPlunderMinePos* mutable_minepos();
  inline ::pb::TPlunderMinePos* release_minepos();
  inline void set_allocated_minepos(::pb::TPlunderMinePos* minepos);

  // optional .pb.TUserSimpleInfoWithAlly AtkUserInfo = 4;
  inline bool has_atkuserinfo() const;
  inline void clear_atkuserinfo();
  static const int kAtkUserInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRecordInfo</name>
  	<Function>
  		<name>atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfoWithAlly& atkuserinfo() const;
  inline ::pb::TUserSimpleInfoWithAlly* mutable_atkuserinfo();
  inline ::pb::TUserSimpleInfoWithAlly* release_atkuserinfo();
  inline void set_allocated_atkuserinfo(::pb::TUserSimpleInfoWithAlly* atkuserinfo);

  // optional .pb.TUserSimpleInfoWithAlly DefUserInfo = 5;
  inline bool has_defuserinfo() const;
  inline void clear_defuserinfo();
  static const int kDefUserInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRecordInfo</name>
  	<Function>
  		<name>defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfoWithAlly& defuserinfo() const;
  inline ::pb::TUserSimpleInfoWithAlly* mutable_defuserinfo();
  inline ::pb::TUserSimpleInfoWithAlly* release_defuserinfo();
  inline void set_allocated_defuserinfo(::pb::TUserSimpleInfoWithAlly* defuserinfo);

  // optional uint32 StarLevel = 6;
  inline bool has_starlevel() const;
  inline void clear_starlevel();
  static const int kStarLevelFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRecordInfo</name>
  	<Function>
  		<name>starlevel</name>
  		<replaceName>StarLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starlevel</name>
  		<replaceName>StarLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starlevel</name>
  		<replaceName>StarLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starlevel() const;
  inline void set_starlevel(::google::protobuf::uint32 value);

  // optional bool NoRewardScore = 9;
  inline bool has_norewardscore() const;
  inline void clear_norewardscore();
  static const int kNoRewardScoreFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRecordInfo</name>
  	<Function>
  		<name>norewardscore</name>
  		<replaceName>NoRewardScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_norewardscore</name>
  		<replaceName>NoRewardScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_norewardscore</name>
  		<replaceName>NoRewardScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool norewardscore() const;
  inline void set_norewardscore(bool value);

  // optional uint32 AtkRewardScore = 10;
  inline bool has_atkrewardscore() const;
  inline void clear_atkrewardscore();
  static const int kAtkRewardScoreFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRecordInfo</name>
  	<Function>
  		<name>atkrewardscore</name>
  		<replaceName>AtkRewardScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkrewardscore</name>
  		<replaceName>AtkRewardScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkrewardscore</name>
  		<replaceName>AtkRewardScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 atkrewardscore() const;
  inline void set_atkrewardscore(::google::protobuf::uint32 value);

  // optional uint32 DefRewardScore = 11;
  inline bool has_defrewardscore() const;
  inline void clear_defrewardscore();
  static const int kDefRewardScoreFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRecordInfo</name>
  	<Function>
  		<name>defrewardscore</name>
  		<replaceName>DefRewardScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defrewardscore</name>
  		<replaceName>DefRewardScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defrewardscore</name>
  		<replaceName>DefRewardScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defrewardscore() const;
  inline void set_defrewardscore(::google::protobuf::uint32 value);

  // optional uint32 SysRewardScore = 12;
  inline bool has_sysrewardscore() const;
  inline void clear_sysrewardscore();
  static const int kSysRewardScoreFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRecordInfo</name>
  	<Function>
  		<name>sysrewardscore</name>
  		<replaceName>SysRewardScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sysrewardscore</name>
  		<replaceName>SysRewardScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sysrewardscore</name>
  		<replaceName>SysRewardScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 sysrewardscore() const;
  inline void set_sysrewardscore(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward AtkSeniorRewardArr = 13;
  inline int atkseniorrewardarr_size() const;
  inline void clear_atkseniorrewardarr();
  static const int kAtkSeniorRewardArrFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRecordInfo</name>
  	<Function>
  		<name>atkseniorrewardarr</name>
  		<replaceName>AtkSeniorRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_atkseniorrewardarr</name>
  		<replaceName>AtkSeniorRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_atkseniorrewardarr</name>
  		<replaceName>AtkSeniorRewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkseniorrewardarr</name>
  		<replaceName>AtkSeniorRewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>atkseniorrewardarr_size</name>
  		<replaceName>AtkSeniorRewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& atkseniorrewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_atkseniorrewardarr(int index);
  inline ::pb::TCommonReward* add_atkseniorrewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      atkseniorrewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_atkseniorrewardarr();

  // repeated .pb.TCommonReward DefSeniorRewardArr = 14;
  inline int defseniorrewardarr_size() const;
  inline void clear_defseniorrewardarr();
  static const int kDefSeniorRewardArrFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRecordInfo</name>
  	<Function>
  		<name>defseniorrewardarr</name>
  		<replaceName>DefSeniorRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_defseniorrewardarr</name>
  		<replaceName>DefSeniorRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_defseniorrewardarr</name>
  		<replaceName>DefSeniorRewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defseniorrewardarr</name>
  		<replaceName>DefSeniorRewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>defseniorrewardarr_size</name>
  		<replaceName>DefSeniorRewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& defseniorrewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_defseniorrewardarr(int index);
  inline ::pb::TCommonReward* add_defseniorrewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      defseniorrewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_defseniorrewardarr();

  // repeated .pb.TCommonReward SysSeniorRewardArr = 15;
  inline int sysseniorrewardarr_size() const;
  inline void clear_sysseniorrewardarr();
  static const int kSysSeniorRewardArrFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRecordInfo</name>
  	<Function>
  		<name>sysseniorrewardarr</name>
  		<replaceName>SysSeniorRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_sysseniorrewardarr</name>
  		<replaceName>SysSeniorRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_sysseniorrewardarr</name>
  		<replaceName>SysSeniorRewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sysseniorrewardarr</name>
  		<replaceName>SysSeniorRewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>sysseniorrewardarr_size</name>
  		<replaceName>SysSeniorRewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& sysseniorrewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_sysseniorrewardarr(int index);
  inline ::pb::TCommonReward* add_sysseniorrewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      sysseniorrewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_sysseniorrewardarr();

  // @@protoc_insertion_point(class_scope:pb.TPlunderRecordInfo)
 private:
  inline void set_has_recordid();
  inline void clear_has_recordid();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();
  inline void set_has_minepos();
  inline void clear_has_minepos();
  inline void set_has_atkuserinfo();
  inline void clear_has_atkuserinfo();
  inline void set_has_defuserinfo();
  inline void clear_has_defuserinfo();
  inline void set_has_starlevel();
  inline void clear_has_starlevel();
  inline void set_has_norewardscore();
  inline void clear_has_norewardscore();
  inline void set_has_atkrewardscore();
  inline void clear_has_atkrewardscore();
  inline void set_has_defrewardscore();
  inline void clear_has_defrewardscore();
  inline void set_has_sysrewardscore();
  inline void clear_has_sysrewardscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 recordid_;
  ::google::protobuf::int64 recordtime_;
  ::pb::TPlunderMinePos* minepos_;
  ::pb::TUserSimpleInfoWithAlly* atkuserinfo_;
  ::pb::TUserSimpleInfoWithAlly* defuserinfo_;
  ::google::protobuf::uint32 starlevel_;
  bool norewardscore_;
  ::google::protobuf::uint32 atkrewardscore_;
  ::google::protobuf::uint32 defrewardscore_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > atkseniorrewardarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > defseniorrewardarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > sysseniorrewardarr_;
  ::google::protobuf::uint32 sysrewardscore_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderRevengeRecordInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderRevengeRecordInfo : public ::google::protobuf::Message {
 public:
  TPlunderRevengeRecordInfo();
  virtual ~TPlunderRevengeRecordInfo();

  TPlunderRevengeRecordInfo(const TPlunderRevengeRecordInfo& from);

  inline TPlunderRevengeRecordInfo& operator=(const TPlunderRevengeRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderRevengeRecordInfo& default_instance();

  void Swap(TPlunderRevengeRecordInfo* other);

  // implements Message ----------------------------------------------

  TPlunderRevengeRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderRevengeRecordInfo& from);
  void MergeFrom(const TPlunderRevengeRecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RecordId = 1;
  inline bool has_recordid() const;
  inline void clear_recordid();
  static const int kRecordIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRevengeRecordInfo</name>
  	<Function>
  		<name>recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordid() const;
  inline void set_recordid(::google::protobuf::uint64 value);

  // optional int64 RecordTime = 2;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRevengeRecordInfo</name>
  	<Function>
  		<name>recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 recordtime() const;
  inline void set_recordtime(::google::protobuf::int64 value);

  // optional uint32 StarLevel = 3;
  inline bool has_starlevel() const;
  inline void clear_starlevel();
  static const int kStarLevelFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRevengeRecordInfo</name>
  	<Function>
  		<name>starlevel</name>
  		<replaceName>StarLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starlevel</name>
  		<replaceName>StarLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starlevel</name>
  		<replaceName>StarLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starlevel() const;
  inline void set_starlevel(::google::protobuf::uint32 value);

  // optional uint32 Score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRevengeRecordInfo</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional .pb.TUserSimpleInfoWithAlly UserInfo = 5;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRevengeRecordInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfoWithAlly& userinfo() const;
  inline ::pb::TUserSimpleInfoWithAlly* mutable_userinfo();
  inline ::pb::TUserSimpleInfoWithAlly* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfoWithAlly* userinfo);

  // repeated .pb.TCommonReward SeniorRewardArr = 6;
  inline int seniorrewardarr_size() const;
  inline void clear_seniorrewardarr();
  static const int kSeniorRewardArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRevengeRecordInfo</name>
  	<Function>
  		<name>seniorrewardarr</name>
  		<replaceName>SeniorRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_seniorrewardarr</name>
  		<replaceName>SeniorRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_seniorrewardarr</name>
  		<replaceName>SeniorRewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_seniorrewardarr</name>
  		<replaceName>SeniorRewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>seniorrewardarr_size</name>
  		<replaceName>SeniorRewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& seniorrewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_seniorrewardarr(int index);
  inline ::pb::TCommonReward* add_seniorrewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      seniorrewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_seniorrewardarr();

  // @@protoc_insertion_point(class_scope:pb.TPlunderRevengeRecordInfo)
 private:
  inline void set_has_recordid();
  inline void clear_has_recordid();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();
  inline void set_has_starlevel();
  inline void clear_has_starlevel();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 recordid_;
  ::google::protobuf::int64 recordtime_;
  ::google::protobuf::uint32 starlevel_;
  ::google::protobuf::uint32 score_;
  ::pb::TUserSimpleInfoWithAlly* userinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > seniorrewardarr_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderRevengeRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderMineInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderMineInfo : public ::google::protobuf::Message {
 public:
  TPlunderMineInfo();
  virtual ~TPlunderMineInfo();

  TPlunderMineInfo(const TPlunderMineInfo& from);

  inline TPlunderMineInfo& operator=(const TPlunderMineInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderMineInfo& default_instance();

  void Swap(TPlunderMineInfo* other);

  // implements Message ----------------------------------------------

  TPlunderMineInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderMineInfo& from);
  void MergeFrom(const TPlunderMineInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPlunderMinePos MinePos = 1;
  inline bool has_minepos() const;
  inline void clear_minepos();
  static const int kMinePosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderMineInfo</name>
  	<Function>
  		<name>minepos</name>
  		<replaceName>MinePos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_minepos</name>
  		<replaceName>MinePos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_minepos</name>
  		<replaceName>MinePos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_minepos</name>
  		<replaceName>MinePos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderMinePos& minepos() const;
  inline ::pb::TPlunderMinePos* mutable_minepos();
  inline ::pb::TPlunderMinePos* release_minepos();
  inline void set_allocated_minepos(::pb::TPlunderMinePos* minepos);

  // optional uint64 OccupyUid = 2;
  inline bool has_occupyuid() const;
  inline void clear_occupyuid();
  static const int kOccupyUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderMineInfo</name>
  	<Function>
  		<name>occupyuid</name>
  		<replaceName>OccupyUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_occupyuid</name>
  		<replaceName>OccupyUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_occupyuid</name>
  		<replaceName>OccupyUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 occupyuid() const;
  inline void set_occupyuid(::google::protobuf::uint64 value);

  // optional int64 OccupyTime = 3;
  inline bool has_occupytime() const;
  inline void clear_occupytime();
  static const int kOccupyTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlunderMineInfo</name>
  	<Function>
  		<name>occupytime</name>
  		<replaceName>OccupyTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_occupytime</name>
  		<replaceName>OccupyTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_occupytime</name>
  		<replaceName>OccupyTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 occupytime() const;
  inline void set_occupytime(::google::protobuf::int64 value);

  // optional int64 ReceiveTime = 4;
  inline bool has_receivetime() const;
  inline void clear_receivetime();
  static const int kReceiveTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlunderMineInfo</name>
  	<Function>
  		<name>receivetime</name>
  		<replaceName>ReceiveTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_receivetime</name>
  		<replaceName>ReceiveTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivetime</name>
  		<replaceName>ReceiveTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 receivetime() const;
  inline void set_receivetime(::google::protobuf::int64 value);

  // optional .pb.TUserSimpleInfoWithAlly UserInfo = 5;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlunderMineInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfoWithAlly& userinfo() const;
  inline ::pb::TUserSimpleInfoWithAlly* mutable_userinfo();
  inline ::pb::TUserSimpleInfoWithAlly* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfoWithAlly* userinfo);

  // optional bool IsSenior = 6;
  inline bool has_issenior() const;
  inline void clear_issenior();
  static const int kIsSeniorFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TPlunderMineInfo</name>
  	<Function>
  		<name>issenior</name>
  		<replaceName>IsSenior</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_issenior</name>
  		<replaceName>IsSenior</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_issenior</name>
  		<replaceName>IsSenior</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool issenior() const;
  inline void set_issenior(bool value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderMineInfo)
 private:
  inline void set_has_minepos();
  inline void clear_has_minepos();
  inline void set_has_occupyuid();
  inline void clear_has_occupyuid();
  inline void set_has_occupytime();
  inline void clear_has_occupytime();
  inline void set_has_receivetime();
  inline void clear_has_receivetime();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_issenior();
  inline void clear_has_issenior();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPlunderMinePos* minepos_;
  ::google::protobuf::uint64 occupyuid_;
  ::google::protobuf::int64 occupytime_;
  ::google::protobuf::int64 receivetime_;
  ::pb::TUserSimpleInfoWithAlly* userinfo_;
  bool issenior_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderMineInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGetServerTeamInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGetServerTeamInfoRsp : public ::google::protobuf::Message {
 public:
  TPlunderGetServerTeamInfoRsp();
  virtual ~TPlunderGetServerTeamInfoRsp();

  TPlunderGetServerTeamInfoRsp(const TPlunderGetServerTeamInfoRsp& from);

  inline TPlunderGetServerTeamInfoRsp& operator=(const TPlunderGetServerTeamInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGetServerTeamInfoRsp& default_instance();

  void Swap(TPlunderGetServerTeamInfoRsp* other);

  // implements Message ----------------------------------------------

  TPlunderGetServerTeamInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGetServerTeamInfoRsp& from);
  void MergeFrom(const TPlunderGetServerTeamInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ServerTeamId = 1;
  inline bool has_serverteamid() const;
  inline void clear_serverteamid();
  static const int kServerTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetServerTeamInfoRsp</name>
  	<Function>
  		<name>serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 serverteamid() const;
  inline void set_serverteamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderGetServerTeamInfoRsp)
 private:
  inline void set_has_serverteamid();
  inline void clear_has_serverteamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 serverteamid_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGetServerTeamInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGetBaseInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGetBaseInfoRsp : public ::google::protobuf::Message {
 public:
  TPlunderGetBaseInfoRsp();
  virtual ~TPlunderGetBaseInfoRsp();

  TPlunderGetBaseInfoRsp(const TPlunderGetBaseInfoRsp& from);

  inline TPlunderGetBaseInfoRsp& operator=(const TPlunderGetBaseInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGetBaseInfoRsp& default_instance();

  void Swap(TPlunderGetBaseInfoRsp* other);

  // implements Message ----------------------------------------------

  TPlunderGetBaseInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGetBaseInfoRsp& from);
  void MergeFrom(const TPlunderGetBaseInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPlunderBaseInfo BaseInfo = 1;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetBaseInfoRsp</name>
  	<Function>
  		<name>baseinfo</name>
  		<replaceName>BaseInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_baseinfo</name>
  		<replaceName>BaseInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_baseinfo</name>
  		<replaceName>BaseInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_baseinfo</name>
  		<replaceName>BaseInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderBaseInfo& baseinfo() const;
  inline ::pb::TPlunderBaseInfo* mutable_baseinfo();
  inline ::pb::TPlunderBaseInfo* release_baseinfo();
  inline void set_allocated_baseinfo(::pb::TPlunderBaseInfo* baseinfo);

  // @@protoc_insertion_point(class_scope:pb.TPlunderGetBaseInfoRsp)
 private:
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPlunderBaseInfo* baseinfo_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGetBaseInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderChallengeGuardStartBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderChallengeGuardStartBattleReq : public ::google::protobuf::Message {
 public:
  TPlunderChallengeGuardStartBattleReq();
  virtual ~TPlunderChallengeGuardStartBattleReq();

  TPlunderChallengeGuardStartBattleReq(const TPlunderChallengeGuardStartBattleReq& from);

  inline TPlunderChallengeGuardStartBattleReq& operator=(const TPlunderChallengeGuardStartBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderChallengeGuardStartBattleReq& default_instance();

  void Swap(TPlunderChallengeGuardStartBattleReq* other);

  // implements Message ----------------------------------------------

  TPlunderChallengeGuardStartBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderChallengeGuardStartBattleReq& from);
  void MergeFrom(const TPlunderChallengeGuardStartBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleCheckParam BattleCheckParam = 1;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderChallengeGuardStartBattleReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TPlunderChallengeGuardStartBattleReq)
 private:
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderChallengeGuardStartBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderChallengeGuardStartBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderChallengeGuardStartBattleRsp : public ::google::protobuf::Message {
 public:
  TPlunderChallengeGuardStartBattleRsp();
  virtual ~TPlunderChallengeGuardStartBattleRsp();

  TPlunderChallengeGuardStartBattleRsp(const TPlunderChallengeGuardStartBattleRsp& from);

  inline TPlunderChallengeGuardStartBattleRsp& operator=(const TPlunderChallengeGuardStartBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderChallengeGuardStartBattleRsp& default_instance();

  void Swap(TPlunderChallengeGuardStartBattleRsp* other);

  // implements Message ----------------------------------------------

  TPlunderChallengeGuardStartBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderChallengeGuardStartBattleRsp& from);
  void MergeFrom(const TPlunderChallengeGuardStartBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleArgs BattleArgs = 1;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderChallengeGuardStartBattleRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TPlunderChallengeGuardStartBattleRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleArgs* battleargs_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderChallengeGuardStartBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderChallengeGuardReportBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderChallengeGuardReportBattleReq : public ::google::protobuf::Message {
 public:
  TPlunderChallengeGuardReportBattleReq();
  virtual ~TPlunderChallengeGuardReportBattleReq();

  TPlunderChallengeGuardReportBattleReq(const TPlunderChallengeGuardReportBattleReq& from);

  inline TPlunderChallengeGuardReportBattleReq& operator=(const TPlunderChallengeGuardReportBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderChallengeGuardReportBattleReq& default_instance();

  void Swap(TPlunderChallengeGuardReportBattleReq* other);

  // implements Message ----------------------------------------------

  TPlunderChallengeGuardReportBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderChallengeGuardReportBattleReq& from);
  void MergeFrom(const TPlunderChallengeGuardReportBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes BattleRet = 1;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderChallengeGuardReportBattleReq</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleret() const;
  inline void set_battleret(const ::std::string& value);
  inline void set_battleret(const char* value);
  inline void set_battleret(const void* value, size_t size);
  inline ::std::string* mutable_battleret();
  inline ::std::string* release_battleret();
  inline void set_allocated_battleret(::std::string* battleret);

  // @@protoc_insertion_point(class_scope:pb.TPlunderChallengeGuardReportBattleReq)
 private:
  inline void set_has_battleret();
  inline void clear_has_battleret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* battleret_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderChallengeGuardReportBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderChallengeGuardReportBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderChallengeGuardReportBattleRsp : public ::google::protobuf::Message {
 public:
  TPlunderChallengeGuardReportBattleRsp();
  virtual ~TPlunderChallengeGuardReportBattleRsp();

  TPlunderChallengeGuardReportBattleRsp(const TPlunderChallengeGuardReportBattleRsp& from);

  inline TPlunderChallengeGuardReportBattleRsp& operator=(const TPlunderChallengeGuardReportBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderChallengeGuardReportBattleRsp& default_instance();

  void Swap(TPlunderChallengeGuardReportBattleRsp* other);

  // implements Message ----------------------------------------------

  TPlunderChallengeGuardReportBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderChallengeGuardReportBattleRsp& from);
  void MergeFrom(const TPlunderChallengeGuardReportBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ResultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderChallengeGuardReportBattleRsp</name>
  	<Function>
  		<name>resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // optional uint32 MaxAreaLevel = 2;
  inline bool has_maxarealevel() const;
  inline void clear_maxarealevel();
  static const int kMaxAreaLevelFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderChallengeGuardReportBattleRsp</name>
  	<Function>
  		<name>maxarealevel</name>
  		<replaceName>MaxAreaLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxarealevel</name>
  		<replaceName>MaxAreaLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxarealevel</name>
  		<replaceName>MaxAreaLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxarealevel() const;
  inline void set_maxarealevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderChallengeGuardReportBattleRsp)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();
  inline void set_has_maxarealevel();
  inline void clear_has_maxarealevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 resultcode_;
  ::google::protobuf::uint32 maxarealevel_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderChallengeGuardReportBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderEnterReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderEnterReq : public ::google::protobuf::Message {
 public:
  TPlunderEnterReq();
  virtual ~TPlunderEnterReq();

  TPlunderEnterReq(const TPlunderEnterReq& from);

  inline TPlunderEnterReq& operator=(const TPlunderEnterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderEnterReq& default_instance();

  void Swap(TPlunderEnterReq* other);

  // implements Message ----------------------------------------------

  TPlunderEnterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderEnterReq& from);
  void MergeFrom(const TPlunderEnterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AreaLevel = 1;
  inline bool has_arealevel() const;
  inline void clear_arealevel();
  static const int kAreaLevelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderEnterReq</name>
  	<Function>
  		<name>arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arealevel() const;
  inline void set_arealevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderEnterReq)
 private:
  inline void set_has_arealevel();
  inline void clear_has_arealevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 arealevel_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderEnterReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderEnterRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderEnterRsp : public ::google::protobuf::Message {
 public:
  TPlunderEnterRsp();
  virtual ~TPlunderEnterRsp();

  TPlunderEnterRsp(const TPlunderEnterRsp& from);

  inline TPlunderEnterRsp& operator=(const TPlunderEnterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderEnterRsp& default_instance();

  void Swap(TPlunderEnterRsp* other);

  // implements Message ----------------------------------------------

  TPlunderEnterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderEnterRsp& from);
  void MergeFrom(const TPlunderEnterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPlunderMapInfo MapInfo = 1;
  inline bool has_mapinfo() const;
  inline void clear_mapinfo();
  static const int kMapInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderEnterRsp</name>
  	<Function>
  		<name>mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderMapInfo& mapinfo() const;
  inline ::pb::TPlunderMapInfo* mutable_mapinfo();
  inline ::pb::TPlunderMapInfo* release_mapinfo();
  inline void set_allocated_mapinfo(::pb::TPlunderMapInfo* mapinfo);

  // repeated .pb.TPlunderRecordInfo RecordInfoArr = 2;
  inline int recordinfoarr_size() const;
  inline void clear_recordinfoarr();
  static const int kRecordInfoArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderEnterRsp</name>
  	<Function>
  		<name>recordinfoarr</name>
  		<replaceName>RecordInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordinfoarr</name>
  		<replaceName>RecordInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordinfoarr</name>
  		<replaceName>RecordInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordinfoarr</name>
  		<replaceName>RecordInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordinfoarr_size</name>
  		<replaceName>RecordInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderRecordInfo& recordinfoarr(int index) const;
  inline ::pb::TPlunderRecordInfo* mutable_recordinfoarr(int index);
  inline ::pb::TPlunderRecordInfo* add_recordinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRecordInfo >&
      recordinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRecordInfo >*
      mutable_recordinfoarr();

  // optional .pb.TPlunderPageInfo PageInfo = 3;
  inline bool has_pageinfo() const;
  inline void clear_pageinfo();
  static const int kPageInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlunderEnterRsp</name>
  	<Function>
  		<name>pageinfo</name>
  		<replaceName>PageInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pageinfo</name>
  		<replaceName>PageInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pageinfo</name>
  		<replaceName>PageInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pageinfo</name>
  		<replaceName>PageInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderPageInfo& pageinfo() const;
  inline ::pb::TPlunderPageInfo* mutable_pageinfo();
  inline ::pb::TPlunderPageInfo* release_pageinfo();
  inline void set_allocated_pageinfo(::pb::TPlunderPageInfo* pageinfo);

  // @@protoc_insertion_point(class_scope:pb.TPlunderEnterRsp)
 private:
  inline void set_has_mapinfo();
  inline void clear_has_mapinfo();
  inline void set_has_pageinfo();
  inline void clear_has_pageinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPlunderMapInfo* mapinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRecordInfo > recordinfoarr_;
  ::pb::TPlunderPageInfo* pageinfo_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderEnterRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGetPageInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGetPageInfoReq : public ::google::protobuf::Message {
 public:
  TPlunderGetPageInfoReq();
  virtual ~TPlunderGetPageInfoReq();

  TPlunderGetPageInfoReq(const TPlunderGetPageInfoReq& from);

  inline TPlunderGetPageInfoReq& operator=(const TPlunderGetPageInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGetPageInfoReq& default_instance();

  void Swap(TPlunderGetPageInfoReq* other);

  // implements Message ----------------------------------------------

  TPlunderGetPageInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGetPageInfoReq& from);
  void MergeFrom(const TPlunderGetPageInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AreaLevel = 1;
  inline bool has_arealevel() const;
  inline void clear_arealevel();
  static const int kAreaLevelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetPageInfoReq</name>
  	<Function>
  		<name>arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arealevel() const;
  inline void set_arealevel(::google::protobuf::uint32 value);

  // optional uint32 Page = 2;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetPageInfoReq</name>
  	<Function>
  		<name>page</name>
  		<replaceName>Page</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_page</name>
  		<replaceName>Page</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_page</name>
  		<replaceName>Page</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 page() const;
  inline void set_page(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderGetPageInfoReq)
 private:
  inline void set_has_arealevel();
  inline void clear_has_arealevel();
  inline void set_has_page();
  inline void clear_has_page();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 arealevel_;
  ::google::protobuf::uint32 page_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGetPageInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGetPageInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGetPageInfoRsp : public ::google::protobuf::Message {
 public:
  TPlunderGetPageInfoRsp();
  virtual ~TPlunderGetPageInfoRsp();

  TPlunderGetPageInfoRsp(const TPlunderGetPageInfoRsp& from);

  inline TPlunderGetPageInfoRsp& operator=(const TPlunderGetPageInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGetPageInfoRsp& default_instance();

  void Swap(TPlunderGetPageInfoRsp* other);

  // implements Message ----------------------------------------------

  TPlunderGetPageInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGetPageInfoRsp& from);
  void MergeFrom(const TPlunderGetPageInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPlunderPageInfo PageInfo = 1;
  inline bool has_pageinfo() const;
  inline void clear_pageinfo();
  static const int kPageInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetPageInfoRsp</name>
  	<Function>
  		<name>pageinfo</name>
  		<replaceName>PageInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pageinfo</name>
  		<replaceName>PageInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pageinfo</name>
  		<replaceName>PageInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pageinfo</name>
  		<replaceName>PageInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderPageInfo& pageinfo() const;
  inline ::pb::TPlunderPageInfo* mutable_pageinfo();
  inline ::pb::TPlunderPageInfo* release_pageinfo();
  inline void set_allocated_pageinfo(::pb::TPlunderPageInfo* pageinfo);

  // @@protoc_insertion_point(class_scope:pb.TPlunderGetPageInfoRsp)
 private:
  inline void set_has_pageinfo();
  inline void clear_has_pageinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPlunderPageInfo* pageinfo_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGetPageInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGetRivalFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGetRivalFormationReq : public ::google::protobuf::Message {
 public:
  TPlunderGetRivalFormationReq();
  virtual ~TPlunderGetRivalFormationReq();

  TPlunderGetRivalFormationReq(const TPlunderGetRivalFormationReq& from);

  inline TPlunderGetRivalFormationReq& operator=(const TPlunderGetRivalFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGetRivalFormationReq& default_instance();

  void Swap(TPlunderGetRivalFormationReq* other);

  // implements Message ----------------------------------------------

  TPlunderGetRivalFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGetRivalFormationReq& from);
  void MergeFrom(const TPlunderGetRivalFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetRivalFormationReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderGetRivalFormationReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGetRivalFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGetRivalFormationRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGetRivalFormationRsp : public ::google::protobuf::Message {
 public:
  TPlunderGetRivalFormationRsp();
  virtual ~TPlunderGetRivalFormationRsp();

  TPlunderGetRivalFormationRsp(const TPlunderGetRivalFormationRsp& from);

  inline TPlunderGetRivalFormationRsp& operator=(const TPlunderGetRivalFormationRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGetRivalFormationRsp& default_instance();

  void Swap(TPlunderGetRivalFormationRsp* other);

  // implements Message ----------------------------------------------

  TPlunderGetRivalFormationRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGetRivalFormationRsp& from);
  void MergeFrom(const TPlunderGetRivalFormationRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetRivalFormationRsp</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // repeated .pb.TUnitInfo UnitArr = 2;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetRivalFormationRsp</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitInfo& unitarr(int index) const;
  inline ::pb::TUnitInfo* mutable_unitarr(int index);
  inline ::pb::TUnitInfo* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >*
      mutable_unitarr();

  // optional uint64 FightForce = 3;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetRivalFormationRsp</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderGetRivalFormationRsp)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo > unitarr_;
  ::google::protobuf::uint64 fightforce_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGetRivalFormationRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGatherRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGatherRsp : public ::google::protobuf::Message {
 public:
  TPlunderGatherRsp();
  virtual ~TPlunderGatherRsp();

  TPlunderGatherRsp(const TPlunderGatherRsp& from);

  inline TPlunderGatherRsp& operator=(const TPlunderGatherRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGatherRsp& default_instance();

  void Swap(TPlunderGatherRsp* other);

  // implements Message ----------------------------------------------

  TPlunderGatherRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGatherRsp& from);
  void MergeFrom(const TPlunderGatherRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EPlunderGatherResult ResultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGatherRsp</name>
  	<Function>
  		<name>resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EPlunderGatherResult resultcode() const;
  inline void set_resultcode(::pb::EPlunderGatherResult value);

  // optional uint32 RewardScore = 2;
  inline bool has_rewardscore() const;
  inline void clear_rewardscore();
  static const int kRewardScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGatherRsp</name>
  	<Function>
  		<name>rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardscore() const;
  inline void set_rewardscore(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward SeniorRewardArr = 3;
  inline int seniorrewardarr_size() const;
  inline void clear_seniorrewardarr();
  static const int kSeniorRewardArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGatherRsp</name>
  	<Function>
  		<name>seniorrewardarr</name>
  		<replaceName>SeniorRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_seniorrewardarr</name>
  		<replaceName>SeniorRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_seniorrewardarr</name>
  		<replaceName>SeniorRewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_seniorrewardarr</name>
  		<replaceName>SeniorRewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>seniorrewardarr_size</name>
  		<replaceName>SeniorRewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& seniorrewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_seniorrewardarr(int index);
  inline ::pb::TCommonReward* add_seniorrewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      seniorrewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_seniorrewardarr();

  // @@protoc_insertion_point(class_scope:pb.TPlunderGatherRsp)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();
  inline void set_has_rewardscore();
  inline void clear_has_rewardscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int resultcode_;
  ::google::protobuf::uint32 rewardscore_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > seniorrewardarr_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGatherRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderAttackReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderAttackReq : public ::google::protobuf::Message {
 public:
  TPlunderAttackReq();
  virtual ~TPlunderAttackReq();

  TPlunderAttackReq(const TPlunderAttackReq& from);

  inline TPlunderAttackReq& operator=(const TPlunderAttackReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderAttackReq& default_instance();

  void Swap(TPlunderAttackReq* other);

  // implements Message ----------------------------------------------

  TPlunderAttackReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderAttackReq& from);
  void MergeFrom(const TPlunderAttackReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPlunderMinePos MinePos = 1;
  inline bool has_minepos() const;
  inline void clear_minepos();
  static const int kMinePosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderAttackReq</name>
  	<Function>
  		<name>minepos</name>
  		<replaceName>MinePos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_minepos</name>
  		<replaceName>MinePos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_minepos</name>
  		<replaceName>MinePos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_minepos</name>
  		<replaceName>MinePos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderMinePos& minepos() const;
  inline ::pb::TPlunderMinePos* mutable_minepos();
  inline ::pb::TPlunderMinePos* release_minepos();
  inline void set_allocated_minepos(::pb::TPlunderMinePos* minepos);

  // optional uint64 EnemyUid = 2;
  inline bool has_enemyuid() const;
  inline void clear_enemyuid();
  static const int kEnemyUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderAttackReq</name>
  	<Function>
  		<name>enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 enemyuid() const;
  inline void set_enemyuid(::google::protobuf::uint64 value);

  // optional bool SkipBattleResult = 3;
  inline bool has_skipbattleresult() const;
  inline void clear_skipbattleresult();
  static const int kSkipBattleResultFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlunderAttackReq</name>
  	<Function>
  		<name>skipbattleresult</name>
  		<replaceName>SkipBattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skipbattleresult</name>
  		<replaceName>SkipBattleResult</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skipbattleresult</name>
  		<replaceName>SkipBattleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool skipbattleresult() const;
  inline void set_skipbattleresult(bool value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderAttackReq)
 private:
  inline void set_has_minepos();
  inline void clear_has_minepos();
  inline void set_has_enemyuid();
  inline void clear_has_enemyuid();
  inline void set_has_skipbattleresult();
  inline void clear_has_skipbattleresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPlunderMinePos* minepos_;
  ::google::protobuf::uint64 enemyuid_;
  bool skipbattleresult_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderAttackReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderAttackRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderAttackRsp : public ::google::protobuf::Message {
 public:
  TPlunderAttackRsp();
  virtual ~TPlunderAttackRsp();

  TPlunderAttackRsp(const TPlunderAttackRsp& from);

  inline TPlunderAttackRsp& operator=(const TPlunderAttackRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderAttackRsp& default_instance();

  void Swap(TPlunderAttackRsp* other);

  // implements Message ----------------------------------------------

  TPlunderAttackRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderAttackRsp& from);
  void MergeFrom(const TPlunderAttackRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EPlunderAttackResult Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderAttackRsp</name>
  	<Function>
  		<name>result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EPlunderAttackResult result() const;
  inline void set_result(::pb::EPlunderAttackResult value);

  // optional .pb.TPlunderMineInfo MineInfo = 2;
  inline bool has_mineinfo() const;
  inline void clear_mineinfo();
  static const int kMineInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderAttackRsp</name>
  	<Function>
  		<name>mineinfo</name>
  		<replaceName>MineInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mineinfo</name>
  		<replaceName>MineInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_mineinfo</name>
  		<replaceName>MineInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mineinfo</name>
  		<replaceName>MineInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderMineInfo& mineinfo() const;
  inline ::pb::TPlunderMineInfo* mutable_mineinfo();
  inline ::pb::TPlunderMineInfo* release_mineinfo();
  inline void set_allocated_mineinfo(::pb::TPlunderMineInfo* mineinfo);

  // optional .pb.TPlunderRecordInfo BattleInfo = 3;
  inline bool has_battleinfo() const;
  inline void clear_battleinfo();
  static const int kBattleInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlunderAttackRsp</name>
  	<Function>
  		<name>battleinfo</name>
  		<replaceName>BattleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleinfo</name>
  		<replaceName>BattleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleinfo</name>
  		<replaceName>BattleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleinfo</name>
  		<replaceName>BattleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderRecordInfo& battleinfo() const;
  inline ::pb::TPlunderRecordInfo* mutable_battleinfo();
  inline ::pb::TPlunderRecordInfo* release_battleinfo();
  inline void set_allocated_battleinfo(::pb::TPlunderRecordInfo* battleinfo);

  // optional bytes BattleResult = 4;
  inline bool has_battleresult() const;
  inline void clear_battleresult();
  static const int kBattleResultFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlunderAttackRsp</name>
  	<Function>
  		<name>battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleresult() const;
  inline void set_battleresult(const ::std::string& value);
  inline void set_battleresult(const char* value);
  inline void set_battleresult(const void* value, size_t size);
  inline ::std::string* mutable_battleresult();
  inline ::std::string* release_battleresult();
  inline void set_allocated_battleresult(::std::string* battleresult);

  // @@protoc_insertion_point(class_scope:pb.TPlunderAttackRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_mineinfo();
  inline void clear_has_mineinfo();
  inline void set_has_battleinfo();
  inline void clear_has_battleinfo();
  inline void set_has_battleresult();
  inline void clear_has_battleresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPlunderMineInfo* mineinfo_;
  ::pb::TPlunderRecordInfo* battleinfo_;
  ::std::string* battleresult_;
  int result_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderAttackRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGiveupRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGiveupRsp : public ::google::protobuf::Message {
 public:
  TPlunderGiveupRsp();
  virtual ~TPlunderGiveupRsp();

  TPlunderGiveupRsp(const TPlunderGiveupRsp& from);

  inline TPlunderGiveupRsp& operator=(const TPlunderGiveupRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGiveupRsp& default_instance();

  void Swap(TPlunderGiveupRsp* other);

  // implements Message ----------------------------------------------

  TPlunderGiveupRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGiveupRsp& from);
  void MergeFrom(const TPlunderGiveupRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EPlunderGatherResult ResultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGiveupRsp</name>
  	<Function>
  		<name>resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EPlunderGatherResult resultcode() const;
  inline void set_resultcode(::pb::EPlunderGatherResult value);

  // optional uint32 RewardScore = 2;
  inline bool has_rewardscore() const;
  inline void clear_rewardscore();
  static const int kRewardScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGiveupRsp</name>
  	<Function>
  		<name>rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardscore() const;
  inline void set_rewardscore(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward SeniorRewardArr = 3;
  inline int seniorrewardarr_size() const;
  inline void clear_seniorrewardarr();
  static const int kSeniorRewardArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGiveupRsp</name>
  	<Function>
  		<name>seniorrewardarr</name>
  		<replaceName>SeniorRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_seniorrewardarr</name>
  		<replaceName>SeniorRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_seniorrewardarr</name>
  		<replaceName>SeniorRewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_seniorrewardarr</name>
  		<replaceName>SeniorRewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>seniorrewardarr_size</name>
  		<replaceName>SeniorRewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& seniorrewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_seniorrewardarr(int index);
  inline ::pb::TCommonReward* add_seniorrewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      seniorrewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_seniorrewardarr();

  // @@protoc_insertion_point(class_scope:pb.TPlunderGiveupRsp)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();
  inline void set_has_rewardscore();
  inline void clear_has_rewardscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int resultcode_;
  ::google::protobuf::uint32 rewardscore_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > seniorrewardarr_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGiveupRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderAutoSetMineReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderAutoSetMineReq : public ::google::protobuf::Message {
 public:
  TPlunderAutoSetMineReq();
  virtual ~TPlunderAutoSetMineReq();

  TPlunderAutoSetMineReq(const TPlunderAutoSetMineReq& from);

  inline TPlunderAutoSetMineReq& operator=(const TPlunderAutoSetMineReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderAutoSetMineReq& default_instance();

  void Swap(TPlunderAutoSetMineReq* other);

  // implements Message ----------------------------------------------

  TPlunderAutoSetMineReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderAutoSetMineReq& from);
  void MergeFrom(const TPlunderAutoSetMineReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AreaLevel = 1;
  inline bool has_arealevel() const;
  inline void clear_arealevel();
  static const int kAreaLevelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderAutoSetMineReq</name>
  	<Function>
  		<name>arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arealevel</name>
  		<replaceName>AreaLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arealevel() const;
  inline void set_arealevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderAutoSetMineReq)
 private:
  inline void set_has_arealevel();
  inline void clear_has_arealevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 arealevel_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderAutoSetMineReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderAutoSetMineRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderAutoSetMineRsp : public ::google::protobuf::Message {
 public:
  TPlunderAutoSetMineRsp();
  virtual ~TPlunderAutoSetMineRsp();

  TPlunderAutoSetMineRsp(const TPlunderAutoSetMineRsp& from);

  inline TPlunderAutoSetMineRsp& operator=(const TPlunderAutoSetMineRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderAutoSetMineRsp& default_instance();

  void Swap(TPlunderAutoSetMineRsp* other);

  // implements Message ----------------------------------------------

  TPlunderAutoSetMineRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderAutoSetMineRsp& from);
  void MergeFrom(const TPlunderAutoSetMineRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EPlunderAttackResult Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderAutoSetMineRsp</name>
  	<Function>
  		<name>result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EPlunderAttackResult result() const;
  inline void set_result(::pb::EPlunderAttackResult value);

  // optional .pb.TPlunderMineInfo MineInfo = 2;
  inline bool has_mineinfo() const;
  inline void clear_mineinfo();
  static const int kMineInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderAutoSetMineRsp</name>
  	<Function>
  		<name>mineinfo</name>
  		<replaceName>MineInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mineinfo</name>
  		<replaceName>MineInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_mineinfo</name>
  		<replaceName>MineInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mineinfo</name>
  		<replaceName>MineInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderMineInfo& mineinfo() const;
  inline ::pb::TPlunderMineInfo* mutable_mineinfo();
  inline ::pb::TPlunderMineInfo* release_mineinfo();
  inline void set_allocated_mineinfo(::pb::TPlunderMineInfo* mineinfo);

  // optional .pb.TPlunderGiveupRsp GiveupRsp = 3;
  inline bool has_giveuprsp() const;
  inline void clear_giveuprsp();
  static const int kGiveupRspFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlunderAutoSetMineRsp</name>
  	<Function>
  		<name>giveuprsp</name>
  		<replaceName>GiveupRsp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_giveuprsp</name>
  		<replaceName>GiveupRsp</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_giveuprsp</name>
  		<replaceName>GiveupRsp</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_giveuprsp</name>
  		<replaceName>GiveupRsp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderGiveupRsp& giveuprsp() const;
  inline ::pb::TPlunderGiveupRsp* mutable_giveuprsp();
  inline ::pb::TPlunderGiveupRsp* release_giveuprsp();
  inline void set_allocated_giveuprsp(::pb::TPlunderGiveupRsp* giveuprsp);

  // @@protoc_insertion_point(class_scope:pb.TPlunderAutoSetMineRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_mineinfo();
  inline void clear_has_mineinfo();
  inline void set_has_giveuprsp();
  inline void clear_has_giveuprsp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPlunderMineInfo* mineinfo_;
  ::pb::TPlunderGiveupRsp* giveuprsp_;
  int result_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderAutoSetMineRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGetSelfRecordListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGetSelfRecordListRsp : public ::google::protobuf::Message {
 public:
  TPlunderGetSelfRecordListRsp();
  virtual ~TPlunderGetSelfRecordListRsp();

  TPlunderGetSelfRecordListRsp(const TPlunderGetSelfRecordListRsp& from);

  inline TPlunderGetSelfRecordListRsp& operator=(const TPlunderGetSelfRecordListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGetSelfRecordListRsp& default_instance();

  void Swap(TPlunderGetSelfRecordListRsp* other);

  // implements Message ----------------------------------------------

  TPlunderGetSelfRecordListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGetSelfRecordListRsp& from);
  void MergeFrom(const TPlunderGetSelfRecordListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPlunderRecordInfo RecordArr = 1;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetSelfRecordListRsp</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderRecordInfo& recordarr(int index) const;
  inline ::pb::TPlunderRecordInfo* mutable_recordarr(int index);
  inline ::pb::TPlunderRecordInfo* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRecordInfo >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRecordInfo >*
      mutable_recordarr();

  // @@protoc_insertion_point(class_scope:pb.TPlunderGetSelfRecordListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRecordInfo > recordarr_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGetSelfRecordListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGetSelfRecordInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGetSelfRecordInfoReq : public ::google::protobuf::Message {
 public:
  TPlunderGetSelfRecordInfoReq();
  virtual ~TPlunderGetSelfRecordInfoReq();

  TPlunderGetSelfRecordInfoReq(const TPlunderGetSelfRecordInfoReq& from);

  inline TPlunderGetSelfRecordInfoReq& operator=(const TPlunderGetSelfRecordInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGetSelfRecordInfoReq& default_instance();

  void Swap(TPlunderGetSelfRecordInfoReq* other);

  // implements Message ----------------------------------------------

  TPlunderGetSelfRecordInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGetSelfRecordInfoReq& from);
  void MergeFrom(const TPlunderGetSelfRecordInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RecordId = 1;
  inline bool has_recordid() const;
  inline void clear_recordid();
  static const int kRecordIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetSelfRecordInfoReq</name>
  	<Function>
  		<name>recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordid() const;
  inline void set_recordid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderGetSelfRecordInfoReq)
 private:
  inline void set_has_recordid();
  inline void clear_has_recordid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 recordid_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGetSelfRecordInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGetSelfRecordInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGetSelfRecordInfoRsp : public ::google::protobuf::Message {
 public:
  TPlunderGetSelfRecordInfoRsp();
  virtual ~TPlunderGetSelfRecordInfoRsp();

  TPlunderGetSelfRecordInfoRsp(const TPlunderGetSelfRecordInfoRsp& from);

  inline TPlunderGetSelfRecordInfoRsp& operator=(const TPlunderGetSelfRecordInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGetSelfRecordInfoRsp& default_instance();

  void Swap(TPlunderGetSelfRecordInfoRsp* other);

  // implements Message ----------------------------------------------

  TPlunderGetSelfRecordInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGetSelfRecordInfoRsp& from);
  void MergeFrom(const TPlunderGetSelfRecordInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPlunderRecordInfo RecordInfo = 1;
  inline bool has_recordinfo() const;
  inline void clear_recordinfo();
  static const int kRecordInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetSelfRecordInfoRsp</name>
  	<Function>
  		<name>recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderRecordInfo& recordinfo() const;
  inline ::pb::TPlunderRecordInfo* mutable_recordinfo();
  inline ::pb::TPlunderRecordInfo* release_recordinfo();
  inline void set_allocated_recordinfo(::pb::TPlunderRecordInfo* recordinfo);

  // optional bytes BattleResult = 2;
  inline bool has_battleresult() const;
  inline void clear_battleresult();
  static const int kBattleResultFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetSelfRecordInfoRsp</name>
  	<Function>
  		<name>battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleresult() const;
  inline void set_battleresult(const ::std::string& value);
  inline void set_battleresult(const char* value);
  inline void set_battleresult(const void* value, size_t size);
  inline ::std::string* mutable_battleresult();
  inline ::std::string* release_battleresult();
  inline void set_allocated_battleresult(::std::string* battleresult);

  // @@protoc_insertion_point(class_scope:pb.TPlunderGetSelfRecordInfoRsp)
 private:
  inline void set_has_recordinfo();
  inline void clear_has_recordinfo();
  inline void set_has_battleresult();
  inline void clear_has_battleresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPlunderRecordInfo* recordinfo_;
  ::std::string* battleresult_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGetSelfRecordInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGetEnemyListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGetEnemyListRsp : public ::google::protobuf::Message {
 public:
  TPlunderGetEnemyListRsp();
  virtual ~TPlunderGetEnemyListRsp();

  TPlunderGetEnemyListRsp(const TPlunderGetEnemyListRsp& from);

  inline TPlunderGetEnemyListRsp& operator=(const TPlunderGetEnemyListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGetEnemyListRsp& default_instance();

  void Swap(TPlunderGetEnemyListRsp* other);

  // implements Message ----------------------------------------------

  TPlunderGetEnemyListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGetEnemyListRsp& from);
  void MergeFrom(const TPlunderGetEnemyListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPlunderEnemyInfo EnemyList = 1;
  inline int enemylist_size() const;
  inline void clear_enemylist();
  static const int kEnemyListFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetEnemyListRsp</name>
  	<Function>
  		<name>enemylist</name>
  		<replaceName>EnemyList</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enemylist</name>
  		<replaceName>EnemyList</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enemylist</name>
  		<replaceName>EnemyList</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemylist</name>
  		<replaceName>EnemyList</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enemylist_size</name>
  		<replaceName>EnemyList</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderEnemyInfo& enemylist(int index) const;
  inline ::pb::TPlunderEnemyInfo* mutable_enemylist(int index);
  inline ::pb::TPlunderEnemyInfo* add_enemylist();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlunderEnemyInfo >&
      enemylist() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlunderEnemyInfo >*
      mutable_enemylist();

  // @@protoc_insertion_point(class_scope:pb.TPlunderGetEnemyListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlunderEnemyInfo > enemylist_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGetEnemyListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderRemoveEnemyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderRemoveEnemyReq : public ::google::protobuf::Message {
 public:
  TPlunderRemoveEnemyReq();
  virtual ~TPlunderRemoveEnemyReq();

  TPlunderRemoveEnemyReq(const TPlunderRemoveEnemyReq& from);

  inline TPlunderRemoveEnemyReq& operator=(const TPlunderRemoveEnemyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderRemoveEnemyReq& default_instance();

  void Swap(TPlunderRemoveEnemyReq* other);

  // implements Message ----------------------------------------------

  TPlunderRemoveEnemyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderRemoveEnemyReq& from);
  void MergeFrom(const TPlunderRemoveEnemyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRemoveEnemyReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderRemoveEnemyReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderRemoveEnemyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGetEnemyMineListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGetEnemyMineListReq : public ::google::protobuf::Message {
 public:
  TPlunderGetEnemyMineListReq();
  virtual ~TPlunderGetEnemyMineListReq();

  TPlunderGetEnemyMineListReq(const TPlunderGetEnemyMineListReq& from);

  inline TPlunderGetEnemyMineListReq& operator=(const TPlunderGetEnemyMineListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGetEnemyMineListReq& default_instance();

  void Swap(TPlunderGetEnemyMineListReq* other);

  // implements Message ----------------------------------------------

  TPlunderGetEnemyMineListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGetEnemyMineListReq& from);
  void MergeFrom(const TPlunderGetEnemyMineListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetEnemyMineListReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderGetEnemyMineListReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGetEnemyMineListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGetEnemyMineListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGetEnemyMineListRsp : public ::google::protobuf::Message {
 public:
  TPlunderGetEnemyMineListRsp();
  virtual ~TPlunderGetEnemyMineListRsp();

  TPlunderGetEnemyMineListRsp(const TPlunderGetEnemyMineListRsp& from);

  inline TPlunderGetEnemyMineListRsp& operator=(const TPlunderGetEnemyMineListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGetEnemyMineListRsp& default_instance();

  void Swap(TPlunderGetEnemyMineListRsp* other);

  // implements Message ----------------------------------------------

  TPlunderGetEnemyMineListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGetEnemyMineListRsp& from);
  void MergeFrom(const TPlunderGetEnemyMineListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPlunderMinePos MinePos = 1;
  inline bool has_minepos() const;
  inline void clear_minepos();
  static const int kMinePosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetEnemyMineListRsp</name>
  	<Function>
  		<name>minepos</name>
  		<replaceName>MinePos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_minepos</name>
  		<replaceName>MinePos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_minepos</name>
  		<replaceName>MinePos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_minepos</name>
  		<replaceName>MinePos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderMinePos& minepos() const;
  inline ::pb::TPlunderMinePos* mutable_minepos();
  inline ::pb::TPlunderMinePos* release_minepos();
  inline void set_allocated_minepos(::pb::TPlunderMinePos* minepos);

  // @@protoc_insertion_point(class_scope:pb.TPlunderGetEnemyMineListRsp)
 private:
  inline void set_has_minepos();
  inline void clear_has_minepos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPlunderMinePos* minepos_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGetEnemyMineListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderRevengeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderRevengeReq : public ::google::protobuf::Message {
 public:
  TPlunderRevengeReq();
  virtual ~TPlunderRevengeReq();

  TPlunderRevengeReq(const TPlunderRevengeReq& from);

  inline TPlunderRevengeReq& operator=(const TPlunderRevengeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderRevengeReq& default_instance();

  void Swap(TPlunderRevengeReq* other);

  // implements Message ----------------------------------------------

  TPlunderRevengeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderRevengeReq& from);
  void MergeFrom(const TPlunderRevengeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRevengeReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional bool SkipBattleResult = 2;
  inline bool has_skipbattleresult() const;
  inline void clear_skipbattleresult();
  static const int kSkipBattleResultFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRevengeReq</name>
  	<Function>
  		<name>skipbattleresult</name>
  		<replaceName>SkipBattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skipbattleresult</name>
  		<replaceName>SkipBattleResult</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skipbattleresult</name>
  		<replaceName>SkipBattleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool skipbattleresult() const;
  inline void set_skipbattleresult(bool value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderRevengeReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_skipbattleresult();
  inline void clear_has_skipbattleresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  bool skipbattleresult_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderRevengeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderRevengeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderRevengeRsp : public ::google::protobuf::Message {
 public:
  TPlunderRevengeRsp();
  virtual ~TPlunderRevengeRsp();

  TPlunderRevengeRsp(const TPlunderRevengeRsp& from);

  inline TPlunderRevengeRsp& operator=(const TPlunderRevengeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderRevengeRsp& default_instance();

  void Swap(TPlunderRevengeRsp* other);

  // implements Message ----------------------------------------------

  TPlunderRevengeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderRevengeRsp& from);
  void MergeFrom(const TPlunderRevengeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPlunderRevengeRecordInfo BattleInfo = 1;
  inline bool has_battleinfo() const;
  inline void clear_battleinfo();
  static const int kBattleInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRevengeRsp</name>
  	<Function>
  		<name>battleinfo</name>
  		<replaceName>BattleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleinfo</name>
  		<replaceName>BattleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleinfo</name>
  		<replaceName>BattleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleinfo</name>
  		<replaceName>BattleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderRevengeRecordInfo& battleinfo() const;
  inline ::pb::TPlunderRevengeRecordInfo* mutable_battleinfo();
  inline ::pb::TPlunderRevengeRecordInfo* release_battleinfo();
  inline void set_allocated_battleinfo(::pb::TPlunderRevengeRecordInfo* battleinfo);

  // optional bytes BattleResult = 2;
  inline bool has_battleresult() const;
  inline void clear_battleresult();
  static const int kBattleResultFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRevengeRsp</name>
  	<Function>
  		<name>battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleresult() const;
  inline void set_battleresult(const ::std::string& value);
  inline void set_battleresult(const char* value);
  inline void set_battleresult(const void* value, size_t size);
  inline ::std::string* mutable_battleresult();
  inline ::std::string* release_battleresult();
  inline void set_allocated_battleresult(::std::string* battleresult);

  // @@protoc_insertion_point(class_scope:pb.TPlunderRevengeRsp)
 private:
  inline void set_has_battleinfo();
  inline void clear_has_battleinfo();
  inline void set_has_battleresult();
  inline void clear_has_battleresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPlunderRevengeRecordInfo* battleinfo_;
  ::std::string* battleresult_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderRevengeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderRankInfo : public ::google::protobuf::Message {
 public:
  TPlunderRankInfo();
  virtual ~TPlunderRankInfo();

  TPlunderRankInfo(const TPlunderRankInfo& from);

  inline TPlunderRankInfo& operator=(const TPlunderRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderRankInfo& default_instance();

  void Swap(TPlunderRankInfo* other);

  // implements Message ----------------------------------------------

  TPlunderRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderRankInfo& from);
  void MergeFrom(const TPlunderRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRankInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfoWithAlly UserInfo = 2;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRankInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfoWithAlly& userinfo() const;
  inline ::pb::TUserSimpleInfoWithAlly* mutable_userinfo();
  inline ::pb::TUserSimpleInfoWithAlly* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfoWithAlly* userinfo);

  // optional uint32 Score = 10;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRankInfo</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional int64 Time = 11;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRankInfo</name>
  	<Function>
  		<name>time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional int32 Rank = 12;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRankInfo</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderRankInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::pb::TUserSimpleInfoWithAlly* userinfo_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::int32 rank_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGetRevengeRecordListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGetRevengeRecordListRsp : public ::google::protobuf::Message {
 public:
  TPlunderGetRevengeRecordListRsp();
  virtual ~TPlunderGetRevengeRecordListRsp();

  TPlunderGetRevengeRecordListRsp(const TPlunderGetRevengeRecordListRsp& from);

  inline TPlunderGetRevengeRecordListRsp& operator=(const TPlunderGetRevengeRecordListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGetRevengeRecordListRsp& default_instance();

  void Swap(TPlunderGetRevengeRecordListRsp* other);

  // implements Message ----------------------------------------------

  TPlunderGetRevengeRecordListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGetRevengeRecordListRsp& from);
  void MergeFrom(const TPlunderGetRevengeRecordListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPlunderRevengeRecordInfo RecordArr = 1;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetRevengeRecordListRsp</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderRevengeRecordInfo& recordarr(int index) const;
  inline ::pb::TPlunderRevengeRecordInfo* mutable_recordarr(int index);
  inline ::pb::TPlunderRevengeRecordInfo* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRevengeRecordInfo >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRevengeRecordInfo >*
      mutable_recordarr();

  // @@protoc_insertion_point(class_scope:pb.TPlunderGetRevengeRecordListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRevengeRecordInfo > recordarr_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGetRevengeRecordListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGetRevengeRecordInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGetRevengeRecordInfoReq : public ::google::protobuf::Message {
 public:
  TPlunderGetRevengeRecordInfoReq();
  virtual ~TPlunderGetRevengeRecordInfoReq();

  TPlunderGetRevengeRecordInfoReq(const TPlunderGetRevengeRecordInfoReq& from);

  inline TPlunderGetRevengeRecordInfoReq& operator=(const TPlunderGetRevengeRecordInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGetRevengeRecordInfoReq& default_instance();

  void Swap(TPlunderGetRevengeRecordInfoReq* other);

  // implements Message ----------------------------------------------

  TPlunderGetRevengeRecordInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGetRevengeRecordInfoReq& from);
  void MergeFrom(const TPlunderGetRevengeRecordInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RecordId = 1;
  inline bool has_recordid() const;
  inline void clear_recordid();
  static const int kRecordIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetRevengeRecordInfoReq</name>
  	<Function>
  		<name>recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordid() const;
  inline void set_recordid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderGetRevengeRecordInfoReq)
 private:
  inline void set_has_recordid();
  inline void clear_has_recordid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 recordid_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGetRevengeRecordInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGetRevengeRecordInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGetRevengeRecordInfoRsp : public ::google::protobuf::Message {
 public:
  TPlunderGetRevengeRecordInfoRsp();
  virtual ~TPlunderGetRevengeRecordInfoRsp();

  TPlunderGetRevengeRecordInfoRsp(const TPlunderGetRevengeRecordInfoRsp& from);

  inline TPlunderGetRevengeRecordInfoRsp& operator=(const TPlunderGetRevengeRecordInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGetRevengeRecordInfoRsp& default_instance();

  void Swap(TPlunderGetRevengeRecordInfoRsp* other);

  // implements Message ----------------------------------------------

  TPlunderGetRevengeRecordInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGetRevengeRecordInfoRsp& from);
  void MergeFrom(const TPlunderGetRevengeRecordInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPlunderRevengeRecordInfo RecordInfo = 1;
  inline bool has_recordinfo() const;
  inline void clear_recordinfo();
  static const int kRecordInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetRevengeRecordInfoRsp</name>
  	<Function>
  		<name>recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderRevengeRecordInfo& recordinfo() const;
  inline ::pb::TPlunderRevengeRecordInfo* mutable_recordinfo();
  inline ::pb::TPlunderRevengeRecordInfo* release_recordinfo();
  inline void set_allocated_recordinfo(::pb::TPlunderRevengeRecordInfo* recordinfo);

  // optional bytes BattleResult = 2;
  inline bool has_battleresult() const;
  inline void clear_battleresult();
  static const int kBattleResultFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetRevengeRecordInfoRsp</name>
  	<Function>
  		<name>battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleresult() const;
  inline void set_battleresult(const ::std::string& value);
  inline void set_battleresult(const char* value);
  inline void set_battleresult(const void* value, size_t size);
  inline ::std::string* mutable_battleresult();
  inline ::std::string* release_battleresult();
  inline void set_allocated_battleresult(::std::string* battleresult);

  // @@protoc_insertion_point(class_scope:pb.TPlunderGetRevengeRecordInfoRsp)
 private:
  inline void set_has_recordinfo();
  inline void clear_has_recordinfo();
  inline void set_has_battleresult();
  inline void clear_has_battleresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPlunderRevengeRecordInfo* recordinfo_;
  ::std::string* battleresult_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGetRevengeRecordInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderRankReq : public ::google::protobuf::Message {
 public:
  TPlunderRankReq();
  virtual ~TPlunderRankReq();

  TPlunderRankReq(const TPlunderRankReq& from);

  inline TPlunderRankReq& operator=(const TPlunderRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderRankReq& default_instance();

  void Swap(TPlunderRankReq* other);

  // implements Message ----------------------------------------------

  TPlunderRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderRankReq& from);
  void MergeFrom(const TPlunderRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRankReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRankReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderRankReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderRankRsp : public ::google::protobuf::Message {
 public:
  TPlunderRankRsp();
  virtual ~TPlunderRankRsp();

  TPlunderRankRsp(const TPlunderRankRsp& from);

  inline TPlunderRankRsp& operator=(const TPlunderRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderRankRsp& default_instance();

  void Swap(TPlunderRankRsp* other);

  // implements Message ----------------------------------------------

  TPlunderRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderRankRsp& from);
  void MergeFrom(const TPlunderRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPlunderRankInfo RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRankRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderRankInfo& rankarr(int index) const;
  inline ::pb::TPlunderRankInfo* mutable_rankarr(int index);
  inline ::pb::TPlunderRankInfo* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRankInfo >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRankInfo >*
      mutable_rankarr();

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRankRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // optional uint32 MyScore = 3;
  inline bool has_myscore() const;
  inline void clear_myscore();
  static const int kMyScoreFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRankRsp</name>
  	<Function>
  		<name>myscore</name>
  		<replaceName>MyScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myscore</name>
  		<replaceName>MyScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myscore</name>
  		<replaceName>MyScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 myscore() const;
  inline void set_myscore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderRankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();
  inline void set_has_myscore();
  inline void clear_has_myscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRankInfo > rankarr_;
  ::google::protobuf::int32 myrank_;
  ::google::protobuf::uint32 myscore_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderGetPalaceCDNumRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderGetPalaceCDNumRsp : public ::google::protobuf::Message {
 public:
  TPlunderGetPalaceCDNumRsp();
  virtual ~TPlunderGetPalaceCDNumRsp();

  TPlunderGetPalaceCDNumRsp(const TPlunderGetPalaceCDNumRsp& from);

  inline TPlunderGetPalaceCDNumRsp& operator=(const TPlunderGetPalaceCDNumRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderGetPalaceCDNumRsp& default_instance();

  void Swap(TPlunderGetPalaceCDNumRsp* other);

  // implements Message ----------------------------------------------

  TPlunderGetPalaceCDNumRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderGetPalaceCDNumRsp& from);
  void MergeFrom(const TPlunderGetPalaceCDNumRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FreeCDNum = 1;
  inline bool has_freecdnum() const;
  inline void clear_freecdnum();
  static const int kFreeCDNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderGetPalaceCDNumRsp</name>
  	<Function>
  		<name>freecdnum</name>
  		<replaceName>FreeCDNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_freecdnum</name>
  		<replaceName>FreeCDNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_freecdnum</name>
  		<replaceName>FreeCDNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 freecdnum() const;
  inline void set_freecdnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderGetPalaceCDNumRsp)
 private:
  inline void set_has_freecdnum();
  inline void clear_has_freecdnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 freecdnum_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderGetPalaceCDNumRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderBaseInfoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderBaseInfoNotify : public ::google::protobuf::Message {
 public:
  TPlunderBaseInfoNotify();
  virtual ~TPlunderBaseInfoNotify();

  TPlunderBaseInfoNotify(const TPlunderBaseInfoNotify& from);

  inline TPlunderBaseInfoNotify& operator=(const TPlunderBaseInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderBaseInfoNotify& default_instance();

  void Swap(TPlunderBaseInfoNotify* other);

  // implements Message ----------------------------------------------

  TPlunderBaseInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderBaseInfoNotify& from);
  void MergeFrom(const TPlunderBaseInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPlunderBaseInfo BaseInfo = 1;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderBaseInfoNotify</name>
  	<Function>
  		<name>baseinfo</name>
  		<replaceName>BaseInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_baseinfo</name>
  		<replaceName>BaseInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_baseinfo</name>
  		<replaceName>BaseInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_baseinfo</name>
  		<replaceName>BaseInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderBaseInfo& baseinfo() const;
  inline ::pb::TPlunderBaseInfo* mutable_baseinfo();
  inline ::pb::TPlunderBaseInfo* release_baseinfo();
  inline void set_allocated_baseinfo(::pb::TPlunderBaseInfo* baseinfo);

  // optional .pb.EPlunderEvent Event = 2;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlunderBaseInfoNotify</name>
  	<Function>
  		<name>event</name>
  		<replaceName>Event</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_event</name>
  		<replaceName>Event</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_event</name>
  		<replaceName>Event</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EPlunderEvent event() const;
  inline void set_event(::pb::EPlunderEvent value);

  // @@protoc_insertion_point(class_scope:pb.TPlunderBaseInfoNotify)
 private:
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();
  inline void set_has_event();
  inline void clear_has_event();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPlunderBaseInfo* baseinfo_;
  int event_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderBaseInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderMapInfoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderMapInfoNotify : public ::google::protobuf::Message {
 public:
  TPlunderMapInfoNotify();
  virtual ~TPlunderMapInfoNotify();

  TPlunderMapInfoNotify(const TPlunderMapInfoNotify& from);

  inline TPlunderMapInfoNotify& operator=(const TPlunderMapInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderMapInfoNotify& default_instance();

  void Swap(TPlunderMapInfoNotify* other);

  // implements Message ----------------------------------------------

  TPlunderMapInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderMapInfoNotify& from);
  void MergeFrom(const TPlunderMapInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPlunderMapInfo MapInfo = 1;
  inline bool has_mapinfo() const;
  inline void clear_mapinfo();
  static const int kMapInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderMapInfoNotify</name>
  	<Function>
  		<name>mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderMapInfo& mapinfo() const;
  inline ::pb::TPlunderMapInfo* mutable_mapinfo();
  inline ::pb::TPlunderMapInfo* release_mapinfo();
  inline void set_allocated_mapinfo(::pb::TPlunderMapInfo* mapinfo);

  // @@protoc_insertion_point(class_scope:pb.TPlunderMapInfoNotify)
 private:
  inline void set_has_mapinfo();
  inline void clear_has_mapinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPlunderMapInfo* mapinfo_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderMapInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderMineInfoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderMineInfoNotify : public ::google::protobuf::Message {
 public:
  TPlunderMineInfoNotify();
  virtual ~TPlunderMineInfoNotify();

  TPlunderMineInfoNotify(const TPlunderMineInfoNotify& from);

  inline TPlunderMineInfoNotify& operator=(const TPlunderMineInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderMineInfoNotify& default_instance();

  void Swap(TPlunderMineInfoNotify* other);

  // implements Message ----------------------------------------------

  TPlunderMineInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderMineInfoNotify& from);
  void MergeFrom(const TPlunderMineInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPlunderMineInfo ChangedInfo = 1;
  inline int changedinfo_size() const;
  inline void clear_changedinfo();
  static const int kChangedInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderMineInfoNotify</name>
  	<Function>
  		<name>changedinfo</name>
  		<replaceName>ChangedInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_changedinfo</name>
  		<replaceName>ChangedInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_changedinfo</name>
  		<replaceName>ChangedInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_changedinfo</name>
  		<replaceName>ChangedInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>changedinfo_size</name>
  		<replaceName>ChangedInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderMineInfo& changedinfo(int index) const;
  inline ::pb::TPlunderMineInfo* mutable_changedinfo(int index);
  inline ::pb::TPlunderMineInfo* add_changedinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlunderMineInfo >&
      changedinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlunderMineInfo >*
      mutable_changedinfo();

  // @@protoc_insertion_point(class_scope:pb.TPlunderMineInfoNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlunderMineInfo > changedinfo_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderMineInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlunderRecordNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlunder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlunderRecordNotify : public ::google::protobuf::Message {
 public:
  TPlunderRecordNotify();
  virtual ~TPlunderRecordNotify();

  TPlunderRecordNotify(const TPlunderRecordNotify& from);

  inline TPlunderRecordNotify& operator=(const TPlunderRecordNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlunderRecordNotify& default_instance();

  void Swap(TPlunderRecordNotify* other);

  // implements Message ----------------------------------------------

  TPlunderRecordNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlunderRecordNotify& from);
  void MergeFrom(const TPlunderRecordNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPlunderRecordInfo RecordArr = 1;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlunderRecordNotify</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlunderRecordInfo& recordarr(int index) const;
  inline ::pb::TPlunderRecordInfo* mutable_recordarr(int index);
  inline ::pb::TPlunderRecordInfo* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRecordInfo >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRecordInfo >*
      mutable_recordarr();

  // @@protoc_insertion_point(class_scope:pb.TPlunderRecordNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRecordInfo > recordarr_;
  friend void  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlunder_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto();

  void InitAsDefaultInstance();
  static TPlunderRecordNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TPlunderMinePos

// optional uint32 AreaLevel = 1;
inline bool TPlunderMinePos::has_arealevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderMinePos::set_has_arealevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderMinePos::clear_has_arealevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderMinePos::clear_arealevel() {
  arealevel_ = 0u;
  clear_has_arealevel();
}
inline ::google::protobuf::uint32 TPlunderMinePos::arealevel() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderMinePos.AreaLevel)
  return arealevel_;
}
inline void TPlunderMinePos::set_arealevel(::google::protobuf::uint32 value) {
  set_has_arealevel();
  arealevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderMinePos.AreaLevel)
}

// optional uint32 Page = 2;
inline bool TPlunderMinePos::has_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderMinePos::set_has_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderMinePos::clear_has_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderMinePos::clear_page() {
  page_ = 0u;
  clear_has_page();
}
inline ::google::protobuf::uint32 TPlunderMinePos::page() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderMinePos.Page)
  return page_;
}
inline void TPlunderMinePos::set_page(::google::protobuf::uint32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderMinePos.Page)
}

// optional uint32 MineId = 3;
inline bool TPlunderMinePos::has_mineid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlunderMinePos::set_has_mineid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlunderMinePos::clear_has_mineid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlunderMinePos::clear_mineid() {
  mineid_ = 0u;
  clear_has_mineid();
}
inline ::google::protobuf::uint32 TPlunderMinePos::mineid() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderMinePos.MineId)
  return mineid_;
}
inline void TPlunderMinePos::set_mineid(::google::protobuf::uint32 value) {
  set_has_mineid();
  mineid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderMinePos.MineId)
}

// -------------------------------------------------------------------

// TPlunderBaseInfo

// optional .pb.TPlunderMineInfo MyMineInfo = 1;
inline bool TPlunderBaseInfo::has_mymineinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderBaseInfo::set_has_mymineinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderBaseInfo::clear_has_mymineinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderBaseInfo::clear_mymineinfo() {
  if (mymineinfo_ != NULL) mymineinfo_->::pb::TPlunderMineInfo::Clear();
  clear_has_mymineinfo();
}
inline const ::pb::TPlunderMineInfo& TPlunderBaseInfo::mymineinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderBaseInfo.MyMineInfo)
  return mymineinfo_ != NULL ? *mymineinfo_ : *default_instance_->mymineinfo_;
}
inline ::pb::TPlunderMineInfo* TPlunderBaseInfo::mutable_mymineinfo() {
  set_has_mymineinfo();
  if (mymineinfo_ == NULL) mymineinfo_ = new ::pb::TPlunderMineInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderBaseInfo.MyMineInfo)
  return mymineinfo_;
}
inline ::pb::TPlunderMineInfo* TPlunderBaseInfo::release_mymineinfo() {
  clear_has_mymineinfo();
  ::pb::TPlunderMineInfo* temp = mymineinfo_;
  mymineinfo_ = NULL;
  return temp;
}
inline void TPlunderBaseInfo::set_allocated_mymineinfo(::pb::TPlunderMineInfo* mymineinfo) {
  delete mymineinfo_;
  mymineinfo_ = mymineinfo;
  if (mymineinfo) {
    set_has_mymineinfo();
  } else {
    clear_has_mymineinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderBaseInfo.MyMineInfo)
}

// optional uint32 PlunderNum = 2;
inline bool TPlunderBaseInfo::has_plundernum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderBaseInfo::set_has_plundernum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderBaseInfo::clear_has_plundernum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderBaseInfo::clear_plundernum() {
  plundernum_ = 0u;
  clear_has_plundernum();
}
inline ::google::protobuf::uint32 TPlunderBaseInfo::plundernum() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderBaseInfo.PlunderNum)
  return plundernum_;
}
inline void TPlunderBaseInfo::set_plundernum(::google::protobuf::uint32 value) {
  set_has_plundernum();
  plundernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderBaseInfo.PlunderNum)
}

// optional int64 LastPlunderTime = 3;
inline bool TPlunderBaseInfo::has_lastplundertime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlunderBaseInfo::set_has_lastplundertime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlunderBaseInfo::clear_has_lastplundertime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlunderBaseInfo::clear_lastplundertime() {
  lastplundertime_ = GOOGLE_LONGLONG(0);
  clear_has_lastplundertime();
}
inline ::google::protobuf::int64 TPlunderBaseInfo::lastplundertime() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderBaseInfo.LastPlunderTime)
  return lastplundertime_;
}
inline void TPlunderBaseInfo::set_lastplundertime(::google::protobuf::int64 value) {
  set_has_lastplundertime();
  lastplundertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderBaseInfo.LastPlunderTime)
}

// optional uint32 TotalScore = 4;
inline bool TPlunderBaseInfo::has_totalscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlunderBaseInfo::set_has_totalscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlunderBaseInfo::clear_has_totalscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlunderBaseInfo::clear_totalscore() {
  totalscore_ = 0u;
  clear_has_totalscore();
}
inline ::google::protobuf::uint32 TPlunderBaseInfo::totalscore() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderBaseInfo.TotalScore)
  return totalscore_;
}
inline void TPlunderBaseInfo::set_totalscore(::google::protobuf::uint32 value) {
  set_has_totalscore();
  totalscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderBaseInfo.TotalScore)
}

// optional uint32 MaxAreaLevel = 5;
inline bool TPlunderBaseInfo::has_maxarealevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlunderBaseInfo::set_has_maxarealevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlunderBaseInfo::clear_has_maxarealevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlunderBaseInfo::clear_maxarealevel() {
  maxarealevel_ = 0u;
  clear_has_maxarealevel();
}
inline ::google::protobuf::uint32 TPlunderBaseInfo::maxarealevel() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderBaseInfo.MaxAreaLevel)
  return maxarealevel_;
}
inline void TPlunderBaseInfo::set_maxarealevel(::google::protobuf::uint32 value) {
  set_has_maxarealevel();
  maxarealevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderBaseInfo.MaxAreaLevel)
}

// optional uint32 DefeatedNum = 6;
inline bool TPlunderBaseInfo::has_defeatednum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPlunderBaseInfo::set_has_defeatednum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPlunderBaseInfo::clear_has_defeatednum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPlunderBaseInfo::clear_defeatednum() {
  defeatednum_ = 0u;
  clear_has_defeatednum();
}
inline ::google::protobuf::uint32 TPlunderBaseInfo::defeatednum() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderBaseInfo.DefeatedNum)
  return defeatednum_;
}
inline void TPlunderBaseInfo::set_defeatednum(::google::protobuf::uint32 value) {
  set_has_defeatednum();
  defeatednum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderBaseInfo.DefeatedNum)
}

// optional int64 EnablePlunderTime = 7;
inline bool TPlunderBaseInfo::has_enableplundertime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TPlunderBaseInfo::set_has_enableplundertime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TPlunderBaseInfo::clear_has_enableplundertime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TPlunderBaseInfo::clear_enableplundertime() {
  enableplundertime_ = GOOGLE_LONGLONG(0);
  clear_has_enableplundertime();
}
inline ::google::protobuf::int64 TPlunderBaseInfo::enableplundertime() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderBaseInfo.EnablePlunderTime)
  return enableplundertime_;
}
inline void TPlunderBaseInfo::set_enableplundertime(::google::protobuf::int64 value) {
  set_has_enableplundertime();
  enableplundertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderBaseInfo.EnablePlunderTime)
}

// -------------------------------------------------------------------

// TPlunderMapInfo

// optional uint32 AreaLevel = 1;
inline bool TPlunderMapInfo::has_arealevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderMapInfo::set_has_arealevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderMapInfo::clear_has_arealevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderMapInfo::clear_arealevel() {
  arealevel_ = 0u;
  clear_has_arealevel();
}
inline ::google::protobuf::uint32 TPlunderMapInfo::arealevel() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderMapInfo.AreaLevel)
  return arealevel_;
}
inline void TPlunderMapInfo::set_arealevel(::google::protobuf::uint32 value) {
  set_has_arealevel();
  arealevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderMapInfo.AreaLevel)
}

// optional uint32 MineNum = 2;
inline bool TPlunderMapInfo::has_minenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderMapInfo::set_has_minenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderMapInfo::clear_has_minenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderMapInfo::clear_minenum() {
  minenum_ = 0u;
  clear_has_minenum();
}
inline ::google::protobuf::uint32 TPlunderMapInfo::minenum() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderMapInfo.MineNum)
  return minenum_;
}
inline void TPlunderMapInfo::set_minenum(::google::protobuf::uint32 value) {
  set_has_minenum();
  minenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderMapInfo.MineNum)
}

// optional uint32 UserNum = 3;
inline bool TPlunderMapInfo::has_usernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlunderMapInfo::set_has_usernum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlunderMapInfo::clear_has_usernum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlunderMapInfo::clear_usernum() {
  usernum_ = 0u;
  clear_has_usernum();
}
inline ::google::protobuf::uint32 TPlunderMapInfo::usernum() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderMapInfo.UserNum)
  return usernum_;
}
inline void TPlunderMapInfo::set_usernum(::google::protobuf::uint32 value) {
  set_has_usernum();
  usernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderMapInfo.UserNum)
}

// optional uint32 PageNum = 4;
inline bool TPlunderMapInfo::has_pagenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlunderMapInfo::set_has_pagenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlunderMapInfo::clear_has_pagenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlunderMapInfo::clear_pagenum() {
  pagenum_ = 0u;
  clear_has_pagenum();
}
inline ::google::protobuf::uint32 TPlunderMapInfo::pagenum() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderMapInfo.PageNum)
  return pagenum_;
}
inline void TPlunderMapInfo::set_pagenum(::google::protobuf::uint32 value) {
  set_has_pagenum();
  pagenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderMapInfo.PageNum)
}

// -------------------------------------------------------------------

// TPlunderPageInfo

// optional uint32 AreaLevel = 1;
inline bool TPlunderPageInfo::has_arealevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderPageInfo::set_has_arealevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderPageInfo::clear_has_arealevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderPageInfo::clear_arealevel() {
  arealevel_ = 0u;
  clear_has_arealevel();
}
inline ::google::protobuf::uint32 TPlunderPageInfo::arealevel() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderPageInfo.AreaLevel)
  return arealevel_;
}
inline void TPlunderPageInfo::set_arealevel(::google::protobuf::uint32 value) {
  set_has_arealevel();
  arealevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderPageInfo.AreaLevel)
}

// optional uint32 Page = 2;
inline bool TPlunderPageInfo::has_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderPageInfo::set_has_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderPageInfo::clear_has_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderPageInfo::clear_page() {
  page_ = 0u;
  clear_has_page();
}
inline ::google::protobuf::uint32 TPlunderPageInfo::page() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderPageInfo.Page)
  return page_;
}
inline void TPlunderPageInfo::set_page(::google::protobuf::uint32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderPageInfo.Page)
}

// repeated .pb.TPlunderMineInfo ArrMineInfo = 3;
inline int TPlunderPageInfo::arrmineinfo_size() const {
  return arrmineinfo_.size();
}
inline void TPlunderPageInfo::clear_arrmineinfo() {
  arrmineinfo_.Clear();
}
inline const ::pb::TPlunderMineInfo& TPlunderPageInfo::arrmineinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlunderPageInfo.ArrMineInfo)
  return arrmineinfo_.Get(index);
}
inline ::pb::TPlunderMineInfo* TPlunderPageInfo::mutable_arrmineinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlunderPageInfo.ArrMineInfo)
  return arrmineinfo_.Mutable(index);
}
inline ::pb::TPlunderMineInfo* TPlunderPageInfo::add_arrmineinfo() {
  // @@protoc_insertion_point(field_add:pb.TPlunderPageInfo.ArrMineInfo)
  return arrmineinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlunderMineInfo >&
TPlunderPageInfo::arrmineinfo() const {
  // @@protoc_insertion_point(field_list:pb.TPlunderPageInfo.ArrMineInfo)
  return arrmineinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlunderMineInfo >*
TPlunderPageInfo::mutable_arrmineinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlunderPageInfo.ArrMineInfo)
  return &arrmineinfo_;
}

// -------------------------------------------------------------------

// TPlunderEnemyInfo

// optional uint64 Uid = 1;
inline bool TPlunderEnemyInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderEnemyInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderEnemyInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderEnemyInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TPlunderEnemyInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderEnemyInfo.Uid)
  return uid_;
}
inline void TPlunderEnemyInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderEnemyInfo.Uid)
}

// optional uint32 HateNum = 2;
inline bool TPlunderEnemyInfo::has_hatenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderEnemyInfo::set_has_hatenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderEnemyInfo::clear_has_hatenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderEnemyInfo::clear_hatenum() {
  hatenum_ = 0u;
  clear_has_hatenum();
}
inline ::google::protobuf::uint32 TPlunderEnemyInfo::hatenum() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderEnemyInfo.HateNum)
  return hatenum_;
}
inline void TPlunderEnemyInfo::set_hatenum(::google::protobuf::uint32 value) {
  set_has_hatenum();
  hatenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderEnemyInfo.HateNum)
}

// optional int64 FirstTime = 3;
inline bool TPlunderEnemyInfo::has_firsttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlunderEnemyInfo::set_has_firsttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlunderEnemyInfo::clear_has_firsttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlunderEnemyInfo::clear_firsttime() {
  firsttime_ = GOOGLE_LONGLONG(0);
  clear_has_firsttime();
}
inline ::google::protobuf::int64 TPlunderEnemyInfo::firsttime() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderEnemyInfo.FirstTime)
  return firsttime_;
}
inline void TPlunderEnemyInfo::set_firsttime(::google::protobuf::int64 value) {
  set_has_firsttime();
  firsttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderEnemyInfo.FirstTime)
}

// optional int64 PlunderTime = 4;
inline bool TPlunderEnemyInfo::has_plundertime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlunderEnemyInfo::set_has_plundertime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlunderEnemyInfo::clear_has_plundertime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlunderEnemyInfo::clear_plundertime() {
  plundertime_ = GOOGLE_LONGLONG(0);
  clear_has_plundertime();
}
inline ::google::protobuf::int64 TPlunderEnemyInfo::plundertime() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderEnemyInfo.PlunderTime)
  return plundertime_;
}
inline void TPlunderEnemyInfo::set_plundertime(::google::protobuf::int64 value) {
  set_has_plundertime();
  plundertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderEnemyInfo.PlunderTime)
}

// optional uint32 HateScore = 5;
inline bool TPlunderEnemyInfo::has_hatescore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlunderEnemyInfo::set_has_hatescore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlunderEnemyInfo::clear_has_hatescore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlunderEnemyInfo::clear_hatescore() {
  hatescore_ = 0u;
  clear_has_hatescore();
}
inline ::google::protobuf::uint32 TPlunderEnemyInfo::hatescore() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderEnemyInfo.HateScore)
  return hatescore_;
}
inline void TPlunderEnemyInfo::set_hatescore(::google::protobuf::uint32 value) {
  set_has_hatescore();
  hatescore_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderEnemyInfo.HateScore)
}

// optional bool Revenged = 6;
inline bool TPlunderEnemyInfo::has_revenged() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPlunderEnemyInfo::set_has_revenged() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPlunderEnemyInfo::clear_has_revenged() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPlunderEnemyInfo::clear_revenged() {
  revenged_ = false;
  clear_has_revenged();
}
inline bool TPlunderEnemyInfo::revenged() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderEnemyInfo.Revenged)
  return revenged_;
}
inline void TPlunderEnemyInfo::set_revenged(bool value) {
  set_has_revenged();
  revenged_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderEnemyInfo.Revenged)
}

// optional uint32 HateSeniorRewardScore = 7;
inline bool TPlunderEnemyInfo::has_hateseniorrewardscore() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TPlunderEnemyInfo::set_has_hateseniorrewardscore() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TPlunderEnemyInfo::clear_has_hateseniorrewardscore() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TPlunderEnemyInfo::clear_hateseniorrewardscore() {
  hateseniorrewardscore_ = 0u;
  clear_has_hateseniorrewardscore();
}
inline ::google::protobuf::uint32 TPlunderEnemyInfo::hateseniorrewardscore() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderEnemyInfo.HateSeniorRewardScore)
  return hateseniorrewardscore_;
}
inline void TPlunderEnemyInfo::set_hateseniorrewardscore(::google::protobuf::uint32 value) {
  set_has_hateseniorrewardscore();
  hateseniorrewardscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderEnemyInfo.HateSeniorRewardScore)
}

// optional .pb.TUserSimpleInfoWithAlly UserInfo = 10;
inline bool TPlunderEnemyInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TPlunderEnemyInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TPlunderEnemyInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TPlunderEnemyInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfoWithAlly::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfoWithAlly& TPlunderEnemyInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderEnemyInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfoWithAlly* TPlunderEnemyInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfoWithAlly;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderEnemyInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfoWithAlly* TPlunderEnemyInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfoWithAlly* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TPlunderEnemyInfo::set_allocated_userinfo(::pb::TUserSimpleInfoWithAlly* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderEnemyInfo.UserInfo)
}

// -------------------------------------------------------------------

// TPlunderRecordInfo

// optional uint64 RecordId = 1;
inline bool TPlunderRecordInfo::has_recordid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderRecordInfo::set_has_recordid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderRecordInfo::clear_has_recordid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderRecordInfo::clear_recordid() {
  recordid_ = GOOGLE_ULONGLONG(0);
  clear_has_recordid();
}
inline ::google::protobuf::uint64 TPlunderRecordInfo::recordid() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRecordInfo.RecordId)
  return recordid_;
}
inline void TPlunderRecordInfo::set_recordid(::google::protobuf::uint64 value) {
  set_has_recordid();
  recordid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRecordInfo.RecordId)
}

// optional int64 RecordTime = 2;
inline bool TPlunderRecordInfo::has_recordtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderRecordInfo::set_has_recordtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderRecordInfo::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderRecordInfo::clear_recordtime() {
  recordtime_ = GOOGLE_LONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::int64 TPlunderRecordInfo::recordtime() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRecordInfo.RecordTime)
  return recordtime_;
}
inline void TPlunderRecordInfo::set_recordtime(::google::protobuf::int64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRecordInfo.RecordTime)
}

// optional .pb.TPlunderMinePos MinePos = 3;
inline bool TPlunderRecordInfo::has_minepos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlunderRecordInfo::set_has_minepos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlunderRecordInfo::clear_has_minepos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlunderRecordInfo::clear_minepos() {
  if (minepos_ != NULL) minepos_->::pb::TPlunderMinePos::Clear();
  clear_has_minepos();
}
inline const ::pb::TPlunderMinePos& TPlunderRecordInfo::minepos() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRecordInfo.MinePos)
  return minepos_ != NULL ? *minepos_ : *default_instance_->minepos_;
}
inline ::pb::TPlunderMinePos* TPlunderRecordInfo::mutable_minepos() {
  set_has_minepos();
  if (minepos_ == NULL) minepos_ = new ::pb::TPlunderMinePos;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderRecordInfo.MinePos)
  return minepos_;
}
inline ::pb::TPlunderMinePos* TPlunderRecordInfo::release_minepos() {
  clear_has_minepos();
  ::pb::TPlunderMinePos* temp = minepos_;
  minepos_ = NULL;
  return temp;
}
inline void TPlunderRecordInfo::set_allocated_minepos(::pb::TPlunderMinePos* minepos) {
  delete minepos_;
  minepos_ = minepos;
  if (minepos) {
    set_has_minepos();
  } else {
    clear_has_minepos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderRecordInfo.MinePos)
}

// optional .pb.TUserSimpleInfoWithAlly AtkUserInfo = 4;
inline bool TPlunderRecordInfo::has_atkuserinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlunderRecordInfo::set_has_atkuserinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlunderRecordInfo::clear_has_atkuserinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlunderRecordInfo::clear_atkuserinfo() {
  if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfoWithAlly::Clear();
  clear_has_atkuserinfo();
}
inline const ::pb::TUserSimpleInfoWithAlly& TPlunderRecordInfo::atkuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRecordInfo.AtkUserInfo)
  return atkuserinfo_ != NULL ? *atkuserinfo_ : *default_instance_->atkuserinfo_;
}
inline ::pb::TUserSimpleInfoWithAlly* TPlunderRecordInfo::mutable_atkuserinfo() {
  set_has_atkuserinfo();
  if (atkuserinfo_ == NULL) atkuserinfo_ = new ::pb::TUserSimpleInfoWithAlly;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderRecordInfo.AtkUserInfo)
  return atkuserinfo_;
}
inline ::pb::TUserSimpleInfoWithAlly* TPlunderRecordInfo::release_atkuserinfo() {
  clear_has_atkuserinfo();
  ::pb::TUserSimpleInfoWithAlly* temp = atkuserinfo_;
  atkuserinfo_ = NULL;
  return temp;
}
inline void TPlunderRecordInfo::set_allocated_atkuserinfo(::pb::TUserSimpleInfoWithAlly* atkuserinfo) {
  delete atkuserinfo_;
  atkuserinfo_ = atkuserinfo;
  if (atkuserinfo) {
    set_has_atkuserinfo();
  } else {
    clear_has_atkuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderRecordInfo.AtkUserInfo)
}

// optional .pb.TUserSimpleInfoWithAlly DefUserInfo = 5;
inline bool TPlunderRecordInfo::has_defuserinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlunderRecordInfo::set_has_defuserinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlunderRecordInfo::clear_has_defuserinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlunderRecordInfo::clear_defuserinfo() {
  if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfoWithAlly::Clear();
  clear_has_defuserinfo();
}
inline const ::pb::TUserSimpleInfoWithAlly& TPlunderRecordInfo::defuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRecordInfo.DefUserInfo)
  return defuserinfo_ != NULL ? *defuserinfo_ : *default_instance_->defuserinfo_;
}
inline ::pb::TUserSimpleInfoWithAlly* TPlunderRecordInfo::mutable_defuserinfo() {
  set_has_defuserinfo();
  if (defuserinfo_ == NULL) defuserinfo_ = new ::pb::TUserSimpleInfoWithAlly;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderRecordInfo.DefUserInfo)
  return defuserinfo_;
}
inline ::pb::TUserSimpleInfoWithAlly* TPlunderRecordInfo::release_defuserinfo() {
  clear_has_defuserinfo();
  ::pb::TUserSimpleInfoWithAlly* temp = defuserinfo_;
  defuserinfo_ = NULL;
  return temp;
}
inline void TPlunderRecordInfo::set_allocated_defuserinfo(::pb::TUserSimpleInfoWithAlly* defuserinfo) {
  delete defuserinfo_;
  defuserinfo_ = defuserinfo;
  if (defuserinfo) {
    set_has_defuserinfo();
  } else {
    clear_has_defuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderRecordInfo.DefUserInfo)
}

// optional uint32 StarLevel = 6;
inline bool TPlunderRecordInfo::has_starlevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPlunderRecordInfo::set_has_starlevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPlunderRecordInfo::clear_has_starlevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPlunderRecordInfo::clear_starlevel() {
  starlevel_ = 0u;
  clear_has_starlevel();
}
inline ::google::protobuf::uint32 TPlunderRecordInfo::starlevel() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRecordInfo.StarLevel)
  return starlevel_;
}
inline void TPlunderRecordInfo::set_starlevel(::google::protobuf::uint32 value) {
  set_has_starlevel();
  starlevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRecordInfo.StarLevel)
}

// optional bool NoRewardScore = 9;
inline bool TPlunderRecordInfo::has_norewardscore() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TPlunderRecordInfo::set_has_norewardscore() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TPlunderRecordInfo::clear_has_norewardscore() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TPlunderRecordInfo::clear_norewardscore() {
  norewardscore_ = false;
  clear_has_norewardscore();
}
inline bool TPlunderRecordInfo::norewardscore() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRecordInfo.NoRewardScore)
  return norewardscore_;
}
inline void TPlunderRecordInfo::set_norewardscore(bool value) {
  set_has_norewardscore();
  norewardscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRecordInfo.NoRewardScore)
}

// optional uint32 AtkRewardScore = 10;
inline bool TPlunderRecordInfo::has_atkrewardscore() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TPlunderRecordInfo::set_has_atkrewardscore() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TPlunderRecordInfo::clear_has_atkrewardscore() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TPlunderRecordInfo::clear_atkrewardscore() {
  atkrewardscore_ = 0u;
  clear_has_atkrewardscore();
}
inline ::google::protobuf::uint32 TPlunderRecordInfo::atkrewardscore() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRecordInfo.AtkRewardScore)
  return atkrewardscore_;
}
inline void TPlunderRecordInfo::set_atkrewardscore(::google::protobuf::uint32 value) {
  set_has_atkrewardscore();
  atkrewardscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRecordInfo.AtkRewardScore)
}

// optional uint32 DefRewardScore = 11;
inline bool TPlunderRecordInfo::has_defrewardscore() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TPlunderRecordInfo::set_has_defrewardscore() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TPlunderRecordInfo::clear_has_defrewardscore() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TPlunderRecordInfo::clear_defrewardscore() {
  defrewardscore_ = 0u;
  clear_has_defrewardscore();
}
inline ::google::protobuf::uint32 TPlunderRecordInfo::defrewardscore() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRecordInfo.DefRewardScore)
  return defrewardscore_;
}
inline void TPlunderRecordInfo::set_defrewardscore(::google::protobuf::uint32 value) {
  set_has_defrewardscore();
  defrewardscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRecordInfo.DefRewardScore)
}

// optional uint32 SysRewardScore = 12;
inline bool TPlunderRecordInfo::has_sysrewardscore() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TPlunderRecordInfo::set_has_sysrewardscore() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TPlunderRecordInfo::clear_has_sysrewardscore() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TPlunderRecordInfo::clear_sysrewardscore() {
  sysrewardscore_ = 0u;
  clear_has_sysrewardscore();
}
inline ::google::protobuf::uint32 TPlunderRecordInfo::sysrewardscore() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRecordInfo.SysRewardScore)
  return sysrewardscore_;
}
inline void TPlunderRecordInfo::set_sysrewardscore(::google::protobuf::uint32 value) {
  set_has_sysrewardscore();
  sysrewardscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRecordInfo.SysRewardScore)
}

// repeated .pb.TCommonReward AtkSeniorRewardArr = 13;
inline int TPlunderRecordInfo::atkseniorrewardarr_size() const {
  return atkseniorrewardarr_.size();
}
inline void TPlunderRecordInfo::clear_atkseniorrewardarr() {
  atkseniorrewardarr_.Clear();
}
inline const ::pb::TCommonReward& TPlunderRecordInfo::atkseniorrewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRecordInfo.AtkSeniorRewardArr)
  return atkseniorrewardarr_.Get(index);
}
inline ::pb::TCommonReward* TPlunderRecordInfo::mutable_atkseniorrewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlunderRecordInfo.AtkSeniorRewardArr)
  return atkseniorrewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TPlunderRecordInfo::add_atkseniorrewardarr() {
  // @@protoc_insertion_point(field_add:pb.TPlunderRecordInfo.AtkSeniorRewardArr)
  return atkseniorrewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TPlunderRecordInfo::atkseniorrewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlunderRecordInfo.AtkSeniorRewardArr)
  return atkseniorrewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TPlunderRecordInfo::mutable_atkseniorrewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlunderRecordInfo.AtkSeniorRewardArr)
  return &atkseniorrewardarr_;
}

// repeated .pb.TCommonReward DefSeniorRewardArr = 14;
inline int TPlunderRecordInfo::defseniorrewardarr_size() const {
  return defseniorrewardarr_.size();
}
inline void TPlunderRecordInfo::clear_defseniorrewardarr() {
  defseniorrewardarr_.Clear();
}
inline const ::pb::TCommonReward& TPlunderRecordInfo::defseniorrewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRecordInfo.DefSeniorRewardArr)
  return defseniorrewardarr_.Get(index);
}
inline ::pb::TCommonReward* TPlunderRecordInfo::mutable_defseniorrewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlunderRecordInfo.DefSeniorRewardArr)
  return defseniorrewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TPlunderRecordInfo::add_defseniorrewardarr() {
  // @@protoc_insertion_point(field_add:pb.TPlunderRecordInfo.DefSeniorRewardArr)
  return defseniorrewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TPlunderRecordInfo::defseniorrewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlunderRecordInfo.DefSeniorRewardArr)
  return defseniorrewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TPlunderRecordInfo::mutable_defseniorrewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlunderRecordInfo.DefSeniorRewardArr)
  return &defseniorrewardarr_;
}

// repeated .pb.TCommonReward SysSeniorRewardArr = 15;
inline int TPlunderRecordInfo::sysseniorrewardarr_size() const {
  return sysseniorrewardarr_.size();
}
inline void TPlunderRecordInfo::clear_sysseniorrewardarr() {
  sysseniorrewardarr_.Clear();
}
inline const ::pb::TCommonReward& TPlunderRecordInfo::sysseniorrewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRecordInfo.SysSeniorRewardArr)
  return sysseniorrewardarr_.Get(index);
}
inline ::pb::TCommonReward* TPlunderRecordInfo::mutable_sysseniorrewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlunderRecordInfo.SysSeniorRewardArr)
  return sysseniorrewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TPlunderRecordInfo::add_sysseniorrewardarr() {
  // @@protoc_insertion_point(field_add:pb.TPlunderRecordInfo.SysSeniorRewardArr)
  return sysseniorrewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TPlunderRecordInfo::sysseniorrewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlunderRecordInfo.SysSeniorRewardArr)
  return sysseniorrewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TPlunderRecordInfo::mutable_sysseniorrewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlunderRecordInfo.SysSeniorRewardArr)
  return &sysseniorrewardarr_;
}

// -------------------------------------------------------------------

// TPlunderRevengeRecordInfo

// optional uint64 RecordId = 1;
inline bool TPlunderRevengeRecordInfo::has_recordid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderRevengeRecordInfo::set_has_recordid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderRevengeRecordInfo::clear_has_recordid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderRevengeRecordInfo::clear_recordid() {
  recordid_ = GOOGLE_ULONGLONG(0);
  clear_has_recordid();
}
inline ::google::protobuf::uint64 TPlunderRevengeRecordInfo::recordid() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRevengeRecordInfo.RecordId)
  return recordid_;
}
inline void TPlunderRevengeRecordInfo::set_recordid(::google::protobuf::uint64 value) {
  set_has_recordid();
  recordid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRevengeRecordInfo.RecordId)
}

// optional int64 RecordTime = 2;
inline bool TPlunderRevengeRecordInfo::has_recordtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderRevengeRecordInfo::set_has_recordtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderRevengeRecordInfo::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderRevengeRecordInfo::clear_recordtime() {
  recordtime_ = GOOGLE_LONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::int64 TPlunderRevengeRecordInfo::recordtime() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRevengeRecordInfo.RecordTime)
  return recordtime_;
}
inline void TPlunderRevengeRecordInfo::set_recordtime(::google::protobuf::int64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRevengeRecordInfo.RecordTime)
}

// optional uint32 StarLevel = 3;
inline bool TPlunderRevengeRecordInfo::has_starlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlunderRevengeRecordInfo::set_has_starlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlunderRevengeRecordInfo::clear_has_starlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlunderRevengeRecordInfo::clear_starlevel() {
  starlevel_ = 0u;
  clear_has_starlevel();
}
inline ::google::protobuf::uint32 TPlunderRevengeRecordInfo::starlevel() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRevengeRecordInfo.StarLevel)
  return starlevel_;
}
inline void TPlunderRevengeRecordInfo::set_starlevel(::google::protobuf::uint32 value) {
  set_has_starlevel();
  starlevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRevengeRecordInfo.StarLevel)
}

// optional uint32 Score = 4;
inline bool TPlunderRevengeRecordInfo::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlunderRevengeRecordInfo::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlunderRevengeRecordInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlunderRevengeRecordInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TPlunderRevengeRecordInfo::score() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRevengeRecordInfo.Score)
  return score_;
}
inline void TPlunderRevengeRecordInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRevengeRecordInfo.Score)
}

// optional .pb.TUserSimpleInfoWithAlly UserInfo = 5;
inline bool TPlunderRevengeRecordInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlunderRevengeRecordInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlunderRevengeRecordInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlunderRevengeRecordInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfoWithAlly::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfoWithAlly& TPlunderRevengeRecordInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRevengeRecordInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfoWithAlly* TPlunderRevengeRecordInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfoWithAlly;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderRevengeRecordInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfoWithAlly* TPlunderRevengeRecordInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfoWithAlly* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TPlunderRevengeRecordInfo::set_allocated_userinfo(::pb::TUserSimpleInfoWithAlly* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderRevengeRecordInfo.UserInfo)
}

// repeated .pb.TCommonReward SeniorRewardArr = 6;
inline int TPlunderRevengeRecordInfo::seniorrewardarr_size() const {
  return seniorrewardarr_.size();
}
inline void TPlunderRevengeRecordInfo::clear_seniorrewardarr() {
  seniorrewardarr_.Clear();
}
inline const ::pb::TCommonReward& TPlunderRevengeRecordInfo::seniorrewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRevengeRecordInfo.SeniorRewardArr)
  return seniorrewardarr_.Get(index);
}
inline ::pb::TCommonReward* TPlunderRevengeRecordInfo::mutable_seniorrewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlunderRevengeRecordInfo.SeniorRewardArr)
  return seniorrewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TPlunderRevengeRecordInfo::add_seniorrewardarr() {
  // @@protoc_insertion_point(field_add:pb.TPlunderRevengeRecordInfo.SeniorRewardArr)
  return seniorrewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TPlunderRevengeRecordInfo::seniorrewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlunderRevengeRecordInfo.SeniorRewardArr)
  return seniorrewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TPlunderRevengeRecordInfo::mutable_seniorrewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlunderRevengeRecordInfo.SeniorRewardArr)
  return &seniorrewardarr_;
}

// -------------------------------------------------------------------

// TPlunderMineInfo

// optional .pb.TPlunderMinePos MinePos = 1;
inline bool TPlunderMineInfo::has_minepos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderMineInfo::set_has_minepos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderMineInfo::clear_has_minepos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderMineInfo::clear_minepos() {
  if (minepos_ != NULL) minepos_->::pb::TPlunderMinePos::Clear();
  clear_has_minepos();
}
inline const ::pb::TPlunderMinePos& TPlunderMineInfo::minepos() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderMineInfo.MinePos)
  return minepos_ != NULL ? *minepos_ : *default_instance_->minepos_;
}
inline ::pb::TPlunderMinePos* TPlunderMineInfo::mutable_minepos() {
  set_has_minepos();
  if (minepos_ == NULL) minepos_ = new ::pb::TPlunderMinePos;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderMineInfo.MinePos)
  return minepos_;
}
inline ::pb::TPlunderMinePos* TPlunderMineInfo::release_minepos() {
  clear_has_minepos();
  ::pb::TPlunderMinePos* temp = minepos_;
  minepos_ = NULL;
  return temp;
}
inline void TPlunderMineInfo::set_allocated_minepos(::pb::TPlunderMinePos* minepos) {
  delete minepos_;
  minepos_ = minepos;
  if (minepos) {
    set_has_minepos();
  } else {
    clear_has_minepos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderMineInfo.MinePos)
}

// optional uint64 OccupyUid = 2;
inline bool TPlunderMineInfo::has_occupyuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderMineInfo::set_has_occupyuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderMineInfo::clear_has_occupyuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderMineInfo::clear_occupyuid() {
  occupyuid_ = GOOGLE_ULONGLONG(0);
  clear_has_occupyuid();
}
inline ::google::protobuf::uint64 TPlunderMineInfo::occupyuid() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderMineInfo.OccupyUid)
  return occupyuid_;
}
inline void TPlunderMineInfo::set_occupyuid(::google::protobuf::uint64 value) {
  set_has_occupyuid();
  occupyuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderMineInfo.OccupyUid)
}

// optional int64 OccupyTime = 3;
inline bool TPlunderMineInfo::has_occupytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlunderMineInfo::set_has_occupytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlunderMineInfo::clear_has_occupytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlunderMineInfo::clear_occupytime() {
  occupytime_ = GOOGLE_LONGLONG(0);
  clear_has_occupytime();
}
inline ::google::protobuf::int64 TPlunderMineInfo::occupytime() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderMineInfo.OccupyTime)
  return occupytime_;
}
inline void TPlunderMineInfo::set_occupytime(::google::protobuf::int64 value) {
  set_has_occupytime();
  occupytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderMineInfo.OccupyTime)
}

// optional int64 ReceiveTime = 4;
inline bool TPlunderMineInfo::has_receivetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlunderMineInfo::set_has_receivetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlunderMineInfo::clear_has_receivetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlunderMineInfo::clear_receivetime() {
  receivetime_ = GOOGLE_LONGLONG(0);
  clear_has_receivetime();
}
inline ::google::protobuf::int64 TPlunderMineInfo::receivetime() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderMineInfo.ReceiveTime)
  return receivetime_;
}
inline void TPlunderMineInfo::set_receivetime(::google::protobuf::int64 value) {
  set_has_receivetime();
  receivetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderMineInfo.ReceiveTime)
}

// optional .pb.TUserSimpleInfoWithAlly UserInfo = 5;
inline bool TPlunderMineInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlunderMineInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlunderMineInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlunderMineInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfoWithAlly::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfoWithAlly& TPlunderMineInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderMineInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfoWithAlly* TPlunderMineInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfoWithAlly;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderMineInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfoWithAlly* TPlunderMineInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfoWithAlly* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TPlunderMineInfo::set_allocated_userinfo(::pb::TUserSimpleInfoWithAlly* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderMineInfo.UserInfo)
}

// optional bool IsSenior = 6;
inline bool TPlunderMineInfo::has_issenior() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPlunderMineInfo::set_has_issenior() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPlunderMineInfo::clear_has_issenior() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPlunderMineInfo::clear_issenior() {
  issenior_ = false;
  clear_has_issenior();
}
inline bool TPlunderMineInfo::issenior() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderMineInfo.IsSenior)
  return issenior_;
}
inline void TPlunderMineInfo::set_issenior(bool value) {
  set_has_issenior();
  issenior_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderMineInfo.IsSenior)
}

// -------------------------------------------------------------------

// TPlunderGetServerTeamInfoRsp

// optional uint32 ServerTeamId = 1;
inline bool TPlunderGetServerTeamInfoRsp::has_serverteamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderGetServerTeamInfoRsp::set_has_serverteamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderGetServerTeamInfoRsp::clear_has_serverteamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderGetServerTeamInfoRsp::clear_serverteamid() {
  serverteamid_ = 0u;
  clear_has_serverteamid();
}
inline ::google::protobuf::uint32 TPlunderGetServerTeamInfoRsp::serverteamid() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetServerTeamInfoRsp.ServerTeamId)
  return serverteamid_;
}
inline void TPlunderGetServerTeamInfoRsp::set_serverteamid(::google::protobuf::uint32 value) {
  set_has_serverteamid();
  serverteamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderGetServerTeamInfoRsp.ServerTeamId)
}

// -------------------------------------------------------------------

// TPlunderGetBaseInfoRsp

// optional .pb.TPlunderBaseInfo BaseInfo = 1;
inline bool TPlunderGetBaseInfoRsp::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderGetBaseInfoRsp::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderGetBaseInfoRsp::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderGetBaseInfoRsp::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::pb::TPlunderBaseInfo::Clear();
  clear_has_baseinfo();
}
inline const ::pb::TPlunderBaseInfo& TPlunderGetBaseInfoRsp::baseinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetBaseInfoRsp.BaseInfo)
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::pb::TPlunderBaseInfo* TPlunderGetBaseInfoRsp::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::pb::TPlunderBaseInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderGetBaseInfoRsp.BaseInfo)
  return baseinfo_;
}
inline ::pb::TPlunderBaseInfo* TPlunderGetBaseInfoRsp::release_baseinfo() {
  clear_has_baseinfo();
  ::pb::TPlunderBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void TPlunderGetBaseInfoRsp::set_allocated_baseinfo(::pb::TPlunderBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderGetBaseInfoRsp.BaseInfo)
}

// -------------------------------------------------------------------

// TPlunderChallengeGuardStartBattleReq

// optional .pb.TBattleCheckParam BattleCheckParam = 1;
inline bool TPlunderChallengeGuardStartBattleReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderChallengeGuardStartBattleReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderChallengeGuardStartBattleReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderChallengeGuardStartBattleReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TPlunderChallengeGuardStartBattleReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderChallengeGuardStartBattleReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TPlunderChallengeGuardStartBattleReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderChallengeGuardStartBattleReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TPlunderChallengeGuardStartBattleReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TPlunderChallengeGuardStartBattleReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderChallengeGuardStartBattleReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TPlunderChallengeGuardStartBattleRsp

// optional .pb.TBattleArgs BattleArgs = 1;
inline bool TPlunderChallengeGuardStartBattleRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderChallengeGuardStartBattleRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderChallengeGuardStartBattleRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderChallengeGuardStartBattleRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TPlunderChallengeGuardStartBattleRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderChallengeGuardStartBattleRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TPlunderChallengeGuardStartBattleRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderChallengeGuardStartBattleRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TPlunderChallengeGuardStartBattleRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TPlunderChallengeGuardStartBattleRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderChallengeGuardStartBattleRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TPlunderChallengeGuardReportBattleReq

// optional bytes BattleRet = 1;
inline bool TPlunderChallengeGuardReportBattleReq::has_battleret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderChallengeGuardReportBattleReq::set_has_battleret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderChallengeGuardReportBattleReq::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderChallengeGuardReportBattleReq::clear_battleret() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_->clear();
  }
  clear_has_battleret();
}
inline const ::std::string& TPlunderChallengeGuardReportBattleReq::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderChallengeGuardReportBattleReq.BattleRet)
  return *battleret_;
}
inline void TPlunderChallengeGuardReportBattleReq::set_battleret(const ::std::string& value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPlunderChallengeGuardReportBattleReq.BattleRet)
}
inline void TPlunderChallengeGuardReportBattleReq::set_battleret(const char* value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPlunderChallengeGuardReportBattleReq.BattleRet)
}
inline void TPlunderChallengeGuardReportBattleReq::set_battleret(const void* value, size_t size) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPlunderChallengeGuardReportBattleReq.BattleRet)
}
inline ::std::string* TPlunderChallengeGuardReportBattleReq::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPlunderChallengeGuardReportBattleReq.BattleRet)
  return battleret_;
}
inline ::std::string* TPlunderChallengeGuardReportBattleReq::release_battleret() {
  clear_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleret_;
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPlunderChallengeGuardReportBattleReq::set_allocated_battleret(::std::string* battleret) {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (battleret) {
    set_has_battleret();
    battleret_ = battleret;
  } else {
    clear_has_battleret();
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderChallengeGuardReportBattleReq.BattleRet)
}

// -------------------------------------------------------------------

// TPlunderChallengeGuardReportBattleRsp

// optional int32 ResultCode = 1;
inline bool TPlunderChallengeGuardReportBattleRsp::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderChallengeGuardReportBattleRsp::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderChallengeGuardReportBattleRsp::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderChallengeGuardReportBattleRsp::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 TPlunderChallengeGuardReportBattleRsp::resultcode() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderChallengeGuardReportBattleRsp.ResultCode)
  return resultcode_;
}
inline void TPlunderChallengeGuardReportBattleRsp::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderChallengeGuardReportBattleRsp.ResultCode)
}

// optional uint32 MaxAreaLevel = 2;
inline bool TPlunderChallengeGuardReportBattleRsp::has_maxarealevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderChallengeGuardReportBattleRsp::set_has_maxarealevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderChallengeGuardReportBattleRsp::clear_has_maxarealevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderChallengeGuardReportBattleRsp::clear_maxarealevel() {
  maxarealevel_ = 0u;
  clear_has_maxarealevel();
}
inline ::google::protobuf::uint32 TPlunderChallengeGuardReportBattleRsp::maxarealevel() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderChallengeGuardReportBattleRsp.MaxAreaLevel)
  return maxarealevel_;
}
inline void TPlunderChallengeGuardReportBattleRsp::set_maxarealevel(::google::protobuf::uint32 value) {
  set_has_maxarealevel();
  maxarealevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderChallengeGuardReportBattleRsp.MaxAreaLevel)
}

// -------------------------------------------------------------------

// TPlunderEnterReq

// optional uint32 AreaLevel = 1;
inline bool TPlunderEnterReq::has_arealevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderEnterReq::set_has_arealevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderEnterReq::clear_has_arealevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderEnterReq::clear_arealevel() {
  arealevel_ = 0u;
  clear_has_arealevel();
}
inline ::google::protobuf::uint32 TPlunderEnterReq::arealevel() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderEnterReq.AreaLevel)
  return arealevel_;
}
inline void TPlunderEnterReq::set_arealevel(::google::protobuf::uint32 value) {
  set_has_arealevel();
  arealevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderEnterReq.AreaLevel)
}

// -------------------------------------------------------------------

// TPlunderEnterRsp

// optional .pb.TPlunderMapInfo MapInfo = 1;
inline bool TPlunderEnterRsp::has_mapinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderEnterRsp::set_has_mapinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderEnterRsp::clear_has_mapinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderEnterRsp::clear_mapinfo() {
  if (mapinfo_ != NULL) mapinfo_->::pb::TPlunderMapInfo::Clear();
  clear_has_mapinfo();
}
inline const ::pb::TPlunderMapInfo& TPlunderEnterRsp::mapinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderEnterRsp.MapInfo)
  return mapinfo_ != NULL ? *mapinfo_ : *default_instance_->mapinfo_;
}
inline ::pb::TPlunderMapInfo* TPlunderEnterRsp::mutable_mapinfo() {
  set_has_mapinfo();
  if (mapinfo_ == NULL) mapinfo_ = new ::pb::TPlunderMapInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderEnterRsp.MapInfo)
  return mapinfo_;
}
inline ::pb::TPlunderMapInfo* TPlunderEnterRsp::release_mapinfo() {
  clear_has_mapinfo();
  ::pb::TPlunderMapInfo* temp = mapinfo_;
  mapinfo_ = NULL;
  return temp;
}
inline void TPlunderEnterRsp::set_allocated_mapinfo(::pb::TPlunderMapInfo* mapinfo) {
  delete mapinfo_;
  mapinfo_ = mapinfo;
  if (mapinfo) {
    set_has_mapinfo();
  } else {
    clear_has_mapinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderEnterRsp.MapInfo)
}

// repeated .pb.TPlunderRecordInfo RecordInfoArr = 2;
inline int TPlunderEnterRsp::recordinfoarr_size() const {
  return recordinfoarr_.size();
}
inline void TPlunderEnterRsp::clear_recordinfoarr() {
  recordinfoarr_.Clear();
}
inline const ::pb::TPlunderRecordInfo& TPlunderEnterRsp::recordinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlunderEnterRsp.RecordInfoArr)
  return recordinfoarr_.Get(index);
}
inline ::pb::TPlunderRecordInfo* TPlunderEnterRsp::mutable_recordinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlunderEnterRsp.RecordInfoArr)
  return recordinfoarr_.Mutable(index);
}
inline ::pb::TPlunderRecordInfo* TPlunderEnterRsp::add_recordinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TPlunderEnterRsp.RecordInfoArr)
  return recordinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRecordInfo >&
TPlunderEnterRsp::recordinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlunderEnterRsp.RecordInfoArr)
  return recordinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRecordInfo >*
TPlunderEnterRsp::mutable_recordinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlunderEnterRsp.RecordInfoArr)
  return &recordinfoarr_;
}

// optional .pb.TPlunderPageInfo PageInfo = 3;
inline bool TPlunderEnterRsp::has_pageinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlunderEnterRsp::set_has_pageinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlunderEnterRsp::clear_has_pageinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlunderEnterRsp::clear_pageinfo() {
  if (pageinfo_ != NULL) pageinfo_->::pb::TPlunderPageInfo::Clear();
  clear_has_pageinfo();
}
inline const ::pb::TPlunderPageInfo& TPlunderEnterRsp::pageinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderEnterRsp.PageInfo)
  return pageinfo_ != NULL ? *pageinfo_ : *default_instance_->pageinfo_;
}
inline ::pb::TPlunderPageInfo* TPlunderEnterRsp::mutable_pageinfo() {
  set_has_pageinfo();
  if (pageinfo_ == NULL) pageinfo_ = new ::pb::TPlunderPageInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderEnterRsp.PageInfo)
  return pageinfo_;
}
inline ::pb::TPlunderPageInfo* TPlunderEnterRsp::release_pageinfo() {
  clear_has_pageinfo();
  ::pb::TPlunderPageInfo* temp = pageinfo_;
  pageinfo_ = NULL;
  return temp;
}
inline void TPlunderEnterRsp::set_allocated_pageinfo(::pb::TPlunderPageInfo* pageinfo) {
  delete pageinfo_;
  pageinfo_ = pageinfo;
  if (pageinfo) {
    set_has_pageinfo();
  } else {
    clear_has_pageinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderEnterRsp.PageInfo)
}

// -------------------------------------------------------------------

// TPlunderGetPageInfoReq

// optional uint32 AreaLevel = 1;
inline bool TPlunderGetPageInfoReq::has_arealevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderGetPageInfoReq::set_has_arealevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderGetPageInfoReq::clear_has_arealevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderGetPageInfoReq::clear_arealevel() {
  arealevel_ = 0u;
  clear_has_arealevel();
}
inline ::google::protobuf::uint32 TPlunderGetPageInfoReq::arealevel() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetPageInfoReq.AreaLevel)
  return arealevel_;
}
inline void TPlunderGetPageInfoReq::set_arealevel(::google::protobuf::uint32 value) {
  set_has_arealevel();
  arealevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderGetPageInfoReq.AreaLevel)
}

// optional uint32 Page = 2;
inline bool TPlunderGetPageInfoReq::has_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderGetPageInfoReq::set_has_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderGetPageInfoReq::clear_has_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderGetPageInfoReq::clear_page() {
  page_ = 0u;
  clear_has_page();
}
inline ::google::protobuf::uint32 TPlunderGetPageInfoReq::page() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetPageInfoReq.Page)
  return page_;
}
inline void TPlunderGetPageInfoReq::set_page(::google::protobuf::uint32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderGetPageInfoReq.Page)
}

// -------------------------------------------------------------------

// TPlunderGetPageInfoRsp

// optional .pb.TPlunderPageInfo PageInfo = 1;
inline bool TPlunderGetPageInfoRsp::has_pageinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderGetPageInfoRsp::set_has_pageinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderGetPageInfoRsp::clear_has_pageinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderGetPageInfoRsp::clear_pageinfo() {
  if (pageinfo_ != NULL) pageinfo_->::pb::TPlunderPageInfo::Clear();
  clear_has_pageinfo();
}
inline const ::pb::TPlunderPageInfo& TPlunderGetPageInfoRsp::pageinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetPageInfoRsp.PageInfo)
  return pageinfo_ != NULL ? *pageinfo_ : *default_instance_->pageinfo_;
}
inline ::pb::TPlunderPageInfo* TPlunderGetPageInfoRsp::mutable_pageinfo() {
  set_has_pageinfo();
  if (pageinfo_ == NULL) pageinfo_ = new ::pb::TPlunderPageInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderGetPageInfoRsp.PageInfo)
  return pageinfo_;
}
inline ::pb::TPlunderPageInfo* TPlunderGetPageInfoRsp::release_pageinfo() {
  clear_has_pageinfo();
  ::pb::TPlunderPageInfo* temp = pageinfo_;
  pageinfo_ = NULL;
  return temp;
}
inline void TPlunderGetPageInfoRsp::set_allocated_pageinfo(::pb::TPlunderPageInfo* pageinfo) {
  delete pageinfo_;
  pageinfo_ = pageinfo;
  if (pageinfo) {
    set_has_pageinfo();
  } else {
    clear_has_pageinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderGetPageInfoRsp.PageInfo)
}

// -------------------------------------------------------------------

// TPlunderGetRivalFormationReq

// optional uint64 Uid = 1;
inline bool TPlunderGetRivalFormationReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderGetRivalFormationReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderGetRivalFormationReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderGetRivalFormationReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TPlunderGetRivalFormationReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetRivalFormationReq.Uid)
  return uid_;
}
inline void TPlunderGetRivalFormationReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderGetRivalFormationReq.Uid)
}

// -------------------------------------------------------------------

// TPlunderGetRivalFormationRsp

// optional uint64 Uid = 1;
inline bool TPlunderGetRivalFormationRsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderGetRivalFormationRsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderGetRivalFormationRsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderGetRivalFormationRsp::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TPlunderGetRivalFormationRsp::uid() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetRivalFormationRsp.Uid)
  return uid_;
}
inline void TPlunderGetRivalFormationRsp::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderGetRivalFormationRsp.Uid)
}

// repeated .pb.TUnitInfo UnitArr = 2;
inline int TPlunderGetRivalFormationRsp::unitarr_size() const {
  return unitarr_.size();
}
inline void TPlunderGetRivalFormationRsp::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TUnitInfo& TPlunderGetRivalFormationRsp::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetRivalFormationRsp.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TUnitInfo* TPlunderGetRivalFormationRsp::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlunderGetRivalFormationRsp.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TUnitInfo* TPlunderGetRivalFormationRsp::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TPlunderGetRivalFormationRsp.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >&
TPlunderGetRivalFormationRsp::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlunderGetRivalFormationRsp.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >*
TPlunderGetRivalFormationRsp::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlunderGetRivalFormationRsp.UnitArr)
  return &unitarr_;
}

// optional uint64 FightForce = 3;
inline bool TPlunderGetRivalFormationRsp::has_fightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlunderGetRivalFormationRsp::set_has_fightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlunderGetRivalFormationRsp::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlunderGetRivalFormationRsp::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TPlunderGetRivalFormationRsp::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetRivalFormationRsp.FightForce)
  return fightforce_;
}
inline void TPlunderGetRivalFormationRsp::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderGetRivalFormationRsp.FightForce)
}

// -------------------------------------------------------------------

// TPlunderGatherRsp

// optional .pb.EPlunderGatherResult ResultCode = 1;
inline bool TPlunderGatherRsp::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderGatherRsp::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderGatherRsp::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderGatherRsp::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::pb::EPlunderGatherResult TPlunderGatherRsp::resultcode() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGatherRsp.ResultCode)
  return static_cast< ::pb::EPlunderGatherResult >(resultcode_);
}
inline void TPlunderGatherRsp::set_resultcode(::pb::EPlunderGatherResult value) {
  assert(::pb::EPlunderGatherResult_IsValid(value));
  set_has_resultcode();
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderGatherRsp.ResultCode)
}

// optional uint32 RewardScore = 2;
inline bool TPlunderGatherRsp::has_rewardscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderGatherRsp::set_has_rewardscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderGatherRsp::clear_has_rewardscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderGatherRsp::clear_rewardscore() {
  rewardscore_ = 0u;
  clear_has_rewardscore();
}
inline ::google::protobuf::uint32 TPlunderGatherRsp::rewardscore() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGatherRsp.RewardScore)
  return rewardscore_;
}
inline void TPlunderGatherRsp::set_rewardscore(::google::protobuf::uint32 value) {
  set_has_rewardscore();
  rewardscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderGatherRsp.RewardScore)
}

// repeated .pb.TCommonReward SeniorRewardArr = 3;
inline int TPlunderGatherRsp::seniorrewardarr_size() const {
  return seniorrewardarr_.size();
}
inline void TPlunderGatherRsp::clear_seniorrewardarr() {
  seniorrewardarr_.Clear();
}
inline const ::pb::TCommonReward& TPlunderGatherRsp::seniorrewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGatherRsp.SeniorRewardArr)
  return seniorrewardarr_.Get(index);
}
inline ::pb::TCommonReward* TPlunderGatherRsp::mutable_seniorrewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlunderGatherRsp.SeniorRewardArr)
  return seniorrewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TPlunderGatherRsp::add_seniorrewardarr() {
  // @@protoc_insertion_point(field_add:pb.TPlunderGatherRsp.SeniorRewardArr)
  return seniorrewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TPlunderGatherRsp::seniorrewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlunderGatherRsp.SeniorRewardArr)
  return seniorrewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TPlunderGatherRsp::mutable_seniorrewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlunderGatherRsp.SeniorRewardArr)
  return &seniorrewardarr_;
}

// -------------------------------------------------------------------

// TPlunderAttackReq

// optional .pb.TPlunderMinePos MinePos = 1;
inline bool TPlunderAttackReq::has_minepos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderAttackReq::set_has_minepos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderAttackReq::clear_has_minepos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderAttackReq::clear_minepos() {
  if (minepos_ != NULL) minepos_->::pb::TPlunderMinePos::Clear();
  clear_has_minepos();
}
inline const ::pb::TPlunderMinePos& TPlunderAttackReq::minepos() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderAttackReq.MinePos)
  return minepos_ != NULL ? *minepos_ : *default_instance_->minepos_;
}
inline ::pb::TPlunderMinePos* TPlunderAttackReq::mutable_minepos() {
  set_has_minepos();
  if (minepos_ == NULL) minepos_ = new ::pb::TPlunderMinePos;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderAttackReq.MinePos)
  return minepos_;
}
inline ::pb::TPlunderMinePos* TPlunderAttackReq::release_minepos() {
  clear_has_minepos();
  ::pb::TPlunderMinePos* temp = minepos_;
  minepos_ = NULL;
  return temp;
}
inline void TPlunderAttackReq::set_allocated_minepos(::pb::TPlunderMinePos* minepos) {
  delete minepos_;
  minepos_ = minepos;
  if (minepos) {
    set_has_minepos();
  } else {
    clear_has_minepos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderAttackReq.MinePos)
}

// optional uint64 EnemyUid = 2;
inline bool TPlunderAttackReq::has_enemyuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderAttackReq::set_has_enemyuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderAttackReq::clear_has_enemyuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderAttackReq::clear_enemyuid() {
  enemyuid_ = GOOGLE_ULONGLONG(0);
  clear_has_enemyuid();
}
inline ::google::protobuf::uint64 TPlunderAttackReq::enemyuid() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderAttackReq.EnemyUid)
  return enemyuid_;
}
inline void TPlunderAttackReq::set_enemyuid(::google::protobuf::uint64 value) {
  set_has_enemyuid();
  enemyuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderAttackReq.EnemyUid)
}

// optional bool SkipBattleResult = 3;
inline bool TPlunderAttackReq::has_skipbattleresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlunderAttackReq::set_has_skipbattleresult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlunderAttackReq::clear_has_skipbattleresult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlunderAttackReq::clear_skipbattleresult() {
  skipbattleresult_ = false;
  clear_has_skipbattleresult();
}
inline bool TPlunderAttackReq::skipbattleresult() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderAttackReq.SkipBattleResult)
  return skipbattleresult_;
}
inline void TPlunderAttackReq::set_skipbattleresult(bool value) {
  set_has_skipbattleresult();
  skipbattleresult_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderAttackReq.SkipBattleResult)
}

// -------------------------------------------------------------------

// TPlunderAttackRsp

// optional .pb.EPlunderAttackResult Result = 1;
inline bool TPlunderAttackRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderAttackRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderAttackRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderAttackRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::EPlunderAttackResult TPlunderAttackRsp::result() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderAttackRsp.Result)
  return static_cast< ::pb::EPlunderAttackResult >(result_);
}
inline void TPlunderAttackRsp::set_result(::pb::EPlunderAttackResult value) {
  assert(::pb::EPlunderAttackResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderAttackRsp.Result)
}

// optional .pb.TPlunderMineInfo MineInfo = 2;
inline bool TPlunderAttackRsp::has_mineinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderAttackRsp::set_has_mineinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderAttackRsp::clear_has_mineinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderAttackRsp::clear_mineinfo() {
  if (mineinfo_ != NULL) mineinfo_->::pb::TPlunderMineInfo::Clear();
  clear_has_mineinfo();
}
inline const ::pb::TPlunderMineInfo& TPlunderAttackRsp::mineinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderAttackRsp.MineInfo)
  return mineinfo_ != NULL ? *mineinfo_ : *default_instance_->mineinfo_;
}
inline ::pb::TPlunderMineInfo* TPlunderAttackRsp::mutable_mineinfo() {
  set_has_mineinfo();
  if (mineinfo_ == NULL) mineinfo_ = new ::pb::TPlunderMineInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderAttackRsp.MineInfo)
  return mineinfo_;
}
inline ::pb::TPlunderMineInfo* TPlunderAttackRsp::release_mineinfo() {
  clear_has_mineinfo();
  ::pb::TPlunderMineInfo* temp = mineinfo_;
  mineinfo_ = NULL;
  return temp;
}
inline void TPlunderAttackRsp::set_allocated_mineinfo(::pb::TPlunderMineInfo* mineinfo) {
  delete mineinfo_;
  mineinfo_ = mineinfo;
  if (mineinfo) {
    set_has_mineinfo();
  } else {
    clear_has_mineinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderAttackRsp.MineInfo)
}

// optional .pb.TPlunderRecordInfo BattleInfo = 3;
inline bool TPlunderAttackRsp::has_battleinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlunderAttackRsp::set_has_battleinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlunderAttackRsp::clear_has_battleinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlunderAttackRsp::clear_battleinfo() {
  if (battleinfo_ != NULL) battleinfo_->::pb::TPlunderRecordInfo::Clear();
  clear_has_battleinfo();
}
inline const ::pb::TPlunderRecordInfo& TPlunderAttackRsp::battleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderAttackRsp.BattleInfo)
  return battleinfo_ != NULL ? *battleinfo_ : *default_instance_->battleinfo_;
}
inline ::pb::TPlunderRecordInfo* TPlunderAttackRsp::mutable_battleinfo() {
  set_has_battleinfo();
  if (battleinfo_ == NULL) battleinfo_ = new ::pb::TPlunderRecordInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderAttackRsp.BattleInfo)
  return battleinfo_;
}
inline ::pb::TPlunderRecordInfo* TPlunderAttackRsp::release_battleinfo() {
  clear_has_battleinfo();
  ::pb::TPlunderRecordInfo* temp = battleinfo_;
  battleinfo_ = NULL;
  return temp;
}
inline void TPlunderAttackRsp::set_allocated_battleinfo(::pb::TPlunderRecordInfo* battleinfo) {
  delete battleinfo_;
  battleinfo_ = battleinfo;
  if (battleinfo) {
    set_has_battleinfo();
  } else {
    clear_has_battleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderAttackRsp.BattleInfo)
}

// optional bytes BattleResult = 4;
inline bool TPlunderAttackRsp::has_battleresult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlunderAttackRsp::set_has_battleresult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlunderAttackRsp::clear_has_battleresult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlunderAttackRsp::clear_battleresult() {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_->clear();
  }
  clear_has_battleresult();
}
inline const ::std::string& TPlunderAttackRsp::battleresult() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderAttackRsp.BattleResult)
  return *battleresult_;
}
inline void TPlunderAttackRsp::set_battleresult(const ::std::string& value) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPlunderAttackRsp.BattleResult)
}
inline void TPlunderAttackRsp::set_battleresult(const char* value) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPlunderAttackRsp.BattleResult)
}
inline void TPlunderAttackRsp::set_battleresult(const void* value, size_t size) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPlunderAttackRsp.BattleResult)
}
inline ::std::string* TPlunderAttackRsp::mutable_battleresult() {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPlunderAttackRsp.BattleResult)
  return battleresult_;
}
inline ::std::string* TPlunderAttackRsp::release_battleresult() {
  clear_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleresult_;
    battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPlunderAttackRsp::set_allocated_battleresult(::std::string* battleresult) {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresult_;
  }
  if (battleresult) {
    set_has_battleresult();
    battleresult_ = battleresult;
  } else {
    clear_has_battleresult();
    battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderAttackRsp.BattleResult)
}

// -------------------------------------------------------------------

// TPlunderGiveupRsp

// optional .pb.EPlunderGatherResult ResultCode = 1;
inline bool TPlunderGiveupRsp::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderGiveupRsp::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderGiveupRsp::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderGiveupRsp::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::pb::EPlunderGatherResult TPlunderGiveupRsp::resultcode() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGiveupRsp.ResultCode)
  return static_cast< ::pb::EPlunderGatherResult >(resultcode_);
}
inline void TPlunderGiveupRsp::set_resultcode(::pb::EPlunderGatherResult value) {
  assert(::pb::EPlunderGatherResult_IsValid(value));
  set_has_resultcode();
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderGiveupRsp.ResultCode)
}

// optional uint32 RewardScore = 2;
inline bool TPlunderGiveupRsp::has_rewardscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderGiveupRsp::set_has_rewardscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderGiveupRsp::clear_has_rewardscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderGiveupRsp::clear_rewardscore() {
  rewardscore_ = 0u;
  clear_has_rewardscore();
}
inline ::google::protobuf::uint32 TPlunderGiveupRsp::rewardscore() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGiveupRsp.RewardScore)
  return rewardscore_;
}
inline void TPlunderGiveupRsp::set_rewardscore(::google::protobuf::uint32 value) {
  set_has_rewardscore();
  rewardscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderGiveupRsp.RewardScore)
}

// repeated .pb.TCommonReward SeniorRewardArr = 3;
inline int TPlunderGiveupRsp::seniorrewardarr_size() const {
  return seniorrewardarr_.size();
}
inline void TPlunderGiveupRsp::clear_seniorrewardarr() {
  seniorrewardarr_.Clear();
}
inline const ::pb::TCommonReward& TPlunderGiveupRsp::seniorrewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGiveupRsp.SeniorRewardArr)
  return seniorrewardarr_.Get(index);
}
inline ::pb::TCommonReward* TPlunderGiveupRsp::mutable_seniorrewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlunderGiveupRsp.SeniorRewardArr)
  return seniorrewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TPlunderGiveupRsp::add_seniorrewardarr() {
  // @@protoc_insertion_point(field_add:pb.TPlunderGiveupRsp.SeniorRewardArr)
  return seniorrewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TPlunderGiveupRsp::seniorrewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlunderGiveupRsp.SeniorRewardArr)
  return seniorrewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TPlunderGiveupRsp::mutable_seniorrewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlunderGiveupRsp.SeniorRewardArr)
  return &seniorrewardarr_;
}

// -------------------------------------------------------------------

// TPlunderAutoSetMineReq

// optional uint32 AreaLevel = 1;
inline bool TPlunderAutoSetMineReq::has_arealevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderAutoSetMineReq::set_has_arealevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderAutoSetMineReq::clear_has_arealevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderAutoSetMineReq::clear_arealevel() {
  arealevel_ = 0u;
  clear_has_arealevel();
}
inline ::google::protobuf::uint32 TPlunderAutoSetMineReq::arealevel() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderAutoSetMineReq.AreaLevel)
  return arealevel_;
}
inline void TPlunderAutoSetMineReq::set_arealevel(::google::protobuf::uint32 value) {
  set_has_arealevel();
  arealevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderAutoSetMineReq.AreaLevel)
}

// -------------------------------------------------------------------

// TPlunderAutoSetMineRsp

// optional .pb.EPlunderAttackResult Result = 1;
inline bool TPlunderAutoSetMineRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderAutoSetMineRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderAutoSetMineRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderAutoSetMineRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::pb::EPlunderAttackResult TPlunderAutoSetMineRsp::result() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderAutoSetMineRsp.Result)
  return static_cast< ::pb::EPlunderAttackResult >(result_);
}
inline void TPlunderAutoSetMineRsp::set_result(::pb::EPlunderAttackResult value) {
  assert(::pb::EPlunderAttackResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderAutoSetMineRsp.Result)
}

// optional .pb.TPlunderMineInfo MineInfo = 2;
inline bool TPlunderAutoSetMineRsp::has_mineinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderAutoSetMineRsp::set_has_mineinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderAutoSetMineRsp::clear_has_mineinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderAutoSetMineRsp::clear_mineinfo() {
  if (mineinfo_ != NULL) mineinfo_->::pb::TPlunderMineInfo::Clear();
  clear_has_mineinfo();
}
inline const ::pb::TPlunderMineInfo& TPlunderAutoSetMineRsp::mineinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderAutoSetMineRsp.MineInfo)
  return mineinfo_ != NULL ? *mineinfo_ : *default_instance_->mineinfo_;
}
inline ::pb::TPlunderMineInfo* TPlunderAutoSetMineRsp::mutable_mineinfo() {
  set_has_mineinfo();
  if (mineinfo_ == NULL) mineinfo_ = new ::pb::TPlunderMineInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderAutoSetMineRsp.MineInfo)
  return mineinfo_;
}
inline ::pb::TPlunderMineInfo* TPlunderAutoSetMineRsp::release_mineinfo() {
  clear_has_mineinfo();
  ::pb::TPlunderMineInfo* temp = mineinfo_;
  mineinfo_ = NULL;
  return temp;
}
inline void TPlunderAutoSetMineRsp::set_allocated_mineinfo(::pb::TPlunderMineInfo* mineinfo) {
  delete mineinfo_;
  mineinfo_ = mineinfo;
  if (mineinfo) {
    set_has_mineinfo();
  } else {
    clear_has_mineinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderAutoSetMineRsp.MineInfo)
}

// optional .pb.TPlunderGiveupRsp GiveupRsp = 3;
inline bool TPlunderAutoSetMineRsp::has_giveuprsp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlunderAutoSetMineRsp::set_has_giveuprsp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlunderAutoSetMineRsp::clear_has_giveuprsp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlunderAutoSetMineRsp::clear_giveuprsp() {
  if (giveuprsp_ != NULL) giveuprsp_->::pb::TPlunderGiveupRsp::Clear();
  clear_has_giveuprsp();
}
inline const ::pb::TPlunderGiveupRsp& TPlunderAutoSetMineRsp::giveuprsp() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderAutoSetMineRsp.GiveupRsp)
  return giveuprsp_ != NULL ? *giveuprsp_ : *default_instance_->giveuprsp_;
}
inline ::pb::TPlunderGiveupRsp* TPlunderAutoSetMineRsp::mutable_giveuprsp() {
  set_has_giveuprsp();
  if (giveuprsp_ == NULL) giveuprsp_ = new ::pb::TPlunderGiveupRsp;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderAutoSetMineRsp.GiveupRsp)
  return giveuprsp_;
}
inline ::pb::TPlunderGiveupRsp* TPlunderAutoSetMineRsp::release_giveuprsp() {
  clear_has_giveuprsp();
  ::pb::TPlunderGiveupRsp* temp = giveuprsp_;
  giveuprsp_ = NULL;
  return temp;
}
inline void TPlunderAutoSetMineRsp::set_allocated_giveuprsp(::pb::TPlunderGiveupRsp* giveuprsp) {
  delete giveuprsp_;
  giveuprsp_ = giveuprsp;
  if (giveuprsp) {
    set_has_giveuprsp();
  } else {
    clear_has_giveuprsp();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderAutoSetMineRsp.GiveupRsp)
}

// -------------------------------------------------------------------

// TPlunderGetSelfRecordListRsp

// repeated .pb.TPlunderRecordInfo RecordArr = 1;
inline int TPlunderGetSelfRecordListRsp::recordarr_size() const {
  return recordarr_.size();
}
inline void TPlunderGetSelfRecordListRsp::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TPlunderRecordInfo& TPlunderGetSelfRecordListRsp::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetSelfRecordListRsp.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TPlunderRecordInfo* TPlunderGetSelfRecordListRsp::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlunderGetSelfRecordListRsp.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TPlunderRecordInfo* TPlunderGetSelfRecordListRsp::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TPlunderGetSelfRecordListRsp.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRecordInfo >&
TPlunderGetSelfRecordListRsp::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlunderGetSelfRecordListRsp.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRecordInfo >*
TPlunderGetSelfRecordListRsp::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlunderGetSelfRecordListRsp.RecordArr)
  return &recordarr_;
}

// -------------------------------------------------------------------

// TPlunderGetSelfRecordInfoReq

// optional uint64 RecordId = 1;
inline bool TPlunderGetSelfRecordInfoReq::has_recordid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderGetSelfRecordInfoReq::set_has_recordid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderGetSelfRecordInfoReq::clear_has_recordid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderGetSelfRecordInfoReq::clear_recordid() {
  recordid_ = GOOGLE_ULONGLONG(0);
  clear_has_recordid();
}
inline ::google::protobuf::uint64 TPlunderGetSelfRecordInfoReq::recordid() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetSelfRecordInfoReq.RecordId)
  return recordid_;
}
inline void TPlunderGetSelfRecordInfoReq::set_recordid(::google::protobuf::uint64 value) {
  set_has_recordid();
  recordid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderGetSelfRecordInfoReq.RecordId)
}

// -------------------------------------------------------------------

// TPlunderGetSelfRecordInfoRsp

// optional .pb.TPlunderRecordInfo RecordInfo = 1;
inline bool TPlunderGetSelfRecordInfoRsp::has_recordinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderGetSelfRecordInfoRsp::set_has_recordinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderGetSelfRecordInfoRsp::clear_has_recordinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderGetSelfRecordInfoRsp::clear_recordinfo() {
  if (recordinfo_ != NULL) recordinfo_->::pb::TPlunderRecordInfo::Clear();
  clear_has_recordinfo();
}
inline const ::pb::TPlunderRecordInfo& TPlunderGetSelfRecordInfoRsp::recordinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetSelfRecordInfoRsp.RecordInfo)
  return recordinfo_ != NULL ? *recordinfo_ : *default_instance_->recordinfo_;
}
inline ::pb::TPlunderRecordInfo* TPlunderGetSelfRecordInfoRsp::mutable_recordinfo() {
  set_has_recordinfo();
  if (recordinfo_ == NULL) recordinfo_ = new ::pb::TPlunderRecordInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderGetSelfRecordInfoRsp.RecordInfo)
  return recordinfo_;
}
inline ::pb::TPlunderRecordInfo* TPlunderGetSelfRecordInfoRsp::release_recordinfo() {
  clear_has_recordinfo();
  ::pb::TPlunderRecordInfo* temp = recordinfo_;
  recordinfo_ = NULL;
  return temp;
}
inline void TPlunderGetSelfRecordInfoRsp::set_allocated_recordinfo(::pb::TPlunderRecordInfo* recordinfo) {
  delete recordinfo_;
  recordinfo_ = recordinfo;
  if (recordinfo) {
    set_has_recordinfo();
  } else {
    clear_has_recordinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderGetSelfRecordInfoRsp.RecordInfo)
}

// optional bytes BattleResult = 2;
inline bool TPlunderGetSelfRecordInfoRsp::has_battleresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderGetSelfRecordInfoRsp::set_has_battleresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderGetSelfRecordInfoRsp::clear_has_battleresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderGetSelfRecordInfoRsp::clear_battleresult() {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_->clear();
  }
  clear_has_battleresult();
}
inline const ::std::string& TPlunderGetSelfRecordInfoRsp::battleresult() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetSelfRecordInfoRsp.BattleResult)
  return *battleresult_;
}
inline void TPlunderGetSelfRecordInfoRsp::set_battleresult(const ::std::string& value) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPlunderGetSelfRecordInfoRsp.BattleResult)
}
inline void TPlunderGetSelfRecordInfoRsp::set_battleresult(const char* value) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPlunderGetSelfRecordInfoRsp.BattleResult)
}
inline void TPlunderGetSelfRecordInfoRsp::set_battleresult(const void* value, size_t size) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPlunderGetSelfRecordInfoRsp.BattleResult)
}
inline ::std::string* TPlunderGetSelfRecordInfoRsp::mutable_battleresult() {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPlunderGetSelfRecordInfoRsp.BattleResult)
  return battleresult_;
}
inline ::std::string* TPlunderGetSelfRecordInfoRsp::release_battleresult() {
  clear_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleresult_;
    battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPlunderGetSelfRecordInfoRsp::set_allocated_battleresult(::std::string* battleresult) {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresult_;
  }
  if (battleresult) {
    set_has_battleresult();
    battleresult_ = battleresult;
  } else {
    clear_has_battleresult();
    battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderGetSelfRecordInfoRsp.BattleResult)
}

// -------------------------------------------------------------------

// TPlunderGetEnemyListRsp

// repeated .pb.TPlunderEnemyInfo EnemyList = 1;
inline int TPlunderGetEnemyListRsp::enemylist_size() const {
  return enemylist_.size();
}
inline void TPlunderGetEnemyListRsp::clear_enemylist() {
  enemylist_.Clear();
}
inline const ::pb::TPlunderEnemyInfo& TPlunderGetEnemyListRsp::enemylist(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetEnemyListRsp.EnemyList)
  return enemylist_.Get(index);
}
inline ::pb::TPlunderEnemyInfo* TPlunderGetEnemyListRsp::mutable_enemylist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlunderGetEnemyListRsp.EnemyList)
  return enemylist_.Mutable(index);
}
inline ::pb::TPlunderEnemyInfo* TPlunderGetEnemyListRsp::add_enemylist() {
  // @@protoc_insertion_point(field_add:pb.TPlunderGetEnemyListRsp.EnemyList)
  return enemylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlunderEnemyInfo >&
TPlunderGetEnemyListRsp::enemylist() const {
  // @@protoc_insertion_point(field_list:pb.TPlunderGetEnemyListRsp.EnemyList)
  return enemylist_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlunderEnemyInfo >*
TPlunderGetEnemyListRsp::mutable_enemylist() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlunderGetEnemyListRsp.EnemyList)
  return &enemylist_;
}

// -------------------------------------------------------------------

// TPlunderRemoveEnemyReq

// optional uint64 Uid = 1;
inline bool TPlunderRemoveEnemyReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderRemoveEnemyReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderRemoveEnemyReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderRemoveEnemyReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TPlunderRemoveEnemyReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRemoveEnemyReq.Uid)
  return uid_;
}
inline void TPlunderRemoveEnemyReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRemoveEnemyReq.Uid)
}

// -------------------------------------------------------------------

// TPlunderGetEnemyMineListReq

// optional uint64 Uid = 1;
inline bool TPlunderGetEnemyMineListReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderGetEnemyMineListReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderGetEnemyMineListReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderGetEnemyMineListReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TPlunderGetEnemyMineListReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetEnemyMineListReq.Uid)
  return uid_;
}
inline void TPlunderGetEnemyMineListReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderGetEnemyMineListReq.Uid)
}

// -------------------------------------------------------------------

// TPlunderGetEnemyMineListRsp

// optional .pb.TPlunderMinePos MinePos = 1;
inline bool TPlunderGetEnemyMineListRsp::has_minepos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderGetEnemyMineListRsp::set_has_minepos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderGetEnemyMineListRsp::clear_has_minepos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderGetEnemyMineListRsp::clear_minepos() {
  if (minepos_ != NULL) minepos_->::pb::TPlunderMinePos::Clear();
  clear_has_minepos();
}
inline const ::pb::TPlunderMinePos& TPlunderGetEnemyMineListRsp::minepos() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetEnemyMineListRsp.MinePos)
  return minepos_ != NULL ? *minepos_ : *default_instance_->minepos_;
}
inline ::pb::TPlunderMinePos* TPlunderGetEnemyMineListRsp::mutable_minepos() {
  set_has_minepos();
  if (minepos_ == NULL) minepos_ = new ::pb::TPlunderMinePos;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderGetEnemyMineListRsp.MinePos)
  return minepos_;
}
inline ::pb::TPlunderMinePos* TPlunderGetEnemyMineListRsp::release_minepos() {
  clear_has_minepos();
  ::pb::TPlunderMinePos* temp = minepos_;
  minepos_ = NULL;
  return temp;
}
inline void TPlunderGetEnemyMineListRsp::set_allocated_minepos(::pb::TPlunderMinePos* minepos) {
  delete minepos_;
  minepos_ = minepos;
  if (minepos) {
    set_has_minepos();
  } else {
    clear_has_minepos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderGetEnemyMineListRsp.MinePos)
}

// -------------------------------------------------------------------

// TPlunderRevengeReq

// optional uint64 Uid = 1;
inline bool TPlunderRevengeReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderRevengeReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderRevengeReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderRevengeReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TPlunderRevengeReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRevengeReq.Uid)
  return uid_;
}
inline void TPlunderRevengeReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRevengeReq.Uid)
}

// optional bool SkipBattleResult = 2;
inline bool TPlunderRevengeReq::has_skipbattleresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderRevengeReq::set_has_skipbattleresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderRevengeReq::clear_has_skipbattleresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderRevengeReq::clear_skipbattleresult() {
  skipbattleresult_ = false;
  clear_has_skipbattleresult();
}
inline bool TPlunderRevengeReq::skipbattleresult() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRevengeReq.SkipBattleResult)
  return skipbattleresult_;
}
inline void TPlunderRevengeReq::set_skipbattleresult(bool value) {
  set_has_skipbattleresult();
  skipbattleresult_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRevengeReq.SkipBattleResult)
}

// -------------------------------------------------------------------

// TPlunderRevengeRsp

// optional .pb.TPlunderRevengeRecordInfo BattleInfo = 1;
inline bool TPlunderRevengeRsp::has_battleinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderRevengeRsp::set_has_battleinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderRevengeRsp::clear_has_battleinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderRevengeRsp::clear_battleinfo() {
  if (battleinfo_ != NULL) battleinfo_->::pb::TPlunderRevengeRecordInfo::Clear();
  clear_has_battleinfo();
}
inline const ::pb::TPlunderRevengeRecordInfo& TPlunderRevengeRsp::battleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRevengeRsp.BattleInfo)
  return battleinfo_ != NULL ? *battleinfo_ : *default_instance_->battleinfo_;
}
inline ::pb::TPlunderRevengeRecordInfo* TPlunderRevengeRsp::mutable_battleinfo() {
  set_has_battleinfo();
  if (battleinfo_ == NULL) battleinfo_ = new ::pb::TPlunderRevengeRecordInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderRevengeRsp.BattleInfo)
  return battleinfo_;
}
inline ::pb::TPlunderRevengeRecordInfo* TPlunderRevengeRsp::release_battleinfo() {
  clear_has_battleinfo();
  ::pb::TPlunderRevengeRecordInfo* temp = battleinfo_;
  battleinfo_ = NULL;
  return temp;
}
inline void TPlunderRevengeRsp::set_allocated_battleinfo(::pb::TPlunderRevengeRecordInfo* battleinfo) {
  delete battleinfo_;
  battleinfo_ = battleinfo;
  if (battleinfo) {
    set_has_battleinfo();
  } else {
    clear_has_battleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderRevengeRsp.BattleInfo)
}

// optional bytes BattleResult = 2;
inline bool TPlunderRevengeRsp::has_battleresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderRevengeRsp::set_has_battleresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderRevengeRsp::clear_has_battleresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderRevengeRsp::clear_battleresult() {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_->clear();
  }
  clear_has_battleresult();
}
inline const ::std::string& TPlunderRevengeRsp::battleresult() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRevengeRsp.BattleResult)
  return *battleresult_;
}
inline void TPlunderRevengeRsp::set_battleresult(const ::std::string& value) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPlunderRevengeRsp.BattleResult)
}
inline void TPlunderRevengeRsp::set_battleresult(const char* value) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPlunderRevengeRsp.BattleResult)
}
inline void TPlunderRevengeRsp::set_battleresult(const void* value, size_t size) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPlunderRevengeRsp.BattleResult)
}
inline ::std::string* TPlunderRevengeRsp::mutable_battleresult() {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPlunderRevengeRsp.BattleResult)
  return battleresult_;
}
inline ::std::string* TPlunderRevengeRsp::release_battleresult() {
  clear_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleresult_;
    battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPlunderRevengeRsp::set_allocated_battleresult(::std::string* battleresult) {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresult_;
  }
  if (battleresult) {
    set_has_battleresult();
    battleresult_ = battleresult;
  } else {
    clear_has_battleresult();
    battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderRevengeRsp.BattleResult)
}

// -------------------------------------------------------------------

// TPlunderRankInfo

// optional uint64 Uid = 1;
inline bool TPlunderRankInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderRankInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderRankInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderRankInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TPlunderRankInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRankInfo.Uid)
  return uid_;
}
inline void TPlunderRankInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRankInfo.Uid)
}

// optional .pb.TUserSimpleInfoWithAlly UserInfo = 2;
inline bool TPlunderRankInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderRankInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderRankInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderRankInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfoWithAlly::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfoWithAlly& TPlunderRankInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRankInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfoWithAlly* TPlunderRankInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfoWithAlly;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderRankInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfoWithAlly* TPlunderRankInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfoWithAlly* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TPlunderRankInfo::set_allocated_userinfo(::pb::TUserSimpleInfoWithAlly* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderRankInfo.UserInfo)
}

// optional uint32 Score = 10;
inline bool TPlunderRankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlunderRankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlunderRankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlunderRankInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TPlunderRankInfo::score() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRankInfo.Score)
  return score_;
}
inline void TPlunderRankInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRankInfo.Score)
}

// optional int64 Time = 11;
inline bool TPlunderRankInfo::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlunderRankInfo::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlunderRankInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlunderRankInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 TPlunderRankInfo::time() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRankInfo.Time)
  return time_;
}
inline void TPlunderRankInfo::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRankInfo.Time)
}

// optional int32 Rank = 12;
inline bool TPlunderRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlunderRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlunderRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlunderRankInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 TPlunderRankInfo::rank() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRankInfo.Rank)
  return rank_;
}
inline void TPlunderRankInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRankInfo.Rank)
}

// -------------------------------------------------------------------

// TPlunderGetRevengeRecordListRsp

// repeated .pb.TPlunderRevengeRecordInfo RecordArr = 1;
inline int TPlunderGetRevengeRecordListRsp::recordarr_size() const {
  return recordarr_.size();
}
inline void TPlunderGetRevengeRecordListRsp::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TPlunderRevengeRecordInfo& TPlunderGetRevengeRecordListRsp::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetRevengeRecordListRsp.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TPlunderRevengeRecordInfo* TPlunderGetRevengeRecordListRsp::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlunderGetRevengeRecordListRsp.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TPlunderRevengeRecordInfo* TPlunderGetRevengeRecordListRsp::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TPlunderGetRevengeRecordListRsp.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRevengeRecordInfo >&
TPlunderGetRevengeRecordListRsp::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlunderGetRevengeRecordListRsp.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRevengeRecordInfo >*
TPlunderGetRevengeRecordListRsp::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlunderGetRevengeRecordListRsp.RecordArr)
  return &recordarr_;
}

// -------------------------------------------------------------------

// TPlunderGetRevengeRecordInfoReq

// optional uint64 RecordId = 1;
inline bool TPlunderGetRevengeRecordInfoReq::has_recordid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderGetRevengeRecordInfoReq::set_has_recordid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderGetRevengeRecordInfoReq::clear_has_recordid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderGetRevengeRecordInfoReq::clear_recordid() {
  recordid_ = GOOGLE_ULONGLONG(0);
  clear_has_recordid();
}
inline ::google::protobuf::uint64 TPlunderGetRevengeRecordInfoReq::recordid() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetRevengeRecordInfoReq.RecordId)
  return recordid_;
}
inline void TPlunderGetRevengeRecordInfoReq::set_recordid(::google::protobuf::uint64 value) {
  set_has_recordid();
  recordid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderGetRevengeRecordInfoReq.RecordId)
}

// -------------------------------------------------------------------

// TPlunderGetRevengeRecordInfoRsp

// optional .pb.TPlunderRevengeRecordInfo RecordInfo = 1;
inline bool TPlunderGetRevengeRecordInfoRsp::has_recordinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderGetRevengeRecordInfoRsp::set_has_recordinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderGetRevengeRecordInfoRsp::clear_has_recordinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderGetRevengeRecordInfoRsp::clear_recordinfo() {
  if (recordinfo_ != NULL) recordinfo_->::pb::TPlunderRevengeRecordInfo::Clear();
  clear_has_recordinfo();
}
inline const ::pb::TPlunderRevengeRecordInfo& TPlunderGetRevengeRecordInfoRsp::recordinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetRevengeRecordInfoRsp.RecordInfo)
  return recordinfo_ != NULL ? *recordinfo_ : *default_instance_->recordinfo_;
}
inline ::pb::TPlunderRevengeRecordInfo* TPlunderGetRevengeRecordInfoRsp::mutable_recordinfo() {
  set_has_recordinfo();
  if (recordinfo_ == NULL) recordinfo_ = new ::pb::TPlunderRevengeRecordInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderGetRevengeRecordInfoRsp.RecordInfo)
  return recordinfo_;
}
inline ::pb::TPlunderRevengeRecordInfo* TPlunderGetRevengeRecordInfoRsp::release_recordinfo() {
  clear_has_recordinfo();
  ::pb::TPlunderRevengeRecordInfo* temp = recordinfo_;
  recordinfo_ = NULL;
  return temp;
}
inline void TPlunderGetRevengeRecordInfoRsp::set_allocated_recordinfo(::pb::TPlunderRevengeRecordInfo* recordinfo) {
  delete recordinfo_;
  recordinfo_ = recordinfo;
  if (recordinfo) {
    set_has_recordinfo();
  } else {
    clear_has_recordinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderGetRevengeRecordInfoRsp.RecordInfo)
}

// optional bytes BattleResult = 2;
inline bool TPlunderGetRevengeRecordInfoRsp::has_battleresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderGetRevengeRecordInfoRsp::set_has_battleresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderGetRevengeRecordInfoRsp::clear_has_battleresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderGetRevengeRecordInfoRsp::clear_battleresult() {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_->clear();
  }
  clear_has_battleresult();
}
inline const ::std::string& TPlunderGetRevengeRecordInfoRsp::battleresult() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetRevengeRecordInfoRsp.BattleResult)
  return *battleresult_;
}
inline void TPlunderGetRevengeRecordInfoRsp::set_battleresult(const ::std::string& value) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPlunderGetRevengeRecordInfoRsp.BattleResult)
}
inline void TPlunderGetRevengeRecordInfoRsp::set_battleresult(const char* value) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPlunderGetRevengeRecordInfoRsp.BattleResult)
}
inline void TPlunderGetRevengeRecordInfoRsp::set_battleresult(const void* value, size_t size) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPlunderGetRevengeRecordInfoRsp.BattleResult)
}
inline ::std::string* TPlunderGetRevengeRecordInfoRsp::mutable_battleresult() {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPlunderGetRevengeRecordInfoRsp.BattleResult)
  return battleresult_;
}
inline ::std::string* TPlunderGetRevengeRecordInfoRsp::release_battleresult() {
  clear_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleresult_;
    battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPlunderGetRevengeRecordInfoRsp::set_allocated_battleresult(::std::string* battleresult) {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresult_;
  }
  if (battleresult) {
    set_has_battleresult();
    battleresult_ = battleresult;
  } else {
    clear_has_battleresult();
    battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderGetRevengeRecordInfoRsp.BattleResult)
}

// -------------------------------------------------------------------

// TPlunderRankReq

// optional uint32 Offset = 1;
inline bool TPlunderRankReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderRankReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderRankReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderRankReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TPlunderRankReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRankReq.Offset)
  return offset_;
}
inline void TPlunderRankReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRankReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TPlunderRankReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderRankReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderRankReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderRankReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TPlunderRankReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRankReq.Limit)
  return limit_;
}
inline void TPlunderRankReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRankReq.Limit)
}

// -------------------------------------------------------------------

// TPlunderRankRsp

// repeated .pb.TPlunderRankInfo RankArr = 1;
inline int TPlunderRankRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TPlunderRankRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TPlunderRankInfo& TPlunderRankRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRankRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TPlunderRankInfo* TPlunderRankRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlunderRankRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TPlunderRankInfo* TPlunderRankRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TPlunderRankRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRankInfo >&
TPlunderRankRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlunderRankRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRankInfo >*
TPlunderRankRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlunderRankRsp.RankArr)
  return &rankarr_;
}

// optional int32 MyRank = 2;
inline bool TPlunderRankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderRankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderRankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderRankRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TPlunderRankRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRankRsp.MyRank)
  return myrank_;
}
inline void TPlunderRankRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRankRsp.MyRank)
}

// optional uint32 MyScore = 3;
inline bool TPlunderRankRsp::has_myscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlunderRankRsp::set_has_myscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlunderRankRsp::clear_has_myscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlunderRankRsp::clear_myscore() {
  myscore_ = 0u;
  clear_has_myscore();
}
inline ::google::protobuf::uint32 TPlunderRankRsp::myscore() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRankRsp.MyScore)
  return myscore_;
}
inline void TPlunderRankRsp::set_myscore(::google::protobuf::uint32 value) {
  set_has_myscore();
  myscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderRankRsp.MyScore)
}

// -------------------------------------------------------------------

// TPlunderGetPalaceCDNumRsp

// optional uint32 FreeCDNum = 1;
inline bool TPlunderGetPalaceCDNumRsp::has_freecdnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderGetPalaceCDNumRsp::set_has_freecdnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderGetPalaceCDNumRsp::clear_has_freecdnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderGetPalaceCDNumRsp::clear_freecdnum() {
  freecdnum_ = 0u;
  clear_has_freecdnum();
}
inline ::google::protobuf::uint32 TPlunderGetPalaceCDNumRsp::freecdnum() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderGetPalaceCDNumRsp.FreeCDNum)
  return freecdnum_;
}
inline void TPlunderGetPalaceCDNumRsp::set_freecdnum(::google::protobuf::uint32 value) {
  set_has_freecdnum();
  freecdnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderGetPalaceCDNumRsp.FreeCDNum)
}

// -------------------------------------------------------------------

// TPlunderBaseInfoNotify

// optional .pb.TPlunderBaseInfo BaseInfo = 1;
inline bool TPlunderBaseInfoNotify::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderBaseInfoNotify::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderBaseInfoNotify::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderBaseInfoNotify::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::pb::TPlunderBaseInfo::Clear();
  clear_has_baseinfo();
}
inline const ::pb::TPlunderBaseInfo& TPlunderBaseInfoNotify::baseinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderBaseInfoNotify.BaseInfo)
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::pb::TPlunderBaseInfo* TPlunderBaseInfoNotify::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::pb::TPlunderBaseInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderBaseInfoNotify.BaseInfo)
  return baseinfo_;
}
inline ::pb::TPlunderBaseInfo* TPlunderBaseInfoNotify::release_baseinfo() {
  clear_has_baseinfo();
  ::pb::TPlunderBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void TPlunderBaseInfoNotify::set_allocated_baseinfo(::pb::TPlunderBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderBaseInfoNotify.BaseInfo)
}

// optional .pb.EPlunderEvent Event = 2;
inline bool TPlunderBaseInfoNotify::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlunderBaseInfoNotify::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlunderBaseInfoNotify::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlunderBaseInfoNotify::clear_event() {
  event_ = 0;
  clear_has_event();
}
inline ::pb::EPlunderEvent TPlunderBaseInfoNotify::event() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderBaseInfoNotify.Event)
  return static_cast< ::pb::EPlunderEvent >(event_);
}
inline void TPlunderBaseInfoNotify::set_event(::pb::EPlunderEvent value) {
  assert(::pb::EPlunderEvent_IsValid(value));
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlunderBaseInfoNotify.Event)
}

// -------------------------------------------------------------------

// TPlunderMapInfoNotify

// optional .pb.TPlunderMapInfo MapInfo = 1;
inline bool TPlunderMapInfoNotify::has_mapinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlunderMapInfoNotify::set_has_mapinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlunderMapInfoNotify::clear_has_mapinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlunderMapInfoNotify::clear_mapinfo() {
  if (mapinfo_ != NULL) mapinfo_->::pb::TPlunderMapInfo::Clear();
  clear_has_mapinfo();
}
inline const ::pb::TPlunderMapInfo& TPlunderMapInfoNotify::mapinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlunderMapInfoNotify.MapInfo)
  return mapinfo_ != NULL ? *mapinfo_ : *default_instance_->mapinfo_;
}
inline ::pb::TPlunderMapInfo* TPlunderMapInfoNotify::mutable_mapinfo() {
  set_has_mapinfo();
  if (mapinfo_ == NULL) mapinfo_ = new ::pb::TPlunderMapInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlunderMapInfoNotify.MapInfo)
  return mapinfo_;
}
inline ::pb::TPlunderMapInfo* TPlunderMapInfoNotify::release_mapinfo() {
  clear_has_mapinfo();
  ::pb::TPlunderMapInfo* temp = mapinfo_;
  mapinfo_ = NULL;
  return temp;
}
inline void TPlunderMapInfoNotify::set_allocated_mapinfo(::pb::TPlunderMapInfo* mapinfo) {
  delete mapinfo_;
  mapinfo_ = mapinfo;
  if (mapinfo) {
    set_has_mapinfo();
  } else {
    clear_has_mapinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlunderMapInfoNotify.MapInfo)
}

// -------------------------------------------------------------------

// TPlunderMineInfoNotify

// repeated .pb.TPlunderMineInfo ChangedInfo = 1;
inline int TPlunderMineInfoNotify::changedinfo_size() const {
  return changedinfo_.size();
}
inline void TPlunderMineInfoNotify::clear_changedinfo() {
  changedinfo_.Clear();
}
inline const ::pb::TPlunderMineInfo& TPlunderMineInfoNotify::changedinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlunderMineInfoNotify.ChangedInfo)
  return changedinfo_.Get(index);
}
inline ::pb::TPlunderMineInfo* TPlunderMineInfoNotify::mutable_changedinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlunderMineInfoNotify.ChangedInfo)
  return changedinfo_.Mutable(index);
}
inline ::pb::TPlunderMineInfo* TPlunderMineInfoNotify::add_changedinfo() {
  // @@protoc_insertion_point(field_add:pb.TPlunderMineInfoNotify.ChangedInfo)
  return changedinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlunderMineInfo >&
TPlunderMineInfoNotify::changedinfo() const {
  // @@protoc_insertion_point(field_list:pb.TPlunderMineInfoNotify.ChangedInfo)
  return changedinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlunderMineInfo >*
TPlunderMineInfoNotify::mutable_changedinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlunderMineInfoNotify.ChangedInfo)
  return &changedinfo_;
}

// -------------------------------------------------------------------

// TPlunderRecordNotify

// repeated .pb.TPlunderRecordInfo RecordArr = 1;
inline int TPlunderRecordNotify::recordarr_size() const {
  return recordarr_.size();
}
inline void TPlunderRecordNotify::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TPlunderRecordInfo& TPlunderRecordNotify::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlunderRecordNotify.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TPlunderRecordInfo* TPlunderRecordNotify::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlunderRecordNotify.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TPlunderRecordInfo* TPlunderRecordNotify::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TPlunderRecordNotify.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRecordInfo >&
TPlunderRecordNotify::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlunderRecordNotify.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlunderRecordInfo >*
TPlunderRecordNotify::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlunderRecordNotify.RecordArr)
  return &recordarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EMineGiveupResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EMineGiveupResult>() {
  return ::pb::EMineGiveupResult_descriptor();
}
template <> struct is_proto_enum< ::pb::EPlunderGatherResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EPlunderGatherResult>() {
  return ::pb::EPlunderGatherResult_descriptor();
}
template <> struct is_proto_enum< ::pb::EPlunderAttackResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EPlunderAttackResult>() {
  return ::pb::EPlunderAttackResult_descriptor();
}
template <> struct is_proto_enum< ::pb::EPlunderEvent> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EPlunderEvent>() {
  return ::pb::EPlunderEvent_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fCrossPlunder_2eproto__INCLUDED
