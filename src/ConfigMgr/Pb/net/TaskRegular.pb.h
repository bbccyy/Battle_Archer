// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/TaskRegular.proto

#ifndef PROTOBUF_net_2fTaskRegular_2eproto__INCLUDED
#define PROTOBUF_net_2fTaskRegular_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/TaskData.pb.h"
#include "net/TaskBase.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fTaskRegular_2eproto();
void protobuf_AssignDesc_net_2fTaskRegular_2eproto();
void protobuf_ShutdownFile_net_2fTaskRegular_2eproto();

class TTaskRegularInfoRsp;
class TTaskRegularInfoNotify;
class TTaskRegularAcceptReq;
class TTaskRegularAwardReq;
class TTaskRegularInfoReq;
class TTaskRegularProcessAddReq;
class TTaskRegularReturnNPCReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TTaskRegularInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TaskRegular.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTaskRegularInfoRsp : public ::google::protobuf::Message {
 public:
  TTaskRegularInfoRsp();
  virtual ~TTaskRegularInfoRsp();

  TTaskRegularInfoRsp(const TTaskRegularInfoRsp& from);

  inline TTaskRegularInfoRsp& operator=(const TTaskRegularInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTaskRegularInfoRsp& default_instance();

  void Swap(TTaskRegularInfoRsp* other);

  // implements Message ----------------------------------------------

  TTaskRegularInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTaskRegularInfoRsp& from);
  void MergeFrom(const TTaskRegularInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTaskData ArrData = 1;
  inline int arrdata_size() const;
  inline void clear_arrdata();
  static const int kArrDataFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTaskRegularInfoRsp</name>
  	<Function>
  		<name>arrdata</name>
  		<replaceName>ArrData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrdata</name>
  		<replaceName>ArrData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrdata</name>
  		<replaceName>ArrData</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrdata</name>
  		<replaceName>ArrData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrdata_size</name>
  		<replaceName>ArrData</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTaskData& arrdata(int index) const;
  inline ::pb::TTaskData* mutable_arrdata(int index);
  inline ::pb::TTaskData* add_arrdata();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTaskData >&
      arrdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTaskData >*
      mutable_arrdata();

  // @@protoc_insertion_point(class_scope:pb.TTaskRegularInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTaskData > arrdata_;
  friend void  protobuf_AddDesc_net_2fTaskRegular_2eproto();
  friend void protobuf_AssignDesc_net_2fTaskRegular_2eproto();
  friend void protobuf_ShutdownFile_net_2fTaskRegular_2eproto();

  void InitAsDefaultInstance();
  static TTaskRegularInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTaskRegularInfoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TaskRegular.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTaskRegularInfoNotify : public ::google::protobuf::Message {
 public:
  TTaskRegularInfoNotify();
  virtual ~TTaskRegularInfoNotify();

  TTaskRegularInfoNotify(const TTaskRegularInfoNotify& from);

  inline TTaskRegularInfoNotify& operator=(const TTaskRegularInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTaskRegularInfoNotify& default_instance();

  void Swap(TTaskRegularInfoNotify* other);

  // implements Message ----------------------------------------------

  TTaskRegularInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTaskRegularInfoNotify& from);
  void MergeFrom(const TTaskRegularInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTaskData ArrData = 1;
  inline int arrdata_size() const;
  inline void clear_arrdata();
  static const int kArrDataFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTaskRegularInfoNotify</name>
  	<Function>
  		<name>arrdata</name>
  		<replaceName>ArrData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrdata</name>
  		<replaceName>ArrData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrdata</name>
  		<replaceName>ArrData</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrdata</name>
  		<replaceName>ArrData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrdata_size</name>
  		<replaceName>ArrData</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTaskData& arrdata(int index) const;
  inline ::pb::TTaskData* mutable_arrdata(int index);
  inline ::pb::TTaskData* add_arrdata();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTaskData >&
      arrdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTaskData >*
      mutable_arrdata();

  // @@protoc_insertion_point(class_scope:pb.TTaskRegularInfoNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTaskData > arrdata_;
  friend void  protobuf_AddDesc_net_2fTaskRegular_2eproto();
  friend void protobuf_AssignDesc_net_2fTaskRegular_2eproto();
  friend void protobuf_ShutdownFile_net_2fTaskRegular_2eproto();

  void InitAsDefaultInstance();
  static TTaskRegularInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTaskRegularAcceptReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TaskRegular.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTaskRegularAcceptReq : public ::google::protobuf::Message {
 public:
  TTaskRegularAcceptReq();
  virtual ~TTaskRegularAcceptReq();

  TTaskRegularAcceptReq(const TTaskRegularAcceptReq& from);

  inline TTaskRegularAcceptReq& operator=(const TTaskRegularAcceptReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTaskRegularAcceptReq& default_instance();

  void Swap(TTaskRegularAcceptReq* other);

  // implements Message ----------------------------------------------

  TTaskRegularAcceptReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTaskRegularAcceptReq& from);
  void MergeFrom(const TTaskRegularAcceptReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 TaskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTaskRegularAcceptReq</name>
  	<Function>
  		<name>taskid</name>
  		<replaceName>TaskID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskid</name>
  		<replaceName>TaskID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskid</name>
  		<replaceName>TaskID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 taskid() const;
  inline void set_taskid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TTaskRegularAcceptReq)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 taskid_;
  friend void  protobuf_AddDesc_net_2fTaskRegular_2eproto();
  friend void protobuf_AssignDesc_net_2fTaskRegular_2eproto();
  friend void protobuf_ShutdownFile_net_2fTaskRegular_2eproto();

  void InitAsDefaultInstance();
  static TTaskRegularAcceptReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTaskRegularAwardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TaskRegular.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTaskRegularAwardReq : public ::google::protobuf::Message {
 public:
  TTaskRegularAwardReq();
  virtual ~TTaskRegularAwardReq();

  TTaskRegularAwardReq(const TTaskRegularAwardReq& from);

  inline TTaskRegularAwardReq& operator=(const TTaskRegularAwardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTaskRegularAwardReq& default_instance();

  void Swap(TTaskRegularAwardReq* other);

  // implements Message ----------------------------------------------

  TTaskRegularAwardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTaskRegularAwardReq& from);
  void MergeFrom(const TTaskRegularAwardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 TaskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTaskRegularAwardReq</name>
  	<Function>
  		<name>taskid</name>
  		<replaceName>TaskID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskid</name>
  		<replaceName>TaskID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskid</name>
  		<replaceName>TaskID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 taskid() const;
  inline void set_taskid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TTaskRegularAwardReq)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 taskid_;
  friend void  protobuf_AddDesc_net_2fTaskRegular_2eproto();
  friend void protobuf_AssignDesc_net_2fTaskRegular_2eproto();
  friend void protobuf_ShutdownFile_net_2fTaskRegular_2eproto();

  void InitAsDefaultInstance();
  static TTaskRegularAwardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTaskRegularInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TaskRegular.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTaskRegularInfoReq : public ::google::protobuf::Message {
 public:
  TTaskRegularInfoReq();
  virtual ~TTaskRegularInfoReq();

  TTaskRegularInfoReq(const TTaskRegularInfoReq& from);

  inline TTaskRegularInfoReq& operator=(const TTaskRegularInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTaskRegularInfoReq& default_instance();

  void Swap(TTaskRegularInfoReq* other);

  // implements Message ----------------------------------------------

  TTaskRegularInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTaskRegularInfoReq& from);
  void MergeFrom(const TTaskRegularInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ETaskMainType MainType = 1;
  inline bool has_maintype() const;
  inline void clear_maintype();
  static const int kMainTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTaskRegularInfoReq</name>
  	<Function>
  		<name>maintype</name>
  		<replaceName>MainType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maintype</name>
  		<replaceName>MainType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maintype</name>
  		<replaceName>MainType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ETaskMainType maintype() const;
  inline void set_maintype(::pb::ETaskMainType value);

  // optional .pb.ETaskSubType SubType = 2;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTaskRegularInfoReq</name>
  	<Function>
  		<name>subtype</name>
  		<replaceName>SubType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_subtype</name>
  		<replaceName>SubType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_subtype</name>
  		<replaceName>SubType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ETaskSubType subtype() const;
  inline void set_subtype(::pb::ETaskSubType value);

  // @@protoc_insertion_point(class_scope:pb.TTaskRegularInfoReq)
 private:
  inline void set_has_maintype();
  inline void clear_has_maintype();
  inline void set_has_subtype();
  inline void clear_has_subtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int maintype_;
  int subtype_;
  friend void  protobuf_AddDesc_net_2fTaskRegular_2eproto();
  friend void protobuf_AssignDesc_net_2fTaskRegular_2eproto();
  friend void protobuf_ShutdownFile_net_2fTaskRegular_2eproto();

  void InitAsDefaultInstance();
  static TTaskRegularInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTaskRegularProcessAddReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TaskRegular.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTaskRegularProcessAddReq : public ::google::protobuf::Message {
 public:
  TTaskRegularProcessAddReq();
  virtual ~TTaskRegularProcessAddReq();

  TTaskRegularProcessAddReq(const TTaskRegularProcessAddReq& from);

  inline TTaskRegularProcessAddReq& operator=(const TTaskRegularProcessAddReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTaskRegularProcessAddReq& default_instance();

  void Swap(TTaskRegularProcessAddReq* other);

  // implements Message ----------------------------------------------

  TTaskRegularProcessAddReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTaskRegularProcessAddReq& from);
  void MergeFrom(const TTaskRegularProcessAddReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 TaskTid = 1;
  inline bool has_tasktid() const;
  inline void clear_tasktid();
  static const int kTaskTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTaskRegularProcessAddReq</name>
  	<Function>
  		<name>tasktid</name>
  		<replaceName>TaskTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tasktid</name>
  		<replaceName>TaskTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tasktid</name>
  		<replaceName>TaskTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 tasktid() const;
  inline void set_tasktid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TTaskRegularProcessAddReq)
 private:
  inline void set_has_tasktid();
  inline void clear_has_tasktid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tasktid_;
  friend void  protobuf_AddDesc_net_2fTaskRegular_2eproto();
  friend void protobuf_AssignDesc_net_2fTaskRegular_2eproto();
  friend void protobuf_ShutdownFile_net_2fTaskRegular_2eproto();

  void InitAsDefaultInstance();
  static TTaskRegularProcessAddReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTaskRegularReturnNPCReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TaskRegular.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTaskRegularReturnNPCReq : public ::google::protobuf::Message {
 public:
  TTaskRegularReturnNPCReq();
  virtual ~TTaskRegularReturnNPCReq();

  TTaskRegularReturnNPCReq(const TTaskRegularReturnNPCReq& from);

  inline TTaskRegularReturnNPCReq& operator=(const TTaskRegularReturnNPCReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTaskRegularReturnNPCReq& default_instance();

  void Swap(TTaskRegularReturnNPCReq* other);

  // implements Message ----------------------------------------------

  TTaskRegularReturnNPCReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTaskRegularReturnNPCReq& from);
  void MergeFrom(const TTaskRegularReturnNPCReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 TaskTid = 1;
  inline bool has_tasktid() const;
  inline void clear_tasktid();
  static const int kTaskTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTaskRegularReturnNPCReq</name>
  	<Function>
  		<name>tasktid</name>
  		<replaceName>TaskTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tasktid</name>
  		<replaceName>TaskTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tasktid</name>
  		<replaceName>TaskTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 tasktid() const;
  inline void set_tasktid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TTaskRegularReturnNPCReq)
 private:
  inline void set_has_tasktid();
  inline void clear_has_tasktid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tasktid_;
  friend void  protobuf_AddDesc_net_2fTaskRegular_2eproto();
  friend void protobuf_AssignDesc_net_2fTaskRegular_2eproto();
  friend void protobuf_ShutdownFile_net_2fTaskRegular_2eproto();

  void InitAsDefaultInstance();
  static TTaskRegularReturnNPCReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TTaskRegularInfoRsp

// repeated .pb.TTaskData ArrData = 1;
inline int TTaskRegularInfoRsp::arrdata_size() const {
  return arrdata_.size();
}
inline void TTaskRegularInfoRsp::clear_arrdata() {
  arrdata_.Clear();
}
inline const ::pb::TTaskData& TTaskRegularInfoRsp::arrdata(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTaskRegularInfoRsp.ArrData)
  return arrdata_.Get(index);
}
inline ::pb::TTaskData* TTaskRegularInfoRsp::mutable_arrdata(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTaskRegularInfoRsp.ArrData)
  return arrdata_.Mutable(index);
}
inline ::pb::TTaskData* TTaskRegularInfoRsp::add_arrdata() {
  // @@protoc_insertion_point(field_add:pb.TTaskRegularInfoRsp.ArrData)
  return arrdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTaskData >&
TTaskRegularInfoRsp::arrdata() const {
  // @@protoc_insertion_point(field_list:pb.TTaskRegularInfoRsp.ArrData)
  return arrdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTaskData >*
TTaskRegularInfoRsp::mutable_arrdata() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTaskRegularInfoRsp.ArrData)
  return &arrdata_;
}

// -------------------------------------------------------------------

// TTaskRegularInfoNotify

// repeated .pb.TTaskData ArrData = 1;
inline int TTaskRegularInfoNotify::arrdata_size() const {
  return arrdata_.size();
}
inline void TTaskRegularInfoNotify::clear_arrdata() {
  arrdata_.Clear();
}
inline const ::pb::TTaskData& TTaskRegularInfoNotify::arrdata(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTaskRegularInfoNotify.ArrData)
  return arrdata_.Get(index);
}
inline ::pb::TTaskData* TTaskRegularInfoNotify::mutable_arrdata(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTaskRegularInfoNotify.ArrData)
  return arrdata_.Mutable(index);
}
inline ::pb::TTaskData* TTaskRegularInfoNotify::add_arrdata() {
  // @@protoc_insertion_point(field_add:pb.TTaskRegularInfoNotify.ArrData)
  return arrdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTaskData >&
TTaskRegularInfoNotify::arrdata() const {
  // @@protoc_insertion_point(field_list:pb.TTaskRegularInfoNotify.ArrData)
  return arrdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTaskData >*
TTaskRegularInfoNotify::mutable_arrdata() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTaskRegularInfoNotify.ArrData)
  return &arrdata_;
}

// -------------------------------------------------------------------

// TTaskRegularAcceptReq

// optional int32 TaskID = 1;
inline bool TTaskRegularAcceptReq::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTaskRegularAcceptReq::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTaskRegularAcceptReq::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTaskRegularAcceptReq::clear_taskid() {
  taskid_ = 0;
  clear_has_taskid();
}
inline ::google::protobuf::int32 TTaskRegularAcceptReq::taskid() const {
  // @@protoc_insertion_point(field_get:pb.TTaskRegularAcceptReq.TaskID)
  return taskid_;
}
inline void TTaskRegularAcceptReq::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTaskRegularAcceptReq.TaskID)
}

// -------------------------------------------------------------------

// TTaskRegularAwardReq

// optional int32 TaskID = 1;
inline bool TTaskRegularAwardReq::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTaskRegularAwardReq::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTaskRegularAwardReq::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTaskRegularAwardReq::clear_taskid() {
  taskid_ = 0;
  clear_has_taskid();
}
inline ::google::protobuf::int32 TTaskRegularAwardReq::taskid() const {
  // @@protoc_insertion_point(field_get:pb.TTaskRegularAwardReq.TaskID)
  return taskid_;
}
inline void TTaskRegularAwardReq::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTaskRegularAwardReq.TaskID)
}

// -------------------------------------------------------------------

// TTaskRegularInfoReq

// optional .pb.ETaskMainType MainType = 1;
inline bool TTaskRegularInfoReq::has_maintype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTaskRegularInfoReq::set_has_maintype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTaskRegularInfoReq::clear_has_maintype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTaskRegularInfoReq::clear_maintype() {
  maintype_ = 0;
  clear_has_maintype();
}
inline ::pb::ETaskMainType TTaskRegularInfoReq::maintype() const {
  // @@protoc_insertion_point(field_get:pb.TTaskRegularInfoReq.MainType)
  return static_cast< ::pb::ETaskMainType >(maintype_);
}
inline void TTaskRegularInfoReq::set_maintype(::pb::ETaskMainType value) {
  assert(::pb::ETaskMainType_IsValid(value));
  set_has_maintype();
  maintype_ = value;
  // @@protoc_insertion_point(field_set:pb.TTaskRegularInfoReq.MainType)
}

// optional .pb.ETaskSubType SubType = 2;
inline bool TTaskRegularInfoReq::has_subtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTaskRegularInfoReq::set_has_subtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTaskRegularInfoReq::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTaskRegularInfoReq::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::pb::ETaskSubType TTaskRegularInfoReq::subtype() const {
  // @@protoc_insertion_point(field_get:pb.TTaskRegularInfoReq.SubType)
  return static_cast< ::pb::ETaskSubType >(subtype_);
}
inline void TTaskRegularInfoReq::set_subtype(::pb::ETaskSubType value) {
  assert(::pb::ETaskSubType_IsValid(value));
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TTaskRegularInfoReq.SubType)
}

// -------------------------------------------------------------------

// TTaskRegularProcessAddReq

// optional int32 TaskTid = 1;
inline bool TTaskRegularProcessAddReq::has_tasktid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTaskRegularProcessAddReq::set_has_tasktid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTaskRegularProcessAddReq::clear_has_tasktid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTaskRegularProcessAddReq::clear_tasktid() {
  tasktid_ = 0;
  clear_has_tasktid();
}
inline ::google::protobuf::int32 TTaskRegularProcessAddReq::tasktid() const {
  // @@protoc_insertion_point(field_get:pb.TTaskRegularProcessAddReq.TaskTid)
  return tasktid_;
}
inline void TTaskRegularProcessAddReq::set_tasktid(::google::protobuf::int32 value) {
  set_has_tasktid();
  tasktid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTaskRegularProcessAddReq.TaskTid)
}

// -------------------------------------------------------------------

// TTaskRegularReturnNPCReq

// optional int32 TaskTid = 1;
inline bool TTaskRegularReturnNPCReq::has_tasktid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTaskRegularReturnNPCReq::set_has_tasktid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTaskRegularReturnNPCReq::clear_has_tasktid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTaskRegularReturnNPCReq::clear_tasktid() {
  tasktid_ = 0;
  clear_has_tasktid();
}
inline ::google::protobuf::int32 TTaskRegularReturnNPCReq::tasktid() const {
  // @@protoc_insertion_point(field_get:pb.TTaskRegularReturnNPCReq.TaskTid)
  return tasktid_;
}
inline void TTaskRegularReturnNPCReq::set_tasktid(::google::protobuf::int32 value) {
  set_has_tasktid();
  tasktid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTaskRegularReturnNPCReq.TaskTid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fTaskRegular_2eproto__INCLUDED
