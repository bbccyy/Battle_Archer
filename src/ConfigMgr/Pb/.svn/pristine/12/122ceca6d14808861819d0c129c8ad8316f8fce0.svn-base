// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SceneConfArcher.proto

#ifndef PROTOBUF_module_2fSceneConfArcher_2eproto__INCLUDED
#define PROTOBUF_module_2fSceneConfArcher_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/Util.pb.h"
#include "module/SceneElementDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fSceneConfArcher_2eproto();
void protobuf_AssignDesc_module_2fSceneConfArcher_2eproto();
void protobuf_ShutdownFile_module_2fSceneConfArcher_2eproto();

class ArcherScene;
class ArcherMonsterBronPoint;
class GridBlock;

enum EGridType {
  Obstacle_All = 1,
  Obstacle_Ground_Only = 2,
  Trap = 3
};
bool EGridType_IsValid(int value);
const EGridType EGridType_MIN = Obstacle_All;
const EGridType EGridType_MAX = Trap;
const int EGridType_ARRAYSIZE = EGridType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGridType_descriptor();
inline const ::std::string& EGridType_Name(EGridType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGridType_descriptor(), value);
}
inline bool EGridType_Parse(
    const ::std::string& name, EGridType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGridType>(
    EGridType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>ArcherScene</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SceneConfArcher.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class ArcherScene : public ::google::protobuf::Message {
 public:
  ArcherScene();
  virtual ~ArcherScene();

  ArcherScene(const ArcherScene& from);

  inline ArcherScene& operator=(const ArcherScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArcherScene& default_instance();

  void Swap(ArcherScene* other);

  // implements Message ----------------------------------------------

  ArcherScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArcherScene& from);
  void MergeFrom(const ArcherScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 SceneId = 1;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>ArcherScene</name>
  	<Function>
  		<name>sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint32 value);

  // required uint32 SceneTileWidth = 2;
  inline bool has_scenetilewidth() const;
  inline void clear_scenetilewidth();
  static const int kSceneTileWidthFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>ArcherScene</name>
  	<Function>
  		<name>scenetilewidth</name>
  		<replaceName>SceneTileWidth</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetilewidth</name>
  		<replaceName>SceneTileWidth</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetilewidth</name>
  		<replaceName>SceneTileWidth</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scenetilewidth() const;
  inline void set_scenetilewidth(::google::protobuf::uint32 value);

  // required uint32 SceneTileHeight = 3;
  inline bool has_scenetileheight() const;
  inline void clear_scenetileheight();
  static const int kSceneTileHeightFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>ArcherScene</name>
  	<Function>
  		<name>scenetileheight</name>
  		<replaceName>SceneTileHeight</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetileheight</name>
  		<replaceName>SceneTileHeight</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetileheight</name>
  		<replaceName>SceneTileHeight</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scenetileheight() const;
  inline void set_scenetileheight(::google::protobuf::uint32 value);

  // required uint32 TileSize = 4;
  inline bool has_tilesize() const;
  inline void clear_tilesize();
  static const int kTileSizeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>ArcherScene</name>
  	<Function>
  		<name>tilesize</name>
  		<replaceName>TileSize</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tilesize</name>
  		<replaceName>TileSize</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tilesize</name>
  		<replaceName>TileSize</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tilesize() const;
  inline void set_tilesize(::google::protobuf::uint32 value);

  // required .pb.PbVector3 CenterWSPos = 5;
  inline bool has_centerwspos() const;
  inline void clear_centerwspos();
  static const int kCenterWSPosFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>ArcherScene</name>
  	<Function>
  		<name>centerwspos</name>
  		<replaceName>CenterWSPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_centerwspos</name>
  		<replaceName>CenterWSPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_centerwspos</name>
  		<replaceName>CenterWSPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_centerwspos</name>
  		<replaceName>CenterWSPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector3& centerwspos() const;
  inline ::pb::PbVector3* mutable_centerwspos();
  inline ::pb::PbVector3* release_centerwspos();
  inline void set_allocated_centerwspos(::pb::PbVector3* centerwspos);

  // required .pb.PbVector3 SceneForward = 6;
  inline bool has_sceneforward() const;
  inline void clear_sceneforward();
  static const int kSceneForwardFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>ArcherScene</name>
  	<Function>
  		<name>sceneforward</name>
  		<replaceName>SceneForward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sceneforward</name>
  		<replaceName>SceneForward</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_sceneforward</name>
  		<replaceName>SceneForward</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sceneforward</name>
  		<replaceName>SceneForward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector3& sceneforward() const;
  inline ::pb::PbVector3* mutable_sceneforward();
  inline ::pb::PbVector3* release_sceneforward();
  inline void set_allocated_sceneforward(::pb::PbVector3* sceneforward);

  // repeated .pb.GridBlock GridBlockArr = 7;
  inline int gridblockarr_size() const;
  inline void clear_gridblockarr();
  static const int kGridBlockArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>ArcherScene</name>
  	<Function>
  		<name>gridblockarr</name>
  		<replaceName>GridBlockArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_gridblockarr</name>
  		<replaceName>GridBlockArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_gridblockarr</name>
  		<replaceName>GridBlockArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridblockarr</name>
  		<replaceName>GridBlockArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>gridblockarr_size</name>
  		<replaceName>GridBlockArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::GridBlock& gridblockarr(int index) const;
  inline ::pb::GridBlock* mutable_gridblockarr(int index);
  inline ::pb::GridBlock* add_gridblockarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GridBlock >&
      gridblockarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GridBlock >*
      mutable_gridblockarr();

  // repeated .pb.ArcherMonsterBronPoint MonsterBronPointArr = 8;
  inline int monsterbronpointarr_size() const;
  inline void clear_monsterbronpointarr();
  static const int kMonsterBronPointArrFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>ArcherScene</name>
  	<Function>
  		<name>monsterbronpointarr</name>
  		<replaceName>MonsterBronPointArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterbronpointarr</name>
  		<replaceName>MonsterBronPointArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterbronpointarr</name>
  		<replaceName>MonsterBronPointArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterbronpointarr</name>
  		<replaceName>MonsterBronPointArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterbronpointarr_size</name>
  		<replaceName>MonsterBronPointArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::ArcherMonsterBronPoint& monsterbronpointarr(int index) const;
  inline ::pb::ArcherMonsterBronPoint* mutable_monsterbronpointarr(int index);
  inline ::pb::ArcherMonsterBronPoint* add_monsterbronpointarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::ArcherMonsterBronPoint >&
      monsterbronpointarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::ArcherMonsterBronPoint >*
      mutable_monsterbronpointarr();

  // required uint32 PlayerBronTileIndex = 9;
  inline bool has_playerbrontileindex() const;
  inline void clear_playerbrontileindex();
  static const int kPlayerBronTileIndexFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>ArcherScene</name>
  	<Function>
  		<name>playerbrontileindex</name>
  		<replaceName>PlayerBronTileIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_playerbrontileindex</name>
  		<replaceName>PlayerBronTileIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_playerbrontileindex</name>
  		<replaceName>PlayerBronTileIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 playerbrontileindex() const;
  inline void set_playerbrontileindex(::google::protobuf::uint32 value);

  // repeated uint32 MissionCompleteTileIndexArr = 10;
  inline int missioncompletetileindexarr_size() const;
  inline void clear_missioncompletetileindexarr();
  static const int kMissionCompleteTileIndexArrFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>ArcherScene</name>
  	<Function>
  		<name>missioncompletetileindexarr</name>
  		<replaceName>MissionCompleteTileIndexArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_missioncompletetileindexarr</name>
  		<replaceName>MissionCompleteTileIndexArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_missioncompletetileindexarr</name>
  		<replaceName>MissionCompleteTileIndexArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_missioncompletetileindexarr</name>
  		<replaceName>MissionCompleteTileIndexArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>missioncompletetileindexarr_size</name>
  		<replaceName>MissionCompleteTileIndexArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 missioncompletetileindexarr(int index) const;
  inline void set_missioncompletetileindexarr(int index, ::google::protobuf::uint32 value);
  inline void add_missioncompletetileindexarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      missioncompletetileindexarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_missioncompletetileindexarr();

  // @@protoc_insertion_point(class_scope:pb.ArcherScene)
 private:
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_scenetilewidth();
  inline void clear_has_scenetilewidth();
  inline void set_has_scenetileheight();
  inline void clear_has_scenetileheight();
  inline void set_has_tilesize();
  inline void clear_has_tilesize();
  inline void set_has_centerwspos();
  inline void clear_has_centerwspos();
  inline void set_has_sceneforward();
  inline void clear_has_sceneforward();
  inline void set_has_playerbrontileindex();
  inline void clear_has_playerbrontileindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 sceneid_;
  ::google::protobuf::uint32 scenetilewidth_;
  ::google::protobuf::uint32 scenetileheight_;
  ::google::protobuf::uint32 tilesize_;
  ::pb::PbVector3* centerwspos_;
  ::pb::PbVector3* sceneforward_;
  ::google::protobuf::RepeatedPtrField< ::pb::GridBlock > gridblockarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::ArcherMonsterBronPoint > monsterbronpointarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > missioncompletetileindexarr_;
  ::google::protobuf::uint32 playerbrontileindex_;
  friend void  protobuf_AddDesc_module_2fSceneConfArcher_2eproto();
  friend void protobuf_AssignDesc_module_2fSceneConfArcher_2eproto();
  friend void protobuf_ShutdownFile_module_2fSceneConfArcher_2eproto();

  void InitAsDefaultInstance();
  static ArcherScene* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>ArcherMonsterBronPoint</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SceneConfArcher.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class ArcherMonsterBronPoint : public ::google::protobuf::Message {
 public:
  ArcherMonsterBronPoint();
  virtual ~ArcherMonsterBronPoint();

  ArcherMonsterBronPoint(const ArcherMonsterBronPoint& from);

  inline ArcherMonsterBronPoint& operator=(const ArcherMonsterBronPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArcherMonsterBronPoint& default_instance();

  void Swap(ArcherMonsterBronPoint* other);

  // implements Message ----------------------------------------------

  ArcherMonsterBronPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArcherMonsterBronPoint& from);
  void MergeFrom(const ArcherMonsterBronPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 BronTileIndex = 1;
  inline bool has_brontileindex() const;
  inline void clear_brontileindex();
  static const int kBronTileIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>ArcherMonsterBronPoint</name>
  	<Function>
  		<name>brontileindex</name>
  		<replaceName>BronTileIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_brontileindex</name>
  		<replaceName>BronTileIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_brontileindex</name>
  		<replaceName>BronTileIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 brontileindex() const;
  inline void set_brontileindex(::google::protobuf::uint32 value);

  // required uint32 RefreshId = 2;
  inline bool has_refreshid() const;
  inline void clear_refreshid();
  static const int kRefreshIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>ArcherMonsterBronPoint</name>
  	<Function>
  		<name>refreshid</name>
  		<replaceName>RefreshId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshid</name>
  		<replaceName>RefreshId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshid</name>
  		<replaceName>RefreshId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 refreshid() const;
  inline void set_refreshid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.ArcherMonsterBronPoint)
 private:
  inline void set_has_brontileindex();
  inline void clear_has_brontileindex();
  inline void set_has_refreshid();
  inline void clear_has_refreshid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 brontileindex_;
  ::google::protobuf::uint32 refreshid_;
  friend void  protobuf_AddDesc_module_2fSceneConfArcher_2eproto();
  friend void protobuf_AssignDesc_module_2fSceneConfArcher_2eproto();
  friend void protobuf_ShutdownFile_module_2fSceneConfArcher_2eproto();

  void InitAsDefaultInstance();
  static ArcherMonsterBronPoint* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>GridBlock</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SceneConfArcher.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class GridBlock : public ::google::protobuf::Message {
 public:
  GridBlock();
  virtual ~GridBlock();

  GridBlock(const GridBlock& from);

  inline GridBlock& operator=(const GridBlock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GridBlock& default_instance();

  void Swap(GridBlock* other);

  // implements Message ----------------------------------------------

  GridBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridBlock& from);
  void MergeFrom(const GridBlock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.EGridType GridType = 1;
  inline bool has_gridtype() const;
  inline void clear_gridtype();
  static const int kGridTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>GridBlock</name>
  	<Function>
  		<name>gridtype</name>
  		<replaceName>GridType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gridtype</name>
  		<replaceName>GridType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridtype</name>
  		<replaceName>GridType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EGridType gridtype() const;
  inline void set_gridtype(::pb::EGridType value);

  // required uint32 GridIndex = 2;
  inline bool has_gridindex() const;
  inline void clear_gridindex();
  static const int kGridIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>GridBlock</name>
  	<Function>
  		<name>gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 gridindex() const;
  inline void set_gridindex(::google::protobuf::uint32 value);

  // required uint32 ConfigId = 3;
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>GridBlock</name>
  	<Function>
  		<name>configid</name>
  		<replaceName>ConfigId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_configid</name>
  		<replaceName>ConfigId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_configid</name>
  		<replaceName>ConfigId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 configid() const;
  inline void set_configid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GridBlock)
 private:
  inline void set_has_gridtype();
  inline void clear_has_gridtype();
  inline void set_has_gridindex();
  inline void clear_has_gridindex();
  inline void set_has_configid();
  inline void clear_has_configid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int gridtype_;
  ::google::protobuf::uint32 gridindex_;
  ::google::protobuf::uint32 configid_;
  friend void  protobuf_AddDesc_module_2fSceneConfArcher_2eproto();
  friend void protobuf_AssignDesc_module_2fSceneConfArcher_2eproto();
  friend void protobuf_ShutdownFile_module_2fSceneConfArcher_2eproto();

  void InitAsDefaultInstance();
  static GridBlock* default_instance_;
};
// ===================================================================


// ===================================================================

// ArcherScene

// required uint32 SceneId = 1;
inline bool ArcherScene::has_sceneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArcherScene::set_has_sceneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArcherScene::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArcherScene::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 ArcherScene::sceneid() const {
  // @@protoc_insertion_point(field_get:pb.ArcherScene.SceneId)
  return sceneid_;
}
inline void ArcherScene::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:pb.ArcherScene.SceneId)
}

// required uint32 SceneTileWidth = 2;
inline bool ArcherScene::has_scenetilewidth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArcherScene::set_has_scenetilewidth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArcherScene::clear_has_scenetilewidth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArcherScene::clear_scenetilewidth() {
  scenetilewidth_ = 0u;
  clear_has_scenetilewidth();
}
inline ::google::protobuf::uint32 ArcherScene::scenetilewidth() const {
  // @@protoc_insertion_point(field_get:pb.ArcherScene.SceneTileWidth)
  return scenetilewidth_;
}
inline void ArcherScene::set_scenetilewidth(::google::protobuf::uint32 value) {
  set_has_scenetilewidth();
  scenetilewidth_ = value;
  // @@protoc_insertion_point(field_set:pb.ArcherScene.SceneTileWidth)
}

// required uint32 SceneTileHeight = 3;
inline bool ArcherScene::has_scenetileheight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArcherScene::set_has_scenetileheight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArcherScene::clear_has_scenetileheight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArcherScene::clear_scenetileheight() {
  scenetileheight_ = 0u;
  clear_has_scenetileheight();
}
inline ::google::protobuf::uint32 ArcherScene::scenetileheight() const {
  // @@protoc_insertion_point(field_get:pb.ArcherScene.SceneTileHeight)
  return scenetileheight_;
}
inline void ArcherScene::set_scenetileheight(::google::protobuf::uint32 value) {
  set_has_scenetileheight();
  scenetileheight_ = value;
  // @@protoc_insertion_point(field_set:pb.ArcherScene.SceneTileHeight)
}

// required uint32 TileSize = 4;
inline bool ArcherScene::has_tilesize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArcherScene::set_has_tilesize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArcherScene::clear_has_tilesize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArcherScene::clear_tilesize() {
  tilesize_ = 0u;
  clear_has_tilesize();
}
inline ::google::protobuf::uint32 ArcherScene::tilesize() const {
  // @@protoc_insertion_point(field_get:pb.ArcherScene.TileSize)
  return tilesize_;
}
inline void ArcherScene::set_tilesize(::google::protobuf::uint32 value) {
  set_has_tilesize();
  tilesize_ = value;
  // @@protoc_insertion_point(field_set:pb.ArcherScene.TileSize)
}

// required .pb.PbVector3 CenterWSPos = 5;
inline bool ArcherScene::has_centerwspos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArcherScene::set_has_centerwspos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArcherScene::clear_has_centerwspos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArcherScene::clear_centerwspos() {
  if (centerwspos_ != NULL) centerwspos_->::pb::PbVector3::Clear();
  clear_has_centerwspos();
}
inline const ::pb::PbVector3& ArcherScene::centerwspos() const {
  // @@protoc_insertion_point(field_get:pb.ArcherScene.CenterWSPos)
  return centerwspos_ != NULL ? *centerwspos_ : *default_instance_->centerwspos_;
}
inline ::pb::PbVector3* ArcherScene::mutable_centerwspos() {
  set_has_centerwspos();
  if (centerwspos_ == NULL) centerwspos_ = new ::pb::PbVector3;
  // @@protoc_insertion_point(field_mutable:pb.ArcherScene.CenterWSPos)
  return centerwspos_;
}
inline ::pb::PbVector3* ArcherScene::release_centerwspos() {
  clear_has_centerwspos();
  ::pb::PbVector3* temp = centerwspos_;
  centerwspos_ = NULL;
  return temp;
}
inline void ArcherScene::set_allocated_centerwspos(::pb::PbVector3* centerwspos) {
  delete centerwspos_;
  centerwspos_ = centerwspos;
  if (centerwspos) {
    set_has_centerwspos();
  } else {
    clear_has_centerwspos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.ArcherScene.CenterWSPos)
}

// required .pb.PbVector3 SceneForward = 6;
inline bool ArcherScene::has_sceneforward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArcherScene::set_has_sceneforward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArcherScene::clear_has_sceneforward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArcherScene::clear_sceneforward() {
  if (sceneforward_ != NULL) sceneforward_->::pb::PbVector3::Clear();
  clear_has_sceneforward();
}
inline const ::pb::PbVector3& ArcherScene::sceneforward() const {
  // @@protoc_insertion_point(field_get:pb.ArcherScene.SceneForward)
  return sceneforward_ != NULL ? *sceneforward_ : *default_instance_->sceneforward_;
}
inline ::pb::PbVector3* ArcherScene::mutable_sceneforward() {
  set_has_sceneforward();
  if (sceneforward_ == NULL) sceneforward_ = new ::pb::PbVector3;
  // @@protoc_insertion_point(field_mutable:pb.ArcherScene.SceneForward)
  return sceneforward_;
}
inline ::pb::PbVector3* ArcherScene::release_sceneforward() {
  clear_has_sceneforward();
  ::pb::PbVector3* temp = sceneforward_;
  sceneforward_ = NULL;
  return temp;
}
inline void ArcherScene::set_allocated_sceneforward(::pb::PbVector3* sceneforward) {
  delete sceneforward_;
  sceneforward_ = sceneforward;
  if (sceneforward) {
    set_has_sceneforward();
  } else {
    clear_has_sceneforward();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.ArcherScene.SceneForward)
}

// repeated .pb.GridBlock GridBlockArr = 7;
inline int ArcherScene::gridblockarr_size() const {
  return gridblockarr_.size();
}
inline void ArcherScene::clear_gridblockarr() {
  gridblockarr_.Clear();
}
inline const ::pb::GridBlock& ArcherScene::gridblockarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.ArcherScene.GridBlockArr)
  return gridblockarr_.Get(index);
}
inline ::pb::GridBlock* ArcherScene::mutable_gridblockarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ArcherScene.GridBlockArr)
  return gridblockarr_.Mutable(index);
}
inline ::pb::GridBlock* ArcherScene::add_gridblockarr() {
  // @@protoc_insertion_point(field_add:pb.ArcherScene.GridBlockArr)
  return gridblockarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GridBlock >&
ArcherScene::gridblockarr() const {
  // @@protoc_insertion_point(field_list:pb.ArcherScene.GridBlockArr)
  return gridblockarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GridBlock >*
ArcherScene::mutable_gridblockarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.ArcherScene.GridBlockArr)
  return &gridblockarr_;
}

// repeated .pb.ArcherMonsterBronPoint MonsterBronPointArr = 8;
inline int ArcherScene::monsterbronpointarr_size() const {
  return monsterbronpointarr_.size();
}
inline void ArcherScene::clear_monsterbronpointarr() {
  monsterbronpointarr_.Clear();
}
inline const ::pb::ArcherMonsterBronPoint& ArcherScene::monsterbronpointarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.ArcherScene.MonsterBronPointArr)
  return monsterbronpointarr_.Get(index);
}
inline ::pb::ArcherMonsterBronPoint* ArcherScene::mutable_monsterbronpointarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ArcherScene.MonsterBronPointArr)
  return monsterbronpointarr_.Mutable(index);
}
inline ::pb::ArcherMonsterBronPoint* ArcherScene::add_monsterbronpointarr() {
  // @@protoc_insertion_point(field_add:pb.ArcherScene.MonsterBronPointArr)
  return monsterbronpointarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::ArcherMonsterBronPoint >&
ArcherScene::monsterbronpointarr() const {
  // @@protoc_insertion_point(field_list:pb.ArcherScene.MonsterBronPointArr)
  return monsterbronpointarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::ArcherMonsterBronPoint >*
ArcherScene::mutable_monsterbronpointarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.ArcherScene.MonsterBronPointArr)
  return &monsterbronpointarr_;
}

// required uint32 PlayerBronTileIndex = 9;
inline bool ArcherScene::has_playerbrontileindex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ArcherScene::set_has_playerbrontileindex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ArcherScene::clear_has_playerbrontileindex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ArcherScene::clear_playerbrontileindex() {
  playerbrontileindex_ = 0u;
  clear_has_playerbrontileindex();
}
inline ::google::protobuf::uint32 ArcherScene::playerbrontileindex() const {
  // @@protoc_insertion_point(field_get:pb.ArcherScene.PlayerBronTileIndex)
  return playerbrontileindex_;
}
inline void ArcherScene::set_playerbrontileindex(::google::protobuf::uint32 value) {
  set_has_playerbrontileindex();
  playerbrontileindex_ = value;
  // @@protoc_insertion_point(field_set:pb.ArcherScene.PlayerBronTileIndex)
}

// repeated uint32 MissionCompleteTileIndexArr = 10;
inline int ArcherScene::missioncompletetileindexarr_size() const {
  return missioncompletetileindexarr_.size();
}
inline void ArcherScene::clear_missioncompletetileindexarr() {
  missioncompletetileindexarr_.Clear();
}
inline ::google::protobuf::uint32 ArcherScene::missioncompletetileindexarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.ArcherScene.MissionCompleteTileIndexArr)
  return missioncompletetileindexarr_.Get(index);
}
inline void ArcherScene::set_missioncompletetileindexarr(int index, ::google::protobuf::uint32 value) {
  missioncompletetileindexarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.ArcherScene.MissionCompleteTileIndexArr)
}
inline void ArcherScene::add_missioncompletetileindexarr(::google::protobuf::uint32 value) {
  missioncompletetileindexarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.ArcherScene.MissionCompleteTileIndexArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ArcherScene::missioncompletetileindexarr() const {
  // @@protoc_insertion_point(field_list:pb.ArcherScene.MissionCompleteTileIndexArr)
  return missioncompletetileindexarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ArcherScene::mutable_missioncompletetileindexarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.ArcherScene.MissionCompleteTileIndexArr)
  return &missioncompletetileindexarr_;
}

// -------------------------------------------------------------------

// ArcherMonsterBronPoint

// required uint32 BronTileIndex = 1;
inline bool ArcherMonsterBronPoint::has_brontileindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArcherMonsterBronPoint::set_has_brontileindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArcherMonsterBronPoint::clear_has_brontileindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArcherMonsterBronPoint::clear_brontileindex() {
  brontileindex_ = 0u;
  clear_has_brontileindex();
}
inline ::google::protobuf::uint32 ArcherMonsterBronPoint::brontileindex() const {
  // @@protoc_insertion_point(field_get:pb.ArcherMonsterBronPoint.BronTileIndex)
  return brontileindex_;
}
inline void ArcherMonsterBronPoint::set_brontileindex(::google::protobuf::uint32 value) {
  set_has_brontileindex();
  brontileindex_ = value;
  // @@protoc_insertion_point(field_set:pb.ArcherMonsterBronPoint.BronTileIndex)
}

// required uint32 RefreshId = 2;
inline bool ArcherMonsterBronPoint::has_refreshid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArcherMonsterBronPoint::set_has_refreshid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArcherMonsterBronPoint::clear_has_refreshid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArcherMonsterBronPoint::clear_refreshid() {
  refreshid_ = 0u;
  clear_has_refreshid();
}
inline ::google::protobuf::uint32 ArcherMonsterBronPoint::refreshid() const {
  // @@protoc_insertion_point(field_get:pb.ArcherMonsterBronPoint.RefreshId)
  return refreshid_;
}
inline void ArcherMonsterBronPoint::set_refreshid(::google::protobuf::uint32 value) {
  set_has_refreshid();
  refreshid_ = value;
  // @@protoc_insertion_point(field_set:pb.ArcherMonsterBronPoint.RefreshId)
}

// -------------------------------------------------------------------

// GridBlock

// required .pb.EGridType GridType = 1;
inline bool GridBlock::has_gridtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GridBlock::set_has_gridtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GridBlock::clear_has_gridtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GridBlock::clear_gridtype() {
  gridtype_ = 1;
  clear_has_gridtype();
}
inline ::pb::EGridType GridBlock::gridtype() const {
  // @@protoc_insertion_point(field_get:pb.GridBlock.GridType)
  return static_cast< ::pb::EGridType >(gridtype_);
}
inline void GridBlock::set_gridtype(::pb::EGridType value) {
  assert(::pb::EGridType_IsValid(value));
  set_has_gridtype();
  gridtype_ = value;
  // @@protoc_insertion_point(field_set:pb.GridBlock.GridType)
}

// required uint32 GridIndex = 2;
inline bool GridBlock::has_gridindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GridBlock::set_has_gridindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GridBlock::clear_has_gridindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GridBlock::clear_gridindex() {
  gridindex_ = 0u;
  clear_has_gridindex();
}
inline ::google::protobuf::uint32 GridBlock::gridindex() const {
  // @@protoc_insertion_point(field_get:pb.GridBlock.GridIndex)
  return gridindex_;
}
inline void GridBlock::set_gridindex(::google::protobuf::uint32 value) {
  set_has_gridindex();
  gridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.GridBlock.GridIndex)
}

// required uint32 ConfigId = 3;
inline bool GridBlock::has_configid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GridBlock::set_has_configid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GridBlock::clear_has_configid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GridBlock::clear_configid() {
  configid_ = 0u;
  clear_has_configid();
}
inline ::google::protobuf::uint32 GridBlock::configid() const {
  // @@protoc_insertion_point(field_get:pb.GridBlock.ConfigId)
  return configid_;
}
inline void GridBlock::set_configid(::google::protobuf::uint32 value) {
  set_has_configid();
  configid_ = value;
  // @@protoc_insertion_point(field_set:pb.GridBlock.ConfigId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EGridType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EGridType>() {
  return ::pb::EGridType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fSceneConfArcher_2eproto__INCLUDED
