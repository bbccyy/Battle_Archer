// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/LayerFight.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/LayerFight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TLayerFightStrongholdInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightStrongholdInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightAchievementInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightAchievementInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightGetInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightGetInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightDoBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightDoBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightDoBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightDoBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightGetAchievementRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightGetAchievementRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightGetAchievementRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightGetAchievementRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightSetSquadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightSetSquadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightQuickPassReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightQuickPassReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightQuickPassRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightQuickPassRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightGetMapInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightGetMapInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightGetMapInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightGetMapInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightGetSquadArrInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightGetSquadArrInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightGetStrongHoldInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightGetStrongHoldInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLayerFightGetStrongHoldInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLayerFightGetStrongHoldInfoRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fLayerFight_2eproto() {
  protobuf_AddDesc_net_2fLayerFight_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/LayerFight.proto");
  GOOGLE_CHECK(file != NULL);
  TLayerFightStrongholdInfo_descriptor_ = file->message_type(0);
  static const int TLayerFightStrongholdInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightStrongholdInfo, strongholdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightStrongholdInfo, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightStrongholdInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightStrongholdInfo, strongholdcompletetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightStrongholdInfo, strongholdcompletenum_),
  };
  TLayerFightStrongholdInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightStrongholdInfo_descriptor_,
      TLayerFightStrongholdInfo::default_instance_,
      TLayerFightStrongholdInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightStrongholdInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightStrongholdInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightStrongholdInfo));
  TLayerFightMapInfo_descriptor_ = file->message_type(1);
  static const int TLayerFightMapInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightMapInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightMapInfo, strongholdinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightMapInfo, mapcompletetime_),
  };
  TLayerFightMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightMapInfo_descriptor_,
      TLayerFightMapInfo::default_instance_,
      TLayerFightMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightMapInfo));
  TLayerFightAchievementInfo_descriptor_ = file->message_type(2);
  static const int TLayerFightAchievementInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightAchievementInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightAchievementInfo, rewardtime_),
  };
  TLayerFightAchievementInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightAchievementInfo_descriptor_,
      TLayerFightAchievementInfo::default_instance_,
      TLayerFightAchievementInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightAchievementInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightAchievementInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightAchievementInfo));
  TLayerFightInfo_descriptor_ = file->message_type(3);
  static const int TLayerFightInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightInfo, squadarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightInfo, mapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightInfo, usedchallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightInfo, achievementinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightInfo, nowstrongholdid_),
  };
  TLayerFightInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightInfo_descriptor_,
      TLayerFightInfo::default_instance_,
      TLayerFightInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightInfo));
  TLayerFightGetInfoRsp_descriptor_ = file->message_type(4);
  static const int TLayerFightGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetInfoRsp, info_),
  };
  TLayerFightGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightGetInfoRsp_descriptor_,
      TLayerFightGetInfoRsp::default_instance_,
      TLayerFightGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightGetInfoRsp));
  TLayerFightGetInfoNotify_descriptor_ = file->message_type(5);
  static const int TLayerFightGetInfoNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetInfoNotify, usedchallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetInfoNotify, strongholdinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetInfoNotify, achievementinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetInfoNotify, nowstrongholdid_),
  };
  TLayerFightGetInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightGetInfoNotify_descriptor_,
      TLayerFightGetInfoNotify::default_instance_,
      TLayerFightGetInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightGetInfoNotify));
  TLayerFightDoBattleReq_descriptor_ = file->message_type(6);
  static const int TLayerFightDoBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightDoBattleReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightDoBattleReq, isquickbattle_),
  };
  TLayerFightDoBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightDoBattleReq_descriptor_,
      TLayerFightDoBattleReq::default_instance_,
      TLayerFightDoBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightDoBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightDoBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightDoBattleReq));
  TLayerFightDoBattleRsp_descriptor_ = file->message_type(7);
  static const int TLayerFightDoBattleRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightDoBattleRsp, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightDoBattleRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightDoBattleRsp, isfirstwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightDoBattleRsp, battleresult_),
  };
  TLayerFightDoBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightDoBattleRsp_descriptor_,
      TLayerFightDoBattleRsp::default_instance_,
      TLayerFightDoBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightDoBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightDoBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightDoBattleRsp));
  TLayerFightGetAchievementRewardReq_descriptor_ = file->message_type(8);
  static const int TLayerFightGetAchievementRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetAchievementRewardReq, id_),
  };
  TLayerFightGetAchievementRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightGetAchievementRewardReq_descriptor_,
      TLayerFightGetAchievementRewardReq::default_instance_,
      TLayerFightGetAchievementRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetAchievementRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetAchievementRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightGetAchievementRewardReq));
  TLayerFightGetAchievementRewardRsp_descriptor_ = file->message_type(9);
  static const int TLayerFightGetAchievementRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetAchievementRewardRsp, rewardarr_),
  };
  TLayerFightGetAchievementRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightGetAchievementRewardRsp_descriptor_,
      TLayerFightGetAchievementRewardRsp::default_instance_,
      TLayerFightGetAchievementRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetAchievementRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetAchievementRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightGetAchievementRewardRsp));
  TLayerFightSetSquadReq_descriptor_ = file->message_type(10);
  static const int TLayerFightSetSquadReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightSetSquadReq, squad_),
  };
  TLayerFightSetSquadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightSetSquadReq_descriptor_,
      TLayerFightSetSquadReq::default_instance_,
      TLayerFightSetSquadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightSetSquadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightSetSquadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightSetSquadReq));
  TLayerFightQuickPassReq_descriptor_ = file->message_type(11);
  static const int TLayerFightQuickPassReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightQuickPassReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightQuickPassReq, attacknums_),
  };
  TLayerFightQuickPassReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightQuickPassReq_descriptor_,
      TLayerFightQuickPassReq::default_instance_,
      TLayerFightQuickPassReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightQuickPassReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightQuickPassReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightQuickPassReq));
  TLayerFightQuickPassRsp_descriptor_ = file->message_type(12);
  static const int TLayerFightQuickPassRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightQuickPassRsp, rewardarr_),
  };
  TLayerFightQuickPassRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightQuickPassRsp_descriptor_,
      TLayerFightQuickPassRsp::default_instance_,
      TLayerFightQuickPassRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightQuickPassRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightQuickPassRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightQuickPassRsp));
  TLayerFightGetMapInfoReq_descriptor_ = file->message_type(13);
  static const int TLayerFightGetMapInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetMapInfoReq, mapid_),
  };
  TLayerFightGetMapInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightGetMapInfoReq_descriptor_,
      TLayerFightGetMapInfoReq::default_instance_,
      TLayerFightGetMapInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetMapInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetMapInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightGetMapInfoReq));
  TLayerFightGetMapInfoRsp_descriptor_ = file->message_type(14);
  static const int TLayerFightGetMapInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetMapInfoRsp, mapinfo_),
  };
  TLayerFightGetMapInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightGetMapInfoRsp_descriptor_,
      TLayerFightGetMapInfoRsp::default_instance_,
      TLayerFightGetMapInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetMapInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetMapInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightGetMapInfoRsp));
  TLayerFightGetSquadArrInfoRsp_descriptor_ = file->message_type(15);
  static const int TLayerFightGetSquadArrInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetSquadArrInfoRsp, htidarr_),
  };
  TLayerFightGetSquadArrInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightGetSquadArrInfoRsp_descriptor_,
      TLayerFightGetSquadArrInfoRsp::default_instance_,
      TLayerFightGetSquadArrInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetSquadArrInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetSquadArrInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightGetSquadArrInfoRsp));
  TLayerFightGetStrongHoldInfoReq_descriptor_ = file->message_type(16);
  static const int TLayerFightGetStrongHoldInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetStrongHoldInfoReq, strongholdid_),
  };
  TLayerFightGetStrongHoldInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightGetStrongHoldInfoReq_descriptor_,
      TLayerFightGetStrongHoldInfoReq::default_instance_,
      TLayerFightGetStrongHoldInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetStrongHoldInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetStrongHoldInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightGetStrongHoldInfoReq));
  TLayerFightGetStrongHoldInfoRsp_descriptor_ = file->message_type(17);
  static const int TLayerFightGetStrongHoldInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetStrongHoldInfoRsp, info_),
  };
  TLayerFightGetStrongHoldInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLayerFightGetStrongHoldInfoRsp_descriptor_,
      TLayerFightGetStrongHoldInfoRsp::default_instance_,
      TLayerFightGetStrongHoldInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetStrongHoldInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLayerFightGetStrongHoldInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLayerFightGetStrongHoldInfoRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fLayerFight_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightStrongholdInfo_descriptor_, &TLayerFightStrongholdInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightMapInfo_descriptor_, &TLayerFightMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightAchievementInfo_descriptor_, &TLayerFightAchievementInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightInfo_descriptor_, &TLayerFightInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightGetInfoRsp_descriptor_, &TLayerFightGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightGetInfoNotify_descriptor_, &TLayerFightGetInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightDoBattleReq_descriptor_, &TLayerFightDoBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightDoBattleRsp_descriptor_, &TLayerFightDoBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightGetAchievementRewardReq_descriptor_, &TLayerFightGetAchievementRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightGetAchievementRewardRsp_descriptor_, &TLayerFightGetAchievementRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightSetSquadReq_descriptor_, &TLayerFightSetSquadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightQuickPassReq_descriptor_, &TLayerFightQuickPassReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightQuickPassRsp_descriptor_, &TLayerFightQuickPassRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightGetMapInfoReq_descriptor_, &TLayerFightGetMapInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightGetMapInfoRsp_descriptor_, &TLayerFightGetMapInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightGetSquadArrInfoRsp_descriptor_, &TLayerFightGetSquadArrInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightGetStrongHoldInfoReq_descriptor_, &TLayerFightGetStrongHoldInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLayerFightGetStrongHoldInfoRsp_descriptor_, &TLayerFightGetStrongHoldInfoRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fLayerFight_2eproto() {
  delete TLayerFightStrongholdInfo::default_instance_;
  delete TLayerFightStrongholdInfo_reflection_;
  delete TLayerFightMapInfo::default_instance_;
  delete TLayerFightMapInfo_reflection_;
  delete TLayerFightAchievementInfo::default_instance_;
  delete TLayerFightAchievementInfo_reflection_;
  delete TLayerFightInfo::default_instance_;
  delete TLayerFightInfo_reflection_;
  delete TLayerFightGetInfoRsp::default_instance_;
  delete TLayerFightGetInfoRsp_reflection_;
  delete TLayerFightGetInfoNotify::default_instance_;
  delete TLayerFightGetInfoNotify_reflection_;
  delete TLayerFightDoBattleReq::default_instance_;
  delete TLayerFightDoBattleReq_reflection_;
  delete TLayerFightDoBattleRsp::default_instance_;
  delete TLayerFightDoBattleRsp_reflection_;
  delete TLayerFightGetAchievementRewardReq::default_instance_;
  delete TLayerFightGetAchievementRewardReq_reflection_;
  delete TLayerFightGetAchievementRewardRsp::default_instance_;
  delete TLayerFightGetAchievementRewardRsp_reflection_;
  delete TLayerFightSetSquadReq::default_instance_;
  delete TLayerFightSetSquadReq_reflection_;
  delete TLayerFightQuickPassReq::default_instance_;
  delete TLayerFightQuickPassReq_reflection_;
  delete TLayerFightQuickPassRsp::default_instance_;
  delete TLayerFightQuickPassRsp_reflection_;
  delete TLayerFightGetMapInfoReq::default_instance_;
  delete TLayerFightGetMapInfoReq_reflection_;
  delete TLayerFightGetMapInfoRsp::default_instance_;
  delete TLayerFightGetMapInfoRsp_reflection_;
  delete TLayerFightGetSquadArrInfoRsp::default_instance_;
  delete TLayerFightGetSquadArrInfoRsp_reflection_;
  delete TLayerFightGetStrongHoldInfoReq::default_instance_;
  delete TLayerFightGetStrongHoldInfoReq_reflection_;
  delete TLayerFightGetStrongHoldInfoRsp::default_instance_;
  delete TLayerFightGetStrongHoldInfoRsp_reflection_;
}

void protobuf_AddDesc_net_2fLayerFight_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fMirror_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024net/LayerFight.proto\022\002pb\032\026net/CommonRe"
    "ward.proto\032\020net/Mirror.proto\032\020net/Battle"
    ".proto\"\243\001\n\031TLayerFightStrongholdInfo\022\024\n\014"
    "StrongholdId\030\001 \001(\r\022\037\n\006Mirror\030\002 \001(\0132\017.pb."
    "TMirrorInfo\022\020\n\010ServerId\030\003 \001(\t\022\036\n\026Strongh"
    "oldCompleteTime\030\004 \001(\004\022\035\n\025StrongholdCompl"
    "eteNum\030\005 \001(\r\"v\n\022TLayerFightMapInfo\022\r\n\005Ma"
    "pID\030\001 \001(\r\0228\n\021StrongholdInfoArr\030\002 \003(\0132\035.p"
    "b.TLayerFightStrongholdInfo\022\027\n\017MapComple"
    "teTime\030\003 \001(\004\"<\n\032TLayerFightAchievementIn"
    "fo\022\n\n\002ID\030\001 \001(\r\022\022\n\nRewardTime\030\002 \001(\004\"\273\001\n\017T"
    "LayerFightInfo\022\020\n\010SquadArr\030\001 \003(\r\022\'\n\007MapI"
    "nfo\030\002 \003(\0132\026.pb.TLayerFightMapInfo\022\030\n\020Use"
    "dChallengeNum\030\003 \001(\r\022:\n\022AchievementInfoAr"
    "r\030\004 \003(\0132\036.pb.TLayerFightAchievementInfo\022"
    "\027\n\017NowStrongholdId\030\005 \001(\r\":\n\025TLayerFightG"
    "etInfoRsp\022!\n\004Info\030\001 \001(\0132\023.pb.TLayerFight"
    "Info\"\303\001\n\030TLayerFightGetInfoNotify\022\030\n\020Use"
    "dChallengeNum\030\001 \001(\r\0228\n\021StrongHoldInfoArr"
    "\030\002 \003(\0132\035.pb.TLayerFightStrongholdInfo\022:\n"
    "\022AchievementInfoArr\030\003 \003(\0132\036.pb.TLayerFig"
    "htAchievementInfo\022\027\n\017NowStrongholdId\030\004 \001"
    "(\r\";\n\026TLayerFightDoBattleReq\022\n\n\002ID\030\001 \001(\r"
    "\022\025\n\rIsQuickBattle\030\002 \001(\r\"\212\001\n\026TLayerFightD"
    "oBattleRsp\022\r\n\005IsWin\030\001 \001(\r\022$\n\tRewardArr\030\002"
    " \003(\0132\021.pb.TCommonReward\022\022\n\nIsFirstWin\030\003 "
    "\001(\r\022\'\n\014BattleResult\030\004 \001(\0132\021.pb.TBattleRe"
    "sult\"0\n\"TLayerFightGetAchievementRewardR"
    "eq\022\n\n\002ID\030\001 \001(\r\"J\n\"TLayerFightGetAchievem"
    "entRewardRsp\022$\n\tRewardArr\030\001 \003(\0132\021.pb.TCo"
    "mmonReward\"\'\n\026TLayerFightSetSquadReq\022\r\n\005"
    "Squad\030\001 \003(\r\"9\n\027TLayerFightQuickPassReq\022\n"
    "\n\002ID\030\001 \001(\r\022\022\n\nAttackNums\030\002 \001(\r\"\?\n\027TLayer"
    "FightQuickPassRsp\022$\n\tRewardArr\030\001 \003(\0132\021.p"
    "b.TCommonReward\")\n\030TLayerFightGetMapInfo"
    "Req\022\r\n\005MapID\030\001 \001(\r\"C\n\030TLayerFightGetMapI"
    "nfoRsp\022\'\n\007MapInfo\030\001 \001(\0132\026.pb.TLayerFight"
    "MapInfo\"0\n\035TLayerFightGetSquadArrInfoRsp"
    "\022\017\n\007HtidArr\030\001 \003(\r\"7\n\037TLayerFightGetStron"
    "gHoldInfoReq\022\024\n\014StrongHoldId\030\001 \001(\r\"@\n\037TL"
    "ayerFightGetStrongHoldInfoRsp\022\035\n\004Info\030\001 "
    "\001(\0132\017.pb.TMirrorInfo", 1660);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/LayerFight.proto", &protobuf_RegisterTypes);
  TLayerFightStrongholdInfo::default_instance_ = new TLayerFightStrongholdInfo();
  TLayerFightMapInfo::default_instance_ = new TLayerFightMapInfo();
  TLayerFightAchievementInfo::default_instance_ = new TLayerFightAchievementInfo();
  TLayerFightInfo::default_instance_ = new TLayerFightInfo();
  TLayerFightGetInfoRsp::default_instance_ = new TLayerFightGetInfoRsp();
  TLayerFightGetInfoNotify::default_instance_ = new TLayerFightGetInfoNotify();
  TLayerFightDoBattleReq::default_instance_ = new TLayerFightDoBattleReq();
  TLayerFightDoBattleRsp::default_instance_ = new TLayerFightDoBattleRsp();
  TLayerFightGetAchievementRewardReq::default_instance_ = new TLayerFightGetAchievementRewardReq();
  TLayerFightGetAchievementRewardRsp::default_instance_ = new TLayerFightGetAchievementRewardRsp();
  TLayerFightSetSquadReq::default_instance_ = new TLayerFightSetSquadReq();
  TLayerFightQuickPassReq::default_instance_ = new TLayerFightQuickPassReq();
  TLayerFightQuickPassRsp::default_instance_ = new TLayerFightQuickPassRsp();
  TLayerFightGetMapInfoReq::default_instance_ = new TLayerFightGetMapInfoReq();
  TLayerFightGetMapInfoRsp::default_instance_ = new TLayerFightGetMapInfoRsp();
  TLayerFightGetSquadArrInfoRsp::default_instance_ = new TLayerFightGetSquadArrInfoRsp();
  TLayerFightGetStrongHoldInfoReq::default_instance_ = new TLayerFightGetStrongHoldInfoReq();
  TLayerFightGetStrongHoldInfoRsp::default_instance_ = new TLayerFightGetStrongHoldInfoRsp();
  TLayerFightStrongholdInfo::default_instance_->InitAsDefaultInstance();
  TLayerFightMapInfo::default_instance_->InitAsDefaultInstance();
  TLayerFightAchievementInfo::default_instance_->InitAsDefaultInstance();
  TLayerFightInfo::default_instance_->InitAsDefaultInstance();
  TLayerFightGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TLayerFightGetInfoNotify::default_instance_->InitAsDefaultInstance();
  TLayerFightDoBattleReq::default_instance_->InitAsDefaultInstance();
  TLayerFightDoBattleRsp::default_instance_->InitAsDefaultInstance();
  TLayerFightGetAchievementRewardReq::default_instance_->InitAsDefaultInstance();
  TLayerFightGetAchievementRewardRsp::default_instance_->InitAsDefaultInstance();
  TLayerFightSetSquadReq::default_instance_->InitAsDefaultInstance();
  TLayerFightQuickPassReq::default_instance_->InitAsDefaultInstance();
  TLayerFightQuickPassRsp::default_instance_->InitAsDefaultInstance();
  TLayerFightGetMapInfoReq::default_instance_->InitAsDefaultInstance();
  TLayerFightGetMapInfoRsp::default_instance_->InitAsDefaultInstance();
  TLayerFightGetSquadArrInfoRsp::default_instance_->InitAsDefaultInstance();
  TLayerFightGetStrongHoldInfoReq::default_instance_->InitAsDefaultInstance();
  TLayerFightGetStrongHoldInfoRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fLayerFight_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fLayerFight_2eproto {
  StaticDescriptorInitializer_net_2fLayerFight_2eproto() {
    protobuf_AddDesc_net_2fLayerFight_2eproto();
  }
} static_descriptor_initializer_net_2fLayerFight_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TLayerFightStrongholdInfo::kStrongholdIdFieldNumber;
const int TLayerFightStrongholdInfo::kMirrorFieldNumber;
const int TLayerFightStrongholdInfo::kServerIdFieldNumber;
const int TLayerFightStrongholdInfo::kStrongholdCompleteTimeFieldNumber;
const int TLayerFightStrongholdInfo::kStrongholdCompleteNumFieldNumber;
#endif  // !_MSC_VER

TLayerFightStrongholdInfo::TLayerFightStrongholdInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightStrongholdInfo)
}

void TLayerFightStrongholdInfo::InitAsDefaultInstance() {
  mirror_ = const_cast< ::pb::TMirrorInfo*>(&::pb::TMirrorInfo::default_instance());
}

TLayerFightStrongholdInfo::TLayerFightStrongholdInfo(const TLayerFightStrongholdInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightStrongholdInfo)
}

void TLayerFightStrongholdInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  strongholdid_ = 0u;
  mirror_ = NULL;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strongholdcompletetime_ = GOOGLE_ULONGLONG(0);
  strongholdcompletenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightStrongholdInfo::~TLayerFightStrongholdInfo() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightStrongholdInfo)
  SharedDtor();
}

void TLayerFightStrongholdInfo::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
    delete mirror_;
  }
}

void TLayerFightStrongholdInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightStrongholdInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightStrongholdInfo_descriptor_;
}

const TLayerFightStrongholdInfo& TLayerFightStrongholdInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightStrongholdInfo* TLayerFightStrongholdInfo::default_instance_ = NULL;

TLayerFightStrongholdInfo* TLayerFightStrongholdInfo::New() const {
  return new TLayerFightStrongholdInfo;
}

void TLayerFightStrongholdInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLayerFightStrongholdInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(strongholdid_, strongholdcompletetime_);
    if (has_mirror()) {
      if (mirror_ != NULL) mirror_->::pb::TMirrorInfo::Clear();
    }
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightStrongholdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightStrongholdInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 StrongholdId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strongholdid_)));
          set_has_strongholdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Mirror;
        break;
      }

      // optional .pb.TMirrorInfo Mirror = 2;
      case 2: {
        if (tag == 18) {
         parse_Mirror:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mirror()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 3;
      case 3: {
        if (tag == 26) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_StrongholdCompleteTime;
        break;
      }

      // optional uint64 StrongholdCompleteTime = 4;
      case 4: {
        if (tag == 32) {
         parse_StrongholdCompleteTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &strongholdcompletetime_)));
          set_has_strongholdcompletetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_StrongholdCompleteNum;
        break;
      }

      // optional uint32 StrongholdCompleteNum = 5;
      case 5: {
        if (tag == 40) {
         parse_StrongholdCompleteNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strongholdcompletenum_)));
          set_has_strongholdcompletenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightStrongholdInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightStrongholdInfo)
  return false;
#undef DO_
}

void TLayerFightStrongholdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightStrongholdInfo)
  // optional uint32 StrongholdId = 1;
  if (has_strongholdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->strongholdid(), output);
  }

  // optional .pb.TMirrorInfo Mirror = 2;
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mirror(), output);
  }

  // optional string ServerId = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serverid(), output);
  }

  // optional uint64 StrongholdCompleteTime = 4;
  if (has_strongholdcompletetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->strongholdcompletetime(), output);
  }

  // optional uint32 StrongholdCompleteNum = 5;
  if (has_strongholdcompletenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->strongholdcompletenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightStrongholdInfo)
}

::google::protobuf::uint8* TLayerFightStrongholdInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightStrongholdInfo)
  // optional uint32 StrongholdId = 1;
  if (has_strongholdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->strongholdid(), target);
  }

  // optional .pb.TMirrorInfo Mirror = 2;
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mirror(), target);
  }

  // optional string ServerId = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serverid(), target);
  }

  // optional uint64 StrongholdCompleteTime = 4;
  if (has_strongholdcompletetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->strongholdcompletetime(), target);
  }

  // optional uint32 StrongholdCompleteNum = 5;
  if (has_strongholdcompletenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->strongholdcompletenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightStrongholdInfo)
  return target;
}

int TLayerFightStrongholdInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StrongholdId = 1;
    if (has_strongholdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strongholdid());
    }

    // optional .pb.TMirrorInfo Mirror = 2;
    if (has_mirror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mirror());
    }

    // optional string ServerId = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional uint64 StrongholdCompleteTime = 4;
    if (has_strongholdcompletetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->strongholdcompletetime());
    }

    // optional uint32 StrongholdCompleteNum = 5;
    if (has_strongholdcompletenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strongholdcompletenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightStrongholdInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightStrongholdInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightStrongholdInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightStrongholdInfo::MergeFrom(const TLayerFightStrongholdInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strongholdid()) {
      set_strongholdid(from.strongholdid());
    }
    if (from.has_mirror()) {
      mutable_mirror()->::pb::TMirrorInfo::MergeFrom(from.mirror());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_strongholdcompletetime()) {
      set_strongholdcompletetime(from.strongholdcompletetime());
    }
    if (from.has_strongholdcompletenum()) {
      set_strongholdcompletenum(from.strongholdcompletenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightStrongholdInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightStrongholdInfo::CopyFrom(const TLayerFightStrongholdInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightStrongholdInfo::IsInitialized() const {

  if (has_mirror()) {
    if (!this->mirror().IsInitialized()) return false;
  }
  return true;
}

void TLayerFightStrongholdInfo::Swap(TLayerFightStrongholdInfo* other) {
  if (other != this) {
    std::swap(strongholdid_, other->strongholdid_);
    std::swap(mirror_, other->mirror_);
    std::swap(serverid_, other->serverid_);
    std::swap(strongholdcompletetime_, other->strongholdcompletetime_);
    std::swap(strongholdcompletenum_, other->strongholdcompletenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightStrongholdInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightStrongholdInfo_descriptor_;
  metadata.reflection = TLayerFightStrongholdInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightMapInfo::kMapIDFieldNumber;
const int TLayerFightMapInfo::kStrongholdInfoArrFieldNumber;
const int TLayerFightMapInfo::kMapCompleteTimeFieldNumber;
#endif  // !_MSC_VER

TLayerFightMapInfo::TLayerFightMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightMapInfo)
}

void TLayerFightMapInfo::InitAsDefaultInstance() {
}

TLayerFightMapInfo::TLayerFightMapInfo(const TLayerFightMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightMapInfo)
}

void TLayerFightMapInfo::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  mapcompletetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightMapInfo::~TLayerFightMapInfo() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightMapInfo)
  SharedDtor();
}

void TLayerFightMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLayerFightMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightMapInfo_descriptor_;
}

const TLayerFightMapInfo& TLayerFightMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightMapInfo* TLayerFightMapInfo::default_instance_ = NULL;

TLayerFightMapInfo* TLayerFightMapInfo::New() const {
  return new TLayerFightMapInfo;
}

void TLayerFightMapInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLayerFightMapInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mapcompletetime_, mapid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  strongholdinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightMapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MapID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StrongholdInfoArr;
        break;
      }

      // repeated .pb.TLayerFightStrongholdInfo StrongholdInfoArr = 2;
      case 2: {
        if (tag == 18) {
         parse_StrongholdInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strongholdinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StrongholdInfoArr;
        if (input->ExpectTag(24)) goto parse_MapCompleteTime;
        break;
      }

      // optional uint64 MapCompleteTime = 3;
      case 3: {
        if (tag == 24) {
         parse_MapCompleteTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapcompletetime_)));
          set_has_mapcompletetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightMapInfo)
  return false;
#undef DO_
}

void TLayerFightMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightMapInfo)
  // optional uint32 MapID = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // repeated .pb.TLayerFightStrongholdInfo StrongholdInfoArr = 2;
  for (int i = 0; i < this->strongholdinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strongholdinfoarr(i), output);
  }

  // optional uint64 MapCompleteTime = 3;
  if (has_mapcompletetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mapcompletetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightMapInfo)
}

::google::protobuf::uint8* TLayerFightMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightMapInfo)
  // optional uint32 MapID = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // repeated .pb.TLayerFightStrongholdInfo StrongholdInfoArr = 2;
  for (int i = 0; i < this->strongholdinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strongholdinfoarr(i), target);
  }

  // optional uint64 MapCompleteTime = 3;
  if (has_mapcompletetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mapcompletetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightMapInfo)
  return target;
}

int TLayerFightMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint64 MapCompleteTime = 3;
    if (has_mapcompletetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapcompletetime());
    }

  }
  // repeated .pb.TLayerFightStrongholdInfo StrongholdInfoArr = 2;
  total_size += 1 * this->strongholdinfoarr_size();
  for (int i = 0; i < this->strongholdinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strongholdinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightMapInfo::MergeFrom(const TLayerFightMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  strongholdinfoarr_.MergeFrom(from.strongholdinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_mapcompletetime()) {
      set_mapcompletetime(from.mapcompletetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightMapInfo::CopyFrom(const TLayerFightMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightMapInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->strongholdinfoarr())) return false;
  return true;
}

void TLayerFightMapInfo::Swap(TLayerFightMapInfo* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    strongholdinfoarr_.Swap(&other->strongholdinfoarr_);
    std::swap(mapcompletetime_, other->mapcompletetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightMapInfo_descriptor_;
  metadata.reflection = TLayerFightMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightAchievementInfo::kIDFieldNumber;
const int TLayerFightAchievementInfo::kRewardTimeFieldNumber;
#endif  // !_MSC_VER

TLayerFightAchievementInfo::TLayerFightAchievementInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightAchievementInfo)
}

void TLayerFightAchievementInfo::InitAsDefaultInstance() {
}

TLayerFightAchievementInfo::TLayerFightAchievementInfo(const TLayerFightAchievementInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightAchievementInfo)
}

void TLayerFightAchievementInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  rewardtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightAchievementInfo::~TLayerFightAchievementInfo() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightAchievementInfo)
  SharedDtor();
}

void TLayerFightAchievementInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLayerFightAchievementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightAchievementInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightAchievementInfo_descriptor_;
}

const TLayerFightAchievementInfo& TLayerFightAchievementInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightAchievementInfo* TLayerFightAchievementInfo::default_instance_ = NULL;

TLayerFightAchievementInfo* TLayerFightAchievementInfo::New() const {
  return new TLayerFightAchievementInfo;
}

void TLayerFightAchievementInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLayerFightAchievementInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rewardtime_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightAchievementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightAchievementInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RewardTime;
        break;
      }

      // optional uint64 RewardTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightAchievementInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightAchievementInfo)
  return false;
#undef DO_
}

void TLayerFightAchievementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightAchievementInfo)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 RewardTime = 2;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rewardtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightAchievementInfo)
}

::google::protobuf::uint8* TLayerFightAchievementInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightAchievementInfo)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 RewardTime = 2;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rewardtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightAchievementInfo)
  return target;
}

int TLayerFightAchievementInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 RewardTime = 2;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewardtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightAchievementInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightAchievementInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightAchievementInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightAchievementInfo::MergeFrom(const TLayerFightAchievementInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightAchievementInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightAchievementInfo::CopyFrom(const TLayerFightAchievementInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightAchievementInfo::IsInitialized() const {

  return true;
}

void TLayerFightAchievementInfo::Swap(TLayerFightAchievementInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightAchievementInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightAchievementInfo_descriptor_;
  metadata.reflection = TLayerFightAchievementInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightInfo::kSquadArrFieldNumber;
const int TLayerFightInfo::kMapInfoFieldNumber;
const int TLayerFightInfo::kUsedChallengeNumFieldNumber;
const int TLayerFightInfo::kAchievementInfoArrFieldNumber;
const int TLayerFightInfo::kNowStrongholdIdFieldNumber;
#endif  // !_MSC_VER

TLayerFightInfo::TLayerFightInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightInfo)
}

void TLayerFightInfo::InitAsDefaultInstance() {
}

TLayerFightInfo::TLayerFightInfo(const TLayerFightInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightInfo)
}

void TLayerFightInfo::SharedCtor() {
  _cached_size_ = 0;
  usedchallengenum_ = 0u;
  nowstrongholdid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightInfo::~TLayerFightInfo() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightInfo)
  SharedDtor();
}

void TLayerFightInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLayerFightInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightInfo_descriptor_;
}

const TLayerFightInfo& TLayerFightInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightInfo* TLayerFightInfo::default_instance_ = NULL;

TLayerFightInfo* TLayerFightInfo::New() const {
  return new TLayerFightInfo;
}

void TLayerFightInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLayerFightInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(usedchallengenum_, nowstrongholdid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  squadarr_.Clear();
  mapinfo_.Clear();
  achievementinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 SquadArr = 1;
      case 1: {
        if (tag == 8) {
         parse_SquadArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_squadarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_squadarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_SquadArr;
        if (input->ExpectTag(18)) goto parse_MapInfo;
        break;
      }

      // repeated .pb.TLayerFightMapInfo MapInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_MapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MapInfo;
        if (input->ExpectTag(24)) goto parse_UsedChallengeNum;
        break;
      }

      // optional uint32 UsedChallengeNum = 3;
      case 3: {
        if (tag == 24) {
         parse_UsedChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedchallengenum_)));
          set_has_usedchallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AchievementInfoArr;
        break;
      }

      // repeated .pb.TLayerFightAchievementInfo AchievementInfoArr = 4;
      case 4: {
        if (tag == 34) {
         parse_AchievementInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievementinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AchievementInfoArr;
        if (input->ExpectTag(40)) goto parse_NowStrongholdId;
        break;
      }

      // optional uint32 NowStrongholdId = 5;
      case 5: {
        if (tag == 40) {
         parse_NowStrongholdId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nowstrongholdid_)));
          set_has_nowstrongholdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightInfo)
  return false;
#undef DO_
}

void TLayerFightInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightInfo)
  // repeated uint32 SquadArr = 1;
  for (int i = 0; i < this->squadarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->squadarr(i), output);
  }

  // repeated .pb.TLayerFightMapInfo MapInfo = 2;
  for (int i = 0; i < this->mapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mapinfo(i), output);
  }

  // optional uint32 UsedChallengeNum = 3;
  if (has_usedchallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usedchallengenum(), output);
  }

  // repeated .pb.TLayerFightAchievementInfo AchievementInfoArr = 4;
  for (int i = 0; i < this->achievementinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->achievementinfoarr(i), output);
  }

  // optional uint32 NowStrongholdId = 5;
  if (has_nowstrongholdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nowstrongholdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightInfo)
}

::google::protobuf::uint8* TLayerFightInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightInfo)
  // repeated uint32 SquadArr = 1;
  for (int i = 0; i < this->squadarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->squadarr(i), target);
  }

  // repeated .pb.TLayerFightMapInfo MapInfo = 2;
  for (int i = 0; i < this->mapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mapinfo(i), target);
  }

  // optional uint32 UsedChallengeNum = 3;
  if (has_usedchallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usedchallengenum(), target);
  }

  // repeated .pb.TLayerFightAchievementInfo AchievementInfoArr = 4;
  for (int i = 0; i < this->achievementinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->achievementinfoarr(i), target);
  }

  // optional uint32 NowStrongholdId = 5;
  if (has_nowstrongholdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nowstrongholdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightInfo)
  return target;
}

int TLayerFightInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 UsedChallengeNum = 3;
    if (has_usedchallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedchallengenum());
    }

    // optional uint32 NowStrongholdId = 5;
    if (has_nowstrongholdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nowstrongholdid());
    }

  }
  // repeated uint32 SquadArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->squadarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->squadarr(i));
    }
    total_size += 1 * this->squadarr_size() + data_size;
  }

  // repeated .pb.TLayerFightMapInfo MapInfo = 2;
  total_size += 1 * this->mapinfo_size();
  for (int i = 0; i < this->mapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapinfo(i));
  }

  // repeated .pb.TLayerFightAchievementInfo AchievementInfoArr = 4;
  total_size += 1 * this->achievementinfoarr_size();
  for (int i = 0; i < this->achievementinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievementinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightInfo::MergeFrom(const TLayerFightInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  squadarr_.MergeFrom(from.squadarr_);
  mapinfo_.MergeFrom(from.mapinfo_);
  achievementinfoarr_.MergeFrom(from.achievementinfoarr_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_usedchallengenum()) {
      set_usedchallengenum(from.usedchallengenum());
    }
    if (from.has_nowstrongholdid()) {
      set_nowstrongholdid(from.nowstrongholdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightInfo::CopyFrom(const TLayerFightInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->mapinfo())) return false;
  return true;
}

void TLayerFightInfo::Swap(TLayerFightInfo* other) {
  if (other != this) {
    squadarr_.Swap(&other->squadarr_);
    mapinfo_.Swap(&other->mapinfo_);
    std::swap(usedchallengenum_, other->usedchallengenum_);
    achievementinfoarr_.Swap(&other->achievementinfoarr_);
    std::swap(nowstrongholdid_, other->nowstrongholdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightInfo_descriptor_;
  metadata.reflection = TLayerFightInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightGetInfoRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

TLayerFightGetInfoRsp::TLayerFightGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightGetInfoRsp)
}

void TLayerFightGetInfoRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::TLayerFightInfo*>(&::pb::TLayerFightInfo::default_instance());
}

TLayerFightGetInfoRsp::TLayerFightGetInfoRsp(const TLayerFightGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightGetInfoRsp)
}

void TLayerFightGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightGetInfoRsp::~TLayerFightGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightGetInfoRsp)
  SharedDtor();
}

void TLayerFightGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void TLayerFightGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightGetInfoRsp_descriptor_;
}

const TLayerFightGetInfoRsp& TLayerFightGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightGetInfoRsp* TLayerFightGetInfoRsp::default_instance_ = NULL;

TLayerFightGetInfoRsp* TLayerFightGetInfoRsp::New() const {
  return new TLayerFightGetInfoRsp;
}

void TLayerFightGetInfoRsp::Clear() {
  if (has_info()) {
    if (info_ != NULL) info_->::pb::TLayerFightInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TLayerFightInfo Info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightGetInfoRsp)
  return false;
#undef DO_
}

void TLayerFightGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightGetInfoRsp)
  // optional .pb.TLayerFightInfo Info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightGetInfoRsp)
}

::google::protobuf::uint8* TLayerFightGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightGetInfoRsp)
  // optional .pb.TLayerFightInfo Info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightGetInfoRsp)
  return target;
}

int TLayerFightGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TLayerFightInfo Info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightGetInfoRsp::MergeFrom(const TLayerFightGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::pb::TLayerFightInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightGetInfoRsp::CopyFrom(const TLayerFightGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightGetInfoRsp::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void TLayerFightGetInfoRsp::Swap(TLayerFightGetInfoRsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightGetInfoRsp_descriptor_;
  metadata.reflection = TLayerFightGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightGetInfoNotify::kUsedChallengeNumFieldNumber;
const int TLayerFightGetInfoNotify::kStrongHoldInfoArrFieldNumber;
const int TLayerFightGetInfoNotify::kAchievementInfoArrFieldNumber;
const int TLayerFightGetInfoNotify::kNowStrongholdIdFieldNumber;
#endif  // !_MSC_VER

TLayerFightGetInfoNotify::TLayerFightGetInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightGetInfoNotify)
}

void TLayerFightGetInfoNotify::InitAsDefaultInstance() {
}

TLayerFightGetInfoNotify::TLayerFightGetInfoNotify(const TLayerFightGetInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightGetInfoNotify)
}

void TLayerFightGetInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  usedchallengenum_ = 0u;
  nowstrongholdid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightGetInfoNotify::~TLayerFightGetInfoNotify() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightGetInfoNotify)
  SharedDtor();
}

void TLayerFightGetInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLayerFightGetInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightGetInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightGetInfoNotify_descriptor_;
}

const TLayerFightGetInfoNotify& TLayerFightGetInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightGetInfoNotify* TLayerFightGetInfoNotify::default_instance_ = NULL;

TLayerFightGetInfoNotify* TLayerFightGetInfoNotify::New() const {
  return new TLayerFightGetInfoNotify;
}

void TLayerFightGetInfoNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLayerFightGetInfoNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(usedchallengenum_, nowstrongholdid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  strongholdinfoarr_.Clear();
  achievementinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightGetInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightGetInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 UsedChallengeNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedchallengenum_)));
          set_has_usedchallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StrongHoldInfoArr;
        break;
      }

      // repeated .pb.TLayerFightStrongholdInfo StrongHoldInfoArr = 2;
      case 2: {
        if (tag == 18) {
         parse_StrongHoldInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strongholdinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StrongHoldInfoArr;
        if (input->ExpectTag(26)) goto parse_AchievementInfoArr;
        break;
      }

      // repeated .pb.TLayerFightAchievementInfo AchievementInfoArr = 3;
      case 3: {
        if (tag == 26) {
         parse_AchievementInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievementinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AchievementInfoArr;
        if (input->ExpectTag(32)) goto parse_NowStrongholdId;
        break;
      }

      // optional uint32 NowStrongholdId = 4;
      case 4: {
        if (tag == 32) {
         parse_NowStrongholdId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nowstrongholdid_)));
          set_has_nowstrongholdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightGetInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightGetInfoNotify)
  return false;
#undef DO_
}

void TLayerFightGetInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightGetInfoNotify)
  // optional uint32 UsedChallengeNum = 1;
  if (has_usedchallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usedchallengenum(), output);
  }

  // repeated .pb.TLayerFightStrongholdInfo StrongHoldInfoArr = 2;
  for (int i = 0; i < this->strongholdinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strongholdinfoarr(i), output);
  }

  // repeated .pb.TLayerFightAchievementInfo AchievementInfoArr = 3;
  for (int i = 0; i < this->achievementinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->achievementinfoarr(i), output);
  }

  // optional uint32 NowStrongholdId = 4;
  if (has_nowstrongholdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nowstrongholdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightGetInfoNotify)
}

::google::protobuf::uint8* TLayerFightGetInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightGetInfoNotify)
  // optional uint32 UsedChallengeNum = 1;
  if (has_usedchallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->usedchallengenum(), target);
  }

  // repeated .pb.TLayerFightStrongholdInfo StrongHoldInfoArr = 2;
  for (int i = 0; i < this->strongholdinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strongholdinfoarr(i), target);
  }

  // repeated .pb.TLayerFightAchievementInfo AchievementInfoArr = 3;
  for (int i = 0; i < this->achievementinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->achievementinfoarr(i), target);
  }

  // optional uint32 NowStrongholdId = 4;
  if (has_nowstrongholdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nowstrongholdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightGetInfoNotify)
  return target;
}

int TLayerFightGetInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 UsedChallengeNum = 1;
    if (has_usedchallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedchallengenum());
    }

    // optional uint32 NowStrongholdId = 4;
    if (has_nowstrongholdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nowstrongholdid());
    }

  }
  // repeated .pb.TLayerFightStrongholdInfo StrongHoldInfoArr = 2;
  total_size += 1 * this->strongholdinfoarr_size();
  for (int i = 0; i < this->strongholdinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strongholdinfoarr(i));
  }

  // repeated .pb.TLayerFightAchievementInfo AchievementInfoArr = 3;
  total_size += 1 * this->achievementinfoarr_size();
  for (int i = 0; i < this->achievementinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievementinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightGetInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightGetInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightGetInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightGetInfoNotify::MergeFrom(const TLayerFightGetInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  strongholdinfoarr_.MergeFrom(from.strongholdinfoarr_);
  achievementinfoarr_.MergeFrom(from.achievementinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usedchallengenum()) {
      set_usedchallengenum(from.usedchallengenum());
    }
    if (from.has_nowstrongholdid()) {
      set_nowstrongholdid(from.nowstrongholdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightGetInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightGetInfoNotify::CopyFrom(const TLayerFightGetInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightGetInfoNotify::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->strongholdinfoarr())) return false;
  return true;
}

void TLayerFightGetInfoNotify::Swap(TLayerFightGetInfoNotify* other) {
  if (other != this) {
    std::swap(usedchallengenum_, other->usedchallengenum_);
    strongholdinfoarr_.Swap(&other->strongholdinfoarr_);
    achievementinfoarr_.Swap(&other->achievementinfoarr_);
    std::swap(nowstrongholdid_, other->nowstrongholdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightGetInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightGetInfoNotify_descriptor_;
  metadata.reflection = TLayerFightGetInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightDoBattleReq::kIDFieldNumber;
const int TLayerFightDoBattleReq::kIsQuickBattleFieldNumber;
#endif  // !_MSC_VER

TLayerFightDoBattleReq::TLayerFightDoBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightDoBattleReq)
}

void TLayerFightDoBattleReq::InitAsDefaultInstance() {
}

TLayerFightDoBattleReq::TLayerFightDoBattleReq(const TLayerFightDoBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightDoBattleReq)
}

void TLayerFightDoBattleReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  isquickbattle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightDoBattleReq::~TLayerFightDoBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightDoBattleReq)
  SharedDtor();
}

void TLayerFightDoBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLayerFightDoBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightDoBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightDoBattleReq_descriptor_;
}

const TLayerFightDoBattleReq& TLayerFightDoBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightDoBattleReq* TLayerFightDoBattleReq::default_instance_ = NULL;

TLayerFightDoBattleReq* TLayerFightDoBattleReq::New() const {
  return new TLayerFightDoBattleReq;
}

void TLayerFightDoBattleReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLayerFightDoBattleReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, isquickbattle_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightDoBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightDoBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsQuickBattle;
        break;
      }

      // optional uint32 IsQuickBattle = 2;
      case 2: {
        if (tag == 16) {
         parse_IsQuickBattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isquickbattle_)));
          set_has_isquickbattle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightDoBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightDoBattleReq)
  return false;
#undef DO_
}

void TLayerFightDoBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightDoBattleReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 IsQuickBattle = 2;
  if (has_isquickbattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isquickbattle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightDoBattleReq)
}

::google::protobuf::uint8* TLayerFightDoBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightDoBattleReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 IsQuickBattle = 2;
  if (has_isquickbattle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isquickbattle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightDoBattleReq)
  return target;
}

int TLayerFightDoBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 IsQuickBattle = 2;
    if (has_isquickbattle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isquickbattle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightDoBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightDoBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightDoBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightDoBattleReq::MergeFrom(const TLayerFightDoBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isquickbattle()) {
      set_isquickbattle(from.isquickbattle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightDoBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightDoBattleReq::CopyFrom(const TLayerFightDoBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightDoBattleReq::IsInitialized() const {

  return true;
}

void TLayerFightDoBattleReq::Swap(TLayerFightDoBattleReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(isquickbattle_, other->isquickbattle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightDoBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightDoBattleReq_descriptor_;
  metadata.reflection = TLayerFightDoBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightDoBattleRsp::kIsWinFieldNumber;
const int TLayerFightDoBattleRsp::kRewardArrFieldNumber;
const int TLayerFightDoBattleRsp::kIsFirstWinFieldNumber;
const int TLayerFightDoBattleRsp::kBattleResultFieldNumber;
#endif  // !_MSC_VER

TLayerFightDoBattleRsp::TLayerFightDoBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightDoBattleRsp)
}

void TLayerFightDoBattleRsp::InitAsDefaultInstance() {
  battleresult_ = const_cast< ::pb::TBattleResult*>(&::pb::TBattleResult::default_instance());
}

TLayerFightDoBattleRsp::TLayerFightDoBattleRsp(const TLayerFightDoBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightDoBattleRsp)
}

void TLayerFightDoBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  iswin_ = 0u;
  isfirstwin_ = 0u;
  battleresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightDoBattleRsp::~TLayerFightDoBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightDoBattleRsp)
  SharedDtor();
}

void TLayerFightDoBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleresult_;
  }
}

void TLayerFightDoBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightDoBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightDoBattleRsp_descriptor_;
}

const TLayerFightDoBattleRsp& TLayerFightDoBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightDoBattleRsp* TLayerFightDoBattleRsp::default_instance_ = NULL;

TLayerFightDoBattleRsp* TLayerFightDoBattleRsp::New() const {
  return new TLayerFightDoBattleRsp;
}

void TLayerFightDoBattleRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLayerFightDoBattleRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(iswin_, isfirstwin_);
    if (has_battleresult()) {
      if (battleresult_ != NULL) battleresult_->::pb::TBattleResult::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightDoBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightDoBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IsWin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        if (input->ExpectTag(24)) goto parse_IsFirstWin;
        break;
      }

      // optional uint32 IsFirstWin = 3;
      case 3: {
        if (tag == 24) {
         parse_IsFirstWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfirstwin_)));
          set_has_isfirstwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BattleResult;
        break;
      }

      // optional .pb.TBattleResult BattleResult = 4;
      case 4: {
        if (tag == 34) {
         parse_BattleResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightDoBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightDoBattleRsp)
  return false;
#undef DO_
}

void TLayerFightDoBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightDoBattleRsp)
  // optional uint32 IsWin = 1;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->iswin(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarr(i), output);
  }

  // optional uint32 IsFirstWin = 3;
  if (has_isfirstwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isfirstwin(), output);
  }

  // optional .pb.TBattleResult BattleResult = 4;
  if (has_battleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->battleresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightDoBattleRsp)
}

::google::protobuf::uint8* TLayerFightDoBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightDoBattleRsp)
  // optional uint32 IsWin = 1;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->iswin(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarr(i), target);
  }

  // optional uint32 IsFirstWin = 3;
  if (has_isfirstwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->isfirstwin(), target);
  }

  // optional .pb.TBattleResult BattleResult = 4;
  if (has_battleresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->battleresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightDoBattleRsp)
  return target;
}

int TLayerFightDoBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IsWin = 1;
    if (has_iswin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iswin());
    }

    // optional uint32 IsFirstWin = 3;
    if (has_isfirstwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfirstwin());
    }

    // optional .pb.TBattleResult BattleResult = 4;
    if (has_battleresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleresult());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 2;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightDoBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightDoBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightDoBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightDoBattleRsp::MergeFrom(const TLayerFightDoBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_isfirstwin()) {
      set_isfirstwin(from.isfirstwin());
    }
    if (from.has_battleresult()) {
      mutable_battleresult()->::pb::TBattleResult::MergeFrom(from.battleresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightDoBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightDoBattleRsp::CopyFrom(const TLayerFightDoBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightDoBattleRsp::IsInitialized() const {

  if (has_battleresult()) {
    if (!this->battleresult().IsInitialized()) return false;
  }
  return true;
}

void TLayerFightDoBattleRsp::Swap(TLayerFightDoBattleRsp* other) {
  if (other != this) {
    std::swap(iswin_, other->iswin_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(isfirstwin_, other->isfirstwin_);
    std::swap(battleresult_, other->battleresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightDoBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightDoBattleRsp_descriptor_;
  metadata.reflection = TLayerFightDoBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightGetAchievementRewardReq::kIDFieldNumber;
#endif  // !_MSC_VER

TLayerFightGetAchievementRewardReq::TLayerFightGetAchievementRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightGetAchievementRewardReq)
}

void TLayerFightGetAchievementRewardReq::InitAsDefaultInstance() {
}

TLayerFightGetAchievementRewardReq::TLayerFightGetAchievementRewardReq(const TLayerFightGetAchievementRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightGetAchievementRewardReq)
}

void TLayerFightGetAchievementRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightGetAchievementRewardReq::~TLayerFightGetAchievementRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightGetAchievementRewardReq)
  SharedDtor();
}

void TLayerFightGetAchievementRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLayerFightGetAchievementRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightGetAchievementRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightGetAchievementRewardReq_descriptor_;
}

const TLayerFightGetAchievementRewardReq& TLayerFightGetAchievementRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightGetAchievementRewardReq* TLayerFightGetAchievementRewardReq::default_instance_ = NULL;

TLayerFightGetAchievementRewardReq* TLayerFightGetAchievementRewardReq::New() const {
  return new TLayerFightGetAchievementRewardReq;
}

void TLayerFightGetAchievementRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightGetAchievementRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightGetAchievementRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightGetAchievementRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightGetAchievementRewardReq)
  return false;
#undef DO_
}

void TLayerFightGetAchievementRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightGetAchievementRewardReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightGetAchievementRewardReq)
}

::google::protobuf::uint8* TLayerFightGetAchievementRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightGetAchievementRewardReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightGetAchievementRewardReq)
  return target;
}

int TLayerFightGetAchievementRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightGetAchievementRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightGetAchievementRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightGetAchievementRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightGetAchievementRewardReq::MergeFrom(const TLayerFightGetAchievementRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightGetAchievementRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightGetAchievementRewardReq::CopyFrom(const TLayerFightGetAchievementRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightGetAchievementRewardReq::IsInitialized() const {

  return true;
}

void TLayerFightGetAchievementRewardReq::Swap(TLayerFightGetAchievementRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightGetAchievementRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightGetAchievementRewardReq_descriptor_;
  metadata.reflection = TLayerFightGetAchievementRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightGetAchievementRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TLayerFightGetAchievementRewardRsp::TLayerFightGetAchievementRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightGetAchievementRewardRsp)
}

void TLayerFightGetAchievementRewardRsp::InitAsDefaultInstance() {
}

TLayerFightGetAchievementRewardRsp::TLayerFightGetAchievementRewardRsp(const TLayerFightGetAchievementRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightGetAchievementRewardRsp)
}

void TLayerFightGetAchievementRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightGetAchievementRewardRsp::~TLayerFightGetAchievementRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightGetAchievementRewardRsp)
  SharedDtor();
}

void TLayerFightGetAchievementRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLayerFightGetAchievementRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightGetAchievementRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightGetAchievementRewardRsp_descriptor_;
}

const TLayerFightGetAchievementRewardRsp& TLayerFightGetAchievementRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightGetAchievementRewardRsp* TLayerFightGetAchievementRewardRsp::default_instance_ = NULL;

TLayerFightGetAchievementRewardRsp* TLayerFightGetAchievementRewardRsp::New() const {
  return new TLayerFightGetAchievementRewardRsp;
}

void TLayerFightGetAchievementRewardRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightGetAchievementRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightGetAchievementRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightGetAchievementRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightGetAchievementRewardRsp)
  return false;
#undef DO_
}

void TLayerFightGetAchievementRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightGetAchievementRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightGetAchievementRewardRsp)
}

::google::protobuf::uint8* TLayerFightGetAchievementRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightGetAchievementRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightGetAchievementRewardRsp)
  return target;
}

int TLayerFightGetAchievementRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightGetAchievementRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightGetAchievementRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightGetAchievementRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightGetAchievementRewardRsp::MergeFrom(const TLayerFightGetAchievementRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightGetAchievementRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightGetAchievementRewardRsp::CopyFrom(const TLayerFightGetAchievementRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightGetAchievementRewardRsp::IsInitialized() const {

  return true;
}

void TLayerFightGetAchievementRewardRsp::Swap(TLayerFightGetAchievementRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightGetAchievementRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightGetAchievementRewardRsp_descriptor_;
  metadata.reflection = TLayerFightGetAchievementRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightSetSquadReq::kSquadFieldNumber;
#endif  // !_MSC_VER

TLayerFightSetSquadReq::TLayerFightSetSquadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightSetSquadReq)
}

void TLayerFightSetSquadReq::InitAsDefaultInstance() {
}

TLayerFightSetSquadReq::TLayerFightSetSquadReq(const TLayerFightSetSquadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightSetSquadReq)
}

void TLayerFightSetSquadReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightSetSquadReq::~TLayerFightSetSquadReq() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightSetSquadReq)
  SharedDtor();
}

void TLayerFightSetSquadReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLayerFightSetSquadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightSetSquadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightSetSquadReq_descriptor_;
}

const TLayerFightSetSquadReq& TLayerFightSetSquadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightSetSquadReq* TLayerFightSetSquadReq::default_instance_ = NULL;

TLayerFightSetSquadReq* TLayerFightSetSquadReq::New() const {
  return new TLayerFightSetSquadReq;
}

void TLayerFightSetSquadReq::Clear() {
  squad_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightSetSquadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightSetSquadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 Squad = 1;
      case 1: {
        if (tag == 8) {
         parse_Squad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_squad())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_squad())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_Squad;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightSetSquadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightSetSquadReq)
  return false;
#undef DO_
}

void TLayerFightSetSquadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightSetSquadReq)
  // repeated uint32 Squad = 1;
  for (int i = 0; i < this->squad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->squad(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightSetSquadReq)
}

::google::protobuf::uint8* TLayerFightSetSquadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightSetSquadReq)
  // repeated uint32 Squad = 1;
  for (int i = 0; i < this->squad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->squad(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightSetSquadReq)
  return target;
}

int TLayerFightSetSquadReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 Squad = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->squad_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->squad(i));
    }
    total_size += 1 * this->squad_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightSetSquadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightSetSquadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightSetSquadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightSetSquadReq::MergeFrom(const TLayerFightSetSquadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  squad_.MergeFrom(from.squad_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightSetSquadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightSetSquadReq::CopyFrom(const TLayerFightSetSquadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightSetSquadReq::IsInitialized() const {

  return true;
}

void TLayerFightSetSquadReq::Swap(TLayerFightSetSquadReq* other) {
  if (other != this) {
    squad_.Swap(&other->squad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightSetSquadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightSetSquadReq_descriptor_;
  metadata.reflection = TLayerFightSetSquadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightQuickPassReq::kIDFieldNumber;
const int TLayerFightQuickPassReq::kAttackNumsFieldNumber;
#endif  // !_MSC_VER

TLayerFightQuickPassReq::TLayerFightQuickPassReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightQuickPassReq)
}

void TLayerFightQuickPassReq::InitAsDefaultInstance() {
}

TLayerFightQuickPassReq::TLayerFightQuickPassReq(const TLayerFightQuickPassReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightQuickPassReq)
}

void TLayerFightQuickPassReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  attacknums_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightQuickPassReq::~TLayerFightQuickPassReq() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightQuickPassReq)
  SharedDtor();
}

void TLayerFightQuickPassReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLayerFightQuickPassReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightQuickPassReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightQuickPassReq_descriptor_;
}

const TLayerFightQuickPassReq& TLayerFightQuickPassReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightQuickPassReq* TLayerFightQuickPassReq::default_instance_ = NULL;

TLayerFightQuickPassReq* TLayerFightQuickPassReq::New() const {
  return new TLayerFightQuickPassReq;
}

void TLayerFightQuickPassReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLayerFightQuickPassReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, attacknums_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightQuickPassReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightQuickPassReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AttackNums;
        break;
      }

      // optional uint32 AttackNums = 2;
      case 2: {
        if (tag == 16) {
         parse_AttackNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacknums_)));
          set_has_attacknums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightQuickPassReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightQuickPassReq)
  return false;
#undef DO_
}

void TLayerFightQuickPassReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightQuickPassReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 AttackNums = 2;
  if (has_attacknums()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attacknums(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightQuickPassReq)
}

::google::protobuf::uint8* TLayerFightQuickPassReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightQuickPassReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 AttackNums = 2;
  if (has_attacknums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attacknums(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightQuickPassReq)
  return target;
}

int TLayerFightQuickPassReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 AttackNums = 2;
    if (has_attacknums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacknums());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightQuickPassReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightQuickPassReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightQuickPassReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightQuickPassReq::MergeFrom(const TLayerFightQuickPassReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_attacknums()) {
      set_attacknums(from.attacknums());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightQuickPassReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightQuickPassReq::CopyFrom(const TLayerFightQuickPassReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightQuickPassReq::IsInitialized() const {

  return true;
}

void TLayerFightQuickPassReq::Swap(TLayerFightQuickPassReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(attacknums_, other->attacknums_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightQuickPassReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightQuickPassReq_descriptor_;
  metadata.reflection = TLayerFightQuickPassReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightQuickPassRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TLayerFightQuickPassRsp::TLayerFightQuickPassRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightQuickPassRsp)
}

void TLayerFightQuickPassRsp::InitAsDefaultInstance() {
}

TLayerFightQuickPassRsp::TLayerFightQuickPassRsp(const TLayerFightQuickPassRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightQuickPassRsp)
}

void TLayerFightQuickPassRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightQuickPassRsp::~TLayerFightQuickPassRsp() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightQuickPassRsp)
  SharedDtor();
}

void TLayerFightQuickPassRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLayerFightQuickPassRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightQuickPassRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightQuickPassRsp_descriptor_;
}

const TLayerFightQuickPassRsp& TLayerFightQuickPassRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightQuickPassRsp* TLayerFightQuickPassRsp::default_instance_ = NULL;

TLayerFightQuickPassRsp* TLayerFightQuickPassRsp::New() const {
  return new TLayerFightQuickPassRsp;
}

void TLayerFightQuickPassRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightQuickPassRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightQuickPassRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightQuickPassRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightQuickPassRsp)
  return false;
#undef DO_
}

void TLayerFightQuickPassRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightQuickPassRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightQuickPassRsp)
}

::google::protobuf::uint8* TLayerFightQuickPassRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightQuickPassRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightQuickPassRsp)
  return target;
}

int TLayerFightQuickPassRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightQuickPassRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightQuickPassRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightQuickPassRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightQuickPassRsp::MergeFrom(const TLayerFightQuickPassRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightQuickPassRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightQuickPassRsp::CopyFrom(const TLayerFightQuickPassRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightQuickPassRsp::IsInitialized() const {

  return true;
}

void TLayerFightQuickPassRsp::Swap(TLayerFightQuickPassRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightQuickPassRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightQuickPassRsp_descriptor_;
  metadata.reflection = TLayerFightQuickPassRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightGetMapInfoReq::kMapIDFieldNumber;
#endif  // !_MSC_VER

TLayerFightGetMapInfoReq::TLayerFightGetMapInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightGetMapInfoReq)
}

void TLayerFightGetMapInfoReq::InitAsDefaultInstance() {
}

TLayerFightGetMapInfoReq::TLayerFightGetMapInfoReq(const TLayerFightGetMapInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightGetMapInfoReq)
}

void TLayerFightGetMapInfoReq::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightGetMapInfoReq::~TLayerFightGetMapInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightGetMapInfoReq)
  SharedDtor();
}

void TLayerFightGetMapInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLayerFightGetMapInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightGetMapInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightGetMapInfoReq_descriptor_;
}

const TLayerFightGetMapInfoReq& TLayerFightGetMapInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightGetMapInfoReq* TLayerFightGetMapInfoReq::default_instance_ = NULL;

TLayerFightGetMapInfoReq* TLayerFightGetMapInfoReq::New() const {
  return new TLayerFightGetMapInfoReq;
}

void TLayerFightGetMapInfoReq::Clear() {
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightGetMapInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightGetMapInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MapID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightGetMapInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightGetMapInfoReq)
  return false;
#undef DO_
}

void TLayerFightGetMapInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightGetMapInfoReq)
  // optional uint32 MapID = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightGetMapInfoReq)
}

::google::protobuf::uint8* TLayerFightGetMapInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightGetMapInfoReq)
  // optional uint32 MapID = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightGetMapInfoReq)
  return target;
}

int TLayerFightGetMapInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightGetMapInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightGetMapInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightGetMapInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightGetMapInfoReq::MergeFrom(const TLayerFightGetMapInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightGetMapInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightGetMapInfoReq::CopyFrom(const TLayerFightGetMapInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightGetMapInfoReq::IsInitialized() const {

  return true;
}

void TLayerFightGetMapInfoReq::Swap(TLayerFightGetMapInfoReq* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightGetMapInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightGetMapInfoReq_descriptor_;
  metadata.reflection = TLayerFightGetMapInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightGetMapInfoRsp::kMapInfoFieldNumber;
#endif  // !_MSC_VER

TLayerFightGetMapInfoRsp::TLayerFightGetMapInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightGetMapInfoRsp)
}

void TLayerFightGetMapInfoRsp::InitAsDefaultInstance() {
  mapinfo_ = const_cast< ::pb::TLayerFightMapInfo*>(&::pb::TLayerFightMapInfo::default_instance());
}

TLayerFightGetMapInfoRsp::TLayerFightGetMapInfoRsp(const TLayerFightGetMapInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightGetMapInfoRsp)
}

void TLayerFightGetMapInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  mapinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightGetMapInfoRsp::~TLayerFightGetMapInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightGetMapInfoRsp)
  SharedDtor();
}

void TLayerFightGetMapInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete mapinfo_;
  }
}

void TLayerFightGetMapInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightGetMapInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightGetMapInfoRsp_descriptor_;
}

const TLayerFightGetMapInfoRsp& TLayerFightGetMapInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightGetMapInfoRsp* TLayerFightGetMapInfoRsp::default_instance_ = NULL;

TLayerFightGetMapInfoRsp* TLayerFightGetMapInfoRsp::New() const {
  return new TLayerFightGetMapInfoRsp;
}

void TLayerFightGetMapInfoRsp::Clear() {
  if (has_mapinfo()) {
    if (mapinfo_ != NULL) mapinfo_->::pb::TLayerFightMapInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightGetMapInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightGetMapInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TLayerFightMapInfo MapInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightGetMapInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightGetMapInfoRsp)
  return false;
#undef DO_
}

void TLayerFightGetMapInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightGetMapInfoRsp)
  // optional .pb.TLayerFightMapInfo MapInfo = 1;
  if (has_mapinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightGetMapInfoRsp)
}

::google::protobuf::uint8* TLayerFightGetMapInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightGetMapInfoRsp)
  // optional .pb.TLayerFightMapInfo MapInfo = 1;
  if (has_mapinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightGetMapInfoRsp)
  return target;
}

int TLayerFightGetMapInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TLayerFightMapInfo MapInfo = 1;
    if (has_mapinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightGetMapInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightGetMapInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightGetMapInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightGetMapInfoRsp::MergeFrom(const TLayerFightGetMapInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapinfo()) {
      mutable_mapinfo()->::pb::TLayerFightMapInfo::MergeFrom(from.mapinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightGetMapInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightGetMapInfoRsp::CopyFrom(const TLayerFightGetMapInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightGetMapInfoRsp::IsInitialized() const {

  if (has_mapinfo()) {
    if (!this->mapinfo().IsInitialized()) return false;
  }
  return true;
}

void TLayerFightGetMapInfoRsp::Swap(TLayerFightGetMapInfoRsp* other) {
  if (other != this) {
    std::swap(mapinfo_, other->mapinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightGetMapInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightGetMapInfoRsp_descriptor_;
  metadata.reflection = TLayerFightGetMapInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightGetSquadArrInfoRsp::kHtidArrFieldNumber;
#endif  // !_MSC_VER

TLayerFightGetSquadArrInfoRsp::TLayerFightGetSquadArrInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightGetSquadArrInfoRsp)
}

void TLayerFightGetSquadArrInfoRsp::InitAsDefaultInstance() {
}

TLayerFightGetSquadArrInfoRsp::TLayerFightGetSquadArrInfoRsp(const TLayerFightGetSquadArrInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightGetSquadArrInfoRsp)
}

void TLayerFightGetSquadArrInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightGetSquadArrInfoRsp::~TLayerFightGetSquadArrInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightGetSquadArrInfoRsp)
  SharedDtor();
}

void TLayerFightGetSquadArrInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLayerFightGetSquadArrInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightGetSquadArrInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightGetSquadArrInfoRsp_descriptor_;
}

const TLayerFightGetSquadArrInfoRsp& TLayerFightGetSquadArrInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightGetSquadArrInfoRsp* TLayerFightGetSquadArrInfoRsp::default_instance_ = NULL;

TLayerFightGetSquadArrInfoRsp* TLayerFightGetSquadArrInfoRsp::New() const {
  return new TLayerFightGetSquadArrInfoRsp;
}

void TLayerFightGetSquadArrInfoRsp::Clear() {
  htidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightGetSquadArrInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightGetSquadArrInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 HtidArr = 1;
      case 1: {
        if (tag == 8) {
         parse_HtidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_htidarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_htidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_HtidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightGetSquadArrInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightGetSquadArrInfoRsp)
  return false;
#undef DO_
}

void TLayerFightGetSquadArrInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightGetSquadArrInfoRsp)
  // repeated uint32 HtidArr = 1;
  for (int i = 0; i < this->htidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->htidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightGetSquadArrInfoRsp)
}

::google::protobuf::uint8* TLayerFightGetSquadArrInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightGetSquadArrInfoRsp)
  // repeated uint32 HtidArr = 1;
  for (int i = 0; i < this->htidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->htidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightGetSquadArrInfoRsp)
  return target;
}

int TLayerFightGetSquadArrInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 HtidArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->htidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->htidarr(i));
    }
    total_size += 1 * this->htidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightGetSquadArrInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightGetSquadArrInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightGetSquadArrInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightGetSquadArrInfoRsp::MergeFrom(const TLayerFightGetSquadArrInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  htidarr_.MergeFrom(from.htidarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightGetSquadArrInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightGetSquadArrInfoRsp::CopyFrom(const TLayerFightGetSquadArrInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightGetSquadArrInfoRsp::IsInitialized() const {

  return true;
}

void TLayerFightGetSquadArrInfoRsp::Swap(TLayerFightGetSquadArrInfoRsp* other) {
  if (other != this) {
    htidarr_.Swap(&other->htidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightGetSquadArrInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightGetSquadArrInfoRsp_descriptor_;
  metadata.reflection = TLayerFightGetSquadArrInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightGetStrongHoldInfoReq::kStrongHoldIdFieldNumber;
#endif  // !_MSC_VER

TLayerFightGetStrongHoldInfoReq::TLayerFightGetStrongHoldInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightGetStrongHoldInfoReq)
}

void TLayerFightGetStrongHoldInfoReq::InitAsDefaultInstance() {
}

TLayerFightGetStrongHoldInfoReq::TLayerFightGetStrongHoldInfoReq(const TLayerFightGetStrongHoldInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightGetStrongHoldInfoReq)
}

void TLayerFightGetStrongHoldInfoReq::SharedCtor() {
  _cached_size_ = 0;
  strongholdid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightGetStrongHoldInfoReq::~TLayerFightGetStrongHoldInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightGetStrongHoldInfoReq)
  SharedDtor();
}

void TLayerFightGetStrongHoldInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLayerFightGetStrongHoldInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightGetStrongHoldInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightGetStrongHoldInfoReq_descriptor_;
}

const TLayerFightGetStrongHoldInfoReq& TLayerFightGetStrongHoldInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightGetStrongHoldInfoReq* TLayerFightGetStrongHoldInfoReq::default_instance_ = NULL;

TLayerFightGetStrongHoldInfoReq* TLayerFightGetStrongHoldInfoReq::New() const {
  return new TLayerFightGetStrongHoldInfoReq;
}

void TLayerFightGetStrongHoldInfoReq::Clear() {
  strongholdid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightGetStrongHoldInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightGetStrongHoldInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 StrongHoldId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strongholdid_)));
          set_has_strongholdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightGetStrongHoldInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightGetStrongHoldInfoReq)
  return false;
#undef DO_
}

void TLayerFightGetStrongHoldInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightGetStrongHoldInfoReq)
  // optional uint32 StrongHoldId = 1;
  if (has_strongholdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->strongholdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightGetStrongHoldInfoReq)
}

::google::protobuf::uint8* TLayerFightGetStrongHoldInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightGetStrongHoldInfoReq)
  // optional uint32 StrongHoldId = 1;
  if (has_strongholdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->strongholdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightGetStrongHoldInfoReq)
  return target;
}

int TLayerFightGetStrongHoldInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StrongHoldId = 1;
    if (has_strongholdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strongholdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightGetStrongHoldInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightGetStrongHoldInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightGetStrongHoldInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightGetStrongHoldInfoReq::MergeFrom(const TLayerFightGetStrongHoldInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strongholdid()) {
      set_strongholdid(from.strongholdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightGetStrongHoldInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightGetStrongHoldInfoReq::CopyFrom(const TLayerFightGetStrongHoldInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightGetStrongHoldInfoReq::IsInitialized() const {

  return true;
}

void TLayerFightGetStrongHoldInfoReq::Swap(TLayerFightGetStrongHoldInfoReq* other) {
  if (other != this) {
    std::swap(strongholdid_, other->strongholdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightGetStrongHoldInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightGetStrongHoldInfoReq_descriptor_;
  metadata.reflection = TLayerFightGetStrongHoldInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLayerFightGetStrongHoldInfoRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

TLayerFightGetStrongHoldInfoRsp::TLayerFightGetStrongHoldInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLayerFightGetStrongHoldInfoRsp)
}

void TLayerFightGetStrongHoldInfoRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::pb::TMirrorInfo*>(&::pb::TMirrorInfo::default_instance());
}

TLayerFightGetStrongHoldInfoRsp::TLayerFightGetStrongHoldInfoRsp(const TLayerFightGetStrongHoldInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLayerFightGetStrongHoldInfoRsp)
}

void TLayerFightGetStrongHoldInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLayerFightGetStrongHoldInfoRsp::~TLayerFightGetStrongHoldInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TLayerFightGetStrongHoldInfoRsp)
  SharedDtor();
}

void TLayerFightGetStrongHoldInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void TLayerFightGetStrongHoldInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLayerFightGetStrongHoldInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLayerFightGetStrongHoldInfoRsp_descriptor_;
}

const TLayerFightGetStrongHoldInfoRsp& TLayerFightGetStrongHoldInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLayerFight_2eproto();
  return *default_instance_;
}

TLayerFightGetStrongHoldInfoRsp* TLayerFightGetStrongHoldInfoRsp::default_instance_ = NULL;

TLayerFightGetStrongHoldInfoRsp* TLayerFightGetStrongHoldInfoRsp::New() const {
  return new TLayerFightGetStrongHoldInfoRsp;
}

void TLayerFightGetStrongHoldInfoRsp::Clear() {
  if (has_info()) {
    if (info_ != NULL) info_->::pb::TMirrorInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLayerFightGetStrongHoldInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLayerFightGetStrongHoldInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TMirrorInfo Info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLayerFightGetStrongHoldInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLayerFightGetStrongHoldInfoRsp)
  return false;
#undef DO_
}

void TLayerFightGetStrongHoldInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLayerFightGetStrongHoldInfoRsp)
  // optional .pb.TMirrorInfo Info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLayerFightGetStrongHoldInfoRsp)
}

::google::protobuf::uint8* TLayerFightGetStrongHoldInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLayerFightGetStrongHoldInfoRsp)
  // optional .pb.TMirrorInfo Info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLayerFightGetStrongHoldInfoRsp)
  return target;
}

int TLayerFightGetStrongHoldInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TMirrorInfo Info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLayerFightGetStrongHoldInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLayerFightGetStrongHoldInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLayerFightGetStrongHoldInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLayerFightGetStrongHoldInfoRsp::MergeFrom(const TLayerFightGetStrongHoldInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::pb::TMirrorInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLayerFightGetStrongHoldInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLayerFightGetStrongHoldInfoRsp::CopyFrom(const TLayerFightGetStrongHoldInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLayerFightGetStrongHoldInfoRsp::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void TLayerFightGetStrongHoldInfoRsp::Swap(TLayerFightGetStrongHoldInfoRsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLayerFightGetStrongHoldInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLayerFightGetStrongHoldInfoRsp_descriptor_;
  metadata.reflection = TLayerFightGetStrongHoldInfoRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
