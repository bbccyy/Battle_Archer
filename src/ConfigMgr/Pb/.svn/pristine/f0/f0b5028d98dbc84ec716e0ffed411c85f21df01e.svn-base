// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/MessageBoard.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/MessageBoard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TMessageBoardSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMessageBoardSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMessageBoardGetHotInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMessageBoardGetHotInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMessageBoardGetHotInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMessageBoardGetHotInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMessageBoardGetCurrentInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMessageBoardGetCurrentInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMessageBoardGetCurrentInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMessageBoardGetCurrentInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMessageBoardGetMyUncheckReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMessageBoardGetMyUncheckReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMessageBoardGetMyUncheckRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMessageBoardGetMyUncheckRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMessageBoardSendMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMessageBoardSendMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMessageBoardSendMessageRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMessageBoardSendMessageRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMessageBoardDeleteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMessageBoardDeleteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMessageBoardLikeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMessageBoardLikeReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EAudit_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fMessageBoard_2eproto() {
  protobuf_AddDesc_net_2fMessageBoard_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/MessageBoard.proto");
  GOOGLE_CHECK(file != NULL);
  TMessageBoardSingle_descriptor_ = file->message_type(0);
  static const int TMessageBoardSingle_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSingle, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSingle, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSingle, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSingle, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSingle, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSingle, alllikenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSingle, haslike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSingle, createtime_),
  };
  TMessageBoardSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMessageBoardSingle_descriptor_,
      TMessageBoardSingle::default_instance_,
      TMessageBoardSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMessageBoardSingle));
  TMessageBoardGetHotInfoReq_descriptor_ = file->message_type(1);
  static const int TMessageBoardGetHotInfoReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetHotInfoReq, scenetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetHotInfoReq, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetHotInfoReq, pageidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetHotInfoReq, pagesize_),
  };
  TMessageBoardGetHotInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMessageBoardGetHotInfoReq_descriptor_,
      TMessageBoardGetHotInfoReq::default_instance_,
      TMessageBoardGetHotInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetHotInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetHotInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMessageBoardGetHotInfoReq));
  TMessageBoardGetHotInfoRsp_descriptor_ = file->message_type(2);
  static const int TMessageBoardGetHotInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetHotInfoRsp, hotarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetHotInfoRsp, version_),
  };
  TMessageBoardGetHotInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMessageBoardGetHotInfoRsp_descriptor_,
      TMessageBoardGetHotInfoRsp::default_instance_,
      TMessageBoardGetHotInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetHotInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetHotInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMessageBoardGetHotInfoRsp));
  TMessageBoardGetCurrentInfoReq_descriptor_ = file->message_type(3);
  static const int TMessageBoardGetCurrentInfoReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetCurrentInfoReq, scenetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetCurrentInfoReq, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetCurrentInfoReq, pageidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetCurrentInfoReq, pagesize_),
  };
  TMessageBoardGetCurrentInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMessageBoardGetCurrentInfoReq_descriptor_,
      TMessageBoardGetCurrentInfoReq::default_instance_,
      TMessageBoardGetCurrentInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetCurrentInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetCurrentInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMessageBoardGetCurrentInfoReq));
  TMessageBoardGetCurrentInfoRsp_descriptor_ = file->message_type(4);
  static const int TMessageBoardGetCurrentInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetCurrentInfoRsp, currentarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetCurrentInfoRsp, version_),
  };
  TMessageBoardGetCurrentInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMessageBoardGetCurrentInfoRsp_descriptor_,
      TMessageBoardGetCurrentInfoRsp::default_instance_,
      TMessageBoardGetCurrentInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetCurrentInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetCurrentInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMessageBoardGetCurrentInfoRsp));
  TMessageBoardGetMyUncheckReq_descriptor_ = file->message_type(5);
  static const int TMessageBoardGetMyUncheckReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetMyUncheckReq, scenetid_),
  };
  TMessageBoardGetMyUncheckReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMessageBoardGetMyUncheckReq_descriptor_,
      TMessageBoardGetMyUncheckReq::default_instance_,
      TMessageBoardGetMyUncheckReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetMyUncheckReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetMyUncheckReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMessageBoardGetMyUncheckReq));
  TMessageBoardGetMyUncheckRsp_descriptor_ = file->message_type(6);
  static const int TMessageBoardGetMyUncheckRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetMyUncheckRsp, uncheckarr_),
  };
  TMessageBoardGetMyUncheckRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMessageBoardGetMyUncheckRsp_descriptor_,
      TMessageBoardGetMyUncheckRsp::default_instance_,
      TMessageBoardGetMyUncheckRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetMyUncheckRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardGetMyUncheckRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMessageBoardGetMyUncheckRsp));
  TMessageBoardSendMessageReq_descriptor_ = file->message_type(7);
  static const int TMessageBoardSendMessageReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSendMessageReq, scenetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSendMessageReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSendMessageReq, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSendMessageReq, xpid_),
  };
  TMessageBoardSendMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMessageBoardSendMessageReq_descriptor_,
      TMessageBoardSendMessageReq::default_instance_,
      TMessageBoardSendMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSendMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSendMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMessageBoardSendMessageReq));
  TMessageBoardSendMessageRsp_descriptor_ = file->message_type(8);
  static const int TMessageBoardSendMessageRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSendMessageRsp, msginfo_),
  };
  TMessageBoardSendMessageRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMessageBoardSendMessageRsp_descriptor_,
      TMessageBoardSendMessageRsp::default_instance_,
      TMessageBoardSendMessageRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSendMessageRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardSendMessageRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMessageBoardSendMessageRsp));
  TMessageBoardDeleteReq_descriptor_ = file->message_type(9);
  static const int TMessageBoardDeleteReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardDeleteReq, scenetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardDeleteReq, mid_),
  };
  TMessageBoardDeleteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMessageBoardDeleteReq_descriptor_,
      TMessageBoardDeleteReq::default_instance_,
      TMessageBoardDeleteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardDeleteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardDeleteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMessageBoardDeleteReq));
  TMessageBoardLikeReq_descriptor_ = file->message_type(10);
  static const int TMessageBoardLikeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardLikeReq, scenetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardLikeReq, mid_),
  };
  TMessageBoardLikeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMessageBoardLikeReq_descriptor_,
      TMessageBoardLikeReq::default_instance_,
      TMessageBoardLikeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardLikeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMessageBoardLikeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMessageBoardLikeReq));
  EAudit_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fMessageBoard_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMessageBoardSingle_descriptor_, &TMessageBoardSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMessageBoardGetHotInfoReq_descriptor_, &TMessageBoardGetHotInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMessageBoardGetHotInfoRsp_descriptor_, &TMessageBoardGetHotInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMessageBoardGetCurrentInfoReq_descriptor_, &TMessageBoardGetCurrentInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMessageBoardGetCurrentInfoRsp_descriptor_, &TMessageBoardGetCurrentInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMessageBoardGetMyUncheckReq_descriptor_, &TMessageBoardGetMyUncheckReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMessageBoardGetMyUncheckRsp_descriptor_, &TMessageBoardGetMyUncheckRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMessageBoardSendMessageReq_descriptor_, &TMessageBoardSendMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMessageBoardSendMessageRsp_descriptor_, &TMessageBoardSendMessageRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMessageBoardDeleteReq_descriptor_, &TMessageBoardDeleteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMessageBoardLikeReq_descriptor_, &TMessageBoardLikeReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fMessageBoard_2eproto() {
  delete TMessageBoardSingle::default_instance_;
  delete TMessageBoardSingle_reflection_;
  delete TMessageBoardGetHotInfoReq::default_instance_;
  delete TMessageBoardGetHotInfoReq_reflection_;
  delete TMessageBoardGetHotInfoRsp::default_instance_;
  delete TMessageBoardGetHotInfoRsp_reflection_;
  delete TMessageBoardGetCurrentInfoReq::default_instance_;
  delete TMessageBoardGetCurrentInfoReq_reflection_;
  delete TMessageBoardGetCurrentInfoRsp::default_instance_;
  delete TMessageBoardGetCurrentInfoRsp_reflection_;
  delete TMessageBoardGetMyUncheckReq::default_instance_;
  delete TMessageBoardGetMyUncheckReq_reflection_;
  delete TMessageBoardGetMyUncheckRsp::default_instance_;
  delete TMessageBoardGetMyUncheckRsp_reflection_;
  delete TMessageBoardSendMessageReq::default_instance_;
  delete TMessageBoardSendMessageReq_reflection_;
  delete TMessageBoardSendMessageRsp::default_instance_;
  delete TMessageBoardSendMessageRsp_reflection_;
  delete TMessageBoardDeleteReq::default_instance_;
  delete TMessageBoardDeleteReq_reflection_;
  delete TMessageBoardLikeReq::default_instance_;
  delete TMessageBoardLikeReq_reflection_;
}

void protobuf_AddDesc_net_2fMessageBoard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026net/MessageBoard.proto\022\002pb\032\016net/User.p"
    "roto\"\262\001\n\023TMessageBoardSingle\022\013\n\003Mid\030\001 \001("
    "\004\022\013\n\003Uid\030\002 \001(\004\022\017\n\007Content\030\003 \001(\t\022%\n\010UserI"
    "nfo\030\004 \001(\0132\023.pb.TUserSimpleInfo\022\020\n\010Server"
    "Id\030\005 \001(\t\022\022\n\nAllLikeNum\030\006 \001(\r\022\017\n\007HasLike\030"
    "\007 \001(\r\022\022\n\nCreateTime\030\010 \001(\004\"b\n\032TMessageBoa"
    "rdGetHotInfoReq\022\020\n\010SceneTid\030\001 \001(\r\022\017\n\007Ver"
    "sion\030\002 \001(\r\022\017\n\007PageIdx\030\003 \001(\r\022\020\n\010PageSize\030"
    "\004 \001(\r\"V\n\032TMessageBoardGetHotInfoRsp\022\'\n\006H"
    "otArr\030\001 \003(\0132\027.pb.TMessageBoardSingle\022\017\n\007"
    "Version\030\002 \001(\r\"f\n\036TMessageBoardGetCurrent"
    "InfoReq\022\020\n\010SceneTid\030\001 \001(\r\022\017\n\007Version\030\002 \001"
    "(\r\022\017\n\007PageIdx\030\003 \001(\r\022\020\n\010PageSize\030\004 \001(\r\"^\n"
    "\036TMessageBoardGetCurrentInfoRsp\022+\n\nCurre"
    "ntArr\030\001 \003(\0132\027.pb.TMessageBoardSingle\022\017\n\007"
    "Version\030\002 \001(\r\"0\n\034TMessageBoardGetMyUnche"
    "ckReq\022\020\n\010SceneTid\030\001 \001(\r\"K\n\034TMessageBoard"
    "GetMyUncheckRsp\022+\n\nUncheckArr\030\001 \003(\0132\027.pb"
    ".TMessageBoardSingle\"[\n\033TMessageBoardSen"
    "dMessageReq\022\020\n\010SceneTid\030\001 \001(\r\022\013\n\003Uid\030\002 \001"
    "(\004\022\017\n\007Content\030\003 \001(\t\022\014\n\004Xpid\030\004 \001(\t\"G\n\033TMe"
    "ssageBoardSendMessageRsp\022(\n\007MsgInfo\030\001 \001("
    "\0132\027.pb.TMessageBoardSingle\"7\n\026TMessageBo"
    "ardDeleteReq\022\020\n\010SceneTid\030\001 \001(\r\022\013\n\003Mid\030\002 "
    "\001(\004\"5\n\024TMessageBoardLikeReq\022\020\n\010SceneTid\030"
    "\001 \001(\r\022\013\n\003Mid\030\002 \001(\004*,\n\006EAudit\022\013\n\007Uncheck\020"
    "\000\022\010\n\004Pass\020\001\022\013\n\007Illegal\020\002", 1064);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/MessageBoard.proto", &protobuf_RegisterTypes);
  TMessageBoardSingle::default_instance_ = new TMessageBoardSingle();
  TMessageBoardGetHotInfoReq::default_instance_ = new TMessageBoardGetHotInfoReq();
  TMessageBoardGetHotInfoRsp::default_instance_ = new TMessageBoardGetHotInfoRsp();
  TMessageBoardGetCurrentInfoReq::default_instance_ = new TMessageBoardGetCurrentInfoReq();
  TMessageBoardGetCurrentInfoRsp::default_instance_ = new TMessageBoardGetCurrentInfoRsp();
  TMessageBoardGetMyUncheckReq::default_instance_ = new TMessageBoardGetMyUncheckReq();
  TMessageBoardGetMyUncheckRsp::default_instance_ = new TMessageBoardGetMyUncheckRsp();
  TMessageBoardSendMessageReq::default_instance_ = new TMessageBoardSendMessageReq();
  TMessageBoardSendMessageRsp::default_instance_ = new TMessageBoardSendMessageRsp();
  TMessageBoardDeleteReq::default_instance_ = new TMessageBoardDeleteReq();
  TMessageBoardLikeReq::default_instance_ = new TMessageBoardLikeReq();
  TMessageBoardSingle::default_instance_->InitAsDefaultInstance();
  TMessageBoardGetHotInfoReq::default_instance_->InitAsDefaultInstance();
  TMessageBoardGetHotInfoRsp::default_instance_->InitAsDefaultInstance();
  TMessageBoardGetCurrentInfoReq::default_instance_->InitAsDefaultInstance();
  TMessageBoardGetCurrentInfoRsp::default_instance_->InitAsDefaultInstance();
  TMessageBoardGetMyUncheckReq::default_instance_->InitAsDefaultInstance();
  TMessageBoardGetMyUncheckRsp::default_instance_->InitAsDefaultInstance();
  TMessageBoardSendMessageReq::default_instance_->InitAsDefaultInstance();
  TMessageBoardSendMessageRsp::default_instance_->InitAsDefaultInstance();
  TMessageBoardDeleteReq::default_instance_->InitAsDefaultInstance();
  TMessageBoardLikeReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fMessageBoard_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fMessageBoard_2eproto {
  StaticDescriptorInitializer_net_2fMessageBoard_2eproto() {
    protobuf_AddDesc_net_2fMessageBoard_2eproto();
  }
} static_descriptor_initializer_net_2fMessageBoard_2eproto_;
const ::google::protobuf::EnumDescriptor* EAudit_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAudit_descriptor_;
}
bool EAudit_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TMessageBoardSingle::kMidFieldNumber;
const int TMessageBoardSingle::kUidFieldNumber;
const int TMessageBoardSingle::kContentFieldNumber;
const int TMessageBoardSingle::kUserInfoFieldNumber;
const int TMessageBoardSingle::kServerIdFieldNumber;
const int TMessageBoardSingle::kAllLikeNumFieldNumber;
const int TMessageBoardSingle::kHasLikeFieldNumber;
const int TMessageBoardSingle::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

TMessageBoardSingle::TMessageBoardSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMessageBoardSingle)
}

void TMessageBoardSingle::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TMessageBoardSingle::TMessageBoardSingle(const TMessageBoardSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMessageBoardSingle)
}

void TMessageBoardSingle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = GOOGLE_ULONGLONG(0);
  uid_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userinfo_ = NULL;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alllikenum_ = 0u;
  haslike_ = 0u;
  createtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMessageBoardSingle::~TMessageBoardSingle() {
  // @@protoc_insertion_point(destructor:pb.TMessageBoardSingle)
  SharedDtor();
}

void TMessageBoardSingle::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TMessageBoardSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMessageBoardSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMessageBoardSingle_descriptor_;
}

const TMessageBoardSingle& TMessageBoardSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMessageBoard_2eproto();
  return *default_instance_;
}

TMessageBoardSingle* TMessageBoardSingle::default_instance_ = NULL;

TMessageBoardSingle* TMessageBoardSingle::New() const {
  return new TMessageBoardSingle;
}

void TMessageBoardSingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TMessageBoardSingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mid_, uid_);
    ZR_(alllikenum_, createtime_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMessageBoardSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMessageBoardSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 2;
      case 2: {
        if (tag == 16) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Content;
        break;
      }

      // optional string Content = 3;
      case 3: {
        if (tag == 26) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 5;
      case 5: {
        if (tag == 42) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_AllLikeNum;
        break;
      }

      // optional uint32 AllLikeNum = 6;
      case 6: {
        if (tag == 48) {
         parse_AllLikeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alllikenum_)));
          set_has_alllikenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_HasLike;
        break;
      }

      // optional uint32 HasLike = 7;
      case 7: {
        if (tag == 56) {
         parse_HasLike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haslike_)));
          set_has_haslike();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_CreateTime;
        break;
      }

      // optional uint64 CreateTime = 8;
      case 8: {
        if (tag == 64) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMessageBoardSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMessageBoardSingle)
  return false;
#undef DO_
}

void TMessageBoardSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMessageBoardSingle)
  // optional uint64 Mid = 1;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mid(), output);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional string Content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userinfo(), output);
  }

  // optional string ServerId = 5;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serverid(), output);
  }

  // optional uint32 AllLikeNum = 6;
  if (has_alllikenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->alllikenum(), output);
  }

  // optional uint32 HasLike = 7;
  if (has_haslike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->haslike(), output);
  }

  // optional uint64 CreateTime = 8;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMessageBoardSingle)
}

::google::protobuf::uint8* TMessageBoardSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMessageBoardSingle)
  // optional uint64 Mid = 1;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mid(), target);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional string Content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userinfo(), target);
  }

  // optional string ServerId = 5;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serverid(), target);
  }

  // optional uint32 AllLikeNum = 6;
  if (has_alllikenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->alllikenum(), target);
  }

  // optional uint32 HasLike = 7;
  if (has_haslike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->haslike(), target);
  }

  // optional uint64 CreateTime = 8;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMessageBoardSingle)
  return target;
}

int TMessageBoardSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Mid = 1;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mid());
    }

    // optional uint64 Uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .pb.TUserSimpleInfo UserInfo = 4;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional string ServerId = 5;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional uint32 AllLikeNum = 6;
    if (has_alllikenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alllikenum());
    }

    // optional uint32 HasLike = 7;
    if (has_haslike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haslike());
    }

    // optional uint64 CreateTime = 8;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMessageBoardSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMessageBoardSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMessageBoardSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMessageBoardSingle::MergeFrom(const TMessageBoardSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_alllikenum()) {
      set_alllikenum(from.alllikenum());
    }
    if (from.has_haslike()) {
      set_haslike(from.haslike());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMessageBoardSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMessageBoardSingle::CopyFrom(const TMessageBoardSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMessageBoardSingle::IsInitialized() const {

  return true;
}

void TMessageBoardSingle::Swap(TMessageBoardSingle* other) {
  if (other != this) {
    std::swap(mid_, other->mid_);
    std::swap(uid_, other->uid_);
    std::swap(content_, other->content_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(serverid_, other->serverid_);
    std::swap(alllikenum_, other->alllikenum_);
    std::swap(haslike_, other->haslike_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMessageBoardSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMessageBoardSingle_descriptor_;
  metadata.reflection = TMessageBoardSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMessageBoardGetHotInfoReq::kSceneTidFieldNumber;
const int TMessageBoardGetHotInfoReq::kVersionFieldNumber;
const int TMessageBoardGetHotInfoReq::kPageIdxFieldNumber;
const int TMessageBoardGetHotInfoReq::kPageSizeFieldNumber;
#endif  // !_MSC_VER

TMessageBoardGetHotInfoReq::TMessageBoardGetHotInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMessageBoardGetHotInfoReq)
}

void TMessageBoardGetHotInfoReq::InitAsDefaultInstance() {
}

TMessageBoardGetHotInfoReq::TMessageBoardGetHotInfoReq(const TMessageBoardGetHotInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMessageBoardGetHotInfoReq)
}

void TMessageBoardGetHotInfoReq::SharedCtor() {
  _cached_size_ = 0;
  scenetid_ = 0u;
  version_ = 0u;
  pageidx_ = 0u;
  pagesize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMessageBoardGetHotInfoReq::~TMessageBoardGetHotInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TMessageBoardGetHotInfoReq)
  SharedDtor();
}

void TMessageBoardGetHotInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMessageBoardGetHotInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMessageBoardGetHotInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMessageBoardGetHotInfoReq_descriptor_;
}

const TMessageBoardGetHotInfoReq& TMessageBoardGetHotInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMessageBoard_2eproto();
  return *default_instance_;
}

TMessageBoardGetHotInfoReq* TMessageBoardGetHotInfoReq::default_instance_ = NULL;

TMessageBoardGetHotInfoReq* TMessageBoardGetHotInfoReq::New() const {
  return new TMessageBoardGetHotInfoReq;
}

void TMessageBoardGetHotInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TMessageBoardGetHotInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(scenetid_, pagesize_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMessageBoardGetHotInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMessageBoardGetHotInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SceneTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetid_)));
          set_has_scenetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Version;
        break;
      }

      // optional uint32 Version = 2;
      case 2: {
        if (tag == 16) {
         parse_Version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PageIdx;
        break;
      }

      // optional uint32 PageIdx = 3;
      case 3: {
        if (tag == 24) {
         parse_PageIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageidx_)));
          set_has_pageidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PageSize;
        break;
      }

      // optional uint32 PageSize = 4;
      case 4: {
        if (tag == 32) {
         parse_PageSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagesize_)));
          set_has_pagesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMessageBoardGetHotInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMessageBoardGetHotInfoReq)
  return false;
#undef DO_
}

void TMessageBoardGetHotInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMessageBoardGetHotInfoReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scenetid(), output);
  }

  // optional uint32 Version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional uint32 PageIdx = 3;
  if (has_pageidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pageidx(), output);
  }

  // optional uint32 PageSize = 4;
  if (has_pagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pagesize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMessageBoardGetHotInfoReq)
}

::google::protobuf::uint8* TMessageBoardGetHotInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMessageBoardGetHotInfoReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scenetid(), target);
  }

  // optional uint32 Version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // optional uint32 PageIdx = 3;
  if (has_pageidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pageidx(), target);
  }

  // optional uint32 PageSize = 4;
  if (has_pagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pagesize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMessageBoardGetHotInfoReq)
  return target;
}

int TMessageBoardGetHotInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SceneTid = 1;
    if (has_scenetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenetid());
    }

    // optional uint32 Version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 PageIdx = 3;
    if (has_pageidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageidx());
    }

    // optional uint32 PageSize = 4;
    if (has_pagesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagesize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMessageBoardGetHotInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMessageBoardGetHotInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMessageBoardGetHotInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMessageBoardGetHotInfoReq::MergeFrom(const TMessageBoardGetHotInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scenetid()) {
      set_scenetid(from.scenetid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_pageidx()) {
      set_pageidx(from.pageidx());
    }
    if (from.has_pagesize()) {
      set_pagesize(from.pagesize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMessageBoardGetHotInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMessageBoardGetHotInfoReq::CopyFrom(const TMessageBoardGetHotInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMessageBoardGetHotInfoReq::IsInitialized() const {

  return true;
}

void TMessageBoardGetHotInfoReq::Swap(TMessageBoardGetHotInfoReq* other) {
  if (other != this) {
    std::swap(scenetid_, other->scenetid_);
    std::swap(version_, other->version_);
    std::swap(pageidx_, other->pageidx_);
    std::swap(pagesize_, other->pagesize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMessageBoardGetHotInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMessageBoardGetHotInfoReq_descriptor_;
  metadata.reflection = TMessageBoardGetHotInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMessageBoardGetHotInfoRsp::kHotArrFieldNumber;
const int TMessageBoardGetHotInfoRsp::kVersionFieldNumber;
#endif  // !_MSC_VER

TMessageBoardGetHotInfoRsp::TMessageBoardGetHotInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMessageBoardGetHotInfoRsp)
}

void TMessageBoardGetHotInfoRsp::InitAsDefaultInstance() {
}

TMessageBoardGetHotInfoRsp::TMessageBoardGetHotInfoRsp(const TMessageBoardGetHotInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMessageBoardGetHotInfoRsp)
}

void TMessageBoardGetHotInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMessageBoardGetHotInfoRsp::~TMessageBoardGetHotInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TMessageBoardGetHotInfoRsp)
  SharedDtor();
}

void TMessageBoardGetHotInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMessageBoardGetHotInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMessageBoardGetHotInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMessageBoardGetHotInfoRsp_descriptor_;
}

const TMessageBoardGetHotInfoRsp& TMessageBoardGetHotInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMessageBoard_2eproto();
  return *default_instance_;
}

TMessageBoardGetHotInfoRsp* TMessageBoardGetHotInfoRsp::default_instance_ = NULL;

TMessageBoardGetHotInfoRsp* TMessageBoardGetHotInfoRsp::New() const {
  return new TMessageBoardGetHotInfoRsp;
}

void TMessageBoardGetHotInfoRsp::Clear() {
  version_ = 0u;
  hotarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMessageBoardGetHotInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMessageBoardGetHotInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TMessageBoardSingle HotArr = 1;
      case 1: {
        if (tag == 10) {
         parse_HotArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hotarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_HotArr;
        if (input->ExpectTag(16)) goto parse_Version;
        break;
      }

      // optional uint32 Version = 2;
      case 2: {
        if (tag == 16) {
         parse_Version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMessageBoardGetHotInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMessageBoardGetHotInfoRsp)
  return false;
#undef DO_
}

void TMessageBoardGetHotInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMessageBoardGetHotInfoRsp)
  // repeated .pb.TMessageBoardSingle HotArr = 1;
  for (int i = 0; i < this->hotarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hotarr(i), output);
  }

  // optional uint32 Version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMessageBoardGetHotInfoRsp)
}

::google::protobuf::uint8* TMessageBoardGetHotInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMessageBoardGetHotInfoRsp)
  // repeated .pb.TMessageBoardSingle HotArr = 1;
  for (int i = 0; i < this->hotarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hotarr(i), target);
  }

  // optional uint32 Version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMessageBoardGetHotInfoRsp)
  return target;
}

int TMessageBoardGetHotInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 Version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .pb.TMessageBoardSingle HotArr = 1;
  total_size += 1 * this->hotarr_size();
  for (int i = 0; i < this->hotarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hotarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMessageBoardGetHotInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMessageBoardGetHotInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMessageBoardGetHotInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMessageBoardGetHotInfoRsp::MergeFrom(const TMessageBoardGetHotInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  hotarr_.MergeFrom(from.hotarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMessageBoardGetHotInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMessageBoardGetHotInfoRsp::CopyFrom(const TMessageBoardGetHotInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMessageBoardGetHotInfoRsp::IsInitialized() const {

  return true;
}

void TMessageBoardGetHotInfoRsp::Swap(TMessageBoardGetHotInfoRsp* other) {
  if (other != this) {
    hotarr_.Swap(&other->hotarr_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMessageBoardGetHotInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMessageBoardGetHotInfoRsp_descriptor_;
  metadata.reflection = TMessageBoardGetHotInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMessageBoardGetCurrentInfoReq::kSceneTidFieldNumber;
const int TMessageBoardGetCurrentInfoReq::kVersionFieldNumber;
const int TMessageBoardGetCurrentInfoReq::kPageIdxFieldNumber;
const int TMessageBoardGetCurrentInfoReq::kPageSizeFieldNumber;
#endif  // !_MSC_VER

TMessageBoardGetCurrentInfoReq::TMessageBoardGetCurrentInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMessageBoardGetCurrentInfoReq)
}

void TMessageBoardGetCurrentInfoReq::InitAsDefaultInstance() {
}

TMessageBoardGetCurrentInfoReq::TMessageBoardGetCurrentInfoReq(const TMessageBoardGetCurrentInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMessageBoardGetCurrentInfoReq)
}

void TMessageBoardGetCurrentInfoReq::SharedCtor() {
  _cached_size_ = 0;
  scenetid_ = 0u;
  version_ = 0u;
  pageidx_ = 0u;
  pagesize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMessageBoardGetCurrentInfoReq::~TMessageBoardGetCurrentInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TMessageBoardGetCurrentInfoReq)
  SharedDtor();
}

void TMessageBoardGetCurrentInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMessageBoardGetCurrentInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMessageBoardGetCurrentInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMessageBoardGetCurrentInfoReq_descriptor_;
}

const TMessageBoardGetCurrentInfoReq& TMessageBoardGetCurrentInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMessageBoard_2eproto();
  return *default_instance_;
}

TMessageBoardGetCurrentInfoReq* TMessageBoardGetCurrentInfoReq::default_instance_ = NULL;

TMessageBoardGetCurrentInfoReq* TMessageBoardGetCurrentInfoReq::New() const {
  return new TMessageBoardGetCurrentInfoReq;
}

void TMessageBoardGetCurrentInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TMessageBoardGetCurrentInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(scenetid_, pagesize_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMessageBoardGetCurrentInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMessageBoardGetCurrentInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SceneTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetid_)));
          set_has_scenetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Version;
        break;
      }

      // optional uint32 Version = 2;
      case 2: {
        if (tag == 16) {
         parse_Version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PageIdx;
        break;
      }

      // optional uint32 PageIdx = 3;
      case 3: {
        if (tag == 24) {
         parse_PageIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageidx_)));
          set_has_pageidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PageSize;
        break;
      }

      // optional uint32 PageSize = 4;
      case 4: {
        if (tag == 32) {
         parse_PageSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagesize_)));
          set_has_pagesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMessageBoardGetCurrentInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMessageBoardGetCurrentInfoReq)
  return false;
#undef DO_
}

void TMessageBoardGetCurrentInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMessageBoardGetCurrentInfoReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scenetid(), output);
  }

  // optional uint32 Version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional uint32 PageIdx = 3;
  if (has_pageidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pageidx(), output);
  }

  // optional uint32 PageSize = 4;
  if (has_pagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pagesize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMessageBoardGetCurrentInfoReq)
}

::google::protobuf::uint8* TMessageBoardGetCurrentInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMessageBoardGetCurrentInfoReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scenetid(), target);
  }

  // optional uint32 Version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // optional uint32 PageIdx = 3;
  if (has_pageidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pageidx(), target);
  }

  // optional uint32 PageSize = 4;
  if (has_pagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pagesize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMessageBoardGetCurrentInfoReq)
  return target;
}

int TMessageBoardGetCurrentInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SceneTid = 1;
    if (has_scenetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenetid());
    }

    // optional uint32 Version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 PageIdx = 3;
    if (has_pageidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageidx());
    }

    // optional uint32 PageSize = 4;
    if (has_pagesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagesize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMessageBoardGetCurrentInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMessageBoardGetCurrentInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMessageBoardGetCurrentInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMessageBoardGetCurrentInfoReq::MergeFrom(const TMessageBoardGetCurrentInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scenetid()) {
      set_scenetid(from.scenetid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_pageidx()) {
      set_pageidx(from.pageidx());
    }
    if (from.has_pagesize()) {
      set_pagesize(from.pagesize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMessageBoardGetCurrentInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMessageBoardGetCurrentInfoReq::CopyFrom(const TMessageBoardGetCurrentInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMessageBoardGetCurrentInfoReq::IsInitialized() const {

  return true;
}

void TMessageBoardGetCurrentInfoReq::Swap(TMessageBoardGetCurrentInfoReq* other) {
  if (other != this) {
    std::swap(scenetid_, other->scenetid_);
    std::swap(version_, other->version_);
    std::swap(pageidx_, other->pageidx_);
    std::swap(pagesize_, other->pagesize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMessageBoardGetCurrentInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMessageBoardGetCurrentInfoReq_descriptor_;
  metadata.reflection = TMessageBoardGetCurrentInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMessageBoardGetCurrentInfoRsp::kCurrentArrFieldNumber;
const int TMessageBoardGetCurrentInfoRsp::kVersionFieldNumber;
#endif  // !_MSC_VER

TMessageBoardGetCurrentInfoRsp::TMessageBoardGetCurrentInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMessageBoardGetCurrentInfoRsp)
}

void TMessageBoardGetCurrentInfoRsp::InitAsDefaultInstance() {
}

TMessageBoardGetCurrentInfoRsp::TMessageBoardGetCurrentInfoRsp(const TMessageBoardGetCurrentInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMessageBoardGetCurrentInfoRsp)
}

void TMessageBoardGetCurrentInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMessageBoardGetCurrentInfoRsp::~TMessageBoardGetCurrentInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TMessageBoardGetCurrentInfoRsp)
  SharedDtor();
}

void TMessageBoardGetCurrentInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMessageBoardGetCurrentInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMessageBoardGetCurrentInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMessageBoardGetCurrentInfoRsp_descriptor_;
}

const TMessageBoardGetCurrentInfoRsp& TMessageBoardGetCurrentInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMessageBoard_2eproto();
  return *default_instance_;
}

TMessageBoardGetCurrentInfoRsp* TMessageBoardGetCurrentInfoRsp::default_instance_ = NULL;

TMessageBoardGetCurrentInfoRsp* TMessageBoardGetCurrentInfoRsp::New() const {
  return new TMessageBoardGetCurrentInfoRsp;
}

void TMessageBoardGetCurrentInfoRsp::Clear() {
  version_ = 0u;
  currentarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMessageBoardGetCurrentInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMessageBoardGetCurrentInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TMessageBoardSingle CurrentArr = 1;
      case 1: {
        if (tag == 10) {
         parse_CurrentArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_currentarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_CurrentArr;
        if (input->ExpectTag(16)) goto parse_Version;
        break;
      }

      // optional uint32 Version = 2;
      case 2: {
        if (tag == 16) {
         parse_Version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMessageBoardGetCurrentInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMessageBoardGetCurrentInfoRsp)
  return false;
#undef DO_
}

void TMessageBoardGetCurrentInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMessageBoardGetCurrentInfoRsp)
  // repeated .pb.TMessageBoardSingle CurrentArr = 1;
  for (int i = 0; i < this->currentarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->currentarr(i), output);
  }

  // optional uint32 Version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMessageBoardGetCurrentInfoRsp)
}

::google::protobuf::uint8* TMessageBoardGetCurrentInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMessageBoardGetCurrentInfoRsp)
  // repeated .pb.TMessageBoardSingle CurrentArr = 1;
  for (int i = 0; i < this->currentarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->currentarr(i), target);
  }

  // optional uint32 Version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMessageBoardGetCurrentInfoRsp)
  return target;
}

int TMessageBoardGetCurrentInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 Version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .pb.TMessageBoardSingle CurrentArr = 1;
  total_size += 1 * this->currentarr_size();
  for (int i = 0; i < this->currentarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->currentarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMessageBoardGetCurrentInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMessageBoardGetCurrentInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMessageBoardGetCurrentInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMessageBoardGetCurrentInfoRsp::MergeFrom(const TMessageBoardGetCurrentInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  currentarr_.MergeFrom(from.currentarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMessageBoardGetCurrentInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMessageBoardGetCurrentInfoRsp::CopyFrom(const TMessageBoardGetCurrentInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMessageBoardGetCurrentInfoRsp::IsInitialized() const {

  return true;
}

void TMessageBoardGetCurrentInfoRsp::Swap(TMessageBoardGetCurrentInfoRsp* other) {
  if (other != this) {
    currentarr_.Swap(&other->currentarr_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMessageBoardGetCurrentInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMessageBoardGetCurrentInfoRsp_descriptor_;
  metadata.reflection = TMessageBoardGetCurrentInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMessageBoardGetMyUncheckReq::kSceneTidFieldNumber;
#endif  // !_MSC_VER

TMessageBoardGetMyUncheckReq::TMessageBoardGetMyUncheckReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMessageBoardGetMyUncheckReq)
}

void TMessageBoardGetMyUncheckReq::InitAsDefaultInstance() {
}

TMessageBoardGetMyUncheckReq::TMessageBoardGetMyUncheckReq(const TMessageBoardGetMyUncheckReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMessageBoardGetMyUncheckReq)
}

void TMessageBoardGetMyUncheckReq::SharedCtor() {
  _cached_size_ = 0;
  scenetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMessageBoardGetMyUncheckReq::~TMessageBoardGetMyUncheckReq() {
  // @@protoc_insertion_point(destructor:pb.TMessageBoardGetMyUncheckReq)
  SharedDtor();
}

void TMessageBoardGetMyUncheckReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMessageBoardGetMyUncheckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMessageBoardGetMyUncheckReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMessageBoardGetMyUncheckReq_descriptor_;
}

const TMessageBoardGetMyUncheckReq& TMessageBoardGetMyUncheckReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMessageBoard_2eproto();
  return *default_instance_;
}

TMessageBoardGetMyUncheckReq* TMessageBoardGetMyUncheckReq::default_instance_ = NULL;

TMessageBoardGetMyUncheckReq* TMessageBoardGetMyUncheckReq::New() const {
  return new TMessageBoardGetMyUncheckReq;
}

void TMessageBoardGetMyUncheckReq::Clear() {
  scenetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMessageBoardGetMyUncheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMessageBoardGetMyUncheckReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SceneTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetid_)));
          set_has_scenetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMessageBoardGetMyUncheckReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMessageBoardGetMyUncheckReq)
  return false;
#undef DO_
}

void TMessageBoardGetMyUncheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMessageBoardGetMyUncheckReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scenetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMessageBoardGetMyUncheckReq)
}

::google::protobuf::uint8* TMessageBoardGetMyUncheckReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMessageBoardGetMyUncheckReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scenetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMessageBoardGetMyUncheckReq)
  return target;
}

int TMessageBoardGetMyUncheckReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SceneTid = 1;
    if (has_scenetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMessageBoardGetMyUncheckReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMessageBoardGetMyUncheckReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMessageBoardGetMyUncheckReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMessageBoardGetMyUncheckReq::MergeFrom(const TMessageBoardGetMyUncheckReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scenetid()) {
      set_scenetid(from.scenetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMessageBoardGetMyUncheckReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMessageBoardGetMyUncheckReq::CopyFrom(const TMessageBoardGetMyUncheckReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMessageBoardGetMyUncheckReq::IsInitialized() const {

  return true;
}

void TMessageBoardGetMyUncheckReq::Swap(TMessageBoardGetMyUncheckReq* other) {
  if (other != this) {
    std::swap(scenetid_, other->scenetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMessageBoardGetMyUncheckReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMessageBoardGetMyUncheckReq_descriptor_;
  metadata.reflection = TMessageBoardGetMyUncheckReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMessageBoardGetMyUncheckRsp::kUncheckArrFieldNumber;
#endif  // !_MSC_VER

TMessageBoardGetMyUncheckRsp::TMessageBoardGetMyUncheckRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMessageBoardGetMyUncheckRsp)
}

void TMessageBoardGetMyUncheckRsp::InitAsDefaultInstance() {
}

TMessageBoardGetMyUncheckRsp::TMessageBoardGetMyUncheckRsp(const TMessageBoardGetMyUncheckRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMessageBoardGetMyUncheckRsp)
}

void TMessageBoardGetMyUncheckRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMessageBoardGetMyUncheckRsp::~TMessageBoardGetMyUncheckRsp() {
  // @@protoc_insertion_point(destructor:pb.TMessageBoardGetMyUncheckRsp)
  SharedDtor();
}

void TMessageBoardGetMyUncheckRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMessageBoardGetMyUncheckRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMessageBoardGetMyUncheckRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMessageBoardGetMyUncheckRsp_descriptor_;
}

const TMessageBoardGetMyUncheckRsp& TMessageBoardGetMyUncheckRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMessageBoard_2eproto();
  return *default_instance_;
}

TMessageBoardGetMyUncheckRsp* TMessageBoardGetMyUncheckRsp::default_instance_ = NULL;

TMessageBoardGetMyUncheckRsp* TMessageBoardGetMyUncheckRsp::New() const {
  return new TMessageBoardGetMyUncheckRsp;
}

void TMessageBoardGetMyUncheckRsp::Clear() {
  uncheckarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMessageBoardGetMyUncheckRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMessageBoardGetMyUncheckRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TMessageBoardSingle UncheckArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UncheckArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uncheckarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UncheckArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMessageBoardGetMyUncheckRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMessageBoardGetMyUncheckRsp)
  return false;
#undef DO_
}

void TMessageBoardGetMyUncheckRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMessageBoardGetMyUncheckRsp)
  // repeated .pb.TMessageBoardSingle UncheckArr = 1;
  for (int i = 0; i < this->uncheckarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uncheckarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMessageBoardGetMyUncheckRsp)
}

::google::protobuf::uint8* TMessageBoardGetMyUncheckRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMessageBoardGetMyUncheckRsp)
  // repeated .pb.TMessageBoardSingle UncheckArr = 1;
  for (int i = 0; i < this->uncheckarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uncheckarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMessageBoardGetMyUncheckRsp)
  return target;
}

int TMessageBoardGetMyUncheckRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TMessageBoardSingle UncheckArr = 1;
  total_size += 1 * this->uncheckarr_size();
  for (int i = 0; i < this->uncheckarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uncheckarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMessageBoardGetMyUncheckRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMessageBoardGetMyUncheckRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMessageBoardGetMyUncheckRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMessageBoardGetMyUncheckRsp::MergeFrom(const TMessageBoardGetMyUncheckRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  uncheckarr_.MergeFrom(from.uncheckarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMessageBoardGetMyUncheckRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMessageBoardGetMyUncheckRsp::CopyFrom(const TMessageBoardGetMyUncheckRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMessageBoardGetMyUncheckRsp::IsInitialized() const {

  return true;
}

void TMessageBoardGetMyUncheckRsp::Swap(TMessageBoardGetMyUncheckRsp* other) {
  if (other != this) {
    uncheckarr_.Swap(&other->uncheckarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMessageBoardGetMyUncheckRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMessageBoardGetMyUncheckRsp_descriptor_;
  metadata.reflection = TMessageBoardGetMyUncheckRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMessageBoardSendMessageReq::kSceneTidFieldNumber;
const int TMessageBoardSendMessageReq::kUidFieldNumber;
const int TMessageBoardSendMessageReq::kContentFieldNumber;
const int TMessageBoardSendMessageReq::kXpidFieldNumber;
#endif  // !_MSC_VER

TMessageBoardSendMessageReq::TMessageBoardSendMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMessageBoardSendMessageReq)
}

void TMessageBoardSendMessageReq::InitAsDefaultInstance() {
}

TMessageBoardSendMessageReq::TMessageBoardSendMessageReq(const TMessageBoardSendMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMessageBoardSendMessageReq)
}

void TMessageBoardSendMessageReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  scenetid_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMessageBoardSendMessageReq::~TMessageBoardSendMessageReq() {
  // @@protoc_insertion_point(destructor:pb.TMessageBoardSendMessageReq)
  SharedDtor();
}

void TMessageBoardSendMessageReq::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (xpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xpid_;
  }
  if (this != default_instance_) {
  }
}

void TMessageBoardSendMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMessageBoardSendMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMessageBoardSendMessageReq_descriptor_;
}

const TMessageBoardSendMessageReq& TMessageBoardSendMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMessageBoard_2eproto();
  return *default_instance_;
}

TMessageBoardSendMessageReq* TMessageBoardSendMessageReq::default_instance_ = NULL;

TMessageBoardSendMessageReq* TMessageBoardSendMessageReq::New() const {
  return new TMessageBoardSendMessageReq;
}

void TMessageBoardSendMessageReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    scenetid_ = 0u;
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_xpid()) {
      if (xpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        xpid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMessageBoardSendMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMessageBoardSendMessageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SceneTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetid_)));
          set_has_scenetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 2;
      case 2: {
        if (tag == 16) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Content;
        break;
      }

      // optional string Content = 3;
      case 3: {
        if (tag == 26) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Xpid;
        break;
      }

      // optional string Xpid = 4;
      case 4: {
        if (tag == 34) {
         parse_Xpid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xpid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->xpid().data(), this->xpid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xpid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMessageBoardSendMessageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMessageBoardSendMessageReq)
  return false;
#undef DO_
}

void TMessageBoardSendMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMessageBoardSendMessageReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scenetid(), output);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional string Content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // optional string Xpid = 4;
  if (has_xpid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xpid().data(), this->xpid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xpid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->xpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMessageBoardSendMessageReq)
}

::google::protobuf::uint8* TMessageBoardSendMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMessageBoardSendMessageReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scenetid(), target);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional string Content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional string Xpid = 4;
  if (has_xpid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xpid().data(), this->xpid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xpid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->xpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMessageBoardSendMessageReq)
  return target;
}

int TMessageBoardSendMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SceneTid = 1;
    if (has_scenetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenetid());
    }

    // optional uint64 Uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string Xpid = 4;
    if (has_xpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMessageBoardSendMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMessageBoardSendMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMessageBoardSendMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMessageBoardSendMessageReq::MergeFrom(const TMessageBoardSendMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scenetid()) {
      set_scenetid(from.scenetid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_xpid()) {
      set_xpid(from.xpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMessageBoardSendMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMessageBoardSendMessageReq::CopyFrom(const TMessageBoardSendMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMessageBoardSendMessageReq::IsInitialized() const {

  return true;
}

void TMessageBoardSendMessageReq::Swap(TMessageBoardSendMessageReq* other) {
  if (other != this) {
    std::swap(scenetid_, other->scenetid_);
    std::swap(uid_, other->uid_);
    std::swap(content_, other->content_);
    std::swap(xpid_, other->xpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMessageBoardSendMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMessageBoardSendMessageReq_descriptor_;
  metadata.reflection = TMessageBoardSendMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMessageBoardSendMessageRsp::kMsgInfoFieldNumber;
#endif  // !_MSC_VER

TMessageBoardSendMessageRsp::TMessageBoardSendMessageRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMessageBoardSendMessageRsp)
}

void TMessageBoardSendMessageRsp::InitAsDefaultInstance() {
  msginfo_ = const_cast< ::pb::TMessageBoardSingle*>(&::pb::TMessageBoardSingle::default_instance());
}

TMessageBoardSendMessageRsp::TMessageBoardSendMessageRsp(const TMessageBoardSendMessageRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMessageBoardSendMessageRsp)
}

void TMessageBoardSendMessageRsp::SharedCtor() {
  _cached_size_ = 0;
  msginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMessageBoardSendMessageRsp::~TMessageBoardSendMessageRsp() {
  // @@protoc_insertion_point(destructor:pb.TMessageBoardSendMessageRsp)
  SharedDtor();
}

void TMessageBoardSendMessageRsp::SharedDtor() {
  if (this != default_instance_) {
    delete msginfo_;
  }
}

void TMessageBoardSendMessageRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMessageBoardSendMessageRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMessageBoardSendMessageRsp_descriptor_;
}

const TMessageBoardSendMessageRsp& TMessageBoardSendMessageRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMessageBoard_2eproto();
  return *default_instance_;
}

TMessageBoardSendMessageRsp* TMessageBoardSendMessageRsp::default_instance_ = NULL;

TMessageBoardSendMessageRsp* TMessageBoardSendMessageRsp::New() const {
  return new TMessageBoardSendMessageRsp;
}

void TMessageBoardSendMessageRsp::Clear() {
  if (has_msginfo()) {
    if (msginfo_ != NULL) msginfo_->::pb::TMessageBoardSingle::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMessageBoardSendMessageRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMessageBoardSendMessageRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TMessageBoardSingle MsgInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMessageBoardSendMessageRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMessageBoardSendMessageRsp)
  return false;
#undef DO_
}

void TMessageBoardSendMessageRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMessageBoardSendMessageRsp)
  // optional .pb.TMessageBoardSingle MsgInfo = 1;
  if (has_msginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMessageBoardSendMessageRsp)
}

::google::protobuf::uint8* TMessageBoardSendMessageRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMessageBoardSendMessageRsp)
  // optional .pb.TMessageBoardSingle MsgInfo = 1;
  if (has_msginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMessageBoardSendMessageRsp)
  return target;
}

int TMessageBoardSendMessageRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TMessageBoardSingle MsgInfo = 1;
    if (has_msginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMessageBoardSendMessageRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMessageBoardSendMessageRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMessageBoardSendMessageRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMessageBoardSendMessageRsp::MergeFrom(const TMessageBoardSendMessageRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msginfo()) {
      mutable_msginfo()->::pb::TMessageBoardSingle::MergeFrom(from.msginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMessageBoardSendMessageRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMessageBoardSendMessageRsp::CopyFrom(const TMessageBoardSendMessageRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMessageBoardSendMessageRsp::IsInitialized() const {

  return true;
}

void TMessageBoardSendMessageRsp::Swap(TMessageBoardSendMessageRsp* other) {
  if (other != this) {
    std::swap(msginfo_, other->msginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMessageBoardSendMessageRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMessageBoardSendMessageRsp_descriptor_;
  metadata.reflection = TMessageBoardSendMessageRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMessageBoardDeleteReq::kSceneTidFieldNumber;
const int TMessageBoardDeleteReq::kMidFieldNumber;
#endif  // !_MSC_VER

TMessageBoardDeleteReq::TMessageBoardDeleteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMessageBoardDeleteReq)
}

void TMessageBoardDeleteReq::InitAsDefaultInstance() {
}

TMessageBoardDeleteReq::TMessageBoardDeleteReq(const TMessageBoardDeleteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMessageBoardDeleteReq)
}

void TMessageBoardDeleteReq::SharedCtor() {
  _cached_size_ = 0;
  scenetid_ = 0u;
  mid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMessageBoardDeleteReq::~TMessageBoardDeleteReq() {
  // @@protoc_insertion_point(destructor:pb.TMessageBoardDeleteReq)
  SharedDtor();
}

void TMessageBoardDeleteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMessageBoardDeleteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMessageBoardDeleteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMessageBoardDeleteReq_descriptor_;
}

const TMessageBoardDeleteReq& TMessageBoardDeleteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMessageBoard_2eproto();
  return *default_instance_;
}

TMessageBoardDeleteReq* TMessageBoardDeleteReq::default_instance_ = NULL;

TMessageBoardDeleteReq* TMessageBoardDeleteReq::New() const {
  return new TMessageBoardDeleteReq;
}

void TMessageBoardDeleteReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TMessageBoardDeleteReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mid_, scenetid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMessageBoardDeleteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMessageBoardDeleteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SceneTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetid_)));
          set_has_scenetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Mid;
        break;
      }

      // optional uint64 Mid = 2;
      case 2: {
        if (tag == 16) {
         parse_Mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMessageBoardDeleteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMessageBoardDeleteReq)
  return false;
#undef DO_
}

void TMessageBoardDeleteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMessageBoardDeleteReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scenetid(), output);
  }

  // optional uint64 Mid = 2;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMessageBoardDeleteReq)
}

::google::protobuf::uint8* TMessageBoardDeleteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMessageBoardDeleteReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scenetid(), target);
  }

  // optional uint64 Mid = 2;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMessageBoardDeleteReq)
  return target;
}

int TMessageBoardDeleteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SceneTid = 1;
    if (has_scenetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenetid());
    }

    // optional uint64 Mid = 2;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMessageBoardDeleteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMessageBoardDeleteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMessageBoardDeleteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMessageBoardDeleteReq::MergeFrom(const TMessageBoardDeleteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scenetid()) {
      set_scenetid(from.scenetid());
    }
    if (from.has_mid()) {
      set_mid(from.mid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMessageBoardDeleteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMessageBoardDeleteReq::CopyFrom(const TMessageBoardDeleteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMessageBoardDeleteReq::IsInitialized() const {

  return true;
}

void TMessageBoardDeleteReq::Swap(TMessageBoardDeleteReq* other) {
  if (other != this) {
    std::swap(scenetid_, other->scenetid_);
    std::swap(mid_, other->mid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMessageBoardDeleteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMessageBoardDeleteReq_descriptor_;
  metadata.reflection = TMessageBoardDeleteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMessageBoardLikeReq::kSceneTidFieldNumber;
const int TMessageBoardLikeReq::kMidFieldNumber;
#endif  // !_MSC_VER

TMessageBoardLikeReq::TMessageBoardLikeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMessageBoardLikeReq)
}

void TMessageBoardLikeReq::InitAsDefaultInstance() {
}

TMessageBoardLikeReq::TMessageBoardLikeReq(const TMessageBoardLikeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMessageBoardLikeReq)
}

void TMessageBoardLikeReq::SharedCtor() {
  _cached_size_ = 0;
  scenetid_ = 0u;
  mid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMessageBoardLikeReq::~TMessageBoardLikeReq() {
  // @@protoc_insertion_point(destructor:pb.TMessageBoardLikeReq)
  SharedDtor();
}

void TMessageBoardLikeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMessageBoardLikeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMessageBoardLikeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMessageBoardLikeReq_descriptor_;
}

const TMessageBoardLikeReq& TMessageBoardLikeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMessageBoard_2eproto();
  return *default_instance_;
}

TMessageBoardLikeReq* TMessageBoardLikeReq::default_instance_ = NULL;

TMessageBoardLikeReq* TMessageBoardLikeReq::New() const {
  return new TMessageBoardLikeReq;
}

void TMessageBoardLikeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TMessageBoardLikeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mid_, scenetid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMessageBoardLikeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMessageBoardLikeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SceneTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetid_)));
          set_has_scenetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Mid;
        break;
      }

      // optional uint64 Mid = 2;
      case 2: {
        if (tag == 16) {
         parse_Mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMessageBoardLikeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMessageBoardLikeReq)
  return false;
#undef DO_
}

void TMessageBoardLikeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMessageBoardLikeReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scenetid(), output);
  }

  // optional uint64 Mid = 2;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMessageBoardLikeReq)
}

::google::protobuf::uint8* TMessageBoardLikeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMessageBoardLikeReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scenetid(), target);
  }

  // optional uint64 Mid = 2;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMessageBoardLikeReq)
  return target;
}

int TMessageBoardLikeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SceneTid = 1;
    if (has_scenetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenetid());
    }

    // optional uint64 Mid = 2;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMessageBoardLikeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMessageBoardLikeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMessageBoardLikeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMessageBoardLikeReq::MergeFrom(const TMessageBoardLikeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scenetid()) {
      set_scenetid(from.scenetid());
    }
    if (from.has_mid()) {
      set_mid(from.mid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMessageBoardLikeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMessageBoardLikeReq::CopyFrom(const TMessageBoardLikeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMessageBoardLikeReq::IsInitialized() const {

  return true;
}

void TMessageBoardLikeReq::Swap(TMessageBoardLikeReq* other) {
  if (other != this) {
    std::swap(scenetid_, other->scenetid_);
    std::swap(mid_, other->mid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMessageBoardLikeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMessageBoardLikeReq_descriptor_;
  metadata.reflection = TMessageBoardLikeReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
