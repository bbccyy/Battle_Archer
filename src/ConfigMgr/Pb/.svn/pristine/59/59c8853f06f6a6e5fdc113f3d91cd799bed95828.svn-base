// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SceneInteractiveObjectAudio.proto

#ifndef PROTOBUF_module_2fSceneInteractiveObjectAudio_2eproto__INCLUDED
#define PROTOBUF_module_2fSceneInteractiveObjectAudio_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/AudioDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fSceneInteractiveObjectAudio_2eproto();
void protobuf_AssignDesc_module_2fSceneInteractiveObjectAudio_2eproto();
void protobuf_ShutdownFile_module_2fSceneInteractiveObjectAudio_2eproto();

class SceneInteractiveObjectAudio;
class SceneTypeAudio;

enum EAudioSceneType {
  INSTANCE_SCENE_AUDIO = 1,
  SYSTEM_SCENE_AUDIO = 2
};
bool EAudioSceneType_IsValid(int value);
const EAudioSceneType EAudioSceneType_MIN = INSTANCE_SCENE_AUDIO;
const EAudioSceneType EAudioSceneType_MAX = SYSTEM_SCENE_AUDIO;
const int EAudioSceneType_ARRAYSIZE = EAudioSceneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAudioSceneType_descriptor();
inline const ::std::string& EAudioSceneType_Name(EAudioSceneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAudioSceneType_descriptor(), value);
}
inline bool EAudioSceneType_Parse(
    const ::std::string& name, EAudioSceneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAudioSceneType>(
    EAudioSceneType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>SceneInteractiveObjectAudio</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SceneInteractiveObjectAudio.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SceneInteractiveObjectAudio : public ::google::protobuf::Message {
 public:
  SceneInteractiveObjectAudio();
  virtual ~SceneInteractiveObjectAudio();

  SceneInteractiveObjectAudio(const SceneInteractiveObjectAudio& from);

  inline SceneInteractiveObjectAudio& operator=(const SceneInteractiveObjectAudio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneInteractiveObjectAudio& default_instance();

  void Swap(SceneInteractiveObjectAudio* other);

  // implements Message ----------------------------------------------

  SceneInteractiveObjectAudio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneInteractiveObjectAudio& from);
  void MergeFrom(const SceneInteractiveObjectAudio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SceneInteractiveObjectAudio</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .pb.SceneTypeAudio SceneTypeAudioArr = 2;
  inline int scenetypeaudioarr_size() const;
  inline void clear_scenetypeaudioarr();
  static const int kSceneTypeAudioArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SceneInteractiveObjectAudio</name>
  	<Function>
  		<name>scenetypeaudioarr</name>
  		<replaceName>SceneTypeAudioArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_scenetypeaudioarr</name>
  		<replaceName>SceneTypeAudioArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_scenetypeaudioarr</name>
  		<replaceName>SceneTypeAudioArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetypeaudioarr</name>
  		<replaceName>SceneTypeAudioArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>scenetypeaudioarr_size</name>
  		<replaceName>SceneTypeAudioArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SceneTypeAudio& scenetypeaudioarr(int index) const;
  inline ::pb::SceneTypeAudio* mutable_scenetypeaudioarr(int index);
  inline ::pb::SceneTypeAudio* add_scenetypeaudioarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::SceneTypeAudio >&
      scenetypeaudioarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::SceneTypeAudio >*
      mutable_scenetypeaudioarr();

  // optional string ObjectName = 3;
  inline bool has_objectname() const;
  inline void clear_objectname();
  static const int kObjectNameFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SceneInteractiveObjectAudio</name>
  	<Function>
  		<name>objectname</name>
  		<replaceName>ObjectName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_objectname</name>
  		<replaceName>ObjectName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_objectname</name>
  		<replaceName>ObjectName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& objectname() const;
  inline void set_objectname(const ::std::string& value);
  inline void set_objectname(const char* value);
  inline void set_objectname(const char* value, size_t size);
  inline ::std::string* mutable_objectname();
  inline ::std::string* release_objectname();
  inline void set_allocated_objectname(::std::string* objectname);

  // @@protoc_insertion_point(class_scope:pb.SceneInteractiveObjectAudio)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_objectname();
  inline void clear_has_objectname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::SceneTypeAudio > scenetypeaudioarr_;
  ::std::string* objectname_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_module_2fSceneInteractiveObjectAudio_2eproto();
  friend void protobuf_AssignDesc_module_2fSceneInteractiveObjectAudio_2eproto();
  friend void protobuf_ShutdownFile_module_2fSceneInteractiveObjectAudio_2eproto();

  void InitAsDefaultInstance();
  static SceneInteractiveObjectAudio* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SceneTypeAudio</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SceneInteractiveObjectAudio.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SceneTypeAudio : public ::google::protobuf::Message {
 public:
  SceneTypeAudio();
  virtual ~SceneTypeAudio();

  SceneTypeAudio(const SceneTypeAudio& from);

  inline SceneTypeAudio& operator=(const SceneTypeAudio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneTypeAudio& default_instance();

  void Swap(SceneTypeAudio* other);

  // implements Message ----------------------------------------------

  SceneTypeAudio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneTypeAudio& from);
  void MergeFrom(const SceneTypeAudio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EAudioSceneType SceneType = 1;
  inline bool has_scenetype() const;
  inline void clear_scenetype();
  static const int kSceneTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SceneTypeAudio</name>
  	<Function>
  		<name>scenetype</name>
  		<replaceName>SceneType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetype</name>
  		<replaceName>SceneType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetype</name>
  		<replaceName>SceneType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAudioSceneType scenetype() const;
  inline void set_scenetype(::pb::EAudioSceneType value);

  // optional .pb.AudioInfo DownAduioInfo = 2;
  inline bool has_downaduioinfo() const;
  inline void clear_downaduioinfo();
  static const int kDownAduioInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SceneTypeAudio</name>
  	<Function>
  		<name>downaduioinfo</name>
  		<replaceName>DownAduioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_downaduioinfo</name>
  		<replaceName>DownAduioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_downaduioinfo</name>
  		<replaceName>DownAduioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_downaduioinfo</name>
  		<replaceName>DownAduioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AudioInfo& downaduioinfo() const;
  inline ::pb::AudioInfo* mutable_downaduioinfo();
  inline ::pb::AudioInfo* release_downaduioinfo();
  inline void set_allocated_downaduioinfo(::pb::AudioInfo* downaduioinfo);

  // optional .pb.AudioInfo UpAudioInfo = 3;
  inline bool has_upaudioinfo() const;
  inline void clear_upaudioinfo();
  static const int kUpAudioInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SceneTypeAudio</name>
  	<Function>
  		<name>upaudioinfo</name>
  		<replaceName>UpAudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_upaudioinfo</name>
  		<replaceName>UpAudioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_upaudioinfo</name>
  		<replaceName>UpAudioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_upaudioinfo</name>
  		<replaceName>UpAudioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AudioInfo& upaudioinfo() const;
  inline ::pb::AudioInfo* mutable_upaudioinfo();
  inline ::pb::AudioInfo* release_upaudioinfo();
  inline void set_allocated_upaudioinfo(::pb::AudioInfo* upaudioinfo);

  // @@protoc_insertion_point(class_scope:pb.SceneTypeAudio)
 private:
  inline void set_has_scenetype();
  inline void clear_has_scenetype();
  inline void set_has_downaduioinfo();
  inline void clear_has_downaduioinfo();
  inline void set_has_upaudioinfo();
  inline void clear_has_upaudioinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::AudioInfo* downaduioinfo_;
  ::pb::AudioInfo* upaudioinfo_;
  int scenetype_;
  friend void  protobuf_AddDesc_module_2fSceneInteractiveObjectAudio_2eproto();
  friend void protobuf_AssignDesc_module_2fSceneInteractiveObjectAudio_2eproto();
  friend void protobuf_ShutdownFile_module_2fSceneInteractiveObjectAudio_2eproto();

  void InitAsDefaultInstance();
  static SceneTypeAudio* default_instance_;
};
// ===================================================================


// ===================================================================

// SceneInteractiveObjectAudio

// optional int32 Id = 1;
inline bool SceneInteractiveObjectAudio::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneInteractiveObjectAudio::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneInteractiveObjectAudio::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneInteractiveObjectAudio::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SceneInteractiveObjectAudio::id() const {
  // @@protoc_insertion_point(field_get:pb.SceneInteractiveObjectAudio.Id)
  return id_;
}
inline void SceneInteractiveObjectAudio::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.SceneInteractiveObjectAudio.Id)
}

// repeated .pb.SceneTypeAudio SceneTypeAudioArr = 2;
inline int SceneInteractiveObjectAudio::scenetypeaudioarr_size() const {
  return scenetypeaudioarr_.size();
}
inline void SceneInteractiveObjectAudio::clear_scenetypeaudioarr() {
  scenetypeaudioarr_.Clear();
}
inline const ::pb::SceneTypeAudio& SceneInteractiveObjectAudio::scenetypeaudioarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.SceneInteractiveObjectAudio.SceneTypeAudioArr)
  return scenetypeaudioarr_.Get(index);
}
inline ::pb::SceneTypeAudio* SceneInteractiveObjectAudio::mutable_scenetypeaudioarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SceneInteractiveObjectAudio.SceneTypeAudioArr)
  return scenetypeaudioarr_.Mutable(index);
}
inline ::pb::SceneTypeAudio* SceneInteractiveObjectAudio::add_scenetypeaudioarr() {
  // @@protoc_insertion_point(field_add:pb.SceneInteractiveObjectAudio.SceneTypeAudioArr)
  return scenetypeaudioarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SceneTypeAudio >&
SceneInteractiveObjectAudio::scenetypeaudioarr() const {
  // @@protoc_insertion_point(field_list:pb.SceneInteractiveObjectAudio.SceneTypeAudioArr)
  return scenetypeaudioarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SceneTypeAudio >*
SceneInteractiveObjectAudio::mutable_scenetypeaudioarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.SceneInteractiveObjectAudio.SceneTypeAudioArr)
  return &scenetypeaudioarr_;
}

// optional string ObjectName = 3;
inline bool SceneInteractiveObjectAudio::has_objectname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SceneInteractiveObjectAudio::set_has_objectname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SceneInteractiveObjectAudio::clear_has_objectname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SceneInteractiveObjectAudio::clear_objectname() {
  if (objectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objectname_->clear();
  }
  clear_has_objectname();
}
inline const ::std::string& SceneInteractiveObjectAudio::objectname() const {
  // @@protoc_insertion_point(field_get:pb.SceneInteractiveObjectAudio.ObjectName)
  return *objectname_;
}
inline void SceneInteractiveObjectAudio::set_objectname(const ::std::string& value) {
  set_has_objectname();
  if (objectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objectname_ = new ::std::string;
  }
  objectname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SceneInteractiveObjectAudio.ObjectName)
}
inline void SceneInteractiveObjectAudio::set_objectname(const char* value) {
  set_has_objectname();
  if (objectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objectname_ = new ::std::string;
  }
  objectname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SceneInteractiveObjectAudio.ObjectName)
}
inline void SceneInteractiveObjectAudio::set_objectname(const char* value, size_t size) {
  set_has_objectname();
  if (objectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objectname_ = new ::std::string;
  }
  objectname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SceneInteractiveObjectAudio.ObjectName)
}
inline ::std::string* SceneInteractiveObjectAudio::mutable_objectname() {
  set_has_objectname();
  if (objectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objectname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SceneInteractiveObjectAudio.ObjectName)
  return objectname_;
}
inline ::std::string* SceneInteractiveObjectAudio::release_objectname() {
  clear_has_objectname();
  if (objectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = objectname_;
    objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SceneInteractiveObjectAudio::set_allocated_objectname(::std::string* objectname) {
  if (objectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete objectname_;
  }
  if (objectname) {
    set_has_objectname();
    objectname_ = objectname;
  } else {
    clear_has_objectname();
    objectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SceneInteractiveObjectAudio.ObjectName)
}

// -------------------------------------------------------------------

// SceneTypeAudio

// optional .pb.EAudioSceneType SceneType = 1;
inline bool SceneTypeAudio::has_scenetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneTypeAudio::set_has_scenetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneTypeAudio::clear_has_scenetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneTypeAudio::clear_scenetype() {
  scenetype_ = 1;
  clear_has_scenetype();
}
inline ::pb::EAudioSceneType SceneTypeAudio::scenetype() const {
  // @@protoc_insertion_point(field_get:pb.SceneTypeAudio.SceneType)
  return static_cast< ::pb::EAudioSceneType >(scenetype_);
}
inline void SceneTypeAudio::set_scenetype(::pb::EAudioSceneType value) {
  assert(::pb::EAudioSceneType_IsValid(value));
  set_has_scenetype();
  scenetype_ = value;
  // @@protoc_insertion_point(field_set:pb.SceneTypeAudio.SceneType)
}

// optional .pb.AudioInfo DownAduioInfo = 2;
inline bool SceneTypeAudio::has_downaduioinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneTypeAudio::set_has_downaduioinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneTypeAudio::clear_has_downaduioinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneTypeAudio::clear_downaduioinfo() {
  if (downaduioinfo_ != NULL) downaduioinfo_->::pb::AudioInfo::Clear();
  clear_has_downaduioinfo();
}
inline const ::pb::AudioInfo& SceneTypeAudio::downaduioinfo() const {
  // @@protoc_insertion_point(field_get:pb.SceneTypeAudio.DownAduioInfo)
  return downaduioinfo_ != NULL ? *downaduioinfo_ : *default_instance_->downaduioinfo_;
}
inline ::pb::AudioInfo* SceneTypeAudio::mutable_downaduioinfo() {
  set_has_downaduioinfo();
  if (downaduioinfo_ == NULL) downaduioinfo_ = new ::pb::AudioInfo;
  // @@protoc_insertion_point(field_mutable:pb.SceneTypeAudio.DownAduioInfo)
  return downaduioinfo_;
}
inline ::pb::AudioInfo* SceneTypeAudio::release_downaduioinfo() {
  clear_has_downaduioinfo();
  ::pb::AudioInfo* temp = downaduioinfo_;
  downaduioinfo_ = NULL;
  return temp;
}
inline void SceneTypeAudio::set_allocated_downaduioinfo(::pb::AudioInfo* downaduioinfo) {
  delete downaduioinfo_;
  downaduioinfo_ = downaduioinfo;
  if (downaduioinfo) {
    set_has_downaduioinfo();
  } else {
    clear_has_downaduioinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SceneTypeAudio.DownAduioInfo)
}

// optional .pb.AudioInfo UpAudioInfo = 3;
inline bool SceneTypeAudio::has_upaudioinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SceneTypeAudio::set_has_upaudioinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SceneTypeAudio::clear_has_upaudioinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SceneTypeAudio::clear_upaudioinfo() {
  if (upaudioinfo_ != NULL) upaudioinfo_->::pb::AudioInfo::Clear();
  clear_has_upaudioinfo();
}
inline const ::pb::AudioInfo& SceneTypeAudio::upaudioinfo() const {
  // @@protoc_insertion_point(field_get:pb.SceneTypeAudio.UpAudioInfo)
  return upaudioinfo_ != NULL ? *upaudioinfo_ : *default_instance_->upaudioinfo_;
}
inline ::pb::AudioInfo* SceneTypeAudio::mutable_upaudioinfo() {
  set_has_upaudioinfo();
  if (upaudioinfo_ == NULL) upaudioinfo_ = new ::pb::AudioInfo;
  // @@protoc_insertion_point(field_mutable:pb.SceneTypeAudio.UpAudioInfo)
  return upaudioinfo_;
}
inline ::pb::AudioInfo* SceneTypeAudio::release_upaudioinfo() {
  clear_has_upaudioinfo();
  ::pb::AudioInfo* temp = upaudioinfo_;
  upaudioinfo_ = NULL;
  return temp;
}
inline void SceneTypeAudio::set_allocated_upaudioinfo(::pb::AudioInfo* upaudioinfo) {
  delete upaudioinfo_;
  upaudioinfo_ = upaudioinfo;
  if (upaudioinfo) {
    set_has_upaudioinfo();
  } else {
    clear_has_upaudioinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SceneTypeAudio.UpAudioInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EAudioSceneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAudioSceneType>() {
  return ::pb::EAudioSceneType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fSceneInteractiveObjectAudio_2eproto__INCLUDED
