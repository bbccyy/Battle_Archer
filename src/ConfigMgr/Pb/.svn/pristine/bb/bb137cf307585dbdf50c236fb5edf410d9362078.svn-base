// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActLanternFeatival.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActLanternFeatival.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActLanternFestivalBuyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLanternFestivalBuyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLanternFestivalTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLanternFestivalTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLanternFestivalLanternInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLanternFestivalLanternInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLanternFestivalGrandPrizeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLanternFestivalGrandPrizeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLanternFestivalGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLanternFestivalGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLanternFestivalGetTaskInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLanternFestivalGetTaskInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLanternFestivalGetTaskRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLanternFestivalGetTaskRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLanternFestivalGetTaskRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLanternFestivalGetTaskRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLanternFestivalGetScoreRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLanternFestivalGetScoreRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLanternFestivalGetScoreRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLanternFestivalGetScoreRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLanternFestivalLightUpOrShowLanternReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLanternFestivalLightUpOrShowLanternReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLanternFestivalLightUpOrShowLanternRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLanternFestivalLightUpOrShowLanternRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLanternFestivalLoopLayerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLanternFestivalLoopLayerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLanternFestivalSetLayerFinallyRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLanternFestivalSetLayerFinallyRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLanternFestivalNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLanternFestivalNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto() {
  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActLanternFeatival.proto");
  GOOGLE_CHECK(file != NULL);
  TActLanternFestivalBuyInfo_descriptor_ = file->message_type(0);
  static const int TActLanternFestivalBuyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalBuyInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalBuyInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalBuyInfo, buytime_),
  };
  TActLanternFestivalBuyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLanternFestivalBuyInfo_descriptor_,
      TActLanternFestivalBuyInfo::default_instance_,
      TActLanternFestivalBuyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalBuyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalBuyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLanternFestivalBuyInfo));
  TActLanternFestivalTaskInfo_descriptor_ = file->message_type(1);
  static const int TActLanternFestivalTaskInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalTaskInfo, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalTaskInfo, num_),
  };
  TActLanternFestivalTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLanternFestivalTaskInfo_descriptor_,
      TActLanternFestivalTaskInfo::default_instance_,
      TActLanternFestivalTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLanternFestivalTaskInfo));
  TActLanternFestivalLanternInfo_descriptor_ = file->message_type(2);
  static const int TActLanternFestivalLanternInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalLanternInfo, lanternid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalLanternInfo, reward_),
  };
  TActLanternFestivalLanternInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLanternFestivalLanternInfo_descriptor_,
      TActLanternFestivalLanternInfo::default_instance_,
      TActLanternFestivalLanternInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalLanternInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalLanternInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLanternFestivalLanternInfo));
  TActLanternFestivalGrandPrizeInfo_descriptor_ = file->message_type(3);
  static const int TActLanternFestivalGrandPrizeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGrandPrizeInfo, layerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGrandPrizeInfo, grandprizeindex_),
  };
  TActLanternFestivalGrandPrizeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLanternFestivalGrandPrizeInfo_descriptor_,
      TActLanternFestivalGrandPrizeInfo::default_instance_,
      TActLanternFestivalGrandPrizeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGrandPrizeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGrandPrizeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLanternFestivalGrandPrizeInfo));
  TActLanternFestivalGetInfoRsp_descriptor_ = file->message_type(4);
  static const int TActLanternFestivalGetInfoRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetInfoRsp, arrrmbgoodbuyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetInfoRsp, layerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetInfoRsp, totallanterninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetInfoRsp, grandprizestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetInfoRsp, resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetInfoRsp, grandprizeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetInfoRsp, allgrandprizearr_),
  };
  TActLanternFestivalGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLanternFestivalGetInfoRsp_descriptor_,
      TActLanternFestivalGetInfoRsp::default_instance_,
      TActLanternFestivalGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLanternFestivalGetInfoRsp));
  TActLanternFestivalGetTaskInfoRsp_descriptor_ = file->message_type(5);
  static const int TActLanternFestivalGetTaskInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetTaskInfoRsp, taskinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetTaskInfoRsp, arrtaskrewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetTaskInfoRsp, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetTaskInfoRsp, scoreaward_),
  };
  TActLanternFestivalGetTaskInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLanternFestivalGetTaskInfoRsp_descriptor_,
      TActLanternFestivalGetTaskInfoRsp::default_instance_,
      TActLanternFestivalGetTaskInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetTaskInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetTaskInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLanternFestivalGetTaskInfoRsp));
  TActLanternFestivalGetTaskRewardReq_descriptor_ = file->message_type(6);
  static const int TActLanternFestivalGetTaskRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetTaskRewardReq, taskid_),
  };
  TActLanternFestivalGetTaskRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLanternFestivalGetTaskRewardReq_descriptor_,
      TActLanternFestivalGetTaskRewardReq::default_instance_,
      TActLanternFestivalGetTaskRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetTaskRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetTaskRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLanternFestivalGetTaskRewardReq));
  TActLanternFestivalGetTaskRewardRsp_descriptor_ = file->message_type(7);
  static const int TActLanternFestivalGetTaskRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetTaskRewardRsp, arrreward_),
  };
  TActLanternFestivalGetTaskRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLanternFestivalGetTaskRewardRsp_descriptor_,
      TActLanternFestivalGetTaskRewardRsp::default_instance_,
      TActLanternFestivalGetTaskRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetTaskRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetTaskRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLanternFestivalGetTaskRewardRsp));
  TActLanternFestivalGetScoreRewardReq_descriptor_ = file->message_type(8);
  static const int TActLanternFestivalGetScoreRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetScoreRewardReq, scoreawardtid_),
  };
  TActLanternFestivalGetScoreRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLanternFestivalGetScoreRewardReq_descriptor_,
      TActLanternFestivalGetScoreRewardReq::default_instance_,
      TActLanternFestivalGetScoreRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetScoreRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetScoreRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLanternFestivalGetScoreRewardReq));
  TActLanternFestivalGetScoreRewardRsp_descriptor_ = file->message_type(9);
  static const int TActLanternFestivalGetScoreRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetScoreRewardRsp, arrreward_),
  };
  TActLanternFestivalGetScoreRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLanternFestivalGetScoreRewardRsp_descriptor_,
      TActLanternFestivalGetScoreRewardRsp::default_instance_,
      TActLanternFestivalGetScoreRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetScoreRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalGetScoreRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLanternFestivalGetScoreRewardRsp));
  TActLanternFestivalLightUpOrShowLanternReq_descriptor_ = file->message_type(10);
  static const int TActLanternFestivalLightUpOrShowLanternReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalLightUpOrShowLanternReq, id_),
  };
  TActLanternFestivalLightUpOrShowLanternReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLanternFestivalLightUpOrShowLanternReq_descriptor_,
      TActLanternFestivalLightUpOrShowLanternReq::default_instance_,
      TActLanternFestivalLightUpOrShowLanternReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalLightUpOrShowLanternReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalLightUpOrShowLanternReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLanternFestivalLightUpOrShowLanternReq));
  TActLanternFestivalLightUpOrShowLanternRsp_descriptor_ = file->message_type(11);
  static const int TActLanternFestivalLightUpOrShowLanternRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalLightUpOrShowLanternRsp, arrreward_),
  };
  TActLanternFestivalLightUpOrShowLanternRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLanternFestivalLightUpOrShowLanternRsp_descriptor_,
      TActLanternFestivalLightUpOrShowLanternRsp::default_instance_,
      TActLanternFestivalLightUpOrShowLanternRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalLightUpOrShowLanternRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalLightUpOrShowLanternRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLanternFestivalLightUpOrShowLanternRsp));
  TActLanternFestivalLoopLayerReq_descriptor_ = file->message_type(12);
  static const int TActLanternFestivalLoopLayerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalLoopLayerReq, id_),
  };
  TActLanternFestivalLoopLayerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLanternFestivalLoopLayerReq_descriptor_,
      TActLanternFestivalLoopLayerReq::default_instance_,
      TActLanternFestivalLoopLayerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalLoopLayerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalLoopLayerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLanternFestivalLoopLayerReq));
  TActLanternFestivalSetLayerFinallyRewardReq_descriptor_ = file->message_type(13);
  static const int TActLanternFestivalSetLayerFinallyRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalSetLayerFinallyRewardReq, rewardinfo_),
  };
  TActLanternFestivalSetLayerFinallyRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLanternFestivalSetLayerFinallyRewardReq_descriptor_,
      TActLanternFestivalSetLayerFinallyRewardReq::default_instance_,
      TActLanternFestivalSetLayerFinallyRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalSetLayerFinallyRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalSetLayerFinallyRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLanternFestivalSetLayerFinallyRewardReq));
  TActLanternFestivalNotify_descriptor_ = file->message_type(14);
  static const int TActLanternFestivalNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalNotify, arrrmbgoodbuyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalNotify, arrtaskinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalNotify, grandprize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalNotify, allgrandprizearr_),
  };
  TActLanternFestivalNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLanternFestivalNotify_descriptor_,
      TActLanternFestivalNotify::default_instance_,
      TActLanternFestivalNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLanternFestivalNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLanternFestivalNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActLanternFeatival_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLanternFestivalBuyInfo_descriptor_, &TActLanternFestivalBuyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLanternFestivalTaskInfo_descriptor_, &TActLanternFestivalTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLanternFestivalLanternInfo_descriptor_, &TActLanternFestivalLanternInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLanternFestivalGrandPrizeInfo_descriptor_, &TActLanternFestivalGrandPrizeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLanternFestivalGetInfoRsp_descriptor_, &TActLanternFestivalGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLanternFestivalGetTaskInfoRsp_descriptor_, &TActLanternFestivalGetTaskInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLanternFestivalGetTaskRewardReq_descriptor_, &TActLanternFestivalGetTaskRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLanternFestivalGetTaskRewardRsp_descriptor_, &TActLanternFestivalGetTaskRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLanternFestivalGetScoreRewardReq_descriptor_, &TActLanternFestivalGetScoreRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLanternFestivalGetScoreRewardRsp_descriptor_, &TActLanternFestivalGetScoreRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLanternFestivalLightUpOrShowLanternReq_descriptor_, &TActLanternFestivalLightUpOrShowLanternReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLanternFestivalLightUpOrShowLanternRsp_descriptor_, &TActLanternFestivalLightUpOrShowLanternRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLanternFestivalLoopLayerReq_descriptor_, &TActLanternFestivalLoopLayerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLanternFestivalSetLayerFinallyRewardReq_descriptor_, &TActLanternFestivalSetLayerFinallyRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLanternFestivalNotify_descriptor_, &TActLanternFestivalNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto() {
  delete TActLanternFestivalBuyInfo::default_instance_;
  delete TActLanternFestivalBuyInfo_reflection_;
  delete TActLanternFestivalTaskInfo::default_instance_;
  delete TActLanternFestivalTaskInfo_reflection_;
  delete TActLanternFestivalLanternInfo::default_instance_;
  delete TActLanternFestivalLanternInfo_reflection_;
  delete TActLanternFestivalGrandPrizeInfo::default_instance_;
  delete TActLanternFestivalGrandPrizeInfo_reflection_;
  delete TActLanternFestivalGetInfoRsp::default_instance_;
  delete TActLanternFestivalGetInfoRsp_reflection_;
  delete TActLanternFestivalGetTaskInfoRsp::default_instance_;
  delete TActLanternFestivalGetTaskInfoRsp_reflection_;
  delete TActLanternFestivalGetTaskRewardReq::default_instance_;
  delete TActLanternFestivalGetTaskRewardReq_reflection_;
  delete TActLanternFestivalGetTaskRewardRsp::default_instance_;
  delete TActLanternFestivalGetTaskRewardRsp_reflection_;
  delete TActLanternFestivalGetScoreRewardReq::default_instance_;
  delete TActLanternFestivalGetScoreRewardReq_reflection_;
  delete TActLanternFestivalGetScoreRewardRsp::default_instance_;
  delete TActLanternFestivalGetScoreRewardRsp_reflection_;
  delete TActLanternFestivalLightUpOrShowLanternReq::default_instance_;
  delete TActLanternFestivalLightUpOrShowLanternReq_reflection_;
  delete TActLanternFestivalLightUpOrShowLanternRsp::default_instance_;
  delete TActLanternFestivalLightUpOrShowLanternRsp_reflection_;
  delete TActLanternFestivalLoopLayerReq::default_instance_;
  delete TActLanternFestivalLoopLayerReq_reflection_;
  delete TActLanternFestivalSetLayerFinallyRewardReq::default_instance_;
  delete TActLanternFestivalSetLayerFinallyRewardReq_reflection_;
  delete TActLanternFestivalNotify::default_instance_;
  delete TActLanternFestivalNotify_reflection_;
}

void protobuf_AddDesc_net_2fActLanternFeatival_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fOpenActivity_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034net/ActLanternFeatival.proto\022\002pb\032\026net/"
    "CommonReward.proto\032\026net/OpenActivity.pro"
    "to\"F\n\032TActLanternFestivalBuyInfo\022\n\n\002Id\030\001"
    " \001(\r\022\013\n\003Num\030\002 \001(\r\022\017\n\007BuyTime\030\003 \001(\004\"<\n\033TA"
    "ctLanternFestivalTaskInfo\022\020\n\010TaskType\030\001 "
    "\001(\r\022\013\n\003Num\030\002 \001(\r\"V\n\036TActLanternFestivalL"
    "anternInfo\022\021\n\tLanternId\030\001 \001(\r\022!\n\006Reward\030"
    "\002 \001(\0132\021.pb.TCommonReward\"M\n!TActLanternF"
    "estivalGrandPrizeInfo\022\017\n\007LayerId\030\001 \001(\r\022\027"
    "\n\017GrandPrizeIndex\030\002 \001(\r\"\326\002\n\035TActLanternF"
    "estivalGetInfoRsp\0229\n\021ArrRmbGoodBuyInfo\030\001"
    " \003(\0132\036.pb.TActLanternFestivalBuyInfo\022\017\n\007"
    "LayerId\030\002 \001(\r\022<\n\020TotalLanternInfo\030\003 \003(\0132"
    "\".pb.TActLanternFestivalLanternInfo\022\030\n\020G"
    "randPrizeStatus\030\004 \001(\r\022\021\n\tResetTime\030\005 \001(\r"
    "\022=\n\016GrandPrizeInfo\030\006 \001(\0132%.pb.TActLanter"
    "nFestivalGrandPrizeInfo\022\?\n\020AllGrandPrize"
    "Arr\030\007 \003(\0132%.pb.TActLanternFestivalGrandP"
    "rizeInfo\"\255\001\n!TActLanternFestivalGetTaskI"
    "nfoRsp\0221\n\010TaskInfo\030\001 \003(\0132\037.pb.TActLanter"
    "nFestivalTaskInfo\0222\n\021ArrTaskRewardInfo\030\002"
    " \003(\0132\027.pb.TActivityRewardInfo\022\r\n\005Score\030\003"
    " \001(\r\022\022\n\nScoreAward\030\004 \003(\r\"5\n#TActLanternF"
    "estivalGetTaskRewardReq\022\016\n\006TaskId\030\001 \001(\r\""
    "K\n#TActLanternFestivalGetTaskRewardRsp\022$"
    "\n\tArrReward\030\001 \003(\0132\021.pb.TCommonReward\"=\n$"
    "TActLanternFestivalGetScoreRewardReq\022\025\n\r"
    "ScoreAwardTid\030\001 \001(\r\"L\n$TActLanternFestiv"
    "alGetScoreRewardRsp\022$\n\tArrReward\030\001 \003(\0132\021"
    ".pb.TCommonReward\"8\n*TActLanternFestival"
    "LightUpOrShowLanternReq\022\n\n\002Id\030\001 \001(\r\"R\n*T"
    "ActLanternFestivalLightUpOrShowLanternRs"
    "p\022$\n\tArrReward\030\001 \003(\0132\021.pb.TCommonReward\""
    "-\n\037TActLanternFestivalLoopLayerReq\022\n\n\002Id"
    "\030\001 \001(\r\"h\n+TActLanternFestivalSetLayerFin"
    "allyRewardReq\0229\n\nrewardInfo\030\001 \001(\0132%.pb.T"
    "ActLanternFestivalGrandPrizeInfo\"\341\001\n\031TAc"
    "tLanternFestivalNotify\0229\n\021ArrRmbGoodBuyI"
    "nfo\030\001 \003(\0132\036.pb.TActLanternFestivalBuyInf"
    "o\0224\n\013ArrTaskInfo\030\002 \003(\0132\037.pb.TActLanternF"
    "estivalTaskInfo\022\022\n\nGrandPrize\030\003 \001(\r\022\?\n\020A"
    "llGrandPrizeArr\030\004 \003(\0132%.pb.TActLanternFe"
    "stivalGrandPrizeInfo", 1700);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActLanternFeatival.proto", &protobuf_RegisterTypes);
  TActLanternFestivalBuyInfo::default_instance_ = new TActLanternFestivalBuyInfo();
  TActLanternFestivalTaskInfo::default_instance_ = new TActLanternFestivalTaskInfo();
  TActLanternFestivalLanternInfo::default_instance_ = new TActLanternFestivalLanternInfo();
  TActLanternFestivalGrandPrizeInfo::default_instance_ = new TActLanternFestivalGrandPrizeInfo();
  TActLanternFestivalGetInfoRsp::default_instance_ = new TActLanternFestivalGetInfoRsp();
  TActLanternFestivalGetTaskInfoRsp::default_instance_ = new TActLanternFestivalGetTaskInfoRsp();
  TActLanternFestivalGetTaskRewardReq::default_instance_ = new TActLanternFestivalGetTaskRewardReq();
  TActLanternFestivalGetTaskRewardRsp::default_instance_ = new TActLanternFestivalGetTaskRewardRsp();
  TActLanternFestivalGetScoreRewardReq::default_instance_ = new TActLanternFestivalGetScoreRewardReq();
  TActLanternFestivalGetScoreRewardRsp::default_instance_ = new TActLanternFestivalGetScoreRewardRsp();
  TActLanternFestivalLightUpOrShowLanternReq::default_instance_ = new TActLanternFestivalLightUpOrShowLanternReq();
  TActLanternFestivalLightUpOrShowLanternRsp::default_instance_ = new TActLanternFestivalLightUpOrShowLanternRsp();
  TActLanternFestivalLoopLayerReq::default_instance_ = new TActLanternFestivalLoopLayerReq();
  TActLanternFestivalSetLayerFinallyRewardReq::default_instance_ = new TActLanternFestivalSetLayerFinallyRewardReq();
  TActLanternFestivalNotify::default_instance_ = new TActLanternFestivalNotify();
  TActLanternFestivalBuyInfo::default_instance_->InitAsDefaultInstance();
  TActLanternFestivalTaskInfo::default_instance_->InitAsDefaultInstance();
  TActLanternFestivalLanternInfo::default_instance_->InitAsDefaultInstance();
  TActLanternFestivalGrandPrizeInfo::default_instance_->InitAsDefaultInstance();
  TActLanternFestivalGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActLanternFestivalGetTaskInfoRsp::default_instance_->InitAsDefaultInstance();
  TActLanternFestivalGetTaskRewardReq::default_instance_->InitAsDefaultInstance();
  TActLanternFestivalGetTaskRewardRsp::default_instance_->InitAsDefaultInstance();
  TActLanternFestivalGetScoreRewardReq::default_instance_->InitAsDefaultInstance();
  TActLanternFestivalGetScoreRewardRsp::default_instance_->InitAsDefaultInstance();
  TActLanternFestivalLightUpOrShowLanternReq::default_instance_->InitAsDefaultInstance();
  TActLanternFestivalLightUpOrShowLanternRsp::default_instance_->InitAsDefaultInstance();
  TActLanternFestivalLoopLayerReq::default_instance_->InitAsDefaultInstance();
  TActLanternFestivalSetLayerFinallyRewardReq::default_instance_->InitAsDefaultInstance();
  TActLanternFestivalNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActLanternFeatival_2eproto {
  StaticDescriptorInitializer_net_2fActLanternFeatival_2eproto() {
    protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  }
} static_descriptor_initializer_net_2fActLanternFeatival_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActLanternFestivalBuyInfo::kIdFieldNumber;
const int TActLanternFestivalBuyInfo::kNumFieldNumber;
const int TActLanternFestivalBuyInfo::kBuyTimeFieldNumber;
#endif  // !_MSC_VER

TActLanternFestivalBuyInfo::TActLanternFestivalBuyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLanternFestivalBuyInfo)
}

void TActLanternFestivalBuyInfo::InitAsDefaultInstance() {
}

TActLanternFestivalBuyInfo::TActLanternFestivalBuyInfo(const TActLanternFestivalBuyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLanternFestivalBuyInfo)
}

void TActLanternFestivalBuyInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  buytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLanternFestivalBuyInfo::~TActLanternFestivalBuyInfo() {
  // @@protoc_insertion_point(destructor:pb.TActLanternFestivalBuyInfo)
  SharedDtor();
}

void TActLanternFestivalBuyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLanternFestivalBuyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLanternFestivalBuyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLanternFestivalBuyInfo_descriptor_;
}

const TActLanternFestivalBuyInfo& TActLanternFestivalBuyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  return *default_instance_;
}

TActLanternFestivalBuyInfo* TActLanternFestivalBuyInfo::default_instance_ = NULL;

TActLanternFestivalBuyInfo* TActLanternFestivalBuyInfo::New() const {
  return new TActLanternFestivalBuyInfo;
}

void TActLanternFestivalBuyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActLanternFestivalBuyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buytime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLanternFestivalBuyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLanternFestivalBuyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BuyTime;
        break;
      }

      // optional uint64 BuyTime = 3;
      case 3: {
        if (tag == 24) {
         parse_BuyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLanternFestivalBuyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLanternFestivalBuyInfo)
  return false;
#undef DO_
}

void TActLanternFestivalBuyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLanternFestivalBuyInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint64 BuyTime = 3;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->buytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLanternFestivalBuyInfo)
}

::google::protobuf::uint8* TActLanternFestivalBuyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLanternFestivalBuyInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint64 BuyTime = 3;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->buytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLanternFestivalBuyInfo)
  return target;
}

int TActLanternFestivalBuyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint64 BuyTime = 3;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLanternFestivalBuyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLanternFestivalBuyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLanternFestivalBuyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLanternFestivalBuyInfo::MergeFrom(const TActLanternFestivalBuyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLanternFestivalBuyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLanternFestivalBuyInfo::CopyFrom(const TActLanternFestivalBuyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLanternFestivalBuyInfo::IsInitialized() const {

  return true;
}

void TActLanternFestivalBuyInfo::Swap(TActLanternFestivalBuyInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(buytime_, other->buytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLanternFestivalBuyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLanternFestivalBuyInfo_descriptor_;
  metadata.reflection = TActLanternFestivalBuyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLanternFestivalTaskInfo::kTaskTypeFieldNumber;
const int TActLanternFestivalTaskInfo::kNumFieldNumber;
#endif  // !_MSC_VER

TActLanternFestivalTaskInfo::TActLanternFestivalTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLanternFestivalTaskInfo)
}

void TActLanternFestivalTaskInfo::InitAsDefaultInstance() {
}

TActLanternFestivalTaskInfo::TActLanternFestivalTaskInfo(const TActLanternFestivalTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLanternFestivalTaskInfo)
}

void TActLanternFestivalTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  tasktype_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLanternFestivalTaskInfo::~TActLanternFestivalTaskInfo() {
  // @@protoc_insertion_point(destructor:pb.TActLanternFestivalTaskInfo)
  SharedDtor();
}

void TActLanternFestivalTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLanternFestivalTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLanternFestivalTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLanternFestivalTaskInfo_descriptor_;
}

const TActLanternFestivalTaskInfo& TActLanternFestivalTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  return *default_instance_;
}

TActLanternFestivalTaskInfo* TActLanternFestivalTaskInfo::default_instance_ = NULL;

TActLanternFestivalTaskInfo* TActLanternFestivalTaskInfo::New() const {
  return new TActLanternFestivalTaskInfo;
}

void TActLanternFestivalTaskInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActLanternFestivalTaskInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tasktype_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLanternFestivalTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLanternFestivalTaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLanternFestivalTaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLanternFestivalTaskInfo)
  return false;
#undef DO_
}

void TActLanternFestivalTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLanternFestivalTaskInfo)
  // optional uint32 TaskType = 1;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tasktype(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLanternFestivalTaskInfo)
}

::google::protobuf::uint8* TActLanternFestivalTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLanternFestivalTaskInfo)
  // optional uint32 TaskType = 1;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tasktype(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLanternFestivalTaskInfo)
  return target;
}

int TActLanternFestivalTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskType = 1;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasktype());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLanternFestivalTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLanternFestivalTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLanternFestivalTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLanternFestivalTaskInfo::MergeFrom(const TActLanternFestivalTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLanternFestivalTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLanternFestivalTaskInfo::CopyFrom(const TActLanternFestivalTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLanternFestivalTaskInfo::IsInitialized() const {

  return true;
}

void TActLanternFestivalTaskInfo::Swap(TActLanternFestivalTaskInfo* other) {
  if (other != this) {
    std::swap(tasktype_, other->tasktype_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLanternFestivalTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLanternFestivalTaskInfo_descriptor_;
  metadata.reflection = TActLanternFestivalTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLanternFestivalLanternInfo::kLanternIdFieldNumber;
const int TActLanternFestivalLanternInfo::kRewardFieldNumber;
#endif  // !_MSC_VER

TActLanternFestivalLanternInfo::TActLanternFestivalLanternInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLanternFestivalLanternInfo)
}

void TActLanternFestivalLanternInfo::InitAsDefaultInstance() {
  reward_ = const_cast< ::pb::TCommonReward*>(&::pb::TCommonReward::default_instance());
}

TActLanternFestivalLanternInfo::TActLanternFestivalLanternInfo(const TActLanternFestivalLanternInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLanternFestivalLanternInfo)
}

void TActLanternFestivalLanternInfo::SharedCtor() {
  _cached_size_ = 0;
  lanternid_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLanternFestivalLanternInfo::~TActLanternFestivalLanternInfo() {
  // @@protoc_insertion_point(destructor:pb.TActLanternFestivalLanternInfo)
  SharedDtor();
}

void TActLanternFestivalLanternInfo::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void TActLanternFestivalLanternInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLanternFestivalLanternInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLanternFestivalLanternInfo_descriptor_;
}

const TActLanternFestivalLanternInfo& TActLanternFestivalLanternInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  return *default_instance_;
}

TActLanternFestivalLanternInfo* TActLanternFestivalLanternInfo::default_instance_ = NULL;

TActLanternFestivalLanternInfo* TActLanternFestivalLanternInfo::New() const {
  return new TActLanternFestivalLanternInfo;
}

void TActLanternFestivalLanternInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    lanternid_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::pb::TCommonReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLanternFestivalLanternInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLanternFestivalLanternInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LanternId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lanternid_)));
          set_has_lanternid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Reward;
        break;
      }

      // optional .pb.TCommonReward Reward = 2;
      case 2: {
        if (tag == 18) {
         parse_Reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLanternFestivalLanternInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLanternFestivalLanternInfo)
  return false;
#undef DO_
}

void TActLanternFestivalLanternInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLanternFestivalLanternInfo)
  // optional uint32 LanternId = 1;
  if (has_lanternid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lanternid(), output);
  }

  // optional .pb.TCommonReward Reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLanternFestivalLanternInfo)
}

::google::protobuf::uint8* TActLanternFestivalLanternInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLanternFestivalLanternInfo)
  // optional uint32 LanternId = 1;
  if (has_lanternid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lanternid(), target);
  }

  // optional .pb.TCommonReward Reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLanternFestivalLanternInfo)
  return target;
}

int TActLanternFestivalLanternInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LanternId = 1;
    if (has_lanternid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lanternid());
    }

    // optional .pb.TCommonReward Reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLanternFestivalLanternInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLanternFestivalLanternInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLanternFestivalLanternInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLanternFestivalLanternInfo::MergeFrom(const TActLanternFestivalLanternInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lanternid()) {
      set_lanternid(from.lanternid());
    }
    if (from.has_reward()) {
      mutable_reward()->::pb::TCommonReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLanternFestivalLanternInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLanternFestivalLanternInfo::CopyFrom(const TActLanternFestivalLanternInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLanternFestivalLanternInfo::IsInitialized() const {

  return true;
}

void TActLanternFestivalLanternInfo::Swap(TActLanternFestivalLanternInfo* other) {
  if (other != this) {
    std::swap(lanternid_, other->lanternid_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLanternFestivalLanternInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLanternFestivalLanternInfo_descriptor_;
  metadata.reflection = TActLanternFestivalLanternInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLanternFestivalGrandPrizeInfo::kLayerIdFieldNumber;
const int TActLanternFestivalGrandPrizeInfo::kGrandPrizeIndexFieldNumber;
#endif  // !_MSC_VER

TActLanternFestivalGrandPrizeInfo::TActLanternFestivalGrandPrizeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLanternFestivalGrandPrizeInfo)
}

void TActLanternFestivalGrandPrizeInfo::InitAsDefaultInstance() {
}

TActLanternFestivalGrandPrizeInfo::TActLanternFestivalGrandPrizeInfo(const TActLanternFestivalGrandPrizeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLanternFestivalGrandPrizeInfo)
}

void TActLanternFestivalGrandPrizeInfo::SharedCtor() {
  _cached_size_ = 0;
  layerid_ = 0u;
  grandprizeindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLanternFestivalGrandPrizeInfo::~TActLanternFestivalGrandPrizeInfo() {
  // @@protoc_insertion_point(destructor:pb.TActLanternFestivalGrandPrizeInfo)
  SharedDtor();
}

void TActLanternFestivalGrandPrizeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLanternFestivalGrandPrizeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLanternFestivalGrandPrizeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLanternFestivalGrandPrizeInfo_descriptor_;
}

const TActLanternFestivalGrandPrizeInfo& TActLanternFestivalGrandPrizeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  return *default_instance_;
}

TActLanternFestivalGrandPrizeInfo* TActLanternFestivalGrandPrizeInfo::default_instance_ = NULL;

TActLanternFestivalGrandPrizeInfo* TActLanternFestivalGrandPrizeInfo::New() const {
  return new TActLanternFestivalGrandPrizeInfo;
}

void TActLanternFestivalGrandPrizeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActLanternFestivalGrandPrizeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(layerid_, grandprizeindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLanternFestivalGrandPrizeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLanternFestivalGrandPrizeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GrandPrizeIndex;
        break;
      }

      // optional uint32 GrandPrizeIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_GrandPrizeIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grandprizeindex_)));
          set_has_grandprizeindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLanternFestivalGrandPrizeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLanternFestivalGrandPrizeInfo)
  return false;
#undef DO_
}

void TActLanternFestivalGrandPrizeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLanternFestivalGrandPrizeInfo)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerid(), output);
  }

  // optional uint32 GrandPrizeIndex = 2;
  if (has_grandprizeindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grandprizeindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLanternFestivalGrandPrizeInfo)
}

::google::protobuf::uint8* TActLanternFestivalGrandPrizeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLanternFestivalGrandPrizeInfo)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerid(), target);
  }

  // optional uint32 GrandPrizeIndex = 2;
  if (has_grandprizeindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grandprizeindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLanternFestivalGrandPrizeInfo)
  return target;
}

int TActLanternFestivalGrandPrizeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerId = 1;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerid());
    }

    // optional uint32 GrandPrizeIndex = 2;
    if (has_grandprizeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grandprizeindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLanternFestivalGrandPrizeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLanternFestivalGrandPrizeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLanternFestivalGrandPrizeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLanternFestivalGrandPrizeInfo::MergeFrom(const TActLanternFestivalGrandPrizeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
    if (from.has_grandprizeindex()) {
      set_grandprizeindex(from.grandprizeindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLanternFestivalGrandPrizeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLanternFestivalGrandPrizeInfo::CopyFrom(const TActLanternFestivalGrandPrizeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLanternFestivalGrandPrizeInfo::IsInitialized() const {

  return true;
}

void TActLanternFestivalGrandPrizeInfo::Swap(TActLanternFestivalGrandPrizeInfo* other) {
  if (other != this) {
    std::swap(layerid_, other->layerid_);
    std::swap(grandprizeindex_, other->grandprizeindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLanternFestivalGrandPrizeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLanternFestivalGrandPrizeInfo_descriptor_;
  metadata.reflection = TActLanternFestivalGrandPrizeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLanternFestivalGetInfoRsp::kArrRmbGoodBuyInfoFieldNumber;
const int TActLanternFestivalGetInfoRsp::kLayerIdFieldNumber;
const int TActLanternFestivalGetInfoRsp::kTotalLanternInfoFieldNumber;
const int TActLanternFestivalGetInfoRsp::kGrandPrizeStatusFieldNumber;
const int TActLanternFestivalGetInfoRsp::kResetTimeFieldNumber;
const int TActLanternFestivalGetInfoRsp::kGrandPrizeInfoFieldNumber;
const int TActLanternFestivalGetInfoRsp::kAllGrandPrizeArrFieldNumber;
#endif  // !_MSC_VER

TActLanternFestivalGetInfoRsp::TActLanternFestivalGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLanternFestivalGetInfoRsp)
}

void TActLanternFestivalGetInfoRsp::InitAsDefaultInstance() {
  grandprizeinfo_ = const_cast< ::pb::TActLanternFestivalGrandPrizeInfo*>(&::pb::TActLanternFestivalGrandPrizeInfo::default_instance());
}

TActLanternFestivalGetInfoRsp::TActLanternFestivalGetInfoRsp(const TActLanternFestivalGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLanternFestivalGetInfoRsp)
}

void TActLanternFestivalGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  layerid_ = 0u;
  grandprizestatus_ = 0u;
  resettime_ = 0u;
  grandprizeinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLanternFestivalGetInfoRsp::~TActLanternFestivalGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActLanternFestivalGetInfoRsp)
  SharedDtor();
}

void TActLanternFestivalGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete grandprizeinfo_;
  }
}

void TActLanternFestivalGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLanternFestivalGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLanternFestivalGetInfoRsp_descriptor_;
}

const TActLanternFestivalGetInfoRsp& TActLanternFestivalGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  return *default_instance_;
}

TActLanternFestivalGetInfoRsp* TActLanternFestivalGetInfoRsp::default_instance_ = NULL;

TActLanternFestivalGetInfoRsp* TActLanternFestivalGetInfoRsp::New() const {
  return new TActLanternFestivalGetInfoRsp;
}

void TActLanternFestivalGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActLanternFestivalGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 58) {
    ZR_(layerid_, grandprizestatus_);
    resettime_ = 0u;
    if (has_grandprizeinfo()) {
      if (grandprizeinfo_ != NULL) grandprizeinfo_->::pb::TActLanternFestivalGrandPrizeInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrrmbgoodbuyinfo_.Clear();
  totallanterninfo_.Clear();
  allgrandprizearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLanternFestivalGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLanternFestivalGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActLanternFestivalBuyInfo ArrRmbGoodBuyInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRmbGoodBuyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrmbgoodbuyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRmbGoodBuyInfo;
        if (input->ExpectTag(16)) goto parse_LayerId;
        break;
      }

      // optional uint32 LayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_LayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TotalLanternInfo;
        break;
      }

      // repeated .pb.TActLanternFestivalLanternInfo TotalLanternInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_TotalLanternInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_totallanterninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TotalLanternInfo;
        if (input->ExpectTag(32)) goto parse_GrandPrizeStatus;
        break;
      }

      // optional uint32 GrandPrizeStatus = 4;
      case 4: {
        if (tag == 32) {
         parse_GrandPrizeStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grandprizestatus_)));
          set_has_grandprizestatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ResetTime;
        break;
      }

      // optional uint32 ResetTime = 5;
      case 5: {
        if (tag == 40) {
         parse_ResetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_GrandPrizeInfo;
        break;
      }

      // optional .pb.TActLanternFestivalGrandPrizeInfo GrandPrizeInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_GrandPrizeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grandprizeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_AllGrandPrizeArr;
        break;
      }

      // repeated .pb.TActLanternFestivalGrandPrizeInfo AllGrandPrizeArr = 7;
      case 7: {
        if (tag == 58) {
         parse_AllGrandPrizeArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allgrandprizearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_AllGrandPrizeArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLanternFestivalGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLanternFestivalGetInfoRsp)
  return false;
#undef DO_
}

void TActLanternFestivalGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLanternFestivalGetInfoRsp)
  // repeated .pb.TActLanternFestivalBuyInfo ArrRmbGoodBuyInfo = 1;
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrmbgoodbuyinfo(i), output);
  }

  // optional uint32 LayerId = 2;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layerid(), output);
  }

  // repeated .pb.TActLanternFestivalLanternInfo TotalLanternInfo = 3;
  for (int i = 0; i < this->totallanterninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->totallanterninfo(i), output);
  }

  // optional uint32 GrandPrizeStatus = 4;
  if (has_grandprizestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->grandprizestatus(), output);
  }

  // optional uint32 ResetTime = 5;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resettime(), output);
  }

  // optional .pb.TActLanternFestivalGrandPrizeInfo GrandPrizeInfo = 6;
  if (has_grandprizeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->grandprizeinfo(), output);
  }

  // repeated .pb.TActLanternFestivalGrandPrizeInfo AllGrandPrizeArr = 7;
  for (int i = 0; i < this->allgrandprizearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->allgrandprizearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLanternFestivalGetInfoRsp)
}

::google::protobuf::uint8* TActLanternFestivalGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLanternFestivalGetInfoRsp)
  // repeated .pb.TActLanternFestivalBuyInfo ArrRmbGoodBuyInfo = 1;
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrmbgoodbuyinfo(i), target);
  }

  // optional uint32 LayerId = 2;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layerid(), target);
  }

  // repeated .pb.TActLanternFestivalLanternInfo TotalLanternInfo = 3;
  for (int i = 0; i < this->totallanterninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->totallanterninfo(i), target);
  }

  // optional uint32 GrandPrizeStatus = 4;
  if (has_grandprizestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->grandprizestatus(), target);
  }

  // optional uint32 ResetTime = 5;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resettime(), target);
  }

  // optional .pb.TActLanternFestivalGrandPrizeInfo GrandPrizeInfo = 6;
  if (has_grandprizeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->grandprizeinfo(), target);
  }

  // repeated .pb.TActLanternFestivalGrandPrizeInfo AllGrandPrizeArr = 7;
  for (int i = 0; i < this->allgrandprizearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->allgrandprizearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLanternFestivalGetInfoRsp)
  return target;
}

int TActLanternFestivalGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 LayerId = 2;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerid());
    }

    // optional uint32 GrandPrizeStatus = 4;
    if (has_grandprizestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grandprizestatus());
    }

    // optional uint32 ResetTime = 5;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resettime());
    }

    // optional .pb.TActLanternFestivalGrandPrizeInfo GrandPrizeInfo = 6;
    if (has_grandprizeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grandprizeinfo());
    }

  }
  // repeated .pb.TActLanternFestivalBuyInfo ArrRmbGoodBuyInfo = 1;
  total_size += 1 * this->arrrmbgoodbuyinfo_size();
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrmbgoodbuyinfo(i));
  }

  // repeated .pb.TActLanternFestivalLanternInfo TotalLanternInfo = 3;
  total_size += 1 * this->totallanterninfo_size();
  for (int i = 0; i < this->totallanterninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->totallanterninfo(i));
  }

  // repeated .pb.TActLanternFestivalGrandPrizeInfo AllGrandPrizeArr = 7;
  total_size += 1 * this->allgrandprizearr_size();
  for (int i = 0; i < this->allgrandprizearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allgrandprizearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLanternFestivalGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLanternFestivalGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLanternFestivalGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLanternFestivalGetInfoRsp::MergeFrom(const TActLanternFestivalGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrmbgoodbuyinfo_.MergeFrom(from.arrrmbgoodbuyinfo_);
  totallanterninfo_.MergeFrom(from.totallanterninfo_);
  allgrandprizearr_.MergeFrom(from.allgrandprizearr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
    if (from.has_grandprizestatus()) {
      set_grandprizestatus(from.grandprizestatus());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
    if (from.has_grandprizeinfo()) {
      mutable_grandprizeinfo()->::pb::TActLanternFestivalGrandPrizeInfo::MergeFrom(from.grandprizeinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLanternFestivalGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLanternFestivalGetInfoRsp::CopyFrom(const TActLanternFestivalGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLanternFestivalGetInfoRsp::IsInitialized() const {

  return true;
}

void TActLanternFestivalGetInfoRsp::Swap(TActLanternFestivalGetInfoRsp* other) {
  if (other != this) {
    arrrmbgoodbuyinfo_.Swap(&other->arrrmbgoodbuyinfo_);
    std::swap(layerid_, other->layerid_);
    totallanterninfo_.Swap(&other->totallanterninfo_);
    std::swap(grandprizestatus_, other->grandprizestatus_);
    std::swap(resettime_, other->resettime_);
    std::swap(grandprizeinfo_, other->grandprizeinfo_);
    allgrandprizearr_.Swap(&other->allgrandprizearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLanternFestivalGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLanternFestivalGetInfoRsp_descriptor_;
  metadata.reflection = TActLanternFestivalGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLanternFestivalGetTaskInfoRsp::kTaskInfoFieldNumber;
const int TActLanternFestivalGetTaskInfoRsp::kArrTaskRewardInfoFieldNumber;
const int TActLanternFestivalGetTaskInfoRsp::kScoreFieldNumber;
const int TActLanternFestivalGetTaskInfoRsp::kScoreAwardFieldNumber;
#endif  // !_MSC_VER

TActLanternFestivalGetTaskInfoRsp::TActLanternFestivalGetTaskInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLanternFestivalGetTaskInfoRsp)
}

void TActLanternFestivalGetTaskInfoRsp::InitAsDefaultInstance() {
}

TActLanternFestivalGetTaskInfoRsp::TActLanternFestivalGetTaskInfoRsp(const TActLanternFestivalGetTaskInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLanternFestivalGetTaskInfoRsp)
}

void TActLanternFestivalGetTaskInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLanternFestivalGetTaskInfoRsp::~TActLanternFestivalGetTaskInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActLanternFestivalGetTaskInfoRsp)
  SharedDtor();
}

void TActLanternFestivalGetTaskInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLanternFestivalGetTaskInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLanternFestivalGetTaskInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLanternFestivalGetTaskInfoRsp_descriptor_;
}

const TActLanternFestivalGetTaskInfoRsp& TActLanternFestivalGetTaskInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  return *default_instance_;
}

TActLanternFestivalGetTaskInfoRsp* TActLanternFestivalGetTaskInfoRsp::default_instance_ = NULL;

TActLanternFestivalGetTaskInfoRsp* TActLanternFestivalGetTaskInfoRsp::New() const {
  return new TActLanternFestivalGetTaskInfoRsp;
}

void TActLanternFestivalGetTaskInfoRsp::Clear() {
  score_ = 0u;
  taskinfo_.Clear();
  arrtaskrewardinfo_.Clear();
  scoreaward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLanternFestivalGetTaskInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLanternFestivalGetTaskInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActLanternFestivalTaskInfo TaskInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_TaskInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TaskInfo;
        if (input->ExpectTag(18)) goto parse_ArrTaskRewardInfo;
        break;
      }

      // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrTaskRewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtaskrewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrTaskRewardInfo;
        if (input->ExpectTag(24)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 3;
      case 3: {
        if (tag == 24) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ScoreAward;
        break;
      }

      // repeated uint32 ScoreAward = 4;
      case 4: {
        if (tag == 32) {
         parse_ScoreAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_scoreaward())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_scoreaward())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ScoreAward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLanternFestivalGetTaskInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLanternFestivalGetTaskInfoRsp)
  return false;
#undef DO_
}

void TActLanternFestivalGetTaskInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLanternFestivalGetTaskInfoRsp)
  // repeated .pb.TActLanternFestivalTaskInfo TaskInfo = 1;
  for (int i = 0; i < this->taskinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskinfo(i), output);
  }

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 2;
  for (int i = 0; i < this->arrtaskrewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrtaskrewardinfo(i), output);
  }

  // optional uint32 Score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // repeated uint32 ScoreAward = 4;
  for (int i = 0; i < this->scoreaward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->scoreaward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLanternFestivalGetTaskInfoRsp)
}

::google::protobuf::uint8* TActLanternFestivalGetTaskInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLanternFestivalGetTaskInfoRsp)
  // repeated .pb.TActLanternFestivalTaskInfo TaskInfo = 1;
  for (int i = 0; i < this->taskinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskinfo(i), target);
  }

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 2;
  for (int i = 0; i < this->arrtaskrewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrtaskrewardinfo(i), target);
  }

  // optional uint32 Score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  // repeated uint32 ScoreAward = 4;
  for (int i = 0; i < this->scoreaward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->scoreaward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLanternFestivalGetTaskInfoRsp)
  return target;
}

int TActLanternFestivalGetTaskInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 Score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  // repeated .pb.TActLanternFestivalTaskInfo TaskInfo = 1;
  total_size += 1 * this->taskinfo_size();
  for (int i = 0; i < this->taskinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskinfo(i));
  }

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 2;
  total_size += 1 * this->arrtaskrewardinfo_size();
  for (int i = 0; i < this->arrtaskrewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtaskrewardinfo(i));
  }

  // repeated uint32 ScoreAward = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->scoreaward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->scoreaward(i));
    }
    total_size += 1 * this->scoreaward_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLanternFestivalGetTaskInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLanternFestivalGetTaskInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLanternFestivalGetTaskInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLanternFestivalGetTaskInfoRsp::MergeFrom(const TActLanternFestivalGetTaskInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskinfo_.MergeFrom(from.taskinfo_);
  arrtaskrewardinfo_.MergeFrom(from.arrtaskrewardinfo_);
  scoreaward_.MergeFrom(from.scoreaward_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLanternFestivalGetTaskInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLanternFestivalGetTaskInfoRsp::CopyFrom(const TActLanternFestivalGetTaskInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLanternFestivalGetTaskInfoRsp::IsInitialized() const {

  return true;
}

void TActLanternFestivalGetTaskInfoRsp::Swap(TActLanternFestivalGetTaskInfoRsp* other) {
  if (other != this) {
    taskinfo_.Swap(&other->taskinfo_);
    arrtaskrewardinfo_.Swap(&other->arrtaskrewardinfo_);
    std::swap(score_, other->score_);
    scoreaward_.Swap(&other->scoreaward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLanternFestivalGetTaskInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLanternFestivalGetTaskInfoRsp_descriptor_;
  metadata.reflection = TActLanternFestivalGetTaskInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLanternFestivalGetTaskRewardReq::kTaskIdFieldNumber;
#endif  // !_MSC_VER

TActLanternFestivalGetTaskRewardReq::TActLanternFestivalGetTaskRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLanternFestivalGetTaskRewardReq)
}

void TActLanternFestivalGetTaskRewardReq::InitAsDefaultInstance() {
}

TActLanternFestivalGetTaskRewardReq::TActLanternFestivalGetTaskRewardReq(const TActLanternFestivalGetTaskRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLanternFestivalGetTaskRewardReq)
}

void TActLanternFestivalGetTaskRewardReq::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLanternFestivalGetTaskRewardReq::~TActLanternFestivalGetTaskRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActLanternFestivalGetTaskRewardReq)
  SharedDtor();
}

void TActLanternFestivalGetTaskRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLanternFestivalGetTaskRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLanternFestivalGetTaskRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLanternFestivalGetTaskRewardReq_descriptor_;
}

const TActLanternFestivalGetTaskRewardReq& TActLanternFestivalGetTaskRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  return *default_instance_;
}

TActLanternFestivalGetTaskRewardReq* TActLanternFestivalGetTaskRewardReq::default_instance_ = NULL;

TActLanternFestivalGetTaskRewardReq* TActLanternFestivalGetTaskRewardReq::New() const {
  return new TActLanternFestivalGetTaskRewardReq;
}

void TActLanternFestivalGetTaskRewardReq::Clear() {
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLanternFestivalGetTaskRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLanternFestivalGetTaskRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLanternFestivalGetTaskRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLanternFestivalGetTaskRewardReq)
  return false;
#undef DO_
}

void TActLanternFestivalGetTaskRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLanternFestivalGetTaskRewardReq)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLanternFestivalGetTaskRewardReq)
}

::google::protobuf::uint8* TActLanternFestivalGetTaskRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLanternFestivalGetTaskRewardReq)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLanternFestivalGetTaskRewardReq)
  return target;
}

int TActLanternFestivalGetTaskRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLanternFestivalGetTaskRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLanternFestivalGetTaskRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLanternFestivalGetTaskRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLanternFestivalGetTaskRewardReq::MergeFrom(const TActLanternFestivalGetTaskRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLanternFestivalGetTaskRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLanternFestivalGetTaskRewardReq::CopyFrom(const TActLanternFestivalGetTaskRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLanternFestivalGetTaskRewardReq::IsInitialized() const {

  return true;
}

void TActLanternFestivalGetTaskRewardReq::Swap(TActLanternFestivalGetTaskRewardReq* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLanternFestivalGetTaskRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLanternFestivalGetTaskRewardReq_descriptor_;
  metadata.reflection = TActLanternFestivalGetTaskRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLanternFestivalGetTaskRewardRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActLanternFestivalGetTaskRewardRsp::TActLanternFestivalGetTaskRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLanternFestivalGetTaskRewardRsp)
}

void TActLanternFestivalGetTaskRewardRsp::InitAsDefaultInstance() {
}

TActLanternFestivalGetTaskRewardRsp::TActLanternFestivalGetTaskRewardRsp(const TActLanternFestivalGetTaskRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLanternFestivalGetTaskRewardRsp)
}

void TActLanternFestivalGetTaskRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLanternFestivalGetTaskRewardRsp::~TActLanternFestivalGetTaskRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActLanternFestivalGetTaskRewardRsp)
  SharedDtor();
}

void TActLanternFestivalGetTaskRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLanternFestivalGetTaskRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLanternFestivalGetTaskRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLanternFestivalGetTaskRewardRsp_descriptor_;
}

const TActLanternFestivalGetTaskRewardRsp& TActLanternFestivalGetTaskRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  return *default_instance_;
}

TActLanternFestivalGetTaskRewardRsp* TActLanternFestivalGetTaskRewardRsp::default_instance_ = NULL;

TActLanternFestivalGetTaskRewardRsp* TActLanternFestivalGetTaskRewardRsp::New() const {
  return new TActLanternFestivalGetTaskRewardRsp;
}

void TActLanternFestivalGetTaskRewardRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLanternFestivalGetTaskRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLanternFestivalGetTaskRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLanternFestivalGetTaskRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLanternFestivalGetTaskRewardRsp)
  return false;
#undef DO_
}

void TActLanternFestivalGetTaskRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLanternFestivalGetTaskRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLanternFestivalGetTaskRewardRsp)
}

::google::protobuf::uint8* TActLanternFestivalGetTaskRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLanternFestivalGetTaskRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLanternFestivalGetTaskRewardRsp)
  return target;
}

int TActLanternFestivalGetTaskRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLanternFestivalGetTaskRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLanternFestivalGetTaskRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLanternFestivalGetTaskRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLanternFestivalGetTaskRewardRsp::MergeFrom(const TActLanternFestivalGetTaskRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLanternFestivalGetTaskRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLanternFestivalGetTaskRewardRsp::CopyFrom(const TActLanternFestivalGetTaskRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLanternFestivalGetTaskRewardRsp::IsInitialized() const {

  return true;
}

void TActLanternFestivalGetTaskRewardRsp::Swap(TActLanternFestivalGetTaskRewardRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLanternFestivalGetTaskRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLanternFestivalGetTaskRewardRsp_descriptor_;
  metadata.reflection = TActLanternFestivalGetTaskRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLanternFestivalGetScoreRewardReq::kScoreAwardTidFieldNumber;
#endif  // !_MSC_VER

TActLanternFestivalGetScoreRewardReq::TActLanternFestivalGetScoreRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLanternFestivalGetScoreRewardReq)
}

void TActLanternFestivalGetScoreRewardReq::InitAsDefaultInstance() {
}

TActLanternFestivalGetScoreRewardReq::TActLanternFestivalGetScoreRewardReq(const TActLanternFestivalGetScoreRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLanternFestivalGetScoreRewardReq)
}

void TActLanternFestivalGetScoreRewardReq::SharedCtor() {
  _cached_size_ = 0;
  scoreawardtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLanternFestivalGetScoreRewardReq::~TActLanternFestivalGetScoreRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActLanternFestivalGetScoreRewardReq)
  SharedDtor();
}

void TActLanternFestivalGetScoreRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLanternFestivalGetScoreRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLanternFestivalGetScoreRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLanternFestivalGetScoreRewardReq_descriptor_;
}

const TActLanternFestivalGetScoreRewardReq& TActLanternFestivalGetScoreRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  return *default_instance_;
}

TActLanternFestivalGetScoreRewardReq* TActLanternFestivalGetScoreRewardReq::default_instance_ = NULL;

TActLanternFestivalGetScoreRewardReq* TActLanternFestivalGetScoreRewardReq::New() const {
  return new TActLanternFestivalGetScoreRewardReq;
}

void TActLanternFestivalGetScoreRewardReq::Clear() {
  scoreawardtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLanternFestivalGetScoreRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLanternFestivalGetScoreRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ScoreAwardTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scoreawardtid_)));
          set_has_scoreawardtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLanternFestivalGetScoreRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLanternFestivalGetScoreRewardReq)
  return false;
#undef DO_
}

void TActLanternFestivalGetScoreRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLanternFestivalGetScoreRewardReq)
  // optional uint32 ScoreAwardTid = 1;
  if (has_scoreawardtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scoreawardtid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLanternFestivalGetScoreRewardReq)
}

::google::protobuf::uint8* TActLanternFestivalGetScoreRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLanternFestivalGetScoreRewardReq)
  // optional uint32 ScoreAwardTid = 1;
  if (has_scoreawardtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scoreawardtid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLanternFestivalGetScoreRewardReq)
  return target;
}

int TActLanternFestivalGetScoreRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ScoreAwardTid = 1;
    if (has_scoreawardtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scoreawardtid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLanternFestivalGetScoreRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLanternFestivalGetScoreRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLanternFestivalGetScoreRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLanternFestivalGetScoreRewardReq::MergeFrom(const TActLanternFestivalGetScoreRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scoreawardtid()) {
      set_scoreawardtid(from.scoreawardtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLanternFestivalGetScoreRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLanternFestivalGetScoreRewardReq::CopyFrom(const TActLanternFestivalGetScoreRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLanternFestivalGetScoreRewardReq::IsInitialized() const {

  return true;
}

void TActLanternFestivalGetScoreRewardReq::Swap(TActLanternFestivalGetScoreRewardReq* other) {
  if (other != this) {
    std::swap(scoreawardtid_, other->scoreawardtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLanternFestivalGetScoreRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLanternFestivalGetScoreRewardReq_descriptor_;
  metadata.reflection = TActLanternFestivalGetScoreRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLanternFestivalGetScoreRewardRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActLanternFestivalGetScoreRewardRsp::TActLanternFestivalGetScoreRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLanternFestivalGetScoreRewardRsp)
}

void TActLanternFestivalGetScoreRewardRsp::InitAsDefaultInstance() {
}

TActLanternFestivalGetScoreRewardRsp::TActLanternFestivalGetScoreRewardRsp(const TActLanternFestivalGetScoreRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLanternFestivalGetScoreRewardRsp)
}

void TActLanternFestivalGetScoreRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLanternFestivalGetScoreRewardRsp::~TActLanternFestivalGetScoreRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActLanternFestivalGetScoreRewardRsp)
  SharedDtor();
}

void TActLanternFestivalGetScoreRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLanternFestivalGetScoreRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLanternFestivalGetScoreRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLanternFestivalGetScoreRewardRsp_descriptor_;
}

const TActLanternFestivalGetScoreRewardRsp& TActLanternFestivalGetScoreRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  return *default_instance_;
}

TActLanternFestivalGetScoreRewardRsp* TActLanternFestivalGetScoreRewardRsp::default_instance_ = NULL;

TActLanternFestivalGetScoreRewardRsp* TActLanternFestivalGetScoreRewardRsp::New() const {
  return new TActLanternFestivalGetScoreRewardRsp;
}

void TActLanternFestivalGetScoreRewardRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLanternFestivalGetScoreRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLanternFestivalGetScoreRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLanternFestivalGetScoreRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLanternFestivalGetScoreRewardRsp)
  return false;
#undef DO_
}

void TActLanternFestivalGetScoreRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLanternFestivalGetScoreRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLanternFestivalGetScoreRewardRsp)
}

::google::protobuf::uint8* TActLanternFestivalGetScoreRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLanternFestivalGetScoreRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLanternFestivalGetScoreRewardRsp)
  return target;
}

int TActLanternFestivalGetScoreRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLanternFestivalGetScoreRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLanternFestivalGetScoreRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLanternFestivalGetScoreRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLanternFestivalGetScoreRewardRsp::MergeFrom(const TActLanternFestivalGetScoreRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLanternFestivalGetScoreRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLanternFestivalGetScoreRewardRsp::CopyFrom(const TActLanternFestivalGetScoreRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLanternFestivalGetScoreRewardRsp::IsInitialized() const {

  return true;
}

void TActLanternFestivalGetScoreRewardRsp::Swap(TActLanternFestivalGetScoreRewardRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLanternFestivalGetScoreRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLanternFestivalGetScoreRewardRsp_descriptor_;
  metadata.reflection = TActLanternFestivalGetScoreRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLanternFestivalLightUpOrShowLanternReq::kIdFieldNumber;
#endif  // !_MSC_VER

TActLanternFestivalLightUpOrShowLanternReq::TActLanternFestivalLightUpOrShowLanternReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLanternFestivalLightUpOrShowLanternReq)
}

void TActLanternFestivalLightUpOrShowLanternReq::InitAsDefaultInstance() {
}

TActLanternFestivalLightUpOrShowLanternReq::TActLanternFestivalLightUpOrShowLanternReq(const TActLanternFestivalLightUpOrShowLanternReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLanternFestivalLightUpOrShowLanternReq)
}

void TActLanternFestivalLightUpOrShowLanternReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLanternFestivalLightUpOrShowLanternReq::~TActLanternFestivalLightUpOrShowLanternReq() {
  // @@protoc_insertion_point(destructor:pb.TActLanternFestivalLightUpOrShowLanternReq)
  SharedDtor();
}

void TActLanternFestivalLightUpOrShowLanternReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLanternFestivalLightUpOrShowLanternReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLanternFestivalLightUpOrShowLanternReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLanternFestivalLightUpOrShowLanternReq_descriptor_;
}

const TActLanternFestivalLightUpOrShowLanternReq& TActLanternFestivalLightUpOrShowLanternReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  return *default_instance_;
}

TActLanternFestivalLightUpOrShowLanternReq* TActLanternFestivalLightUpOrShowLanternReq::default_instance_ = NULL;

TActLanternFestivalLightUpOrShowLanternReq* TActLanternFestivalLightUpOrShowLanternReq::New() const {
  return new TActLanternFestivalLightUpOrShowLanternReq;
}

void TActLanternFestivalLightUpOrShowLanternReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLanternFestivalLightUpOrShowLanternReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLanternFestivalLightUpOrShowLanternReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLanternFestivalLightUpOrShowLanternReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLanternFestivalLightUpOrShowLanternReq)
  return false;
#undef DO_
}

void TActLanternFestivalLightUpOrShowLanternReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLanternFestivalLightUpOrShowLanternReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLanternFestivalLightUpOrShowLanternReq)
}

::google::protobuf::uint8* TActLanternFestivalLightUpOrShowLanternReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLanternFestivalLightUpOrShowLanternReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLanternFestivalLightUpOrShowLanternReq)
  return target;
}

int TActLanternFestivalLightUpOrShowLanternReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLanternFestivalLightUpOrShowLanternReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLanternFestivalLightUpOrShowLanternReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLanternFestivalLightUpOrShowLanternReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLanternFestivalLightUpOrShowLanternReq::MergeFrom(const TActLanternFestivalLightUpOrShowLanternReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLanternFestivalLightUpOrShowLanternReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLanternFestivalLightUpOrShowLanternReq::CopyFrom(const TActLanternFestivalLightUpOrShowLanternReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLanternFestivalLightUpOrShowLanternReq::IsInitialized() const {

  return true;
}

void TActLanternFestivalLightUpOrShowLanternReq::Swap(TActLanternFestivalLightUpOrShowLanternReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLanternFestivalLightUpOrShowLanternReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLanternFestivalLightUpOrShowLanternReq_descriptor_;
  metadata.reflection = TActLanternFestivalLightUpOrShowLanternReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLanternFestivalLightUpOrShowLanternRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActLanternFestivalLightUpOrShowLanternRsp::TActLanternFestivalLightUpOrShowLanternRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLanternFestivalLightUpOrShowLanternRsp)
}

void TActLanternFestivalLightUpOrShowLanternRsp::InitAsDefaultInstance() {
}

TActLanternFestivalLightUpOrShowLanternRsp::TActLanternFestivalLightUpOrShowLanternRsp(const TActLanternFestivalLightUpOrShowLanternRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLanternFestivalLightUpOrShowLanternRsp)
}

void TActLanternFestivalLightUpOrShowLanternRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLanternFestivalLightUpOrShowLanternRsp::~TActLanternFestivalLightUpOrShowLanternRsp() {
  // @@protoc_insertion_point(destructor:pb.TActLanternFestivalLightUpOrShowLanternRsp)
  SharedDtor();
}

void TActLanternFestivalLightUpOrShowLanternRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLanternFestivalLightUpOrShowLanternRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLanternFestivalLightUpOrShowLanternRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLanternFestivalLightUpOrShowLanternRsp_descriptor_;
}

const TActLanternFestivalLightUpOrShowLanternRsp& TActLanternFestivalLightUpOrShowLanternRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  return *default_instance_;
}

TActLanternFestivalLightUpOrShowLanternRsp* TActLanternFestivalLightUpOrShowLanternRsp::default_instance_ = NULL;

TActLanternFestivalLightUpOrShowLanternRsp* TActLanternFestivalLightUpOrShowLanternRsp::New() const {
  return new TActLanternFestivalLightUpOrShowLanternRsp;
}

void TActLanternFestivalLightUpOrShowLanternRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLanternFestivalLightUpOrShowLanternRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLanternFestivalLightUpOrShowLanternRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLanternFestivalLightUpOrShowLanternRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLanternFestivalLightUpOrShowLanternRsp)
  return false;
#undef DO_
}

void TActLanternFestivalLightUpOrShowLanternRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLanternFestivalLightUpOrShowLanternRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLanternFestivalLightUpOrShowLanternRsp)
}

::google::protobuf::uint8* TActLanternFestivalLightUpOrShowLanternRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLanternFestivalLightUpOrShowLanternRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLanternFestivalLightUpOrShowLanternRsp)
  return target;
}

int TActLanternFestivalLightUpOrShowLanternRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLanternFestivalLightUpOrShowLanternRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLanternFestivalLightUpOrShowLanternRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLanternFestivalLightUpOrShowLanternRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLanternFestivalLightUpOrShowLanternRsp::MergeFrom(const TActLanternFestivalLightUpOrShowLanternRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLanternFestivalLightUpOrShowLanternRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLanternFestivalLightUpOrShowLanternRsp::CopyFrom(const TActLanternFestivalLightUpOrShowLanternRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLanternFestivalLightUpOrShowLanternRsp::IsInitialized() const {

  return true;
}

void TActLanternFestivalLightUpOrShowLanternRsp::Swap(TActLanternFestivalLightUpOrShowLanternRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLanternFestivalLightUpOrShowLanternRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLanternFestivalLightUpOrShowLanternRsp_descriptor_;
  metadata.reflection = TActLanternFestivalLightUpOrShowLanternRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLanternFestivalLoopLayerReq::kIdFieldNumber;
#endif  // !_MSC_VER

TActLanternFestivalLoopLayerReq::TActLanternFestivalLoopLayerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLanternFestivalLoopLayerReq)
}

void TActLanternFestivalLoopLayerReq::InitAsDefaultInstance() {
}

TActLanternFestivalLoopLayerReq::TActLanternFestivalLoopLayerReq(const TActLanternFestivalLoopLayerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLanternFestivalLoopLayerReq)
}

void TActLanternFestivalLoopLayerReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLanternFestivalLoopLayerReq::~TActLanternFestivalLoopLayerReq() {
  // @@protoc_insertion_point(destructor:pb.TActLanternFestivalLoopLayerReq)
  SharedDtor();
}

void TActLanternFestivalLoopLayerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLanternFestivalLoopLayerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLanternFestivalLoopLayerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLanternFestivalLoopLayerReq_descriptor_;
}

const TActLanternFestivalLoopLayerReq& TActLanternFestivalLoopLayerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  return *default_instance_;
}

TActLanternFestivalLoopLayerReq* TActLanternFestivalLoopLayerReq::default_instance_ = NULL;

TActLanternFestivalLoopLayerReq* TActLanternFestivalLoopLayerReq::New() const {
  return new TActLanternFestivalLoopLayerReq;
}

void TActLanternFestivalLoopLayerReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLanternFestivalLoopLayerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLanternFestivalLoopLayerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLanternFestivalLoopLayerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLanternFestivalLoopLayerReq)
  return false;
#undef DO_
}

void TActLanternFestivalLoopLayerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLanternFestivalLoopLayerReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLanternFestivalLoopLayerReq)
}

::google::protobuf::uint8* TActLanternFestivalLoopLayerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLanternFestivalLoopLayerReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLanternFestivalLoopLayerReq)
  return target;
}

int TActLanternFestivalLoopLayerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLanternFestivalLoopLayerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLanternFestivalLoopLayerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLanternFestivalLoopLayerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLanternFestivalLoopLayerReq::MergeFrom(const TActLanternFestivalLoopLayerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLanternFestivalLoopLayerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLanternFestivalLoopLayerReq::CopyFrom(const TActLanternFestivalLoopLayerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLanternFestivalLoopLayerReq::IsInitialized() const {

  return true;
}

void TActLanternFestivalLoopLayerReq::Swap(TActLanternFestivalLoopLayerReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLanternFestivalLoopLayerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLanternFestivalLoopLayerReq_descriptor_;
  metadata.reflection = TActLanternFestivalLoopLayerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLanternFestivalSetLayerFinallyRewardReq::kRewardInfoFieldNumber;
#endif  // !_MSC_VER

TActLanternFestivalSetLayerFinallyRewardReq::TActLanternFestivalSetLayerFinallyRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLanternFestivalSetLayerFinallyRewardReq)
}

void TActLanternFestivalSetLayerFinallyRewardReq::InitAsDefaultInstance() {
  rewardinfo_ = const_cast< ::pb::TActLanternFestivalGrandPrizeInfo*>(&::pb::TActLanternFestivalGrandPrizeInfo::default_instance());
}

TActLanternFestivalSetLayerFinallyRewardReq::TActLanternFestivalSetLayerFinallyRewardReq(const TActLanternFestivalSetLayerFinallyRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLanternFestivalSetLayerFinallyRewardReq)
}

void TActLanternFestivalSetLayerFinallyRewardReq::SharedCtor() {
  _cached_size_ = 0;
  rewardinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLanternFestivalSetLayerFinallyRewardReq::~TActLanternFestivalSetLayerFinallyRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActLanternFestivalSetLayerFinallyRewardReq)
  SharedDtor();
}

void TActLanternFestivalSetLayerFinallyRewardReq::SharedDtor() {
  if (this != default_instance_) {
    delete rewardinfo_;
  }
}

void TActLanternFestivalSetLayerFinallyRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLanternFestivalSetLayerFinallyRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLanternFestivalSetLayerFinallyRewardReq_descriptor_;
}

const TActLanternFestivalSetLayerFinallyRewardReq& TActLanternFestivalSetLayerFinallyRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  return *default_instance_;
}

TActLanternFestivalSetLayerFinallyRewardReq* TActLanternFestivalSetLayerFinallyRewardReq::default_instance_ = NULL;

TActLanternFestivalSetLayerFinallyRewardReq* TActLanternFestivalSetLayerFinallyRewardReq::New() const {
  return new TActLanternFestivalSetLayerFinallyRewardReq;
}

void TActLanternFestivalSetLayerFinallyRewardReq::Clear() {
  if (has_rewardinfo()) {
    if (rewardinfo_ != NULL) rewardinfo_->::pb::TActLanternFestivalGrandPrizeInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLanternFestivalSetLayerFinallyRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLanternFestivalSetLayerFinallyRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TActLanternFestivalGrandPrizeInfo rewardInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLanternFestivalSetLayerFinallyRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLanternFestivalSetLayerFinallyRewardReq)
  return false;
#undef DO_
}

void TActLanternFestivalSetLayerFinallyRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLanternFestivalSetLayerFinallyRewardReq)
  // optional .pb.TActLanternFestivalGrandPrizeInfo rewardInfo = 1;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLanternFestivalSetLayerFinallyRewardReq)
}

::google::protobuf::uint8* TActLanternFestivalSetLayerFinallyRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLanternFestivalSetLayerFinallyRewardReq)
  // optional .pb.TActLanternFestivalGrandPrizeInfo rewardInfo = 1;
  if (has_rewardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLanternFestivalSetLayerFinallyRewardReq)
  return target;
}

int TActLanternFestivalSetLayerFinallyRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TActLanternFestivalGrandPrizeInfo rewardInfo = 1;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewardinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLanternFestivalSetLayerFinallyRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLanternFestivalSetLayerFinallyRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLanternFestivalSetLayerFinallyRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLanternFestivalSetLayerFinallyRewardReq::MergeFrom(const TActLanternFestivalSetLayerFinallyRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardinfo()) {
      mutable_rewardinfo()->::pb::TActLanternFestivalGrandPrizeInfo::MergeFrom(from.rewardinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLanternFestivalSetLayerFinallyRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLanternFestivalSetLayerFinallyRewardReq::CopyFrom(const TActLanternFestivalSetLayerFinallyRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLanternFestivalSetLayerFinallyRewardReq::IsInitialized() const {

  return true;
}

void TActLanternFestivalSetLayerFinallyRewardReq::Swap(TActLanternFestivalSetLayerFinallyRewardReq* other) {
  if (other != this) {
    std::swap(rewardinfo_, other->rewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLanternFestivalSetLayerFinallyRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLanternFestivalSetLayerFinallyRewardReq_descriptor_;
  metadata.reflection = TActLanternFestivalSetLayerFinallyRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLanternFestivalNotify::kArrRmbGoodBuyInfoFieldNumber;
const int TActLanternFestivalNotify::kArrTaskInfoFieldNumber;
const int TActLanternFestivalNotify::kGrandPrizeFieldNumber;
const int TActLanternFestivalNotify::kAllGrandPrizeArrFieldNumber;
#endif  // !_MSC_VER

TActLanternFestivalNotify::TActLanternFestivalNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLanternFestivalNotify)
}

void TActLanternFestivalNotify::InitAsDefaultInstance() {
}

TActLanternFestivalNotify::TActLanternFestivalNotify(const TActLanternFestivalNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLanternFestivalNotify)
}

void TActLanternFestivalNotify::SharedCtor() {
  _cached_size_ = 0;
  grandprize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLanternFestivalNotify::~TActLanternFestivalNotify() {
  // @@protoc_insertion_point(destructor:pb.TActLanternFestivalNotify)
  SharedDtor();
}

void TActLanternFestivalNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLanternFestivalNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLanternFestivalNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLanternFestivalNotify_descriptor_;
}

const TActLanternFestivalNotify& TActLanternFestivalNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  return *default_instance_;
}

TActLanternFestivalNotify* TActLanternFestivalNotify::default_instance_ = NULL;

TActLanternFestivalNotify* TActLanternFestivalNotify::New() const {
  return new TActLanternFestivalNotify;
}

void TActLanternFestivalNotify::Clear() {
  grandprize_ = 0u;
  arrrmbgoodbuyinfo_.Clear();
  arrtaskinfo_.Clear();
  allgrandprizearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLanternFestivalNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLanternFestivalNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActLanternFestivalBuyInfo ArrRmbGoodBuyInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRmbGoodBuyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrmbgoodbuyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRmbGoodBuyInfo;
        if (input->ExpectTag(18)) goto parse_ArrTaskInfo;
        break;
      }

      // repeated .pb.TActLanternFestivalTaskInfo ArrTaskInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrTaskInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtaskinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrTaskInfo;
        if (input->ExpectTag(24)) goto parse_GrandPrize;
        break;
      }

      // optional uint32 GrandPrize = 3;
      case 3: {
        if (tag == 24) {
         parse_GrandPrize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grandprize_)));
          set_has_grandprize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AllGrandPrizeArr;
        break;
      }

      // repeated .pb.TActLanternFestivalGrandPrizeInfo AllGrandPrizeArr = 4;
      case 4: {
        if (tag == 34) {
         parse_AllGrandPrizeArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allgrandprizearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AllGrandPrizeArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLanternFestivalNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLanternFestivalNotify)
  return false;
#undef DO_
}

void TActLanternFestivalNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLanternFestivalNotify)
  // repeated .pb.TActLanternFestivalBuyInfo ArrRmbGoodBuyInfo = 1;
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrmbgoodbuyinfo(i), output);
  }

  // repeated .pb.TActLanternFestivalTaskInfo ArrTaskInfo = 2;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrtaskinfo(i), output);
  }

  // optional uint32 GrandPrize = 3;
  if (has_grandprize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grandprize(), output);
  }

  // repeated .pb.TActLanternFestivalGrandPrizeInfo AllGrandPrizeArr = 4;
  for (int i = 0; i < this->allgrandprizearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->allgrandprizearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLanternFestivalNotify)
}

::google::protobuf::uint8* TActLanternFestivalNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLanternFestivalNotify)
  // repeated .pb.TActLanternFestivalBuyInfo ArrRmbGoodBuyInfo = 1;
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrmbgoodbuyinfo(i), target);
  }

  // repeated .pb.TActLanternFestivalTaskInfo ArrTaskInfo = 2;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrtaskinfo(i), target);
  }

  // optional uint32 GrandPrize = 3;
  if (has_grandprize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grandprize(), target);
  }

  // repeated .pb.TActLanternFestivalGrandPrizeInfo AllGrandPrizeArr = 4;
  for (int i = 0; i < this->allgrandprizearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->allgrandprizearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLanternFestivalNotify)
  return target;
}

int TActLanternFestivalNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 GrandPrize = 3;
    if (has_grandprize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grandprize());
    }

  }
  // repeated .pb.TActLanternFestivalBuyInfo ArrRmbGoodBuyInfo = 1;
  total_size += 1 * this->arrrmbgoodbuyinfo_size();
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrmbgoodbuyinfo(i));
  }

  // repeated .pb.TActLanternFestivalTaskInfo ArrTaskInfo = 2;
  total_size += 1 * this->arrtaskinfo_size();
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtaskinfo(i));
  }

  // repeated .pb.TActLanternFestivalGrandPrizeInfo AllGrandPrizeArr = 4;
  total_size += 1 * this->allgrandprizearr_size();
  for (int i = 0; i < this->allgrandprizearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allgrandprizearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLanternFestivalNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLanternFestivalNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLanternFestivalNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLanternFestivalNotify::MergeFrom(const TActLanternFestivalNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrmbgoodbuyinfo_.MergeFrom(from.arrrmbgoodbuyinfo_);
  arrtaskinfo_.MergeFrom(from.arrtaskinfo_);
  allgrandprizearr_.MergeFrom(from.allgrandprizearr_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_grandprize()) {
      set_grandprize(from.grandprize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLanternFestivalNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLanternFestivalNotify::CopyFrom(const TActLanternFestivalNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLanternFestivalNotify::IsInitialized() const {

  return true;
}

void TActLanternFestivalNotify::Swap(TActLanternFestivalNotify* other) {
  if (other != this) {
    arrrmbgoodbuyinfo_.Swap(&other->arrrmbgoodbuyinfo_);
    arrtaskinfo_.Swap(&other->arrtaskinfo_);
    std::swap(grandprize_, other->grandprize_);
    allgrandprizearr_.Swap(&other->allgrandprizearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLanternFestivalNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLanternFestivalNotify_descriptor_;
  metadata.reflection = TActLanternFestivalNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
