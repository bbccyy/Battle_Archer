// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/SlgCity.proto

#ifndef PROTOBUF_net_2fSlgCity_2eproto__INCLUDED
#define PROTOBUF_net_2fSlgCity_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fSlgCity_2eproto();
void protobuf_AssignDesc_net_2fSlgCity_2eproto();
void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

class TSlgCityBuildingData;
class TSlgCityBuildingAppointData;
class TSlgCityBuildingQueueData;
class TSlgCityTimeLimitedPropData;
class TSlgCityFreeWarData;
class TSlgCityWallDurableData;
class TSlgCityGetCityInfoRsp;
class TSlgCityCityInfoNotify;
class TSlgCityLevelUpReq;
class TSlgCityReduceBuildQueueCDByItemReq;
class TSlgCityReduceBuildQueueAllCDByItemReq;
class TSlgCityReduceBuildQueueCDByGoldReq;
class TSlgCityReduceBuildQueueAllCDByGoldReq;
class TSlgCityReduceBuildQueueCDByGuildHelpReq;
class TSlgCityReduceBuildQueueCDFreepReq;
class TSlgCityUnlockBuildingReq;
class TSlgCityBuildBuildingReq;
class TSlgCityFreeWarReq;
class TSlgCityAppointHeroReq;
class TSlgCityRelieveAppointHeroReq;
class TSlgCityUseTimeLimitedPropReq;
class TSlgCityActiveHeroPropertyReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TSlgCityBuildingData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityBuildingData : public ::google::protobuf::Message {
 public:
  TSlgCityBuildingData();
  virtual ~TSlgCityBuildingData();

  TSlgCityBuildingData(const TSlgCityBuildingData& from);

  inline TSlgCityBuildingData& operator=(const TSlgCityBuildingData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityBuildingData& default_instance();

  void Swap(TSlgCityBuildingData* other);

  // implements Message ----------------------------------------------

  TSlgCityBuildingData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityBuildingData& from);
  void MergeFrom(const TSlgCityBuildingData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FoundationId = 1;
  inline bool has_foundationid() const;
  inline void clear_foundationid();
  static const int kFoundationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityBuildingData</name>
  	<Function>
  		<name>foundationid</name>
  		<replaceName>FoundationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_foundationid</name>
  		<replaceName>FoundationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_foundationid</name>
  		<replaceName>FoundationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 foundationid() const;
  inline void set_foundationid(::google::protobuf::uint32 value);

  // optional uint32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityBuildingData</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityBuildingData)
 private:
  inline void set_has_foundationid();
  inline void clear_has_foundationid();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 foundationid_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityBuildingData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityBuildingAppointData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityBuildingAppointData : public ::google::protobuf::Message {
 public:
  TSlgCityBuildingAppointData();
  virtual ~TSlgCityBuildingAppointData();

  TSlgCityBuildingAppointData(const TSlgCityBuildingAppointData& from);

  inline TSlgCityBuildingAppointData& operator=(const TSlgCityBuildingAppointData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityBuildingAppointData& default_instance();

  void Swap(TSlgCityBuildingAppointData* other);

  // implements Message ----------------------------------------------

  TSlgCityBuildingAppointData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityBuildingAppointData& from);
  void MergeFrom(const TSlgCityBuildingAppointData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuildingTid = 1;
  inline bool has_buildingtid() const;
  inline void clear_buildingtid();
  static const int kBuildingTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityBuildingAppointData</name>
  	<Function>
  		<name>buildingtid</name>
  		<replaceName>BuildingTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buildingtid</name>
  		<replaceName>BuildingTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildingtid</name>
  		<replaceName>BuildingTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buildingtid() const;
  inline void set_buildingtid(::google::protobuf::uint32 value);

  // optional uint32 Htid = 2;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityBuildingAppointData</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityBuildingAppointData)
 private:
  inline void set_has_buildingtid();
  inline void clear_has_buildingtid();
  inline void set_has_htid();
  inline void clear_has_htid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buildingtid_;
  ::google::protobuf::uint32 htid_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityBuildingAppointData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityBuildingQueueData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityBuildingQueueData : public ::google::protobuf::Message {
 public:
  TSlgCityBuildingQueueData();
  virtual ~TSlgCityBuildingQueueData();

  TSlgCityBuildingQueueData(const TSlgCityBuildingQueueData& from);

  inline TSlgCityBuildingQueueData& operator=(const TSlgCityBuildingQueueData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityBuildingQueueData& default_instance();

  void Swap(TSlgCityBuildingQueueData* other);

  // implements Message ----------------------------------------------

  TSlgCityBuildingQueueData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityBuildingQueueData& from);
  void MergeFrom(const TSlgCityBuildingQueueData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 QueueId = 1;
  inline bool has_queueid() const;
  inline void clear_queueid();
  static const int kQueueIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityBuildingQueueData</name>
  	<Function>
  		<name>queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 queueid() const;
  inline void set_queueid(::google::protobuf::uint32 value);

  // optional int64 EndCDTime = 2;
  inline bool has_endcdtime() const;
  inline void clear_endcdtime();
  static const int kEndCDTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityBuildingQueueData</name>
  	<Function>
  		<name>endcdtime</name>
  		<replaceName>EndCDTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endcdtime</name>
  		<replaceName>EndCDTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endcdtime</name>
  		<replaceName>EndCDTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 endcdtime() const;
  inline void set_endcdtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityBuildingQueueData)
 private:
  inline void set_has_queueid();
  inline void clear_has_queueid();
  inline void set_has_endcdtime();
  inline void clear_has_endcdtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 endcdtime_;
  ::google::protobuf::uint32 queueid_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityBuildingQueueData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityTimeLimitedPropData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityTimeLimitedPropData : public ::google::protobuf::Message {
 public:
  TSlgCityTimeLimitedPropData();
  virtual ~TSlgCityTimeLimitedPropData();

  TSlgCityTimeLimitedPropData(const TSlgCityTimeLimitedPropData& from);

  inline TSlgCityTimeLimitedPropData& operator=(const TSlgCityTimeLimitedPropData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityTimeLimitedPropData& default_instance();

  void Swap(TSlgCityTimeLimitedPropData* other);

  // implements Message ----------------------------------------------

  TSlgCityTimeLimitedPropData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityTimeLimitedPropData& from);
  void MergeFrom(const TSlgCityTimeLimitedPropData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 PropTid = 1;
  inline bool has_proptid() const;
  inline void clear_proptid();
  static const int kPropTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityTimeLimitedPropData</name>
  	<Function>
  		<name>proptid</name>
  		<replaceName>PropTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_proptid</name>
  		<replaceName>PropTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_proptid</name>
  		<replaceName>PropTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 proptid() const;
  inline void set_proptid(::google::protobuf::uint32 value);

  // optional int64 EndTime = 2;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityTimeLimitedPropData</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityTimeLimitedPropData)
 private:
  inline void set_has_proptid();
  inline void clear_has_proptid();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::uint32 proptid_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityTimeLimitedPropData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityFreeWarData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityFreeWarData : public ::google::protobuf::Message {
 public:
  TSlgCityFreeWarData();
  virtual ~TSlgCityFreeWarData();

  TSlgCityFreeWarData(const TSlgCityFreeWarData& from);

  inline TSlgCityFreeWarData& operator=(const TSlgCityFreeWarData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityFreeWarData& default_instance();

  void Swap(TSlgCityFreeWarData* other);

  // implements Message ----------------------------------------------

  TSlgCityFreeWarData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityFreeWarData& from);
  void MergeFrom(const TSlgCityFreeWarData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 StartTime = 1;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityFreeWarData</name>
  	<Function>
  		<name>starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);

  // optional int64 EndTime = 2;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityFreeWarData</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityFreeWarData)
 private:
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int64 endtime_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityFreeWarData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityWallDurableData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityWallDurableData : public ::google::protobuf::Message {
 public:
  TSlgCityWallDurableData();
  virtual ~TSlgCityWallDurableData();

  TSlgCityWallDurableData(const TSlgCityWallDurableData& from);

  inline TSlgCityWallDurableData& operator=(const TSlgCityWallDurableData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityWallDurableData& default_instance();

  void Swap(TSlgCityWallDurableData* other);

  // implements Message ----------------------------------------------

  TSlgCityWallDurableData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityWallDurableData& from);
  void MergeFrom(const TSlgCityWallDurableData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CurDurability = 1;
  inline bool has_curdurability() const;
  inline void clear_curdurability();
  static const int kCurDurabilityFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityWallDurableData</name>
  	<Function>
  		<name>curdurability</name>
  		<replaceName>CurDurability</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curdurability</name>
  		<replaceName>CurDurability</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curdurability</name>
  		<replaceName>CurDurability</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curdurability() const;
  inline void set_curdurability(::google::protobuf::uint32 value);

  // optional int64 UpdateTime = 2;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityWallDurableData</name>
  	<Function>
  		<name>updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityWallDurableData)
 private:
  inline void set_has_curdurability();
  inline void clear_has_curdurability();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::uint32 curdurability_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityWallDurableData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityGetCityInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityGetCityInfoRsp : public ::google::protobuf::Message {
 public:
  TSlgCityGetCityInfoRsp();
  virtual ~TSlgCityGetCityInfoRsp();

  TSlgCityGetCityInfoRsp(const TSlgCityGetCityInfoRsp& from);

  inline TSlgCityGetCityInfoRsp& operator=(const TSlgCityGetCityInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityGetCityInfoRsp& default_instance();

  void Swap(TSlgCityGetCityInfoRsp* other);

  // implements Message ----------------------------------------------

  TSlgCityGetCityInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityGetCityInfoRsp& from);
  void MergeFrom(const TSlgCityGetCityInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TSlgCityBuildingData BuildingArr = 1;
  inline int buildingarr_size() const;
  inline void clear_buildingarr();
  static const int kBuildingArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityGetCityInfoRsp</name>
  	<Function>
  		<name>buildingarr</name>
  		<replaceName>BuildingArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buildingarr</name>
  		<replaceName>BuildingArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buildingarr</name>
  		<replaceName>BuildingArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildingarr</name>
  		<replaceName>BuildingArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buildingarr_size</name>
  		<replaceName>BuildingArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgCityBuildingData& buildingarr(int index) const;
  inline ::pb::TSlgCityBuildingData* mutable_buildingarr(int index);
  inline ::pb::TSlgCityBuildingData* add_buildingarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingData >&
      buildingarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingData >*
      mutable_buildingarr();

  // repeated .pb.TSlgCityBuildingAppointData AppointArr = 2;
  inline int appointarr_size() const;
  inline void clear_appointarr();
  static const int kAppointArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityGetCityInfoRsp</name>
  	<Function>
  		<name>appointarr</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_appointarr</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_appointarr</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_appointarr</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>appointarr_size</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgCityBuildingAppointData& appointarr(int index) const;
  inline ::pb::TSlgCityBuildingAppointData* mutable_appointarr(int index);
  inline ::pb::TSlgCityBuildingAppointData* add_appointarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingAppointData >&
      appointarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingAppointData >*
      mutable_appointarr();

  // repeated .pb.TSlgCityBuildingQueueData QueueArr = 3;
  inline int queuearr_size() const;
  inline void clear_queuearr();
  static const int kQueueArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityGetCityInfoRsp</name>
  	<Function>
  		<name>queuearr</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_queuearr</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_queuearr</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_queuearr</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>queuearr_size</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgCityBuildingQueueData& queuearr(int index) const;
  inline ::pb::TSlgCityBuildingQueueData* mutable_queuearr(int index);
  inline ::pb::TSlgCityBuildingQueueData* add_queuearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingQueueData >&
      queuearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingQueueData >*
      mutable_queuearr();

  // optional .pb.TSlgCityFreeWarData FreeWarInfo = 4;
  inline bool has_freewarinfo() const;
  inline void clear_freewarinfo();
  static const int kFreeWarInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityGetCityInfoRsp</name>
  	<Function>
  		<name>freewarinfo</name>
  		<replaceName>FreeWarInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_freewarinfo</name>
  		<replaceName>FreeWarInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_freewarinfo</name>
  		<replaceName>FreeWarInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_freewarinfo</name>
  		<replaceName>FreeWarInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgCityFreeWarData& freewarinfo() const;
  inline ::pb::TSlgCityFreeWarData* mutable_freewarinfo();
  inline ::pb::TSlgCityFreeWarData* release_freewarinfo();
  inline void set_allocated_freewarinfo(::pb::TSlgCityFreeWarData* freewarinfo);

  // optional .pb.TSlgCityWallDurableData WallDurable = 5;
  inline bool has_walldurable() const;
  inline void clear_walldurable();
  static const int kWallDurableFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityGetCityInfoRsp</name>
  	<Function>
  		<name>walldurable</name>
  		<replaceName>WallDurable</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_walldurable</name>
  		<replaceName>WallDurable</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_walldurable</name>
  		<replaceName>WallDurable</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_walldurable</name>
  		<replaceName>WallDurable</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgCityWallDurableData& walldurable() const;
  inline ::pb::TSlgCityWallDurableData* mutable_walldurable();
  inline ::pb::TSlgCityWallDurableData* release_walldurable();
  inline void set_allocated_walldurable(::pb::TSlgCityWallDurableData* walldurable);

  // repeated .pb.TSlgCityTimeLimitedPropData TimeLimitedPropArr = 6;
  inline int timelimitedproparr_size() const;
  inline void clear_timelimitedproparr();
  static const int kTimeLimitedPropArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityGetCityInfoRsp</name>
  	<Function>
  		<name>timelimitedproparr</name>
  		<replaceName>TimeLimitedPropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_timelimitedproparr</name>
  		<replaceName>TimeLimitedPropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_timelimitedproparr</name>
  		<replaceName>TimeLimitedPropArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_timelimitedproparr</name>
  		<replaceName>TimeLimitedPropArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>timelimitedproparr_size</name>
  		<replaceName>TimeLimitedPropArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgCityTimeLimitedPropData& timelimitedproparr(int index) const;
  inline ::pb::TSlgCityTimeLimitedPropData* mutable_timelimitedproparr(int index);
  inline ::pb::TSlgCityTimeLimitedPropData* add_timelimitedproparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityTimeLimitedPropData >&
      timelimitedproparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityTimeLimitedPropData >*
      mutable_timelimitedproparr();

  // repeated uint32 ActiveBuindingtidArr = 7;
  inline int activebuindingtidarr_size() const;
  inline void clear_activebuindingtidarr();
  static const int kActiveBuindingtidArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityGetCityInfoRsp</name>
  	<Function>
  		<name>activebuindingtidarr</name>
  		<replaceName>ActiveBuindingtidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_activebuindingtidarr</name>
  		<replaceName>ActiveBuindingtidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_activebuindingtidarr</name>
  		<replaceName>ActiveBuindingtidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_activebuindingtidarr</name>
  		<replaceName>ActiveBuindingtidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>activebuindingtidarr_size</name>
  		<replaceName>ActiveBuindingtidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 activebuindingtidarr(int index) const;
  inline void set_activebuindingtidarr(int index, ::google::protobuf::uint32 value);
  inline void add_activebuindingtidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      activebuindingtidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_activebuindingtidarr();

  // @@protoc_insertion_point(class_scope:pb.TSlgCityGetCityInfoRsp)
 private:
  inline void set_has_freewarinfo();
  inline void clear_has_freewarinfo();
  inline void set_has_walldurable();
  inline void clear_has_walldurable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingData > buildingarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingAppointData > appointarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingQueueData > queuearr_;
  ::pb::TSlgCityFreeWarData* freewarinfo_;
  ::pb::TSlgCityWallDurableData* walldurable_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityTimeLimitedPropData > timelimitedproparr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > activebuindingtidarr_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityGetCityInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityCityInfoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityCityInfoNotify : public ::google::protobuf::Message {
 public:
  TSlgCityCityInfoNotify();
  virtual ~TSlgCityCityInfoNotify();

  TSlgCityCityInfoNotify(const TSlgCityCityInfoNotify& from);

  inline TSlgCityCityInfoNotify& operator=(const TSlgCityCityInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityCityInfoNotify& default_instance();

  void Swap(TSlgCityCityInfoNotify* other);

  // implements Message ----------------------------------------------

  TSlgCityCityInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityCityInfoNotify& from);
  void MergeFrom(const TSlgCityCityInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TSlgCityBuildingData BuildingArr = 1;
  inline int buildingarr_size() const;
  inline void clear_buildingarr();
  static const int kBuildingArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityCityInfoNotify</name>
  	<Function>
  		<name>buildingarr</name>
  		<replaceName>BuildingArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buildingarr</name>
  		<replaceName>BuildingArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buildingarr</name>
  		<replaceName>BuildingArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildingarr</name>
  		<replaceName>BuildingArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buildingarr_size</name>
  		<replaceName>BuildingArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgCityBuildingData& buildingarr(int index) const;
  inline ::pb::TSlgCityBuildingData* mutable_buildingarr(int index);
  inline ::pb::TSlgCityBuildingData* add_buildingarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingData >&
      buildingarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingData >*
      mutable_buildingarr();

  // repeated .pb.TSlgCityBuildingAppointData AppointArr = 2;
  inline int appointarr_size() const;
  inline void clear_appointarr();
  static const int kAppointArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityCityInfoNotify</name>
  	<Function>
  		<name>appointarr</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_appointarr</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_appointarr</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_appointarr</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>appointarr_size</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgCityBuildingAppointData& appointarr(int index) const;
  inline ::pb::TSlgCityBuildingAppointData* mutable_appointarr(int index);
  inline ::pb::TSlgCityBuildingAppointData* add_appointarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingAppointData >&
      appointarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingAppointData >*
      mutable_appointarr();

  // repeated .pb.TSlgCityBuildingQueueData QueueArr = 3;
  inline int queuearr_size() const;
  inline void clear_queuearr();
  static const int kQueueArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityCityInfoNotify</name>
  	<Function>
  		<name>queuearr</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_queuearr</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_queuearr</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_queuearr</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>queuearr_size</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgCityBuildingQueueData& queuearr(int index) const;
  inline ::pb::TSlgCityBuildingQueueData* mutable_queuearr(int index);
  inline ::pb::TSlgCityBuildingQueueData* add_queuearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingQueueData >&
      queuearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingQueueData >*
      mutable_queuearr();

  // optional .pb.TSlgCityFreeWarData FreeWarInfo = 4;
  inline bool has_freewarinfo() const;
  inline void clear_freewarinfo();
  static const int kFreeWarInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityCityInfoNotify</name>
  	<Function>
  		<name>freewarinfo</name>
  		<replaceName>FreeWarInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_freewarinfo</name>
  		<replaceName>FreeWarInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_freewarinfo</name>
  		<replaceName>FreeWarInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_freewarinfo</name>
  		<replaceName>FreeWarInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgCityFreeWarData& freewarinfo() const;
  inline ::pb::TSlgCityFreeWarData* mutable_freewarinfo();
  inline ::pb::TSlgCityFreeWarData* release_freewarinfo();
  inline void set_allocated_freewarinfo(::pb::TSlgCityFreeWarData* freewarinfo);

  // optional .pb.TSlgCityWallDurableData WallDurable = 5;
  inline bool has_walldurable() const;
  inline void clear_walldurable();
  static const int kWallDurableFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityCityInfoNotify</name>
  	<Function>
  		<name>walldurable</name>
  		<replaceName>WallDurable</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_walldurable</name>
  		<replaceName>WallDurable</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_walldurable</name>
  		<replaceName>WallDurable</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_walldurable</name>
  		<replaceName>WallDurable</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgCityWallDurableData& walldurable() const;
  inline ::pb::TSlgCityWallDurableData* mutable_walldurable();
  inline ::pb::TSlgCityWallDurableData* release_walldurable();
  inline void set_allocated_walldurable(::pb::TSlgCityWallDurableData* walldurable);

  // repeated .pb.TSlgCityTimeLimitedPropData TimeLimitedPropArr = 6;
  inline int timelimitedproparr_size() const;
  inline void clear_timelimitedproparr();
  static const int kTimeLimitedPropArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityCityInfoNotify</name>
  	<Function>
  		<name>timelimitedproparr</name>
  		<replaceName>TimeLimitedPropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_timelimitedproparr</name>
  		<replaceName>TimeLimitedPropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_timelimitedproparr</name>
  		<replaceName>TimeLimitedPropArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_timelimitedproparr</name>
  		<replaceName>TimeLimitedPropArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>timelimitedproparr_size</name>
  		<replaceName>TimeLimitedPropArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgCityTimeLimitedPropData& timelimitedproparr(int index) const;
  inline ::pb::TSlgCityTimeLimitedPropData* mutable_timelimitedproparr(int index);
  inline ::pb::TSlgCityTimeLimitedPropData* add_timelimitedproparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityTimeLimitedPropData >&
      timelimitedproparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityTimeLimitedPropData >*
      mutable_timelimitedproparr();

  // repeated uint32 ActiveBuindingtidArr = 7;
  inline int activebuindingtidarr_size() const;
  inline void clear_activebuindingtidarr();
  static const int kActiveBuindingtidArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityCityInfoNotify</name>
  	<Function>
  		<name>activebuindingtidarr</name>
  		<replaceName>ActiveBuindingtidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_activebuindingtidarr</name>
  		<replaceName>ActiveBuindingtidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_activebuindingtidarr</name>
  		<replaceName>ActiveBuindingtidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_activebuindingtidarr</name>
  		<replaceName>ActiveBuindingtidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>activebuindingtidarr_size</name>
  		<replaceName>ActiveBuindingtidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 activebuindingtidarr(int index) const;
  inline void set_activebuindingtidarr(int index, ::google::protobuf::uint32 value);
  inline void add_activebuindingtidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      activebuindingtidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_activebuindingtidarr();

  // @@protoc_insertion_point(class_scope:pb.TSlgCityCityInfoNotify)
 private:
  inline void set_has_freewarinfo();
  inline void clear_has_freewarinfo();
  inline void set_has_walldurable();
  inline void clear_has_walldurable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingData > buildingarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingAppointData > appointarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingQueueData > queuearr_;
  ::pb::TSlgCityFreeWarData* freewarinfo_;
  ::pb::TSlgCityWallDurableData* walldurable_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityTimeLimitedPropData > timelimitedproparr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > activebuindingtidarr_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityCityInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityLevelUpReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityLevelUpReq : public ::google::protobuf::Message {
 public:
  TSlgCityLevelUpReq();
  virtual ~TSlgCityLevelUpReq();

  TSlgCityLevelUpReq(const TSlgCityLevelUpReq& from);

  inline TSlgCityLevelUpReq& operator=(const TSlgCityLevelUpReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityLevelUpReq& default_instance();

  void Swap(TSlgCityLevelUpReq* other);

  // implements Message ----------------------------------------------

  TSlgCityLevelUpReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityLevelUpReq& from);
  void MergeFrom(const TSlgCityLevelUpReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FoundationId = 1;
  inline bool has_foundationid() const;
  inline void clear_foundationid();
  static const int kFoundationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityLevelUpReq</name>
  	<Function>
  		<name>foundationid</name>
  		<replaceName>FoundationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_foundationid</name>
  		<replaceName>FoundationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_foundationid</name>
  		<replaceName>FoundationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 foundationid() const;
  inline void set_foundationid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityLevelUpReq)
 private:
  inline void set_has_foundationid();
  inline void clear_has_foundationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 foundationid_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityLevelUpReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityReduceBuildQueueCDByItemReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityReduceBuildQueueCDByItemReq : public ::google::protobuf::Message {
 public:
  TSlgCityReduceBuildQueueCDByItemReq();
  virtual ~TSlgCityReduceBuildQueueCDByItemReq();

  TSlgCityReduceBuildQueueCDByItemReq(const TSlgCityReduceBuildQueueCDByItemReq& from);

  inline TSlgCityReduceBuildQueueCDByItemReq& operator=(const TSlgCityReduceBuildQueueCDByItemReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityReduceBuildQueueCDByItemReq& default_instance();

  void Swap(TSlgCityReduceBuildQueueCDByItemReq* other);

  // implements Message ----------------------------------------------

  TSlgCityReduceBuildQueueCDByItemReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityReduceBuildQueueCDByItemReq& from);
  void MergeFrom(const TSlgCityReduceBuildQueueCDByItemReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuildingQueueId = 1;
  inline bool has_buildingqueueid() const;
  inline void clear_buildingqueueid();
  static const int kBuildingQueueIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityReduceBuildQueueCDByItemReq</name>
  	<Function>
  		<name>buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buildingqueueid() const;
  inline void set_buildingqueueid(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward ItemArr = 2;
  inline int itemarr_size() const;
  inline void clear_itemarr();
  static const int kItemArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityReduceBuildQueueCDByItemReq</name>
  	<Function>
  		<name>itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>itemarr_size</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& itemarr(int index) const;
  inline ::pb::TCommonReward* mutable_itemarr(int index);
  inline ::pb::TCommonReward* add_itemarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      itemarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_itemarr();

  // @@protoc_insertion_point(class_scope:pb.TSlgCityReduceBuildQueueCDByItemReq)
 private:
  inline void set_has_buildingqueueid();
  inline void clear_has_buildingqueueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > itemarr_;
  ::google::protobuf::uint32 buildingqueueid_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityReduceBuildQueueCDByItemReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityReduceBuildQueueAllCDByItemReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityReduceBuildQueueAllCDByItemReq : public ::google::protobuf::Message {
 public:
  TSlgCityReduceBuildQueueAllCDByItemReq();
  virtual ~TSlgCityReduceBuildQueueAllCDByItemReq();

  TSlgCityReduceBuildQueueAllCDByItemReq(const TSlgCityReduceBuildQueueAllCDByItemReq& from);

  inline TSlgCityReduceBuildQueueAllCDByItemReq& operator=(const TSlgCityReduceBuildQueueAllCDByItemReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityReduceBuildQueueAllCDByItemReq& default_instance();

  void Swap(TSlgCityReduceBuildQueueAllCDByItemReq* other);

  // implements Message ----------------------------------------------

  TSlgCityReduceBuildQueueAllCDByItemReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityReduceBuildQueueAllCDByItemReq& from);
  void MergeFrom(const TSlgCityReduceBuildQueueAllCDByItemReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuildingQueueId = 1;
  inline bool has_buildingqueueid() const;
  inline void clear_buildingqueueid();
  static const int kBuildingQueueIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityReduceBuildQueueAllCDByItemReq</name>
  	<Function>
  		<name>buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buildingqueueid() const;
  inline void set_buildingqueueid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityReduceBuildQueueAllCDByItemReq)
 private:
  inline void set_has_buildingqueueid();
  inline void clear_has_buildingqueueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buildingqueueid_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityReduceBuildQueueAllCDByItemReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityReduceBuildQueueCDByGoldReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityReduceBuildQueueCDByGoldReq : public ::google::protobuf::Message {
 public:
  TSlgCityReduceBuildQueueCDByGoldReq();
  virtual ~TSlgCityReduceBuildQueueCDByGoldReq();

  TSlgCityReduceBuildQueueCDByGoldReq(const TSlgCityReduceBuildQueueCDByGoldReq& from);

  inline TSlgCityReduceBuildQueueCDByGoldReq& operator=(const TSlgCityReduceBuildQueueCDByGoldReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityReduceBuildQueueCDByGoldReq& default_instance();

  void Swap(TSlgCityReduceBuildQueueCDByGoldReq* other);

  // implements Message ----------------------------------------------

  TSlgCityReduceBuildQueueCDByGoldReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityReduceBuildQueueCDByGoldReq& from);
  void MergeFrom(const TSlgCityReduceBuildQueueCDByGoldReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuildingQueueId = 1;
  inline bool has_buildingqueueid() const;
  inline void clear_buildingqueueid();
  static const int kBuildingQueueIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityReduceBuildQueueCDByGoldReq</name>
  	<Function>
  		<name>buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buildingqueueid() const;
  inline void set_buildingqueueid(::google::protobuf::uint32 value);

  // optional uint32 GoldNum = 2;
  inline bool has_goldnum() const;
  inline void clear_goldnum();
  static const int kGoldNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityReduceBuildQueueCDByGoldReq</name>
  	<Function>
  		<name>goldnum</name>
  		<replaceName>GoldNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goldnum</name>
  		<replaceName>GoldNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goldnum</name>
  		<replaceName>GoldNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goldnum() const;
  inline void set_goldnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityReduceBuildQueueCDByGoldReq)
 private:
  inline void set_has_buildingqueueid();
  inline void clear_has_buildingqueueid();
  inline void set_has_goldnum();
  inline void clear_has_goldnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buildingqueueid_;
  ::google::protobuf::uint32 goldnum_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityReduceBuildQueueCDByGoldReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityReduceBuildQueueAllCDByGoldReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityReduceBuildQueueAllCDByGoldReq : public ::google::protobuf::Message {
 public:
  TSlgCityReduceBuildQueueAllCDByGoldReq();
  virtual ~TSlgCityReduceBuildQueueAllCDByGoldReq();

  TSlgCityReduceBuildQueueAllCDByGoldReq(const TSlgCityReduceBuildQueueAllCDByGoldReq& from);

  inline TSlgCityReduceBuildQueueAllCDByGoldReq& operator=(const TSlgCityReduceBuildQueueAllCDByGoldReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityReduceBuildQueueAllCDByGoldReq& default_instance();

  void Swap(TSlgCityReduceBuildQueueAllCDByGoldReq* other);

  // implements Message ----------------------------------------------

  TSlgCityReduceBuildQueueAllCDByGoldReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityReduceBuildQueueAllCDByGoldReq& from);
  void MergeFrom(const TSlgCityReduceBuildQueueAllCDByGoldReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuildingQueueId = 1;
  inline bool has_buildingqueueid() const;
  inline void clear_buildingqueueid();
  static const int kBuildingQueueIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityReduceBuildQueueAllCDByGoldReq</name>
  	<Function>
  		<name>buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buildingqueueid() const;
  inline void set_buildingqueueid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityReduceBuildQueueAllCDByGoldReq)
 private:
  inline void set_has_buildingqueueid();
  inline void clear_has_buildingqueueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buildingqueueid_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityReduceBuildQueueAllCDByGoldReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityReduceBuildQueueCDByGuildHelpReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityReduceBuildQueueCDByGuildHelpReq : public ::google::protobuf::Message {
 public:
  TSlgCityReduceBuildQueueCDByGuildHelpReq();
  virtual ~TSlgCityReduceBuildQueueCDByGuildHelpReq();

  TSlgCityReduceBuildQueueCDByGuildHelpReq(const TSlgCityReduceBuildQueueCDByGuildHelpReq& from);

  inline TSlgCityReduceBuildQueueCDByGuildHelpReq& operator=(const TSlgCityReduceBuildQueueCDByGuildHelpReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityReduceBuildQueueCDByGuildHelpReq& default_instance();

  void Swap(TSlgCityReduceBuildQueueCDByGuildHelpReq* other);

  // implements Message ----------------------------------------------

  TSlgCityReduceBuildQueueCDByGuildHelpReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityReduceBuildQueueCDByGuildHelpReq& from);
  void MergeFrom(const TSlgCityReduceBuildQueueCDByGuildHelpReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuildingQueueId = 1;
  inline bool has_buildingqueueid() const;
  inline void clear_buildingqueueid();
  static const int kBuildingQueueIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityReduceBuildQueueCDByGuildHelpReq</name>
  	<Function>
  		<name>buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buildingqueueid() const;
  inline void set_buildingqueueid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityReduceBuildQueueCDByGuildHelpReq)
 private:
  inline void set_has_buildingqueueid();
  inline void clear_has_buildingqueueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buildingqueueid_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityReduceBuildQueueCDByGuildHelpReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityReduceBuildQueueCDFreepReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityReduceBuildQueueCDFreepReq : public ::google::protobuf::Message {
 public:
  TSlgCityReduceBuildQueueCDFreepReq();
  virtual ~TSlgCityReduceBuildQueueCDFreepReq();

  TSlgCityReduceBuildQueueCDFreepReq(const TSlgCityReduceBuildQueueCDFreepReq& from);

  inline TSlgCityReduceBuildQueueCDFreepReq& operator=(const TSlgCityReduceBuildQueueCDFreepReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityReduceBuildQueueCDFreepReq& default_instance();

  void Swap(TSlgCityReduceBuildQueueCDFreepReq* other);

  // implements Message ----------------------------------------------

  TSlgCityReduceBuildQueueCDFreepReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityReduceBuildQueueCDFreepReq& from);
  void MergeFrom(const TSlgCityReduceBuildQueueCDFreepReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuildingQueueId = 1;
  inline bool has_buildingqueueid() const;
  inline void clear_buildingqueueid();
  static const int kBuildingQueueIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityReduceBuildQueueCDFreepReq</name>
  	<Function>
  		<name>buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildingqueueid</name>
  		<replaceName>BuildingQueueId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buildingqueueid() const;
  inline void set_buildingqueueid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityReduceBuildQueueCDFreepReq)
 private:
  inline void set_has_buildingqueueid();
  inline void clear_has_buildingqueueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buildingqueueid_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityReduceBuildQueueCDFreepReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityUnlockBuildingReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityUnlockBuildingReq : public ::google::protobuf::Message {
 public:
  TSlgCityUnlockBuildingReq();
  virtual ~TSlgCityUnlockBuildingReq();

  TSlgCityUnlockBuildingReq(const TSlgCityUnlockBuildingReq& from);

  inline TSlgCityUnlockBuildingReq& operator=(const TSlgCityUnlockBuildingReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityUnlockBuildingReq& default_instance();

  void Swap(TSlgCityUnlockBuildingReq* other);

  // implements Message ----------------------------------------------

  TSlgCityUnlockBuildingReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityUnlockBuildingReq& from);
  void MergeFrom(const TSlgCityUnlockBuildingReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FoundationId = 1;
  inline bool has_foundationid() const;
  inline void clear_foundationid();
  static const int kFoundationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityUnlockBuildingReq</name>
  	<Function>
  		<name>foundationid</name>
  		<replaceName>FoundationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_foundationid</name>
  		<replaceName>FoundationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_foundationid</name>
  		<replaceName>FoundationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 foundationid() const;
  inline void set_foundationid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityUnlockBuildingReq)
 private:
  inline void set_has_foundationid();
  inline void clear_has_foundationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 foundationid_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityUnlockBuildingReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityBuildBuildingReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityBuildBuildingReq : public ::google::protobuf::Message {
 public:
  TSlgCityBuildBuildingReq();
  virtual ~TSlgCityBuildBuildingReq();

  TSlgCityBuildBuildingReq(const TSlgCityBuildBuildingReq& from);

  inline TSlgCityBuildBuildingReq& operator=(const TSlgCityBuildBuildingReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityBuildBuildingReq& default_instance();

  void Swap(TSlgCityBuildBuildingReq* other);

  // implements Message ----------------------------------------------

  TSlgCityBuildBuildingReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityBuildBuildingReq& from);
  void MergeFrom(const TSlgCityBuildBuildingReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FoundationId = 1;
  inline bool has_foundationid() const;
  inline void clear_foundationid();
  static const int kFoundationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityBuildBuildingReq</name>
  	<Function>
  		<name>foundationid</name>
  		<replaceName>FoundationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_foundationid</name>
  		<replaceName>FoundationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_foundationid</name>
  		<replaceName>FoundationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 foundationid() const;
  inline void set_foundationid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityBuildBuildingReq)
 private:
  inline void set_has_foundationid();
  inline void clear_has_foundationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 foundationid_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityBuildBuildingReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityFreeWarReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityFreeWarReq : public ::google::protobuf::Message {
 public:
  TSlgCityFreeWarReq();
  virtual ~TSlgCityFreeWarReq();

  TSlgCityFreeWarReq(const TSlgCityFreeWarReq& from);

  inline TSlgCityFreeWarReq& operator=(const TSlgCityFreeWarReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityFreeWarReq& default_instance();

  void Swap(TSlgCityFreeWarReq* other);

  // implements Message ----------------------------------------------

  TSlgCityFreeWarReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityFreeWarReq& from);
  void MergeFrom(const TSlgCityFreeWarReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 PropTid = 1;
  inline bool has_proptid() const;
  inline void clear_proptid();
  static const int kPropTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityFreeWarReq</name>
  	<Function>
  		<name>proptid</name>
  		<replaceName>PropTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_proptid</name>
  		<replaceName>PropTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_proptid</name>
  		<replaceName>PropTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 proptid() const;
  inline void set_proptid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityFreeWarReq)
 private:
  inline void set_has_proptid();
  inline void clear_has_proptid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 proptid_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityFreeWarReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityAppointHeroReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityAppointHeroReq : public ::google::protobuf::Message {
 public:
  TSlgCityAppointHeroReq();
  virtual ~TSlgCityAppointHeroReq();

  TSlgCityAppointHeroReq(const TSlgCityAppointHeroReq& from);

  inline TSlgCityAppointHeroReq& operator=(const TSlgCityAppointHeroReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityAppointHeroReq& default_instance();

  void Swap(TSlgCityAppointHeroReq* other);

  // implements Message ----------------------------------------------

  TSlgCityAppointHeroReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityAppointHeroReq& from);
  void MergeFrom(const TSlgCityAppointHeroReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuildingTid = 1;
  inline bool has_buildingtid() const;
  inline void clear_buildingtid();
  static const int kBuildingTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityAppointHeroReq</name>
  	<Function>
  		<name>buildingtid</name>
  		<replaceName>BuildingTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buildingtid</name>
  		<replaceName>BuildingTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildingtid</name>
  		<replaceName>BuildingTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buildingtid() const;
  inline void set_buildingtid(::google::protobuf::uint32 value);

  // optional uint32 HeroTid = 2;
  inline bool has_herotid() const;
  inline void clear_herotid();
  static const int kHeroTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityAppointHeroReq</name>
  	<Function>
  		<name>herotid</name>
  		<replaceName>HeroTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_herotid</name>
  		<replaceName>HeroTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_herotid</name>
  		<replaceName>HeroTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 herotid() const;
  inline void set_herotid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityAppointHeroReq)
 private:
  inline void set_has_buildingtid();
  inline void clear_has_buildingtid();
  inline void set_has_herotid();
  inline void clear_has_herotid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buildingtid_;
  ::google::protobuf::uint32 herotid_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityAppointHeroReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityRelieveAppointHeroReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityRelieveAppointHeroReq : public ::google::protobuf::Message {
 public:
  TSlgCityRelieveAppointHeroReq();
  virtual ~TSlgCityRelieveAppointHeroReq();

  TSlgCityRelieveAppointHeroReq(const TSlgCityRelieveAppointHeroReq& from);

  inline TSlgCityRelieveAppointHeroReq& operator=(const TSlgCityRelieveAppointHeroReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityRelieveAppointHeroReq& default_instance();

  void Swap(TSlgCityRelieveAppointHeroReq* other);

  // implements Message ----------------------------------------------

  TSlgCityRelieveAppointHeroReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityRelieveAppointHeroReq& from);
  void MergeFrom(const TSlgCityRelieveAppointHeroReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuildingTid = 1;
  inline bool has_buildingtid() const;
  inline void clear_buildingtid();
  static const int kBuildingTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityRelieveAppointHeroReq</name>
  	<Function>
  		<name>buildingtid</name>
  		<replaceName>BuildingTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buildingtid</name>
  		<replaceName>BuildingTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildingtid</name>
  		<replaceName>BuildingTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buildingtid() const;
  inline void set_buildingtid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityRelieveAppointHeroReq)
 private:
  inline void set_has_buildingtid();
  inline void clear_has_buildingtid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buildingtid_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityRelieveAppointHeroReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityUseTimeLimitedPropReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityUseTimeLimitedPropReq : public ::google::protobuf::Message {
 public:
  TSlgCityUseTimeLimitedPropReq();
  virtual ~TSlgCityUseTimeLimitedPropReq();

  TSlgCityUseTimeLimitedPropReq(const TSlgCityUseTimeLimitedPropReq& from);

  inline TSlgCityUseTimeLimitedPropReq& operator=(const TSlgCityUseTimeLimitedPropReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityUseTimeLimitedPropReq& default_instance();

  void Swap(TSlgCityUseTimeLimitedPropReq* other);

  // implements Message ----------------------------------------------

  TSlgCityUseTimeLimitedPropReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityUseTimeLimitedPropReq& from);
  void MergeFrom(const TSlgCityUseTimeLimitedPropReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 PropTid = 1;
  inline bool has_proptid() const;
  inline void clear_proptid();
  static const int kPropTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityUseTimeLimitedPropReq</name>
  	<Function>
  		<name>proptid</name>
  		<replaceName>PropTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_proptid</name>
  		<replaceName>PropTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_proptid</name>
  		<replaceName>PropTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 proptid() const;
  inline void set_proptid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityUseTimeLimitedPropReq)
 private:
  inline void set_has_proptid();
  inline void clear_has_proptid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 proptid_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityUseTimeLimitedPropReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgCityActiveHeroPropertyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgCity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgCityActiveHeroPropertyReq : public ::google::protobuf::Message {
 public:
  TSlgCityActiveHeroPropertyReq();
  virtual ~TSlgCityActiveHeroPropertyReq();

  TSlgCityActiveHeroPropertyReq(const TSlgCityActiveHeroPropertyReq& from);

  inline TSlgCityActiveHeroPropertyReq& operator=(const TSlgCityActiveHeroPropertyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgCityActiveHeroPropertyReq& default_instance();

  void Swap(TSlgCityActiveHeroPropertyReq* other);

  // implements Message ----------------------------------------------

  TSlgCityActiveHeroPropertyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgCityActiveHeroPropertyReq& from);
  void MergeFrom(const TSlgCityActiveHeroPropertyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuildingTid = 1;
  inline bool has_buildingtid() const;
  inline void clear_buildingtid();
  static const int kBuildingTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgCityActiveHeroPropertyReq</name>
  	<Function>
  		<name>buildingtid</name>
  		<replaceName>BuildingTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buildingtid</name>
  		<replaceName>BuildingTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildingtid</name>
  		<replaceName>BuildingTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buildingtid() const;
  inline void set_buildingtid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgCityActiveHeroPropertyReq)
 private:
  inline void set_has_buildingtid();
  inline void clear_has_buildingtid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buildingtid_;
  friend void  protobuf_AddDesc_net_2fSlgCity_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgCity_2eproto();

  void InitAsDefaultInstance();
  static TSlgCityActiveHeroPropertyReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TSlgCityBuildingData

// optional uint32 FoundationId = 1;
inline bool TSlgCityBuildingData::has_foundationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityBuildingData::set_has_foundationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityBuildingData::clear_has_foundationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityBuildingData::clear_foundationid() {
  foundationid_ = 0u;
  clear_has_foundationid();
}
inline ::google::protobuf::uint32 TSlgCityBuildingData::foundationid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityBuildingData.FoundationId)
  return foundationid_;
}
inline void TSlgCityBuildingData::set_foundationid(::google::protobuf::uint32 value) {
  set_has_foundationid();
  foundationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityBuildingData.FoundationId)
}

// optional uint32 Level = 2;
inline bool TSlgCityBuildingData::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSlgCityBuildingData::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSlgCityBuildingData::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSlgCityBuildingData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TSlgCityBuildingData::level() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityBuildingData.Level)
  return level_;
}
inline void TSlgCityBuildingData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityBuildingData.Level)
}

// -------------------------------------------------------------------

// TSlgCityBuildingAppointData

// optional uint32 BuildingTid = 1;
inline bool TSlgCityBuildingAppointData::has_buildingtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityBuildingAppointData::set_has_buildingtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityBuildingAppointData::clear_has_buildingtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityBuildingAppointData::clear_buildingtid() {
  buildingtid_ = 0u;
  clear_has_buildingtid();
}
inline ::google::protobuf::uint32 TSlgCityBuildingAppointData::buildingtid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityBuildingAppointData.BuildingTid)
  return buildingtid_;
}
inline void TSlgCityBuildingAppointData::set_buildingtid(::google::protobuf::uint32 value) {
  set_has_buildingtid();
  buildingtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityBuildingAppointData.BuildingTid)
}

// optional uint32 Htid = 2;
inline bool TSlgCityBuildingAppointData::has_htid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSlgCityBuildingAppointData::set_has_htid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSlgCityBuildingAppointData::clear_has_htid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSlgCityBuildingAppointData::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TSlgCityBuildingAppointData::htid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityBuildingAppointData.Htid)
  return htid_;
}
inline void TSlgCityBuildingAppointData::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityBuildingAppointData.Htid)
}

// -------------------------------------------------------------------

// TSlgCityBuildingQueueData

// optional uint32 QueueId = 1;
inline bool TSlgCityBuildingQueueData::has_queueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityBuildingQueueData::set_has_queueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityBuildingQueueData::clear_has_queueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityBuildingQueueData::clear_queueid() {
  queueid_ = 0u;
  clear_has_queueid();
}
inline ::google::protobuf::uint32 TSlgCityBuildingQueueData::queueid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityBuildingQueueData.QueueId)
  return queueid_;
}
inline void TSlgCityBuildingQueueData::set_queueid(::google::protobuf::uint32 value) {
  set_has_queueid();
  queueid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityBuildingQueueData.QueueId)
}

// optional int64 EndCDTime = 2;
inline bool TSlgCityBuildingQueueData::has_endcdtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSlgCityBuildingQueueData::set_has_endcdtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSlgCityBuildingQueueData::clear_has_endcdtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSlgCityBuildingQueueData::clear_endcdtime() {
  endcdtime_ = GOOGLE_LONGLONG(0);
  clear_has_endcdtime();
}
inline ::google::protobuf::int64 TSlgCityBuildingQueueData::endcdtime() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityBuildingQueueData.EndCDTime)
  return endcdtime_;
}
inline void TSlgCityBuildingQueueData::set_endcdtime(::google::protobuf::int64 value) {
  set_has_endcdtime();
  endcdtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityBuildingQueueData.EndCDTime)
}

// -------------------------------------------------------------------

// TSlgCityTimeLimitedPropData

// optional uint32 PropTid = 1;
inline bool TSlgCityTimeLimitedPropData::has_proptid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityTimeLimitedPropData::set_has_proptid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityTimeLimitedPropData::clear_has_proptid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityTimeLimitedPropData::clear_proptid() {
  proptid_ = 0u;
  clear_has_proptid();
}
inline ::google::protobuf::uint32 TSlgCityTimeLimitedPropData::proptid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityTimeLimitedPropData.PropTid)
  return proptid_;
}
inline void TSlgCityTimeLimitedPropData::set_proptid(::google::protobuf::uint32 value) {
  set_has_proptid();
  proptid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityTimeLimitedPropData.PropTid)
}

// optional int64 EndTime = 2;
inline bool TSlgCityTimeLimitedPropData::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSlgCityTimeLimitedPropData::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSlgCityTimeLimitedPropData::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSlgCityTimeLimitedPropData::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 TSlgCityTimeLimitedPropData::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityTimeLimitedPropData.EndTime)
  return endtime_;
}
inline void TSlgCityTimeLimitedPropData::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityTimeLimitedPropData.EndTime)
}

// -------------------------------------------------------------------

// TSlgCityFreeWarData

// optional int64 StartTime = 1;
inline bool TSlgCityFreeWarData::has_starttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityFreeWarData::set_has_starttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityFreeWarData::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityFreeWarData::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 TSlgCityFreeWarData::starttime() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityFreeWarData.StartTime)
  return starttime_;
}
inline void TSlgCityFreeWarData::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityFreeWarData.StartTime)
}

// optional int64 EndTime = 2;
inline bool TSlgCityFreeWarData::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSlgCityFreeWarData::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSlgCityFreeWarData::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSlgCityFreeWarData::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 TSlgCityFreeWarData::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityFreeWarData.EndTime)
  return endtime_;
}
inline void TSlgCityFreeWarData::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityFreeWarData.EndTime)
}

// -------------------------------------------------------------------

// TSlgCityWallDurableData

// optional uint32 CurDurability = 1;
inline bool TSlgCityWallDurableData::has_curdurability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityWallDurableData::set_has_curdurability() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityWallDurableData::clear_has_curdurability() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityWallDurableData::clear_curdurability() {
  curdurability_ = 0u;
  clear_has_curdurability();
}
inline ::google::protobuf::uint32 TSlgCityWallDurableData::curdurability() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityWallDurableData.CurDurability)
  return curdurability_;
}
inline void TSlgCityWallDurableData::set_curdurability(::google::protobuf::uint32 value) {
  set_has_curdurability();
  curdurability_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityWallDurableData.CurDurability)
}

// optional int64 UpdateTime = 2;
inline bool TSlgCityWallDurableData::has_updatetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSlgCityWallDurableData::set_has_updatetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSlgCityWallDurableData::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSlgCityWallDurableData::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 TSlgCityWallDurableData::updatetime() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityWallDurableData.UpdateTime)
  return updatetime_;
}
inline void TSlgCityWallDurableData::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityWallDurableData.UpdateTime)
}

// -------------------------------------------------------------------

// TSlgCityGetCityInfoRsp

// repeated .pb.TSlgCityBuildingData BuildingArr = 1;
inline int TSlgCityGetCityInfoRsp::buildingarr_size() const {
  return buildingarr_.size();
}
inline void TSlgCityGetCityInfoRsp::clear_buildingarr() {
  buildingarr_.Clear();
}
inline const ::pb::TSlgCityBuildingData& TSlgCityGetCityInfoRsp::buildingarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityGetCityInfoRsp.BuildingArr)
  return buildingarr_.Get(index);
}
inline ::pb::TSlgCityBuildingData* TSlgCityGetCityInfoRsp::mutable_buildingarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgCityGetCityInfoRsp.BuildingArr)
  return buildingarr_.Mutable(index);
}
inline ::pb::TSlgCityBuildingData* TSlgCityGetCityInfoRsp::add_buildingarr() {
  // @@protoc_insertion_point(field_add:pb.TSlgCityGetCityInfoRsp.BuildingArr)
  return buildingarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingData >&
TSlgCityGetCityInfoRsp::buildingarr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgCityGetCityInfoRsp.BuildingArr)
  return buildingarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingData >*
TSlgCityGetCityInfoRsp::mutable_buildingarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgCityGetCityInfoRsp.BuildingArr)
  return &buildingarr_;
}

// repeated .pb.TSlgCityBuildingAppointData AppointArr = 2;
inline int TSlgCityGetCityInfoRsp::appointarr_size() const {
  return appointarr_.size();
}
inline void TSlgCityGetCityInfoRsp::clear_appointarr() {
  appointarr_.Clear();
}
inline const ::pb::TSlgCityBuildingAppointData& TSlgCityGetCityInfoRsp::appointarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityGetCityInfoRsp.AppointArr)
  return appointarr_.Get(index);
}
inline ::pb::TSlgCityBuildingAppointData* TSlgCityGetCityInfoRsp::mutable_appointarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgCityGetCityInfoRsp.AppointArr)
  return appointarr_.Mutable(index);
}
inline ::pb::TSlgCityBuildingAppointData* TSlgCityGetCityInfoRsp::add_appointarr() {
  // @@protoc_insertion_point(field_add:pb.TSlgCityGetCityInfoRsp.AppointArr)
  return appointarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingAppointData >&
TSlgCityGetCityInfoRsp::appointarr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgCityGetCityInfoRsp.AppointArr)
  return appointarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingAppointData >*
TSlgCityGetCityInfoRsp::mutable_appointarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgCityGetCityInfoRsp.AppointArr)
  return &appointarr_;
}

// repeated .pb.TSlgCityBuildingQueueData QueueArr = 3;
inline int TSlgCityGetCityInfoRsp::queuearr_size() const {
  return queuearr_.size();
}
inline void TSlgCityGetCityInfoRsp::clear_queuearr() {
  queuearr_.Clear();
}
inline const ::pb::TSlgCityBuildingQueueData& TSlgCityGetCityInfoRsp::queuearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityGetCityInfoRsp.QueueArr)
  return queuearr_.Get(index);
}
inline ::pb::TSlgCityBuildingQueueData* TSlgCityGetCityInfoRsp::mutable_queuearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgCityGetCityInfoRsp.QueueArr)
  return queuearr_.Mutable(index);
}
inline ::pb::TSlgCityBuildingQueueData* TSlgCityGetCityInfoRsp::add_queuearr() {
  // @@protoc_insertion_point(field_add:pb.TSlgCityGetCityInfoRsp.QueueArr)
  return queuearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingQueueData >&
TSlgCityGetCityInfoRsp::queuearr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgCityGetCityInfoRsp.QueueArr)
  return queuearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingQueueData >*
TSlgCityGetCityInfoRsp::mutable_queuearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgCityGetCityInfoRsp.QueueArr)
  return &queuearr_;
}

// optional .pb.TSlgCityFreeWarData FreeWarInfo = 4;
inline bool TSlgCityGetCityInfoRsp::has_freewarinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSlgCityGetCityInfoRsp::set_has_freewarinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSlgCityGetCityInfoRsp::clear_has_freewarinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSlgCityGetCityInfoRsp::clear_freewarinfo() {
  if (freewarinfo_ != NULL) freewarinfo_->::pb::TSlgCityFreeWarData::Clear();
  clear_has_freewarinfo();
}
inline const ::pb::TSlgCityFreeWarData& TSlgCityGetCityInfoRsp::freewarinfo() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityGetCityInfoRsp.FreeWarInfo)
  return freewarinfo_ != NULL ? *freewarinfo_ : *default_instance_->freewarinfo_;
}
inline ::pb::TSlgCityFreeWarData* TSlgCityGetCityInfoRsp::mutable_freewarinfo() {
  set_has_freewarinfo();
  if (freewarinfo_ == NULL) freewarinfo_ = new ::pb::TSlgCityFreeWarData;
  // @@protoc_insertion_point(field_mutable:pb.TSlgCityGetCityInfoRsp.FreeWarInfo)
  return freewarinfo_;
}
inline ::pb::TSlgCityFreeWarData* TSlgCityGetCityInfoRsp::release_freewarinfo() {
  clear_has_freewarinfo();
  ::pb::TSlgCityFreeWarData* temp = freewarinfo_;
  freewarinfo_ = NULL;
  return temp;
}
inline void TSlgCityGetCityInfoRsp::set_allocated_freewarinfo(::pb::TSlgCityFreeWarData* freewarinfo) {
  delete freewarinfo_;
  freewarinfo_ = freewarinfo;
  if (freewarinfo) {
    set_has_freewarinfo();
  } else {
    clear_has_freewarinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSlgCityGetCityInfoRsp.FreeWarInfo)
}

// optional .pb.TSlgCityWallDurableData WallDurable = 5;
inline bool TSlgCityGetCityInfoRsp::has_walldurable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TSlgCityGetCityInfoRsp::set_has_walldurable() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TSlgCityGetCityInfoRsp::clear_has_walldurable() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TSlgCityGetCityInfoRsp::clear_walldurable() {
  if (walldurable_ != NULL) walldurable_->::pb::TSlgCityWallDurableData::Clear();
  clear_has_walldurable();
}
inline const ::pb::TSlgCityWallDurableData& TSlgCityGetCityInfoRsp::walldurable() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityGetCityInfoRsp.WallDurable)
  return walldurable_ != NULL ? *walldurable_ : *default_instance_->walldurable_;
}
inline ::pb::TSlgCityWallDurableData* TSlgCityGetCityInfoRsp::mutable_walldurable() {
  set_has_walldurable();
  if (walldurable_ == NULL) walldurable_ = new ::pb::TSlgCityWallDurableData;
  // @@protoc_insertion_point(field_mutable:pb.TSlgCityGetCityInfoRsp.WallDurable)
  return walldurable_;
}
inline ::pb::TSlgCityWallDurableData* TSlgCityGetCityInfoRsp::release_walldurable() {
  clear_has_walldurable();
  ::pb::TSlgCityWallDurableData* temp = walldurable_;
  walldurable_ = NULL;
  return temp;
}
inline void TSlgCityGetCityInfoRsp::set_allocated_walldurable(::pb::TSlgCityWallDurableData* walldurable) {
  delete walldurable_;
  walldurable_ = walldurable;
  if (walldurable) {
    set_has_walldurable();
  } else {
    clear_has_walldurable();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSlgCityGetCityInfoRsp.WallDurable)
}

// repeated .pb.TSlgCityTimeLimitedPropData TimeLimitedPropArr = 6;
inline int TSlgCityGetCityInfoRsp::timelimitedproparr_size() const {
  return timelimitedproparr_.size();
}
inline void TSlgCityGetCityInfoRsp::clear_timelimitedproparr() {
  timelimitedproparr_.Clear();
}
inline const ::pb::TSlgCityTimeLimitedPropData& TSlgCityGetCityInfoRsp::timelimitedproparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityGetCityInfoRsp.TimeLimitedPropArr)
  return timelimitedproparr_.Get(index);
}
inline ::pb::TSlgCityTimeLimitedPropData* TSlgCityGetCityInfoRsp::mutable_timelimitedproparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgCityGetCityInfoRsp.TimeLimitedPropArr)
  return timelimitedproparr_.Mutable(index);
}
inline ::pb::TSlgCityTimeLimitedPropData* TSlgCityGetCityInfoRsp::add_timelimitedproparr() {
  // @@protoc_insertion_point(field_add:pb.TSlgCityGetCityInfoRsp.TimeLimitedPropArr)
  return timelimitedproparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityTimeLimitedPropData >&
TSlgCityGetCityInfoRsp::timelimitedproparr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgCityGetCityInfoRsp.TimeLimitedPropArr)
  return timelimitedproparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityTimeLimitedPropData >*
TSlgCityGetCityInfoRsp::mutable_timelimitedproparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgCityGetCityInfoRsp.TimeLimitedPropArr)
  return &timelimitedproparr_;
}

// repeated uint32 ActiveBuindingtidArr = 7;
inline int TSlgCityGetCityInfoRsp::activebuindingtidarr_size() const {
  return activebuindingtidarr_.size();
}
inline void TSlgCityGetCityInfoRsp::clear_activebuindingtidarr() {
  activebuindingtidarr_.Clear();
}
inline ::google::protobuf::uint32 TSlgCityGetCityInfoRsp::activebuindingtidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityGetCityInfoRsp.ActiveBuindingtidArr)
  return activebuindingtidarr_.Get(index);
}
inline void TSlgCityGetCityInfoRsp::set_activebuindingtidarr(int index, ::google::protobuf::uint32 value) {
  activebuindingtidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TSlgCityGetCityInfoRsp.ActiveBuindingtidArr)
}
inline void TSlgCityGetCityInfoRsp::add_activebuindingtidarr(::google::protobuf::uint32 value) {
  activebuindingtidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TSlgCityGetCityInfoRsp.ActiveBuindingtidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TSlgCityGetCityInfoRsp::activebuindingtidarr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgCityGetCityInfoRsp.ActiveBuindingtidArr)
  return activebuindingtidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TSlgCityGetCityInfoRsp::mutable_activebuindingtidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgCityGetCityInfoRsp.ActiveBuindingtidArr)
  return &activebuindingtidarr_;
}

// -------------------------------------------------------------------

// TSlgCityCityInfoNotify

// repeated .pb.TSlgCityBuildingData BuildingArr = 1;
inline int TSlgCityCityInfoNotify::buildingarr_size() const {
  return buildingarr_.size();
}
inline void TSlgCityCityInfoNotify::clear_buildingarr() {
  buildingarr_.Clear();
}
inline const ::pb::TSlgCityBuildingData& TSlgCityCityInfoNotify::buildingarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityCityInfoNotify.BuildingArr)
  return buildingarr_.Get(index);
}
inline ::pb::TSlgCityBuildingData* TSlgCityCityInfoNotify::mutable_buildingarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgCityCityInfoNotify.BuildingArr)
  return buildingarr_.Mutable(index);
}
inline ::pb::TSlgCityBuildingData* TSlgCityCityInfoNotify::add_buildingarr() {
  // @@protoc_insertion_point(field_add:pb.TSlgCityCityInfoNotify.BuildingArr)
  return buildingarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingData >&
TSlgCityCityInfoNotify::buildingarr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgCityCityInfoNotify.BuildingArr)
  return buildingarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingData >*
TSlgCityCityInfoNotify::mutable_buildingarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgCityCityInfoNotify.BuildingArr)
  return &buildingarr_;
}

// repeated .pb.TSlgCityBuildingAppointData AppointArr = 2;
inline int TSlgCityCityInfoNotify::appointarr_size() const {
  return appointarr_.size();
}
inline void TSlgCityCityInfoNotify::clear_appointarr() {
  appointarr_.Clear();
}
inline const ::pb::TSlgCityBuildingAppointData& TSlgCityCityInfoNotify::appointarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityCityInfoNotify.AppointArr)
  return appointarr_.Get(index);
}
inline ::pb::TSlgCityBuildingAppointData* TSlgCityCityInfoNotify::mutable_appointarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgCityCityInfoNotify.AppointArr)
  return appointarr_.Mutable(index);
}
inline ::pb::TSlgCityBuildingAppointData* TSlgCityCityInfoNotify::add_appointarr() {
  // @@protoc_insertion_point(field_add:pb.TSlgCityCityInfoNotify.AppointArr)
  return appointarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingAppointData >&
TSlgCityCityInfoNotify::appointarr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgCityCityInfoNotify.AppointArr)
  return appointarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingAppointData >*
TSlgCityCityInfoNotify::mutable_appointarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgCityCityInfoNotify.AppointArr)
  return &appointarr_;
}

// repeated .pb.TSlgCityBuildingQueueData QueueArr = 3;
inline int TSlgCityCityInfoNotify::queuearr_size() const {
  return queuearr_.size();
}
inline void TSlgCityCityInfoNotify::clear_queuearr() {
  queuearr_.Clear();
}
inline const ::pb::TSlgCityBuildingQueueData& TSlgCityCityInfoNotify::queuearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityCityInfoNotify.QueueArr)
  return queuearr_.Get(index);
}
inline ::pb::TSlgCityBuildingQueueData* TSlgCityCityInfoNotify::mutable_queuearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgCityCityInfoNotify.QueueArr)
  return queuearr_.Mutable(index);
}
inline ::pb::TSlgCityBuildingQueueData* TSlgCityCityInfoNotify::add_queuearr() {
  // @@protoc_insertion_point(field_add:pb.TSlgCityCityInfoNotify.QueueArr)
  return queuearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingQueueData >&
TSlgCityCityInfoNotify::queuearr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgCityCityInfoNotify.QueueArr)
  return queuearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityBuildingQueueData >*
TSlgCityCityInfoNotify::mutable_queuearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgCityCityInfoNotify.QueueArr)
  return &queuearr_;
}

// optional .pb.TSlgCityFreeWarData FreeWarInfo = 4;
inline bool TSlgCityCityInfoNotify::has_freewarinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSlgCityCityInfoNotify::set_has_freewarinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSlgCityCityInfoNotify::clear_has_freewarinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSlgCityCityInfoNotify::clear_freewarinfo() {
  if (freewarinfo_ != NULL) freewarinfo_->::pb::TSlgCityFreeWarData::Clear();
  clear_has_freewarinfo();
}
inline const ::pb::TSlgCityFreeWarData& TSlgCityCityInfoNotify::freewarinfo() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityCityInfoNotify.FreeWarInfo)
  return freewarinfo_ != NULL ? *freewarinfo_ : *default_instance_->freewarinfo_;
}
inline ::pb::TSlgCityFreeWarData* TSlgCityCityInfoNotify::mutable_freewarinfo() {
  set_has_freewarinfo();
  if (freewarinfo_ == NULL) freewarinfo_ = new ::pb::TSlgCityFreeWarData;
  // @@protoc_insertion_point(field_mutable:pb.TSlgCityCityInfoNotify.FreeWarInfo)
  return freewarinfo_;
}
inline ::pb::TSlgCityFreeWarData* TSlgCityCityInfoNotify::release_freewarinfo() {
  clear_has_freewarinfo();
  ::pb::TSlgCityFreeWarData* temp = freewarinfo_;
  freewarinfo_ = NULL;
  return temp;
}
inline void TSlgCityCityInfoNotify::set_allocated_freewarinfo(::pb::TSlgCityFreeWarData* freewarinfo) {
  delete freewarinfo_;
  freewarinfo_ = freewarinfo;
  if (freewarinfo) {
    set_has_freewarinfo();
  } else {
    clear_has_freewarinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSlgCityCityInfoNotify.FreeWarInfo)
}

// optional .pb.TSlgCityWallDurableData WallDurable = 5;
inline bool TSlgCityCityInfoNotify::has_walldurable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TSlgCityCityInfoNotify::set_has_walldurable() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TSlgCityCityInfoNotify::clear_has_walldurable() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TSlgCityCityInfoNotify::clear_walldurable() {
  if (walldurable_ != NULL) walldurable_->::pb::TSlgCityWallDurableData::Clear();
  clear_has_walldurable();
}
inline const ::pb::TSlgCityWallDurableData& TSlgCityCityInfoNotify::walldurable() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityCityInfoNotify.WallDurable)
  return walldurable_ != NULL ? *walldurable_ : *default_instance_->walldurable_;
}
inline ::pb::TSlgCityWallDurableData* TSlgCityCityInfoNotify::mutable_walldurable() {
  set_has_walldurable();
  if (walldurable_ == NULL) walldurable_ = new ::pb::TSlgCityWallDurableData;
  // @@protoc_insertion_point(field_mutable:pb.TSlgCityCityInfoNotify.WallDurable)
  return walldurable_;
}
inline ::pb::TSlgCityWallDurableData* TSlgCityCityInfoNotify::release_walldurable() {
  clear_has_walldurable();
  ::pb::TSlgCityWallDurableData* temp = walldurable_;
  walldurable_ = NULL;
  return temp;
}
inline void TSlgCityCityInfoNotify::set_allocated_walldurable(::pb::TSlgCityWallDurableData* walldurable) {
  delete walldurable_;
  walldurable_ = walldurable;
  if (walldurable) {
    set_has_walldurable();
  } else {
    clear_has_walldurable();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSlgCityCityInfoNotify.WallDurable)
}

// repeated .pb.TSlgCityTimeLimitedPropData TimeLimitedPropArr = 6;
inline int TSlgCityCityInfoNotify::timelimitedproparr_size() const {
  return timelimitedproparr_.size();
}
inline void TSlgCityCityInfoNotify::clear_timelimitedproparr() {
  timelimitedproparr_.Clear();
}
inline const ::pb::TSlgCityTimeLimitedPropData& TSlgCityCityInfoNotify::timelimitedproparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityCityInfoNotify.TimeLimitedPropArr)
  return timelimitedproparr_.Get(index);
}
inline ::pb::TSlgCityTimeLimitedPropData* TSlgCityCityInfoNotify::mutable_timelimitedproparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgCityCityInfoNotify.TimeLimitedPropArr)
  return timelimitedproparr_.Mutable(index);
}
inline ::pb::TSlgCityTimeLimitedPropData* TSlgCityCityInfoNotify::add_timelimitedproparr() {
  // @@protoc_insertion_point(field_add:pb.TSlgCityCityInfoNotify.TimeLimitedPropArr)
  return timelimitedproparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityTimeLimitedPropData >&
TSlgCityCityInfoNotify::timelimitedproparr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgCityCityInfoNotify.TimeLimitedPropArr)
  return timelimitedproparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgCityTimeLimitedPropData >*
TSlgCityCityInfoNotify::mutable_timelimitedproparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgCityCityInfoNotify.TimeLimitedPropArr)
  return &timelimitedproparr_;
}

// repeated uint32 ActiveBuindingtidArr = 7;
inline int TSlgCityCityInfoNotify::activebuindingtidarr_size() const {
  return activebuindingtidarr_.size();
}
inline void TSlgCityCityInfoNotify::clear_activebuindingtidarr() {
  activebuindingtidarr_.Clear();
}
inline ::google::protobuf::uint32 TSlgCityCityInfoNotify::activebuindingtidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityCityInfoNotify.ActiveBuindingtidArr)
  return activebuindingtidarr_.Get(index);
}
inline void TSlgCityCityInfoNotify::set_activebuindingtidarr(int index, ::google::protobuf::uint32 value) {
  activebuindingtidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TSlgCityCityInfoNotify.ActiveBuindingtidArr)
}
inline void TSlgCityCityInfoNotify::add_activebuindingtidarr(::google::protobuf::uint32 value) {
  activebuindingtidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TSlgCityCityInfoNotify.ActiveBuindingtidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TSlgCityCityInfoNotify::activebuindingtidarr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgCityCityInfoNotify.ActiveBuindingtidArr)
  return activebuindingtidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TSlgCityCityInfoNotify::mutable_activebuindingtidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgCityCityInfoNotify.ActiveBuindingtidArr)
  return &activebuindingtidarr_;
}

// -------------------------------------------------------------------

// TSlgCityLevelUpReq

// optional uint32 FoundationId = 1;
inline bool TSlgCityLevelUpReq::has_foundationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityLevelUpReq::set_has_foundationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityLevelUpReq::clear_has_foundationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityLevelUpReq::clear_foundationid() {
  foundationid_ = 0u;
  clear_has_foundationid();
}
inline ::google::protobuf::uint32 TSlgCityLevelUpReq::foundationid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityLevelUpReq.FoundationId)
  return foundationid_;
}
inline void TSlgCityLevelUpReq::set_foundationid(::google::protobuf::uint32 value) {
  set_has_foundationid();
  foundationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityLevelUpReq.FoundationId)
}

// -------------------------------------------------------------------

// TSlgCityReduceBuildQueueCDByItemReq

// optional uint32 BuildingQueueId = 1;
inline bool TSlgCityReduceBuildQueueCDByItemReq::has_buildingqueueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityReduceBuildQueueCDByItemReq::set_has_buildingqueueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityReduceBuildQueueCDByItemReq::clear_has_buildingqueueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityReduceBuildQueueCDByItemReq::clear_buildingqueueid() {
  buildingqueueid_ = 0u;
  clear_has_buildingqueueid();
}
inline ::google::protobuf::uint32 TSlgCityReduceBuildQueueCDByItemReq::buildingqueueid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityReduceBuildQueueCDByItemReq.BuildingQueueId)
  return buildingqueueid_;
}
inline void TSlgCityReduceBuildQueueCDByItemReq::set_buildingqueueid(::google::protobuf::uint32 value) {
  set_has_buildingqueueid();
  buildingqueueid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityReduceBuildQueueCDByItemReq.BuildingQueueId)
}

// repeated .pb.TCommonReward ItemArr = 2;
inline int TSlgCityReduceBuildQueueCDByItemReq::itemarr_size() const {
  return itemarr_.size();
}
inline void TSlgCityReduceBuildQueueCDByItemReq::clear_itemarr() {
  itemarr_.Clear();
}
inline const ::pb::TCommonReward& TSlgCityReduceBuildQueueCDByItemReq::itemarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityReduceBuildQueueCDByItemReq.ItemArr)
  return itemarr_.Get(index);
}
inline ::pb::TCommonReward* TSlgCityReduceBuildQueueCDByItemReq::mutable_itemarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgCityReduceBuildQueueCDByItemReq.ItemArr)
  return itemarr_.Mutable(index);
}
inline ::pb::TCommonReward* TSlgCityReduceBuildQueueCDByItemReq::add_itemarr() {
  // @@protoc_insertion_point(field_add:pb.TSlgCityReduceBuildQueueCDByItemReq.ItemArr)
  return itemarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TSlgCityReduceBuildQueueCDByItemReq::itemarr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgCityReduceBuildQueueCDByItemReq.ItemArr)
  return itemarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TSlgCityReduceBuildQueueCDByItemReq::mutable_itemarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgCityReduceBuildQueueCDByItemReq.ItemArr)
  return &itemarr_;
}

// -------------------------------------------------------------------

// TSlgCityReduceBuildQueueAllCDByItemReq

// optional uint32 BuildingQueueId = 1;
inline bool TSlgCityReduceBuildQueueAllCDByItemReq::has_buildingqueueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityReduceBuildQueueAllCDByItemReq::set_has_buildingqueueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityReduceBuildQueueAllCDByItemReq::clear_has_buildingqueueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityReduceBuildQueueAllCDByItemReq::clear_buildingqueueid() {
  buildingqueueid_ = 0u;
  clear_has_buildingqueueid();
}
inline ::google::protobuf::uint32 TSlgCityReduceBuildQueueAllCDByItemReq::buildingqueueid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityReduceBuildQueueAllCDByItemReq.BuildingQueueId)
  return buildingqueueid_;
}
inline void TSlgCityReduceBuildQueueAllCDByItemReq::set_buildingqueueid(::google::protobuf::uint32 value) {
  set_has_buildingqueueid();
  buildingqueueid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityReduceBuildQueueAllCDByItemReq.BuildingQueueId)
}

// -------------------------------------------------------------------

// TSlgCityReduceBuildQueueCDByGoldReq

// optional uint32 BuildingQueueId = 1;
inline bool TSlgCityReduceBuildQueueCDByGoldReq::has_buildingqueueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityReduceBuildQueueCDByGoldReq::set_has_buildingqueueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityReduceBuildQueueCDByGoldReq::clear_has_buildingqueueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityReduceBuildQueueCDByGoldReq::clear_buildingqueueid() {
  buildingqueueid_ = 0u;
  clear_has_buildingqueueid();
}
inline ::google::protobuf::uint32 TSlgCityReduceBuildQueueCDByGoldReq::buildingqueueid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityReduceBuildQueueCDByGoldReq.BuildingQueueId)
  return buildingqueueid_;
}
inline void TSlgCityReduceBuildQueueCDByGoldReq::set_buildingqueueid(::google::protobuf::uint32 value) {
  set_has_buildingqueueid();
  buildingqueueid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityReduceBuildQueueCDByGoldReq.BuildingQueueId)
}

// optional uint32 GoldNum = 2;
inline bool TSlgCityReduceBuildQueueCDByGoldReq::has_goldnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSlgCityReduceBuildQueueCDByGoldReq::set_has_goldnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSlgCityReduceBuildQueueCDByGoldReq::clear_has_goldnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSlgCityReduceBuildQueueCDByGoldReq::clear_goldnum() {
  goldnum_ = 0u;
  clear_has_goldnum();
}
inline ::google::protobuf::uint32 TSlgCityReduceBuildQueueCDByGoldReq::goldnum() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityReduceBuildQueueCDByGoldReq.GoldNum)
  return goldnum_;
}
inline void TSlgCityReduceBuildQueueCDByGoldReq::set_goldnum(::google::protobuf::uint32 value) {
  set_has_goldnum();
  goldnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityReduceBuildQueueCDByGoldReq.GoldNum)
}

// -------------------------------------------------------------------

// TSlgCityReduceBuildQueueAllCDByGoldReq

// optional uint32 BuildingQueueId = 1;
inline bool TSlgCityReduceBuildQueueAllCDByGoldReq::has_buildingqueueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityReduceBuildQueueAllCDByGoldReq::set_has_buildingqueueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityReduceBuildQueueAllCDByGoldReq::clear_has_buildingqueueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityReduceBuildQueueAllCDByGoldReq::clear_buildingqueueid() {
  buildingqueueid_ = 0u;
  clear_has_buildingqueueid();
}
inline ::google::protobuf::uint32 TSlgCityReduceBuildQueueAllCDByGoldReq::buildingqueueid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityReduceBuildQueueAllCDByGoldReq.BuildingQueueId)
  return buildingqueueid_;
}
inline void TSlgCityReduceBuildQueueAllCDByGoldReq::set_buildingqueueid(::google::protobuf::uint32 value) {
  set_has_buildingqueueid();
  buildingqueueid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityReduceBuildQueueAllCDByGoldReq.BuildingQueueId)
}

// -------------------------------------------------------------------

// TSlgCityReduceBuildQueueCDByGuildHelpReq

// optional uint32 BuildingQueueId = 1;
inline bool TSlgCityReduceBuildQueueCDByGuildHelpReq::has_buildingqueueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityReduceBuildQueueCDByGuildHelpReq::set_has_buildingqueueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityReduceBuildQueueCDByGuildHelpReq::clear_has_buildingqueueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityReduceBuildQueueCDByGuildHelpReq::clear_buildingqueueid() {
  buildingqueueid_ = 0u;
  clear_has_buildingqueueid();
}
inline ::google::protobuf::uint32 TSlgCityReduceBuildQueueCDByGuildHelpReq::buildingqueueid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityReduceBuildQueueCDByGuildHelpReq.BuildingQueueId)
  return buildingqueueid_;
}
inline void TSlgCityReduceBuildQueueCDByGuildHelpReq::set_buildingqueueid(::google::protobuf::uint32 value) {
  set_has_buildingqueueid();
  buildingqueueid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityReduceBuildQueueCDByGuildHelpReq.BuildingQueueId)
}

// -------------------------------------------------------------------

// TSlgCityReduceBuildQueueCDFreepReq

// optional uint32 BuildingQueueId = 1;
inline bool TSlgCityReduceBuildQueueCDFreepReq::has_buildingqueueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityReduceBuildQueueCDFreepReq::set_has_buildingqueueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityReduceBuildQueueCDFreepReq::clear_has_buildingqueueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityReduceBuildQueueCDFreepReq::clear_buildingqueueid() {
  buildingqueueid_ = 0u;
  clear_has_buildingqueueid();
}
inline ::google::protobuf::uint32 TSlgCityReduceBuildQueueCDFreepReq::buildingqueueid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityReduceBuildQueueCDFreepReq.BuildingQueueId)
  return buildingqueueid_;
}
inline void TSlgCityReduceBuildQueueCDFreepReq::set_buildingqueueid(::google::protobuf::uint32 value) {
  set_has_buildingqueueid();
  buildingqueueid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityReduceBuildQueueCDFreepReq.BuildingQueueId)
}

// -------------------------------------------------------------------

// TSlgCityUnlockBuildingReq

// optional uint32 FoundationId = 1;
inline bool TSlgCityUnlockBuildingReq::has_foundationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityUnlockBuildingReq::set_has_foundationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityUnlockBuildingReq::clear_has_foundationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityUnlockBuildingReq::clear_foundationid() {
  foundationid_ = 0u;
  clear_has_foundationid();
}
inline ::google::protobuf::uint32 TSlgCityUnlockBuildingReq::foundationid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityUnlockBuildingReq.FoundationId)
  return foundationid_;
}
inline void TSlgCityUnlockBuildingReq::set_foundationid(::google::protobuf::uint32 value) {
  set_has_foundationid();
  foundationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityUnlockBuildingReq.FoundationId)
}

// -------------------------------------------------------------------

// TSlgCityBuildBuildingReq

// optional uint32 FoundationId = 1;
inline bool TSlgCityBuildBuildingReq::has_foundationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityBuildBuildingReq::set_has_foundationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityBuildBuildingReq::clear_has_foundationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityBuildBuildingReq::clear_foundationid() {
  foundationid_ = 0u;
  clear_has_foundationid();
}
inline ::google::protobuf::uint32 TSlgCityBuildBuildingReq::foundationid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityBuildBuildingReq.FoundationId)
  return foundationid_;
}
inline void TSlgCityBuildBuildingReq::set_foundationid(::google::protobuf::uint32 value) {
  set_has_foundationid();
  foundationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityBuildBuildingReq.FoundationId)
}

// -------------------------------------------------------------------

// TSlgCityFreeWarReq

// optional uint32 PropTid = 1;
inline bool TSlgCityFreeWarReq::has_proptid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityFreeWarReq::set_has_proptid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityFreeWarReq::clear_has_proptid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityFreeWarReq::clear_proptid() {
  proptid_ = 0u;
  clear_has_proptid();
}
inline ::google::protobuf::uint32 TSlgCityFreeWarReq::proptid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityFreeWarReq.PropTid)
  return proptid_;
}
inline void TSlgCityFreeWarReq::set_proptid(::google::protobuf::uint32 value) {
  set_has_proptid();
  proptid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityFreeWarReq.PropTid)
}

// -------------------------------------------------------------------

// TSlgCityAppointHeroReq

// optional uint32 BuildingTid = 1;
inline bool TSlgCityAppointHeroReq::has_buildingtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityAppointHeroReq::set_has_buildingtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityAppointHeroReq::clear_has_buildingtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityAppointHeroReq::clear_buildingtid() {
  buildingtid_ = 0u;
  clear_has_buildingtid();
}
inline ::google::protobuf::uint32 TSlgCityAppointHeroReq::buildingtid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityAppointHeroReq.BuildingTid)
  return buildingtid_;
}
inline void TSlgCityAppointHeroReq::set_buildingtid(::google::protobuf::uint32 value) {
  set_has_buildingtid();
  buildingtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityAppointHeroReq.BuildingTid)
}

// optional uint32 HeroTid = 2;
inline bool TSlgCityAppointHeroReq::has_herotid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSlgCityAppointHeroReq::set_has_herotid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSlgCityAppointHeroReq::clear_has_herotid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSlgCityAppointHeroReq::clear_herotid() {
  herotid_ = 0u;
  clear_has_herotid();
}
inline ::google::protobuf::uint32 TSlgCityAppointHeroReq::herotid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityAppointHeroReq.HeroTid)
  return herotid_;
}
inline void TSlgCityAppointHeroReq::set_herotid(::google::protobuf::uint32 value) {
  set_has_herotid();
  herotid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityAppointHeroReq.HeroTid)
}

// -------------------------------------------------------------------

// TSlgCityRelieveAppointHeroReq

// optional uint32 BuildingTid = 1;
inline bool TSlgCityRelieveAppointHeroReq::has_buildingtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityRelieveAppointHeroReq::set_has_buildingtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityRelieveAppointHeroReq::clear_has_buildingtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityRelieveAppointHeroReq::clear_buildingtid() {
  buildingtid_ = 0u;
  clear_has_buildingtid();
}
inline ::google::protobuf::uint32 TSlgCityRelieveAppointHeroReq::buildingtid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityRelieveAppointHeroReq.BuildingTid)
  return buildingtid_;
}
inline void TSlgCityRelieveAppointHeroReq::set_buildingtid(::google::protobuf::uint32 value) {
  set_has_buildingtid();
  buildingtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityRelieveAppointHeroReq.BuildingTid)
}

// -------------------------------------------------------------------

// TSlgCityUseTimeLimitedPropReq

// optional uint32 PropTid = 1;
inline bool TSlgCityUseTimeLimitedPropReq::has_proptid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityUseTimeLimitedPropReq::set_has_proptid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityUseTimeLimitedPropReq::clear_has_proptid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityUseTimeLimitedPropReq::clear_proptid() {
  proptid_ = 0u;
  clear_has_proptid();
}
inline ::google::protobuf::uint32 TSlgCityUseTimeLimitedPropReq::proptid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityUseTimeLimitedPropReq.PropTid)
  return proptid_;
}
inline void TSlgCityUseTimeLimitedPropReq::set_proptid(::google::protobuf::uint32 value) {
  set_has_proptid();
  proptid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityUseTimeLimitedPropReq.PropTid)
}

// -------------------------------------------------------------------

// TSlgCityActiveHeroPropertyReq

// optional uint32 BuildingTid = 1;
inline bool TSlgCityActiveHeroPropertyReq::has_buildingtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgCityActiveHeroPropertyReq::set_has_buildingtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgCityActiveHeroPropertyReq::clear_has_buildingtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgCityActiveHeroPropertyReq::clear_buildingtid() {
  buildingtid_ = 0u;
  clear_has_buildingtid();
}
inline ::google::protobuf::uint32 TSlgCityActiveHeroPropertyReq::buildingtid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgCityActiveHeroPropertyReq.BuildingTid)
  return buildingtid_;
}
inline void TSlgCityActiveHeroPropertyReq::set_buildingtid(::google::protobuf::uint32 value) {
  set_has_buildingtid();
  buildingtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgCityActiveHeroPropertyReq.BuildingTid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fSlgCity_2eproto__INCLUDED
