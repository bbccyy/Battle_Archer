// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Switch.proto

#ifndef PROTOBUF_net_2fSwitch_2eproto__INCLUDED
#define PROTOBUF_net_2fSwitch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fSwitch_2eproto();
void protobuf_AssignDesc_net_2fSwitch_2eproto();
void protobuf_ShutdownFile_net_2fSwitch_2eproto();

class TSwitchGetSwitchInfoReq;
class TSwitchGetSwitchInfoRsp;
class TSwitchUpdateSwitchInfoNotify;
class TSwitch;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TSwitchGetSwitchInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Switch.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSwitchGetSwitchInfoReq : public ::google::protobuf::Message {
 public:
  TSwitchGetSwitchInfoReq();
  virtual ~TSwitchGetSwitchInfoReq();

  TSwitchGetSwitchInfoReq(const TSwitchGetSwitchInfoReq& from);

  inline TSwitchGetSwitchInfoReq& operator=(const TSwitchGetSwitchInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSwitchGetSwitchInfoReq& default_instance();

  void Swap(TSwitchGetSwitchInfoReq* other);

  // implements Message ----------------------------------------------

  TSwitchGetSwitchInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSwitchGetSwitchInfoReq& from);
  void MergeFrom(const TSwitchGetSwitchInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TSwitchGetSwitchInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fSwitch_2eproto();
  friend void protobuf_AssignDesc_net_2fSwitch_2eproto();
  friend void protobuf_ShutdownFile_net_2fSwitch_2eproto();

  void InitAsDefaultInstance();
  static TSwitchGetSwitchInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSwitchGetSwitchInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Switch.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSwitchGetSwitchInfoRsp : public ::google::protobuf::Message {
 public:
  TSwitchGetSwitchInfoRsp();
  virtual ~TSwitchGetSwitchInfoRsp();

  TSwitchGetSwitchInfoRsp(const TSwitchGetSwitchInfoRsp& from);

  inline TSwitchGetSwitchInfoRsp& operator=(const TSwitchGetSwitchInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSwitchGetSwitchInfoRsp& default_instance();

  void Swap(TSwitchGetSwitchInfoRsp* other);

  // implements Message ----------------------------------------------

  TSwitchGetSwitchInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSwitchGetSwitchInfoRsp& from);
  void MergeFrom(const TSwitchGetSwitchInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TSwitch Info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSwitchGetSwitchInfoRsp</name>
  	<Function>
  		<name>info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSwitch& info() const;
  inline ::pb::TSwitch* mutable_info();
  inline ::pb::TSwitch* release_info();
  inline void set_allocated_info(::pb::TSwitch* info);

  // @@protoc_insertion_point(class_scope:pb.TSwitchGetSwitchInfoRsp)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TSwitch* info_;
  friend void  protobuf_AddDesc_net_2fSwitch_2eproto();
  friend void protobuf_AssignDesc_net_2fSwitch_2eproto();
  friend void protobuf_ShutdownFile_net_2fSwitch_2eproto();

  void InitAsDefaultInstance();
  static TSwitchGetSwitchInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSwitchUpdateSwitchInfoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Switch.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSwitchUpdateSwitchInfoNotify : public ::google::protobuf::Message {
 public:
  TSwitchUpdateSwitchInfoNotify();
  virtual ~TSwitchUpdateSwitchInfoNotify();

  TSwitchUpdateSwitchInfoNotify(const TSwitchUpdateSwitchInfoNotify& from);

  inline TSwitchUpdateSwitchInfoNotify& operator=(const TSwitchUpdateSwitchInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSwitchUpdateSwitchInfoNotify& default_instance();

  void Swap(TSwitchUpdateSwitchInfoNotify* other);

  // implements Message ----------------------------------------------

  TSwitchUpdateSwitchInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSwitchUpdateSwitchInfoNotify& from);
  void MergeFrom(const TSwitchUpdateSwitchInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TSwitch Info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSwitchUpdateSwitchInfoNotify</name>
  	<Function>
  		<name>info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSwitch& info() const;
  inline ::pb::TSwitch* mutable_info();
  inline ::pb::TSwitch* release_info();
  inline void set_allocated_info(::pb::TSwitch* info);

  // @@protoc_insertion_point(class_scope:pb.TSwitchUpdateSwitchInfoNotify)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TSwitch* info_;
  friend void  protobuf_AddDesc_net_2fSwitch_2eproto();
  friend void protobuf_AssignDesc_net_2fSwitch_2eproto();
  friend void protobuf_ShutdownFile_net_2fSwitch_2eproto();

  void InitAsDefaultInstance();
  static TSwitchUpdateSwitchInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSwitch</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Switch.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSwitch : public ::google::protobuf::Message {
 public:
  TSwitch();
  virtual ~TSwitch();

  TSwitch(const TSwitch& from);

  inline TSwitch& operator=(const TSwitch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSwitch& default_instance();

  void Swap(TSwitch* other);

  // implements Message ----------------------------------------------

  TSwitch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSwitch& from);
  void MergeFrom(const TSwitch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Combination = 1;
  inline bool has_combination() const;
  inline void clear_combination();
  static const int kCombinationFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSwitch</name>
  	<Function>
  		<name>combination</name>
  		<replaceName>Combination</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_combination</name>
  		<replaceName>Combination</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_combination</name>
  		<replaceName>Combination</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool combination() const;
  inline void set_combination(bool value);

  // @@protoc_insertion_point(class_scope:pb.TSwitch)
 private:
  inline void set_has_combination();
  inline void clear_has_combination();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool combination_;
  friend void  protobuf_AddDesc_net_2fSwitch_2eproto();
  friend void protobuf_AssignDesc_net_2fSwitch_2eproto();
  friend void protobuf_ShutdownFile_net_2fSwitch_2eproto();

  void InitAsDefaultInstance();
  static TSwitch* default_instance_;
};
// ===================================================================


// ===================================================================

// TSwitchGetSwitchInfoReq

// -------------------------------------------------------------------

// TSwitchGetSwitchInfoRsp

// optional .pb.TSwitch Info = 1;
inline bool TSwitchGetSwitchInfoRsp::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSwitchGetSwitchInfoRsp::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSwitchGetSwitchInfoRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSwitchGetSwitchInfoRsp::clear_info() {
  if (info_ != NULL) info_->::pb::TSwitch::Clear();
  clear_has_info();
}
inline const ::pb::TSwitch& TSwitchGetSwitchInfoRsp::info() const {
  // @@protoc_insertion_point(field_get:pb.TSwitchGetSwitchInfoRsp.Info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::TSwitch* TSwitchGetSwitchInfoRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::TSwitch;
  // @@protoc_insertion_point(field_mutable:pb.TSwitchGetSwitchInfoRsp.Info)
  return info_;
}
inline ::pb::TSwitch* TSwitchGetSwitchInfoRsp::release_info() {
  clear_has_info();
  ::pb::TSwitch* temp = info_;
  info_ = NULL;
  return temp;
}
inline void TSwitchGetSwitchInfoRsp::set_allocated_info(::pb::TSwitch* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSwitchGetSwitchInfoRsp.Info)
}

// -------------------------------------------------------------------

// TSwitchUpdateSwitchInfoNotify

// optional .pb.TSwitch Info = 1;
inline bool TSwitchUpdateSwitchInfoNotify::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSwitchUpdateSwitchInfoNotify::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSwitchUpdateSwitchInfoNotify::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSwitchUpdateSwitchInfoNotify::clear_info() {
  if (info_ != NULL) info_->::pb::TSwitch::Clear();
  clear_has_info();
}
inline const ::pb::TSwitch& TSwitchUpdateSwitchInfoNotify::info() const {
  // @@protoc_insertion_point(field_get:pb.TSwitchUpdateSwitchInfoNotify.Info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::TSwitch* TSwitchUpdateSwitchInfoNotify::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::TSwitch;
  // @@protoc_insertion_point(field_mutable:pb.TSwitchUpdateSwitchInfoNotify.Info)
  return info_;
}
inline ::pb::TSwitch* TSwitchUpdateSwitchInfoNotify::release_info() {
  clear_has_info();
  ::pb::TSwitch* temp = info_;
  info_ = NULL;
  return temp;
}
inline void TSwitchUpdateSwitchInfoNotify::set_allocated_info(::pb::TSwitch* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSwitchUpdateSwitchInfoNotify.Info)
}

// -------------------------------------------------------------------

// TSwitch

// optional bool Combination = 1;
inline bool TSwitch::has_combination() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSwitch::set_has_combination() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSwitch::clear_has_combination() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSwitch::clear_combination() {
  combination_ = false;
  clear_has_combination();
}
inline bool TSwitch::combination() const {
  // @@protoc_insertion_point(field_get:pb.TSwitch.Combination)
  return combination_;
}
inline void TSwitch::set_combination(bool value) {
  set_has_combination();
  combination_ = value;
  // @@protoc_insertion_point(field_set:pb.TSwitch.Combination)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fSwitch_2eproto__INCLUDED
