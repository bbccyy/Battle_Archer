// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/LimitGift.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/LimitGift.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TGiftInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGiftInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLimitGiftGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLimitGiftGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLimitGiftInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLimitGiftInfoNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fLimitGift_2eproto() {
  protobuf_AddDesc_net_2fLimitGift_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/LimitGift.proto");
  GOOGLE_CHECK(file != NULL);
  TGiftInfo_descriptor_ = file->message_type(0);
  static const int TGiftInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGiftInfo, giftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGiftInfo, buynum_),
  };
  TGiftInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGiftInfo_descriptor_,
      TGiftInfo::default_instance_,
      TGiftInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGiftInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGiftInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGiftInfo));
  TLimitGiftGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TLimitGiftGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLimitGiftGetInfoRsp, arrgiftinfo_),
  };
  TLimitGiftGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLimitGiftGetInfoRsp_descriptor_,
      TLimitGiftGetInfoRsp::default_instance_,
      TLimitGiftGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLimitGiftGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLimitGiftGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLimitGiftGetInfoRsp));
  TLimitGiftInfoNotify_descriptor_ = file->message_type(2);
  static const int TLimitGiftInfoNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLimitGiftInfoNotify, giftinfo_),
  };
  TLimitGiftInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLimitGiftInfoNotify_descriptor_,
      TLimitGiftInfoNotify::default_instance_,
      TLimitGiftInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLimitGiftInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLimitGiftInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLimitGiftInfoNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fLimitGift_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGiftInfo_descriptor_, &TGiftInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLimitGiftGetInfoRsp_descriptor_, &TLimitGiftGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLimitGiftInfoNotify_descriptor_, &TLimitGiftInfoNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fLimitGift_2eproto() {
  delete TGiftInfo::default_instance_;
  delete TGiftInfo_reflection_;
  delete TLimitGiftGetInfoRsp::default_instance_;
  delete TLimitGiftGetInfoRsp_reflection_;
  delete TLimitGiftInfoNotify::default_instance_;
  delete TLimitGiftInfoNotify_reflection_;
}

void protobuf_AddDesc_net_2fLimitGift_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/LimitGift.proto\022\002pb\"+\n\tTGiftInfo\022\016"
    "\n\006GiftId\030\001 \001(\r\022\016\n\006BuyNum\030\002 \001(\r\":\n\024TLimit"
    "GiftGetInfoRsp\022\"\n\013ArrGiftInfo\030\001 \003(\0132\r.pb"
    ".TGiftInfo\"7\n\024TLimitGiftInfoNotify\022\037\n\010Gi"
    "ftInfo\030\001 \001(\0132\r.pb.TGiftInfo", 187);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/LimitGift.proto", &protobuf_RegisterTypes);
  TGiftInfo::default_instance_ = new TGiftInfo();
  TLimitGiftGetInfoRsp::default_instance_ = new TLimitGiftGetInfoRsp();
  TLimitGiftInfoNotify::default_instance_ = new TLimitGiftInfoNotify();
  TGiftInfo::default_instance_->InitAsDefaultInstance();
  TLimitGiftGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TLimitGiftInfoNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fLimitGift_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fLimitGift_2eproto {
  StaticDescriptorInitializer_net_2fLimitGift_2eproto() {
    protobuf_AddDesc_net_2fLimitGift_2eproto();
  }
} static_descriptor_initializer_net_2fLimitGift_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TGiftInfo::kGiftIdFieldNumber;
const int TGiftInfo::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TGiftInfo::TGiftInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGiftInfo)
}

void TGiftInfo::InitAsDefaultInstance() {
}

TGiftInfo::TGiftInfo(const TGiftInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGiftInfo)
}

void TGiftInfo::SharedCtor() {
  _cached_size_ = 0;
  giftid_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGiftInfo::~TGiftInfo() {
  // @@protoc_insertion_point(destructor:pb.TGiftInfo)
  SharedDtor();
}

void TGiftInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGiftInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGiftInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGiftInfo_descriptor_;
}

const TGiftInfo& TGiftInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLimitGift_2eproto();
  return *default_instance_;
}

TGiftInfo* TGiftInfo::default_instance_ = NULL;

TGiftInfo* TGiftInfo::New() const {
  return new TGiftInfo;
}

void TGiftInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGiftInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(giftid_, buynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGiftInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGiftInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GiftId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giftid_)));
          set_has_giftid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGiftInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGiftInfo)
  return false;
#undef DO_
}

void TGiftInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGiftInfo)
  // optional uint32 GiftId = 1;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->giftid(), output);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGiftInfo)
}

::google::protobuf::uint8* TGiftInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGiftInfo)
  // optional uint32 GiftId = 1;
  if (has_giftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->giftid(), target);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGiftInfo)
  return target;
}

int TGiftInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GiftId = 1;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giftid());
    }

    // optional uint32 BuyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGiftInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGiftInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGiftInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGiftInfo::MergeFrom(const TGiftInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGiftInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGiftInfo::CopyFrom(const TGiftInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGiftInfo::IsInitialized() const {

  return true;
}

void TGiftInfo::Swap(TGiftInfo* other) {
  if (other != this) {
    std::swap(giftid_, other->giftid_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGiftInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGiftInfo_descriptor_;
  metadata.reflection = TGiftInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLimitGiftGetInfoRsp::kArrGiftInfoFieldNumber;
#endif  // !_MSC_VER

TLimitGiftGetInfoRsp::TLimitGiftGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLimitGiftGetInfoRsp)
}

void TLimitGiftGetInfoRsp::InitAsDefaultInstance() {
}

TLimitGiftGetInfoRsp::TLimitGiftGetInfoRsp(const TLimitGiftGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLimitGiftGetInfoRsp)
}

void TLimitGiftGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLimitGiftGetInfoRsp::~TLimitGiftGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TLimitGiftGetInfoRsp)
  SharedDtor();
}

void TLimitGiftGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLimitGiftGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLimitGiftGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLimitGiftGetInfoRsp_descriptor_;
}

const TLimitGiftGetInfoRsp& TLimitGiftGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLimitGift_2eproto();
  return *default_instance_;
}

TLimitGiftGetInfoRsp* TLimitGiftGetInfoRsp::default_instance_ = NULL;

TLimitGiftGetInfoRsp* TLimitGiftGetInfoRsp::New() const {
  return new TLimitGiftGetInfoRsp;
}

void TLimitGiftGetInfoRsp::Clear() {
  arrgiftinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLimitGiftGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLimitGiftGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGiftInfo ArrGiftInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrGiftInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrgiftinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrGiftInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLimitGiftGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLimitGiftGetInfoRsp)
  return false;
#undef DO_
}

void TLimitGiftGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLimitGiftGetInfoRsp)
  // repeated .pb.TGiftInfo ArrGiftInfo = 1;
  for (int i = 0; i < this->arrgiftinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrgiftinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLimitGiftGetInfoRsp)
}

::google::protobuf::uint8* TLimitGiftGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLimitGiftGetInfoRsp)
  // repeated .pb.TGiftInfo ArrGiftInfo = 1;
  for (int i = 0; i < this->arrgiftinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrgiftinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLimitGiftGetInfoRsp)
  return target;
}

int TLimitGiftGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGiftInfo ArrGiftInfo = 1;
  total_size += 1 * this->arrgiftinfo_size();
  for (int i = 0; i < this->arrgiftinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrgiftinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLimitGiftGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLimitGiftGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLimitGiftGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLimitGiftGetInfoRsp::MergeFrom(const TLimitGiftGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrgiftinfo_.MergeFrom(from.arrgiftinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLimitGiftGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLimitGiftGetInfoRsp::CopyFrom(const TLimitGiftGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLimitGiftGetInfoRsp::IsInitialized() const {

  return true;
}

void TLimitGiftGetInfoRsp::Swap(TLimitGiftGetInfoRsp* other) {
  if (other != this) {
    arrgiftinfo_.Swap(&other->arrgiftinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLimitGiftGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLimitGiftGetInfoRsp_descriptor_;
  metadata.reflection = TLimitGiftGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLimitGiftInfoNotify::kGiftInfoFieldNumber;
#endif  // !_MSC_VER

TLimitGiftInfoNotify::TLimitGiftInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLimitGiftInfoNotify)
}

void TLimitGiftInfoNotify::InitAsDefaultInstance() {
  giftinfo_ = const_cast< ::pb::TGiftInfo*>(&::pb::TGiftInfo::default_instance());
}

TLimitGiftInfoNotify::TLimitGiftInfoNotify(const TLimitGiftInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLimitGiftInfoNotify)
}

void TLimitGiftInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  giftinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLimitGiftInfoNotify::~TLimitGiftInfoNotify() {
  // @@protoc_insertion_point(destructor:pb.TLimitGiftInfoNotify)
  SharedDtor();
}

void TLimitGiftInfoNotify::SharedDtor() {
  if (this != default_instance_) {
    delete giftinfo_;
  }
}

void TLimitGiftInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLimitGiftInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLimitGiftInfoNotify_descriptor_;
}

const TLimitGiftInfoNotify& TLimitGiftInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLimitGift_2eproto();
  return *default_instance_;
}

TLimitGiftInfoNotify* TLimitGiftInfoNotify::default_instance_ = NULL;

TLimitGiftInfoNotify* TLimitGiftInfoNotify::New() const {
  return new TLimitGiftInfoNotify;
}

void TLimitGiftInfoNotify::Clear() {
  if (has_giftinfo()) {
    if (giftinfo_ != NULL) giftinfo_->::pb::TGiftInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLimitGiftInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLimitGiftInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGiftInfo GiftInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_giftinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLimitGiftInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLimitGiftInfoNotify)
  return false;
#undef DO_
}

void TLimitGiftInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLimitGiftInfoNotify)
  // optional .pb.TGiftInfo GiftInfo = 1;
  if (has_giftinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->giftinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLimitGiftInfoNotify)
}

::google::protobuf::uint8* TLimitGiftInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLimitGiftInfoNotify)
  // optional .pb.TGiftInfo GiftInfo = 1;
  if (has_giftinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->giftinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLimitGiftInfoNotify)
  return target;
}

int TLimitGiftInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGiftInfo GiftInfo = 1;
    if (has_giftinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->giftinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLimitGiftInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLimitGiftInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLimitGiftInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLimitGiftInfoNotify::MergeFrom(const TLimitGiftInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftinfo()) {
      mutable_giftinfo()->::pb::TGiftInfo::MergeFrom(from.giftinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLimitGiftInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLimitGiftInfoNotify::CopyFrom(const TLimitGiftInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLimitGiftInfoNotify::IsInitialized() const {

  return true;
}

void TLimitGiftInfoNotify::Swap(TLimitGiftInfoNotify* other) {
  if (other != this) {
    std::swap(giftinfo_, other->giftinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLimitGiftInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLimitGiftInfoNotify_descriptor_;
  metadata.reflection = TLimitGiftInfoNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
