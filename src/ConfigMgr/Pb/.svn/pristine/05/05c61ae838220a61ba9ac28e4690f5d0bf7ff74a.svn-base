// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: editortool/SceneHeightEditorData.proto

#ifndef PROTOBUF_editortool_2fSceneHeightEditorData_2eproto__INCLUDED
#define PROTOBUF_editortool_2fSceneHeightEditorData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/Util.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_editortool_2fSceneHeightEditorData_2eproto();
void protobuf_AssignDesc_editortool_2fSceneHeightEditorData_2eproto();
void protobuf_ShutdownFile_editortool_2fSceneHeightEditorData_2eproto();

class LimitArea_Editor;
class CellData_Editor;
class LimitAreaInfo_Editor;
class HeightDataInfo_Editor;

// ===================================================================

/*FOR2LUA
<Record>
	<name>LimitArea_Editor</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>editortool/SceneHeightEditorData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class LimitArea_Editor : public ::google::protobuf::Message {
 public:
  LimitArea_Editor();
  virtual ~LimitArea_Editor();

  LimitArea_Editor(const LimitArea_Editor& from);

  inline LimitArea_Editor& operator=(const LimitArea_Editor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LimitArea_Editor& default_instance();

  void Swap(LimitArea_Editor* other);

  // implements Message ----------------------------------------------

  LimitArea_Editor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LimitArea_Editor& from);
  void MergeFrom(const LimitArea_Editor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AreaName = 1;
  inline bool has_areaname() const;
  inline void clear_areaname();
  static const int kAreaNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>LimitArea_Editor</name>
  	<Function>
  		<name>areaname</name>
  		<replaceName>AreaName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_areaname</name>
  		<replaceName>AreaName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_areaname</name>
  		<replaceName>AreaName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& areaname() const;
  inline void set_areaname(const ::std::string& value);
  inline void set_areaname(const char* value);
  inline void set_areaname(const char* value, size_t size);
  inline ::std::string* mutable_areaname();
  inline ::std::string* release_areaname();
  inline void set_allocated_areaname(::std::string* areaname);

  // repeated .pb.PbVector2 PointArr = 2;
  inline int pointarr_size() const;
  inline void clear_pointarr();
  static const int kPointArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>LimitArea_Editor</name>
  	<Function>
  		<name>pointarr</name>
  		<replaceName>PointArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_pointarr</name>
  		<replaceName>PointArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_pointarr</name>
  		<replaceName>PointArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pointarr</name>
  		<replaceName>PointArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>pointarr_size</name>
  		<replaceName>PointArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2& pointarr(int index) const;
  inline ::pb::PbVector2* mutable_pointarr(int index);
  inline ::pb::PbVector2* add_pointarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::PbVector2 >&
      pointarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::PbVector2 >*
      mutable_pointarr();

  // @@protoc_insertion_point(class_scope:pb.LimitArea_Editor)
 private:
  inline void set_has_areaname();
  inline void clear_has_areaname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* areaname_;
  ::google::protobuf::RepeatedPtrField< ::pb::PbVector2 > pointarr_;
  friend void  protobuf_AddDesc_editortool_2fSceneHeightEditorData_2eproto();
  friend void protobuf_AssignDesc_editortool_2fSceneHeightEditorData_2eproto();
  friend void protobuf_ShutdownFile_editortool_2fSceneHeightEditorData_2eproto();

  void InitAsDefaultInstance();
  static LimitArea_Editor* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>CellData_Editor</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>editortool/SceneHeightEditorData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class CellData_Editor : public ::google::protobuf::Message {
 public:
  CellData_Editor();
  virtual ~CellData_Editor();

  CellData_Editor(const CellData_Editor& from);

  inline CellData_Editor& operator=(const CellData_Editor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CellData_Editor& default_instance();

  void Swap(CellData_Editor* other);

  // implements Message ----------------------------------------------

  CellData_Editor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CellData_Editor& from);
  void MergeFrom(const CellData_Editor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 CellIndex = 1;
  inline bool has_cellindex() const;
  inline void clear_cellindex();
  static const int kCellIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>CellData_Editor</name>
  	<Function>
  		<name>cellindex</name>
  		<replaceName>CellIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cellindex</name>
  		<replaceName>CellIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cellindex</name>
  		<replaceName>CellIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 cellindex() const;
  inline void set_cellindex(::google::protobuf::int32 value);

  // optional float Height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>CellData_Editor</name>
  	<Function>
  		<name>height</name>
  		<replaceName>Height</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_height</name>
  		<replaceName>Height</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_height</name>
  		<replaceName>Height</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float height() const;
  inline void set_height(float value);

  // @@protoc_insertion_point(class_scope:pb.CellData_Editor)
 private:
  inline void set_has_cellindex();
  inline void clear_has_cellindex();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cellindex_;
  float height_;
  friend void  protobuf_AddDesc_editortool_2fSceneHeightEditorData_2eproto();
  friend void protobuf_AssignDesc_editortool_2fSceneHeightEditorData_2eproto();
  friend void protobuf_ShutdownFile_editortool_2fSceneHeightEditorData_2eproto();

  void InitAsDefaultInstance();
  static CellData_Editor* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>LimitAreaInfo_Editor</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>editortool/SceneHeightEditorData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class LimitAreaInfo_Editor : public ::google::protobuf::Message {
 public:
  LimitAreaInfo_Editor();
  virtual ~LimitAreaInfo_Editor();

  LimitAreaInfo_Editor(const LimitAreaInfo_Editor& from);

  inline LimitAreaInfo_Editor& operator=(const LimitAreaInfo_Editor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LimitAreaInfo_Editor& default_instance();

  void Swap(LimitAreaInfo_Editor* other);

  // implements Message ----------------------------------------------

  LimitAreaInfo_Editor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LimitAreaInfo_Editor& from);
  void MergeFrom(const LimitAreaInfo_Editor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string SceneConfName = 1;
  inline bool has_sceneconfname() const;
  inline void clear_sceneconfname();
  static const int kSceneConfNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>LimitAreaInfo_Editor</name>
  	<Function>
  		<name>sceneconfname</name>
  		<replaceName>SceneConfName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sceneconfname</name>
  		<replaceName>SceneConfName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sceneconfname</name>
  		<replaceName>SceneConfName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& sceneconfname() const;
  inline void set_sceneconfname(const ::std::string& value);
  inline void set_sceneconfname(const char* value);
  inline void set_sceneconfname(const char* value, size_t size);
  inline ::std::string* mutable_sceneconfname();
  inline ::std::string* release_sceneconfname();
  inline void set_allocated_sceneconfname(::std::string* sceneconfname);

  // optional string ArtScenePath = 2;
  inline bool has_artscenepath() const;
  inline void clear_artscenepath();
  static const int kArtScenePathFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>LimitAreaInfo_Editor</name>
  	<Function>
  		<name>artscenepath</name>
  		<replaceName>ArtScenePath</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_artscenepath</name>
  		<replaceName>ArtScenePath</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_artscenepath</name>
  		<replaceName>ArtScenePath</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& artscenepath() const;
  inline void set_artscenepath(const ::std::string& value);
  inline void set_artscenepath(const char* value);
  inline void set_artscenepath(const char* value, size_t size);
  inline ::std::string* mutable_artscenepath();
  inline ::std::string* release_artscenepath();
  inline void set_allocated_artscenepath(::std::string* artscenepath);

  // repeated .pb.LimitArea_Editor LimitAreaArr = 3;
  inline int limitareaarr_size() const;
  inline void clear_limitareaarr();
  static const int kLimitAreaArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>LimitAreaInfo_Editor</name>
  	<Function>
  		<name>limitareaarr</name>
  		<replaceName>LimitAreaArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_limitareaarr</name>
  		<replaceName>LimitAreaArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_limitareaarr</name>
  		<replaceName>LimitAreaArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limitareaarr</name>
  		<replaceName>LimitAreaArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>limitareaarr_size</name>
  		<replaceName>LimitAreaArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::LimitArea_Editor& limitareaarr(int index) const;
  inline ::pb::LimitArea_Editor* mutable_limitareaarr(int index);
  inline ::pb::LimitArea_Editor* add_limitareaarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::LimitArea_Editor >&
      limitareaarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::LimitArea_Editor >*
      mutable_limitareaarr();

  // @@protoc_insertion_point(class_scope:pb.LimitAreaInfo_Editor)
 private:
  inline void set_has_sceneconfname();
  inline void clear_has_sceneconfname();
  inline void set_has_artscenepath();
  inline void clear_has_artscenepath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sceneconfname_;
  ::std::string* artscenepath_;
  ::google::protobuf::RepeatedPtrField< ::pb::LimitArea_Editor > limitareaarr_;
  friend void  protobuf_AddDesc_editortool_2fSceneHeightEditorData_2eproto();
  friend void protobuf_AssignDesc_editortool_2fSceneHeightEditorData_2eproto();
  friend void protobuf_ShutdownFile_editortool_2fSceneHeightEditorData_2eproto();

  void InitAsDefaultInstance();
  static LimitAreaInfo_Editor* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>HeightDataInfo_Editor</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>editortool/SceneHeightEditorData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class HeightDataInfo_Editor : public ::google::protobuf::Message {
 public:
  HeightDataInfo_Editor();
  virtual ~HeightDataInfo_Editor();

  HeightDataInfo_Editor(const HeightDataInfo_Editor& from);

  inline HeightDataInfo_Editor& operator=(const HeightDataInfo_Editor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeightDataInfo_Editor& default_instance();

  void Swap(HeightDataInfo_Editor* other);

  // implements Message ----------------------------------------------

  HeightDataInfo_Editor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeightDataInfo_Editor& from);
  void MergeFrom(const HeightDataInfo_Editor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.PbVector2 CoordinateOrigin = 1;
  inline bool has_coordinateorigin() const;
  inline void clear_coordinateorigin();
  static const int kCoordinateOriginFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>HeightDataInfo_Editor</name>
  	<Function>
  		<name>coordinateorigin</name>
  		<replaceName>CoordinateOrigin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_coordinateorigin</name>
  		<replaceName>CoordinateOrigin</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_coordinateorigin</name>
  		<replaceName>CoordinateOrigin</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_coordinateorigin</name>
  		<replaceName>CoordinateOrigin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2& coordinateorigin() const;
  inline ::pb::PbVector2* mutable_coordinateorigin();
  inline ::pb::PbVector2* release_coordinateorigin();
  inline void set_allocated_coordinateorigin(::pb::PbVector2* coordinateorigin);

  // optional .pb.PbVector2 CellSize = 2;
  inline bool has_cellsize() const;
  inline void clear_cellsize();
  static const int kCellSizeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>HeightDataInfo_Editor</name>
  	<Function>
  		<name>cellsize</name>
  		<replaceName>CellSize</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cellsize</name>
  		<replaceName>CellSize</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_cellsize</name>
  		<replaceName>CellSize</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cellsize</name>
  		<replaceName>CellSize</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2& cellsize() const;
  inline ::pb::PbVector2* mutable_cellsize();
  inline ::pb::PbVector2* release_cellsize();
  inline void set_allocated_cellsize(::pb::PbVector2* cellsize);

  // optional .pb.PbVector2_Int AreaSize = 3;
  inline bool has_areasize() const;
  inline void clear_areasize();
  static const int kAreaSizeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>HeightDataInfo_Editor</name>
  	<Function>
  		<name>areasize</name>
  		<replaceName>AreaSize</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_areasize</name>
  		<replaceName>AreaSize</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_areasize</name>
  		<replaceName>AreaSize</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_areasize</name>
  		<replaceName>AreaSize</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& areasize() const;
  inline ::pb::PbVector2_Int* mutable_areasize();
  inline ::pb::PbVector2_Int* release_areasize();
  inline void set_allocated_areasize(::pb::PbVector2_Int* areasize);

  // repeated .pb.CellData_Editor CellDataArr = 4;
  inline int celldataarr_size() const;
  inline void clear_celldataarr();
  static const int kCellDataArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>HeightDataInfo_Editor</name>
  	<Function>
  		<name>celldataarr</name>
  		<replaceName>CellDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_celldataarr</name>
  		<replaceName>CellDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_celldataarr</name>
  		<replaceName>CellDataArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_celldataarr</name>
  		<replaceName>CellDataArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>celldataarr_size</name>
  		<replaceName>CellDataArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::CellData_Editor& celldataarr(int index) const;
  inline ::pb::CellData_Editor* mutable_celldataarr(int index);
  inline ::pb::CellData_Editor* add_celldataarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::CellData_Editor >&
      celldataarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::CellData_Editor >*
      mutable_celldataarr();

  // @@protoc_insertion_point(class_scope:pb.HeightDataInfo_Editor)
 private:
  inline void set_has_coordinateorigin();
  inline void clear_has_coordinateorigin();
  inline void set_has_cellsize();
  inline void clear_has_cellsize();
  inline void set_has_areasize();
  inline void clear_has_areasize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::PbVector2* coordinateorigin_;
  ::pb::PbVector2* cellsize_;
  ::pb::PbVector2_Int* areasize_;
  ::google::protobuf::RepeatedPtrField< ::pb::CellData_Editor > celldataarr_;
  friend void  protobuf_AddDesc_editortool_2fSceneHeightEditorData_2eproto();
  friend void protobuf_AssignDesc_editortool_2fSceneHeightEditorData_2eproto();
  friend void protobuf_ShutdownFile_editortool_2fSceneHeightEditorData_2eproto();

  void InitAsDefaultInstance();
  static HeightDataInfo_Editor* default_instance_;
};
// ===================================================================


// ===================================================================

// LimitArea_Editor

// optional string AreaName = 1;
inline bool LimitArea_Editor::has_areaname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LimitArea_Editor::set_has_areaname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LimitArea_Editor::clear_has_areaname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LimitArea_Editor::clear_areaname() {
  if (areaname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    areaname_->clear();
  }
  clear_has_areaname();
}
inline const ::std::string& LimitArea_Editor::areaname() const {
  // @@protoc_insertion_point(field_get:pb.LimitArea_Editor.AreaName)
  return *areaname_;
}
inline void LimitArea_Editor::set_areaname(const ::std::string& value) {
  set_has_areaname();
  if (areaname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    areaname_ = new ::std::string;
  }
  areaname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.LimitArea_Editor.AreaName)
}
inline void LimitArea_Editor::set_areaname(const char* value) {
  set_has_areaname();
  if (areaname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    areaname_ = new ::std::string;
  }
  areaname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.LimitArea_Editor.AreaName)
}
inline void LimitArea_Editor::set_areaname(const char* value, size_t size) {
  set_has_areaname();
  if (areaname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    areaname_ = new ::std::string;
  }
  areaname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.LimitArea_Editor.AreaName)
}
inline ::std::string* LimitArea_Editor::mutable_areaname() {
  set_has_areaname();
  if (areaname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    areaname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.LimitArea_Editor.AreaName)
  return areaname_;
}
inline ::std::string* LimitArea_Editor::release_areaname() {
  clear_has_areaname();
  if (areaname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = areaname_;
    areaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LimitArea_Editor::set_allocated_areaname(::std::string* areaname) {
  if (areaname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete areaname_;
  }
  if (areaname) {
    set_has_areaname();
    areaname_ = areaname;
  } else {
    clear_has_areaname();
    areaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.LimitArea_Editor.AreaName)
}

// repeated .pb.PbVector2 PointArr = 2;
inline int LimitArea_Editor::pointarr_size() const {
  return pointarr_.size();
}
inline void LimitArea_Editor::clear_pointarr() {
  pointarr_.Clear();
}
inline const ::pb::PbVector2& LimitArea_Editor::pointarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.LimitArea_Editor.PointArr)
  return pointarr_.Get(index);
}
inline ::pb::PbVector2* LimitArea_Editor::mutable_pointarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.LimitArea_Editor.PointArr)
  return pointarr_.Mutable(index);
}
inline ::pb::PbVector2* LimitArea_Editor::add_pointarr() {
  // @@protoc_insertion_point(field_add:pb.LimitArea_Editor.PointArr)
  return pointarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PbVector2 >&
LimitArea_Editor::pointarr() const {
  // @@protoc_insertion_point(field_list:pb.LimitArea_Editor.PointArr)
  return pointarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PbVector2 >*
LimitArea_Editor::mutable_pointarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.LimitArea_Editor.PointArr)
  return &pointarr_;
}

// -------------------------------------------------------------------

// CellData_Editor

// optional int32 CellIndex = 1;
inline bool CellData_Editor::has_cellindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CellData_Editor::set_has_cellindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CellData_Editor::clear_has_cellindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CellData_Editor::clear_cellindex() {
  cellindex_ = 0;
  clear_has_cellindex();
}
inline ::google::protobuf::int32 CellData_Editor::cellindex() const {
  // @@protoc_insertion_point(field_get:pb.CellData_Editor.CellIndex)
  return cellindex_;
}
inline void CellData_Editor::set_cellindex(::google::protobuf::int32 value) {
  set_has_cellindex();
  cellindex_ = value;
  // @@protoc_insertion_point(field_set:pb.CellData_Editor.CellIndex)
}

// optional float Height = 2;
inline bool CellData_Editor::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CellData_Editor::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CellData_Editor::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CellData_Editor::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float CellData_Editor::height() const {
  // @@protoc_insertion_point(field_get:pb.CellData_Editor.Height)
  return height_;
}
inline void CellData_Editor::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:pb.CellData_Editor.Height)
}

// -------------------------------------------------------------------

// LimitAreaInfo_Editor

// optional string SceneConfName = 1;
inline bool LimitAreaInfo_Editor::has_sceneconfname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LimitAreaInfo_Editor::set_has_sceneconfname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LimitAreaInfo_Editor::clear_has_sceneconfname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LimitAreaInfo_Editor::clear_sceneconfname() {
  if (sceneconfname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneconfname_->clear();
  }
  clear_has_sceneconfname();
}
inline const ::std::string& LimitAreaInfo_Editor::sceneconfname() const {
  // @@protoc_insertion_point(field_get:pb.LimitAreaInfo_Editor.SceneConfName)
  return *sceneconfname_;
}
inline void LimitAreaInfo_Editor::set_sceneconfname(const ::std::string& value) {
  set_has_sceneconfname();
  if (sceneconfname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneconfname_ = new ::std::string;
  }
  sceneconfname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.LimitAreaInfo_Editor.SceneConfName)
}
inline void LimitAreaInfo_Editor::set_sceneconfname(const char* value) {
  set_has_sceneconfname();
  if (sceneconfname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneconfname_ = new ::std::string;
  }
  sceneconfname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.LimitAreaInfo_Editor.SceneConfName)
}
inline void LimitAreaInfo_Editor::set_sceneconfname(const char* value, size_t size) {
  set_has_sceneconfname();
  if (sceneconfname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneconfname_ = new ::std::string;
  }
  sceneconfname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.LimitAreaInfo_Editor.SceneConfName)
}
inline ::std::string* LimitAreaInfo_Editor::mutable_sceneconfname() {
  set_has_sceneconfname();
  if (sceneconfname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneconfname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.LimitAreaInfo_Editor.SceneConfName)
  return sceneconfname_;
}
inline ::std::string* LimitAreaInfo_Editor::release_sceneconfname() {
  clear_has_sceneconfname();
  if (sceneconfname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sceneconfname_;
    sceneconfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LimitAreaInfo_Editor::set_allocated_sceneconfname(::std::string* sceneconfname) {
  if (sceneconfname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneconfname_;
  }
  if (sceneconfname) {
    set_has_sceneconfname();
    sceneconfname_ = sceneconfname;
  } else {
    clear_has_sceneconfname();
    sceneconfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.LimitAreaInfo_Editor.SceneConfName)
}

// optional string ArtScenePath = 2;
inline bool LimitAreaInfo_Editor::has_artscenepath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LimitAreaInfo_Editor::set_has_artscenepath() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LimitAreaInfo_Editor::clear_has_artscenepath() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LimitAreaInfo_Editor::clear_artscenepath() {
  if (artscenepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    artscenepath_->clear();
  }
  clear_has_artscenepath();
}
inline const ::std::string& LimitAreaInfo_Editor::artscenepath() const {
  // @@protoc_insertion_point(field_get:pb.LimitAreaInfo_Editor.ArtScenePath)
  return *artscenepath_;
}
inline void LimitAreaInfo_Editor::set_artscenepath(const ::std::string& value) {
  set_has_artscenepath();
  if (artscenepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    artscenepath_ = new ::std::string;
  }
  artscenepath_->assign(value);
  // @@protoc_insertion_point(field_set:pb.LimitAreaInfo_Editor.ArtScenePath)
}
inline void LimitAreaInfo_Editor::set_artscenepath(const char* value) {
  set_has_artscenepath();
  if (artscenepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    artscenepath_ = new ::std::string;
  }
  artscenepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.LimitAreaInfo_Editor.ArtScenePath)
}
inline void LimitAreaInfo_Editor::set_artscenepath(const char* value, size_t size) {
  set_has_artscenepath();
  if (artscenepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    artscenepath_ = new ::std::string;
  }
  artscenepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.LimitAreaInfo_Editor.ArtScenePath)
}
inline ::std::string* LimitAreaInfo_Editor::mutable_artscenepath() {
  set_has_artscenepath();
  if (artscenepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    artscenepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.LimitAreaInfo_Editor.ArtScenePath)
  return artscenepath_;
}
inline ::std::string* LimitAreaInfo_Editor::release_artscenepath() {
  clear_has_artscenepath();
  if (artscenepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = artscenepath_;
    artscenepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LimitAreaInfo_Editor::set_allocated_artscenepath(::std::string* artscenepath) {
  if (artscenepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete artscenepath_;
  }
  if (artscenepath) {
    set_has_artscenepath();
    artscenepath_ = artscenepath;
  } else {
    clear_has_artscenepath();
    artscenepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.LimitAreaInfo_Editor.ArtScenePath)
}

// repeated .pb.LimitArea_Editor LimitAreaArr = 3;
inline int LimitAreaInfo_Editor::limitareaarr_size() const {
  return limitareaarr_.size();
}
inline void LimitAreaInfo_Editor::clear_limitareaarr() {
  limitareaarr_.Clear();
}
inline const ::pb::LimitArea_Editor& LimitAreaInfo_Editor::limitareaarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.LimitAreaInfo_Editor.LimitAreaArr)
  return limitareaarr_.Get(index);
}
inline ::pb::LimitArea_Editor* LimitAreaInfo_Editor::mutable_limitareaarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.LimitAreaInfo_Editor.LimitAreaArr)
  return limitareaarr_.Mutable(index);
}
inline ::pb::LimitArea_Editor* LimitAreaInfo_Editor::add_limitareaarr() {
  // @@protoc_insertion_point(field_add:pb.LimitAreaInfo_Editor.LimitAreaArr)
  return limitareaarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::LimitArea_Editor >&
LimitAreaInfo_Editor::limitareaarr() const {
  // @@protoc_insertion_point(field_list:pb.LimitAreaInfo_Editor.LimitAreaArr)
  return limitareaarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::LimitArea_Editor >*
LimitAreaInfo_Editor::mutable_limitareaarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.LimitAreaInfo_Editor.LimitAreaArr)
  return &limitareaarr_;
}

// -------------------------------------------------------------------

// HeightDataInfo_Editor

// optional .pb.PbVector2 CoordinateOrigin = 1;
inline bool HeightDataInfo_Editor::has_coordinateorigin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeightDataInfo_Editor::set_has_coordinateorigin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeightDataInfo_Editor::clear_has_coordinateorigin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeightDataInfo_Editor::clear_coordinateorigin() {
  if (coordinateorigin_ != NULL) coordinateorigin_->::pb::PbVector2::Clear();
  clear_has_coordinateorigin();
}
inline const ::pb::PbVector2& HeightDataInfo_Editor::coordinateorigin() const {
  // @@protoc_insertion_point(field_get:pb.HeightDataInfo_Editor.CoordinateOrigin)
  return coordinateorigin_ != NULL ? *coordinateorigin_ : *default_instance_->coordinateorigin_;
}
inline ::pb::PbVector2* HeightDataInfo_Editor::mutable_coordinateorigin() {
  set_has_coordinateorigin();
  if (coordinateorigin_ == NULL) coordinateorigin_ = new ::pb::PbVector2;
  // @@protoc_insertion_point(field_mutable:pb.HeightDataInfo_Editor.CoordinateOrigin)
  return coordinateorigin_;
}
inline ::pb::PbVector2* HeightDataInfo_Editor::release_coordinateorigin() {
  clear_has_coordinateorigin();
  ::pb::PbVector2* temp = coordinateorigin_;
  coordinateorigin_ = NULL;
  return temp;
}
inline void HeightDataInfo_Editor::set_allocated_coordinateorigin(::pb::PbVector2* coordinateorigin) {
  delete coordinateorigin_;
  coordinateorigin_ = coordinateorigin;
  if (coordinateorigin) {
    set_has_coordinateorigin();
  } else {
    clear_has_coordinateorigin();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.HeightDataInfo_Editor.CoordinateOrigin)
}

// optional .pb.PbVector2 CellSize = 2;
inline bool HeightDataInfo_Editor::has_cellsize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeightDataInfo_Editor::set_has_cellsize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeightDataInfo_Editor::clear_has_cellsize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeightDataInfo_Editor::clear_cellsize() {
  if (cellsize_ != NULL) cellsize_->::pb::PbVector2::Clear();
  clear_has_cellsize();
}
inline const ::pb::PbVector2& HeightDataInfo_Editor::cellsize() const {
  // @@protoc_insertion_point(field_get:pb.HeightDataInfo_Editor.CellSize)
  return cellsize_ != NULL ? *cellsize_ : *default_instance_->cellsize_;
}
inline ::pb::PbVector2* HeightDataInfo_Editor::mutable_cellsize() {
  set_has_cellsize();
  if (cellsize_ == NULL) cellsize_ = new ::pb::PbVector2;
  // @@protoc_insertion_point(field_mutable:pb.HeightDataInfo_Editor.CellSize)
  return cellsize_;
}
inline ::pb::PbVector2* HeightDataInfo_Editor::release_cellsize() {
  clear_has_cellsize();
  ::pb::PbVector2* temp = cellsize_;
  cellsize_ = NULL;
  return temp;
}
inline void HeightDataInfo_Editor::set_allocated_cellsize(::pb::PbVector2* cellsize) {
  delete cellsize_;
  cellsize_ = cellsize;
  if (cellsize) {
    set_has_cellsize();
  } else {
    clear_has_cellsize();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.HeightDataInfo_Editor.CellSize)
}

// optional .pb.PbVector2_Int AreaSize = 3;
inline bool HeightDataInfo_Editor::has_areasize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeightDataInfo_Editor::set_has_areasize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeightDataInfo_Editor::clear_has_areasize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeightDataInfo_Editor::clear_areasize() {
  if (areasize_ != NULL) areasize_->::pb::PbVector2_Int::Clear();
  clear_has_areasize();
}
inline const ::pb::PbVector2_Int& HeightDataInfo_Editor::areasize() const {
  // @@protoc_insertion_point(field_get:pb.HeightDataInfo_Editor.AreaSize)
  return areasize_ != NULL ? *areasize_ : *default_instance_->areasize_;
}
inline ::pb::PbVector2_Int* HeightDataInfo_Editor::mutable_areasize() {
  set_has_areasize();
  if (areasize_ == NULL) areasize_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.HeightDataInfo_Editor.AreaSize)
  return areasize_;
}
inline ::pb::PbVector2_Int* HeightDataInfo_Editor::release_areasize() {
  clear_has_areasize();
  ::pb::PbVector2_Int* temp = areasize_;
  areasize_ = NULL;
  return temp;
}
inline void HeightDataInfo_Editor::set_allocated_areasize(::pb::PbVector2_Int* areasize) {
  delete areasize_;
  areasize_ = areasize;
  if (areasize) {
    set_has_areasize();
  } else {
    clear_has_areasize();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.HeightDataInfo_Editor.AreaSize)
}

// repeated .pb.CellData_Editor CellDataArr = 4;
inline int HeightDataInfo_Editor::celldataarr_size() const {
  return celldataarr_.size();
}
inline void HeightDataInfo_Editor::clear_celldataarr() {
  celldataarr_.Clear();
}
inline const ::pb::CellData_Editor& HeightDataInfo_Editor::celldataarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.HeightDataInfo_Editor.CellDataArr)
  return celldataarr_.Get(index);
}
inline ::pb::CellData_Editor* HeightDataInfo_Editor::mutable_celldataarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.HeightDataInfo_Editor.CellDataArr)
  return celldataarr_.Mutable(index);
}
inline ::pb::CellData_Editor* HeightDataInfo_Editor::add_celldataarr() {
  // @@protoc_insertion_point(field_add:pb.HeightDataInfo_Editor.CellDataArr)
  return celldataarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::CellData_Editor >&
HeightDataInfo_Editor::celldataarr() const {
  // @@protoc_insertion_point(field_list:pb.HeightDataInfo_Editor.CellDataArr)
  return celldataarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::CellData_Editor >*
HeightDataInfo_Editor::mutable_celldataarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.HeightDataInfo_Editor.CellDataArr)
  return &celldataarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_editortool_2fSceneHeightEditorData_2eproto__INCLUDED
