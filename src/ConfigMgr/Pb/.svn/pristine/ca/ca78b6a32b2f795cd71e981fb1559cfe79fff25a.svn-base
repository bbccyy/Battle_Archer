// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/LayerAudio.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/LayerAudio.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* InteractiveObjectAudioInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InteractiveObjectAudioInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvInteractiveObjectAudioInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvInteractiveObjectAudioInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvGruopAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvGruopAudio_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvItemComponentAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvItemComponentAudio_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayerAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerAudio_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fLayerAudio_2eproto() {
  protobuf_AddDesc_module_2fLayerAudio_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/LayerAudio.proto");
  GOOGLE_CHECK(file != NULL);
  InteractiveObjectAudioInfo_descriptor_ = file->message_type(0);
  static const int InteractiveObjectAudioInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InteractiveObjectAudioInfo, componentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InteractiveObjectAudioInfo, downaduioinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InteractiveObjectAudioInfo, upaudioinfo_),
  };
  InteractiveObjectAudioInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InteractiveObjectAudioInfo_descriptor_,
      InteractiveObjectAudioInfo::default_instance_,
      InteractiveObjectAudioInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InteractiveObjectAudioInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InteractiveObjectAudioInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InteractiveObjectAudioInfo));
  SvInteractiveObjectAudioInfo_descriptor_ = file->message_type(1);
  static const int SvInteractiveObjectAudioInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvInteractiveObjectAudioInfo, svname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvInteractiveObjectAudioInfo, svgruopaudioinfo_),
  };
  SvInteractiveObjectAudioInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvInteractiveObjectAudioInfo_descriptor_,
      SvInteractiveObjectAudioInfo::default_instance_,
      SvInteractiveObjectAudioInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvInteractiveObjectAudioInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvInteractiveObjectAudioInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvInteractiveObjectAudioInfo));
  SvGruopAudio_descriptor_ = file->message_type(2);
  static const int SvGruopAudio_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvGruopAudio, groupindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvGruopAudio, svitemfadeinaduio_),
  };
  SvGruopAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvGruopAudio_descriptor_,
      SvGruopAudio::default_instance_,
      SvGruopAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvGruopAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvGruopAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvGruopAudio));
  SvItemComponentAudio_descriptor_ = file->message_type(3);
  static const int SvItemComponentAudio_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvItemComponentAudio, componentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvItemComponentAudio, downaduioinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvItemComponentAudio, upaudioinfo_),
  };
  SvItemComponentAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvItemComponentAudio_descriptor_,
      SvItemComponentAudio::default_instance_,
      SvItemComponentAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvItemComponentAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvItemComponentAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvItemComponentAudio));
  LayerAudio_descriptor_ = file->message_type(4);
  static const int LayerAudio_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerAudio, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerAudio, layername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerAudio, openaudioinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerAudio, closeaudioinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerAudio, ariariaudioinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerAudio, ambientaudioinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerAudio, interactiveobjectaduioinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerAudio, svinteractiveobjectaudioinfoinfo_),
  };
  LayerAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayerAudio_descriptor_,
      LayerAudio::default_instance_,
      LayerAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayerAudio));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fLayerAudio_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InteractiveObjectAudioInfo_descriptor_, &InteractiveObjectAudioInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvInteractiveObjectAudioInfo_descriptor_, &SvInteractiveObjectAudioInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvGruopAudio_descriptor_, &SvGruopAudio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvItemComponentAudio_descriptor_, &SvItemComponentAudio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayerAudio_descriptor_, &LayerAudio::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fLayerAudio_2eproto() {
  delete InteractiveObjectAudioInfo::default_instance_;
  delete InteractiveObjectAudioInfo_reflection_;
  delete SvInteractiveObjectAudioInfo::default_instance_;
  delete SvInteractiveObjectAudioInfo_reflection_;
  delete SvGruopAudio::default_instance_;
  delete SvGruopAudio_reflection_;
  delete SvItemComponentAudio::default_instance_;
  delete SvItemComponentAudio_reflection_;
  delete LayerAudio::default_instance_;
  delete LayerAudio_reflection_;
}

void protobuf_AddDesc_module_2fLayerAudio_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fAudioDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027module/LayerAudio.proto\022\002pb\032\030module/Au"
    "dioDefine.proto\"}\n\032InteractiveObjectAudi"
    "oInfo\022\025\n\rComponentName\030\001 \001(\t\022$\n\rDownAdui"
    "oInfo\030\002 \001(\0132\r.pb.AudioInfo\022\"\n\013UpAudioInf"
    "o\030\003 \001(\0132\r.pb.AudioInfo\"Z\n\034SvInteractiveO"
    "bjectAudioInfo\022\016\n\006SvName\030\001 \001(\t\022*\n\020SvGruo"
    "pAudioInfo\030\002 \003(\0132\020.pb.SvGruopAudio\"L\n\014Sv"
    "GruopAudio\022\022\n\nGroupIndex\030\001 \001(\005\022(\n\021SvItem"
    "FadeInAduio\030\002 \001(\0132\r.pb.AudioInfo\"w\n\024SvIt"
    "emComponentAudio\022\025\n\rComponentName\030\001 \001(\t\022"
    "$\n\rDownAduioInfo\030\002 \001(\0132\r.pb.AudioInfo\022\"\n"
    "\013UpAudioInfo\030\003 \001(\0132\r.pb.AudioInfo\"\331\002\n\nLa"
    "yerAudio\022\n\n\002Id\030\001 \001(\005\022\021\n\tLayerName\030\002 \001(\t\022"
    "$\n\rOpenAudioInfo\030\003 \003(\0132\r.pb.AudioInfo\022%\n"
    "\016CloseAudioInfo\030\004 \003(\0132\r.pb.AudioInfo\022&\n\017"
    "AriariAudioInfo\030\005 \003(\0132\r.pb.AudioInfo\022\'\n\020"
    "AmbientAudioInfo\030\006 \003(\0132\r.pb.AudioInfo\022B\n"
    "\032InteractiveObjectAduioInfo\030\007 \003(\0132\036.pb.I"
    "nteractiveObjectAudioInfo\022J\n SvInteracti"
    "veObjectAudioInfoInfo\030\010 \003(\0132 .pb.SvInter"
    "activeObjectAudioInfo", 821);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/LayerAudio.proto", &protobuf_RegisterTypes);
  InteractiveObjectAudioInfo::default_instance_ = new InteractiveObjectAudioInfo();
  SvInteractiveObjectAudioInfo::default_instance_ = new SvInteractiveObjectAudioInfo();
  SvGruopAudio::default_instance_ = new SvGruopAudio();
  SvItemComponentAudio::default_instance_ = new SvItemComponentAudio();
  LayerAudio::default_instance_ = new LayerAudio();
  InteractiveObjectAudioInfo::default_instance_->InitAsDefaultInstance();
  SvInteractiveObjectAudioInfo::default_instance_->InitAsDefaultInstance();
  SvGruopAudio::default_instance_->InitAsDefaultInstance();
  SvItemComponentAudio::default_instance_->InitAsDefaultInstance();
  LayerAudio::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fLayerAudio_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fLayerAudio_2eproto {
  StaticDescriptorInitializer_module_2fLayerAudio_2eproto() {
    protobuf_AddDesc_module_2fLayerAudio_2eproto();
  }
} static_descriptor_initializer_module_2fLayerAudio_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int InteractiveObjectAudioInfo::kComponentNameFieldNumber;
const int InteractiveObjectAudioInfo::kDownAduioInfoFieldNumber;
const int InteractiveObjectAudioInfo::kUpAudioInfoFieldNumber;
#endif  // !_MSC_VER

InteractiveObjectAudioInfo::InteractiveObjectAudioInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.InteractiveObjectAudioInfo)
}

void InteractiveObjectAudioInfo::InitAsDefaultInstance() {
  downaduioinfo_ = const_cast< ::pb::AudioInfo*>(&::pb::AudioInfo::default_instance());
  upaudioinfo_ = const_cast< ::pb::AudioInfo*>(&::pb::AudioInfo::default_instance());
}

InteractiveObjectAudioInfo::InteractiveObjectAudioInfo(const InteractiveObjectAudioInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.InteractiveObjectAudioInfo)
}

void InteractiveObjectAudioInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  componentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downaduioinfo_ = NULL;
  upaudioinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InteractiveObjectAudioInfo::~InteractiveObjectAudioInfo() {
  // @@protoc_insertion_point(destructor:pb.InteractiveObjectAudioInfo)
  SharedDtor();
}

void InteractiveObjectAudioInfo::SharedDtor() {
  if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentname_;
  }
  if (this != default_instance_) {
    delete downaduioinfo_;
    delete upaudioinfo_;
  }
}

void InteractiveObjectAudioInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InteractiveObjectAudioInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InteractiveObjectAudioInfo_descriptor_;
}

const InteractiveObjectAudioInfo& InteractiveObjectAudioInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fLayerAudio_2eproto();
  return *default_instance_;
}

InteractiveObjectAudioInfo* InteractiveObjectAudioInfo::default_instance_ = NULL;

InteractiveObjectAudioInfo* InteractiveObjectAudioInfo::New() const {
  return new InteractiveObjectAudioInfo;
}

void InteractiveObjectAudioInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_componentname()) {
      if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        componentname_->clear();
      }
    }
    if (has_downaduioinfo()) {
      if (downaduioinfo_ != NULL) downaduioinfo_->::pb::AudioInfo::Clear();
    }
    if (has_upaudioinfo()) {
      if (upaudioinfo_ != NULL) upaudioinfo_->::pb::AudioInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InteractiveObjectAudioInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.InteractiveObjectAudioInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ComponentName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->componentname().data(), this->componentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "componentname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DownAduioInfo;
        break;
      }

      // optional .pb.AudioInfo DownAduioInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_DownAduioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_downaduioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UpAudioInfo;
        break;
      }

      // optional .pb.AudioInfo UpAudioInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_UpAudioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upaudioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.InteractiveObjectAudioInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.InteractiveObjectAudioInfo)
  return false;
#undef DO_
}

void InteractiveObjectAudioInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.InteractiveObjectAudioInfo)
  // optional string ComponentName = 1;
  if (has_componentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->componentname().data(), this->componentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "componentname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->componentname(), output);
  }

  // optional .pb.AudioInfo DownAduioInfo = 2;
  if (has_downaduioinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->downaduioinfo(), output);
  }

  // optional .pb.AudioInfo UpAudioInfo = 3;
  if (has_upaudioinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->upaudioinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.InteractiveObjectAudioInfo)
}

::google::protobuf::uint8* InteractiveObjectAudioInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.InteractiveObjectAudioInfo)
  // optional string ComponentName = 1;
  if (has_componentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->componentname().data(), this->componentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "componentname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->componentname(), target);
  }

  // optional .pb.AudioInfo DownAduioInfo = 2;
  if (has_downaduioinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->downaduioinfo(), target);
  }

  // optional .pb.AudioInfo UpAudioInfo = 3;
  if (has_upaudioinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->upaudioinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.InteractiveObjectAudioInfo)
  return target;
}

int InteractiveObjectAudioInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ComponentName = 1;
    if (has_componentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentname());
    }

    // optional .pb.AudioInfo DownAduioInfo = 2;
    if (has_downaduioinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->downaduioinfo());
    }

    // optional .pb.AudioInfo UpAudioInfo = 3;
    if (has_upaudioinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upaudioinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InteractiveObjectAudioInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InteractiveObjectAudioInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InteractiveObjectAudioInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InteractiveObjectAudioInfo::MergeFrom(const InteractiveObjectAudioInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componentname()) {
      set_componentname(from.componentname());
    }
    if (from.has_downaduioinfo()) {
      mutable_downaduioinfo()->::pb::AudioInfo::MergeFrom(from.downaduioinfo());
    }
    if (from.has_upaudioinfo()) {
      mutable_upaudioinfo()->::pb::AudioInfo::MergeFrom(from.upaudioinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InteractiveObjectAudioInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InteractiveObjectAudioInfo::CopyFrom(const InteractiveObjectAudioInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractiveObjectAudioInfo::IsInitialized() const {

  return true;
}

void InteractiveObjectAudioInfo::Swap(InteractiveObjectAudioInfo* other) {
  if (other != this) {
    std::swap(componentname_, other->componentname_);
    std::swap(downaduioinfo_, other->downaduioinfo_);
    std::swap(upaudioinfo_, other->upaudioinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InteractiveObjectAudioInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InteractiveObjectAudioInfo_descriptor_;
  metadata.reflection = InteractiveObjectAudioInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvInteractiveObjectAudioInfo::kSvNameFieldNumber;
const int SvInteractiveObjectAudioInfo::kSvGruopAudioInfoFieldNumber;
#endif  // !_MSC_VER

SvInteractiveObjectAudioInfo::SvInteractiveObjectAudioInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SvInteractiveObjectAudioInfo)
}

void SvInteractiveObjectAudioInfo::InitAsDefaultInstance() {
}

SvInteractiveObjectAudioInfo::SvInteractiveObjectAudioInfo(const SvInteractiveObjectAudioInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SvInteractiveObjectAudioInfo)
}

void SvInteractiveObjectAudioInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvInteractiveObjectAudioInfo::~SvInteractiveObjectAudioInfo() {
  // @@protoc_insertion_point(destructor:pb.SvInteractiveObjectAudioInfo)
  SharedDtor();
}

void SvInteractiveObjectAudioInfo::SharedDtor() {
  if (svname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svname_;
  }
  if (this != default_instance_) {
  }
}

void SvInteractiveObjectAudioInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvInteractiveObjectAudioInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvInteractiveObjectAudioInfo_descriptor_;
}

const SvInteractiveObjectAudioInfo& SvInteractiveObjectAudioInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fLayerAudio_2eproto();
  return *default_instance_;
}

SvInteractiveObjectAudioInfo* SvInteractiveObjectAudioInfo::default_instance_ = NULL;

SvInteractiveObjectAudioInfo* SvInteractiveObjectAudioInfo::New() const {
  return new SvInteractiveObjectAudioInfo;
}

void SvInteractiveObjectAudioInfo::Clear() {
  if (has_svname()) {
    if (svname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      svname_->clear();
    }
  }
  svgruopaudioinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvInteractiveObjectAudioInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SvInteractiveObjectAudioInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SvName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->svname().data(), this->svname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "svname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SvGruopAudioInfo;
        break;
      }

      // repeated .pb.SvGruopAudio SvGruopAudioInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_SvGruopAudioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_svgruopaudioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SvGruopAudioInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SvInteractiveObjectAudioInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SvInteractiveObjectAudioInfo)
  return false;
#undef DO_
}

void SvInteractiveObjectAudioInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SvInteractiveObjectAudioInfo)
  // optional string SvName = 1;
  if (has_svname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->svname().data(), this->svname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "svname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->svname(), output);
  }

  // repeated .pb.SvGruopAudio SvGruopAudioInfo = 2;
  for (int i = 0; i < this->svgruopaudioinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->svgruopaudioinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SvInteractiveObjectAudioInfo)
}

::google::protobuf::uint8* SvInteractiveObjectAudioInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SvInteractiveObjectAudioInfo)
  // optional string SvName = 1;
  if (has_svname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->svname().data(), this->svname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "svname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->svname(), target);
  }

  // repeated .pb.SvGruopAudio SvGruopAudioInfo = 2;
  for (int i = 0; i < this->svgruopaudioinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->svgruopaudioinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SvInteractiveObjectAudioInfo)
  return target;
}

int SvInteractiveObjectAudioInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SvName = 1;
    if (has_svname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svname());
    }

  }
  // repeated .pb.SvGruopAudio SvGruopAudioInfo = 2;
  total_size += 1 * this->svgruopaudioinfo_size();
  for (int i = 0; i < this->svgruopaudioinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->svgruopaudioinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvInteractiveObjectAudioInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvInteractiveObjectAudioInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvInteractiveObjectAudioInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvInteractiveObjectAudioInfo::MergeFrom(const SvInteractiveObjectAudioInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  svgruopaudioinfo_.MergeFrom(from.svgruopaudioinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svname()) {
      set_svname(from.svname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvInteractiveObjectAudioInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvInteractiveObjectAudioInfo::CopyFrom(const SvInteractiveObjectAudioInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvInteractiveObjectAudioInfo::IsInitialized() const {

  return true;
}

void SvInteractiveObjectAudioInfo::Swap(SvInteractiveObjectAudioInfo* other) {
  if (other != this) {
    std::swap(svname_, other->svname_);
    svgruopaudioinfo_.Swap(&other->svgruopaudioinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvInteractiveObjectAudioInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvInteractiveObjectAudioInfo_descriptor_;
  metadata.reflection = SvInteractiveObjectAudioInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvGruopAudio::kGroupIndexFieldNumber;
const int SvGruopAudio::kSvItemFadeInAduioFieldNumber;
#endif  // !_MSC_VER

SvGruopAudio::SvGruopAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SvGruopAudio)
}

void SvGruopAudio::InitAsDefaultInstance() {
  svitemfadeinaduio_ = const_cast< ::pb::AudioInfo*>(&::pb::AudioInfo::default_instance());
}

SvGruopAudio::SvGruopAudio(const SvGruopAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SvGruopAudio)
}

void SvGruopAudio::SharedCtor() {
  _cached_size_ = 0;
  groupindex_ = 0;
  svitemfadeinaduio_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvGruopAudio::~SvGruopAudio() {
  // @@protoc_insertion_point(destructor:pb.SvGruopAudio)
  SharedDtor();
}

void SvGruopAudio::SharedDtor() {
  if (this != default_instance_) {
    delete svitemfadeinaduio_;
  }
}

void SvGruopAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvGruopAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvGruopAudio_descriptor_;
}

const SvGruopAudio& SvGruopAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fLayerAudio_2eproto();
  return *default_instance_;
}

SvGruopAudio* SvGruopAudio::default_instance_ = NULL;

SvGruopAudio* SvGruopAudio::New() const {
  return new SvGruopAudio;
}

void SvGruopAudio::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    groupindex_ = 0;
    if (has_svitemfadeinaduio()) {
      if (svitemfadeinaduio_ != NULL) svitemfadeinaduio_->::pb::AudioInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvGruopAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SvGruopAudio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GroupIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SvItemFadeInAduio;
        break;
      }

      // optional .pb.AudioInfo SvItemFadeInAduio = 2;
      case 2: {
        if (tag == 18) {
         parse_SvItemFadeInAduio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svitemfadeinaduio()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SvGruopAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SvGruopAudio)
  return false;
#undef DO_
}

void SvGruopAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SvGruopAudio)
  // optional int32 GroupIndex = 1;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupindex(), output);
  }

  // optional .pb.AudioInfo SvItemFadeInAduio = 2;
  if (has_svitemfadeinaduio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->svitemfadeinaduio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SvGruopAudio)
}

::google::protobuf::uint8* SvGruopAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SvGruopAudio)
  // optional int32 GroupIndex = 1;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupindex(), target);
  }

  // optional .pb.AudioInfo SvItemFadeInAduio = 2;
  if (has_svitemfadeinaduio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->svitemfadeinaduio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SvGruopAudio)
  return target;
}

int SvGruopAudio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GroupIndex = 1;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupindex());
    }

    // optional .pb.AudioInfo SvItemFadeInAduio = 2;
    if (has_svitemfadeinaduio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svitemfadeinaduio());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvGruopAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvGruopAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvGruopAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvGruopAudio::MergeFrom(const SvGruopAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
    if (from.has_svitemfadeinaduio()) {
      mutable_svitemfadeinaduio()->::pb::AudioInfo::MergeFrom(from.svitemfadeinaduio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvGruopAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvGruopAudio::CopyFrom(const SvGruopAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvGruopAudio::IsInitialized() const {

  return true;
}

void SvGruopAudio::Swap(SvGruopAudio* other) {
  if (other != this) {
    std::swap(groupindex_, other->groupindex_);
    std::swap(svitemfadeinaduio_, other->svitemfadeinaduio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvGruopAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvGruopAudio_descriptor_;
  metadata.reflection = SvGruopAudio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvItemComponentAudio::kComponentNameFieldNumber;
const int SvItemComponentAudio::kDownAduioInfoFieldNumber;
const int SvItemComponentAudio::kUpAudioInfoFieldNumber;
#endif  // !_MSC_VER

SvItemComponentAudio::SvItemComponentAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SvItemComponentAudio)
}

void SvItemComponentAudio::InitAsDefaultInstance() {
  downaduioinfo_ = const_cast< ::pb::AudioInfo*>(&::pb::AudioInfo::default_instance());
  upaudioinfo_ = const_cast< ::pb::AudioInfo*>(&::pb::AudioInfo::default_instance());
}

SvItemComponentAudio::SvItemComponentAudio(const SvItemComponentAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SvItemComponentAudio)
}

void SvItemComponentAudio::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  componentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downaduioinfo_ = NULL;
  upaudioinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvItemComponentAudio::~SvItemComponentAudio() {
  // @@protoc_insertion_point(destructor:pb.SvItemComponentAudio)
  SharedDtor();
}

void SvItemComponentAudio::SharedDtor() {
  if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentname_;
  }
  if (this != default_instance_) {
    delete downaduioinfo_;
    delete upaudioinfo_;
  }
}

void SvItemComponentAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvItemComponentAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvItemComponentAudio_descriptor_;
}

const SvItemComponentAudio& SvItemComponentAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fLayerAudio_2eproto();
  return *default_instance_;
}

SvItemComponentAudio* SvItemComponentAudio::default_instance_ = NULL;

SvItemComponentAudio* SvItemComponentAudio::New() const {
  return new SvItemComponentAudio;
}

void SvItemComponentAudio::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_componentname()) {
      if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        componentname_->clear();
      }
    }
    if (has_downaduioinfo()) {
      if (downaduioinfo_ != NULL) downaduioinfo_->::pb::AudioInfo::Clear();
    }
    if (has_upaudioinfo()) {
      if (upaudioinfo_ != NULL) upaudioinfo_->::pb::AudioInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvItemComponentAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SvItemComponentAudio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ComponentName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->componentname().data(), this->componentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "componentname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DownAduioInfo;
        break;
      }

      // optional .pb.AudioInfo DownAduioInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_DownAduioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_downaduioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UpAudioInfo;
        break;
      }

      // optional .pb.AudioInfo UpAudioInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_UpAudioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upaudioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SvItemComponentAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SvItemComponentAudio)
  return false;
#undef DO_
}

void SvItemComponentAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SvItemComponentAudio)
  // optional string ComponentName = 1;
  if (has_componentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->componentname().data(), this->componentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "componentname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->componentname(), output);
  }

  // optional .pb.AudioInfo DownAduioInfo = 2;
  if (has_downaduioinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->downaduioinfo(), output);
  }

  // optional .pb.AudioInfo UpAudioInfo = 3;
  if (has_upaudioinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->upaudioinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SvItemComponentAudio)
}

::google::protobuf::uint8* SvItemComponentAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SvItemComponentAudio)
  // optional string ComponentName = 1;
  if (has_componentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->componentname().data(), this->componentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "componentname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->componentname(), target);
  }

  // optional .pb.AudioInfo DownAduioInfo = 2;
  if (has_downaduioinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->downaduioinfo(), target);
  }

  // optional .pb.AudioInfo UpAudioInfo = 3;
  if (has_upaudioinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->upaudioinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SvItemComponentAudio)
  return target;
}

int SvItemComponentAudio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ComponentName = 1;
    if (has_componentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentname());
    }

    // optional .pb.AudioInfo DownAduioInfo = 2;
    if (has_downaduioinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->downaduioinfo());
    }

    // optional .pb.AudioInfo UpAudioInfo = 3;
    if (has_upaudioinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upaudioinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvItemComponentAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvItemComponentAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvItemComponentAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvItemComponentAudio::MergeFrom(const SvItemComponentAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componentname()) {
      set_componentname(from.componentname());
    }
    if (from.has_downaduioinfo()) {
      mutable_downaduioinfo()->::pb::AudioInfo::MergeFrom(from.downaduioinfo());
    }
    if (from.has_upaudioinfo()) {
      mutable_upaudioinfo()->::pb::AudioInfo::MergeFrom(from.upaudioinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvItemComponentAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvItemComponentAudio::CopyFrom(const SvItemComponentAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvItemComponentAudio::IsInitialized() const {

  return true;
}

void SvItemComponentAudio::Swap(SvItemComponentAudio* other) {
  if (other != this) {
    std::swap(componentname_, other->componentname_);
    std::swap(downaduioinfo_, other->downaduioinfo_);
    std::swap(upaudioinfo_, other->upaudioinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvItemComponentAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvItemComponentAudio_descriptor_;
  metadata.reflection = SvItemComponentAudio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LayerAudio::kIdFieldNumber;
const int LayerAudio::kLayerNameFieldNumber;
const int LayerAudio::kOpenAudioInfoFieldNumber;
const int LayerAudio::kCloseAudioInfoFieldNumber;
const int LayerAudio::kAriariAudioInfoFieldNumber;
const int LayerAudio::kAmbientAudioInfoFieldNumber;
const int LayerAudio::kInteractiveObjectAduioInfoFieldNumber;
const int LayerAudio::kSvInteractiveObjectAudioInfoInfoFieldNumber;
#endif  // !_MSC_VER

LayerAudio::LayerAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.LayerAudio)
}

void LayerAudio::InitAsDefaultInstance() {
}

LayerAudio::LayerAudio(const LayerAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.LayerAudio)
}

void LayerAudio::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  layername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerAudio::~LayerAudio() {
  // @@protoc_insertion_point(destructor:pb.LayerAudio)
  SharedDtor();
}

void LayerAudio::SharedDtor() {
  if (layername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layername_;
  }
  if (this != default_instance_) {
  }
}

void LayerAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerAudio_descriptor_;
}

const LayerAudio& LayerAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fLayerAudio_2eproto();
  return *default_instance_;
}

LayerAudio* LayerAudio::default_instance_ = NULL;

LayerAudio* LayerAudio::New() const {
  return new LayerAudio;
}

void LayerAudio::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_layername()) {
      if (layername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        layername_->clear();
      }
    }
  }
  openaudioinfo_.Clear();
  closeaudioinfo_.Clear();
  ariariaudioinfo_.Clear();
  ambientaudioinfo_.Clear();
  interactiveobjectaduioinfo_.Clear();
  svinteractiveobjectaudioinfoinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayerAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.LayerAudio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_LayerName;
        break;
      }

      // optional string LayerName = 2;
      case 2: {
        if (tag == 18) {
         parse_LayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layername().data(), this->layername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "layername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_OpenAudioInfo;
        break;
      }

      // repeated .pb.AudioInfo OpenAudioInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_OpenAudioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_openaudioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_OpenAudioInfo;
        if (input->ExpectTag(34)) goto parse_CloseAudioInfo;
        break;
      }

      // repeated .pb.AudioInfo CloseAudioInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_CloseAudioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_closeaudioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CloseAudioInfo;
        if (input->ExpectTag(42)) goto parse_AriariAudioInfo;
        break;
      }

      // repeated .pb.AudioInfo AriariAudioInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_AriariAudioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ariariaudioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_AriariAudioInfo;
        if (input->ExpectTag(50)) goto parse_AmbientAudioInfo;
        break;
      }

      // repeated .pb.AudioInfo AmbientAudioInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_AmbientAudioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ambientaudioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_AmbientAudioInfo;
        if (input->ExpectTag(58)) goto parse_InteractiveObjectAduioInfo;
        break;
      }

      // repeated .pb.InteractiveObjectAudioInfo InteractiveObjectAduioInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_InteractiveObjectAduioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_interactiveobjectaduioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_InteractiveObjectAduioInfo;
        if (input->ExpectTag(66)) goto parse_SvInteractiveObjectAudioInfoInfo;
        break;
      }

      // repeated .pb.SvInteractiveObjectAudioInfo SvInteractiveObjectAudioInfoInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_SvInteractiveObjectAudioInfoInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_svinteractiveobjectaudioinfoinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_SvInteractiveObjectAudioInfoInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.LayerAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.LayerAudio)
  return false;
#undef DO_
}

void LayerAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.LayerAudio)
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string LayerName = 2;
  if (has_layername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layername().data(), this->layername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "layername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->layername(), output);
  }

  // repeated .pb.AudioInfo OpenAudioInfo = 3;
  for (int i = 0; i < this->openaudioinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->openaudioinfo(i), output);
  }

  // repeated .pb.AudioInfo CloseAudioInfo = 4;
  for (int i = 0; i < this->closeaudioinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->closeaudioinfo(i), output);
  }

  // repeated .pb.AudioInfo AriariAudioInfo = 5;
  for (int i = 0; i < this->ariariaudioinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ariariaudioinfo(i), output);
  }

  // repeated .pb.AudioInfo AmbientAudioInfo = 6;
  for (int i = 0; i < this->ambientaudioinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ambientaudioinfo(i), output);
  }

  // repeated .pb.InteractiveObjectAudioInfo InteractiveObjectAduioInfo = 7;
  for (int i = 0; i < this->interactiveobjectaduioinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->interactiveobjectaduioinfo(i), output);
  }

  // repeated .pb.SvInteractiveObjectAudioInfo SvInteractiveObjectAudioInfoInfo = 8;
  for (int i = 0; i < this->svinteractiveobjectaudioinfoinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->svinteractiveobjectaudioinfoinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.LayerAudio)
}

::google::protobuf::uint8* LayerAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LayerAudio)
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string LayerName = 2;
  if (has_layername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layername().data(), this->layername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "layername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->layername(), target);
  }

  // repeated .pb.AudioInfo OpenAudioInfo = 3;
  for (int i = 0; i < this->openaudioinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->openaudioinfo(i), target);
  }

  // repeated .pb.AudioInfo CloseAudioInfo = 4;
  for (int i = 0; i < this->closeaudioinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->closeaudioinfo(i), target);
  }

  // repeated .pb.AudioInfo AriariAudioInfo = 5;
  for (int i = 0; i < this->ariariaudioinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ariariaudioinfo(i), target);
  }

  // repeated .pb.AudioInfo AmbientAudioInfo = 6;
  for (int i = 0; i < this->ambientaudioinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ambientaudioinfo(i), target);
  }

  // repeated .pb.InteractiveObjectAudioInfo InteractiveObjectAduioInfo = 7;
  for (int i = 0; i < this->interactiveobjectaduioinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->interactiveobjectaduioinfo(i), target);
  }

  // repeated .pb.SvInteractiveObjectAudioInfo SvInteractiveObjectAudioInfoInfo = 8;
  for (int i = 0; i < this->svinteractiveobjectaudioinfoinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->svinteractiveobjectaudioinfoinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LayerAudio)
  return target;
}

int LayerAudio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string LayerName = 2;
    if (has_layername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layername());
    }

  }
  // repeated .pb.AudioInfo OpenAudioInfo = 3;
  total_size += 1 * this->openaudioinfo_size();
  for (int i = 0; i < this->openaudioinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->openaudioinfo(i));
  }

  // repeated .pb.AudioInfo CloseAudioInfo = 4;
  total_size += 1 * this->closeaudioinfo_size();
  for (int i = 0; i < this->closeaudioinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->closeaudioinfo(i));
  }

  // repeated .pb.AudioInfo AriariAudioInfo = 5;
  total_size += 1 * this->ariariaudioinfo_size();
  for (int i = 0; i < this->ariariaudioinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ariariaudioinfo(i));
  }

  // repeated .pb.AudioInfo AmbientAudioInfo = 6;
  total_size += 1 * this->ambientaudioinfo_size();
  for (int i = 0; i < this->ambientaudioinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ambientaudioinfo(i));
  }

  // repeated .pb.InteractiveObjectAudioInfo InteractiveObjectAduioInfo = 7;
  total_size += 1 * this->interactiveobjectaduioinfo_size();
  for (int i = 0; i < this->interactiveobjectaduioinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->interactiveobjectaduioinfo(i));
  }

  // repeated .pb.SvInteractiveObjectAudioInfo SvInteractiveObjectAudioInfoInfo = 8;
  total_size += 1 * this->svinteractiveobjectaudioinfoinfo_size();
  for (int i = 0; i < this->svinteractiveobjectaudioinfoinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->svinteractiveobjectaudioinfoinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayerAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayerAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayerAudio::MergeFrom(const LayerAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  openaudioinfo_.MergeFrom(from.openaudioinfo_);
  closeaudioinfo_.MergeFrom(from.closeaudioinfo_);
  ariariaudioinfo_.MergeFrom(from.ariariaudioinfo_);
  ambientaudioinfo_.MergeFrom(from.ambientaudioinfo_);
  interactiveobjectaduioinfo_.MergeFrom(from.interactiveobjectaduioinfo_);
  svinteractiveobjectaudioinfoinfo_.MergeFrom(from.svinteractiveobjectaudioinfoinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_layername()) {
      set_layername(from.layername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayerAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerAudio::CopyFrom(const LayerAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerAudio::IsInitialized() const {

  return true;
}

void LayerAudio::Swap(LayerAudio* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(layername_, other->layername_);
    openaudioinfo_.Swap(&other->openaudioinfo_);
    closeaudioinfo_.Swap(&other->closeaudioinfo_);
    ariariaudioinfo_.Swap(&other->ariariaudioinfo_);
    ambientaudioinfo_.Swap(&other->ambientaudioinfo_);
    interactiveobjectaduioinfo_.Swap(&other->interactiveobjectaduioinfo_);
    svinteractiveobjectaudioinfoinfo_.Swap(&other->svinteractiveobjectaudioinfoinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayerAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerAudio_descriptor_;
  metadata.reflection = LayerAudio_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
