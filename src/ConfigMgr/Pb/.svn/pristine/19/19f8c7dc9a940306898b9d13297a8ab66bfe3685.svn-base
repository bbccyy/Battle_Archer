// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActTimeLimitPackage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActTimeLimitPackage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActTimeLimitPackageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActTimeLimitPackageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActTimeLimitPackageGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActTimeLimitPackageGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActTimeLimitPackageNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActTimeLimitPackageNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActTimeLimitPackage_2eproto() {
  protobuf_AddDesc_net_2fActTimeLimitPackage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActTimeLimitPackage.proto");
  GOOGLE_CHECK(file != NULL);
  TActTimeLimitPackageInfo_descriptor_ = file->message_type(0);
  static const int TActTimeLimitPackageInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitPackageInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitPackageInfo, buynum_),
  };
  TActTimeLimitPackageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActTimeLimitPackageInfo_descriptor_,
      TActTimeLimitPackageInfo::default_instance_,
      TActTimeLimitPackageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitPackageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitPackageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActTimeLimitPackageInfo));
  TActTimeLimitPackageGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TActTimeLimitPackageGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitPackageGetInfoRsp, arrpackageinfo_),
  };
  TActTimeLimitPackageGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActTimeLimitPackageGetInfoRsp_descriptor_,
      TActTimeLimitPackageGetInfoRsp::default_instance_,
      TActTimeLimitPackageGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitPackageGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitPackageGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActTimeLimitPackageGetInfoRsp));
  TActTimeLimitPackageNotify_descriptor_ = file->message_type(2);
  static const int TActTimeLimitPackageNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitPackageNotify, arrpackageinfo_),
  };
  TActTimeLimitPackageNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActTimeLimitPackageNotify_descriptor_,
      TActTimeLimitPackageNotify::default_instance_,
      TActTimeLimitPackageNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitPackageNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTimeLimitPackageNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActTimeLimitPackageNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActTimeLimitPackage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActTimeLimitPackageInfo_descriptor_, &TActTimeLimitPackageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActTimeLimitPackageGetInfoRsp_descriptor_, &TActTimeLimitPackageGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActTimeLimitPackageNotify_descriptor_, &TActTimeLimitPackageNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActTimeLimitPackage_2eproto() {
  delete TActTimeLimitPackageInfo::default_instance_;
  delete TActTimeLimitPackageInfo_reflection_;
  delete TActTimeLimitPackageGetInfoRsp::default_instance_;
  delete TActTimeLimitPackageGetInfoRsp_reflection_;
  delete TActTimeLimitPackageNotify::default_instance_;
  delete TActTimeLimitPackageNotify_reflection_;
}

void protobuf_AddDesc_net_2fActTimeLimitPackage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035net/ActTimeLimitPackage.proto\022\002pb\"6\n\030T"
    "ActTimeLimitPackageInfo\022\n\n\002Id\030\001 \001(\r\022\016\n\006B"
    "uyNum\030\002 \001(\r\"V\n\036TActTimeLimitPackageGetIn"
    "foRsp\0224\n\016ArrPackageInfo\030\001 \003(\0132\034.pb.TActT"
    "imeLimitPackageInfo\"R\n\032TActTimeLimitPack"
    "ageNotify\0224\n\016ArrPackageInfo\030\001 \003(\0132\034.pb.T"
    "ActTimeLimitPackageInfo", 263);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActTimeLimitPackage.proto", &protobuf_RegisterTypes);
  TActTimeLimitPackageInfo::default_instance_ = new TActTimeLimitPackageInfo();
  TActTimeLimitPackageGetInfoRsp::default_instance_ = new TActTimeLimitPackageGetInfoRsp();
  TActTimeLimitPackageNotify::default_instance_ = new TActTimeLimitPackageNotify();
  TActTimeLimitPackageInfo::default_instance_->InitAsDefaultInstance();
  TActTimeLimitPackageGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActTimeLimitPackageNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActTimeLimitPackage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActTimeLimitPackage_2eproto {
  StaticDescriptorInitializer_net_2fActTimeLimitPackage_2eproto() {
    protobuf_AddDesc_net_2fActTimeLimitPackage_2eproto();
  }
} static_descriptor_initializer_net_2fActTimeLimitPackage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActTimeLimitPackageInfo::kIdFieldNumber;
const int TActTimeLimitPackageInfo::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TActTimeLimitPackageInfo::TActTimeLimitPackageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActTimeLimitPackageInfo)
}

void TActTimeLimitPackageInfo::InitAsDefaultInstance() {
}

TActTimeLimitPackageInfo::TActTimeLimitPackageInfo(const TActTimeLimitPackageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActTimeLimitPackageInfo)
}

void TActTimeLimitPackageInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActTimeLimitPackageInfo::~TActTimeLimitPackageInfo() {
  // @@protoc_insertion_point(destructor:pb.TActTimeLimitPackageInfo)
  SharedDtor();
}

void TActTimeLimitPackageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActTimeLimitPackageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActTimeLimitPackageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActTimeLimitPackageInfo_descriptor_;
}

const TActTimeLimitPackageInfo& TActTimeLimitPackageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActTimeLimitPackage_2eproto();
  return *default_instance_;
}

TActTimeLimitPackageInfo* TActTimeLimitPackageInfo::default_instance_ = NULL;

TActTimeLimitPackageInfo* TActTimeLimitPackageInfo::New() const {
  return new TActTimeLimitPackageInfo;
}

void TActTimeLimitPackageInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActTimeLimitPackageInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActTimeLimitPackageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActTimeLimitPackageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActTimeLimitPackageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActTimeLimitPackageInfo)
  return false;
#undef DO_
}

void TActTimeLimitPackageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActTimeLimitPackageInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActTimeLimitPackageInfo)
}

::google::protobuf::uint8* TActTimeLimitPackageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActTimeLimitPackageInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActTimeLimitPackageInfo)
  return target;
}

int TActTimeLimitPackageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 BuyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActTimeLimitPackageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActTimeLimitPackageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActTimeLimitPackageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActTimeLimitPackageInfo::MergeFrom(const TActTimeLimitPackageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActTimeLimitPackageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActTimeLimitPackageInfo::CopyFrom(const TActTimeLimitPackageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActTimeLimitPackageInfo::IsInitialized() const {

  return true;
}

void TActTimeLimitPackageInfo::Swap(TActTimeLimitPackageInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActTimeLimitPackageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActTimeLimitPackageInfo_descriptor_;
  metadata.reflection = TActTimeLimitPackageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActTimeLimitPackageGetInfoRsp::kArrPackageInfoFieldNumber;
#endif  // !_MSC_VER

TActTimeLimitPackageGetInfoRsp::TActTimeLimitPackageGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActTimeLimitPackageGetInfoRsp)
}

void TActTimeLimitPackageGetInfoRsp::InitAsDefaultInstance() {
}

TActTimeLimitPackageGetInfoRsp::TActTimeLimitPackageGetInfoRsp(const TActTimeLimitPackageGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActTimeLimitPackageGetInfoRsp)
}

void TActTimeLimitPackageGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActTimeLimitPackageGetInfoRsp::~TActTimeLimitPackageGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActTimeLimitPackageGetInfoRsp)
  SharedDtor();
}

void TActTimeLimitPackageGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActTimeLimitPackageGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActTimeLimitPackageGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActTimeLimitPackageGetInfoRsp_descriptor_;
}

const TActTimeLimitPackageGetInfoRsp& TActTimeLimitPackageGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActTimeLimitPackage_2eproto();
  return *default_instance_;
}

TActTimeLimitPackageGetInfoRsp* TActTimeLimitPackageGetInfoRsp::default_instance_ = NULL;

TActTimeLimitPackageGetInfoRsp* TActTimeLimitPackageGetInfoRsp::New() const {
  return new TActTimeLimitPackageGetInfoRsp;
}

void TActTimeLimitPackageGetInfoRsp::Clear() {
  arrpackageinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActTimeLimitPackageGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActTimeLimitPackageGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActTimeLimitPackageInfo ArrPackageInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrPackageInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrpackageinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrPackageInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActTimeLimitPackageGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActTimeLimitPackageGetInfoRsp)
  return false;
#undef DO_
}

void TActTimeLimitPackageGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActTimeLimitPackageGetInfoRsp)
  // repeated .pb.TActTimeLimitPackageInfo ArrPackageInfo = 1;
  for (int i = 0; i < this->arrpackageinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrpackageinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActTimeLimitPackageGetInfoRsp)
}

::google::protobuf::uint8* TActTimeLimitPackageGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActTimeLimitPackageGetInfoRsp)
  // repeated .pb.TActTimeLimitPackageInfo ArrPackageInfo = 1;
  for (int i = 0; i < this->arrpackageinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrpackageinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActTimeLimitPackageGetInfoRsp)
  return target;
}

int TActTimeLimitPackageGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActTimeLimitPackageInfo ArrPackageInfo = 1;
  total_size += 1 * this->arrpackageinfo_size();
  for (int i = 0; i < this->arrpackageinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrpackageinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActTimeLimitPackageGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActTimeLimitPackageGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActTimeLimitPackageGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActTimeLimitPackageGetInfoRsp::MergeFrom(const TActTimeLimitPackageGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrpackageinfo_.MergeFrom(from.arrpackageinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActTimeLimitPackageGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActTimeLimitPackageGetInfoRsp::CopyFrom(const TActTimeLimitPackageGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActTimeLimitPackageGetInfoRsp::IsInitialized() const {

  return true;
}

void TActTimeLimitPackageGetInfoRsp::Swap(TActTimeLimitPackageGetInfoRsp* other) {
  if (other != this) {
    arrpackageinfo_.Swap(&other->arrpackageinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActTimeLimitPackageGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActTimeLimitPackageGetInfoRsp_descriptor_;
  metadata.reflection = TActTimeLimitPackageGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActTimeLimitPackageNotify::kArrPackageInfoFieldNumber;
#endif  // !_MSC_VER

TActTimeLimitPackageNotify::TActTimeLimitPackageNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActTimeLimitPackageNotify)
}

void TActTimeLimitPackageNotify::InitAsDefaultInstance() {
}

TActTimeLimitPackageNotify::TActTimeLimitPackageNotify(const TActTimeLimitPackageNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActTimeLimitPackageNotify)
}

void TActTimeLimitPackageNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActTimeLimitPackageNotify::~TActTimeLimitPackageNotify() {
  // @@protoc_insertion_point(destructor:pb.TActTimeLimitPackageNotify)
  SharedDtor();
}

void TActTimeLimitPackageNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActTimeLimitPackageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActTimeLimitPackageNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActTimeLimitPackageNotify_descriptor_;
}

const TActTimeLimitPackageNotify& TActTimeLimitPackageNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActTimeLimitPackage_2eproto();
  return *default_instance_;
}

TActTimeLimitPackageNotify* TActTimeLimitPackageNotify::default_instance_ = NULL;

TActTimeLimitPackageNotify* TActTimeLimitPackageNotify::New() const {
  return new TActTimeLimitPackageNotify;
}

void TActTimeLimitPackageNotify::Clear() {
  arrpackageinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActTimeLimitPackageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActTimeLimitPackageNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActTimeLimitPackageInfo ArrPackageInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrPackageInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrpackageinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrPackageInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActTimeLimitPackageNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActTimeLimitPackageNotify)
  return false;
#undef DO_
}

void TActTimeLimitPackageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActTimeLimitPackageNotify)
  // repeated .pb.TActTimeLimitPackageInfo ArrPackageInfo = 1;
  for (int i = 0; i < this->arrpackageinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrpackageinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActTimeLimitPackageNotify)
}

::google::protobuf::uint8* TActTimeLimitPackageNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActTimeLimitPackageNotify)
  // repeated .pb.TActTimeLimitPackageInfo ArrPackageInfo = 1;
  for (int i = 0; i < this->arrpackageinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrpackageinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActTimeLimitPackageNotify)
  return target;
}

int TActTimeLimitPackageNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActTimeLimitPackageInfo ArrPackageInfo = 1;
  total_size += 1 * this->arrpackageinfo_size();
  for (int i = 0; i < this->arrpackageinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrpackageinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActTimeLimitPackageNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActTimeLimitPackageNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActTimeLimitPackageNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActTimeLimitPackageNotify::MergeFrom(const TActTimeLimitPackageNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrpackageinfo_.MergeFrom(from.arrpackageinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActTimeLimitPackageNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActTimeLimitPackageNotify::CopyFrom(const TActTimeLimitPackageNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActTimeLimitPackageNotify::IsInitialized() const {

  return true;
}

void TActTimeLimitPackageNotify::Swap(TActTimeLimitPackageNotify* other) {
  if (other != this) {
    arrpackageinfo_.Swap(&other->arrpackageinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActTimeLimitPackageNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActTimeLimitPackageNotify_descriptor_;
  metadata.reflection = TActTimeLimitPackageNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
