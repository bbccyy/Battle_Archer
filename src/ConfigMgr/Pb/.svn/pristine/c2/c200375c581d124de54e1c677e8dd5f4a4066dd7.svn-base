// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/GuildBoss.proto

#ifndef PROTOBUF_net_2fGuildBoss_2eproto__INCLUDED
#define PROTOBUF_net_2fGuildBoss_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Battle.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

class TGuildBossUnit;
class TGuildBossPassReward;
class TGuildBossSingle;
class TGuildBossUserRecord;
class TGuildBossGetGuildBossInfoRsp;
class TGuildBossGetGuildBossSimpleInfoRsp;
class TGuildBossStartBattleReq;
class TGuildBossStartBattleRsp;
class TGuildBossReportBattleReq;
class TGuildBossReceiveRewardReq;
class TGuildBossReceiveRewardRsp;
class TGuildBossReceiveDamageRewardReq;
class TGuildBossRankInfo;
class TGuildBossGetGuildBossRankInfoReq;
class TGuildBossGetGuildBossRankInfoRsp;
class TGuildBossInfoNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TGuildBossUnit</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildBossUnit : public ::google::protobuf::Message {
 public:
  TGuildBossUnit();
  virtual ~TGuildBossUnit();

  TGuildBossUnit(const TGuildBossUnit& from);

  inline TGuildBossUnit& operator=(const TGuildBossUnit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildBossUnit& default_instance();

  void Swap(TGuildBossUnit* other);

  // implements Message ----------------------------------------------

  TGuildBossUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildBossUnit& from);
  void MergeFrom(const TGuildBossUnit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossUnit</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 Htid = 2;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossUnit</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint64 CurrentHp = 3;
  inline bool has_currenthp() const;
  inline void clear_currenthp();
  static const int kCurrentHpFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossUnit</name>
  	<Function>
  		<name>currenthp</name>
  		<replaceName>CurrentHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_currenthp</name>
  		<replaceName>CurrentHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currenthp</name>
  		<replaceName>CurrentHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 currenthp() const;
  inline void set_currenthp(::google::protobuf::uint64 value);

  // optional uint64 MaxHp = 4;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossUnit</name>
  	<Function>
  		<name>maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint64 value);

  // optional uint32 BattlePos = 5;
  inline bool has_battlepos() const;
  inline void clear_battlepos();
  static const int kBattlePosFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossUnit</name>
  	<Function>
  		<name>battlepos</name>
  		<replaceName>BattlePos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlepos</name>
  		<replaceName>BattlePos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlepos</name>
  		<replaceName>BattlePos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battlepos() const;
  inline void set_battlepos(::google::protobuf::uint32 value);

  // optional uint32 ScreenNum = 6;
  inline bool has_screennum() const;
  inline void clear_screennum();
  static const int kScreenNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossUnit</name>
  	<Function>
  		<name>screennum</name>
  		<replaceName>ScreenNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_screennum</name>
  		<replaceName>ScreenNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_screennum</name>
  		<replaceName>ScreenNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 screennum() const;
  inline void set_screennum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildBossUnit)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_currenthp();
  inline void clear_has_currenthp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_battlepos();
  inline void clear_has_battlepos();
  inline void set_has_screennum();
  inline void clear_has_screennum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 htid_;
  ::google::protobuf::uint64 currenthp_;
  ::google::protobuf::uint64 maxhp_;
  ::google::protobuf::uint32 battlepos_;
  ::google::protobuf::uint32 screennum_;
  friend void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

  void InitAsDefaultInstance();
  static TGuildBossUnit* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildBossPassReward</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildBossPassReward : public ::google::protobuf::Message {
 public:
  TGuildBossPassReward();
  virtual ~TGuildBossPassReward();

  TGuildBossPassReward(const TGuildBossPassReward& from);

  inline TGuildBossPassReward& operator=(const TGuildBossPassReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildBossPassReward& default_instance();

  void Swap(TGuildBossPassReward* other);

  // implements Message ----------------------------------------------

  TGuildBossPassReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildBossPassReward& from);
  void MergeFrom(const TGuildBossPassReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RewardId = 1;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossPassReward</name>
  	<Function>
  		<name>rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardid() const;
  inline void set_rewardid(::google::protobuf::uint32 value);

  // optional uint64 RewardUid = 2;
  inline bool has_rewarduid() const;
  inline void clear_rewarduid();
  static const int kRewardUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossPassReward</name>
  	<Function>
  		<name>rewarduid</name>
  		<replaceName>RewardUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewarduid</name>
  		<replaceName>RewardUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewarduid</name>
  		<replaceName>RewardUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewarduid() const;
  inline void set_rewarduid(::google::protobuf::uint64 value);

  // optional string RewardUname = 3;
  inline bool has_rewarduname() const;
  inline void clear_rewarduname();
  static const int kRewardUnameFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossPassReward</name>
  	<Function>
  		<name>rewarduname</name>
  		<replaceName>RewardUname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewarduname</name>
  		<replaceName>RewardUname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewarduname</name>
  		<replaceName>RewardUname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& rewarduname() const;
  inline void set_rewarduname(const ::std::string& value);
  inline void set_rewarduname(const char* value);
  inline void set_rewarduname(const char* value, size_t size);
  inline ::std::string* mutable_rewarduname();
  inline ::std::string* release_rewarduname();
  inline void set_allocated_rewarduname(::std::string* rewarduname);

  // @@protoc_insertion_point(class_scope:pb.TGuildBossPassReward)
 private:
  inline void set_has_rewardid();
  inline void clear_has_rewardid();
  inline void set_has_rewarduid();
  inline void clear_has_rewarduid();
  inline void set_has_rewarduname();
  inline void clear_has_rewarduname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rewarduid_;
  ::std::string* rewarduname_;
  ::google::protobuf::uint32 rewardid_;
  friend void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

  void InitAsDefaultInstance();
  static TGuildBossPassReward* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildBossSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildBossSingle : public ::google::protobuf::Message {
 public:
  TGuildBossSingle();
  virtual ~TGuildBossSingle();

  TGuildBossSingle(const TGuildBossSingle& from);

  inline TGuildBossSingle& operator=(const TGuildBossSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildBossSingle& default_instance();

  void Swap(TGuildBossSingle* other);

  // implements Message ----------------------------------------------

  TGuildBossSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildBossSingle& from);
  void MergeFrom(const TGuildBossSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossSingle</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint64 PassTime = 2;
  inline bool has_passtime() const;
  inline void clear_passtime();
  static const int kPassTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossSingle</name>
  	<Function>
  		<name>passtime</name>
  		<replaceName>PassTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_passtime</name>
  		<replaceName>PassTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_passtime</name>
  		<replaceName>PassTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 passtime() const;
  inline void set_passtime(::google::protobuf::uint64 value);

  // repeated .pb.TGuildBossUnit UnitArr = 3;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossSingle</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildBossUnit& unitarr(int index) const;
  inline ::pb::TGuildBossUnit* mutable_unitarr(int index);
  inline ::pb::TGuildBossUnit* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUnit >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUnit >*
      mutable_unitarr();

  // repeated .pb.TGuildBossPassReward RewardArr = 4;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossSingle</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildBossPassReward& rewardarr(int index) const;
  inline ::pb::TGuildBossPassReward* mutable_rewardarr(int index);
  inline ::pb::TGuildBossPassReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossPassReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossPassReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildBossSingle)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_passtime();
  inline void clear_has_passtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 passtime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUnit > unitarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossPassReward > rewardarr_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

  void InitAsDefaultInstance();
  static TGuildBossSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildBossUserRecord</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildBossUserRecord : public ::google::protobuf::Message {
 public:
  TGuildBossUserRecord();
  virtual ~TGuildBossUserRecord();

  TGuildBossUserRecord(const TGuildBossUserRecord& from);

  inline TGuildBossUserRecord& operator=(const TGuildBossUserRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildBossUserRecord& default_instance();

  void Swap(TGuildBossUserRecord* other);

  // implements Message ----------------------------------------------

  TGuildBossUserRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildBossUserRecord& from);
  void MergeFrom(const TGuildBossUserRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossUserRecord</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Uname = 2;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossUserRecord</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint64 TotalDamage = 3;
  inline bool has_totaldamage() const;
  inline void clear_totaldamage();
  static const int kTotalDamageFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossUserRecord</name>
  	<Function>
  		<name>totaldamage</name>
  		<replaceName>TotalDamage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totaldamage</name>
  		<replaceName>TotalDamage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totaldamage</name>
  		<replaceName>TotalDamage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totaldamage() const;
  inline void set_totaldamage(::google::protobuf::uint64 value);

  // optional uint64 DamageTime = 4;
  inline bool has_damagetime() const;
  inline void clear_damagetime();
  static const int kDamageTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossUserRecord</name>
  	<Function>
  		<name>damagetime</name>
  		<replaceName>DamageTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damagetime</name>
  		<replaceName>DamageTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagetime</name>
  		<replaceName>DamageTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damagetime() const;
  inline void set_damagetime(::google::protobuf::uint64 value);

  // optional uint64 FightForce = 5;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossUserRecord</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildBossUserRecord)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_totaldamage();
  inline void clear_has_totaldamage();
  inline void set_has_damagetime();
  inline void clear_has_damagetime();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* uname_;
  ::google::protobuf::uint64 totaldamage_;
  ::google::protobuf::uint64 damagetime_;
  ::google::protobuf::uint64 fightforce_;
  friend void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

  void InitAsDefaultInstance();
  static TGuildBossUserRecord* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildBossGetGuildBossInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildBossGetGuildBossInfoRsp : public ::google::protobuf::Message {
 public:
  TGuildBossGetGuildBossInfoRsp();
  virtual ~TGuildBossGetGuildBossInfoRsp();

  TGuildBossGetGuildBossInfoRsp(const TGuildBossGetGuildBossInfoRsp& from);

  inline TGuildBossGetGuildBossInfoRsp& operator=(const TGuildBossGetGuildBossInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildBossGetGuildBossInfoRsp& default_instance();

  void Swap(TGuildBossGetGuildBossInfoRsp* other);

  // implements Message ----------------------------------------------

  TGuildBossGetGuildBossInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildBossGetGuildBossInfoRsp& from);
  void MergeFrom(const TGuildBossGetGuildBossInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 DailyAtkNum = 1;
  inline bool has_dailyatknum() const;
  inline void clear_dailyatknum();
  static const int kDailyAtkNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossGetGuildBossInfoRsp</name>
  	<Function>
  		<name>dailyatknum</name>
  		<replaceName>DailyAtkNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dailyatknum</name>
  		<replaceName>DailyAtkNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dailyatknum</name>
  		<replaceName>DailyAtkNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 dailyatknum() const;
  inline void set_dailyatknum(::google::protobuf::uint32 value);

  // optional uint32 BossLv = 2;
  inline bool has_bosslv() const;
  inline void clear_bosslv();
  static const int kBossLvFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossGetGuildBossInfoRsp</name>
  	<Function>
  		<name>bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bosslv() const;
  inline void set_bosslv(::google::protobuf::uint32 value);

  // optional uint64 RefreshTime = 3;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossGetGuildBossInfoRsp</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // repeated .pb.TGuildBossSingle BossArr = 4;
  inline int bossarr_size() const;
  inline void clear_bossarr();
  static const int kBossArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossGetGuildBossInfoRsp</name>
  	<Function>
  		<name>bossarr</name>
  		<replaceName>BossArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_bossarr</name>
  		<replaceName>BossArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_bossarr</name>
  		<replaceName>BossArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossarr</name>
  		<replaceName>BossArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>bossarr_size</name>
  		<replaceName>BossArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildBossSingle& bossarr(int index) const;
  inline ::pb::TGuildBossSingle* mutable_bossarr(int index);
  inline ::pb::TGuildBossSingle* add_bossarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossSingle >&
      bossarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossSingle >*
      mutable_bossarr();

  // repeated .pb.TGuildBossUserRecord UserRecordArr = 5;
  inline int userrecordarr_size() const;
  inline void clear_userrecordarr();
  static const int kUserRecordArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossGetGuildBossInfoRsp</name>
  	<Function>
  		<name>userrecordarr</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userrecordarr</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userrecordarr</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userrecordarr</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userrecordarr_size</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildBossUserRecord& userrecordarr(int index) const;
  inline ::pb::TGuildBossUserRecord* mutable_userrecordarr(int index);
  inline ::pb::TGuildBossUserRecord* add_userrecordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUserRecord >&
      userrecordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUserRecord >*
      mutable_userrecordarr();

  // optional uint64 TotalDamage = 6;
  inline bool has_totaldamage() const;
  inline void clear_totaldamage();
  static const int kTotalDamageFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossGetGuildBossInfoRsp</name>
  	<Function>
  		<name>totaldamage</name>
  		<replaceName>TotalDamage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totaldamage</name>
  		<replaceName>TotalDamage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totaldamage</name>
  		<replaceName>TotalDamage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totaldamage() const;
  inline void set_totaldamage(::google::protobuf::uint64 value);

  // repeated uint32 DamageRewardArr = 7;
  inline int damagerewardarr_size() const;
  inline void clear_damagerewardarr();
  static const int kDamageRewardArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossGetGuildBossInfoRsp</name>
  	<Function>
  		<name>damagerewardarr</name>
  		<replaceName>DamageRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_damagerewardarr</name>
  		<replaceName>DamageRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_damagerewardarr</name>
  		<replaceName>DamageRewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagerewardarr</name>
  		<replaceName>DamageRewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>damagerewardarr_size</name>
  		<replaceName>DamageRewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 damagerewardarr(int index) const;
  inline void set_damagerewardarr(int index, ::google::protobuf::uint32 value);
  inline void add_damagerewardarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      damagerewardarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_damagerewardarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildBossGetGuildBossInfoRsp)
 private:
  inline void set_has_dailyatknum();
  inline void clear_has_dailyatknum();
  inline void set_has_bosslv();
  inline void clear_has_bosslv();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();
  inline void set_has_totaldamage();
  inline void clear_has_totaldamage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dailyatknum_;
  ::google::protobuf::uint32 bosslv_;
  ::google::protobuf::uint64 refreshtime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossSingle > bossarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUserRecord > userrecordarr_;
  ::google::protobuf::uint64 totaldamage_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > damagerewardarr_;
  friend void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

  void InitAsDefaultInstance();
  static TGuildBossGetGuildBossInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildBossGetGuildBossSimpleInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildBossGetGuildBossSimpleInfoRsp : public ::google::protobuf::Message {
 public:
  TGuildBossGetGuildBossSimpleInfoRsp();
  virtual ~TGuildBossGetGuildBossSimpleInfoRsp();

  TGuildBossGetGuildBossSimpleInfoRsp(const TGuildBossGetGuildBossSimpleInfoRsp& from);

  inline TGuildBossGetGuildBossSimpleInfoRsp& operator=(const TGuildBossGetGuildBossSimpleInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildBossGetGuildBossSimpleInfoRsp& default_instance();

  void Swap(TGuildBossGetGuildBossSimpleInfoRsp* other);

  // implements Message ----------------------------------------------

  TGuildBossGetGuildBossSimpleInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildBossGetGuildBossSimpleInfoRsp& from);
  void MergeFrom(const TGuildBossGetGuildBossSimpleInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RemainerRewardNum = 1;
  inline bool has_remainerrewardnum() const;
  inline void clear_remainerrewardnum();
  static const int kRemainerRewardNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossGetGuildBossSimpleInfoRsp</name>
  	<Function>
  		<name>remainerrewardnum</name>
  		<replaceName>RemainerRewardNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_remainerrewardnum</name>
  		<replaceName>RemainerRewardNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_remainerrewardnum</name>
  		<replaceName>RemainerRewardNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 remainerrewardnum() const;
  inline void set_remainerrewardnum(::google::protobuf::uint32 value);

  // optional uint32 RemainerAtkNum = 2;
  inline bool has_remaineratknum() const;
  inline void clear_remaineratknum();
  static const int kRemainerAtkNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossGetGuildBossSimpleInfoRsp</name>
  	<Function>
  		<name>remaineratknum</name>
  		<replaceName>RemainerAtkNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_remaineratknum</name>
  		<replaceName>RemainerAtkNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_remaineratknum</name>
  		<replaceName>RemainerAtkNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 remaineratknum() const;
  inline void set_remaineratknum(::google::protobuf::uint32 value);

  // optional uint32 BossId = 3;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossGetGuildBossSimpleInfoRsp</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildBossGetGuildBossSimpleInfoRsp)
 private:
  inline void set_has_remainerrewardnum();
  inline void clear_has_remainerrewardnum();
  inline void set_has_remaineratknum();
  inline void clear_has_remaineratknum();
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 remainerrewardnum_;
  ::google::protobuf::uint32 remaineratknum_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

  void InitAsDefaultInstance();
  static TGuildBossGetGuildBossSimpleInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildBossStartBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildBossStartBattleReq : public ::google::protobuf::Message {
 public:
  TGuildBossStartBattleReq();
  virtual ~TGuildBossStartBattleReq();

  TGuildBossStartBattleReq(const TGuildBossStartBattleReq& from);

  inline TGuildBossStartBattleReq& operator=(const TGuildBossStartBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildBossStartBattleReq& default_instance();

  void Swap(TGuildBossStartBattleReq* other);

  // implements Message ----------------------------------------------

  TGuildBossStartBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildBossStartBattleReq& from);
  void MergeFrom(const TGuildBossStartBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossStartBattleReq</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint32 BossLv = 2;
  inline bool has_bosslv() const;
  inline void clear_bosslv();
  static const int kBossLvFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossStartBattleReq</name>
  	<Function>
  		<name>bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bosslv() const;
  inline void set_bosslv(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossStartBattleReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TGuildBossStartBattleReq)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_bosslv();
  inline void clear_has_bosslv();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bossid_;
  ::google::protobuf::uint32 bosslv_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  friend void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

  void InitAsDefaultInstance();
  static TGuildBossStartBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildBossStartBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildBossStartBattleRsp : public ::google::protobuf::Message {
 public:
  TGuildBossStartBattleRsp();
  virtual ~TGuildBossStartBattleRsp();

  TGuildBossStartBattleRsp(const TGuildBossStartBattleRsp& from);

  inline TGuildBossStartBattleRsp& operator=(const TGuildBossStartBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildBossStartBattleRsp& default_instance();

  void Swap(TGuildBossStartBattleRsp* other);

  // implements Message ----------------------------------------------

  TGuildBossStartBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildBossStartBattleRsp& from);
  void MergeFrom(const TGuildBossStartBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildBossUnit UnitArr = 1;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossStartBattleRsp</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildBossUnit& unitarr(int index) const;
  inline ::pb::TGuildBossUnit* mutable_unitarr(int index);
  inline ::pb::TGuildBossUnit* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUnit >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUnit >*
      mutable_unitarr();

  // optional uint64 UpdateTime = 2;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossStartBattleRsp</name>
  	<Function>
  		<name>updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 updatetime() const;
  inline void set_updatetime(::google::protobuf::uint64 value);

  // optional .pb.TBattleArgs BattleArgs = 3;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossStartBattleRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TGuildBossStartBattleRsp)
 private:
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUnit > unitarr_;
  ::google::protobuf::uint64 updatetime_;
  ::pb::TBattleArgs* battleargs_;
  friend void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

  void InitAsDefaultInstance();
  static TGuildBossStartBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildBossReportBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildBossReportBattleReq : public ::google::protobuf::Message {
 public:
  TGuildBossReportBattleReq();
  virtual ~TGuildBossReportBattleReq();

  TGuildBossReportBattleReq(const TGuildBossReportBattleReq& from);

  inline TGuildBossReportBattleReq& operator=(const TGuildBossReportBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildBossReportBattleReq& default_instance();

  void Swap(TGuildBossReportBattleReq* other);

  // implements Message ----------------------------------------------

  TGuildBossReportBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildBossReportBattleReq& from);
  void MergeFrom(const TGuildBossReportBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossReportBattleReq</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint32 BossLv = 2;
  inline bool has_bosslv() const;
  inline void clear_bosslv();
  static const int kBossLvFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossReportBattleReq</name>
  	<Function>
  		<name>bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bosslv() const;
  inline void set_bosslv(::google::protobuf::uint32 value);

  // optional .pb.TBattleResult BattleRet = 3;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossReportBattleReq</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleret() const;
  inline ::pb::TBattleResult* mutable_battleret();
  inline ::pb::TBattleResult* release_battleret();
  inline void set_allocated_battleret(::pb::TBattleResult* battleret);

  // optional bytes BattleResultBytes = 4;
  inline bool has_battleresultbytes() const;
  inline void clear_battleresultbytes();
  static const int kBattleResultBytesFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossReportBattleReq</name>
  	<Function>
  		<name>battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleresultbytes() const;
  inline void set_battleresultbytes(const ::std::string& value);
  inline void set_battleresultbytes(const char* value);
  inline void set_battleresultbytes(const void* value, size_t size);
  inline ::std::string* mutable_battleresultbytes();
  inline ::std::string* release_battleresultbytes();
  inline void set_allocated_battleresultbytes(::std::string* battleresultbytes);

  // @@protoc_insertion_point(class_scope:pb.TGuildBossReportBattleReq)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_bosslv();
  inline void clear_has_bosslv();
  inline void set_has_battleret();
  inline void clear_has_battleret();
  inline void set_has_battleresultbytes();
  inline void clear_has_battleresultbytes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bossid_;
  ::google::protobuf::uint32 bosslv_;
  ::pb::TBattleResult* battleret_;
  ::std::string* battleresultbytes_;
  friend void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

  void InitAsDefaultInstance();
  static TGuildBossReportBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildBossReceiveRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildBossReceiveRewardReq : public ::google::protobuf::Message {
 public:
  TGuildBossReceiveRewardReq();
  virtual ~TGuildBossReceiveRewardReq();

  TGuildBossReceiveRewardReq(const TGuildBossReceiveRewardReq& from);

  inline TGuildBossReceiveRewardReq& operator=(const TGuildBossReceiveRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildBossReceiveRewardReq& default_instance();

  void Swap(TGuildBossReceiveRewardReq* other);

  // implements Message ----------------------------------------------

  TGuildBossReceiveRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildBossReceiveRewardReq& from);
  void MergeFrom(const TGuildBossReceiveRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossReceiveRewardReq</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint32 BossLv = 2;
  inline bool has_bosslv() const;
  inline void clear_bosslv();
  static const int kBossLvFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossReceiveRewardReq</name>
  	<Function>
  		<name>bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bosslv() const;
  inline void set_bosslv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildBossReceiveRewardReq)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_bosslv();
  inline void clear_has_bosslv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bossid_;
  ::google::protobuf::uint32 bosslv_;
  friend void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

  void InitAsDefaultInstance();
  static TGuildBossReceiveRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildBossReceiveRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildBossReceiveRewardRsp : public ::google::protobuf::Message {
 public:
  TGuildBossReceiveRewardRsp();
  virtual ~TGuildBossReceiveRewardRsp();

  TGuildBossReceiveRewardRsp(const TGuildBossReceiveRewardRsp& from);

  inline TGuildBossReceiveRewardRsp& operator=(const TGuildBossReceiveRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildBossReceiveRewardRsp& default_instance();

  void Swap(TGuildBossReceiveRewardRsp* other);

  // implements Message ----------------------------------------------

  TGuildBossReceiveRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildBossReceiveRewardRsp& from);
  void MergeFrom(const TGuildBossReceiveRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RewardId = 1;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossReceiveRewardRsp</name>
  	<Function>
  		<name>rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardid() const;
  inline void set_rewardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildBossReceiveRewardRsp)
 private:
  inline void set_has_rewardid();
  inline void clear_has_rewardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rewardid_;
  friend void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

  void InitAsDefaultInstance();
  static TGuildBossReceiveRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildBossReceiveDamageRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildBossReceiveDamageRewardReq : public ::google::protobuf::Message {
 public:
  TGuildBossReceiveDamageRewardReq();
  virtual ~TGuildBossReceiveDamageRewardReq();

  TGuildBossReceiveDamageRewardReq(const TGuildBossReceiveDamageRewardReq& from);

  inline TGuildBossReceiveDamageRewardReq& operator=(const TGuildBossReceiveDamageRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildBossReceiveDamageRewardReq& default_instance();

  void Swap(TGuildBossReceiveDamageRewardReq* other);

  // implements Message ----------------------------------------------

  TGuildBossReceiveDamageRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildBossReceiveDamageRewardReq& from);
  void MergeFrom(const TGuildBossReceiveDamageRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RewardId = 1;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossReceiveDamageRewardReq</name>
  	<Function>
  		<name>rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardid() const;
  inline void set_rewardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildBossReceiveDamageRewardReq)
 private:
  inline void set_has_rewardid();
  inline void clear_has_rewardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rewardid_;
  friend void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

  void InitAsDefaultInstance();
  static TGuildBossReceiveDamageRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildBossRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildBossRankInfo : public ::google::protobuf::Message {
 public:
  TGuildBossRankInfo();
  virtual ~TGuildBossRankInfo();

  TGuildBossRankInfo(const TGuildBossRankInfo& from);

  inline TGuildBossRankInfo& operator=(const TGuildBossRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildBossRankInfo& default_instance();

  void Swap(TGuildBossRankInfo* other);

  // implements Message ----------------------------------------------

  TGuildBossRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildBossRankInfo& from);
  void MergeFrom(const TGuildBossRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossRankInfo</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string GuildName = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossRankInfo</name>
  	<Function>
  		<name>guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional string BannerName = 3;
  inline bool has_bannername() const;
  inline void clear_bannername();
  static const int kBannerNameFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossRankInfo</name>
  	<Function>
  		<name>bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bannername() const;
  inline void set_bannername(const ::std::string& value);
  inline void set_bannername(const char* value);
  inline void set_bannername(const char* value, size_t size);
  inline ::std::string* mutable_bannername();
  inline ::std::string* release_bannername();
  inline void set_allocated_bannername(::std::string* bannername);

  // optional uint32 BannerBase = 4;
  inline bool has_bannerbase() const;
  inline void clear_bannerbase();
  static const int kBannerBaseFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossRankInfo</name>
  	<Function>
  		<name>bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerbase() const;
  inline void set_bannerbase(::google::protobuf::uint32 value);

  // optional uint64 FightForce = 5;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossRankInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint32 BossLv = 6;
  inline bool has_bosslv() const;
  inline void clear_bosslv();
  static const int kBossLvFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossRankInfo</name>
  	<Function>
  		<name>bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bosslv() const;
  inline void set_bosslv(::google::protobuf::uint32 value);

  // optional uint32 BossId = 7;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossRankInfo</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint64 BossTime = 8;
  inline bool has_bosstime() const;
  inline void clear_bosstime();
  static const int kBossTimeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossRankInfo</name>
  	<Function>
  		<name>bosstime</name>
  		<replaceName>BossTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bosstime</name>
  		<replaceName>BossTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bosstime</name>
  		<replaceName>BossTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 bosstime() const;
  inline void set_bosstime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildBossRankInfo)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_bannername();
  inline void clear_has_bannername();
  inline void set_has_bannerbase();
  inline void clear_has_bannerbase();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_bosslv();
  inline void clear_has_bosslv();
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_bosstime();
  inline void clear_has_bosstime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  ::std::string* bannername_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 bannerbase_;
  ::google::protobuf::uint32 bosslv_;
  ::google::protobuf::uint64 bosstime_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

  void InitAsDefaultInstance();
  static TGuildBossRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildBossGetGuildBossRankInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildBossGetGuildBossRankInfoReq : public ::google::protobuf::Message {
 public:
  TGuildBossGetGuildBossRankInfoReq();
  virtual ~TGuildBossGetGuildBossRankInfoReq();

  TGuildBossGetGuildBossRankInfoReq(const TGuildBossGetGuildBossRankInfoReq& from);

  inline TGuildBossGetGuildBossRankInfoReq& operator=(const TGuildBossGetGuildBossRankInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildBossGetGuildBossRankInfoReq& default_instance();

  void Swap(TGuildBossGetGuildBossRankInfoReq* other);

  // implements Message ----------------------------------------------

  TGuildBossGetGuildBossRankInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildBossGetGuildBossRankInfoReq& from);
  void MergeFrom(const TGuildBossGetGuildBossRankInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossGetGuildBossRankInfoReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossGetGuildBossRankInfoReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildBossGetGuildBossRankInfoReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

  void InitAsDefaultInstance();
  static TGuildBossGetGuildBossRankInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildBossGetGuildBossRankInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildBossGetGuildBossRankInfoRsp : public ::google::protobuf::Message {
 public:
  TGuildBossGetGuildBossRankInfoRsp();
  virtual ~TGuildBossGetGuildBossRankInfoRsp();

  TGuildBossGetGuildBossRankInfoRsp(const TGuildBossGetGuildBossRankInfoRsp& from);

  inline TGuildBossGetGuildBossRankInfoRsp& operator=(const TGuildBossGetGuildBossRankInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildBossGetGuildBossRankInfoRsp& default_instance();

  void Swap(TGuildBossGetGuildBossRankInfoRsp* other);

  // implements Message ----------------------------------------------

  TGuildBossGetGuildBossRankInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildBossGetGuildBossRankInfoRsp& from);
  void MergeFrom(const TGuildBossGetGuildBossRankInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 MyRank = 1;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossGetGuildBossRankInfoRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // repeated .pb.TGuildBossRankInfo RankInfoArr = 2;
  inline int rankinfoarr_size() const;
  inline void clear_rankinfoarr();
  static const int kRankInfoArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossGetGuildBossRankInfoRsp</name>
  	<Function>
  		<name>rankinfoarr</name>
  		<replaceName>RankInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankinfoarr</name>
  		<replaceName>RankInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankinfoarr</name>
  		<replaceName>RankInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankinfoarr</name>
  		<replaceName>RankInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankinfoarr_size</name>
  		<replaceName>RankInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildBossRankInfo& rankinfoarr(int index) const;
  inline ::pb::TGuildBossRankInfo* mutable_rankinfoarr(int index);
  inline ::pb::TGuildBossRankInfo* add_rankinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossRankInfo >&
      rankinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossRankInfo >*
      mutable_rankinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildBossGetGuildBossRankInfoRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossRankInfo > rankinfoarr_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

  void InitAsDefaultInstance();
  static TGuildBossGetGuildBossRankInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildBossInfoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildBossInfoNotify : public ::google::protobuf::Message {
 public:
  TGuildBossInfoNotify();
  virtual ~TGuildBossInfoNotify();

  TGuildBossInfoNotify(const TGuildBossInfoNotify& from);

  inline TGuildBossInfoNotify& operator=(const TGuildBossInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildBossInfoNotify& default_instance();

  void Swap(TGuildBossInfoNotify* other);

  // implements Message ----------------------------------------------

  TGuildBossInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildBossInfoNotify& from);
  void MergeFrom(const TGuildBossInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IsReset = 1;
  inline bool has_isreset() const;
  inline void clear_isreset();
  static const int kIsResetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossInfoNotify</name>
  	<Function>
  		<name>isreset</name>
  		<replaceName>IsReset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isreset</name>
  		<replaceName>IsReset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isreset</name>
  		<replaceName>IsReset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isreset() const;
  inline void set_isreset(::google::protobuf::uint32 value);

  // optional uint32 BossLv = 2;
  inline bool has_bosslv() const;
  inline void clear_bosslv();
  static const int kBossLvFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossInfoNotify</name>
  	<Function>
  		<name>bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bosslv</name>
  		<replaceName>BossLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bosslv() const;
  inline void set_bosslv(::google::protobuf::uint32 value);

  // optional uint64 RefreshTime = 3;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossInfoNotify</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // repeated .pb.TGuildBossSingle BossArr = 4;
  inline int bossarr_size() const;
  inline void clear_bossarr();
  static const int kBossArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossInfoNotify</name>
  	<Function>
  		<name>bossarr</name>
  		<replaceName>BossArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_bossarr</name>
  		<replaceName>BossArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_bossarr</name>
  		<replaceName>BossArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossarr</name>
  		<replaceName>BossArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>bossarr_size</name>
  		<replaceName>BossArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildBossSingle& bossarr(int index) const;
  inline ::pb::TGuildBossSingle* mutable_bossarr(int index);
  inline ::pb::TGuildBossSingle* add_bossarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossSingle >&
      bossarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossSingle >*
      mutable_bossarr();

  // repeated .pb.TGuildBossUserRecord UserRecordArr = 5;
  inline int userrecordarr_size() const;
  inline void clear_userrecordarr();
  static const int kUserRecordArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossInfoNotify</name>
  	<Function>
  		<name>userrecordarr</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userrecordarr</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userrecordarr</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userrecordarr</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userrecordarr_size</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildBossUserRecord& userrecordarr(int index) const;
  inline ::pb::TGuildBossUserRecord* mutable_userrecordarr(int index);
  inline ::pb::TGuildBossUserRecord* add_userrecordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUserRecord >&
      userrecordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUserRecord >*
      mutable_userrecordarr();

  // optional uint64 UpdateTime = 6;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildBossInfoNotify</name>
  	<Function>
  		<name>updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 updatetime() const;
  inline void set_updatetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildBossInfoNotify)
 private:
  inline void set_has_isreset();
  inline void clear_has_isreset();
  inline void set_has_bosslv();
  inline void clear_has_bosslv();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 isreset_;
  ::google::protobuf::uint32 bosslv_;
  ::google::protobuf::uint64 refreshtime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossSingle > bossarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUserRecord > userrecordarr_;
  ::google::protobuf::uint64 updatetime_;
  friend void  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildBoss_2eproto();

  void InitAsDefaultInstance();
  static TGuildBossInfoNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TGuildBossUnit

// optional uint32 Hid = 1;
inline bool TGuildBossUnit::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildBossUnit::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildBossUnit::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildBossUnit::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TGuildBossUnit::hid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossUnit.Hid)
  return hid_;
}
inline void TGuildBossUnit::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossUnit.Hid)
}

// optional uint32 Htid = 2;
inline bool TGuildBossUnit::has_htid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildBossUnit::set_has_htid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildBossUnit::clear_has_htid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildBossUnit::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TGuildBossUnit::htid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossUnit.Htid)
  return htid_;
}
inline void TGuildBossUnit::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossUnit.Htid)
}

// optional uint64 CurrentHp = 3;
inline bool TGuildBossUnit::has_currenthp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildBossUnit::set_has_currenthp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildBossUnit::clear_has_currenthp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildBossUnit::clear_currenthp() {
  currenthp_ = GOOGLE_ULONGLONG(0);
  clear_has_currenthp();
}
inline ::google::protobuf::uint64 TGuildBossUnit::currenthp() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossUnit.CurrentHp)
  return currenthp_;
}
inline void TGuildBossUnit::set_currenthp(::google::protobuf::uint64 value) {
  set_has_currenthp();
  currenthp_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossUnit.CurrentHp)
}

// optional uint64 MaxHp = 4;
inline bool TGuildBossUnit::has_maxhp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildBossUnit::set_has_maxhp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildBossUnit::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildBossUnit::clear_maxhp() {
  maxhp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::uint64 TGuildBossUnit::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossUnit.MaxHp)
  return maxhp_;
}
inline void TGuildBossUnit::set_maxhp(::google::protobuf::uint64 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossUnit.MaxHp)
}

// optional uint32 BattlePos = 5;
inline bool TGuildBossUnit::has_battlepos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildBossUnit::set_has_battlepos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildBossUnit::clear_has_battlepos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildBossUnit::clear_battlepos() {
  battlepos_ = 0u;
  clear_has_battlepos();
}
inline ::google::protobuf::uint32 TGuildBossUnit::battlepos() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossUnit.BattlePos)
  return battlepos_;
}
inline void TGuildBossUnit::set_battlepos(::google::protobuf::uint32 value) {
  set_has_battlepos();
  battlepos_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossUnit.BattlePos)
}

// optional uint32 ScreenNum = 6;
inline bool TGuildBossUnit::has_screennum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildBossUnit::set_has_screennum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildBossUnit::clear_has_screennum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildBossUnit::clear_screennum() {
  screennum_ = 0u;
  clear_has_screennum();
}
inline ::google::protobuf::uint32 TGuildBossUnit::screennum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossUnit.ScreenNum)
  return screennum_;
}
inline void TGuildBossUnit::set_screennum(::google::protobuf::uint32 value) {
  set_has_screennum();
  screennum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossUnit.ScreenNum)
}

// -------------------------------------------------------------------

// TGuildBossPassReward

// optional uint32 RewardId = 1;
inline bool TGuildBossPassReward::has_rewardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildBossPassReward::set_has_rewardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildBossPassReward::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildBossPassReward::clear_rewardid() {
  rewardid_ = 0u;
  clear_has_rewardid();
}
inline ::google::protobuf::uint32 TGuildBossPassReward::rewardid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossPassReward.RewardId)
  return rewardid_;
}
inline void TGuildBossPassReward::set_rewardid(::google::protobuf::uint32 value) {
  set_has_rewardid();
  rewardid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossPassReward.RewardId)
}

// optional uint64 RewardUid = 2;
inline bool TGuildBossPassReward::has_rewarduid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildBossPassReward::set_has_rewarduid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildBossPassReward::clear_has_rewarduid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildBossPassReward::clear_rewarduid() {
  rewarduid_ = GOOGLE_ULONGLONG(0);
  clear_has_rewarduid();
}
inline ::google::protobuf::uint64 TGuildBossPassReward::rewarduid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossPassReward.RewardUid)
  return rewarduid_;
}
inline void TGuildBossPassReward::set_rewarduid(::google::protobuf::uint64 value) {
  set_has_rewarduid();
  rewarduid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossPassReward.RewardUid)
}

// optional string RewardUname = 3;
inline bool TGuildBossPassReward::has_rewarduname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildBossPassReward::set_has_rewarduname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildBossPassReward::clear_has_rewarduname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildBossPassReward::clear_rewarduname() {
  if (rewarduname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarduname_->clear();
  }
  clear_has_rewarduname();
}
inline const ::std::string& TGuildBossPassReward::rewarduname() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossPassReward.RewardUname)
  return *rewarduname_;
}
inline void TGuildBossPassReward::set_rewarduname(const ::std::string& value) {
  set_has_rewarduname();
  if (rewarduname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarduname_ = new ::std::string;
  }
  rewarduname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildBossPassReward.RewardUname)
}
inline void TGuildBossPassReward::set_rewarduname(const char* value) {
  set_has_rewarduname();
  if (rewarduname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarduname_ = new ::std::string;
  }
  rewarduname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildBossPassReward.RewardUname)
}
inline void TGuildBossPassReward::set_rewarduname(const char* value, size_t size) {
  set_has_rewarduname();
  if (rewarduname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarduname_ = new ::std::string;
  }
  rewarduname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildBossPassReward.RewardUname)
}
inline ::std::string* TGuildBossPassReward::mutable_rewarduname() {
  set_has_rewarduname();
  if (rewarduname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewarduname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildBossPassReward.RewardUname)
  return rewarduname_;
}
inline ::std::string* TGuildBossPassReward::release_rewarduname() {
  clear_has_rewarduname();
  if (rewarduname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rewarduname_;
    rewarduname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildBossPassReward::set_allocated_rewarduname(::std::string* rewarduname) {
  if (rewarduname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewarduname_;
  }
  if (rewarduname) {
    set_has_rewarduname();
    rewarduname_ = rewarduname;
  } else {
    clear_has_rewarduname();
    rewarduname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildBossPassReward.RewardUname)
}

// -------------------------------------------------------------------

// TGuildBossSingle

// optional uint32 BossId = 1;
inline bool TGuildBossSingle::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildBossSingle::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildBossSingle::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildBossSingle::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TGuildBossSingle::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossSingle.BossId)
  return bossid_;
}
inline void TGuildBossSingle::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossSingle.BossId)
}

// optional uint64 PassTime = 2;
inline bool TGuildBossSingle::has_passtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildBossSingle::set_has_passtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildBossSingle::clear_has_passtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildBossSingle::clear_passtime() {
  passtime_ = GOOGLE_ULONGLONG(0);
  clear_has_passtime();
}
inline ::google::protobuf::uint64 TGuildBossSingle::passtime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossSingle.PassTime)
  return passtime_;
}
inline void TGuildBossSingle::set_passtime(::google::protobuf::uint64 value) {
  set_has_passtime();
  passtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossSingle.PassTime)
}

// repeated .pb.TGuildBossUnit UnitArr = 3;
inline int TGuildBossSingle::unitarr_size() const {
  return unitarr_.size();
}
inline void TGuildBossSingle::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TGuildBossUnit& TGuildBossSingle::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossSingle.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TGuildBossUnit* TGuildBossSingle::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildBossSingle.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TGuildBossUnit* TGuildBossSingle::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildBossSingle.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUnit >&
TGuildBossSingle::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildBossSingle.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUnit >*
TGuildBossSingle::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildBossSingle.UnitArr)
  return &unitarr_;
}

// repeated .pb.TGuildBossPassReward RewardArr = 4;
inline int TGuildBossSingle::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TGuildBossSingle::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TGuildBossPassReward& TGuildBossSingle::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossSingle.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TGuildBossPassReward* TGuildBossSingle::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildBossSingle.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TGuildBossPassReward* TGuildBossSingle::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildBossSingle.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossPassReward >&
TGuildBossSingle::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildBossSingle.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossPassReward >*
TGuildBossSingle::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildBossSingle.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TGuildBossUserRecord

// optional uint64 Uid = 1;
inline bool TGuildBossUserRecord::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildBossUserRecord::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildBossUserRecord::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildBossUserRecord::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TGuildBossUserRecord::uid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossUserRecord.Uid)
  return uid_;
}
inline void TGuildBossUserRecord::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossUserRecord.Uid)
}

// optional string Uname = 2;
inline bool TGuildBossUserRecord::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildBossUserRecord::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildBossUserRecord::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildBossUserRecord::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TGuildBossUserRecord::uname() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossUserRecord.Uname)
  return *uname_;
}
inline void TGuildBossUserRecord::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildBossUserRecord.Uname)
}
inline void TGuildBossUserRecord::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildBossUserRecord.Uname)
}
inline void TGuildBossUserRecord::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildBossUserRecord.Uname)
}
inline ::std::string* TGuildBossUserRecord::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildBossUserRecord.Uname)
  return uname_;
}
inline ::std::string* TGuildBossUserRecord::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildBossUserRecord::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildBossUserRecord.Uname)
}

// optional uint64 TotalDamage = 3;
inline bool TGuildBossUserRecord::has_totaldamage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildBossUserRecord::set_has_totaldamage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildBossUserRecord::clear_has_totaldamage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildBossUserRecord::clear_totaldamage() {
  totaldamage_ = GOOGLE_ULONGLONG(0);
  clear_has_totaldamage();
}
inline ::google::protobuf::uint64 TGuildBossUserRecord::totaldamage() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossUserRecord.TotalDamage)
  return totaldamage_;
}
inline void TGuildBossUserRecord::set_totaldamage(::google::protobuf::uint64 value) {
  set_has_totaldamage();
  totaldamage_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossUserRecord.TotalDamage)
}

// optional uint64 DamageTime = 4;
inline bool TGuildBossUserRecord::has_damagetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildBossUserRecord::set_has_damagetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildBossUserRecord::clear_has_damagetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildBossUserRecord::clear_damagetime() {
  damagetime_ = GOOGLE_ULONGLONG(0);
  clear_has_damagetime();
}
inline ::google::protobuf::uint64 TGuildBossUserRecord::damagetime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossUserRecord.DamageTime)
  return damagetime_;
}
inline void TGuildBossUserRecord::set_damagetime(::google::protobuf::uint64 value) {
  set_has_damagetime();
  damagetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossUserRecord.DamageTime)
}

// optional uint64 FightForce = 5;
inline bool TGuildBossUserRecord::has_fightforce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildBossUserRecord::set_has_fightforce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildBossUserRecord::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildBossUserRecord::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TGuildBossUserRecord::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossUserRecord.FightForce)
  return fightforce_;
}
inline void TGuildBossUserRecord::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossUserRecord.FightForce)
}

// -------------------------------------------------------------------

// TGuildBossGetGuildBossInfoRsp

// optional uint32 DailyAtkNum = 1;
inline bool TGuildBossGetGuildBossInfoRsp::has_dailyatknum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildBossGetGuildBossInfoRsp::set_has_dailyatknum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildBossGetGuildBossInfoRsp::clear_has_dailyatknum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildBossGetGuildBossInfoRsp::clear_dailyatknum() {
  dailyatknum_ = 0u;
  clear_has_dailyatknum();
}
inline ::google::protobuf::uint32 TGuildBossGetGuildBossInfoRsp::dailyatknum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossGetGuildBossInfoRsp.DailyAtkNum)
  return dailyatknum_;
}
inline void TGuildBossGetGuildBossInfoRsp::set_dailyatknum(::google::protobuf::uint32 value) {
  set_has_dailyatknum();
  dailyatknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossGetGuildBossInfoRsp.DailyAtkNum)
}

// optional uint32 BossLv = 2;
inline bool TGuildBossGetGuildBossInfoRsp::has_bosslv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildBossGetGuildBossInfoRsp::set_has_bosslv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildBossGetGuildBossInfoRsp::clear_has_bosslv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildBossGetGuildBossInfoRsp::clear_bosslv() {
  bosslv_ = 0u;
  clear_has_bosslv();
}
inline ::google::protobuf::uint32 TGuildBossGetGuildBossInfoRsp::bosslv() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossGetGuildBossInfoRsp.BossLv)
  return bosslv_;
}
inline void TGuildBossGetGuildBossInfoRsp::set_bosslv(::google::protobuf::uint32 value) {
  set_has_bosslv();
  bosslv_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossGetGuildBossInfoRsp.BossLv)
}

// optional uint64 RefreshTime = 3;
inline bool TGuildBossGetGuildBossInfoRsp::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildBossGetGuildBossInfoRsp::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildBossGetGuildBossInfoRsp::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildBossGetGuildBossInfoRsp::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TGuildBossGetGuildBossInfoRsp::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossGetGuildBossInfoRsp.RefreshTime)
  return refreshtime_;
}
inline void TGuildBossGetGuildBossInfoRsp::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossGetGuildBossInfoRsp.RefreshTime)
}

// repeated .pb.TGuildBossSingle BossArr = 4;
inline int TGuildBossGetGuildBossInfoRsp::bossarr_size() const {
  return bossarr_.size();
}
inline void TGuildBossGetGuildBossInfoRsp::clear_bossarr() {
  bossarr_.Clear();
}
inline const ::pb::TGuildBossSingle& TGuildBossGetGuildBossInfoRsp::bossarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossGetGuildBossInfoRsp.BossArr)
  return bossarr_.Get(index);
}
inline ::pb::TGuildBossSingle* TGuildBossGetGuildBossInfoRsp::mutable_bossarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildBossGetGuildBossInfoRsp.BossArr)
  return bossarr_.Mutable(index);
}
inline ::pb::TGuildBossSingle* TGuildBossGetGuildBossInfoRsp::add_bossarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildBossGetGuildBossInfoRsp.BossArr)
  return bossarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossSingle >&
TGuildBossGetGuildBossInfoRsp::bossarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildBossGetGuildBossInfoRsp.BossArr)
  return bossarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossSingle >*
TGuildBossGetGuildBossInfoRsp::mutable_bossarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildBossGetGuildBossInfoRsp.BossArr)
  return &bossarr_;
}

// repeated .pb.TGuildBossUserRecord UserRecordArr = 5;
inline int TGuildBossGetGuildBossInfoRsp::userrecordarr_size() const {
  return userrecordarr_.size();
}
inline void TGuildBossGetGuildBossInfoRsp::clear_userrecordarr() {
  userrecordarr_.Clear();
}
inline const ::pb::TGuildBossUserRecord& TGuildBossGetGuildBossInfoRsp::userrecordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossGetGuildBossInfoRsp.UserRecordArr)
  return userrecordarr_.Get(index);
}
inline ::pb::TGuildBossUserRecord* TGuildBossGetGuildBossInfoRsp::mutable_userrecordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildBossGetGuildBossInfoRsp.UserRecordArr)
  return userrecordarr_.Mutable(index);
}
inline ::pb::TGuildBossUserRecord* TGuildBossGetGuildBossInfoRsp::add_userrecordarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildBossGetGuildBossInfoRsp.UserRecordArr)
  return userrecordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUserRecord >&
TGuildBossGetGuildBossInfoRsp::userrecordarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildBossGetGuildBossInfoRsp.UserRecordArr)
  return userrecordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUserRecord >*
TGuildBossGetGuildBossInfoRsp::mutable_userrecordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildBossGetGuildBossInfoRsp.UserRecordArr)
  return &userrecordarr_;
}

// optional uint64 TotalDamage = 6;
inline bool TGuildBossGetGuildBossInfoRsp::has_totaldamage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildBossGetGuildBossInfoRsp::set_has_totaldamage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildBossGetGuildBossInfoRsp::clear_has_totaldamage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildBossGetGuildBossInfoRsp::clear_totaldamage() {
  totaldamage_ = GOOGLE_ULONGLONG(0);
  clear_has_totaldamage();
}
inline ::google::protobuf::uint64 TGuildBossGetGuildBossInfoRsp::totaldamage() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossGetGuildBossInfoRsp.TotalDamage)
  return totaldamage_;
}
inline void TGuildBossGetGuildBossInfoRsp::set_totaldamage(::google::protobuf::uint64 value) {
  set_has_totaldamage();
  totaldamage_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossGetGuildBossInfoRsp.TotalDamage)
}

// repeated uint32 DamageRewardArr = 7;
inline int TGuildBossGetGuildBossInfoRsp::damagerewardarr_size() const {
  return damagerewardarr_.size();
}
inline void TGuildBossGetGuildBossInfoRsp::clear_damagerewardarr() {
  damagerewardarr_.Clear();
}
inline ::google::protobuf::uint32 TGuildBossGetGuildBossInfoRsp::damagerewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossGetGuildBossInfoRsp.DamageRewardArr)
  return damagerewardarr_.Get(index);
}
inline void TGuildBossGetGuildBossInfoRsp::set_damagerewardarr(int index, ::google::protobuf::uint32 value) {
  damagerewardarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGuildBossGetGuildBossInfoRsp.DamageRewardArr)
}
inline void TGuildBossGetGuildBossInfoRsp::add_damagerewardarr(::google::protobuf::uint32 value) {
  damagerewardarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGuildBossGetGuildBossInfoRsp.DamageRewardArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGuildBossGetGuildBossInfoRsp::damagerewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildBossGetGuildBossInfoRsp.DamageRewardArr)
  return damagerewardarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGuildBossGetGuildBossInfoRsp::mutable_damagerewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildBossGetGuildBossInfoRsp.DamageRewardArr)
  return &damagerewardarr_;
}

// -------------------------------------------------------------------

// TGuildBossGetGuildBossSimpleInfoRsp

// optional uint32 RemainerRewardNum = 1;
inline bool TGuildBossGetGuildBossSimpleInfoRsp::has_remainerrewardnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildBossGetGuildBossSimpleInfoRsp::set_has_remainerrewardnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildBossGetGuildBossSimpleInfoRsp::clear_has_remainerrewardnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildBossGetGuildBossSimpleInfoRsp::clear_remainerrewardnum() {
  remainerrewardnum_ = 0u;
  clear_has_remainerrewardnum();
}
inline ::google::protobuf::uint32 TGuildBossGetGuildBossSimpleInfoRsp::remainerrewardnum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossGetGuildBossSimpleInfoRsp.RemainerRewardNum)
  return remainerrewardnum_;
}
inline void TGuildBossGetGuildBossSimpleInfoRsp::set_remainerrewardnum(::google::protobuf::uint32 value) {
  set_has_remainerrewardnum();
  remainerrewardnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossGetGuildBossSimpleInfoRsp.RemainerRewardNum)
}

// optional uint32 RemainerAtkNum = 2;
inline bool TGuildBossGetGuildBossSimpleInfoRsp::has_remaineratknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildBossGetGuildBossSimpleInfoRsp::set_has_remaineratknum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildBossGetGuildBossSimpleInfoRsp::clear_has_remaineratknum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildBossGetGuildBossSimpleInfoRsp::clear_remaineratknum() {
  remaineratknum_ = 0u;
  clear_has_remaineratknum();
}
inline ::google::protobuf::uint32 TGuildBossGetGuildBossSimpleInfoRsp::remaineratknum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossGetGuildBossSimpleInfoRsp.RemainerAtkNum)
  return remaineratknum_;
}
inline void TGuildBossGetGuildBossSimpleInfoRsp::set_remaineratknum(::google::protobuf::uint32 value) {
  set_has_remaineratknum();
  remaineratknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossGetGuildBossSimpleInfoRsp.RemainerAtkNum)
}

// optional uint32 BossId = 3;
inline bool TGuildBossGetGuildBossSimpleInfoRsp::has_bossid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildBossGetGuildBossSimpleInfoRsp::set_has_bossid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildBossGetGuildBossSimpleInfoRsp::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildBossGetGuildBossSimpleInfoRsp::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TGuildBossGetGuildBossSimpleInfoRsp::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossGetGuildBossSimpleInfoRsp.BossId)
  return bossid_;
}
inline void TGuildBossGetGuildBossSimpleInfoRsp::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossGetGuildBossSimpleInfoRsp.BossId)
}

// -------------------------------------------------------------------

// TGuildBossStartBattleReq

// optional uint32 BossId = 1;
inline bool TGuildBossStartBattleReq::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildBossStartBattleReq::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildBossStartBattleReq::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildBossStartBattleReq::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TGuildBossStartBattleReq::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossStartBattleReq.BossId)
  return bossid_;
}
inline void TGuildBossStartBattleReq::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossStartBattleReq.BossId)
}

// optional uint32 BossLv = 2;
inline bool TGuildBossStartBattleReq::has_bosslv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildBossStartBattleReq::set_has_bosslv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildBossStartBattleReq::clear_has_bosslv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildBossStartBattleReq::clear_bosslv() {
  bosslv_ = 0u;
  clear_has_bosslv();
}
inline ::google::protobuf::uint32 TGuildBossStartBattleReq::bosslv() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossStartBattleReq.BossLv)
  return bosslv_;
}
inline void TGuildBossStartBattleReq::set_bosslv(::google::protobuf::uint32 value) {
  set_has_bosslv();
  bosslv_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossStartBattleReq.BossLv)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 3;
inline bool TGuildBossStartBattleReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildBossStartBattleReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildBossStartBattleReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildBossStartBattleReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TGuildBossStartBattleReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossStartBattleReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TGuildBossStartBattleReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TGuildBossStartBattleReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TGuildBossStartBattleReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TGuildBossStartBattleReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildBossStartBattleReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TGuildBossStartBattleRsp

// repeated .pb.TGuildBossUnit UnitArr = 1;
inline int TGuildBossStartBattleRsp::unitarr_size() const {
  return unitarr_.size();
}
inline void TGuildBossStartBattleRsp::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TGuildBossUnit& TGuildBossStartBattleRsp::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossStartBattleRsp.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TGuildBossUnit* TGuildBossStartBattleRsp::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildBossStartBattleRsp.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TGuildBossUnit* TGuildBossStartBattleRsp::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildBossStartBattleRsp.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUnit >&
TGuildBossStartBattleRsp::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildBossStartBattleRsp.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUnit >*
TGuildBossStartBattleRsp::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildBossStartBattleRsp.UnitArr)
  return &unitarr_;
}

// optional uint64 UpdateTime = 2;
inline bool TGuildBossStartBattleRsp::has_updatetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildBossStartBattleRsp::set_has_updatetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildBossStartBattleRsp::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildBossStartBattleRsp::clear_updatetime() {
  updatetime_ = GOOGLE_ULONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::uint64 TGuildBossStartBattleRsp::updatetime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossStartBattleRsp.UpdateTime)
  return updatetime_;
}
inline void TGuildBossStartBattleRsp::set_updatetime(::google::protobuf::uint64 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossStartBattleRsp.UpdateTime)
}

// optional .pb.TBattleArgs BattleArgs = 3;
inline bool TGuildBossStartBattleRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildBossStartBattleRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildBossStartBattleRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildBossStartBattleRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TGuildBossStartBattleRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossStartBattleRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TGuildBossStartBattleRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TGuildBossStartBattleRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TGuildBossStartBattleRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TGuildBossStartBattleRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildBossStartBattleRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TGuildBossReportBattleReq

// optional uint32 BossId = 1;
inline bool TGuildBossReportBattleReq::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildBossReportBattleReq::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildBossReportBattleReq::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildBossReportBattleReq::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TGuildBossReportBattleReq::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossReportBattleReq.BossId)
  return bossid_;
}
inline void TGuildBossReportBattleReq::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossReportBattleReq.BossId)
}

// optional uint32 BossLv = 2;
inline bool TGuildBossReportBattleReq::has_bosslv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildBossReportBattleReq::set_has_bosslv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildBossReportBattleReq::clear_has_bosslv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildBossReportBattleReq::clear_bosslv() {
  bosslv_ = 0u;
  clear_has_bosslv();
}
inline ::google::protobuf::uint32 TGuildBossReportBattleReq::bosslv() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossReportBattleReq.BossLv)
  return bosslv_;
}
inline void TGuildBossReportBattleReq::set_bosslv(::google::protobuf::uint32 value) {
  set_has_bosslv();
  bosslv_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossReportBattleReq.BossLv)
}

// optional .pb.TBattleResult BattleRet = 3;
inline bool TGuildBossReportBattleReq::has_battleret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildBossReportBattleReq::set_has_battleret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildBossReportBattleReq::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildBossReportBattleReq::clear_battleret() {
  if (battleret_ != NULL) battleret_->::pb::TBattleResult::Clear();
  clear_has_battleret();
}
inline const ::pb::TBattleResult& TGuildBossReportBattleReq::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossReportBattleReq.BattleRet)
  return battleret_ != NULL ? *battleret_ : *default_instance_->battleret_;
}
inline ::pb::TBattleResult* TGuildBossReportBattleReq::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == NULL) battleret_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TGuildBossReportBattleReq.BattleRet)
  return battleret_;
}
inline ::pb::TBattleResult* TGuildBossReportBattleReq::release_battleret() {
  clear_has_battleret();
  ::pb::TBattleResult* temp = battleret_;
  battleret_ = NULL;
  return temp;
}
inline void TGuildBossReportBattleReq::set_allocated_battleret(::pb::TBattleResult* battleret) {
  delete battleret_;
  battleret_ = battleret;
  if (battleret) {
    set_has_battleret();
  } else {
    clear_has_battleret();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildBossReportBattleReq.BattleRet)
}

// optional bytes BattleResultBytes = 4;
inline bool TGuildBossReportBattleReq::has_battleresultbytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildBossReportBattleReq::set_has_battleresultbytes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildBossReportBattleReq::clear_has_battleresultbytes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildBossReportBattleReq::clear_battleresultbytes() {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_->clear();
  }
  clear_has_battleresultbytes();
}
inline const ::std::string& TGuildBossReportBattleReq::battleresultbytes() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossReportBattleReq.BattleResultBytes)
  return *battleresultbytes_;
}
inline void TGuildBossReportBattleReq::set_battleresultbytes(const ::std::string& value) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildBossReportBattleReq.BattleResultBytes)
}
inline void TGuildBossReportBattleReq::set_battleresultbytes(const char* value) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildBossReportBattleReq.BattleResultBytes)
}
inline void TGuildBossReportBattleReq::set_battleresultbytes(const void* value, size_t size) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildBossReportBattleReq.BattleResultBytes)
}
inline ::std::string* TGuildBossReportBattleReq::mutable_battleresultbytes() {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildBossReportBattleReq.BattleResultBytes)
  return battleresultbytes_;
}
inline ::std::string* TGuildBossReportBattleReq::release_battleresultbytes() {
  clear_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleresultbytes_;
    battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildBossReportBattleReq::set_allocated_battleresultbytes(::std::string* battleresultbytes) {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresultbytes_;
  }
  if (battleresultbytes) {
    set_has_battleresultbytes();
    battleresultbytes_ = battleresultbytes;
  } else {
    clear_has_battleresultbytes();
    battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildBossReportBattleReq.BattleResultBytes)
}

// -------------------------------------------------------------------

// TGuildBossReceiveRewardReq

// optional uint32 BossId = 1;
inline bool TGuildBossReceiveRewardReq::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildBossReceiveRewardReq::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildBossReceiveRewardReq::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildBossReceiveRewardReq::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TGuildBossReceiveRewardReq::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossReceiveRewardReq.BossId)
  return bossid_;
}
inline void TGuildBossReceiveRewardReq::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossReceiveRewardReq.BossId)
}

// optional uint32 BossLv = 2;
inline bool TGuildBossReceiveRewardReq::has_bosslv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildBossReceiveRewardReq::set_has_bosslv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildBossReceiveRewardReq::clear_has_bosslv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildBossReceiveRewardReq::clear_bosslv() {
  bosslv_ = 0u;
  clear_has_bosslv();
}
inline ::google::protobuf::uint32 TGuildBossReceiveRewardReq::bosslv() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossReceiveRewardReq.BossLv)
  return bosslv_;
}
inline void TGuildBossReceiveRewardReq::set_bosslv(::google::protobuf::uint32 value) {
  set_has_bosslv();
  bosslv_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossReceiveRewardReq.BossLv)
}

// -------------------------------------------------------------------

// TGuildBossReceiveRewardRsp

// optional uint32 RewardId = 1;
inline bool TGuildBossReceiveRewardRsp::has_rewardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildBossReceiveRewardRsp::set_has_rewardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildBossReceiveRewardRsp::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildBossReceiveRewardRsp::clear_rewardid() {
  rewardid_ = 0u;
  clear_has_rewardid();
}
inline ::google::protobuf::uint32 TGuildBossReceiveRewardRsp::rewardid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossReceiveRewardRsp.RewardId)
  return rewardid_;
}
inline void TGuildBossReceiveRewardRsp::set_rewardid(::google::protobuf::uint32 value) {
  set_has_rewardid();
  rewardid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossReceiveRewardRsp.RewardId)
}

// -------------------------------------------------------------------

// TGuildBossReceiveDamageRewardReq

// optional uint32 RewardId = 1;
inline bool TGuildBossReceiveDamageRewardReq::has_rewardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildBossReceiveDamageRewardReq::set_has_rewardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildBossReceiveDamageRewardReq::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildBossReceiveDamageRewardReq::clear_rewardid() {
  rewardid_ = 0u;
  clear_has_rewardid();
}
inline ::google::protobuf::uint32 TGuildBossReceiveDamageRewardReq::rewardid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossReceiveDamageRewardReq.RewardId)
  return rewardid_;
}
inline void TGuildBossReceiveDamageRewardReq::set_rewardid(::google::protobuf::uint32 value) {
  set_has_rewardid();
  rewardid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossReceiveDamageRewardReq.RewardId)
}

// -------------------------------------------------------------------

// TGuildBossRankInfo

// optional uint64 GuildId = 1;
inline bool TGuildBossRankInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildBossRankInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildBossRankInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildBossRankInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TGuildBossRankInfo::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossRankInfo.GuildId)
  return guildid_;
}
inline void TGuildBossRankInfo::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossRankInfo.GuildId)
}

// optional string GuildName = 2;
inline bool TGuildBossRankInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildBossRankInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildBossRankInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildBossRankInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& TGuildBossRankInfo::guildname() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossRankInfo.GuildName)
  return *guildname_;
}
inline void TGuildBossRankInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildBossRankInfo.GuildName)
}
inline void TGuildBossRankInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildBossRankInfo.GuildName)
}
inline void TGuildBossRankInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildBossRankInfo.GuildName)
}
inline ::std::string* TGuildBossRankInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildBossRankInfo.GuildName)
  return guildname_;
}
inline ::std::string* TGuildBossRankInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildBossRankInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildBossRankInfo.GuildName)
}

// optional string BannerName = 3;
inline bool TGuildBossRankInfo::has_bannername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildBossRankInfo::set_has_bannername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildBossRankInfo::clear_has_bannername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildBossRankInfo::clear_bannername() {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_->clear();
  }
  clear_has_bannername();
}
inline const ::std::string& TGuildBossRankInfo::bannername() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossRankInfo.BannerName)
  return *bannername_;
}
inline void TGuildBossRankInfo::set_bannername(const ::std::string& value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildBossRankInfo.BannerName)
}
inline void TGuildBossRankInfo::set_bannername(const char* value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildBossRankInfo.BannerName)
}
inline void TGuildBossRankInfo::set_bannername(const char* value, size_t size) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildBossRankInfo.BannerName)
}
inline ::std::string* TGuildBossRankInfo::mutable_bannername() {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildBossRankInfo.BannerName)
  return bannername_;
}
inline ::std::string* TGuildBossRankInfo::release_bannername() {
  clear_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bannername_;
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildBossRankInfo::set_allocated_bannername(::std::string* bannername) {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (bannername) {
    set_has_bannername();
    bannername_ = bannername;
  } else {
    clear_has_bannername();
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildBossRankInfo.BannerName)
}

// optional uint32 BannerBase = 4;
inline bool TGuildBossRankInfo::has_bannerbase() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildBossRankInfo::set_has_bannerbase() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildBossRankInfo::clear_has_bannerbase() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildBossRankInfo::clear_bannerbase() {
  bannerbase_ = 0u;
  clear_has_bannerbase();
}
inline ::google::protobuf::uint32 TGuildBossRankInfo::bannerbase() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossRankInfo.BannerBase)
  return bannerbase_;
}
inline void TGuildBossRankInfo::set_bannerbase(::google::protobuf::uint32 value) {
  set_has_bannerbase();
  bannerbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossRankInfo.BannerBase)
}

// optional uint64 FightForce = 5;
inline bool TGuildBossRankInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildBossRankInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildBossRankInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildBossRankInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TGuildBossRankInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossRankInfo.FightForce)
  return fightforce_;
}
inline void TGuildBossRankInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossRankInfo.FightForce)
}

// optional uint32 BossLv = 6;
inline bool TGuildBossRankInfo::has_bosslv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildBossRankInfo::set_has_bosslv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildBossRankInfo::clear_has_bosslv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildBossRankInfo::clear_bosslv() {
  bosslv_ = 0u;
  clear_has_bosslv();
}
inline ::google::protobuf::uint32 TGuildBossRankInfo::bosslv() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossRankInfo.BossLv)
  return bosslv_;
}
inline void TGuildBossRankInfo::set_bosslv(::google::protobuf::uint32 value) {
  set_has_bosslv();
  bosslv_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossRankInfo.BossLv)
}

// optional uint32 BossId = 7;
inline bool TGuildBossRankInfo::has_bossid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGuildBossRankInfo::set_has_bossid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGuildBossRankInfo::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGuildBossRankInfo::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TGuildBossRankInfo::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossRankInfo.BossId)
  return bossid_;
}
inline void TGuildBossRankInfo::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossRankInfo.BossId)
}

// optional uint64 BossTime = 8;
inline bool TGuildBossRankInfo::has_bosstime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGuildBossRankInfo::set_has_bosstime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGuildBossRankInfo::clear_has_bosstime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGuildBossRankInfo::clear_bosstime() {
  bosstime_ = GOOGLE_ULONGLONG(0);
  clear_has_bosstime();
}
inline ::google::protobuf::uint64 TGuildBossRankInfo::bosstime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossRankInfo.BossTime)
  return bosstime_;
}
inline void TGuildBossRankInfo::set_bosstime(::google::protobuf::uint64 value) {
  set_has_bosstime();
  bosstime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossRankInfo.BossTime)
}

// -------------------------------------------------------------------

// TGuildBossGetGuildBossRankInfoReq

// optional uint32 Offset = 1;
inline bool TGuildBossGetGuildBossRankInfoReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildBossGetGuildBossRankInfoReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildBossGetGuildBossRankInfoReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildBossGetGuildBossRankInfoReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TGuildBossGetGuildBossRankInfoReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossGetGuildBossRankInfoReq.Offset)
  return offset_;
}
inline void TGuildBossGetGuildBossRankInfoReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossGetGuildBossRankInfoReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TGuildBossGetGuildBossRankInfoReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildBossGetGuildBossRankInfoReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildBossGetGuildBossRankInfoReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildBossGetGuildBossRankInfoReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TGuildBossGetGuildBossRankInfoReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossGetGuildBossRankInfoReq.Limit)
  return limit_;
}
inline void TGuildBossGetGuildBossRankInfoReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossGetGuildBossRankInfoReq.Limit)
}

// -------------------------------------------------------------------

// TGuildBossGetGuildBossRankInfoRsp

// optional int32 MyRank = 1;
inline bool TGuildBossGetGuildBossRankInfoRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildBossGetGuildBossRankInfoRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildBossGetGuildBossRankInfoRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildBossGetGuildBossRankInfoRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TGuildBossGetGuildBossRankInfoRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossGetGuildBossRankInfoRsp.MyRank)
  return myrank_;
}
inline void TGuildBossGetGuildBossRankInfoRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossGetGuildBossRankInfoRsp.MyRank)
}

// repeated .pb.TGuildBossRankInfo RankInfoArr = 2;
inline int TGuildBossGetGuildBossRankInfoRsp::rankinfoarr_size() const {
  return rankinfoarr_.size();
}
inline void TGuildBossGetGuildBossRankInfoRsp::clear_rankinfoarr() {
  rankinfoarr_.Clear();
}
inline const ::pb::TGuildBossRankInfo& TGuildBossGetGuildBossRankInfoRsp::rankinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossGetGuildBossRankInfoRsp.RankInfoArr)
  return rankinfoarr_.Get(index);
}
inline ::pb::TGuildBossRankInfo* TGuildBossGetGuildBossRankInfoRsp::mutable_rankinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildBossGetGuildBossRankInfoRsp.RankInfoArr)
  return rankinfoarr_.Mutable(index);
}
inline ::pb::TGuildBossRankInfo* TGuildBossGetGuildBossRankInfoRsp::add_rankinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildBossGetGuildBossRankInfoRsp.RankInfoArr)
  return rankinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossRankInfo >&
TGuildBossGetGuildBossRankInfoRsp::rankinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildBossGetGuildBossRankInfoRsp.RankInfoArr)
  return rankinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossRankInfo >*
TGuildBossGetGuildBossRankInfoRsp::mutable_rankinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildBossGetGuildBossRankInfoRsp.RankInfoArr)
  return &rankinfoarr_;
}

// -------------------------------------------------------------------

// TGuildBossInfoNotify

// optional uint32 IsReset = 1;
inline bool TGuildBossInfoNotify::has_isreset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildBossInfoNotify::set_has_isreset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildBossInfoNotify::clear_has_isreset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildBossInfoNotify::clear_isreset() {
  isreset_ = 0u;
  clear_has_isreset();
}
inline ::google::protobuf::uint32 TGuildBossInfoNotify::isreset() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossInfoNotify.IsReset)
  return isreset_;
}
inline void TGuildBossInfoNotify::set_isreset(::google::protobuf::uint32 value) {
  set_has_isreset();
  isreset_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossInfoNotify.IsReset)
}

// optional uint32 BossLv = 2;
inline bool TGuildBossInfoNotify::has_bosslv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildBossInfoNotify::set_has_bosslv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildBossInfoNotify::clear_has_bosslv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildBossInfoNotify::clear_bosslv() {
  bosslv_ = 0u;
  clear_has_bosslv();
}
inline ::google::protobuf::uint32 TGuildBossInfoNotify::bosslv() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossInfoNotify.BossLv)
  return bosslv_;
}
inline void TGuildBossInfoNotify::set_bosslv(::google::protobuf::uint32 value) {
  set_has_bosslv();
  bosslv_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossInfoNotify.BossLv)
}

// optional uint64 RefreshTime = 3;
inline bool TGuildBossInfoNotify::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildBossInfoNotify::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildBossInfoNotify::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildBossInfoNotify::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TGuildBossInfoNotify::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossInfoNotify.RefreshTime)
  return refreshtime_;
}
inline void TGuildBossInfoNotify::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossInfoNotify.RefreshTime)
}

// repeated .pb.TGuildBossSingle BossArr = 4;
inline int TGuildBossInfoNotify::bossarr_size() const {
  return bossarr_.size();
}
inline void TGuildBossInfoNotify::clear_bossarr() {
  bossarr_.Clear();
}
inline const ::pb::TGuildBossSingle& TGuildBossInfoNotify::bossarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossInfoNotify.BossArr)
  return bossarr_.Get(index);
}
inline ::pb::TGuildBossSingle* TGuildBossInfoNotify::mutable_bossarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildBossInfoNotify.BossArr)
  return bossarr_.Mutable(index);
}
inline ::pb::TGuildBossSingle* TGuildBossInfoNotify::add_bossarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildBossInfoNotify.BossArr)
  return bossarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossSingle >&
TGuildBossInfoNotify::bossarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildBossInfoNotify.BossArr)
  return bossarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossSingle >*
TGuildBossInfoNotify::mutable_bossarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildBossInfoNotify.BossArr)
  return &bossarr_;
}

// repeated .pb.TGuildBossUserRecord UserRecordArr = 5;
inline int TGuildBossInfoNotify::userrecordarr_size() const {
  return userrecordarr_.size();
}
inline void TGuildBossInfoNotify::clear_userrecordarr() {
  userrecordarr_.Clear();
}
inline const ::pb::TGuildBossUserRecord& TGuildBossInfoNotify::userrecordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossInfoNotify.UserRecordArr)
  return userrecordarr_.Get(index);
}
inline ::pb::TGuildBossUserRecord* TGuildBossInfoNotify::mutable_userrecordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildBossInfoNotify.UserRecordArr)
  return userrecordarr_.Mutable(index);
}
inline ::pb::TGuildBossUserRecord* TGuildBossInfoNotify::add_userrecordarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildBossInfoNotify.UserRecordArr)
  return userrecordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUserRecord >&
TGuildBossInfoNotify::userrecordarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildBossInfoNotify.UserRecordArr)
  return userrecordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildBossUserRecord >*
TGuildBossInfoNotify::mutable_userrecordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildBossInfoNotify.UserRecordArr)
  return &userrecordarr_;
}

// optional uint64 UpdateTime = 6;
inline bool TGuildBossInfoNotify::has_updatetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildBossInfoNotify::set_has_updatetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildBossInfoNotify::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildBossInfoNotify::clear_updatetime() {
  updatetime_ = GOOGLE_ULONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::uint64 TGuildBossInfoNotify::updatetime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildBossInfoNotify.UpdateTime)
  return updatetime_;
}
inline void TGuildBossInfoNotify::set_updatetime(::google::protobuf::uint64 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildBossInfoNotify.UpdateTime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fGuildBoss_2eproto__INCLUDED
