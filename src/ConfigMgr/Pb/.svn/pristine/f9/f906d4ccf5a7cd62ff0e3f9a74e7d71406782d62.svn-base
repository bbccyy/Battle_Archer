// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SceneConfGuildWar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/SceneConfGuildWar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* SceneConfGuildWar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneConfGuildWar_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fSceneConfGuildWar_2eproto() {
  protobuf_AddDesc_module_2fSceneConfGuildWar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/SceneConfGuildWar.proto");
  GOOGLE_CHECK(file != NULL);
  SceneConfGuildWar_descriptor_ = file->message_type(0);
  static const int SceneConfGuildWar_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGuildWar, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGuildWar, confname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGuildWar, artscenepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGuildWar, chunkinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGuildWar, cameramovearea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGuildWar, rectareaarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGuildWar, customareaarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGuildWar, animassetarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGuildWar, staticassetarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGuildWar, effectassetarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGuildWar, pointelementarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGuildWar, featureentrancearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGuildWar, obstaclearr_),
  };
  SceneConfGuildWar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneConfGuildWar_descriptor_,
      SceneConfGuildWar::default_instance_,
      SceneConfGuildWar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGuildWar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGuildWar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneConfGuildWar));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fSceneConfGuildWar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneConfGuildWar_descriptor_, &SceneConfGuildWar::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fSceneConfGuildWar_2eproto() {
  delete SceneConfGuildWar::default_instance_;
  delete SceneConfGuildWar_reflection_;
}

void protobuf_AddDesc_module_2fSceneConfGuildWar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::pb::protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036module/SceneConfGuildWar.proto\022\002pb\032\021mo"
    "dule/Util.proto\032\030module/SceneConf2d.prot"
    "o\"\330\003\n\021SceneConfGuildWar\022\n\n\002Id\030\001 \002(\005\022\020\n\010C"
    "onfName\030\002 \002(\t\022\024\n\014ArtScenePath\030\003 \002(\t\022%\n\tC"
    "hunkInfo\030\004 \002(\0132\022.pb.SceneChunkInfo\022\"\n\016Ca"
    "meraMoveArea\030\005 \002(\0132\n.pb.PbRect\022\"\n\013RectAr"
    "eaArr\030\006 \003(\0132\r.pb.RectArea2\022&\n\rCustomArea"
    "Arr\030\007 \003(\0132\017.pb.CustomArea2\022$\n\014AnimAssetA"
    "rr\030\010 \003(\0132\016.pb.AnimAsset2\022(\n\016StaticAssetA"
    "rr\030\t \003(\0132\020.pb.StaticAsset2\022(\n\016EffectAsse"
    "tArr\030\n \003(\0132\020.pb.EffectAsset2\022*\n\017PointEle"
    "mentArr\030\013 \003(\0132\021.pb.PointElement2\022/\n\022Feat"
    "ureEntranceArr\030\014 \003(\0132\023.pb.FeatureEntranc"
    "e\022!\n\013ObstacleArr\030\r \003(\0132\014.pb.Obstacle", 556);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/SceneConfGuildWar.proto", &protobuf_RegisterTypes);
  SceneConfGuildWar::default_instance_ = new SceneConfGuildWar();
  SceneConfGuildWar::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fSceneConfGuildWar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fSceneConfGuildWar_2eproto {
  StaticDescriptorInitializer_module_2fSceneConfGuildWar_2eproto() {
    protobuf_AddDesc_module_2fSceneConfGuildWar_2eproto();
  }
} static_descriptor_initializer_module_2fSceneConfGuildWar_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SceneConfGuildWar::kIdFieldNumber;
const int SceneConfGuildWar::kConfNameFieldNumber;
const int SceneConfGuildWar::kArtScenePathFieldNumber;
const int SceneConfGuildWar::kChunkInfoFieldNumber;
const int SceneConfGuildWar::kCameraMoveAreaFieldNumber;
const int SceneConfGuildWar::kRectAreaArrFieldNumber;
const int SceneConfGuildWar::kCustomAreaArrFieldNumber;
const int SceneConfGuildWar::kAnimAssetArrFieldNumber;
const int SceneConfGuildWar::kStaticAssetArrFieldNumber;
const int SceneConfGuildWar::kEffectAssetArrFieldNumber;
const int SceneConfGuildWar::kPointElementArrFieldNumber;
const int SceneConfGuildWar::kFeatureEntranceArrFieldNumber;
const int SceneConfGuildWar::kObstacleArrFieldNumber;
#endif  // !_MSC_VER

SceneConfGuildWar::SceneConfGuildWar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SceneConfGuildWar)
}

void SceneConfGuildWar::InitAsDefaultInstance() {
  chunkinfo_ = const_cast< ::pb::SceneChunkInfo*>(&::pb::SceneChunkInfo::default_instance());
  cameramovearea_ = const_cast< ::pb::PbRect*>(&::pb::PbRect::default_instance());
}

SceneConfGuildWar::SceneConfGuildWar(const SceneConfGuildWar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SceneConfGuildWar)
}

void SceneConfGuildWar::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artscenepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunkinfo_ = NULL;
  cameramovearea_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneConfGuildWar::~SceneConfGuildWar() {
  // @@protoc_insertion_point(destructor:pb.SceneConfGuildWar)
  SharedDtor();
}

void SceneConfGuildWar::SharedDtor() {
  if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete confname_;
  }
  if (artscenepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete artscenepath_;
  }
  if (this != default_instance_) {
    delete chunkinfo_;
    delete cameramovearea_;
  }
}

void SceneConfGuildWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneConfGuildWar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneConfGuildWar_descriptor_;
}

const SceneConfGuildWar& SceneConfGuildWar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConfGuildWar_2eproto();
  return *default_instance_;
}

SceneConfGuildWar* SceneConfGuildWar::default_instance_ = NULL;

SceneConfGuildWar* SceneConfGuildWar::New() const {
  return new SceneConfGuildWar;
}

void SceneConfGuildWar::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    id_ = 0;
    if (has_confname()) {
      if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        confname_->clear();
      }
    }
    if (has_artscenepath()) {
      if (artscenepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        artscenepath_->clear();
      }
    }
    if (has_chunkinfo()) {
      if (chunkinfo_ != NULL) chunkinfo_->::pb::SceneChunkInfo::Clear();
    }
    if (has_cameramovearea()) {
      if (cameramovearea_ != NULL) cameramovearea_->::pb::PbRect::Clear();
    }
  }
  rectareaarr_.Clear();
  customareaarr_.Clear();
  animassetarr_.Clear();
  staticassetarr_.Clear();
  effectassetarr_.Clear();
  pointelementarr_.Clear();
  featureentrancearr_.Clear();
  obstaclearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneConfGuildWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SceneConfGuildWar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ConfName;
        break;
      }

      // required string ConfName = 2;
      case 2: {
        if (tag == 18) {
         parse_ConfName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confname().data(), this->confname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "confname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArtScenePath;
        break;
      }

      // required string ArtScenePath = 3;
      case 3: {
        if (tag == 26) {
         parse_ArtScenePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artscenepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artscenepath().data(), this->artscenepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artscenepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ChunkInfo;
        break;
      }

      // required .pb.SceneChunkInfo ChunkInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_ChunkInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chunkinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_CameraMoveArea;
        break;
      }

      // required .pb.PbRect CameraMoveArea = 5;
      case 5: {
        if (tag == 42) {
         parse_CameraMoveArea:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameramovearea()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RectAreaArr;
        break;
      }

      // repeated .pb.RectArea2 RectAreaArr = 6;
      case 6: {
        if (tag == 50) {
         parse_RectAreaArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rectareaarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RectAreaArr;
        if (input->ExpectTag(58)) goto parse_CustomAreaArr;
        break;
      }

      // repeated .pb.CustomArea2 CustomAreaArr = 7;
      case 7: {
        if (tag == 58) {
         parse_CustomAreaArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customareaarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_CustomAreaArr;
        if (input->ExpectTag(66)) goto parse_AnimAssetArr;
        break;
      }

      // repeated .pb.AnimAsset2 AnimAssetArr = 8;
      case 8: {
        if (tag == 66) {
         parse_AnimAssetArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animassetarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_AnimAssetArr;
        if (input->ExpectTag(74)) goto parse_StaticAssetArr;
        break;
      }

      // repeated .pb.StaticAsset2 StaticAssetArr = 9;
      case 9: {
        if (tag == 74) {
         parse_StaticAssetArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_staticassetarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_StaticAssetArr;
        if (input->ExpectTag(82)) goto parse_EffectAssetArr;
        break;
      }

      // repeated .pb.EffectAsset2 EffectAssetArr = 10;
      case 10: {
        if (tag == 82) {
         parse_EffectAssetArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effectassetarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_EffectAssetArr;
        if (input->ExpectTag(90)) goto parse_PointElementArr;
        break;
      }

      // repeated .pb.PointElement2 PointElementArr = 11;
      case 11: {
        if (tag == 90) {
         parse_PointElementArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointelementarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_PointElementArr;
        if (input->ExpectTag(98)) goto parse_FeatureEntranceArr;
        break;
      }

      // repeated .pb.FeatureEntrance FeatureEntranceArr = 12;
      case 12: {
        if (tag == 98) {
         parse_FeatureEntranceArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_featureentrancearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_FeatureEntranceArr;
        if (input->ExpectTag(106)) goto parse_ObstacleArr;
        break;
      }

      // repeated .pb.Obstacle ObstacleArr = 13;
      case 13: {
        if (tag == 106) {
         parse_ObstacleArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstaclearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ObstacleArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SceneConfGuildWar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SceneConfGuildWar)
  return false;
#undef DO_
}

void SceneConfGuildWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SceneConfGuildWar)
  // required int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string ConfName = 2;
  if (has_confname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confname().data(), this->confname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->confname(), output);
  }

  // required string ArtScenePath = 3;
  if (has_artscenepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artscenepath().data(), this->artscenepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artscenepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->artscenepath(), output);
  }

  // required .pb.SceneChunkInfo ChunkInfo = 4;
  if (has_chunkinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->chunkinfo(), output);
  }

  // required .pb.PbRect CameraMoveArea = 5;
  if (has_cameramovearea()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cameramovearea(), output);
  }

  // repeated .pb.RectArea2 RectAreaArr = 6;
  for (int i = 0; i < this->rectareaarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rectareaarr(i), output);
  }

  // repeated .pb.CustomArea2 CustomAreaArr = 7;
  for (int i = 0; i < this->customareaarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->customareaarr(i), output);
  }

  // repeated .pb.AnimAsset2 AnimAssetArr = 8;
  for (int i = 0; i < this->animassetarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->animassetarr(i), output);
  }

  // repeated .pb.StaticAsset2 StaticAssetArr = 9;
  for (int i = 0; i < this->staticassetarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->staticassetarr(i), output);
  }

  // repeated .pb.EffectAsset2 EffectAssetArr = 10;
  for (int i = 0; i < this->effectassetarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->effectassetarr(i), output);
  }

  // repeated .pb.PointElement2 PointElementArr = 11;
  for (int i = 0; i < this->pointelementarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->pointelementarr(i), output);
  }

  // repeated .pb.FeatureEntrance FeatureEntranceArr = 12;
  for (int i = 0; i < this->featureentrancearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->featureentrancearr(i), output);
  }

  // repeated .pb.Obstacle ObstacleArr = 13;
  for (int i = 0; i < this->obstaclearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->obstaclearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SceneConfGuildWar)
}

::google::protobuf::uint8* SceneConfGuildWar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SceneConfGuildWar)
  // required int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string ConfName = 2;
  if (has_confname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confname().data(), this->confname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->confname(), target);
  }

  // required string ArtScenePath = 3;
  if (has_artscenepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artscenepath().data(), this->artscenepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artscenepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->artscenepath(), target);
  }

  // required .pb.SceneChunkInfo ChunkInfo = 4;
  if (has_chunkinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->chunkinfo(), target);
  }

  // required .pb.PbRect CameraMoveArea = 5;
  if (has_cameramovearea()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cameramovearea(), target);
  }

  // repeated .pb.RectArea2 RectAreaArr = 6;
  for (int i = 0; i < this->rectareaarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rectareaarr(i), target);
  }

  // repeated .pb.CustomArea2 CustomAreaArr = 7;
  for (int i = 0; i < this->customareaarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->customareaarr(i), target);
  }

  // repeated .pb.AnimAsset2 AnimAssetArr = 8;
  for (int i = 0; i < this->animassetarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->animassetarr(i), target);
  }

  // repeated .pb.StaticAsset2 StaticAssetArr = 9;
  for (int i = 0; i < this->staticassetarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->staticassetarr(i), target);
  }

  // repeated .pb.EffectAsset2 EffectAssetArr = 10;
  for (int i = 0; i < this->effectassetarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->effectassetarr(i), target);
  }

  // repeated .pb.PointElement2 PointElementArr = 11;
  for (int i = 0; i < this->pointelementarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->pointelementarr(i), target);
  }

  // repeated .pb.FeatureEntrance FeatureEntranceArr = 12;
  for (int i = 0; i < this->featureentrancearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->featureentrancearr(i), target);
  }

  // repeated .pb.Obstacle ObstacleArr = 13;
  for (int i = 0; i < this->obstaclearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->obstaclearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SceneConfGuildWar)
  return target;
}

int SceneConfGuildWar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string ConfName = 2;
    if (has_confname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confname());
    }

    // required string ArtScenePath = 3;
    if (has_artscenepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artscenepath());
    }

    // required .pb.SceneChunkInfo ChunkInfo = 4;
    if (has_chunkinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chunkinfo());
    }

    // required .pb.PbRect CameraMoveArea = 5;
    if (has_cameramovearea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameramovearea());
    }

  }
  // repeated .pb.RectArea2 RectAreaArr = 6;
  total_size += 1 * this->rectareaarr_size();
  for (int i = 0; i < this->rectareaarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rectareaarr(i));
  }

  // repeated .pb.CustomArea2 CustomAreaArr = 7;
  total_size += 1 * this->customareaarr_size();
  for (int i = 0; i < this->customareaarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customareaarr(i));
  }

  // repeated .pb.AnimAsset2 AnimAssetArr = 8;
  total_size += 1 * this->animassetarr_size();
  for (int i = 0; i < this->animassetarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animassetarr(i));
  }

  // repeated .pb.StaticAsset2 StaticAssetArr = 9;
  total_size += 1 * this->staticassetarr_size();
  for (int i = 0; i < this->staticassetarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->staticassetarr(i));
  }

  // repeated .pb.EffectAsset2 EffectAssetArr = 10;
  total_size += 1 * this->effectassetarr_size();
  for (int i = 0; i < this->effectassetarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effectassetarr(i));
  }

  // repeated .pb.PointElement2 PointElementArr = 11;
  total_size += 1 * this->pointelementarr_size();
  for (int i = 0; i < this->pointelementarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointelementarr(i));
  }

  // repeated .pb.FeatureEntrance FeatureEntranceArr = 12;
  total_size += 1 * this->featureentrancearr_size();
  for (int i = 0; i < this->featureentrancearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->featureentrancearr(i));
  }

  // repeated .pb.Obstacle ObstacleArr = 13;
  total_size += 1 * this->obstaclearr_size();
  for (int i = 0; i < this->obstaclearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstaclearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneConfGuildWar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneConfGuildWar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneConfGuildWar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneConfGuildWar::MergeFrom(const SceneConfGuildWar& from) {
  GOOGLE_CHECK_NE(&from, this);
  rectareaarr_.MergeFrom(from.rectareaarr_);
  customareaarr_.MergeFrom(from.customareaarr_);
  animassetarr_.MergeFrom(from.animassetarr_);
  staticassetarr_.MergeFrom(from.staticassetarr_);
  effectassetarr_.MergeFrom(from.effectassetarr_);
  pointelementarr_.MergeFrom(from.pointelementarr_);
  featureentrancearr_.MergeFrom(from.featureentrancearr_);
  obstaclearr_.MergeFrom(from.obstaclearr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_confname()) {
      set_confname(from.confname());
    }
    if (from.has_artscenepath()) {
      set_artscenepath(from.artscenepath());
    }
    if (from.has_chunkinfo()) {
      mutable_chunkinfo()->::pb::SceneChunkInfo::MergeFrom(from.chunkinfo());
    }
    if (from.has_cameramovearea()) {
      mutable_cameramovearea()->::pb::PbRect::MergeFrom(from.cameramovearea());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneConfGuildWar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneConfGuildWar::CopyFrom(const SceneConfGuildWar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneConfGuildWar::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_chunkinfo()) {
    if (!this->chunkinfo().IsInitialized()) return false;
  }
  if (has_cameramovearea()) {
    if (!this->cameramovearea().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->rectareaarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customareaarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->animassetarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->staticassetarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->effectassetarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pointelementarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->featureentrancearr())) return false;
  return true;
}

void SceneConfGuildWar::Swap(SceneConfGuildWar* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(confname_, other->confname_);
    std::swap(artscenepath_, other->artscenepath_);
    std::swap(chunkinfo_, other->chunkinfo_);
    std::swap(cameramovearea_, other->cameramovearea_);
    rectareaarr_.Swap(&other->rectareaarr_);
    customareaarr_.Swap(&other->customareaarr_);
    animassetarr_.Swap(&other->animassetarr_);
    staticassetarr_.Swap(&other->staticassetarr_);
    effectassetarr_.Swap(&other->effectassetarr_);
    pointelementarr_.Swap(&other->pointelementarr_);
    featureentrancearr_.Swap(&other->featureentrancearr_);
    obstaclearr_.Swap(&other->obstaclearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneConfGuildWar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneConfGuildWar_descriptor_;
  metadata.reflection = SceneConfGuildWar_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
