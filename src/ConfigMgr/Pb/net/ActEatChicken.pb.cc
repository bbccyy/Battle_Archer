// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActEatChicken.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActEatChicken.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActEatChickenGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActEatChickenGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActEatChickenEatChickenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActEatChickenEatChickenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActEatChickenEatChickenRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActEatChickenEatChickenRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActEatChicken_2eproto() {
  protobuf_AddDesc_net_2fActEatChicken_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActEatChicken.proto");
  GOOGLE_CHECK(file != NULL);
  TActEatChickenGetInfoRsp_descriptor_ = file->message_type(0);
  static const int TActEatChickenGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActEatChickenGetInfoRsp, arreatinfo_),
  };
  TActEatChickenGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActEatChickenGetInfoRsp_descriptor_,
      TActEatChickenGetInfoRsp::default_instance_,
      TActEatChickenGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActEatChickenGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActEatChickenGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActEatChickenGetInfoRsp));
  TActEatChickenEatChickenReq_descriptor_ = file->message_type(1);
  static const int TActEatChickenEatChickenReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActEatChickenEatChickenReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActEatChickenEatChickenReq, isreplenishment_),
  };
  TActEatChickenEatChickenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActEatChickenEatChickenReq_descriptor_,
      TActEatChickenEatChickenReq::default_instance_,
      TActEatChickenEatChickenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActEatChickenEatChickenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActEatChickenEatChickenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActEatChickenEatChickenReq));
  TActEatChickenEatChickenRsp_descriptor_ = file->message_type(2);
  static const int TActEatChickenEatChickenRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActEatChickenEatChickenRsp, arrreward_),
  };
  TActEatChickenEatChickenRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActEatChickenEatChickenRsp_descriptor_,
      TActEatChickenEatChickenRsp::default_instance_,
      TActEatChickenEatChickenRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActEatChickenEatChickenRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActEatChickenEatChickenRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActEatChickenEatChickenRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActEatChicken_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActEatChickenGetInfoRsp_descriptor_, &TActEatChickenGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActEatChickenEatChickenReq_descriptor_, &TActEatChickenEatChickenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActEatChickenEatChickenRsp_descriptor_, &TActEatChickenEatChickenRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActEatChicken_2eproto() {
  delete TActEatChickenGetInfoRsp::default_instance_;
  delete TActEatChickenGetInfoRsp_reflection_;
  delete TActEatChickenEatChickenReq::default_instance_;
  delete TActEatChickenEatChickenReq_reflection_;
  delete TActEatChickenEatChickenRsp::default_instance_;
  delete TActEatChickenEatChickenRsp_reflection_;
}

void protobuf_AddDesc_net_2fActEatChicken_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fOpenActivity_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027net/ActEatChicken.proto\022\002pb\032\026net/OpenA"
    "ctivity.proto\032\026net/CommonReward.proto\"G\n"
    "\030TActEatChickenGetInfoRsp\022+\n\nArrEatInfo\030"
    "\001 \003(\0132\027.pb.TActivityRewardInfo\"B\n\033TActEa"
    "tChickenEatChickenReq\022\n\n\002Id\030\001 \001(\r\022\027\n\017IsR"
    "eplenishment\030\002 \001(\r\"C\n\033TActEatChickenEatC"
    "hickenRsp\022$\n\tArrReward\030\001 \003(\0132\021.pb.TCommo"
    "nReward", 287);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActEatChicken.proto", &protobuf_RegisterTypes);
  TActEatChickenGetInfoRsp::default_instance_ = new TActEatChickenGetInfoRsp();
  TActEatChickenEatChickenReq::default_instance_ = new TActEatChickenEatChickenReq();
  TActEatChickenEatChickenRsp::default_instance_ = new TActEatChickenEatChickenRsp();
  TActEatChickenGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActEatChickenEatChickenReq::default_instance_->InitAsDefaultInstance();
  TActEatChickenEatChickenRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActEatChicken_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActEatChicken_2eproto {
  StaticDescriptorInitializer_net_2fActEatChicken_2eproto() {
    protobuf_AddDesc_net_2fActEatChicken_2eproto();
  }
} static_descriptor_initializer_net_2fActEatChicken_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActEatChickenGetInfoRsp::kArrEatInfoFieldNumber;
#endif  // !_MSC_VER

TActEatChickenGetInfoRsp::TActEatChickenGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActEatChickenGetInfoRsp)
}

void TActEatChickenGetInfoRsp::InitAsDefaultInstance() {
}

TActEatChickenGetInfoRsp::TActEatChickenGetInfoRsp(const TActEatChickenGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActEatChickenGetInfoRsp)
}

void TActEatChickenGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActEatChickenGetInfoRsp::~TActEatChickenGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActEatChickenGetInfoRsp)
  SharedDtor();
}

void TActEatChickenGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActEatChickenGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActEatChickenGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActEatChickenGetInfoRsp_descriptor_;
}

const TActEatChickenGetInfoRsp& TActEatChickenGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActEatChicken_2eproto();
  return *default_instance_;
}

TActEatChickenGetInfoRsp* TActEatChickenGetInfoRsp::default_instance_ = NULL;

TActEatChickenGetInfoRsp* TActEatChickenGetInfoRsp::New() const {
  return new TActEatChickenGetInfoRsp;
}

void TActEatChickenGetInfoRsp::Clear() {
  arreatinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActEatChickenGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActEatChickenGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActivityRewardInfo ArrEatInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrEatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arreatinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrEatInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActEatChickenGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActEatChickenGetInfoRsp)
  return false;
#undef DO_
}

void TActEatChickenGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActEatChickenGetInfoRsp)
  // repeated .pb.TActivityRewardInfo ArrEatInfo = 1;
  for (int i = 0; i < this->arreatinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arreatinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActEatChickenGetInfoRsp)
}

::google::protobuf::uint8* TActEatChickenGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActEatChickenGetInfoRsp)
  // repeated .pb.TActivityRewardInfo ArrEatInfo = 1;
  for (int i = 0; i < this->arreatinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arreatinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActEatChickenGetInfoRsp)
  return target;
}

int TActEatChickenGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActivityRewardInfo ArrEatInfo = 1;
  total_size += 1 * this->arreatinfo_size();
  for (int i = 0; i < this->arreatinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arreatinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActEatChickenGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActEatChickenGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActEatChickenGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActEatChickenGetInfoRsp::MergeFrom(const TActEatChickenGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arreatinfo_.MergeFrom(from.arreatinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActEatChickenGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActEatChickenGetInfoRsp::CopyFrom(const TActEatChickenGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActEatChickenGetInfoRsp::IsInitialized() const {

  return true;
}

void TActEatChickenGetInfoRsp::Swap(TActEatChickenGetInfoRsp* other) {
  if (other != this) {
    arreatinfo_.Swap(&other->arreatinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActEatChickenGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActEatChickenGetInfoRsp_descriptor_;
  metadata.reflection = TActEatChickenGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActEatChickenEatChickenReq::kIdFieldNumber;
const int TActEatChickenEatChickenReq::kIsReplenishmentFieldNumber;
#endif  // !_MSC_VER

TActEatChickenEatChickenReq::TActEatChickenEatChickenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActEatChickenEatChickenReq)
}

void TActEatChickenEatChickenReq::InitAsDefaultInstance() {
}

TActEatChickenEatChickenReq::TActEatChickenEatChickenReq(const TActEatChickenEatChickenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActEatChickenEatChickenReq)
}

void TActEatChickenEatChickenReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  isreplenishment_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActEatChickenEatChickenReq::~TActEatChickenEatChickenReq() {
  // @@protoc_insertion_point(destructor:pb.TActEatChickenEatChickenReq)
  SharedDtor();
}

void TActEatChickenEatChickenReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActEatChickenEatChickenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActEatChickenEatChickenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActEatChickenEatChickenReq_descriptor_;
}

const TActEatChickenEatChickenReq& TActEatChickenEatChickenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActEatChicken_2eproto();
  return *default_instance_;
}

TActEatChickenEatChickenReq* TActEatChickenEatChickenReq::default_instance_ = NULL;

TActEatChickenEatChickenReq* TActEatChickenEatChickenReq::New() const {
  return new TActEatChickenEatChickenReq;
}

void TActEatChickenEatChickenReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActEatChickenEatChickenReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, isreplenishment_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActEatChickenEatChickenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActEatChickenEatChickenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsReplenishment;
        break;
      }

      // optional uint32 IsReplenishment = 2;
      case 2: {
        if (tag == 16) {
         parse_IsReplenishment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isreplenishment_)));
          set_has_isreplenishment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActEatChickenEatChickenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActEatChickenEatChickenReq)
  return false;
#undef DO_
}

void TActEatChickenEatChickenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActEatChickenEatChickenReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 IsReplenishment = 2;
  if (has_isreplenishment()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isreplenishment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActEatChickenEatChickenReq)
}

::google::protobuf::uint8* TActEatChickenEatChickenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActEatChickenEatChickenReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 IsReplenishment = 2;
  if (has_isreplenishment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isreplenishment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActEatChickenEatChickenReq)
  return target;
}

int TActEatChickenEatChickenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 IsReplenishment = 2;
    if (has_isreplenishment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isreplenishment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActEatChickenEatChickenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActEatChickenEatChickenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActEatChickenEatChickenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActEatChickenEatChickenReq::MergeFrom(const TActEatChickenEatChickenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isreplenishment()) {
      set_isreplenishment(from.isreplenishment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActEatChickenEatChickenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActEatChickenEatChickenReq::CopyFrom(const TActEatChickenEatChickenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActEatChickenEatChickenReq::IsInitialized() const {

  return true;
}

void TActEatChickenEatChickenReq::Swap(TActEatChickenEatChickenReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(isreplenishment_, other->isreplenishment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActEatChickenEatChickenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActEatChickenEatChickenReq_descriptor_;
  metadata.reflection = TActEatChickenEatChickenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActEatChickenEatChickenRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActEatChickenEatChickenRsp::TActEatChickenEatChickenRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActEatChickenEatChickenRsp)
}

void TActEatChickenEatChickenRsp::InitAsDefaultInstance() {
}

TActEatChickenEatChickenRsp::TActEatChickenEatChickenRsp(const TActEatChickenEatChickenRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActEatChickenEatChickenRsp)
}

void TActEatChickenEatChickenRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActEatChickenEatChickenRsp::~TActEatChickenEatChickenRsp() {
  // @@protoc_insertion_point(destructor:pb.TActEatChickenEatChickenRsp)
  SharedDtor();
}

void TActEatChickenEatChickenRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActEatChickenEatChickenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActEatChickenEatChickenRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActEatChickenEatChickenRsp_descriptor_;
}

const TActEatChickenEatChickenRsp& TActEatChickenEatChickenRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActEatChicken_2eproto();
  return *default_instance_;
}

TActEatChickenEatChickenRsp* TActEatChickenEatChickenRsp::default_instance_ = NULL;

TActEatChickenEatChickenRsp* TActEatChickenEatChickenRsp::New() const {
  return new TActEatChickenEatChickenRsp;
}

void TActEatChickenEatChickenRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActEatChickenEatChickenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActEatChickenEatChickenRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActEatChickenEatChickenRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActEatChickenEatChickenRsp)
  return false;
#undef DO_
}

void TActEatChickenEatChickenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActEatChickenEatChickenRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActEatChickenEatChickenRsp)
}

::google::protobuf::uint8* TActEatChickenEatChickenRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActEatChickenEatChickenRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActEatChickenEatChickenRsp)
  return target;
}

int TActEatChickenEatChickenRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActEatChickenEatChickenRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActEatChickenEatChickenRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActEatChickenEatChickenRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActEatChickenEatChickenRsp::MergeFrom(const TActEatChickenEatChickenRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActEatChickenEatChickenRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActEatChickenEatChickenRsp::CopyFrom(const TActEatChickenEatChickenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActEatChickenEatChickenRsp::IsInitialized() const {

  return true;
}

void TActEatChickenEatChickenRsp::Swap(TActEatChickenEatChickenRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActEatChickenEatChickenRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActEatChickenEatChickenRsp_descriptor_;
  metadata.reflection = TActEatChickenEatChickenRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
