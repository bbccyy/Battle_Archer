// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActHeroTestuse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActHeroTestuse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActHeroTestUseGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActHeroTestUseGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActHeroTestUseTryOutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActHeroTestUseTryOutReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActHeroTestuse_2eproto() {
  protobuf_AddDesc_net_2fActHeroTestuse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActHeroTestuse.proto");
  GOOGLE_CHECK(file != NULL);
  TActHeroTestUseGetInfoRsp_descriptor_ = file->message_type(0);
  static const int TActHeroTestUseGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActHeroTestUseGetInfoRsp, tryoutid_),
  };
  TActHeroTestUseGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActHeroTestUseGetInfoRsp_descriptor_,
      TActHeroTestUseGetInfoRsp::default_instance_,
      TActHeroTestUseGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActHeroTestUseGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActHeroTestUseGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActHeroTestUseGetInfoRsp));
  TActHeroTestUseTryOutReq_descriptor_ = file->message_type(1);
  static const int TActHeroTestUseTryOutReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActHeroTestUseTryOutReq, tryoutid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActHeroTestUseTryOutReq, starlv_),
  };
  TActHeroTestUseTryOutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActHeroTestUseTryOutReq_descriptor_,
      TActHeroTestUseTryOutReq::default_instance_,
      TActHeroTestUseTryOutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActHeroTestUseTryOutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActHeroTestUseTryOutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActHeroTestUseTryOutReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActHeroTestuse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActHeroTestUseGetInfoRsp_descriptor_, &TActHeroTestUseGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActHeroTestUseTryOutReq_descriptor_, &TActHeroTestUseTryOutReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActHeroTestuse_2eproto() {
  delete TActHeroTestUseGetInfoRsp::default_instance_;
  delete TActHeroTestUseGetInfoRsp_reflection_;
  delete TActHeroTestUseTryOutReq::default_instance_;
  delete TActHeroTestUseTryOutReq_reflection_;
}

void protobuf_AddDesc_net_2fActHeroTestuse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030net/ActHeroTestuse.proto\022\002pb\"-\n\031TActHe"
    "roTestUseGetInfoRsp\022\020\n\010TryOutId\030\001 \001(\r\"<\n"
    "\030TActHeroTestUseTryOutReq\022\020\n\010TryOutId\030\001 "
    "\001(\r\022\016\n\006StarLv\030\002 \001(\r", 139);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActHeroTestuse.proto", &protobuf_RegisterTypes);
  TActHeroTestUseGetInfoRsp::default_instance_ = new TActHeroTestUseGetInfoRsp();
  TActHeroTestUseTryOutReq::default_instance_ = new TActHeroTestUseTryOutReq();
  TActHeroTestUseGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActHeroTestUseTryOutReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActHeroTestuse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActHeroTestuse_2eproto {
  StaticDescriptorInitializer_net_2fActHeroTestuse_2eproto() {
    protobuf_AddDesc_net_2fActHeroTestuse_2eproto();
  }
} static_descriptor_initializer_net_2fActHeroTestuse_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActHeroTestUseGetInfoRsp::kTryOutIdFieldNumber;
#endif  // !_MSC_VER

TActHeroTestUseGetInfoRsp::TActHeroTestUseGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActHeroTestUseGetInfoRsp)
}

void TActHeroTestUseGetInfoRsp::InitAsDefaultInstance() {
}

TActHeroTestUseGetInfoRsp::TActHeroTestUseGetInfoRsp(const TActHeroTestUseGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActHeroTestUseGetInfoRsp)
}

void TActHeroTestUseGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  tryoutid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActHeroTestUseGetInfoRsp::~TActHeroTestUseGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActHeroTestUseGetInfoRsp)
  SharedDtor();
}

void TActHeroTestUseGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActHeroTestUseGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActHeroTestUseGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActHeroTestUseGetInfoRsp_descriptor_;
}

const TActHeroTestUseGetInfoRsp& TActHeroTestUseGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActHeroTestuse_2eproto();
  return *default_instance_;
}

TActHeroTestUseGetInfoRsp* TActHeroTestUseGetInfoRsp::default_instance_ = NULL;

TActHeroTestUseGetInfoRsp* TActHeroTestUseGetInfoRsp::New() const {
  return new TActHeroTestUseGetInfoRsp;
}

void TActHeroTestUseGetInfoRsp::Clear() {
  tryoutid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActHeroTestUseGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActHeroTestUseGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TryOutId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tryoutid_)));
          set_has_tryoutid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActHeroTestUseGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActHeroTestUseGetInfoRsp)
  return false;
#undef DO_
}

void TActHeroTestUseGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActHeroTestUseGetInfoRsp)
  // optional uint32 TryOutId = 1;
  if (has_tryoutid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tryoutid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActHeroTestUseGetInfoRsp)
}

::google::protobuf::uint8* TActHeroTestUseGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActHeroTestUseGetInfoRsp)
  // optional uint32 TryOutId = 1;
  if (has_tryoutid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tryoutid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActHeroTestUseGetInfoRsp)
  return target;
}

int TActHeroTestUseGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TryOutId = 1;
    if (has_tryoutid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tryoutid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActHeroTestUseGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActHeroTestUseGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActHeroTestUseGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActHeroTestUseGetInfoRsp::MergeFrom(const TActHeroTestUseGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tryoutid()) {
      set_tryoutid(from.tryoutid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActHeroTestUseGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActHeroTestUseGetInfoRsp::CopyFrom(const TActHeroTestUseGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActHeroTestUseGetInfoRsp::IsInitialized() const {

  return true;
}

void TActHeroTestUseGetInfoRsp::Swap(TActHeroTestUseGetInfoRsp* other) {
  if (other != this) {
    std::swap(tryoutid_, other->tryoutid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActHeroTestUseGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActHeroTestUseGetInfoRsp_descriptor_;
  metadata.reflection = TActHeroTestUseGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActHeroTestUseTryOutReq::kTryOutIdFieldNumber;
const int TActHeroTestUseTryOutReq::kStarLvFieldNumber;
#endif  // !_MSC_VER

TActHeroTestUseTryOutReq::TActHeroTestUseTryOutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActHeroTestUseTryOutReq)
}

void TActHeroTestUseTryOutReq::InitAsDefaultInstance() {
}

TActHeroTestUseTryOutReq::TActHeroTestUseTryOutReq(const TActHeroTestUseTryOutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActHeroTestUseTryOutReq)
}

void TActHeroTestUseTryOutReq::SharedCtor() {
  _cached_size_ = 0;
  tryoutid_ = 0u;
  starlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActHeroTestUseTryOutReq::~TActHeroTestUseTryOutReq() {
  // @@protoc_insertion_point(destructor:pb.TActHeroTestUseTryOutReq)
  SharedDtor();
}

void TActHeroTestUseTryOutReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActHeroTestUseTryOutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActHeroTestUseTryOutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActHeroTestUseTryOutReq_descriptor_;
}

const TActHeroTestUseTryOutReq& TActHeroTestUseTryOutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActHeroTestuse_2eproto();
  return *default_instance_;
}

TActHeroTestUseTryOutReq* TActHeroTestUseTryOutReq::default_instance_ = NULL;

TActHeroTestUseTryOutReq* TActHeroTestUseTryOutReq::New() const {
  return new TActHeroTestUseTryOutReq;
}

void TActHeroTestUseTryOutReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActHeroTestUseTryOutReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tryoutid_, starlv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActHeroTestUseTryOutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActHeroTestUseTryOutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TryOutId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tryoutid_)));
          set_has_tryoutid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_StarLv;
        break;
      }

      // optional uint32 StarLv = 2;
      case 2: {
        if (tag == 16) {
         parse_StarLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActHeroTestUseTryOutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActHeroTestUseTryOutReq)
  return false;
#undef DO_
}

void TActHeroTestUseTryOutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActHeroTestUseTryOutReq)
  // optional uint32 TryOutId = 1;
  if (has_tryoutid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tryoutid(), output);
  }

  // optional uint32 StarLv = 2;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActHeroTestUseTryOutReq)
}

::google::protobuf::uint8* TActHeroTestUseTryOutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActHeroTestUseTryOutReq)
  // optional uint32 TryOutId = 1;
  if (has_tryoutid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tryoutid(), target);
  }

  // optional uint32 StarLv = 2;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->starlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActHeroTestUseTryOutReq)
  return target;
}

int TActHeroTestUseTryOutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TryOutId = 1;
    if (has_tryoutid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tryoutid());
    }

    // optional uint32 StarLv = 2;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActHeroTestUseTryOutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActHeroTestUseTryOutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActHeroTestUseTryOutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActHeroTestUseTryOutReq::MergeFrom(const TActHeroTestUseTryOutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tryoutid()) {
      set_tryoutid(from.tryoutid());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActHeroTestUseTryOutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActHeroTestUseTryOutReq::CopyFrom(const TActHeroTestUseTryOutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActHeroTestUseTryOutReq::IsInitialized() const {

  return true;
}

void TActHeroTestUseTryOutReq::Swap(TActHeroTestUseTryOutReq* other) {
  if (other != this) {
    std::swap(tryoutid_, other->tryoutid_);
    std::swap(starlv_, other->starlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActHeroTestUseTryOutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActHeroTestUseTryOutReq_descriptor_;
  metadata.reflection = TActHeroTestUseTryOutReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
