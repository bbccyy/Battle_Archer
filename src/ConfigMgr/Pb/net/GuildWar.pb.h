// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/GuildWar.proto

#ifndef PROTOBUF_net_2fGuildWar_2eproto__INCLUDED
#define PROTOBUF_net_2fGuildWar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
#include "net/CommonReward.pb.h"
#include "net/Battle.pb.h"
#include "net/Chat.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fGuildWar_2eproto();
void protobuf_AssignDesc_net_2fGuildWar_2eproto();
void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

class TGuildWarSingleMessage;
class TGuildWarMessageInfo;
class TGuildWarTeamIdInfo;
class TGuildWarTowerSimpleInfo;
class TGuildWarFormation;
class TGuildWarTeamFormationInfo;
class TGuildWarUserTeamInfo;
class TGuildWarUserHeroInheritInfo;
class TGuildWarUserInfo;
class TGuildWarOtherUserInfo;
class TGuildWarFieldInfo;
class TGuildWarTeamBaseInfo;
class TGuildWarTeamInfoWithHp;
class TGuildWarHeroDetailInfo;
class TGuildWarTeamDetailInfo;
class TGuildWarBattleRecordInfo;
class TGuildWarRankInfo;
class TGuildWarStageInfo;
class TGuildWarGetServerTeamInfoRsp;
class TGuildWarGetStageInfoRsp;
class TGuildWarEnterFieldRsp;
class TGuildWarGetFieldInfoRsp;
class TGuildWarSetTeamFormationReq;
class TGuildWarSetTeamFormationRsp;
class TGuildWarSetCallForBattleHeroReq;
class TGuildWarSetCallForBattleHeroRsp;
class TGuildWarSetAttackFormationReq;
class TGuildWarGetTowerInfoReq;
class TGuildWarGetTowerInfoRsp;
class TGuildWarGetTowerTeamInfoReq;
class TGuildWarGetTowerTeamInfoRsp;
class TGuildWarGarrisonTowerReq;
class TGuildWarCancelGarrisonTowerReq;
class TGuildWarGetAllTeamInfoRsp;
class TGuildWarGetTeamInfoReq;
class TGuildWarGetTeamInfoRsp;
class TGuildWarDeployTeamToTowerReq;
class TGuildWarGetAllCallForBattleHeroInfoRsp;
class TGuildWarSetCallForBattleHeroListReq;
class TGuildWarGetCallForBattleRecordRsp;
class TGuildWarAttackTowerTeamReq;
class TGuildWarAttackTowerTeamRsp;
class TGuildWarChooseBuffReq;
class TGuildWarGetTowerBattleRecordReq;
class TGuildWarGetTowerBattleRecordRsp;
class TGuildWarGetTeamBattleRecordReq;
class TGuildWarGetTeamBattleRecordRsp;
class TGuildWarGetSelfBattleRecordRsp;
class TGuildWarGetTowerRewardReq;
class TGuildWarGetTowerRewardRsp;
class TGuildWarGetBuffListRsp;
class TGuildWarGetFieldRankRsp;
class TGuildWarGetEndRewardRsp;
class TGuildWarSendMsgReq;
class TGuildWarMoveReq;
class TGuildWarUserMoveNotify;
class TGuildWarStageNotify;
class TGuildWarTowerNotify;
class TGuildWarMessageWithChatType;
class TGuildWarMessageNotify;

enum EGuildWarStage {
  STAGE_IDLE = 0,
  STAGE_GROUP = 1,
  STAGE_SIGN_UP = 2,
  STAGE_MATCH = 3,
  STAGE_MEMBER_GARRISON = 4,
  STAGE_AUTO_SET = 5,
  STAGE_LEADER_ADJUST = 6,
  STAGE_CALL_FOR_BATTLE = 7,
  STAGE_BATTLE = 8,
  STAGE_END = 9,
  STAGE_REWARD = 10
};
bool EGuildWarStage_IsValid(int value);
const EGuildWarStage EGuildWarStage_MIN = STAGE_IDLE;
const EGuildWarStage EGuildWarStage_MAX = STAGE_REWARD;
const int EGuildWarStage_ARRAYSIZE = EGuildWarStage_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGuildWarStage_descriptor();
inline const ::std::string& EGuildWarStage_Name(EGuildWarStage value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGuildWarStage_descriptor(), value);
}
inline bool EGuildWarStage_Parse(
    const ::std::string& name, EGuildWarStage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGuildWarStage>(
    EGuildWarStage_descriptor(), name, value);
}
enum EGuildWarResult {
  RESULT_NONE = 0,
  RESULT_WIN = 1,
  RESULT_DEFEAT = 2,
  RESULT_DRAW = 3
};
bool EGuildWarResult_IsValid(int value);
const EGuildWarResult EGuildWarResult_MIN = RESULT_NONE;
const EGuildWarResult EGuildWarResult_MAX = RESULT_DRAW;
const int EGuildWarResult_ARRAYSIZE = EGuildWarResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGuildWarResult_descriptor();
inline const ::std::string& EGuildWarResult_Name(EGuildWarResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGuildWarResult_descriptor(), value);
}
inline bool EGuildWarResult_Parse(
    const ::std::string& name, EGuildWarResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGuildWarResult>(
    EGuildWarResult_descriptor(), name, value);
}
enum EGuildWarMsgType {
  MSG_NORMAL = 1,
  MSG_GOLD = 2
};
bool EGuildWarMsgType_IsValid(int value);
const EGuildWarMsgType EGuildWarMsgType_MIN = MSG_NORMAL;
const EGuildWarMsgType EGuildWarMsgType_MAX = MSG_GOLD;
const int EGuildWarMsgType_ARRAYSIZE = EGuildWarMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGuildWarMsgType_descriptor();
inline const ::std::string& EGuildWarMsgType_Name(EGuildWarMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGuildWarMsgType_descriptor(), value);
}
inline bool EGuildWarMsgType_Parse(
    const ::std::string& name, EGuildWarMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGuildWarMsgType>(
    EGuildWarMsgType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TGuildWarSingleMessage</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarSingleMessage : public ::google::protobuf::Message {
 public:
  TGuildWarSingleMessage();
  virtual ~TGuildWarSingleMessage();

  TGuildWarSingleMessage(const TGuildWarSingleMessage& from);

  inline TGuildWarSingleMessage& operator=(const TGuildWarSingleMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarSingleMessage& default_instance();

  void Swap(TGuildWarSingleMessage* other);

  // implements Message ----------------------------------------------

  TGuildWarSingleMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarSingleMessage& from);
  void MergeFrom(const TGuildWarSingleMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarSingleMessage</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarSingleMessage</name>
  	<Function>
  		<name>msg</name>
  		<replaceName>Msg</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_msg</name>
  		<replaceName>Msg</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_msg</name>
  		<replaceName>Msg</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional uint64 MsgTime = 3;
  inline bool has_msgtime() const;
  inline void clear_msgtime();
  static const int kMsgTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarSingleMessage</name>
  	<Function>
  		<name>msgtime</name>
  		<replaceName>MsgTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_msgtime</name>
  		<replaceName>MsgTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_msgtime</name>
  		<replaceName>MsgTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 msgtime() const;
  inline void set_msgtime(::google::protobuf::uint64 value);

  // optional uint32 MsgType = 4;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarSingleMessage</name>
  	<Function>
  		<name>msgtype</name>
  		<replaceName>MsgType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_msgtype</name>
  		<replaceName>MsgType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_msgtype</name>
  		<replaceName>MsgType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 msgtype() const;
  inline void set_msgtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarSingleMessage)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_msgtime();
  inline void clear_has_msgtime();
  inline void set_has_msgtype();
  inline void clear_has_msgtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* msg_;
  ::google::protobuf::uint64 msgtime_;
  ::google::protobuf::uint32 msgtype_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarSingleMessage* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarMessageInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarMessageInfo : public ::google::protobuf::Message {
 public:
  TGuildWarMessageInfo();
  virtual ~TGuildWarMessageInfo();

  TGuildWarMessageInfo(const TGuildWarMessageInfo& from);

  inline TGuildWarMessageInfo& operator=(const TGuildWarMessageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarMessageInfo& default_instance();

  void Swap(TGuildWarMessageInfo* other);

  // implements Message ----------------------------------------------

  TGuildWarMessageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarMessageInfo& from);
  void MergeFrom(const TGuildWarMessageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWarSingleMessage ArrMsg = 1;
  inline int arrmsg_size() const;
  inline void clear_arrmsg();
  static const int kArrMsgFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarMessageInfo</name>
  	<Function>
  		<name>arrmsg</name>
  		<replaceName>ArrMsg</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrmsg</name>
  		<replaceName>ArrMsg</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrmsg</name>
  		<replaceName>ArrMsg</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrmsg</name>
  		<replaceName>ArrMsg</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrmsg_size</name>
  		<replaceName>ArrMsg</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarSingleMessage& arrmsg(int index) const;
  inline ::pb::TGuildWarSingleMessage* mutable_arrmsg(int index);
  inline ::pb::TGuildWarSingleMessage* add_arrmsg();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarSingleMessage >&
      arrmsg() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarSingleMessage >*
      mutable_arrmsg();

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  inline int arrusersimpleinfo_size() const;
  inline void clear_arrusersimpleinfo();
  static const int kArrUserSimpleInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarMessageInfo</name>
  	<Function>
  		<name>arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrusersimpleinfo_size</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& arrusersimpleinfo(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_arrusersimpleinfo(int index);
  inline ::pb::TUserSimpleInfo* add_arrusersimpleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      arrusersimpleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_arrusersimpleinfo();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarMessageInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarSingleMessage > arrmsg_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > arrusersimpleinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarMessageInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarTeamIdInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarTeamIdInfo : public ::google::protobuf::Message {
 public:
  TGuildWarTeamIdInfo();
  virtual ~TGuildWarTeamIdInfo();

  TGuildWarTeamIdInfo(const TGuildWarTeamIdInfo& from);

  inline TGuildWarTeamIdInfo& operator=(const TGuildWarTeamIdInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarTeamIdInfo& default_instance();

  void Swap(TGuildWarTeamIdInfo* other);

  // implements Message ----------------------------------------------

  TGuildWarTeamIdInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarTeamIdInfo& from);
  void MergeFrom(const TGuildWarTeamIdInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTeamIdInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 TeamIndex = 2;
  inline bool has_teamindex() const;
  inline void clear_teamindex();
  static const int kTeamIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTeamIdInfo</name>
  	<Function>
  		<name>teamindex</name>
  		<replaceName>TeamIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamindex</name>
  		<replaceName>TeamIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamindex</name>
  		<replaceName>TeamIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamindex() const;
  inline void set_teamindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarTeamIdInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_teamindex();
  inline void clear_has_teamindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 teamindex_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarTeamIdInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarTowerSimpleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarTowerSimpleInfo : public ::google::protobuf::Message {
 public:
  TGuildWarTowerSimpleInfo();
  virtual ~TGuildWarTowerSimpleInfo();

  TGuildWarTowerSimpleInfo(const TGuildWarTowerSimpleInfo& from);

  inline TGuildWarTowerSimpleInfo& operator=(const TGuildWarTowerSimpleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarTowerSimpleInfo& default_instance();

  void Swap(TGuildWarTowerSimpleInfo* other);

  // implements Message ----------------------------------------------

  TGuildWarTowerSimpleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarTowerSimpleInfo& from);
  void MergeFrom(const TGuildWarTowerSimpleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TowerId = 1;
  inline bool has_towerid() const;
  inline void clear_towerid();
  static const int kTowerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTowerSimpleInfo</name>
  	<Function>
  		<name>towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 towerid() const;
  inline void set_towerid(::google::protobuf::uint32 value);

  // optional uint32 AliveTeamNum = 2;
  inline bool has_aliveteamnum() const;
  inline void clear_aliveteamnum();
  static const int kAliveTeamNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTowerSimpleInfo</name>
  	<Function>
  		<name>aliveteamnum</name>
  		<replaceName>AliveTeamNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_aliveteamnum</name>
  		<replaceName>AliveTeamNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_aliveteamnum</name>
  		<replaceName>AliveTeamNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 aliveteamnum() const;
  inline void set_aliveteamnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarTowerSimpleInfo)
 private:
  inline void set_has_towerid();
  inline void clear_has_towerid();
  inline void set_has_aliveteamnum();
  inline void clear_has_aliveteamnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 towerid_;
  ::google::protobuf::uint32 aliveteamnum_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarTowerSimpleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarFormation</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarFormation : public ::google::protobuf::Message {
 public:
  TGuildWarFormation();
  virtual ~TGuildWarFormation();

  TGuildWarFormation(const TGuildWarFormation& from);

  inline TGuildWarFormation& operator=(const TGuildWarFormation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarFormation& default_instance();

  void Swap(TGuildWarFormation* other);

  // implements Message ----------------------------------------------

  TGuildWarFormation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarFormation& from);
  void MergeFrom(const TGuildWarFormation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarFormation</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarFormation</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarFormation)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarFormation* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarTeamFormationInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarTeamFormationInfo : public ::google::protobuf::Message {
 public:
  TGuildWarTeamFormationInfo();
  virtual ~TGuildWarTeamFormationInfo();

  TGuildWarTeamFormationInfo(const TGuildWarTeamFormationInfo& from);

  inline TGuildWarTeamFormationInfo& operator=(const TGuildWarTeamFormationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarTeamFormationInfo& default_instance();

  void Swap(TGuildWarTeamFormationInfo* other);

  // implements Message ----------------------------------------------

  TGuildWarTeamFormationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarTeamFormationInfo& from);
  void MergeFrom(const TGuildWarTeamFormationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamIndex = 1;
  inline bool has_teamindex() const;
  inline void clear_teamindex();
  static const int kTeamIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTeamFormationInfo</name>
  	<Function>
  		<name>teamindex</name>
  		<replaceName>TeamIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamindex</name>
  		<replaceName>TeamIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamindex</name>
  		<replaceName>TeamIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamindex() const;
  inline void set_teamindex(::google::protobuf::uint32 value);

  // repeated .pb.TGuildWarFormation ArrFormation = 2;
  inline int arrformation_size() const;
  inline void clear_arrformation();
  static const int kArrFormationFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTeamFormationInfo</name>
  	<Function>
  		<name>arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrformation_size</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarFormation& arrformation(int index) const;
  inline ::pb::TGuildWarFormation* mutable_arrformation(int index);
  inline ::pb::TGuildWarFormation* add_arrformation();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation >&
      arrformation() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation >*
      mutable_arrformation();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarTeamFormationInfo)
 private:
  inline void set_has_teamindex();
  inline void clear_has_teamindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation > arrformation_;
  ::google::protobuf::uint32 teamindex_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarTeamFormationInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarUserTeamInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarUserTeamInfo : public ::google::protobuf::Message {
 public:
  TGuildWarUserTeamInfo();
  virtual ~TGuildWarUserTeamInfo();

  TGuildWarUserTeamInfo(const TGuildWarUserTeamInfo& from);

  inline TGuildWarUserTeamInfo& operator=(const TGuildWarUserTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarUserTeamInfo& default_instance();

  void Swap(TGuildWarUserTeamInfo* other);

  // implements Message ----------------------------------------------

  TGuildWarUserTeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarUserTeamInfo& from);
  void MergeFrom(const TGuildWarUserTeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamIndex = 1;
  inline bool has_teamindex() const;
  inline void clear_teamindex();
  static const int kTeamIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserTeamInfo</name>
  	<Function>
  		<name>teamindex</name>
  		<replaceName>TeamIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamindex</name>
  		<replaceName>TeamIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamindex</name>
  		<replaceName>TeamIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamindex() const;
  inline void set_teamindex(::google::protobuf::uint32 value);

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo = 2;
  inline int arrheroinfo_size() const;
  inline void clear_arrheroinfo();
  static const int kArrHeroInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserTeamInfo</name>
  	<Function>
  		<name>arrheroinfo</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrheroinfo</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrheroinfo</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrheroinfo</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrheroinfo_size</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarHeroDetailInfo& arrheroinfo(int index) const;
  inline ::pb::TGuildWarHeroDetailInfo* mutable_arrheroinfo(int index);
  inline ::pb::TGuildWarHeroDetailInfo* add_arrheroinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >&
      arrheroinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >*
      mutable_arrheroinfo();

  // optional uint64 FightForce = 3;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserTeamInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint32 TowerId = 4;
  inline bool has_towerid() const;
  inline void clear_towerid();
  static const int kTowerIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserTeamInfo</name>
  	<Function>
  		<name>towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 towerid() const;
  inline void set_towerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarUserTeamInfo)
 private:
  inline void set_has_teamindex();
  inline void clear_has_teamindex();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_towerid();
  inline void clear_has_towerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo > arrheroinfo_;
  ::google::protobuf::uint32 teamindex_;
  ::google::protobuf::uint32 towerid_;
  ::google::protobuf::uint64 fightforce_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarUserTeamInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarUserHeroInheritInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarUserHeroInheritInfo : public ::google::protobuf::Message {
 public:
  TGuildWarUserHeroInheritInfo();
  virtual ~TGuildWarUserHeroInheritInfo();

  TGuildWarUserHeroInheritInfo(const TGuildWarUserHeroInheritInfo& from);

  inline TGuildWarUserHeroInheritInfo& operator=(const TGuildWarUserHeroInheritInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarUserHeroInheritInfo& default_instance();

  void Swap(TGuildWarUserHeroInheritInfo* other);

  // implements Message ----------------------------------------------

  TGuildWarUserHeroInheritInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarUserHeroInheritInfo& from);
  void MergeFrom(const TGuildWarUserHeroInheritInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserHeroInheritInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 CurHpPer = 2;
  inline bool has_curhpper() const;
  inline void clear_curhpper();
  static const int kCurHpPerFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserHeroInheritInfo</name>
  	<Function>
  		<name>curhpper</name>
  		<replaceName>CurHpPer</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhpper</name>
  		<replaceName>CurHpPer</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhpper</name>
  		<replaceName>CurHpPer</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curhpper() const;
  inline void set_curhpper(::google::protobuf::uint32 value);

  // optional uint32 CurRage = 3;
  inline bool has_currage() const;
  inline void clear_currage();
  static const int kCurRageFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserHeroInheritInfo</name>
  	<Function>
  		<name>currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 currage() const;
  inline void set_currage(::google::protobuf::uint32 value);

  // optional uint64 RecoverTime = 4;
  inline bool has_recovertime() const;
  inline void clear_recovertime();
  static const int kRecoverTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserHeroInheritInfo</name>
  	<Function>
  		<name>recovertime</name>
  		<replaceName>RecoverTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recovertime</name>
  		<replaceName>RecoverTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recovertime</name>
  		<replaceName>RecoverTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recovertime() const;
  inline void set_recovertime(::google::protobuf::uint64 value);

  // optional uint64 CdTime = 5;
  inline bool has_cdtime() const;
  inline void clear_cdtime();
  static const int kCdTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserHeroInheritInfo</name>
  	<Function>
  		<name>cdtime</name>
  		<replaceName>CdTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cdtime</name>
  		<replaceName>CdTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cdtime</name>
  		<replaceName>CdTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 cdtime() const;
  inline void set_cdtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarUserHeroInheritInfo)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_curhpper();
  inline void clear_has_curhpper();
  inline void set_has_currage();
  inline void clear_has_currage();
  inline void set_has_recovertime();
  inline void clear_has_recovertime();
  inline void set_has_cdtime();
  inline void clear_has_cdtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 curhpper_;
  ::google::protobuf::uint64 recovertime_;
  ::google::protobuf::uint64 cdtime_;
  ::google::protobuf::uint32 currage_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarUserHeroInheritInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarUserInfo : public ::google::protobuf::Message {
 public:
  TGuildWarUserInfo();
  virtual ~TGuildWarUserInfo();

  TGuildWarUserInfo(const TGuildWarUserInfo& from);

  inline TGuildWarUserInfo& operator=(const TGuildWarUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarUserInfo& default_instance();

  void Swap(TGuildWarUserInfo* other);

  // implements Message ----------------------------------------------

  TGuildWarUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarUserInfo& from);
  void MergeFrom(const TGuildWarUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 IncAttackTime = 1;
  inline bool has_incattacktime() const;
  inline void clear_incattacktime();
  static const int kIncAttackTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserInfo</name>
  	<Function>
  		<name>incattacktime</name>
  		<replaceName>IncAttackTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_incattacktime</name>
  		<replaceName>IncAttackTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_incattacktime</name>
  		<replaceName>IncAttackTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 incattacktime() const;
  inline void set_incattacktime(::google::protobuf::uint64 value);

  // optional uint32 AttackNum = 2;
  inline bool has_attacknum() const;
  inline void clear_attacknum();
  static const int kAttackNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserInfo</name>
  	<Function>
  		<name>attacknum</name>
  		<replaceName>AttackNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attacknum</name>
  		<replaceName>AttackNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attacknum</name>
  		<replaceName>AttackNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attacknum() const;
  inline void set_attacknum(::google::protobuf::uint32 value);

  // optional uint32 IncAttackNum = 3;
  inline bool has_incattacknum() const;
  inline void clear_incattacknum();
  static const int kIncAttackNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserInfo</name>
  	<Function>
  		<name>incattacknum</name>
  		<replaceName>IncAttackNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_incattacknum</name>
  		<replaceName>IncAttackNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_incattacknum</name>
  		<replaceName>IncAttackNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 incattacknum() const;
  inline void set_incattacknum(::google::protobuf::uint32 value);

  // optional .pb.TGuildWarHeroDetailInfo CallForBattleHero = 4;
  inline bool has_callforbattlehero() const;
  inline void clear_callforbattlehero();
  static const int kCallForBattleHeroFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserInfo</name>
  	<Function>
  		<name>callforbattlehero</name>
  		<replaceName>CallForBattleHero</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_callforbattlehero</name>
  		<replaceName>CallForBattleHero</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_callforbattlehero</name>
  		<replaceName>CallForBattleHero</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_callforbattlehero</name>
  		<replaceName>CallForBattleHero</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarHeroDetailInfo& callforbattlehero() const;
  inline ::pb::TGuildWarHeroDetailInfo* mutable_callforbattlehero();
  inline ::pb::TGuildWarHeroDetailInfo* release_callforbattlehero();
  inline void set_allocated_callforbattlehero(::pb::TGuildWarHeroDetailInfo* callforbattlehero);

  // repeated uint32 ArrNotPickedBuff = 5;
  inline int arrnotpickedbuff_size() const;
  inline void clear_arrnotpickedbuff();
  static const int kArrNotPickedBuffFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserInfo</name>
  	<Function>
  		<name>arrnotpickedbuff</name>
  		<replaceName>ArrNotPickedBuff</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrnotpickedbuff</name>
  		<replaceName>ArrNotPickedBuff</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrnotpickedbuff</name>
  		<replaceName>ArrNotPickedBuff</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrnotpickedbuff</name>
  		<replaceName>ArrNotPickedBuff</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrnotpickedbuff_size</name>
  		<replaceName>ArrNotPickedBuff</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrnotpickedbuff(int index) const;
  inline void set_arrnotpickedbuff(int index, ::google::protobuf::uint32 value);
  inline void add_arrnotpickedbuff(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrnotpickedbuff() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrnotpickedbuff();

  // repeated .pb.TGuildWarUserTeamInfo ArrTeamInfo = 6;
  inline int arrteaminfo_size() const;
  inline void clear_arrteaminfo();
  static const int kArrTeamInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserInfo</name>
  	<Function>
  		<name>arrteaminfo</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrteaminfo</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrteaminfo</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrteaminfo</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrteaminfo_size</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarUserTeamInfo& arrteaminfo(int index) const;
  inline ::pb::TGuildWarUserTeamInfo* mutable_arrteaminfo(int index);
  inline ::pb::TGuildWarUserTeamInfo* add_arrteaminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserTeamInfo >&
      arrteaminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserTeamInfo >*
      mutable_arrteaminfo();

  // repeated .pb.TGuildWarUserHeroInheritInfo ArrHeroInfo = 7;
  inline int arrheroinfo_size() const;
  inline void clear_arrheroinfo();
  static const int kArrHeroInfoFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserInfo</name>
  	<Function>
  		<name>arrheroinfo</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrheroinfo</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrheroinfo</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrheroinfo</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrheroinfo_size</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarUserHeroInheritInfo& arrheroinfo(int index) const;
  inline ::pb::TGuildWarUserHeroInheritInfo* mutable_arrheroinfo(int index);
  inline ::pb::TGuildWarUserHeroInheritInfo* add_arrheroinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserHeroInheritInfo >&
      arrheroinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserHeroInheritInfo >*
      mutable_arrheroinfo();

  // repeated .pb.TGuildWarFormation ArrAttackFormation = 8;
  inline int arrattackformation_size() const;
  inline void clear_arrattackformation();
  static const int kArrAttackFormationFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserInfo</name>
  	<Function>
  		<name>arrattackformation</name>
  		<replaceName>ArrAttackFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrattackformation</name>
  		<replaceName>ArrAttackFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrattackformation</name>
  		<replaceName>ArrAttackFormation</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrattackformation</name>
  		<replaceName>ArrAttackFormation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrattackformation_size</name>
  		<replaceName>ArrAttackFormation</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarFormation& arrattackformation(int index) const;
  inline ::pb::TGuildWarFormation* mutable_arrattackformation(int index);
  inline ::pb::TGuildWarFormation* add_arrattackformation();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation >&
      arrattackformation() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation >*
      mutable_arrattackformation();

  // optional uint64 SendNormalMsgTime = 9;
  inline bool has_sendnormalmsgtime() const;
  inline void clear_sendnormalmsgtime();
  static const int kSendNormalMsgTimeFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserInfo</name>
  	<Function>
  		<name>sendnormalmsgtime</name>
  		<replaceName>SendNormalMsgTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sendnormalmsgtime</name>
  		<replaceName>SendNormalMsgTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sendnormalmsgtime</name>
  		<replaceName>SendNormalMsgTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 sendnormalmsgtime() const;
  inline void set_sendnormalmsgtime(::google::protobuf::uint64 value);

  // optional uint64 SendGoldMsgTime = 10;
  inline bool has_sendgoldmsgtime() const;
  inline void clear_sendgoldmsgtime();
  static const int kSendGoldMsgTimeFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserInfo</name>
  	<Function>
  		<name>sendgoldmsgtime</name>
  		<replaceName>SendGoldMsgTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sendgoldmsgtime</name>
  		<replaceName>SendGoldMsgTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sendgoldmsgtime</name>
  		<replaceName>SendGoldMsgTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 sendgoldmsgtime() const;
  inline void set_sendgoldmsgtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarUserInfo)
 private:
  inline void set_has_incattacktime();
  inline void clear_has_incattacktime();
  inline void set_has_attacknum();
  inline void clear_has_attacknum();
  inline void set_has_incattacknum();
  inline void clear_has_incattacknum();
  inline void set_has_callforbattlehero();
  inline void clear_has_callforbattlehero();
  inline void set_has_sendnormalmsgtime();
  inline void clear_has_sendnormalmsgtime();
  inline void set_has_sendgoldmsgtime();
  inline void clear_has_sendgoldmsgtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 incattacktime_;
  ::google::protobuf::uint32 attacknum_;
  ::google::protobuf::uint32 incattacknum_;
  ::pb::TGuildWarHeroDetailInfo* callforbattlehero_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrnotpickedbuff_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserTeamInfo > arrteaminfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserHeroInheritInfo > arrheroinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation > arrattackformation_;
  ::google::protobuf::uint64 sendnormalmsgtime_;
  ::google::protobuf::uint64 sendgoldmsgtime_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarOtherUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarOtherUserInfo : public ::google::protobuf::Message {
 public:
  TGuildWarOtherUserInfo();
  virtual ~TGuildWarOtherUserInfo();

  TGuildWarOtherUserInfo(const TGuildWarOtherUserInfo& from);

  inline TGuildWarOtherUserInfo& operator=(const TGuildWarOtherUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarOtherUserInfo& default_instance();

  void Swap(TGuildWarOtherUserInfo* other);

  // implements Message ----------------------------------------------

  TGuildWarOtherUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarOtherUserInfo& from);
  void MergeFrom(const TGuildWarOtherUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarOtherUserInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarOtherUserInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional bool IsLeave = 3;
  inline bool has_isleave() const;
  inline void clear_isleave();
  static const int kIsLeaveFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarOtherUserInfo</name>
  	<Function>
  		<name>isleave</name>
  		<replaceName>IsLeave</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isleave</name>
  		<replaceName>IsLeave</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isleave</name>
  		<replaceName>IsLeave</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isleave() const;
  inline void set_isleave(bool value);

  // optional .pb.TUserSimpleInfo UserSimpleInfo = 4;
  inline bool has_usersimpleinfo() const;
  inline void clear_usersimpleinfo();
  static const int kUserSimpleInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarOtherUserInfo</name>
  	<Function>
  		<name>usersimpleinfo</name>
  		<replaceName>UserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usersimpleinfo</name>
  		<replaceName>UserSimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_usersimpleinfo</name>
  		<replaceName>UserSimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usersimpleinfo</name>
  		<replaceName>UserSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& usersimpleinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_usersimpleinfo();
  inline ::pb::TUserSimpleInfo* release_usersimpleinfo();
  inline void set_allocated_usersimpleinfo(::pb::TUserSimpleInfo* usersimpleinfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarOtherUserInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_isleave();
  inline void clear_has_isleave();
  inline void set_has_usersimpleinfo();
  inline void clear_has_usersimpleinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 pos_;
  bool isleave_;
  ::pb::TUserSimpleInfo* usersimpleinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarOtherUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarFieldInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarFieldInfo : public ::google::protobuf::Message {
 public:
  TGuildWarFieldInfo();
  virtual ~TGuildWarFieldInfo();

  TGuildWarFieldInfo(const TGuildWarFieldInfo& from);

  inline TGuildWarFieldInfo& operator=(const TGuildWarFieldInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarFieldInfo& default_instance();

  void Swap(TGuildWarFieldInfo* other);

  // implements Message ----------------------------------------------

  TGuildWarFieldInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarFieldInfo& from);
  void MergeFrom(const TGuildWarFieldInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWarTowerSimpleInfo ArrTowerInfo = 1;
  inline int arrtowerinfo_size() const;
  inline void clear_arrtowerinfo();
  static const int kArrTowerInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarFieldInfo</name>
  	<Function>
  		<name>arrtowerinfo</name>
  		<replaceName>ArrTowerInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtowerinfo</name>
  		<replaceName>ArrTowerInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtowerinfo</name>
  		<replaceName>ArrTowerInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtowerinfo</name>
  		<replaceName>ArrTowerInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtowerinfo_size</name>
  		<replaceName>ArrTowerInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTowerSimpleInfo& arrtowerinfo(int index) const;
  inline ::pb::TGuildWarTowerSimpleInfo* mutable_arrtowerinfo(int index);
  inline ::pb::TGuildWarTowerSimpleInfo* add_arrtowerinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTowerSimpleInfo >&
      arrtowerinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTowerSimpleInfo >*
      mutable_arrtowerinfo();

  // optional .pb.TGuildWarUserInfo SelfInfo = 3;
  inline bool has_selfinfo() const;
  inline void clear_selfinfo();
  static const int kSelfInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarFieldInfo</name>
  	<Function>
  		<name>selfinfo</name>
  		<replaceName>SelfInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_selfinfo</name>
  		<replaceName>SelfInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_selfinfo</name>
  		<replaceName>SelfInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfinfo</name>
  		<replaceName>SelfInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarUserInfo& selfinfo() const;
  inline ::pb::TGuildWarUserInfo* mutable_selfinfo();
  inline ::pb::TGuildWarUserInfo* release_selfinfo();
  inline void set_allocated_selfinfo(::pb::TGuildWarUserInfo* selfinfo);

  // repeated .pb.TGuildWarOtherUserInfo ArrOtherUserInfo = 4;
  inline int arrotheruserinfo_size() const;
  inline void clear_arrotheruserinfo();
  static const int kArrOtherUserInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarFieldInfo</name>
  	<Function>
  		<name>arrotheruserinfo</name>
  		<replaceName>ArrOtherUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrotheruserinfo</name>
  		<replaceName>ArrOtherUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrotheruserinfo</name>
  		<replaceName>ArrOtherUserInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrotheruserinfo</name>
  		<replaceName>ArrOtherUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrotheruserinfo_size</name>
  		<replaceName>ArrOtherUserInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarOtherUserInfo& arrotheruserinfo(int index) const;
  inline ::pb::TGuildWarOtherUserInfo* mutable_arrotheruserinfo(int index);
  inline ::pb::TGuildWarOtherUserInfo* add_arrotheruserinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarOtherUserInfo >&
      arrotheruserinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarOtherUserInfo >*
      mutable_arrotheruserinfo();

  // optional .pb.TGuildWarMessageInfo NotReadMsgInfo = 5;
  inline bool has_notreadmsginfo() const;
  inline void clear_notreadmsginfo();
  static const int kNotReadMsgInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarFieldInfo</name>
  	<Function>
  		<name>notreadmsginfo</name>
  		<replaceName>NotReadMsgInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_notreadmsginfo</name>
  		<replaceName>NotReadMsgInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_notreadmsginfo</name>
  		<replaceName>NotReadMsgInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_notreadmsginfo</name>
  		<replaceName>NotReadMsgInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarMessageInfo& notreadmsginfo() const;
  inline ::pb::TGuildWarMessageInfo* mutable_notreadmsginfo();
  inline ::pb::TGuildWarMessageInfo* release_notreadmsginfo();
  inline void set_allocated_notreadmsginfo(::pb::TGuildWarMessageInfo* notreadmsginfo);

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo1 = 6;
  inline int arrheroinfo1_size() const;
  inline void clear_arrheroinfo1();
  static const int kArrHeroInfo1FieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarFieldInfo</name>
  	<Function>
  		<name>arrheroinfo1</name>
  		<replaceName>ArrHeroInfo1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrheroinfo1</name>
  		<replaceName>ArrHeroInfo1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrheroinfo1</name>
  		<replaceName>ArrHeroInfo1</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrheroinfo1</name>
  		<replaceName>ArrHeroInfo1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrheroinfo1_size</name>
  		<replaceName>ArrHeroInfo1</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarHeroDetailInfo& arrheroinfo1(int index) const;
  inline ::pb::TGuildWarHeroDetailInfo* mutable_arrheroinfo1(int index);
  inline ::pb::TGuildWarHeroDetailInfo* add_arrheroinfo1();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >&
      arrheroinfo1() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >*
      mutable_arrheroinfo1();

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo2 = 7;
  inline int arrheroinfo2_size() const;
  inline void clear_arrheroinfo2();
  static const int kArrHeroInfo2FieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarFieldInfo</name>
  	<Function>
  		<name>arrheroinfo2</name>
  		<replaceName>ArrHeroInfo2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrheroinfo2</name>
  		<replaceName>ArrHeroInfo2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrheroinfo2</name>
  		<replaceName>ArrHeroInfo2</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrheroinfo2</name>
  		<replaceName>ArrHeroInfo2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrheroinfo2_size</name>
  		<replaceName>ArrHeroInfo2</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarHeroDetailInfo& arrheroinfo2(int index) const;
  inline ::pb::TGuildWarHeroDetailInfo* mutable_arrheroinfo2(int index);
  inline ::pb::TGuildWarHeroDetailInfo* add_arrheroinfo2();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >&
      arrheroinfo2() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >*
      mutable_arrheroinfo2();

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 8;
  inline int arrusersimpleinfo_size() const;
  inline void clear_arrusersimpleinfo();
  static const int kArrUserSimpleInfoFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarFieldInfo</name>
  	<Function>
  		<name>arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrusersimpleinfo_size</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& arrusersimpleinfo(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_arrusersimpleinfo(int index);
  inline ::pb::TUserSimpleInfo* add_arrusersimpleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      arrusersimpleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_arrusersimpleinfo();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarFieldInfo)
 private:
  inline void set_has_selfinfo();
  inline void clear_has_selfinfo();
  inline void set_has_notreadmsginfo();
  inline void clear_has_notreadmsginfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTowerSimpleInfo > arrtowerinfo_;
  ::pb::TGuildWarUserInfo* selfinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarOtherUserInfo > arrotheruserinfo_;
  ::pb::TGuildWarMessageInfo* notreadmsginfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo > arrheroinfo1_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo > arrheroinfo2_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > arrusersimpleinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarFieldInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarTeamBaseInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarTeamBaseInfo : public ::google::protobuf::Message {
 public:
  TGuildWarTeamBaseInfo();
  virtual ~TGuildWarTeamBaseInfo();

  TGuildWarTeamBaseInfo(const TGuildWarTeamBaseInfo& from);

  inline TGuildWarTeamBaseInfo& operator=(const TGuildWarTeamBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarTeamBaseInfo& default_instance();

  void Swap(TGuildWarTeamBaseInfo* other);

  // implements Message ----------------------------------------------

  TGuildWarTeamBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarTeamBaseInfo& from);
  void MergeFrom(const TGuildWarTeamBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 1;
  inline bool has_teamidinfo() const;
  inline void clear_teamidinfo();
  static const int kTeamIdInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTeamBaseInfo</name>
  	<Function>
  		<name>teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamIdInfo& teamidinfo() const;
  inline ::pb::TGuildWarTeamIdInfo* mutable_teamidinfo();
  inline ::pb::TGuildWarTeamIdInfo* release_teamidinfo();
  inline void set_allocated_teamidinfo(::pb::TGuildWarTeamIdInfo* teamidinfo);

  // optional uint64 FightForce = 2;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTeamBaseInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint32 TowerId = 3;
  inline bool has_towerid() const;
  inline void clear_towerid();
  static const int kTowerIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTeamBaseInfo</name>
  	<Function>
  		<name>towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 towerid() const;
  inline void set_towerid(::google::protobuf::uint32 value);

  // optional uint32 Htid = 4;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTeamBaseInfo</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint32 BattleInfoId = 5;
  inline bool has_battleinfoid() const;
  inline void clear_battleinfoid();
  static const int kBattleInfoIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTeamBaseInfo</name>
  	<Function>
  		<name>battleinfoid</name>
  		<replaceName>BattleInfoId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleinfoid</name>
  		<replaceName>BattleInfoId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleinfoid</name>
  		<replaceName>BattleInfoId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleinfoid() const;
  inline void set_battleinfoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarTeamBaseInfo)
 private:
  inline void set_has_teamidinfo();
  inline void clear_has_teamidinfo();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_towerid();
  inline void clear_has_towerid();
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_battleinfoid();
  inline void clear_has_battleinfoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarTeamIdInfo* teamidinfo_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 towerid_;
  ::google::protobuf::uint32 htid_;
  ::google::protobuf::uint32 battleinfoid_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarTeamBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarTeamInfoWithHp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarTeamInfoWithHp : public ::google::protobuf::Message {
 public:
  TGuildWarTeamInfoWithHp();
  virtual ~TGuildWarTeamInfoWithHp();

  TGuildWarTeamInfoWithHp(const TGuildWarTeamInfoWithHp& from);

  inline TGuildWarTeamInfoWithHp& operator=(const TGuildWarTeamInfoWithHp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarTeamInfoWithHp& default_instance();

  void Swap(TGuildWarTeamInfoWithHp* other);

  // implements Message ----------------------------------------------

  TGuildWarTeamInfoWithHp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarTeamInfoWithHp& from);
  void MergeFrom(const TGuildWarTeamInfoWithHp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildWarTeamBaseInfo TeamBaseInfo = 1;
  inline bool has_teambaseinfo() const;
  inline void clear_teambaseinfo();
  static const int kTeamBaseInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTeamInfoWithHp</name>
  	<Function>
  		<name>teambaseinfo</name>
  		<replaceName>TeamBaseInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teambaseinfo</name>
  		<replaceName>TeamBaseInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teambaseinfo</name>
  		<replaceName>TeamBaseInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teambaseinfo</name>
  		<replaceName>TeamBaseInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamBaseInfo& teambaseinfo() const;
  inline ::pb::TGuildWarTeamBaseInfo* mutable_teambaseinfo();
  inline ::pb::TGuildWarTeamBaseInfo* release_teambaseinfo();
  inline void set_allocated_teambaseinfo(::pb::TGuildWarTeamBaseInfo* teambaseinfo);

  // optional uint32 CurHpPer = 2;
  inline bool has_curhpper() const;
  inline void clear_curhpper();
  static const int kCurHpPerFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTeamInfoWithHp</name>
  	<Function>
  		<name>curhpper</name>
  		<replaceName>CurHpPer</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhpper</name>
  		<replaceName>CurHpPer</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhpper</name>
  		<replaceName>CurHpPer</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curhpper() const;
  inline void set_curhpper(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarTeamInfoWithHp)
 private:
  inline void set_has_teambaseinfo();
  inline void clear_has_teambaseinfo();
  inline void set_has_curhpper();
  inline void clear_has_curhpper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarTeamBaseInfo* teambaseinfo_;
  ::google::protobuf::uint32 curhpper_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarTeamInfoWithHp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarHeroDetailInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarHeroDetailInfo : public ::google::protobuf::Message {
 public:
  TGuildWarHeroDetailInfo();
  virtual ~TGuildWarHeroDetailInfo();

  TGuildWarHeroDetailInfo(const TGuildWarHeroDetailInfo& from);

  inline TGuildWarHeroDetailInfo& operator=(const TGuildWarHeroDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarHeroDetailInfo& default_instance();

  void Swap(TGuildWarHeroDetailInfo* other);

  // implements Message ----------------------------------------------

  TGuildWarHeroDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarHeroDetailInfo& from);
  void MergeFrom(const TGuildWarHeroDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarHeroDetailInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 Hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarHeroDetailInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 Pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarHeroDetailInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 Htid = 4;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarHeroDetailInfo</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint32 Level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarHeroDetailInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 StarLv = 6;
  inline bool has_starlv() const;
  inline void clear_starlv();
  static const int kStarLvFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarHeroDetailInfo</name>
  	<Function>
  		<name>starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starlv() const;
  inline void set_starlv(::google::protobuf::uint32 value);

  // optional uint32 AdvLv = 7;
  inline bool has_advlv() const;
  inline void clear_advlv();
  static const int kAdvLvFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarHeroDetailInfo</name>
  	<Function>
  		<name>advlv</name>
  		<replaceName>AdvLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_advlv</name>
  		<replaceName>AdvLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_advlv</name>
  		<replaceName>AdvLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 advlv() const;
  inline void set_advlv(::google::protobuf::uint32 value);

  // optional uint32 CurHpPer = 8;
  inline bool has_curhpper() const;
  inline void clear_curhpper();
  static const int kCurHpPerFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarHeroDetailInfo</name>
  	<Function>
  		<name>curhpper</name>
  		<replaceName>CurHpPer</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhpper</name>
  		<replaceName>CurHpPer</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhpper</name>
  		<replaceName>CurHpPer</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curhpper() const;
  inline void set_curhpper(::google::protobuf::uint32 value);

  // optional uint32 CurRage = 9;
  inline bool has_currage() const;
  inline void clear_currage();
  static const int kCurRageFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarHeroDetailInfo</name>
  	<Function>
  		<name>currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 currage() const;
  inline void set_currage(::google::protobuf::uint32 value);

  // optional uint64 FightForce = 10;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarHeroDetailInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarHeroDetailInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_starlv();
  inline void clear_has_starlv();
  inline void set_has_advlv();
  inline void clear_has_advlv();
  inline void set_has_curhpper();
  inline void clear_has_curhpper();
  inline void set_has_currage();
  inline void clear_has_currage();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 htid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 starlv_;
  ::google::protobuf::uint32 advlv_;
  ::google::protobuf::uint32 curhpper_;
  ::google::protobuf::uint32 currage_;
  ::google::protobuf::uint64 fightforce_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarHeroDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarTeamDetailInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarTeamDetailInfo : public ::google::protobuf::Message {
 public:
  TGuildWarTeamDetailInfo();
  virtual ~TGuildWarTeamDetailInfo();

  TGuildWarTeamDetailInfo(const TGuildWarTeamDetailInfo& from);

  inline TGuildWarTeamDetailInfo& operator=(const TGuildWarTeamDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarTeamDetailInfo& default_instance();

  void Swap(TGuildWarTeamDetailInfo* other);

  // implements Message ----------------------------------------------

  TGuildWarTeamDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarTeamDetailInfo& from);
  void MergeFrom(const TGuildWarTeamDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildWarTeamBaseInfo TeamBaseInfo = 1;
  inline bool has_teambaseinfo() const;
  inline void clear_teambaseinfo();
  static const int kTeamBaseInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTeamDetailInfo</name>
  	<Function>
  		<name>teambaseinfo</name>
  		<replaceName>TeamBaseInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teambaseinfo</name>
  		<replaceName>TeamBaseInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teambaseinfo</name>
  		<replaceName>TeamBaseInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teambaseinfo</name>
  		<replaceName>TeamBaseInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamBaseInfo& teambaseinfo() const;
  inline ::pb::TGuildWarTeamBaseInfo* mutable_teambaseinfo();
  inline ::pb::TGuildWarTeamBaseInfo* release_teambaseinfo();
  inline void set_allocated_teambaseinfo(::pb::TGuildWarTeamBaseInfo* teambaseinfo);

  // repeated .pb.TGuildWarHeroDetailInfo ArrFormation = 2;
  inline int arrformation_size() const;
  inline void clear_arrformation();
  static const int kArrFormationFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTeamDetailInfo</name>
  	<Function>
  		<name>arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrformation_size</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarHeroDetailInfo& arrformation(int index) const;
  inline ::pb::TGuildWarHeroDetailInfo* mutable_arrformation(int index);
  inline ::pb::TGuildWarHeroDetailInfo* add_arrformation();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >&
      arrformation() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >*
      mutable_arrformation();

  // optional uint32 AttackedNum = 3;
  inline bool has_attackednum() const;
  inline void clear_attackednum();
  static const int kAttackedNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTeamDetailInfo</name>
  	<Function>
  		<name>attackednum</name>
  		<replaceName>AttackedNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackednum</name>
  		<replaceName>AttackedNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackednum</name>
  		<replaceName>AttackedNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attackednum() const;
  inline void set_attackednum(::google::protobuf::uint32 value);

  // optional uint32 ReducedMorale = 4;
  inline bool has_reducedmorale() const;
  inline void clear_reducedmorale();
  static const int kReducedMoraleFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTeamDetailInfo</name>
  	<Function>
  		<name>reducedmorale</name>
  		<replaceName>ReducedMorale</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reducedmorale</name>
  		<replaceName>ReducedMorale</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reducedmorale</name>
  		<replaceName>ReducedMorale</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 reducedmorale() const;
  inline void set_reducedmorale(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarTeamDetailInfo)
 private:
  inline void set_has_teambaseinfo();
  inline void clear_has_teambaseinfo();
  inline void set_has_attackednum();
  inline void clear_has_attackednum();
  inline void set_has_reducedmorale();
  inline void clear_has_reducedmorale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarTeamBaseInfo* teambaseinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo > arrformation_;
  ::google::protobuf::uint32 attackednum_;
  ::google::protobuf::uint32 reducedmorale_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarTeamDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarBattleRecordInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarBattleRecordInfo : public ::google::protobuf::Message {
 public:
  TGuildWarBattleRecordInfo();
  virtual ~TGuildWarBattleRecordInfo();

  TGuildWarBattleRecordInfo(const TGuildWarBattleRecordInfo& from);

  inline TGuildWarBattleRecordInfo& operator=(const TGuildWarBattleRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarBattleRecordInfo& default_instance();

  void Swap(TGuildWarBattleRecordInfo* other);

  // implements Message ----------------------------------------------

  TGuildWarBattleRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarBattleRecordInfo& from);
  void MergeFrom(const TGuildWarBattleRecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 AttackUid = 1;
  inline bool has_attackuid() const;
  inline void clear_attackuid();
  static const int kAttackUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarBattleRecordInfo</name>
  	<Function>
  		<name>attackuid</name>
  		<replaceName>AttackUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackuid</name>
  		<replaceName>AttackUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackuid</name>
  		<replaceName>AttackUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 attackuid() const;
  inline void set_attackuid(::google::protobuf::uint64 value);

  // optional uint64 DefenseUid = 2;
  inline bool has_defenseuid() const;
  inline void clear_defenseuid();
  static const int kDefenseUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarBattleRecordInfo</name>
  	<Function>
  		<name>defenseuid</name>
  		<replaceName>DefenseUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defenseuid</name>
  		<replaceName>DefenseUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defenseuid</name>
  		<replaceName>DefenseUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 defenseuid() const;
  inline void set_defenseuid(::google::protobuf::uint64 value);

  // optional uint32 TowerId = 3;
  inline bool has_towerid() const;
  inline void clear_towerid();
  static const int kTowerIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarBattleRecordInfo</name>
  	<Function>
  		<name>towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 towerid() const;
  inline void set_towerid(::google::protobuf::uint32 value);

  // optional uint32 TeamIndex = 4;
  inline bool has_teamindex() const;
  inline void clear_teamindex();
  static const int kTeamIndexFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarBattleRecordInfo</name>
  	<Function>
  		<name>teamindex</name>
  		<replaceName>TeamIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamindex</name>
  		<replaceName>TeamIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamindex</name>
  		<replaceName>TeamIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamindex() const;
  inline void set_teamindex(::google::protobuf::uint32 value);

  // optional uint64 AttackFightForce = 5;
  inline bool has_attackfightforce() const;
  inline void clear_attackfightforce();
  static const int kAttackFightForceFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarBattleRecordInfo</name>
  	<Function>
  		<name>attackfightforce</name>
  		<replaceName>AttackFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackfightforce</name>
  		<replaceName>AttackFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackfightforce</name>
  		<replaceName>AttackFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 attackfightforce() const;
  inline void set_attackfightforce(::google::protobuf::uint64 value);

  // optional uint64 DefenseFightForce = 6;
  inline bool has_defensefightforce() const;
  inline void clear_defensefightforce();
  static const int kDefenseFightForceFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarBattleRecordInfo</name>
  	<Function>
  		<name>defensefightforce</name>
  		<replaceName>DefenseFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defensefightforce</name>
  		<replaceName>DefenseFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defensefightforce</name>
  		<replaceName>DefenseFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 defensefightforce() const;
  inline void set_defensefightforce(::google::protobuf::uint64 value);

  // optional uint64 RecordTime = 7;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarBattleRecordInfo</name>
  	<Function>
  		<name>recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordtime() const;
  inline void set_recordtime(::google::protobuf::uint64 value);

  // optional uint32 Success = 8;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarBattleRecordInfo</name>
  	<Function>
  		<name>success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 success() const;
  inline void set_success(::google::protobuf::uint32 value);

  // optional uint64 Rid = 9;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarBattleRecordInfo</name>
  	<Function>
  		<name>rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rid() const;
  inline void set_rid(::google::protobuf::uint64 value);

  // optional uint64 AttackGuildId = 10;
  inline bool has_attackguildid() const;
  inline void clear_attackguildid();
  static const int kAttackGuildIdFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarBattleRecordInfo</name>
  	<Function>
  		<name>attackguildid</name>
  		<replaceName>AttackGuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackguildid</name>
  		<replaceName>AttackGuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackguildid</name>
  		<replaceName>AttackGuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 attackguildid() const;
  inline void set_attackguildid(::google::protobuf::uint64 value);

  // optional uint64 DefenseGuildId = 11;
  inline bool has_defenseguildid() const;
  inline void clear_defenseguildid();
  static const int kDefenseGuildIdFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarBattleRecordInfo</name>
  	<Function>
  		<name>defenseguildid</name>
  		<replaceName>DefenseGuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defenseguildid</name>
  		<replaceName>DefenseGuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defenseguildid</name>
  		<replaceName>DefenseGuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 defenseguildid() const;
  inline void set_defenseguildid(::google::protobuf::uint64 value);

  // optional uint32 BattleInfoId = 12;
  inline bool has_battleinfoid() const;
  inline void clear_battleinfoid();
  static const int kBattleInfoIdFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarBattleRecordInfo</name>
  	<Function>
  		<name>battleinfoid</name>
  		<replaceName>BattleInfoId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleinfoid</name>
  		<replaceName>BattleInfoId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleinfoid</name>
  		<replaceName>BattleInfoId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleinfoid() const;
  inline void set_battleinfoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarBattleRecordInfo)
 private:
  inline void set_has_attackuid();
  inline void clear_has_attackuid();
  inline void set_has_defenseuid();
  inline void clear_has_defenseuid();
  inline void set_has_towerid();
  inline void clear_has_towerid();
  inline void set_has_teamindex();
  inline void clear_has_teamindex();
  inline void set_has_attackfightforce();
  inline void clear_has_attackfightforce();
  inline void set_has_defensefightforce();
  inline void clear_has_defensefightforce();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_attackguildid();
  inline void clear_has_attackguildid();
  inline void set_has_defenseguildid();
  inline void clear_has_defenseguildid();
  inline void set_has_battleinfoid();
  inline void clear_has_battleinfoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 attackuid_;
  ::google::protobuf::uint64 defenseuid_;
  ::google::protobuf::uint32 towerid_;
  ::google::protobuf::uint32 teamindex_;
  ::google::protobuf::uint64 attackfightforce_;
  ::google::protobuf::uint64 defensefightforce_;
  ::google::protobuf::uint64 recordtime_;
  ::google::protobuf::uint64 rid_;
  ::google::protobuf::uint64 attackguildid_;
  ::google::protobuf::uint32 success_;
  ::google::protobuf::uint32 battleinfoid_;
  ::google::protobuf::uint64 defenseguildid_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarBattleRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarRankInfo : public ::google::protobuf::Message {
 public:
  TGuildWarRankInfo();
  virtual ~TGuildWarRankInfo();

  TGuildWarRankInfo(const TGuildWarRankInfo& from);

  inline TGuildWarRankInfo& operator=(const TGuildWarRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarRankInfo& default_instance();

  void Swap(TGuildWarRankInfo* other);

  // implements Message ----------------------------------------------

  TGuildWarRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarRankInfo& from);
  void MergeFrom(const TGuildWarRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarRankInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 DefeatNum = 2;
  inline bool has_defeatnum() const;
  inline void clear_defeatnum();
  static const int kDefeatNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarRankInfo</name>
  	<Function>
  		<name>defeatnum</name>
  		<replaceName>DefeatNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defeatnum</name>
  		<replaceName>DefeatNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defeatnum</name>
  		<replaceName>DefeatNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defeatnum() const;
  inline void set_defeatnum(::google::protobuf::uint32 value);

  // optional uint64 DefeatTime = 3;
  inline bool has_defeattime() const;
  inline void clear_defeattime();
  static const int kDefeatTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarRankInfo</name>
  	<Function>
  		<name>defeattime</name>
  		<replaceName>DefeatTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defeattime</name>
  		<replaceName>DefeatTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defeattime</name>
  		<replaceName>DefeatTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 defeattime() const;
  inline void set_defeattime(::google::protobuf::uint64 value);

  // optional uint64 DamageNum = 4;
  inline bool has_damagenum() const;
  inline void clear_damagenum();
  static const int kDamageNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarRankInfo</name>
  	<Function>
  		<name>damagenum</name>
  		<replaceName>DamageNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damagenum</name>
  		<replaceName>DamageNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagenum</name>
  		<replaceName>DamageNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damagenum() const;
  inline void set_damagenum(::google::protobuf::uint64 value);

  // optional uint64 DamageTime = 5;
  inline bool has_damagetime() const;
  inline void clear_damagetime();
  static const int kDamageTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarRankInfo</name>
  	<Function>
  		<name>damagetime</name>
  		<replaceName>DamageTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damagetime</name>
  		<replaceName>DamageTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagetime</name>
  		<replaceName>DamageTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damagetime() const;
  inline void set_damagetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarRankInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_defeatnum();
  inline void clear_has_defeatnum();
  inline void set_has_defeattime();
  inline void clear_has_defeattime();
  inline void set_has_damagenum();
  inline void clear_has_damagenum();
  inline void set_has_damagetime();
  inline void clear_has_damagetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 defeattime_;
  ::google::protobuf::uint64 damagenum_;
  ::google::protobuf::uint64 damagetime_;
  ::google::protobuf::uint32 defeatnum_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarStageInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarStageInfo : public ::google::protobuf::Message {
 public:
  TGuildWarStageInfo();
  virtual ~TGuildWarStageInfo();

  TGuildWarStageInfo(const TGuildWarStageInfo& from);

  inline TGuildWarStageInfo& operator=(const TGuildWarStageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarStageInfo& default_instance();

  void Swap(TGuildWarStageInfo* other);

  // implements Message ----------------------------------------------

  TGuildWarStageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarStageInfo& from);
  void MergeFrom(const TGuildWarStageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EGuildWarStage CurStage = 1;
  inline bool has_curstage() const;
  inline void clear_curstage();
  static const int kCurStageFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>curstage</name>
  		<replaceName>CurStage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curstage</name>
  		<replaceName>CurStage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curstage</name>
  		<replaceName>CurStage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EGuildWarStage curstage() const;
  inline void set_curstage(::pb::EGuildWarStage value);

  // optional uint64 BeginTime = 2;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 begintime() const;
  inline void set_begintime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional uint64 SignUpTime = 4;
  inline bool has_signuptime() const;
  inline void clear_signuptime();
  static const int kSignUpTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>signuptime</name>
  		<replaceName>SignUpTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signuptime</name>
  		<replaceName>SignUpTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signuptime</name>
  		<replaceName>SignUpTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 signuptime() const;
  inline void set_signuptime(::google::protobuf::uint64 value);

  // optional uint32 SelfGLevel = 5;
  inline bool has_selfglevel() const;
  inline void clear_selfglevel();
  static const int kSelfGLevelFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>selfglevel</name>
  		<replaceName>SelfGLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_selfglevel</name>
  		<replaceName>SelfGLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfglevel</name>
  		<replaceName>SelfGLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 selfglevel() const;
  inline void set_selfglevel(::google::protobuf::uint32 value);

  // optional uint32 SelfGPos = 6;
  inline bool has_selfgpos() const;
  inline void clear_selfgpos();
  static const int kSelfGPosFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>selfgpos</name>
  		<replaceName>SelfGPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_selfgpos</name>
  		<replaceName>SelfGPos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfgpos</name>
  		<replaceName>SelfGPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 selfgpos() const;
  inline void set_selfgpos(::google::protobuf::uint32 value);

  // optional uint64 TargetGid = 7;
  inline bool has_targetgid() const;
  inline void clear_targetgid();
  static const int kTargetGidFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>targetgid</name>
  		<replaceName>TargetGid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetgid</name>
  		<replaceName>TargetGid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetgid</name>
  		<replaceName>TargetGid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetgid() const;
  inline void set_targetgid(::google::protobuf::uint64 value);

  // optional string TargetGName = 8;
  inline bool has_targetgname() const;
  inline void clear_targetgname();
  static const int kTargetGNameFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>targetgname</name>
  		<replaceName>TargetGName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetgname</name>
  		<replaceName>TargetGName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetgname</name>
  		<replaceName>TargetGName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& targetgname() const;
  inline void set_targetgname(const ::std::string& value);
  inline void set_targetgname(const char* value);
  inline void set_targetgname(const char* value, size_t size);
  inline ::std::string* mutable_targetgname();
  inline ::std::string* release_targetgname();
  inline void set_allocated_targetgname(::std::string* targetgname);

  // optional string TargetServerId = 9;
  inline bool has_targetserverid() const;
  inline void clear_targetserverid();
  static const int kTargetServerIdFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>targetserverid</name>
  		<replaceName>TargetServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetserverid</name>
  		<replaceName>TargetServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetserverid</name>
  		<replaceName>TargetServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& targetserverid() const;
  inline void set_targetserverid(const ::std::string& value);
  inline void set_targetserverid(const char* value);
  inline void set_targetserverid(const char* value, size_t size);
  inline ::std::string* mutable_targetserverid();
  inline ::std::string* release_targetserverid();
  inline void set_allocated_targetserverid(::std::string* targetserverid);

  // optional uint32 TargetGLevel = 10;
  inline bool has_targetglevel() const;
  inline void clear_targetglevel();
  static const int kTargetGLevelFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>targetglevel</name>
  		<replaceName>TargetGLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetglevel</name>
  		<replaceName>TargetGLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetglevel</name>
  		<replaceName>TargetGLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetglevel() const;
  inline void set_targetglevel(::google::protobuf::uint32 value);

  // repeated .pb.EGuildWarResult ArrCallForBattleResult = 11;
  inline int arrcallforbattleresult_size() const;
  inline void clear_arrcallforbattleresult();
  static const int kArrCallForBattleResultFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>arrcallforbattleresult</name>
  		<replaceName>ArrCallForBattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrcallforbattleresult</name>
  		<replaceName>ArrCallForBattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrcallforbattleresult</name>
  		<replaceName>ArrCallForBattleResult</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrcallforbattleresult</name>
  		<replaceName>ArrCallForBattleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrcallforbattleresult_size</name>
  		<replaceName>ArrCallForBattleResult</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EGuildWarResult arrcallforbattleresult(int index) const;
  inline void set_arrcallforbattleresult(int index, ::pb::EGuildWarResult value);
  inline void add_arrcallforbattleresult(::pb::EGuildWarResult value);
  inline const ::google::protobuf::RepeatedField<int>& arrcallforbattleresult() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_arrcallforbattleresult();

  // optional .pb.EGuildWarResult GuildWarResult = 12;
  inline bool has_guildwarresult() const;
  inline void clear_guildwarresult();
  static const int kGuildWarResultFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>guildwarresult</name>
  		<replaceName>GuildWarResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildwarresult</name>
  		<replaceName>GuildWarResult</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildwarresult</name>
  		<replaceName>GuildWarResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EGuildWarResult guildwarresult() const;
  inline void set_guildwarresult(::pb::EGuildWarResult value);

  // optional string SceneId = 13;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& sceneid() const;
  inline void set_sceneid(const ::std::string& value);
  inline void set_sceneid(const char* value);
  inline void set_sceneid(const char* value, size_t size);
  inline ::std::string* mutable_sceneid();
  inline ::std::string* release_sceneid();
  inline void set_allocated_sceneid(::std::string* sceneid);

  // optional uint32 SurplusAttackNum = 14;
  inline bool has_surplusattacknum() const;
  inline void clear_surplusattacknum();
  static const int kSurplusAttackNumFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>surplusattacknum</name>
  		<replaceName>SurplusAttackNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_surplusattacknum</name>
  		<replaceName>SurplusAttackNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_surplusattacknum</name>
  		<replaceName>SurplusAttackNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 surplusattacknum() const;
  inline void set_surplusattacknum(::google::protobuf::uint32 value);

  // optional bool IsSetCallForBattleHero = 15;
  inline bool has_issetcallforbattlehero() const;
  inline void clear_issetcallforbattlehero();
  static const int kIsSetCallForBattleHeroFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>issetcallforbattlehero</name>
  		<replaceName>IsSetCallForBattleHero</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_issetcallforbattlehero</name>
  		<replaceName>IsSetCallForBattleHero</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_issetcallforbattlehero</name>
  		<replaceName>IsSetCallForBattleHero</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool issetcallforbattlehero() const;
  inline void set_issetcallforbattlehero(bool value);

  // repeated .pb.TGuildWarTowerSimpleInfo ArrSelfTowerInfo = 16;
  inline int arrselftowerinfo_size() const;
  inline void clear_arrselftowerinfo();
  static const int kArrSelfTowerInfoFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>arrselftowerinfo</name>
  		<replaceName>ArrSelfTowerInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrselftowerinfo</name>
  		<replaceName>ArrSelfTowerInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrselftowerinfo</name>
  		<replaceName>ArrSelfTowerInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrselftowerinfo</name>
  		<replaceName>ArrSelfTowerInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrselftowerinfo_size</name>
  		<replaceName>ArrSelfTowerInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTowerSimpleInfo& arrselftowerinfo(int index) const;
  inline ::pb::TGuildWarTowerSimpleInfo* mutable_arrselftowerinfo(int index);
  inline ::pb::TGuildWarTowerSimpleInfo* add_arrselftowerinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTowerSimpleInfo >&
      arrselftowerinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTowerSimpleInfo >*
      mutable_arrselftowerinfo();

  // repeated .pb.TGuildWarTeamBaseInfo ArrSelfTeamBaseInfo = 17;
  inline int arrselfteambaseinfo_size() const;
  inline void clear_arrselfteambaseinfo();
  static const int kArrSelfTeamBaseInfoFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageInfo</name>
  	<Function>
  		<name>arrselfteambaseinfo</name>
  		<replaceName>ArrSelfTeamBaseInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrselfteambaseinfo</name>
  		<replaceName>ArrSelfTeamBaseInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrselfteambaseinfo</name>
  		<replaceName>ArrSelfTeamBaseInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrselfteambaseinfo</name>
  		<replaceName>ArrSelfTeamBaseInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrselfteambaseinfo_size</name>
  		<replaceName>ArrSelfTeamBaseInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamBaseInfo& arrselfteambaseinfo(int index) const;
  inline ::pb::TGuildWarTeamBaseInfo* mutable_arrselfteambaseinfo(int index);
  inline ::pb::TGuildWarTeamBaseInfo* add_arrselfteambaseinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamBaseInfo >&
      arrselfteambaseinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamBaseInfo >*
      mutable_arrselfteambaseinfo();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarStageInfo)
 private:
  inline void set_has_curstage();
  inline void clear_has_curstage();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_signuptime();
  inline void clear_has_signuptime();
  inline void set_has_selfglevel();
  inline void clear_has_selfglevel();
  inline void set_has_selfgpos();
  inline void clear_has_selfgpos();
  inline void set_has_targetgid();
  inline void clear_has_targetgid();
  inline void set_has_targetgname();
  inline void clear_has_targetgname();
  inline void set_has_targetserverid();
  inline void clear_has_targetserverid();
  inline void set_has_targetglevel();
  inline void clear_has_targetglevel();
  inline void set_has_guildwarresult();
  inline void clear_has_guildwarresult();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_surplusattacknum();
  inline void clear_has_surplusattacknum();
  inline void set_has_issetcallforbattlehero();
  inline void clear_has_issetcallforbattlehero();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 begintime_;
  ::google::protobuf::uint64 endtime_;
  int curstage_;
  ::google::protobuf::uint32 selfglevel_;
  ::google::protobuf::uint64 signuptime_;
  ::google::protobuf::uint64 targetgid_;
  ::std::string* targetgname_;
  ::google::protobuf::uint32 selfgpos_;
  ::google::protobuf::uint32 targetglevel_;
  ::std::string* targetserverid_;
  ::google::protobuf::RepeatedField<int> arrcallforbattleresult_;
  ::std::string* sceneid_;
  int guildwarresult_;
  ::google::protobuf::uint32 surplusattacknum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTowerSimpleInfo > arrselftowerinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamBaseInfo > arrselfteambaseinfo_;
  bool issetcallforbattlehero_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarStageInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetServerTeamInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetServerTeamInfoRsp : public ::google::protobuf::Message {
 public:
  TGuildWarGetServerTeamInfoRsp();
  virtual ~TGuildWarGetServerTeamInfoRsp();

  TGuildWarGetServerTeamInfoRsp(const TGuildWarGetServerTeamInfoRsp& from);

  inline TGuildWarGetServerTeamInfoRsp& operator=(const TGuildWarGetServerTeamInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetServerTeamInfoRsp& default_instance();

  void Swap(TGuildWarGetServerTeamInfoRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarGetServerTeamInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetServerTeamInfoRsp& from);
  void MergeFrom(const TGuildWarGetServerTeamInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetServerTeamInfoRsp</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 NeedOpenDay = 2;
  inline bool has_needopenday() const;
  inline void clear_needopenday();
  static const int kNeedOpenDayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetServerTeamInfoRsp</name>
  	<Function>
  		<name>needopenday</name>
  		<replaceName>NeedOpenDay</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_needopenday</name>
  		<replaceName>NeedOpenDay</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_needopenday</name>
  		<replaceName>NeedOpenDay</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 needopenday() const;
  inline void set_needopenday(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetServerTeamInfoRsp)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_needopenday();
  inline void clear_has_needopenday();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 needopenday_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetServerTeamInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetStageInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetStageInfoRsp : public ::google::protobuf::Message {
 public:
  TGuildWarGetStageInfoRsp();
  virtual ~TGuildWarGetStageInfoRsp();

  TGuildWarGetStageInfoRsp(const TGuildWarGetStageInfoRsp& from);

  inline TGuildWarGetStageInfoRsp& operator=(const TGuildWarGetStageInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetStageInfoRsp& default_instance();

  void Swap(TGuildWarGetStageInfoRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarGetStageInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetStageInfoRsp& from);
  void MergeFrom(const TGuildWarGetStageInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildWarStageInfo StageInfo = 1;
  inline bool has_stageinfo() const;
  inline void clear_stageinfo();
  static const int kStageInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetStageInfoRsp</name>
  	<Function>
  		<name>stageinfo</name>
  		<replaceName>StageInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stageinfo</name>
  		<replaceName>StageInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_stageinfo</name>
  		<replaceName>StageInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stageinfo</name>
  		<replaceName>StageInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarStageInfo& stageinfo() const;
  inline ::pb::TGuildWarStageInfo* mutable_stageinfo();
  inline ::pb::TGuildWarStageInfo* release_stageinfo();
  inline void set_allocated_stageinfo(::pb::TGuildWarStageInfo* stageinfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetStageInfoRsp)
 private:
  inline void set_has_stageinfo();
  inline void clear_has_stageinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarStageInfo* stageinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetStageInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarEnterFieldRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarEnterFieldRsp : public ::google::protobuf::Message {
 public:
  TGuildWarEnterFieldRsp();
  virtual ~TGuildWarEnterFieldRsp();

  TGuildWarEnterFieldRsp(const TGuildWarEnterFieldRsp& from);

  inline TGuildWarEnterFieldRsp& operator=(const TGuildWarEnterFieldRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarEnterFieldRsp& default_instance();

  void Swap(TGuildWarEnterFieldRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarEnterFieldRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarEnterFieldRsp& from);
  void MergeFrom(const TGuildWarEnterFieldRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildWarFieldInfo FieldInfo = 1;
  inline bool has_fieldinfo() const;
  inline void clear_fieldinfo();
  static const int kFieldInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarEnterFieldRsp</name>
  	<Function>
  		<name>fieldinfo</name>
  		<replaceName>FieldInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fieldinfo</name>
  		<replaceName>FieldInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_fieldinfo</name>
  		<replaceName>FieldInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldinfo</name>
  		<replaceName>FieldInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarFieldInfo& fieldinfo() const;
  inline ::pb::TGuildWarFieldInfo* mutable_fieldinfo();
  inline ::pb::TGuildWarFieldInfo* release_fieldinfo();
  inline void set_allocated_fieldinfo(::pb::TGuildWarFieldInfo* fieldinfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarEnterFieldRsp)
 private:
  inline void set_has_fieldinfo();
  inline void clear_has_fieldinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarFieldInfo* fieldinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarEnterFieldRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetFieldInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetFieldInfoRsp : public ::google::protobuf::Message {
 public:
  TGuildWarGetFieldInfoRsp();
  virtual ~TGuildWarGetFieldInfoRsp();

  TGuildWarGetFieldInfoRsp(const TGuildWarGetFieldInfoRsp& from);

  inline TGuildWarGetFieldInfoRsp& operator=(const TGuildWarGetFieldInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetFieldInfoRsp& default_instance();

  void Swap(TGuildWarGetFieldInfoRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarGetFieldInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetFieldInfoRsp& from);
  void MergeFrom(const TGuildWarGetFieldInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildWarFieldInfo FieldInfo = 1;
  inline bool has_fieldinfo() const;
  inline void clear_fieldinfo();
  static const int kFieldInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetFieldInfoRsp</name>
  	<Function>
  		<name>fieldinfo</name>
  		<replaceName>FieldInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fieldinfo</name>
  		<replaceName>FieldInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_fieldinfo</name>
  		<replaceName>FieldInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldinfo</name>
  		<replaceName>FieldInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarFieldInfo& fieldinfo() const;
  inline ::pb::TGuildWarFieldInfo* mutable_fieldinfo();
  inline ::pb::TGuildWarFieldInfo* release_fieldinfo();
  inline void set_allocated_fieldinfo(::pb::TGuildWarFieldInfo* fieldinfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetFieldInfoRsp)
 private:
  inline void set_has_fieldinfo();
  inline void clear_has_fieldinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarFieldInfo* fieldinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetFieldInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarSetTeamFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarSetTeamFormationReq : public ::google::protobuf::Message {
 public:
  TGuildWarSetTeamFormationReq();
  virtual ~TGuildWarSetTeamFormationReq();

  TGuildWarSetTeamFormationReq(const TGuildWarSetTeamFormationReq& from);

  inline TGuildWarSetTeamFormationReq& operator=(const TGuildWarSetTeamFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarSetTeamFormationReq& default_instance();

  void Swap(TGuildWarSetTeamFormationReq* other);

  // implements Message ----------------------------------------------

  TGuildWarSetTeamFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarSetTeamFormationReq& from);
  void MergeFrom(const TGuildWarSetTeamFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWarTeamFormationInfo ArrTeamFormation = 1;
  inline int arrteamformation_size() const;
  inline void clear_arrteamformation();
  static const int kArrTeamFormationFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarSetTeamFormationReq</name>
  	<Function>
  		<name>arrteamformation</name>
  		<replaceName>ArrTeamFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrteamformation</name>
  		<replaceName>ArrTeamFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrteamformation</name>
  		<replaceName>ArrTeamFormation</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrteamformation</name>
  		<replaceName>ArrTeamFormation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrteamformation_size</name>
  		<replaceName>ArrTeamFormation</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamFormationInfo& arrteamformation(int index) const;
  inline ::pb::TGuildWarTeamFormationInfo* mutable_arrteamformation(int index);
  inline ::pb::TGuildWarTeamFormationInfo* add_arrteamformation();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamFormationInfo >&
      arrteamformation() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamFormationInfo >*
      mutable_arrteamformation();

  // optional bool UseHistory = 2;
  inline bool has_usehistory() const;
  inline void clear_usehistory();
  static const int kUseHistoryFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarSetTeamFormationReq</name>
  	<Function>
  		<name>usehistory</name>
  		<replaceName>UseHistory</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usehistory</name>
  		<replaceName>UseHistory</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usehistory</name>
  		<replaceName>UseHistory</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool usehistory() const;
  inline void set_usehistory(bool value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarSetTeamFormationReq)
 private:
  inline void set_has_usehistory();
  inline void clear_has_usehistory();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamFormationInfo > arrteamformation_;
  bool usehistory_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarSetTeamFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarSetTeamFormationRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarSetTeamFormationRsp : public ::google::protobuf::Message {
 public:
  TGuildWarSetTeamFormationRsp();
  virtual ~TGuildWarSetTeamFormationRsp();

  TGuildWarSetTeamFormationRsp(const TGuildWarSetTeamFormationRsp& from);

  inline TGuildWarSetTeamFormationRsp& operator=(const TGuildWarSetTeamFormationRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarSetTeamFormationRsp& default_instance();

  void Swap(TGuildWarSetTeamFormationRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarSetTeamFormationRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarSetTeamFormationRsp& from);
  void MergeFrom(const TGuildWarSetTeamFormationRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWarUserTeamInfo ArrTeamInfo = 1;
  inline int arrteaminfo_size() const;
  inline void clear_arrteaminfo();
  static const int kArrTeamInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarSetTeamFormationRsp</name>
  	<Function>
  		<name>arrteaminfo</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrteaminfo</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrteaminfo</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrteaminfo</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrteaminfo_size</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarUserTeamInfo& arrteaminfo(int index) const;
  inline ::pb::TGuildWarUserTeamInfo* mutable_arrteaminfo(int index);
  inline ::pb::TGuildWarUserTeamInfo* add_arrteaminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserTeamInfo >&
      arrteaminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserTeamInfo >*
      mutable_arrteaminfo();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarSetTeamFormationRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserTeamInfo > arrteaminfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarSetTeamFormationRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarSetCallForBattleHeroReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarSetCallForBattleHeroReq : public ::google::protobuf::Message {
 public:
  TGuildWarSetCallForBattleHeroReq();
  virtual ~TGuildWarSetCallForBattleHeroReq();

  TGuildWarSetCallForBattleHeroReq(const TGuildWarSetCallForBattleHeroReq& from);

  inline TGuildWarSetCallForBattleHeroReq& operator=(const TGuildWarSetCallForBattleHeroReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarSetCallForBattleHeroReq& default_instance();

  void Swap(TGuildWarSetCallForBattleHeroReq* other);

  // implements Message ----------------------------------------------

  TGuildWarSetCallForBattleHeroReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarSetCallForBattleHeroReq& from);
  void MergeFrom(const TGuildWarSetCallForBattleHeroReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarSetCallForBattleHeroReq</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarSetCallForBattleHeroReq)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarSetCallForBattleHeroReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarSetCallForBattleHeroRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarSetCallForBattleHeroRsp : public ::google::protobuf::Message {
 public:
  TGuildWarSetCallForBattleHeroRsp();
  virtual ~TGuildWarSetCallForBattleHeroRsp();

  TGuildWarSetCallForBattleHeroRsp(const TGuildWarSetCallForBattleHeroRsp& from);

  inline TGuildWarSetCallForBattleHeroRsp& operator=(const TGuildWarSetCallForBattleHeroRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarSetCallForBattleHeroRsp& default_instance();

  void Swap(TGuildWarSetCallForBattleHeroRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarSetCallForBattleHeroRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarSetCallForBattleHeroRsp& from);
  void MergeFrom(const TGuildWarSetCallForBattleHeroRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildWarHeroDetailInfo CallForBattleHero = 1;
  inline bool has_callforbattlehero() const;
  inline void clear_callforbattlehero();
  static const int kCallForBattleHeroFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarSetCallForBattleHeroRsp</name>
  	<Function>
  		<name>callforbattlehero</name>
  		<replaceName>CallForBattleHero</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_callforbattlehero</name>
  		<replaceName>CallForBattleHero</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_callforbattlehero</name>
  		<replaceName>CallForBattleHero</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_callforbattlehero</name>
  		<replaceName>CallForBattleHero</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarHeroDetailInfo& callforbattlehero() const;
  inline ::pb::TGuildWarHeroDetailInfo* mutable_callforbattlehero();
  inline ::pb::TGuildWarHeroDetailInfo* release_callforbattlehero();
  inline void set_allocated_callforbattlehero(::pb::TGuildWarHeroDetailInfo* callforbattlehero);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarSetCallForBattleHeroRsp)
 private:
  inline void set_has_callforbattlehero();
  inline void clear_has_callforbattlehero();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarHeroDetailInfo* callforbattlehero_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarSetCallForBattleHeroRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarSetAttackFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarSetAttackFormationReq : public ::google::protobuf::Message {
 public:
  TGuildWarSetAttackFormationReq();
  virtual ~TGuildWarSetAttackFormationReq();

  TGuildWarSetAttackFormationReq(const TGuildWarSetAttackFormationReq& from);

  inline TGuildWarSetAttackFormationReq& operator=(const TGuildWarSetAttackFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarSetAttackFormationReq& default_instance();

  void Swap(TGuildWarSetAttackFormationReq* other);

  // implements Message ----------------------------------------------

  TGuildWarSetAttackFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarSetAttackFormationReq& from);
  void MergeFrom(const TGuildWarSetAttackFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWarFormation ArrFormation = 1;
  inline int arrformation_size() const;
  inline void clear_arrformation();
  static const int kArrFormationFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarSetAttackFormationReq</name>
  	<Function>
  		<name>arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrformation_size</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarFormation& arrformation(int index) const;
  inline ::pb::TGuildWarFormation* mutable_arrformation(int index);
  inline ::pb::TGuildWarFormation* add_arrformation();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation >&
      arrformation() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation >*
      mutable_arrformation();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarSetAttackFormationReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation > arrformation_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarSetAttackFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetTowerInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetTowerInfoReq : public ::google::protobuf::Message {
 public:
  TGuildWarGetTowerInfoReq();
  virtual ~TGuildWarGetTowerInfoReq();

  TGuildWarGetTowerInfoReq(const TGuildWarGetTowerInfoReq& from);

  inline TGuildWarGetTowerInfoReq& operator=(const TGuildWarGetTowerInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetTowerInfoReq& default_instance();

  void Swap(TGuildWarGetTowerInfoReq* other);

  // implements Message ----------------------------------------------

  TGuildWarGetTowerInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetTowerInfoReq& from);
  void MergeFrom(const TGuildWarGetTowerInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TowerId = 1;
  inline bool has_towerid() const;
  inline void clear_towerid();
  static const int kTowerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTowerInfoReq</name>
  	<Function>
  		<name>towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 towerid() const;
  inline void set_towerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetTowerInfoReq)
 private:
  inline void set_has_towerid();
  inline void clear_has_towerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 towerid_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetTowerInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetTowerInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetTowerInfoRsp : public ::google::protobuf::Message {
 public:
  TGuildWarGetTowerInfoRsp();
  virtual ~TGuildWarGetTowerInfoRsp();

  TGuildWarGetTowerInfoRsp(const TGuildWarGetTowerInfoRsp& from);

  inline TGuildWarGetTowerInfoRsp& operator=(const TGuildWarGetTowerInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetTowerInfoRsp& default_instance();

  void Swap(TGuildWarGetTowerInfoRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarGetTowerInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetTowerInfoRsp& from);
  void MergeFrom(const TGuildWarGetTowerInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TowerId = 1;
  inline bool has_towerid() const;
  inline void clear_towerid();
  static const int kTowerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTowerInfoRsp</name>
  	<Function>
  		<name>towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 towerid() const;
  inline void set_towerid(::google::protobuf::uint32 value);

  // repeated .pb.TGuildWarTeamInfoWithHp ArrTeamInfo = 2;
  inline int arrteaminfo_size() const;
  inline void clear_arrteaminfo();
  static const int kArrTeamInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTowerInfoRsp</name>
  	<Function>
  		<name>arrteaminfo</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrteaminfo</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrteaminfo</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrteaminfo</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrteaminfo_size</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamInfoWithHp& arrteaminfo(int index) const;
  inline ::pb::TGuildWarTeamInfoWithHp* mutable_arrteaminfo(int index);
  inline ::pb::TGuildWarTeamInfoWithHp* add_arrteaminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamInfoWithHp >&
      arrteaminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamInfoWithHp >*
      mutable_arrteaminfo();

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 3;
  inline int arrusersimpleinfo_size() const;
  inline void clear_arrusersimpleinfo();
  static const int kArrUserSimpleInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTowerInfoRsp</name>
  	<Function>
  		<name>arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrusersimpleinfo_size</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& arrusersimpleinfo(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_arrusersimpleinfo(int index);
  inline ::pb::TUserSimpleInfo* add_arrusersimpleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      arrusersimpleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_arrusersimpleinfo();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetTowerInfoRsp)
 private:
  inline void set_has_towerid();
  inline void clear_has_towerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamInfoWithHp > arrteaminfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > arrusersimpleinfo_;
  ::google::protobuf::uint32 towerid_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetTowerInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetTowerTeamInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetTowerTeamInfoReq : public ::google::protobuf::Message {
 public:
  TGuildWarGetTowerTeamInfoReq();
  virtual ~TGuildWarGetTowerTeamInfoReq();

  TGuildWarGetTowerTeamInfoReq(const TGuildWarGetTowerTeamInfoReq& from);

  inline TGuildWarGetTowerTeamInfoReq& operator=(const TGuildWarGetTowerTeamInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetTowerTeamInfoReq& default_instance();

  void Swap(TGuildWarGetTowerTeamInfoReq* other);

  // implements Message ----------------------------------------------

  TGuildWarGetTowerTeamInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetTowerTeamInfoReq& from);
  void MergeFrom(const TGuildWarGetTowerTeamInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TowerId = 1;
  inline bool has_towerid() const;
  inline void clear_towerid();
  static const int kTowerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTowerTeamInfoReq</name>
  	<Function>
  		<name>towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 towerid() const;
  inline void set_towerid(::google::protobuf::uint32 value);

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  inline bool has_teamidinfo() const;
  inline void clear_teamidinfo();
  static const int kTeamIdInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTowerTeamInfoReq</name>
  	<Function>
  		<name>teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamIdInfo& teamidinfo() const;
  inline ::pb::TGuildWarTeamIdInfo* mutable_teamidinfo();
  inline ::pb::TGuildWarTeamIdInfo* release_teamidinfo();
  inline void set_allocated_teamidinfo(::pb::TGuildWarTeamIdInfo* teamidinfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetTowerTeamInfoReq)
 private:
  inline void set_has_towerid();
  inline void clear_has_towerid();
  inline void set_has_teamidinfo();
  inline void clear_has_teamidinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarTeamIdInfo* teamidinfo_;
  ::google::protobuf::uint32 towerid_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetTowerTeamInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetTowerTeamInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetTowerTeamInfoRsp : public ::google::protobuf::Message {
 public:
  TGuildWarGetTowerTeamInfoRsp();
  virtual ~TGuildWarGetTowerTeamInfoRsp();

  TGuildWarGetTowerTeamInfoRsp(const TGuildWarGetTowerTeamInfoRsp& from);

  inline TGuildWarGetTowerTeamInfoRsp& operator=(const TGuildWarGetTowerTeamInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetTowerTeamInfoRsp& default_instance();

  void Swap(TGuildWarGetTowerTeamInfoRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarGetTowerTeamInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetTowerTeamInfoRsp& from);
  void MergeFrom(const TGuildWarGetTowerTeamInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildWarTeamDetailInfo TeamInfo = 1;
  inline bool has_teaminfo() const;
  inline void clear_teaminfo();
  static const int kTeamInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTowerTeamInfoRsp</name>
  	<Function>
  		<name>teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamDetailInfo& teaminfo() const;
  inline ::pb::TGuildWarTeamDetailInfo* mutable_teaminfo();
  inline ::pb::TGuildWarTeamDetailInfo* release_teaminfo();
  inline void set_allocated_teaminfo(::pb::TGuildWarTeamDetailInfo* teaminfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetTowerTeamInfoRsp)
 private:
  inline void set_has_teaminfo();
  inline void clear_has_teaminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarTeamDetailInfo* teaminfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetTowerTeamInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGarrisonTowerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGarrisonTowerReq : public ::google::protobuf::Message {
 public:
  TGuildWarGarrisonTowerReq();
  virtual ~TGuildWarGarrisonTowerReq();

  TGuildWarGarrisonTowerReq(const TGuildWarGarrisonTowerReq& from);

  inline TGuildWarGarrisonTowerReq& operator=(const TGuildWarGarrisonTowerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGarrisonTowerReq& default_instance();

  void Swap(TGuildWarGarrisonTowerReq* other);

  // implements Message ----------------------------------------------

  TGuildWarGarrisonTowerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGarrisonTowerReq& from);
  void MergeFrom(const TGuildWarGarrisonTowerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TowerId = 1;
  inline bool has_towerid() const;
  inline void clear_towerid();
  static const int kTowerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGarrisonTowerReq</name>
  	<Function>
  		<name>towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 towerid() const;
  inline void set_towerid(::google::protobuf::uint32 value);

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  inline bool has_teamidinfo() const;
  inline void clear_teamidinfo();
  static const int kTeamIdInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGarrisonTowerReq</name>
  	<Function>
  		<name>teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamIdInfo& teamidinfo() const;
  inline ::pb::TGuildWarTeamIdInfo* mutable_teamidinfo();
  inline ::pb::TGuildWarTeamIdInfo* release_teamidinfo();
  inline void set_allocated_teamidinfo(::pb::TGuildWarTeamIdInfo* teamidinfo);

  // optional .pb.TGuildWarTeamIdInfo ReplaceTeamIdInfo = 3;
  inline bool has_replaceteamidinfo() const;
  inline void clear_replaceteamidinfo();
  static const int kReplaceTeamIdInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGarrisonTowerReq</name>
  	<Function>
  		<name>replaceteamidinfo</name>
  		<replaceName>ReplaceTeamIdInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_replaceteamidinfo</name>
  		<replaceName>ReplaceTeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_replaceteamidinfo</name>
  		<replaceName>ReplaceTeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_replaceteamidinfo</name>
  		<replaceName>ReplaceTeamIdInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamIdInfo& replaceteamidinfo() const;
  inline ::pb::TGuildWarTeamIdInfo* mutable_replaceteamidinfo();
  inline ::pb::TGuildWarTeamIdInfo* release_replaceteamidinfo();
  inline void set_allocated_replaceteamidinfo(::pb::TGuildWarTeamIdInfo* replaceteamidinfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGarrisonTowerReq)
 private:
  inline void set_has_towerid();
  inline void clear_has_towerid();
  inline void set_has_teamidinfo();
  inline void clear_has_teamidinfo();
  inline void set_has_replaceteamidinfo();
  inline void clear_has_replaceteamidinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarTeamIdInfo* teamidinfo_;
  ::pb::TGuildWarTeamIdInfo* replaceteamidinfo_;
  ::google::protobuf::uint32 towerid_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGarrisonTowerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarCancelGarrisonTowerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarCancelGarrisonTowerReq : public ::google::protobuf::Message {
 public:
  TGuildWarCancelGarrisonTowerReq();
  virtual ~TGuildWarCancelGarrisonTowerReq();

  TGuildWarCancelGarrisonTowerReq(const TGuildWarCancelGarrisonTowerReq& from);

  inline TGuildWarCancelGarrisonTowerReq& operator=(const TGuildWarCancelGarrisonTowerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarCancelGarrisonTowerReq& default_instance();

  void Swap(TGuildWarCancelGarrisonTowerReq* other);

  // implements Message ----------------------------------------------

  TGuildWarCancelGarrisonTowerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarCancelGarrisonTowerReq& from);
  void MergeFrom(const TGuildWarCancelGarrisonTowerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TowerId = 1;
  inline bool has_towerid() const;
  inline void clear_towerid();
  static const int kTowerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarCancelGarrisonTowerReq</name>
  	<Function>
  		<name>towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 towerid() const;
  inline void set_towerid(::google::protobuf::uint32 value);

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  inline bool has_teamidinfo() const;
  inline void clear_teamidinfo();
  static const int kTeamIdInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarCancelGarrisonTowerReq</name>
  	<Function>
  		<name>teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamIdInfo& teamidinfo() const;
  inline ::pb::TGuildWarTeamIdInfo* mutable_teamidinfo();
  inline ::pb::TGuildWarTeamIdInfo* release_teamidinfo();
  inline void set_allocated_teamidinfo(::pb::TGuildWarTeamIdInfo* teamidinfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarCancelGarrisonTowerReq)
 private:
  inline void set_has_towerid();
  inline void clear_has_towerid();
  inline void set_has_teamidinfo();
  inline void clear_has_teamidinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarTeamIdInfo* teamidinfo_;
  ::google::protobuf::uint32 towerid_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarCancelGarrisonTowerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetAllTeamInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetAllTeamInfoRsp : public ::google::protobuf::Message {
 public:
  TGuildWarGetAllTeamInfoRsp();
  virtual ~TGuildWarGetAllTeamInfoRsp();

  TGuildWarGetAllTeamInfoRsp(const TGuildWarGetAllTeamInfoRsp& from);

  inline TGuildWarGetAllTeamInfoRsp& operator=(const TGuildWarGetAllTeamInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetAllTeamInfoRsp& default_instance();

  void Swap(TGuildWarGetAllTeamInfoRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarGetAllTeamInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetAllTeamInfoRsp& from);
  void MergeFrom(const TGuildWarGetAllTeamInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWarTeamBaseInfo ArrTeamBaseInfo = 1;
  inline int arrteambaseinfo_size() const;
  inline void clear_arrteambaseinfo();
  static const int kArrTeamBaseInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetAllTeamInfoRsp</name>
  	<Function>
  		<name>arrteambaseinfo</name>
  		<replaceName>ArrTeamBaseInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrteambaseinfo</name>
  		<replaceName>ArrTeamBaseInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrteambaseinfo</name>
  		<replaceName>ArrTeamBaseInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrteambaseinfo</name>
  		<replaceName>ArrTeamBaseInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrteambaseinfo_size</name>
  		<replaceName>ArrTeamBaseInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamBaseInfo& arrteambaseinfo(int index) const;
  inline ::pb::TGuildWarTeamBaseInfo* mutable_arrteambaseinfo(int index);
  inline ::pb::TGuildWarTeamBaseInfo* add_arrteambaseinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamBaseInfo >&
      arrteambaseinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamBaseInfo >*
      mutable_arrteambaseinfo();

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  inline int arrusersimpleinfo_size() const;
  inline void clear_arrusersimpleinfo();
  static const int kArrUserSimpleInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetAllTeamInfoRsp</name>
  	<Function>
  		<name>arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrusersimpleinfo_size</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& arrusersimpleinfo(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_arrusersimpleinfo(int index);
  inline ::pb::TUserSimpleInfo* add_arrusersimpleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      arrusersimpleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_arrusersimpleinfo();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetAllTeamInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamBaseInfo > arrteambaseinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > arrusersimpleinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetAllTeamInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetTeamInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetTeamInfoReq : public ::google::protobuf::Message {
 public:
  TGuildWarGetTeamInfoReq();
  virtual ~TGuildWarGetTeamInfoReq();

  TGuildWarGetTeamInfoReq(const TGuildWarGetTeamInfoReq& from);

  inline TGuildWarGetTeamInfoReq& operator=(const TGuildWarGetTeamInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetTeamInfoReq& default_instance();

  void Swap(TGuildWarGetTeamInfoReq* other);

  // implements Message ----------------------------------------------

  TGuildWarGetTeamInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetTeamInfoReq& from);
  void MergeFrom(const TGuildWarGetTeamInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 1;
  inline bool has_teamidinfo() const;
  inline void clear_teamidinfo();
  static const int kTeamIdInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTeamInfoReq</name>
  	<Function>
  		<name>teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamIdInfo& teamidinfo() const;
  inline ::pb::TGuildWarTeamIdInfo* mutable_teamidinfo();
  inline ::pb::TGuildWarTeamIdInfo* release_teamidinfo();
  inline void set_allocated_teamidinfo(::pb::TGuildWarTeamIdInfo* teamidinfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetTeamInfoReq)
 private:
  inline void set_has_teamidinfo();
  inline void clear_has_teamidinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarTeamIdInfo* teamidinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetTeamInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetTeamInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetTeamInfoRsp : public ::google::protobuf::Message {
 public:
  TGuildWarGetTeamInfoRsp();
  virtual ~TGuildWarGetTeamInfoRsp();

  TGuildWarGetTeamInfoRsp(const TGuildWarGetTeamInfoRsp& from);

  inline TGuildWarGetTeamInfoRsp& operator=(const TGuildWarGetTeamInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetTeamInfoRsp& default_instance();

  void Swap(TGuildWarGetTeamInfoRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarGetTeamInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetTeamInfoRsp& from);
  void MergeFrom(const TGuildWarGetTeamInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildWarTeamDetailInfo TeamInfo = 1;
  inline bool has_teaminfo() const;
  inline void clear_teaminfo();
  static const int kTeamInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTeamInfoRsp</name>
  	<Function>
  		<name>teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamDetailInfo& teaminfo() const;
  inline ::pb::TGuildWarTeamDetailInfo* mutable_teaminfo();
  inline ::pb::TGuildWarTeamDetailInfo* release_teaminfo();
  inline void set_allocated_teaminfo(::pb::TGuildWarTeamDetailInfo* teaminfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetTeamInfoRsp)
 private:
  inline void set_has_teaminfo();
  inline void clear_has_teaminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarTeamDetailInfo* teaminfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetTeamInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarDeployTeamToTowerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarDeployTeamToTowerReq : public ::google::protobuf::Message {
 public:
  TGuildWarDeployTeamToTowerReq();
  virtual ~TGuildWarDeployTeamToTowerReq();

  TGuildWarDeployTeamToTowerReq(const TGuildWarDeployTeamToTowerReq& from);

  inline TGuildWarDeployTeamToTowerReq& operator=(const TGuildWarDeployTeamToTowerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarDeployTeamToTowerReq& default_instance();

  void Swap(TGuildWarDeployTeamToTowerReq* other);

  // implements Message ----------------------------------------------

  TGuildWarDeployTeamToTowerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarDeployTeamToTowerReq& from);
  void MergeFrom(const TGuildWarDeployTeamToTowerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TowerId = 1;
  inline bool has_towerid() const;
  inline void clear_towerid();
  static const int kTowerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarDeployTeamToTowerReq</name>
  	<Function>
  		<name>towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 towerid() const;
  inline void set_towerid(::google::protobuf::uint32 value);

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  inline bool has_teamidinfo() const;
  inline void clear_teamidinfo();
  static const int kTeamIdInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarDeployTeamToTowerReq</name>
  	<Function>
  		<name>teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamIdInfo& teamidinfo() const;
  inline ::pb::TGuildWarTeamIdInfo* mutable_teamidinfo();
  inline ::pb::TGuildWarTeamIdInfo* release_teamidinfo();
  inline void set_allocated_teamidinfo(::pb::TGuildWarTeamIdInfo* teamidinfo);

  // optional .pb.TGuildWarTeamIdInfo ReplaceTeamIdInfo = 3;
  inline bool has_replaceteamidinfo() const;
  inline void clear_replaceteamidinfo();
  static const int kReplaceTeamIdInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarDeployTeamToTowerReq</name>
  	<Function>
  		<name>replaceteamidinfo</name>
  		<replaceName>ReplaceTeamIdInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_replaceteamidinfo</name>
  		<replaceName>ReplaceTeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_replaceteamidinfo</name>
  		<replaceName>ReplaceTeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_replaceteamidinfo</name>
  		<replaceName>ReplaceTeamIdInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamIdInfo& replaceteamidinfo() const;
  inline ::pb::TGuildWarTeamIdInfo* mutable_replaceteamidinfo();
  inline ::pb::TGuildWarTeamIdInfo* release_replaceteamidinfo();
  inline void set_allocated_replaceteamidinfo(::pb::TGuildWarTeamIdInfo* replaceteamidinfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarDeployTeamToTowerReq)
 private:
  inline void set_has_towerid();
  inline void clear_has_towerid();
  inline void set_has_teamidinfo();
  inline void clear_has_teamidinfo();
  inline void set_has_replaceteamidinfo();
  inline void clear_has_replaceteamidinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarTeamIdInfo* teamidinfo_;
  ::pb::TGuildWarTeamIdInfo* replaceteamidinfo_;
  ::google::protobuf::uint32 towerid_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarDeployTeamToTowerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetAllCallForBattleHeroInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetAllCallForBattleHeroInfoRsp : public ::google::protobuf::Message {
 public:
  TGuildWarGetAllCallForBattleHeroInfoRsp();
  virtual ~TGuildWarGetAllCallForBattleHeroInfoRsp();

  TGuildWarGetAllCallForBattleHeroInfoRsp(const TGuildWarGetAllCallForBattleHeroInfoRsp& from);

  inline TGuildWarGetAllCallForBattleHeroInfoRsp& operator=(const TGuildWarGetAllCallForBattleHeroInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetAllCallForBattleHeroInfoRsp& default_instance();

  void Swap(TGuildWarGetAllCallForBattleHeroInfoRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarGetAllCallForBattleHeroInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetAllCallForBattleHeroInfoRsp& from);
  void MergeFrom(const TGuildWarGetAllCallForBattleHeroInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo = 1;
  inline int arrheroinfo_size() const;
  inline void clear_arrheroinfo();
  static const int kArrHeroInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetAllCallForBattleHeroInfoRsp</name>
  	<Function>
  		<name>arrheroinfo</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrheroinfo</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrheroinfo</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrheroinfo</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrheroinfo_size</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarHeroDetailInfo& arrheroinfo(int index) const;
  inline ::pb::TGuildWarHeroDetailInfo* mutable_arrheroinfo(int index);
  inline ::pb::TGuildWarHeroDetailInfo* add_arrheroinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >&
      arrheroinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >*
      mutable_arrheroinfo();

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  inline int arrusersimpleinfo_size() const;
  inline void clear_arrusersimpleinfo();
  static const int kArrUserSimpleInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetAllCallForBattleHeroInfoRsp</name>
  	<Function>
  		<name>arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrusersimpleinfo_size</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& arrusersimpleinfo(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_arrusersimpleinfo(int index);
  inline ::pb::TUserSimpleInfo* add_arrusersimpleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      arrusersimpleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_arrusersimpleinfo();

  // repeated uint64 ArrUid = 3;
  inline int arruid_size() const;
  inline void clear_arruid();
  static const int kArrUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetAllCallForBattleHeroInfoRsp</name>
  	<Function>
  		<name>arruid</name>
  		<replaceName>ArrUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruid</name>
  		<replaceName>ArrUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruid</name>
  		<replaceName>ArrUid</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruid</name>
  		<replaceName>ArrUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruid_size</name>
  		<replaceName>ArrUid</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 arruid(int index) const;
  inline void set_arruid(int index, ::google::protobuf::uint64 value);
  inline void add_arruid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      arruid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_arruid();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetAllCallForBattleHeroInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo > arrheroinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > arrusersimpleinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > arruid_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetAllCallForBattleHeroInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarSetCallForBattleHeroListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarSetCallForBattleHeroListReq : public ::google::protobuf::Message {
 public:
  TGuildWarSetCallForBattleHeroListReq();
  virtual ~TGuildWarSetCallForBattleHeroListReq();

  TGuildWarSetCallForBattleHeroListReq(const TGuildWarSetCallForBattleHeroListReq& from);

  inline TGuildWarSetCallForBattleHeroListReq& operator=(const TGuildWarSetCallForBattleHeroListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarSetCallForBattleHeroListReq& default_instance();

  void Swap(TGuildWarSetCallForBattleHeroListReq* other);

  // implements Message ----------------------------------------------

  TGuildWarSetCallForBattleHeroListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarSetCallForBattleHeroListReq& from);
  void MergeFrom(const TGuildWarSetCallForBattleHeroListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 ArrUid = 1;
  inline int arruid_size() const;
  inline void clear_arruid();
  static const int kArrUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarSetCallForBattleHeroListReq</name>
  	<Function>
  		<name>arruid</name>
  		<replaceName>ArrUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruid</name>
  		<replaceName>ArrUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruid</name>
  		<replaceName>ArrUid</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruid</name>
  		<replaceName>ArrUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruid_size</name>
  		<replaceName>ArrUid</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 arruid(int index) const;
  inline void set_arruid(int index, ::google::protobuf::uint64 value);
  inline void add_arruid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      arruid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_arruid();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarSetCallForBattleHeroListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > arruid_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarSetCallForBattleHeroListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetCallForBattleRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetCallForBattleRecordRsp : public ::google::protobuf::Message {
 public:
  TGuildWarGetCallForBattleRecordRsp();
  virtual ~TGuildWarGetCallForBattleRecordRsp();

  TGuildWarGetCallForBattleRecordRsp(const TGuildWarGetCallForBattleRecordRsp& from);

  inline TGuildWarGetCallForBattleRecordRsp& operator=(const TGuildWarGetCallForBattleRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetCallForBattleRecordRsp& default_instance();

  void Swap(TGuildWarGetCallForBattleRecordRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarGetCallForBattleRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetCallForBattleRecordRsp& from);
  void MergeFrom(const TGuildWarGetCallForBattleRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
  inline int arrrecordinfo_size() const;
  inline void clear_arrrecordinfo();
  static const int kArrRecordInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetCallForBattleRecordRsp</name>
  	<Function>
  		<name>arrrecordinfo</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrecordinfo</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrecordinfo</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrecordinfo</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrecordinfo_size</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarBattleRecordInfo& arrrecordinfo(int index) const;
  inline ::pb::TGuildWarBattleRecordInfo* mutable_arrrecordinfo(int index);
  inline ::pb::TGuildWarBattleRecordInfo* add_arrrecordinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo >&
      arrrecordinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo >*
      mutable_arrrecordinfo();

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo1 = 2;
  inline int arrheroinfo1_size() const;
  inline void clear_arrheroinfo1();
  static const int kArrHeroInfo1FieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetCallForBattleRecordRsp</name>
  	<Function>
  		<name>arrheroinfo1</name>
  		<replaceName>ArrHeroInfo1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrheroinfo1</name>
  		<replaceName>ArrHeroInfo1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrheroinfo1</name>
  		<replaceName>ArrHeroInfo1</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrheroinfo1</name>
  		<replaceName>ArrHeroInfo1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrheroinfo1_size</name>
  		<replaceName>ArrHeroInfo1</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarHeroDetailInfo& arrheroinfo1(int index) const;
  inline ::pb::TGuildWarHeroDetailInfo* mutable_arrheroinfo1(int index);
  inline ::pb::TGuildWarHeroDetailInfo* add_arrheroinfo1();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >&
      arrheroinfo1() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >*
      mutable_arrheroinfo1();

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo2 = 3;
  inline int arrheroinfo2_size() const;
  inline void clear_arrheroinfo2();
  static const int kArrHeroInfo2FieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetCallForBattleRecordRsp</name>
  	<Function>
  		<name>arrheroinfo2</name>
  		<replaceName>ArrHeroInfo2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrheroinfo2</name>
  		<replaceName>ArrHeroInfo2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrheroinfo2</name>
  		<replaceName>ArrHeroInfo2</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrheroinfo2</name>
  		<replaceName>ArrHeroInfo2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrheroinfo2_size</name>
  		<replaceName>ArrHeroInfo2</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarHeroDetailInfo& arrheroinfo2(int index) const;
  inline ::pb::TGuildWarHeroDetailInfo* mutable_arrheroinfo2(int index);
  inline ::pb::TGuildWarHeroDetailInfo* add_arrheroinfo2();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >&
      arrheroinfo2() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >*
      mutable_arrheroinfo2();

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 4;
  inline int arrusersimpleinfo_size() const;
  inline void clear_arrusersimpleinfo();
  static const int kArrUserSimpleInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetCallForBattleRecordRsp</name>
  	<Function>
  		<name>arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrusersimpleinfo_size</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& arrusersimpleinfo(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_arrusersimpleinfo(int index);
  inline ::pb::TUserSimpleInfo* add_arrusersimpleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      arrusersimpleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_arrusersimpleinfo();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetCallForBattleRecordRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo > arrrecordinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo > arrheroinfo1_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo > arrheroinfo2_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > arrusersimpleinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetCallForBattleRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarAttackTowerTeamReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarAttackTowerTeamReq : public ::google::protobuf::Message {
 public:
  TGuildWarAttackTowerTeamReq();
  virtual ~TGuildWarAttackTowerTeamReq();

  TGuildWarAttackTowerTeamReq(const TGuildWarAttackTowerTeamReq& from);

  inline TGuildWarAttackTowerTeamReq& operator=(const TGuildWarAttackTowerTeamReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarAttackTowerTeamReq& default_instance();

  void Swap(TGuildWarAttackTowerTeamReq* other);

  // implements Message ----------------------------------------------

  TGuildWarAttackTowerTeamReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarAttackTowerTeamReq& from);
  void MergeFrom(const TGuildWarAttackTowerTeamReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TowerId = 1;
  inline bool has_towerid() const;
  inline void clear_towerid();
  static const int kTowerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarAttackTowerTeamReq</name>
  	<Function>
  		<name>towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 towerid() const;
  inline void set_towerid(::google::protobuf::uint32 value);

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  inline bool has_teamidinfo() const;
  inline void clear_teamidinfo();
  static const int kTeamIdInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarAttackTowerTeamReq</name>
  	<Function>
  		<name>teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamIdInfo& teamidinfo() const;
  inline ::pb::TGuildWarTeamIdInfo* mutable_teamidinfo();
  inline ::pb::TGuildWarTeamIdInfo* release_teamidinfo();
  inline void set_allocated_teamidinfo(::pb::TGuildWarTeamIdInfo* teamidinfo);

  // repeated .pb.TGuildWarFormation ArrFormation = 3;
  inline int arrformation_size() const;
  inline void clear_arrformation();
  static const int kArrFormationFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarAttackTowerTeamReq</name>
  	<Function>
  		<name>arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrformation_size</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarFormation& arrformation(int index) const;
  inline ::pb::TGuildWarFormation* mutable_arrformation(int index);
  inline ::pb::TGuildWarFormation* add_arrformation();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation >&
      arrformation() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation >*
      mutable_arrformation();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarAttackTowerTeamReq)
 private:
  inline void set_has_towerid();
  inline void clear_has_towerid();
  inline void set_has_teamidinfo();
  inline void clear_has_teamidinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarTeamIdInfo* teamidinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation > arrformation_;
  ::google::protobuf::uint32 towerid_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarAttackTowerTeamReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarAttackTowerTeamRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarAttackTowerTeamRsp : public ::google::protobuf::Message {
 public:
  TGuildWarAttackTowerTeamRsp();
  virtual ~TGuildWarAttackTowerTeamRsp();

  TGuildWarAttackTowerTeamRsp(const TGuildWarAttackTowerTeamRsp& from);

  inline TGuildWarAttackTowerTeamRsp& operator=(const TGuildWarAttackTowerTeamRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarAttackTowerTeamRsp& default_instance();

  void Swap(TGuildWarAttackTowerTeamRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarAttackTowerTeamRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarAttackTowerTeamRsp& from);
  void MergeFrom(const TGuildWarAttackTowerTeamRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleResult BattleRet = 1;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarAttackTowerTeamRsp</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleret() const;
  inline ::pb::TBattleResult* mutable_battleret();
  inline ::pb::TBattleResult* release_battleret();
  inline void set_allocated_battleret(::pb::TBattleResult* battleret);

  // optional uint32 Success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarAttackTowerTeamRsp</name>
  	<Function>
  		<name>success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 success() const;
  inline void set_success(::google::protobuf::uint32 value);

  // repeated uint32 ArrNotPickedBuff = 3;
  inline int arrnotpickedbuff_size() const;
  inline void clear_arrnotpickedbuff();
  static const int kArrNotPickedBuffFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarAttackTowerTeamRsp</name>
  	<Function>
  		<name>arrnotpickedbuff</name>
  		<replaceName>ArrNotPickedBuff</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrnotpickedbuff</name>
  		<replaceName>ArrNotPickedBuff</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrnotpickedbuff</name>
  		<replaceName>ArrNotPickedBuff</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrnotpickedbuff</name>
  		<replaceName>ArrNotPickedBuff</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrnotpickedbuff_size</name>
  		<replaceName>ArrNotPickedBuff</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrnotpickedbuff(int index) const;
  inline void set_arrnotpickedbuff(int index, ::google::protobuf::uint32 value);
  inline void add_arrnotpickedbuff(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrnotpickedbuff() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrnotpickedbuff();

  // repeated .pb.TGuildWarUserHeroInheritInfo ArrHeroInfo = 4;
  inline int arrheroinfo_size() const;
  inline void clear_arrheroinfo();
  static const int kArrHeroInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarAttackTowerTeamRsp</name>
  	<Function>
  		<name>arrheroinfo</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrheroinfo</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrheroinfo</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrheroinfo</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrheroinfo_size</name>
  		<replaceName>ArrHeroInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarUserHeroInheritInfo& arrheroinfo(int index) const;
  inline ::pb::TGuildWarUserHeroInheritInfo* mutable_arrheroinfo(int index);
  inline ::pb::TGuildWarUserHeroInheritInfo* add_arrheroinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserHeroInheritInfo >&
      arrheroinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserHeroInheritInfo >*
      mutable_arrheroinfo();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarAttackTowerTeamRsp)
 private:
  inline void set_has_battleret();
  inline void clear_has_battleret();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleResult* battleret_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrnotpickedbuff_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserHeroInheritInfo > arrheroinfo_;
  ::google::protobuf::uint32 success_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarAttackTowerTeamRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarChooseBuffReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarChooseBuffReq : public ::google::protobuf::Message {
 public:
  TGuildWarChooseBuffReq();
  virtual ~TGuildWarChooseBuffReq();

  TGuildWarChooseBuffReq(const TGuildWarChooseBuffReq& from);

  inline TGuildWarChooseBuffReq& operator=(const TGuildWarChooseBuffReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarChooseBuffReq& default_instance();

  void Swap(TGuildWarChooseBuffReq* other);

  // implements Message ----------------------------------------------

  TGuildWarChooseBuffReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarChooseBuffReq& from);
  void MergeFrom(const TGuildWarChooseBuffReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuffId = 1;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarChooseBuffReq</name>
  	<Function>
  		<name>buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buffid() const;
  inline void set_buffid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarChooseBuffReq)
 private:
  inline void set_has_buffid();
  inline void clear_has_buffid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buffid_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarChooseBuffReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetTowerBattleRecordReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetTowerBattleRecordReq : public ::google::protobuf::Message {
 public:
  TGuildWarGetTowerBattleRecordReq();
  virtual ~TGuildWarGetTowerBattleRecordReq();

  TGuildWarGetTowerBattleRecordReq(const TGuildWarGetTowerBattleRecordReq& from);

  inline TGuildWarGetTowerBattleRecordReq& operator=(const TGuildWarGetTowerBattleRecordReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetTowerBattleRecordReq& default_instance();

  void Swap(TGuildWarGetTowerBattleRecordReq* other);

  // implements Message ----------------------------------------------

  TGuildWarGetTowerBattleRecordReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetTowerBattleRecordReq& from);
  void MergeFrom(const TGuildWarGetTowerBattleRecordReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TowerId = 1;
  inline bool has_towerid() const;
  inline void clear_towerid();
  static const int kTowerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTowerBattleRecordReq</name>
  	<Function>
  		<name>towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 towerid() const;
  inline void set_towerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetTowerBattleRecordReq)
 private:
  inline void set_has_towerid();
  inline void clear_has_towerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 towerid_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetTowerBattleRecordReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetTowerBattleRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetTowerBattleRecordRsp : public ::google::protobuf::Message {
 public:
  TGuildWarGetTowerBattleRecordRsp();
  virtual ~TGuildWarGetTowerBattleRecordRsp();

  TGuildWarGetTowerBattleRecordRsp(const TGuildWarGetTowerBattleRecordRsp& from);

  inline TGuildWarGetTowerBattleRecordRsp& operator=(const TGuildWarGetTowerBattleRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetTowerBattleRecordRsp& default_instance();

  void Swap(TGuildWarGetTowerBattleRecordRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarGetTowerBattleRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetTowerBattleRecordRsp& from);
  void MergeFrom(const TGuildWarGetTowerBattleRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
  inline int arrrecordinfo_size() const;
  inline void clear_arrrecordinfo();
  static const int kArrRecordInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTowerBattleRecordRsp</name>
  	<Function>
  		<name>arrrecordinfo</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrecordinfo</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrecordinfo</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrecordinfo</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrecordinfo_size</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarBattleRecordInfo& arrrecordinfo(int index) const;
  inline ::pb::TGuildWarBattleRecordInfo* mutable_arrrecordinfo(int index);
  inline ::pb::TGuildWarBattleRecordInfo* add_arrrecordinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo >&
      arrrecordinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo >*
      mutable_arrrecordinfo();

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  inline int arrusersimpleinfo_size() const;
  inline void clear_arrusersimpleinfo();
  static const int kArrUserSimpleInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTowerBattleRecordRsp</name>
  	<Function>
  		<name>arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrusersimpleinfo_size</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& arrusersimpleinfo(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_arrusersimpleinfo(int index);
  inline ::pb::TUserSimpleInfo* add_arrusersimpleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      arrusersimpleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_arrusersimpleinfo();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetTowerBattleRecordRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo > arrrecordinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > arrusersimpleinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetTowerBattleRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetTeamBattleRecordReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetTeamBattleRecordReq : public ::google::protobuf::Message {
 public:
  TGuildWarGetTeamBattleRecordReq();
  virtual ~TGuildWarGetTeamBattleRecordReq();

  TGuildWarGetTeamBattleRecordReq(const TGuildWarGetTeamBattleRecordReq& from);

  inline TGuildWarGetTeamBattleRecordReq& operator=(const TGuildWarGetTeamBattleRecordReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetTeamBattleRecordReq& default_instance();

  void Swap(TGuildWarGetTeamBattleRecordReq* other);

  // implements Message ----------------------------------------------

  TGuildWarGetTeamBattleRecordReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetTeamBattleRecordReq& from);
  void MergeFrom(const TGuildWarGetTeamBattleRecordReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TowerId = 1;
  inline bool has_towerid() const;
  inline void clear_towerid();
  static const int kTowerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTeamBattleRecordReq</name>
  	<Function>
  		<name>towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 towerid() const;
  inline void set_towerid(::google::protobuf::uint32 value);

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  inline bool has_teamidinfo() const;
  inline void clear_teamidinfo();
  static const int kTeamIdInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTeamBattleRecordReq</name>
  	<Function>
  		<name>teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamidinfo</name>
  		<replaceName>TeamIdInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTeamIdInfo& teamidinfo() const;
  inline ::pb::TGuildWarTeamIdInfo* mutable_teamidinfo();
  inline ::pb::TGuildWarTeamIdInfo* release_teamidinfo();
  inline void set_allocated_teamidinfo(::pb::TGuildWarTeamIdInfo* teamidinfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetTeamBattleRecordReq)
 private:
  inline void set_has_towerid();
  inline void clear_has_towerid();
  inline void set_has_teamidinfo();
  inline void clear_has_teamidinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarTeamIdInfo* teamidinfo_;
  ::google::protobuf::uint32 towerid_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetTeamBattleRecordReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetTeamBattleRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetTeamBattleRecordRsp : public ::google::protobuf::Message {
 public:
  TGuildWarGetTeamBattleRecordRsp();
  virtual ~TGuildWarGetTeamBattleRecordRsp();

  TGuildWarGetTeamBattleRecordRsp(const TGuildWarGetTeamBattleRecordRsp& from);

  inline TGuildWarGetTeamBattleRecordRsp& operator=(const TGuildWarGetTeamBattleRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetTeamBattleRecordRsp& default_instance();

  void Swap(TGuildWarGetTeamBattleRecordRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarGetTeamBattleRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetTeamBattleRecordRsp& from);
  void MergeFrom(const TGuildWarGetTeamBattleRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
  inline int arrrecordinfo_size() const;
  inline void clear_arrrecordinfo();
  static const int kArrRecordInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTeamBattleRecordRsp</name>
  	<Function>
  		<name>arrrecordinfo</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrecordinfo</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrecordinfo</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrecordinfo</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrecordinfo_size</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarBattleRecordInfo& arrrecordinfo(int index) const;
  inline ::pb::TGuildWarBattleRecordInfo* mutable_arrrecordinfo(int index);
  inline ::pb::TGuildWarBattleRecordInfo* add_arrrecordinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo >&
      arrrecordinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo >*
      mutable_arrrecordinfo();

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  inline int arrusersimpleinfo_size() const;
  inline void clear_arrusersimpleinfo();
  static const int kArrUserSimpleInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTeamBattleRecordRsp</name>
  	<Function>
  		<name>arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrusersimpleinfo_size</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& arrusersimpleinfo(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_arrusersimpleinfo(int index);
  inline ::pb::TUserSimpleInfo* add_arrusersimpleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      arrusersimpleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_arrusersimpleinfo();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetTeamBattleRecordRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo > arrrecordinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > arrusersimpleinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetTeamBattleRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetSelfBattleRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetSelfBattleRecordRsp : public ::google::protobuf::Message {
 public:
  TGuildWarGetSelfBattleRecordRsp();
  virtual ~TGuildWarGetSelfBattleRecordRsp();

  TGuildWarGetSelfBattleRecordRsp(const TGuildWarGetSelfBattleRecordRsp& from);

  inline TGuildWarGetSelfBattleRecordRsp& operator=(const TGuildWarGetSelfBattleRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetSelfBattleRecordRsp& default_instance();

  void Swap(TGuildWarGetSelfBattleRecordRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarGetSelfBattleRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetSelfBattleRecordRsp& from);
  void MergeFrom(const TGuildWarGetSelfBattleRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
  inline int arrrecordinfo_size() const;
  inline void clear_arrrecordinfo();
  static const int kArrRecordInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetSelfBattleRecordRsp</name>
  	<Function>
  		<name>arrrecordinfo</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrecordinfo</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrecordinfo</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrecordinfo</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrecordinfo_size</name>
  		<replaceName>ArrRecordInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarBattleRecordInfo& arrrecordinfo(int index) const;
  inline ::pb::TGuildWarBattleRecordInfo* mutable_arrrecordinfo(int index);
  inline ::pb::TGuildWarBattleRecordInfo* add_arrrecordinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo >&
      arrrecordinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo >*
      mutable_arrrecordinfo();

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  inline int arrusersimpleinfo_size() const;
  inline void clear_arrusersimpleinfo();
  static const int kArrUserSimpleInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetSelfBattleRecordRsp</name>
  	<Function>
  		<name>arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrusersimpleinfo_size</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& arrusersimpleinfo(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_arrusersimpleinfo(int index);
  inline ::pb::TUserSimpleInfo* add_arrusersimpleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      arrusersimpleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_arrusersimpleinfo();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetSelfBattleRecordRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo > arrrecordinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > arrusersimpleinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetSelfBattleRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetTowerRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetTowerRewardReq : public ::google::protobuf::Message {
 public:
  TGuildWarGetTowerRewardReq();
  virtual ~TGuildWarGetTowerRewardReq();

  TGuildWarGetTowerRewardReq(const TGuildWarGetTowerRewardReq& from);

  inline TGuildWarGetTowerRewardReq& operator=(const TGuildWarGetTowerRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetTowerRewardReq& default_instance();

  void Swap(TGuildWarGetTowerRewardReq* other);

  // implements Message ----------------------------------------------

  TGuildWarGetTowerRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetTowerRewardReq& from);
  void MergeFrom(const TGuildWarGetTowerRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TowerId = 1;
  inline bool has_towerid() const;
  inline void clear_towerid();
  static const int kTowerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTowerRewardReq</name>
  	<Function>
  		<name>towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerid</name>
  		<replaceName>TowerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 towerid() const;
  inline void set_towerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetTowerRewardReq)
 private:
  inline void set_has_towerid();
  inline void clear_has_towerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 towerid_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetTowerRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetTowerRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetTowerRewardRsp : public ::google::protobuf::Message {
 public:
  TGuildWarGetTowerRewardRsp();
  virtual ~TGuildWarGetTowerRewardRsp();

  TGuildWarGetTowerRewardRsp(const TGuildWarGetTowerRewardRsp& from);

  inline TGuildWarGetTowerRewardRsp& operator=(const TGuildWarGetTowerRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetTowerRewardRsp& default_instance();

  void Swap(TGuildWarGetTowerRewardRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarGetTowerRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetTowerRewardRsp& from);
  void MergeFrom(const TGuildWarGetTowerRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetTowerRewardRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetTowerRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetTowerRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetBuffListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetBuffListRsp : public ::google::protobuf::Message {
 public:
  TGuildWarGetBuffListRsp();
  virtual ~TGuildWarGetBuffListRsp();

  TGuildWarGetBuffListRsp(const TGuildWarGetBuffListRsp& from);

  inline TGuildWarGetBuffListRsp& operator=(const TGuildWarGetBuffListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetBuffListRsp& default_instance();

  void Swap(TGuildWarGetBuffListRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarGetBuffListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetBuffListRsp& from);
  void MergeFrom(const TGuildWarGetBuffListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ArrBuff = 1;
  inline int arrbuff_size() const;
  inline void clear_arrbuff();
  static const int kArrBuffFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetBuffListRsp</name>
  	<Function>
  		<name>arrbuff</name>
  		<replaceName>ArrBuff</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrbuff</name>
  		<replaceName>ArrBuff</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrbuff</name>
  		<replaceName>ArrBuff</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrbuff</name>
  		<replaceName>ArrBuff</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrbuff_size</name>
  		<replaceName>ArrBuff</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrbuff(int index) const;
  inline void set_arrbuff(int index, ::google::protobuf::uint32 value);
  inline void add_arrbuff(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrbuff() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrbuff();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetBuffListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrbuff_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetBuffListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetFieldRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetFieldRankRsp : public ::google::protobuf::Message {
 public:
  TGuildWarGetFieldRankRsp();
  virtual ~TGuildWarGetFieldRankRsp();

  TGuildWarGetFieldRankRsp(const TGuildWarGetFieldRankRsp& from);

  inline TGuildWarGetFieldRankRsp& operator=(const TGuildWarGetFieldRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetFieldRankRsp& default_instance();

  void Swap(TGuildWarGetFieldRankRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarGetFieldRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetFieldRankRsp& from);
  void MergeFrom(const TGuildWarGetFieldRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWarRankInfo ArrRank = 1;
  inline int arrrank_size() const;
  inline void clear_arrrank();
  static const int kArrRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetFieldRankRsp</name>
  	<Function>
  		<name>arrrank</name>
  		<replaceName>ArrRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrank</name>
  		<replaceName>ArrRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrank</name>
  		<replaceName>ArrRank</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrank</name>
  		<replaceName>ArrRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrank_size</name>
  		<replaceName>ArrRank</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarRankInfo& arrrank(int index) const;
  inline ::pb::TGuildWarRankInfo* mutable_arrrank(int index);
  inline ::pb::TGuildWarRankInfo* add_arrrank();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarRankInfo >&
      arrrank() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarRankInfo >*
      mutable_arrrank();

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  inline int arrusersimpleinfo_size() const;
  inline void clear_arrusersimpleinfo();
  static const int kArrUserSimpleInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetFieldRankRsp</name>
  	<Function>
  		<name>arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrusersimpleinfo</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrusersimpleinfo_size</name>
  		<replaceName>ArrUserSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& arrusersimpleinfo(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_arrusersimpleinfo(int index);
  inline ::pb::TUserSimpleInfo* add_arrusersimpleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      arrusersimpleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_arrusersimpleinfo();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetFieldRankRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarRankInfo > arrrank_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > arrusersimpleinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetFieldRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarGetEndRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarGetEndRewardRsp : public ::google::protobuf::Message {
 public:
  TGuildWarGetEndRewardRsp();
  virtual ~TGuildWarGetEndRewardRsp();

  TGuildWarGetEndRewardRsp(const TGuildWarGetEndRewardRsp& from);

  inline TGuildWarGetEndRewardRsp& operator=(const TGuildWarGetEndRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarGetEndRewardRsp& default_instance();

  void Swap(TGuildWarGetEndRewardRsp* other);

  // implements Message ----------------------------------------------

  TGuildWarGetEndRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarGetEndRewardRsp& from);
  void MergeFrom(const TGuildWarGetEndRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarGetEndRewardRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarGetEndRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarGetEndRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarSendMsgReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarSendMsgReq : public ::google::protobuf::Message {
 public:
  TGuildWarSendMsgReq();
  virtual ~TGuildWarSendMsgReq();

  TGuildWarSendMsgReq(const TGuildWarSendMsgReq& from);

  inline TGuildWarSendMsgReq& operator=(const TGuildWarSendMsgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarSendMsgReq& default_instance();

  void Swap(TGuildWarSendMsgReq* other);

  // implements Message ----------------------------------------------

  TGuildWarSendMsgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarSendMsgReq& from);
  void MergeFrom(const TGuildWarSendMsgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EGuildWarMsgType MsgType = 1;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarSendMsgReq</name>
  	<Function>
  		<name>msgtype</name>
  		<replaceName>MsgType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_msgtype</name>
  		<replaceName>MsgType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_msgtype</name>
  		<replaceName>MsgType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EGuildWarMsgType msgtype() const;
  inline void set_msgtype(::pb::EGuildWarMsgType value);

  // optional string Msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarSendMsgReq</name>
  	<Function>
  		<name>msg</name>
  		<replaceName>Msg</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_msg</name>
  		<replaceName>Msg</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_msg</name>
  		<replaceName>Msg</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarSendMsgReq)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msg_;
  int msgtype_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarSendMsgReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarMoveReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarMoveReq : public ::google::protobuf::Message {
 public:
  TGuildWarMoveReq();
  virtual ~TGuildWarMoveReq();

  TGuildWarMoveReq(const TGuildWarMoveReq& from);

  inline TGuildWarMoveReq& operator=(const TGuildWarMoveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarMoveReq& default_instance();

  void Swap(TGuildWarMoveReq* other);

  // implements Message ----------------------------------------------

  TGuildWarMoveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarMoveReq& from);
  void MergeFrom(const TGuildWarMoveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TargetPos = 1;
  inline bool has_targetpos() const;
  inline void clear_targetpos();
  static const int kTargetPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarMoveReq</name>
  	<Function>
  		<name>targetpos</name>
  		<replaceName>TargetPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetpos</name>
  		<replaceName>TargetPos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetpos</name>
  		<replaceName>TargetPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetpos() const;
  inline void set_targetpos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarMoveReq)
 private:
  inline void set_has_targetpos();
  inline void clear_has_targetpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 targetpos_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarMoveReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarUserMoveNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarUserMoveNotify : public ::google::protobuf::Message {
 public:
  TGuildWarUserMoveNotify();
  virtual ~TGuildWarUserMoveNotify();

  TGuildWarUserMoveNotify(const TGuildWarUserMoveNotify& from);

  inline TGuildWarUserMoveNotify& operator=(const TGuildWarUserMoveNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarUserMoveNotify& default_instance();

  void Swap(TGuildWarUserMoveNotify* other);

  // implements Message ----------------------------------------------

  TGuildWarUserMoveNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarUserMoveNotify& from);
  void MergeFrom(const TGuildWarUserMoveNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildWarOtherUserInfo OtherUserInfo = 1;
  inline bool has_otheruserinfo() const;
  inline void clear_otheruserinfo();
  static const int kOtherUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarUserMoveNotify</name>
  	<Function>
  		<name>otheruserinfo</name>
  		<replaceName>OtherUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_otheruserinfo</name>
  		<replaceName>OtherUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_otheruserinfo</name>
  		<replaceName>OtherUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_otheruserinfo</name>
  		<replaceName>OtherUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarOtherUserInfo& otheruserinfo() const;
  inline ::pb::TGuildWarOtherUserInfo* mutable_otheruserinfo();
  inline ::pb::TGuildWarOtherUserInfo* release_otheruserinfo();
  inline void set_allocated_otheruserinfo(::pb::TGuildWarOtherUserInfo* otheruserinfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarUserMoveNotify)
 private:
  inline void set_has_otheruserinfo();
  inline void clear_has_otheruserinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarOtherUserInfo* otheruserinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarUserMoveNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarStageNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarStageNotify : public ::google::protobuf::Message {
 public:
  TGuildWarStageNotify();
  virtual ~TGuildWarStageNotify();

  TGuildWarStageNotify(const TGuildWarStageNotify& from);

  inline TGuildWarStageNotify& operator=(const TGuildWarStageNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarStageNotify& default_instance();

  void Swap(TGuildWarStageNotify* other);

  // implements Message ----------------------------------------------

  TGuildWarStageNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarStageNotify& from);
  void MergeFrom(const TGuildWarStageNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildWarStageInfo StageInfo = 1;
  inline bool has_stageinfo() const;
  inline void clear_stageinfo();
  static const int kStageInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarStageNotify</name>
  	<Function>
  		<name>stageinfo</name>
  		<replaceName>StageInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stageinfo</name>
  		<replaceName>StageInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_stageinfo</name>
  		<replaceName>StageInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stageinfo</name>
  		<replaceName>StageInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarStageInfo& stageinfo() const;
  inline ::pb::TGuildWarStageInfo* mutable_stageinfo();
  inline ::pb::TGuildWarStageInfo* release_stageinfo();
  inline void set_allocated_stageinfo(::pb::TGuildWarStageInfo* stageinfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarStageNotify)
 private:
  inline void set_has_stageinfo();
  inline void clear_has_stageinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarStageInfo* stageinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarStageNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarTowerNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarTowerNotify : public ::google::protobuf::Message {
 public:
  TGuildWarTowerNotify();
  virtual ~TGuildWarTowerNotify();

  TGuildWarTowerNotify(const TGuildWarTowerNotify& from);

  inline TGuildWarTowerNotify& operator=(const TGuildWarTowerNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarTowerNotify& default_instance();

  void Swap(TGuildWarTowerNotify* other);

  // implements Message ----------------------------------------------

  TGuildWarTowerNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarTowerNotify& from);
  void MergeFrom(const TGuildWarTowerNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWarTowerSimpleInfo ArrTowerInfo = 1;
  inline int arrtowerinfo_size() const;
  inline void clear_arrtowerinfo();
  static const int kArrTowerInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarTowerNotify</name>
  	<Function>
  		<name>arrtowerinfo</name>
  		<replaceName>ArrTowerInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtowerinfo</name>
  		<replaceName>ArrTowerInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtowerinfo</name>
  		<replaceName>ArrTowerInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtowerinfo</name>
  		<replaceName>ArrTowerInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtowerinfo_size</name>
  		<replaceName>ArrTowerInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarTowerSimpleInfo& arrtowerinfo(int index) const;
  inline ::pb::TGuildWarTowerSimpleInfo* mutable_arrtowerinfo(int index);
  inline ::pb::TGuildWarTowerSimpleInfo* add_arrtowerinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTowerSimpleInfo >&
      arrtowerinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTowerSimpleInfo >*
      mutable_arrtowerinfo();

  // @@protoc_insertion_point(class_scope:pb.TGuildWarTowerNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTowerSimpleInfo > arrtowerinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarTowerNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarMessageWithChatType</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarMessageWithChatType : public ::google::protobuf::Message {
 public:
  TGuildWarMessageWithChatType();
  virtual ~TGuildWarMessageWithChatType();

  TGuildWarMessageWithChatType(const TGuildWarMessageWithChatType& from);

  inline TGuildWarMessageWithChatType& operator=(const TGuildWarMessageWithChatType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarMessageWithChatType& default_instance();

  void Swap(TGuildWarMessageWithChatType* other);

  // implements Message ----------------------------------------------

  TGuildWarMessageWithChatType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarMessageWithChatType& from);
  void MergeFrom(const TGuildWarMessageWithChatType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TChatMessage ChatMessage = 1;
  inline bool has_chatmessage() const;
  inline void clear_chatmessage();
  static const int kChatMessageFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarMessageWithChatType</name>
  	<Function>
  		<name>chatmessage</name>
  		<replaceName>ChatMessage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chatmessage</name>
  		<replaceName>ChatMessage</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_chatmessage</name>
  		<replaceName>ChatMessage</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chatmessage</name>
  		<replaceName>ChatMessage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TChatMessage& chatmessage() const;
  inline ::pb::TChatMessage* mutable_chatmessage();
  inline ::pb::TChatMessage* release_chatmessage();
  inline void set_allocated_chatmessage(::pb::TChatMessage* chatmessage);

  // optional .pb.EGuildWarMsgType MsgType = 2;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarMessageWithChatType</name>
  	<Function>
  		<name>msgtype</name>
  		<replaceName>MsgType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_msgtype</name>
  		<replaceName>MsgType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_msgtype</name>
  		<replaceName>MsgType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EGuildWarMsgType msgtype() const;
  inline void set_msgtype(::pb::EGuildWarMsgType value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarMessageWithChatType)
 private:
  inline void set_has_chatmessage();
  inline void clear_has_chatmessage();
  inline void set_has_msgtype();
  inline void clear_has_msgtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TChatMessage* chatmessage_;
  int msgtype_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarMessageWithChatType* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWarMessageNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWarMessageNotify : public ::google::protobuf::Message {
 public:
  TGuildWarMessageNotify();
  virtual ~TGuildWarMessageNotify();

  TGuildWarMessageNotify(const TGuildWarMessageNotify& from);

  inline TGuildWarMessageNotify& operator=(const TGuildWarMessageNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWarMessageNotify& default_instance();

  void Swap(TGuildWarMessageNotify* other);

  // implements Message ----------------------------------------------

  TGuildWarMessageNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWarMessageNotify& from);
  void MergeFrom(const TGuildWarMessageNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildWarMessageWithChatType MessageInfo = 1;
  inline bool has_messageinfo() const;
  inline void clear_messageinfo();
  static const int kMessageInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWarMessageNotify</name>
  	<Function>
  		<name>messageinfo</name>
  		<replaceName>MessageInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_messageinfo</name>
  		<replaceName>MessageInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_messageinfo</name>
  		<replaceName>MessageInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messageinfo</name>
  		<replaceName>MessageInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWarMessageWithChatType& messageinfo() const;
  inline ::pb::TGuildWarMessageWithChatType* mutable_messageinfo();
  inline ::pb::TGuildWarMessageWithChatType* release_messageinfo();
  inline void set_allocated_messageinfo(::pb::TGuildWarMessageWithChatType* messageinfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildWarMessageNotify)
 private:
  inline void set_has_messageinfo();
  inline void clear_has_messageinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildWarMessageWithChatType* messageinfo_;
  friend void  protobuf_AddDesc_net_2fGuildWar_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWar_2eproto();

  void InitAsDefaultInstance();
  static TGuildWarMessageNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TGuildWarSingleMessage

// optional uint64 Uid = 1;
inline bool TGuildWarSingleMessage::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarSingleMessage::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarSingleMessage::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarSingleMessage::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TGuildWarSingleMessage::uid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarSingleMessage.Uid)
  return uid_;
}
inline void TGuildWarSingleMessage::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarSingleMessage.Uid)
}

// optional string Msg = 2;
inline bool TGuildWarSingleMessage::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarSingleMessage::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarSingleMessage::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarSingleMessage::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& TGuildWarSingleMessage::msg() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarSingleMessage.Msg)
  return *msg_;
}
inline void TGuildWarSingleMessage::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildWarSingleMessage.Msg)
}
inline void TGuildWarSingleMessage::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildWarSingleMessage.Msg)
}
inline void TGuildWarSingleMessage::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildWarSingleMessage.Msg)
}
inline ::std::string* TGuildWarSingleMessage::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarSingleMessage.Msg)
  return msg_;
}
inline ::std::string* TGuildWarSingleMessage::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildWarSingleMessage::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarSingleMessage.Msg)
}

// optional uint64 MsgTime = 3;
inline bool TGuildWarSingleMessage::has_msgtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildWarSingleMessage::set_has_msgtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildWarSingleMessage::clear_has_msgtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildWarSingleMessage::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
  clear_has_msgtime();
}
inline ::google::protobuf::uint64 TGuildWarSingleMessage::msgtime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarSingleMessage.MsgTime)
  return msgtime_;
}
inline void TGuildWarSingleMessage::set_msgtime(::google::protobuf::uint64 value) {
  set_has_msgtime();
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarSingleMessage.MsgTime)
}

// optional uint32 MsgType = 4;
inline bool TGuildWarSingleMessage::has_msgtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildWarSingleMessage::set_has_msgtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildWarSingleMessage::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildWarSingleMessage::clear_msgtype() {
  msgtype_ = 0u;
  clear_has_msgtype();
}
inline ::google::protobuf::uint32 TGuildWarSingleMessage::msgtype() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarSingleMessage.MsgType)
  return msgtype_;
}
inline void TGuildWarSingleMessage::set_msgtype(::google::protobuf::uint32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarSingleMessage.MsgType)
}

// -------------------------------------------------------------------

// TGuildWarMessageInfo

// repeated .pb.TGuildWarSingleMessage ArrMsg = 1;
inline int TGuildWarMessageInfo::arrmsg_size() const {
  return arrmsg_.size();
}
inline void TGuildWarMessageInfo::clear_arrmsg() {
  arrmsg_.Clear();
}
inline const ::pb::TGuildWarSingleMessage& TGuildWarMessageInfo::arrmsg(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarMessageInfo.ArrMsg)
  return arrmsg_.Get(index);
}
inline ::pb::TGuildWarSingleMessage* TGuildWarMessageInfo::mutable_arrmsg(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarMessageInfo.ArrMsg)
  return arrmsg_.Mutable(index);
}
inline ::pb::TGuildWarSingleMessage* TGuildWarMessageInfo::add_arrmsg() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarMessageInfo.ArrMsg)
  return arrmsg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarSingleMessage >&
TGuildWarMessageInfo::arrmsg() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarMessageInfo.ArrMsg)
  return arrmsg_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarSingleMessage >*
TGuildWarMessageInfo::mutable_arrmsg() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarMessageInfo.ArrMsg)
  return &arrmsg_;
}

// repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
inline int TGuildWarMessageInfo::arrusersimpleinfo_size() const {
  return arrusersimpleinfo_.size();
}
inline void TGuildWarMessageInfo::clear_arrusersimpleinfo() {
  arrusersimpleinfo_.Clear();
}
inline const ::pb::TUserSimpleInfo& TGuildWarMessageInfo::arrusersimpleinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarMessageInfo.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Get(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarMessageInfo::mutable_arrusersimpleinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarMessageInfo.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarMessageInfo::add_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarMessageInfo.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TGuildWarMessageInfo::arrusersimpleinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarMessageInfo.ArrUserSimpleInfo)
  return arrusersimpleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TGuildWarMessageInfo::mutable_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarMessageInfo.ArrUserSimpleInfo)
  return &arrusersimpleinfo_;
}

// -------------------------------------------------------------------

// TGuildWarTeamIdInfo

// optional uint64 Uid = 1;
inline bool TGuildWarTeamIdInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarTeamIdInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarTeamIdInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarTeamIdInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TGuildWarTeamIdInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTeamIdInfo.Uid)
  return uid_;
}
inline void TGuildWarTeamIdInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarTeamIdInfo.Uid)
}

// optional uint32 TeamIndex = 2;
inline bool TGuildWarTeamIdInfo::has_teamindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarTeamIdInfo::set_has_teamindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarTeamIdInfo::clear_has_teamindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarTeamIdInfo::clear_teamindex() {
  teamindex_ = 0u;
  clear_has_teamindex();
}
inline ::google::protobuf::uint32 TGuildWarTeamIdInfo::teamindex() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTeamIdInfo.TeamIndex)
  return teamindex_;
}
inline void TGuildWarTeamIdInfo::set_teamindex(::google::protobuf::uint32 value) {
  set_has_teamindex();
  teamindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarTeamIdInfo.TeamIndex)
}

// -------------------------------------------------------------------

// TGuildWarTowerSimpleInfo

// optional uint32 TowerId = 1;
inline bool TGuildWarTowerSimpleInfo::has_towerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarTowerSimpleInfo::set_has_towerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarTowerSimpleInfo::clear_has_towerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarTowerSimpleInfo::clear_towerid() {
  towerid_ = 0u;
  clear_has_towerid();
}
inline ::google::protobuf::uint32 TGuildWarTowerSimpleInfo::towerid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTowerSimpleInfo.TowerId)
  return towerid_;
}
inline void TGuildWarTowerSimpleInfo::set_towerid(::google::protobuf::uint32 value) {
  set_has_towerid();
  towerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarTowerSimpleInfo.TowerId)
}

// optional uint32 AliveTeamNum = 2;
inline bool TGuildWarTowerSimpleInfo::has_aliveteamnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarTowerSimpleInfo::set_has_aliveteamnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarTowerSimpleInfo::clear_has_aliveteamnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarTowerSimpleInfo::clear_aliveteamnum() {
  aliveteamnum_ = 0u;
  clear_has_aliveteamnum();
}
inline ::google::protobuf::uint32 TGuildWarTowerSimpleInfo::aliveteamnum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTowerSimpleInfo.AliveTeamNum)
  return aliveteamnum_;
}
inline void TGuildWarTowerSimpleInfo::set_aliveteamnum(::google::protobuf::uint32 value) {
  set_has_aliveteamnum();
  aliveteamnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarTowerSimpleInfo.AliveTeamNum)
}

// -------------------------------------------------------------------

// TGuildWarFormation

// optional uint32 Hid = 1;
inline bool TGuildWarFormation::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarFormation::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarFormation::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarFormation::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TGuildWarFormation::hid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarFormation.Hid)
  return hid_;
}
inline void TGuildWarFormation::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarFormation.Hid)
}

// optional uint32 Pos = 2;
inline bool TGuildWarFormation::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarFormation::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarFormation::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarFormation::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TGuildWarFormation::pos() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarFormation.Pos)
  return pos_;
}
inline void TGuildWarFormation::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarFormation.Pos)
}

// -------------------------------------------------------------------

// TGuildWarTeamFormationInfo

// optional uint32 TeamIndex = 1;
inline bool TGuildWarTeamFormationInfo::has_teamindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarTeamFormationInfo::set_has_teamindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarTeamFormationInfo::clear_has_teamindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarTeamFormationInfo::clear_teamindex() {
  teamindex_ = 0u;
  clear_has_teamindex();
}
inline ::google::protobuf::uint32 TGuildWarTeamFormationInfo::teamindex() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTeamFormationInfo.TeamIndex)
  return teamindex_;
}
inline void TGuildWarTeamFormationInfo::set_teamindex(::google::protobuf::uint32 value) {
  set_has_teamindex();
  teamindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarTeamFormationInfo.TeamIndex)
}

// repeated .pb.TGuildWarFormation ArrFormation = 2;
inline int TGuildWarTeamFormationInfo::arrformation_size() const {
  return arrformation_.size();
}
inline void TGuildWarTeamFormationInfo::clear_arrformation() {
  arrformation_.Clear();
}
inline const ::pb::TGuildWarFormation& TGuildWarTeamFormationInfo::arrformation(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTeamFormationInfo.ArrFormation)
  return arrformation_.Get(index);
}
inline ::pb::TGuildWarFormation* TGuildWarTeamFormationInfo::mutable_arrformation(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarTeamFormationInfo.ArrFormation)
  return arrformation_.Mutable(index);
}
inline ::pb::TGuildWarFormation* TGuildWarTeamFormationInfo::add_arrformation() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarTeamFormationInfo.ArrFormation)
  return arrformation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation >&
TGuildWarTeamFormationInfo::arrformation() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarTeamFormationInfo.ArrFormation)
  return arrformation_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation >*
TGuildWarTeamFormationInfo::mutable_arrformation() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarTeamFormationInfo.ArrFormation)
  return &arrformation_;
}

// -------------------------------------------------------------------

// TGuildWarUserTeamInfo

// optional uint32 TeamIndex = 1;
inline bool TGuildWarUserTeamInfo::has_teamindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarUserTeamInfo::set_has_teamindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarUserTeamInfo::clear_has_teamindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarUserTeamInfo::clear_teamindex() {
  teamindex_ = 0u;
  clear_has_teamindex();
}
inline ::google::protobuf::uint32 TGuildWarUserTeamInfo::teamindex() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserTeamInfo.TeamIndex)
  return teamindex_;
}
inline void TGuildWarUserTeamInfo::set_teamindex(::google::protobuf::uint32 value) {
  set_has_teamindex();
  teamindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarUserTeamInfo.TeamIndex)
}

// repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo = 2;
inline int TGuildWarUserTeamInfo::arrheroinfo_size() const {
  return arrheroinfo_.size();
}
inline void TGuildWarUserTeamInfo::clear_arrheroinfo() {
  arrheroinfo_.Clear();
}
inline const ::pb::TGuildWarHeroDetailInfo& TGuildWarUserTeamInfo::arrheroinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserTeamInfo.ArrHeroInfo)
  return arrheroinfo_.Get(index);
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarUserTeamInfo::mutable_arrheroinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarUserTeamInfo.ArrHeroInfo)
  return arrheroinfo_.Mutable(index);
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarUserTeamInfo::add_arrheroinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarUserTeamInfo.ArrHeroInfo)
  return arrheroinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >&
TGuildWarUserTeamInfo::arrheroinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarUserTeamInfo.ArrHeroInfo)
  return arrheroinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >*
TGuildWarUserTeamInfo::mutable_arrheroinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarUserTeamInfo.ArrHeroInfo)
  return &arrheroinfo_;
}

// optional uint64 FightForce = 3;
inline bool TGuildWarUserTeamInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildWarUserTeamInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildWarUserTeamInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildWarUserTeamInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TGuildWarUserTeamInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserTeamInfo.FightForce)
  return fightforce_;
}
inline void TGuildWarUserTeamInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarUserTeamInfo.FightForce)
}

// optional uint32 TowerId = 4;
inline bool TGuildWarUserTeamInfo::has_towerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildWarUserTeamInfo::set_has_towerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildWarUserTeamInfo::clear_has_towerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildWarUserTeamInfo::clear_towerid() {
  towerid_ = 0u;
  clear_has_towerid();
}
inline ::google::protobuf::uint32 TGuildWarUserTeamInfo::towerid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserTeamInfo.TowerId)
  return towerid_;
}
inline void TGuildWarUserTeamInfo::set_towerid(::google::protobuf::uint32 value) {
  set_has_towerid();
  towerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarUserTeamInfo.TowerId)
}

// -------------------------------------------------------------------

// TGuildWarUserHeroInheritInfo

// optional uint32 Hid = 1;
inline bool TGuildWarUserHeroInheritInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarUserHeroInheritInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarUserHeroInheritInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarUserHeroInheritInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TGuildWarUserHeroInheritInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserHeroInheritInfo.Hid)
  return hid_;
}
inline void TGuildWarUserHeroInheritInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarUserHeroInheritInfo.Hid)
}

// optional uint32 CurHpPer = 2;
inline bool TGuildWarUserHeroInheritInfo::has_curhpper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarUserHeroInheritInfo::set_has_curhpper() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarUserHeroInheritInfo::clear_has_curhpper() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarUserHeroInheritInfo::clear_curhpper() {
  curhpper_ = 0u;
  clear_has_curhpper();
}
inline ::google::protobuf::uint32 TGuildWarUserHeroInheritInfo::curhpper() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserHeroInheritInfo.CurHpPer)
  return curhpper_;
}
inline void TGuildWarUserHeroInheritInfo::set_curhpper(::google::protobuf::uint32 value) {
  set_has_curhpper();
  curhpper_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarUserHeroInheritInfo.CurHpPer)
}

// optional uint32 CurRage = 3;
inline bool TGuildWarUserHeroInheritInfo::has_currage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildWarUserHeroInheritInfo::set_has_currage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildWarUserHeroInheritInfo::clear_has_currage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildWarUserHeroInheritInfo::clear_currage() {
  currage_ = 0u;
  clear_has_currage();
}
inline ::google::protobuf::uint32 TGuildWarUserHeroInheritInfo::currage() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserHeroInheritInfo.CurRage)
  return currage_;
}
inline void TGuildWarUserHeroInheritInfo::set_currage(::google::protobuf::uint32 value) {
  set_has_currage();
  currage_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarUserHeroInheritInfo.CurRage)
}

// optional uint64 RecoverTime = 4;
inline bool TGuildWarUserHeroInheritInfo::has_recovertime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildWarUserHeroInheritInfo::set_has_recovertime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildWarUserHeroInheritInfo::clear_has_recovertime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildWarUserHeroInheritInfo::clear_recovertime() {
  recovertime_ = GOOGLE_ULONGLONG(0);
  clear_has_recovertime();
}
inline ::google::protobuf::uint64 TGuildWarUserHeroInheritInfo::recovertime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserHeroInheritInfo.RecoverTime)
  return recovertime_;
}
inline void TGuildWarUserHeroInheritInfo::set_recovertime(::google::protobuf::uint64 value) {
  set_has_recovertime();
  recovertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarUserHeroInheritInfo.RecoverTime)
}

// optional uint64 CdTime = 5;
inline bool TGuildWarUserHeroInheritInfo::has_cdtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildWarUserHeroInheritInfo::set_has_cdtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildWarUserHeroInheritInfo::clear_has_cdtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildWarUserHeroInheritInfo::clear_cdtime() {
  cdtime_ = GOOGLE_ULONGLONG(0);
  clear_has_cdtime();
}
inline ::google::protobuf::uint64 TGuildWarUserHeroInheritInfo::cdtime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserHeroInheritInfo.CdTime)
  return cdtime_;
}
inline void TGuildWarUserHeroInheritInfo::set_cdtime(::google::protobuf::uint64 value) {
  set_has_cdtime();
  cdtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarUserHeroInheritInfo.CdTime)
}

// -------------------------------------------------------------------

// TGuildWarUserInfo

// optional uint64 IncAttackTime = 1;
inline bool TGuildWarUserInfo::has_incattacktime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarUserInfo::set_has_incattacktime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarUserInfo::clear_has_incattacktime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarUserInfo::clear_incattacktime() {
  incattacktime_ = GOOGLE_ULONGLONG(0);
  clear_has_incattacktime();
}
inline ::google::protobuf::uint64 TGuildWarUserInfo::incattacktime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserInfo.IncAttackTime)
  return incattacktime_;
}
inline void TGuildWarUserInfo::set_incattacktime(::google::protobuf::uint64 value) {
  set_has_incattacktime();
  incattacktime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarUserInfo.IncAttackTime)
}

// optional uint32 AttackNum = 2;
inline bool TGuildWarUserInfo::has_attacknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarUserInfo::set_has_attacknum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarUserInfo::clear_has_attacknum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarUserInfo::clear_attacknum() {
  attacknum_ = 0u;
  clear_has_attacknum();
}
inline ::google::protobuf::uint32 TGuildWarUserInfo::attacknum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserInfo.AttackNum)
  return attacknum_;
}
inline void TGuildWarUserInfo::set_attacknum(::google::protobuf::uint32 value) {
  set_has_attacknum();
  attacknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarUserInfo.AttackNum)
}

// optional uint32 IncAttackNum = 3;
inline bool TGuildWarUserInfo::has_incattacknum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildWarUserInfo::set_has_incattacknum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildWarUserInfo::clear_has_incattacknum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildWarUserInfo::clear_incattacknum() {
  incattacknum_ = 0u;
  clear_has_incattacknum();
}
inline ::google::protobuf::uint32 TGuildWarUserInfo::incattacknum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserInfo.IncAttackNum)
  return incattacknum_;
}
inline void TGuildWarUserInfo::set_incattacknum(::google::protobuf::uint32 value) {
  set_has_incattacknum();
  incattacknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarUserInfo.IncAttackNum)
}

// optional .pb.TGuildWarHeroDetailInfo CallForBattleHero = 4;
inline bool TGuildWarUserInfo::has_callforbattlehero() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildWarUserInfo::set_has_callforbattlehero() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildWarUserInfo::clear_has_callforbattlehero() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildWarUserInfo::clear_callforbattlehero() {
  if (callforbattlehero_ != NULL) callforbattlehero_->::pb::TGuildWarHeroDetailInfo::Clear();
  clear_has_callforbattlehero();
}
inline const ::pb::TGuildWarHeroDetailInfo& TGuildWarUserInfo::callforbattlehero() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserInfo.CallForBattleHero)
  return callforbattlehero_ != NULL ? *callforbattlehero_ : *default_instance_->callforbattlehero_;
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarUserInfo::mutable_callforbattlehero() {
  set_has_callforbattlehero();
  if (callforbattlehero_ == NULL) callforbattlehero_ = new ::pb::TGuildWarHeroDetailInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarUserInfo.CallForBattleHero)
  return callforbattlehero_;
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarUserInfo::release_callforbattlehero() {
  clear_has_callforbattlehero();
  ::pb::TGuildWarHeroDetailInfo* temp = callforbattlehero_;
  callforbattlehero_ = NULL;
  return temp;
}
inline void TGuildWarUserInfo::set_allocated_callforbattlehero(::pb::TGuildWarHeroDetailInfo* callforbattlehero) {
  delete callforbattlehero_;
  callforbattlehero_ = callforbattlehero;
  if (callforbattlehero) {
    set_has_callforbattlehero();
  } else {
    clear_has_callforbattlehero();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarUserInfo.CallForBattleHero)
}

// repeated uint32 ArrNotPickedBuff = 5;
inline int TGuildWarUserInfo::arrnotpickedbuff_size() const {
  return arrnotpickedbuff_.size();
}
inline void TGuildWarUserInfo::clear_arrnotpickedbuff() {
  arrnotpickedbuff_.Clear();
}
inline ::google::protobuf::uint32 TGuildWarUserInfo::arrnotpickedbuff(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserInfo.ArrNotPickedBuff)
  return arrnotpickedbuff_.Get(index);
}
inline void TGuildWarUserInfo::set_arrnotpickedbuff(int index, ::google::protobuf::uint32 value) {
  arrnotpickedbuff_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGuildWarUserInfo.ArrNotPickedBuff)
}
inline void TGuildWarUserInfo::add_arrnotpickedbuff(::google::protobuf::uint32 value) {
  arrnotpickedbuff_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGuildWarUserInfo.ArrNotPickedBuff)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGuildWarUserInfo::arrnotpickedbuff() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarUserInfo.ArrNotPickedBuff)
  return arrnotpickedbuff_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGuildWarUserInfo::mutable_arrnotpickedbuff() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarUserInfo.ArrNotPickedBuff)
  return &arrnotpickedbuff_;
}

// repeated .pb.TGuildWarUserTeamInfo ArrTeamInfo = 6;
inline int TGuildWarUserInfo::arrteaminfo_size() const {
  return arrteaminfo_.size();
}
inline void TGuildWarUserInfo::clear_arrteaminfo() {
  arrteaminfo_.Clear();
}
inline const ::pb::TGuildWarUserTeamInfo& TGuildWarUserInfo::arrteaminfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserInfo.ArrTeamInfo)
  return arrteaminfo_.Get(index);
}
inline ::pb::TGuildWarUserTeamInfo* TGuildWarUserInfo::mutable_arrteaminfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarUserInfo.ArrTeamInfo)
  return arrteaminfo_.Mutable(index);
}
inline ::pb::TGuildWarUserTeamInfo* TGuildWarUserInfo::add_arrteaminfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarUserInfo.ArrTeamInfo)
  return arrteaminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserTeamInfo >&
TGuildWarUserInfo::arrteaminfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarUserInfo.ArrTeamInfo)
  return arrteaminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserTeamInfo >*
TGuildWarUserInfo::mutable_arrteaminfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarUserInfo.ArrTeamInfo)
  return &arrteaminfo_;
}

// repeated .pb.TGuildWarUserHeroInheritInfo ArrHeroInfo = 7;
inline int TGuildWarUserInfo::arrheroinfo_size() const {
  return arrheroinfo_.size();
}
inline void TGuildWarUserInfo::clear_arrheroinfo() {
  arrheroinfo_.Clear();
}
inline const ::pb::TGuildWarUserHeroInheritInfo& TGuildWarUserInfo::arrheroinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserInfo.ArrHeroInfo)
  return arrheroinfo_.Get(index);
}
inline ::pb::TGuildWarUserHeroInheritInfo* TGuildWarUserInfo::mutable_arrheroinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarUserInfo.ArrHeroInfo)
  return arrheroinfo_.Mutable(index);
}
inline ::pb::TGuildWarUserHeroInheritInfo* TGuildWarUserInfo::add_arrheroinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarUserInfo.ArrHeroInfo)
  return arrheroinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserHeroInheritInfo >&
TGuildWarUserInfo::arrheroinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarUserInfo.ArrHeroInfo)
  return arrheroinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserHeroInheritInfo >*
TGuildWarUserInfo::mutable_arrheroinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarUserInfo.ArrHeroInfo)
  return &arrheroinfo_;
}

// repeated .pb.TGuildWarFormation ArrAttackFormation = 8;
inline int TGuildWarUserInfo::arrattackformation_size() const {
  return arrattackformation_.size();
}
inline void TGuildWarUserInfo::clear_arrattackformation() {
  arrattackformation_.Clear();
}
inline const ::pb::TGuildWarFormation& TGuildWarUserInfo::arrattackformation(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserInfo.ArrAttackFormation)
  return arrattackformation_.Get(index);
}
inline ::pb::TGuildWarFormation* TGuildWarUserInfo::mutable_arrattackformation(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarUserInfo.ArrAttackFormation)
  return arrattackformation_.Mutable(index);
}
inline ::pb::TGuildWarFormation* TGuildWarUserInfo::add_arrattackformation() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarUserInfo.ArrAttackFormation)
  return arrattackformation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation >&
TGuildWarUserInfo::arrattackformation() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarUserInfo.ArrAttackFormation)
  return arrattackformation_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation >*
TGuildWarUserInfo::mutable_arrattackformation() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarUserInfo.ArrAttackFormation)
  return &arrattackformation_;
}

// optional uint64 SendNormalMsgTime = 9;
inline bool TGuildWarUserInfo::has_sendnormalmsgtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TGuildWarUserInfo::set_has_sendnormalmsgtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TGuildWarUserInfo::clear_has_sendnormalmsgtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TGuildWarUserInfo::clear_sendnormalmsgtime() {
  sendnormalmsgtime_ = GOOGLE_ULONGLONG(0);
  clear_has_sendnormalmsgtime();
}
inline ::google::protobuf::uint64 TGuildWarUserInfo::sendnormalmsgtime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserInfo.SendNormalMsgTime)
  return sendnormalmsgtime_;
}
inline void TGuildWarUserInfo::set_sendnormalmsgtime(::google::protobuf::uint64 value) {
  set_has_sendnormalmsgtime();
  sendnormalmsgtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarUserInfo.SendNormalMsgTime)
}

// optional uint64 SendGoldMsgTime = 10;
inline bool TGuildWarUserInfo::has_sendgoldmsgtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TGuildWarUserInfo::set_has_sendgoldmsgtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TGuildWarUserInfo::clear_has_sendgoldmsgtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TGuildWarUserInfo::clear_sendgoldmsgtime() {
  sendgoldmsgtime_ = GOOGLE_ULONGLONG(0);
  clear_has_sendgoldmsgtime();
}
inline ::google::protobuf::uint64 TGuildWarUserInfo::sendgoldmsgtime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserInfo.SendGoldMsgTime)
  return sendgoldmsgtime_;
}
inline void TGuildWarUserInfo::set_sendgoldmsgtime(::google::protobuf::uint64 value) {
  set_has_sendgoldmsgtime();
  sendgoldmsgtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarUserInfo.SendGoldMsgTime)
}

// -------------------------------------------------------------------

// TGuildWarOtherUserInfo

// optional uint64 Uid = 1;
inline bool TGuildWarOtherUserInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarOtherUserInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarOtherUserInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarOtherUserInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TGuildWarOtherUserInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarOtherUserInfo.Uid)
  return uid_;
}
inline void TGuildWarOtherUserInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarOtherUserInfo.Uid)
}

// optional uint32 Pos = 2;
inline bool TGuildWarOtherUserInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarOtherUserInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarOtherUserInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarOtherUserInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TGuildWarOtherUserInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarOtherUserInfo.Pos)
  return pos_;
}
inline void TGuildWarOtherUserInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarOtherUserInfo.Pos)
}

// optional bool IsLeave = 3;
inline bool TGuildWarOtherUserInfo::has_isleave() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildWarOtherUserInfo::set_has_isleave() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildWarOtherUserInfo::clear_has_isleave() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildWarOtherUserInfo::clear_isleave() {
  isleave_ = false;
  clear_has_isleave();
}
inline bool TGuildWarOtherUserInfo::isleave() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarOtherUserInfo.IsLeave)
  return isleave_;
}
inline void TGuildWarOtherUserInfo::set_isleave(bool value) {
  set_has_isleave();
  isleave_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarOtherUserInfo.IsLeave)
}

// optional .pb.TUserSimpleInfo UserSimpleInfo = 4;
inline bool TGuildWarOtherUserInfo::has_usersimpleinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildWarOtherUserInfo::set_has_usersimpleinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildWarOtherUserInfo::clear_has_usersimpleinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildWarOtherUserInfo::clear_usersimpleinfo() {
  if (usersimpleinfo_ != NULL) usersimpleinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_usersimpleinfo();
}
inline const ::pb::TUserSimpleInfo& TGuildWarOtherUserInfo::usersimpleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarOtherUserInfo.UserSimpleInfo)
  return usersimpleinfo_ != NULL ? *usersimpleinfo_ : *default_instance_->usersimpleinfo_;
}
inline ::pb::TUserSimpleInfo* TGuildWarOtherUserInfo::mutable_usersimpleinfo() {
  set_has_usersimpleinfo();
  if (usersimpleinfo_ == NULL) usersimpleinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarOtherUserInfo.UserSimpleInfo)
  return usersimpleinfo_;
}
inline ::pb::TUserSimpleInfo* TGuildWarOtherUserInfo::release_usersimpleinfo() {
  clear_has_usersimpleinfo();
  ::pb::TUserSimpleInfo* temp = usersimpleinfo_;
  usersimpleinfo_ = NULL;
  return temp;
}
inline void TGuildWarOtherUserInfo::set_allocated_usersimpleinfo(::pb::TUserSimpleInfo* usersimpleinfo) {
  delete usersimpleinfo_;
  usersimpleinfo_ = usersimpleinfo;
  if (usersimpleinfo) {
    set_has_usersimpleinfo();
  } else {
    clear_has_usersimpleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarOtherUserInfo.UserSimpleInfo)
}

// -------------------------------------------------------------------

// TGuildWarFieldInfo

// repeated .pb.TGuildWarTowerSimpleInfo ArrTowerInfo = 1;
inline int TGuildWarFieldInfo::arrtowerinfo_size() const {
  return arrtowerinfo_.size();
}
inline void TGuildWarFieldInfo::clear_arrtowerinfo() {
  arrtowerinfo_.Clear();
}
inline const ::pb::TGuildWarTowerSimpleInfo& TGuildWarFieldInfo::arrtowerinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarFieldInfo.ArrTowerInfo)
  return arrtowerinfo_.Get(index);
}
inline ::pb::TGuildWarTowerSimpleInfo* TGuildWarFieldInfo::mutable_arrtowerinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarFieldInfo.ArrTowerInfo)
  return arrtowerinfo_.Mutable(index);
}
inline ::pb::TGuildWarTowerSimpleInfo* TGuildWarFieldInfo::add_arrtowerinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarFieldInfo.ArrTowerInfo)
  return arrtowerinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTowerSimpleInfo >&
TGuildWarFieldInfo::arrtowerinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarFieldInfo.ArrTowerInfo)
  return arrtowerinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTowerSimpleInfo >*
TGuildWarFieldInfo::mutable_arrtowerinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarFieldInfo.ArrTowerInfo)
  return &arrtowerinfo_;
}

// optional .pb.TGuildWarUserInfo SelfInfo = 3;
inline bool TGuildWarFieldInfo::has_selfinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarFieldInfo::set_has_selfinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarFieldInfo::clear_has_selfinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarFieldInfo::clear_selfinfo() {
  if (selfinfo_ != NULL) selfinfo_->::pb::TGuildWarUserInfo::Clear();
  clear_has_selfinfo();
}
inline const ::pb::TGuildWarUserInfo& TGuildWarFieldInfo::selfinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarFieldInfo.SelfInfo)
  return selfinfo_ != NULL ? *selfinfo_ : *default_instance_->selfinfo_;
}
inline ::pb::TGuildWarUserInfo* TGuildWarFieldInfo::mutable_selfinfo() {
  set_has_selfinfo();
  if (selfinfo_ == NULL) selfinfo_ = new ::pb::TGuildWarUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarFieldInfo.SelfInfo)
  return selfinfo_;
}
inline ::pb::TGuildWarUserInfo* TGuildWarFieldInfo::release_selfinfo() {
  clear_has_selfinfo();
  ::pb::TGuildWarUserInfo* temp = selfinfo_;
  selfinfo_ = NULL;
  return temp;
}
inline void TGuildWarFieldInfo::set_allocated_selfinfo(::pb::TGuildWarUserInfo* selfinfo) {
  delete selfinfo_;
  selfinfo_ = selfinfo;
  if (selfinfo) {
    set_has_selfinfo();
  } else {
    clear_has_selfinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarFieldInfo.SelfInfo)
}

// repeated .pb.TGuildWarOtherUserInfo ArrOtherUserInfo = 4;
inline int TGuildWarFieldInfo::arrotheruserinfo_size() const {
  return arrotheruserinfo_.size();
}
inline void TGuildWarFieldInfo::clear_arrotheruserinfo() {
  arrotheruserinfo_.Clear();
}
inline const ::pb::TGuildWarOtherUserInfo& TGuildWarFieldInfo::arrotheruserinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarFieldInfo.ArrOtherUserInfo)
  return arrotheruserinfo_.Get(index);
}
inline ::pb::TGuildWarOtherUserInfo* TGuildWarFieldInfo::mutable_arrotheruserinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarFieldInfo.ArrOtherUserInfo)
  return arrotheruserinfo_.Mutable(index);
}
inline ::pb::TGuildWarOtherUserInfo* TGuildWarFieldInfo::add_arrotheruserinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarFieldInfo.ArrOtherUserInfo)
  return arrotheruserinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarOtherUserInfo >&
TGuildWarFieldInfo::arrotheruserinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarFieldInfo.ArrOtherUserInfo)
  return arrotheruserinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarOtherUserInfo >*
TGuildWarFieldInfo::mutable_arrotheruserinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarFieldInfo.ArrOtherUserInfo)
  return &arrotheruserinfo_;
}

// optional .pb.TGuildWarMessageInfo NotReadMsgInfo = 5;
inline bool TGuildWarFieldInfo::has_notreadmsginfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildWarFieldInfo::set_has_notreadmsginfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildWarFieldInfo::clear_has_notreadmsginfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildWarFieldInfo::clear_notreadmsginfo() {
  if (notreadmsginfo_ != NULL) notreadmsginfo_->::pb::TGuildWarMessageInfo::Clear();
  clear_has_notreadmsginfo();
}
inline const ::pb::TGuildWarMessageInfo& TGuildWarFieldInfo::notreadmsginfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarFieldInfo.NotReadMsgInfo)
  return notreadmsginfo_ != NULL ? *notreadmsginfo_ : *default_instance_->notreadmsginfo_;
}
inline ::pb::TGuildWarMessageInfo* TGuildWarFieldInfo::mutable_notreadmsginfo() {
  set_has_notreadmsginfo();
  if (notreadmsginfo_ == NULL) notreadmsginfo_ = new ::pb::TGuildWarMessageInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarFieldInfo.NotReadMsgInfo)
  return notreadmsginfo_;
}
inline ::pb::TGuildWarMessageInfo* TGuildWarFieldInfo::release_notreadmsginfo() {
  clear_has_notreadmsginfo();
  ::pb::TGuildWarMessageInfo* temp = notreadmsginfo_;
  notreadmsginfo_ = NULL;
  return temp;
}
inline void TGuildWarFieldInfo::set_allocated_notreadmsginfo(::pb::TGuildWarMessageInfo* notreadmsginfo) {
  delete notreadmsginfo_;
  notreadmsginfo_ = notreadmsginfo;
  if (notreadmsginfo) {
    set_has_notreadmsginfo();
  } else {
    clear_has_notreadmsginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarFieldInfo.NotReadMsgInfo)
}

// repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo1 = 6;
inline int TGuildWarFieldInfo::arrheroinfo1_size() const {
  return arrheroinfo1_.size();
}
inline void TGuildWarFieldInfo::clear_arrheroinfo1() {
  arrheroinfo1_.Clear();
}
inline const ::pb::TGuildWarHeroDetailInfo& TGuildWarFieldInfo::arrheroinfo1(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarFieldInfo.ArrHeroInfo1)
  return arrheroinfo1_.Get(index);
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarFieldInfo::mutable_arrheroinfo1(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarFieldInfo.ArrHeroInfo1)
  return arrheroinfo1_.Mutable(index);
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarFieldInfo::add_arrheroinfo1() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarFieldInfo.ArrHeroInfo1)
  return arrheroinfo1_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >&
TGuildWarFieldInfo::arrheroinfo1() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarFieldInfo.ArrHeroInfo1)
  return arrheroinfo1_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >*
TGuildWarFieldInfo::mutable_arrheroinfo1() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarFieldInfo.ArrHeroInfo1)
  return &arrheroinfo1_;
}

// repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo2 = 7;
inline int TGuildWarFieldInfo::arrheroinfo2_size() const {
  return arrheroinfo2_.size();
}
inline void TGuildWarFieldInfo::clear_arrheroinfo2() {
  arrheroinfo2_.Clear();
}
inline const ::pb::TGuildWarHeroDetailInfo& TGuildWarFieldInfo::arrheroinfo2(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarFieldInfo.ArrHeroInfo2)
  return arrheroinfo2_.Get(index);
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarFieldInfo::mutable_arrheroinfo2(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarFieldInfo.ArrHeroInfo2)
  return arrheroinfo2_.Mutable(index);
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarFieldInfo::add_arrheroinfo2() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarFieldInfo.ArrHeroInfo2)
  return arrheroinfo2_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >&
TGuildWarFieldInfo::arrheroinfo2() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarFieldInfo.ArrHeroInfo2)
  return arrheroinfo2_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >*
TGuildWarFieldInfo::mutable_arrheroinfo2() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarFieldInfo.ArrHeroInfo2)
  return &arrheroinfo2_;
}

// repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 8;
inline int TGuildWarFieldInfo::arrusersimpleinfo_size() const {
  return arrusersimpleinfo_.size();
}
inline void TGuildWarFieldInfo::clear_arrusersimpleinfo() {
  arrusersimpleinfo_.Clear();
}
inline const ::pb::TUserSimpleInfo& TGuildWarFieldInfo::arrusersimpleinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarFieldInfo.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Get(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarFieldInfo::mutable_arrusersimpleinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarFieldInfo.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarFieldInfo::add_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarFieldInfo.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TGuildWarFieldInfo::arrusersimpleinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarFieldInfo.ArrUserSimpleInfo)
  return arrusersimpleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TGuildWarFieldInfo::mutable_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarFieldInfo.ArrUserSimpleInfo)
  return &arrusersimpleinfo_;
}

// -------------------------------------------------------------------

// TGuildWarTeamBaseInfo

// optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 1;
inline bool TGuildWarTeamBaseInfo::has_teamidinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarTeamBaseInfo::set_has_teamidinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarTeamBaseInfo::clear_has_teamidinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarTeamBaseInfo::clear_teamidinfo() {
  if (teamidinfo_ != NULL) teamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
  clear_has_teamidinfo();
}
inline const ::pb::TGuildWarTeamIdInfo& TGuildWarTeamBaseInfo::teamidinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTeamBaseInfo.TeamIdInfo)
  return teamidinfo_ != NULL ? *teamidinfo_ : *default_instance_->teamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarTeamBaseInfo::mutable_teamidinfo() {
  set_has_teamidinfo();
  if (teamidinfo_ == NULL) teamidinfo_ = new ::pb::TGuildWarTeamIdInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarTeamBaseInfo.TeamIdInfo)
  return teamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarTeamBaseInfo::release_teamidinfo() {
  clear_has_teamidinfo();
  ::pb::TGuildWarTeamIdInfo* temp = teamidinfo_;
  teamidinfo_ = NULL;
  return temp;
}
inline void TGuildWarTeamBaseInfo::set_allocated_teamidinfo(::pb::TGuildWarTeamIdInfo* teamidinfo) {
  delete teamidinfo_;
  teamidinfo_ = teamidinfo;
  if (teamidinfo) {
    set_has_teamidinfo();
  } else {
    clear_has_teamidinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarTeamBaseInfo.TeamIdInfo)
}

// optional uint64 FightForce = 2;
inline bool TGuildWarTeamBaseInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarTeamBaseInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarTeamBaseInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarTeamBaseInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TGuildWarTeamBaseInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTeamBaseInfo.FightForce)
  return fightforce_;
}
inline void TGuildWarTeamBaseInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarTeamBaseInfo.FightForce)
}

// optional uint32 TowerId = 3;
inline bool TGuildWarTeamBaseInfo::has_towerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildWarTeamBaseInfo::set_has_towerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildWarTeamBaseInfo::clear_has_towerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildWarTeamBaseInfo::clear_towerid() {
  towerid_ = 0u;
  clear_has_towerid();
}
inline ::google::protobuf::uint32 TGuildWarTeamBaseInfo::towerid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTeamBaseInfo.TowerId)
  return towerid_;
}
inline void TGuildWarTeamBaseInfo::set_towerid(::google::protobuf::uint32 value) {
  set_has_towerid();
  towerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarTeamBaseInfo.TowerId)
}

// optional uint32 Htid = 4;
inline bool TGuildWarTeamBaseInfo::has_htid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildWarTeamBaseInfo::set_has_htid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildWarTeamBaseInfo::clear_has_htid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildWarTeamBaseInfo::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TGuildWarTeamBaseInfo::htid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTeamBaseInfo.Htid)
  return htid_;
}
inline void TGuildWarTeamBaseInfo::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarTeamBaseInfo.Htid)
}

// optional uint32 BattleInfoId = 5;
inline bool TGuildWarTeamBaseInfo::has_battleinfoid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildWarTeamBaseInfo::set_has_battleinfoid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildWarTeamBaseInfo::clear_has_battleinfoid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildWarTeamBaseInfo::clear_battleinfoid() {
  battleinfoid_ = 0u;
  clear_has_battleinfoid();
}
inline ::google::protobuf::uint32 TGuildWarTeamBaseInfo::battleinfoid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTeamBaseInfo.BattleInfoId)
  return battleinfoid_;
}
inline void TGuildWarTeamBaseInfo::set_battleinfoid(::google::protobuf::uint32 value) {
  set_has_battleinfoid();
  battleinfoid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarTeamBaseInfo.BattleInfoId)
}

// -------------------------------------------------------------------

// TGuildWarTeamInfoWithHp

// optional .pb.TGuildWarTeamBaseInfo TeamBaseInfo = 1;
inline bool TGuildWarTeamInfoWithHp::has_teambaseinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarTeamInfoWithHp::set_has_teambaseinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarTeamInfoWithHp::clear_has_teambaseinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarTeamInfoWithHp::clear_teambaseinfo() {
  if (teambaseinfo_ != NULL) teambaseinfo_->::pb::TGuildWarTeamBaseInfo::Clear();
  clear_has_teambaseinfo();
}
inline const ::pb::TGuildWarTeamBaseInfo& TGuildWarTeamInfoWithHp::teambaseinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTeamInfoWithHp.TeamBaseInfo)
  return teambaseinfo_ != NULL ? *teambaseinfo_ : *default_instance_->teambaseinfo_;
}
inline ::pb::TGuildWarTeamBaseInfo* TGuildWarTeamInfoWithHp::mutable_teambaseinfo() {
  set_has_teambaseinfo();
  if (teambaseinfo_ == NULL) teambaseinfo_ = new ::pb::TGuildWarTeamBaseInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarTeamInfoWithHp.TeamBaseInfo)
  return teambaseinfo_;
}
inline ::pb::TGuildWarTeamBaseInfo* TGuildWarTeamInfoWithHp::release_teambaseinfo() {
  clear_has_teambaseinfo();
  ::pb::TGuildWarTeamBaseInfo* temp = teambaseinfo_;
  teambaseinfo_ = NULL;
  return temp;
}
inline void TGuildWarTeamInfoWithHp::set_allocated_teambaseinfo(::pb::TGuildWarTeamBaseInfo* teambaseinfo) {
  delete teambaseinfo_;
  teambaseinfo_ = teambaseinfo;
  if (teambaseinfo) {
    set_has_teambaseinfo();
  } else {
    clear_has_teambaseinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarTeamInfoWithHp.TeamBaseInfo)
}

// optional uint32 CurHpPer = 2;
inline bool TGuildWarTeamInfoWithHp::has_curhpper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarTeamInfoWithHp::set_has_curhpper() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarTeamInfoWithHp::clear_has_curhpper() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarTeamInfoWithHp::clear_curhpper() {
  curhpper_ = 0u;
  clear_has_curhpper();
}
inline ::google::protobuf::uint32 TGuildWarTeamInfoWithHp::curhpper() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTeamInfoWithHp.CurHpPer)
  return curhpper_;
}
inline void TGuildWarTeamInfoWithHp::set_curhpper(::google::protobuf::uint32 value) {
  set_has_curhpper();
  curhpper_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarTeamInfoWithHp.CurHpPer)
}

// -------------------------------------------------------------------

// TGuildWarHeroDetailInfo

// optional uint64 Uid = 1;
inline bool TGuildWarHeroDetailInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarHeroDetailInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarHeroDetailInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarHeroDetailInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TGuildWarHeroDetailInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarHeroDetailInfo.Uid)
  return uid_;
}
inline void TGuildWarHeroDetailInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarHeroDetailInfo.Uid)
}

// optional uint32 Hid = 2;
inline bool TGuildWarHeroDetailInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarHeroDetailInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarHeroDetailInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarHeroDetailInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TGuildWarHeroDetailInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarHeroDetailInfo.Hid)
  return hid_;
}
inline void TGuildWarHeroDetailInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarHeroDetailInfo.Hid)
}

// optional uint32 Pos = 3;
inline bool TGuildWarHeroDetailInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildWarHeroDetailInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildWarHeroDetailInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildWarHeroDetailInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TGuildWarHeroDetailInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarHeroDetailInfo.Pos)
  return pos_;
}
inline void TGuildWarHeroDetailInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarHeroDetailInfo.Pos)
}

// optional uint32 Htid = 4;
inline bool TGuildWarHeroDetailInfo::has_htid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildWarHeroDetailInfo::set_has_htid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildWarHeroDetailInfo::clear_has_htid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildWarHeroDetailInfo::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TGuildWarHeroDetailInfo::htid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarHeroDetailInfo.Htid)
  return htid_;
}
inline void TGuildWarHeroDetailInfo::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarHeroDetailInfo.Htid)
}

// optional uint32 Level = 5;
inline bool TGuildWarHeroDetailInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildWarHeroDetailInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildWarHeroDetailInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildWarHeroDetailInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TGuildWarHeroDetailInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarHeroDetailInfo.Level)
  return level_;
}
inline void TGuildWarHeroDetailInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarHeroDetailInfo.Level)
}

// optional uint32 StarLv = 6;
inline bool TGuildWarHeroDetailInfo::has_starlv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildWarHeroDetailInfo::set_has_starlv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildWarHeroDetailInfo::clear_has_starlv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildWarHeroDetailInfo::clear_starlv() {
  starlv_ = 0u;
  clear_has_starlv();
}
inline ::google::protobuf::uint32 TGuildWarHeroDetailInfo::starlv() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarHeroDetailInfo.StarLv)
  return starlv_;
}
inline void TGuildWarHeroDetailInfo::set_starlv(::google::protobuf::uint32 value) {
  set_has_starlv();
  starlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarHeroDetailInfo.StarLv)
}

// optional uint32 AdvLv = 7;
inline bool TGuildWarHeroDetailInfo::has_advlv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGuildWarHeroDetailInfo::set_has_advlv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGuildWarHeroDetailInfo::clear_has_advlv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGuildWarHeroDetailInfo::clear_advlv() {
  advlv_ = 0u;
  clear_has_advlv();
}
inline ::google::protobuf::uint32 TGuildWarHeroDetailInfo::advlv() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarHeroDetailInfo.AdvLv)
  return advlv_;
}
inline void TGuildWarHeroDetailInfo::set_advlv(::google::protobuf::uint32 value) {
  set_has_advlv();
  advlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarHeroDetailInfo.AdvLv)
}

// optional uint32 CurHpPer = 8;
inline bool TGuildWarHeroDetailInfo::has_curhpper() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGuildWarHeroDetailInfo::set_has_curhpper() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGuildWarHeroDetailInfo::clear_has_curhpper() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGuildWarHeroDetailInfo::clear_curhpper() {
  curhpper_ = 0u;
  clear_has_curhpper();
}
inline ::google::protobuf::uint32 TGuildWarHeroDetailInfo::curhpper() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarHeroDetailInfo.CurHpPer)
  return curhpper_;
}
inline void TGuildWarHeroDetailInfo::set_curhpper(::google::protobuf::uint32 value) {
  set_has_curhpper();
  curhpper_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarHeroDetailInfo.CurHpPer)
}

// optional uint32 CurRage = 9;
inline bool TGuildWarHeroDetailInfo::has_currage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TGuildWarHeroDetailInfo::set_has_currage() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TGuildWarHeroDetailInfo::clear_has_currage() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TGuildWarHeroDetailInfo::clear_currage() {
  currage_ = 0u;
  clear_has_currage();
}
inline ::google::protobuf::uint32 TGuildWarHeroDetailInfo::currage() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarHeroDetailInfo.CurRage)
  return currage_;
}
inline void TGuildWarHeroDetailInfo::set_currage(::google::protobuf::uint32 value) {
  set_has_currage();
  currage_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarHeroDetailInfo.CurRage)
}

// optional uint64 FightForce = 10;
inline bool TGuildWarHeroDetailInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TGuildWarHeroDetailInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TGuildWarHeroDetailInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TGuildWarHeroDetailInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TGuildWarHeroDetailInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarHeroDetailInfo.FightForce)
  return fightforce_;
}
inline void TGuildWarHeroDetailInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarHeroDetailInfo.FightForce)
}

// -------------------------------------------------------------------

// TGuildWarTeamDetailInfo

// optional .pb.TGuildWarTeamBaseInfo TeamBaseInfo = 1;
inline bool TGuildWarTeamDetailInfo::has_teambaseinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarTeamDetailInfo::set_has_teambaseinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarTeamDetailInfo::clear_has_teambaseinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarTeamDetailInfo::clear_teambaseinfo() {
  if (teambaseinfo_ != NULL) teambaseinfo_->::pb::TGuildWarTeamBaseInfo::Clear();
  clear_has_teambaseinfo();
}
inline const ::pb::TGuildWarTeamBaseInfo& TGuildWarTeamDetailInfo::teambaseinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTeamDetailInfo.TeamBaseInfo)
  return teambaseinfo_ != NULL ? *teambaseinfo_ : *default_instance_->teambaseinfo_;
}
inline ::pb::TGuildWarTeamBaseInfo* TGuildWarTeamDetailInfo::mutable_teambaseinfo() {
  set_has_teambaseinfo();
  if (teambaseinfo_ == NULL) teambaseinfo_ = new ::pb::TGuildWarTeamBaseInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarTeamDetailInfo.TeamBaseInfo)
  return teambaseinfo_;
}
inline ::pb::TGuildWarTeamBaseInfo* TGuildWarTeamDetailInfo::release_teambaseinfo() {
  clear_has_teambaseinfo();
  ::pb::TGuildWarTeamBaseInfo* temp = teambaseinfo_;
  teambaseinfo_ = NULL;
  return temp;
}
inline void TGuildWarTeamDetailInfo::set_allocated_teambaseinfo(::pb::TGuildWarTeamBaseInfo* teambaseinfo) {
  delete teambaseinfo_;
  teambaseinfo_ = teambaseinfo;
  if (teambaseinfo) {
    set_has_teambaseinfo();
  } else {
    clear_has_teambaseinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarTeamDetailInfo.TeamBaseInfo)
}

// repeated .pb.TGuildWarHeroDetailInfo ArrFormation = 2;
inline int TGuildWarTeamDetailInfo::arrformation_size() const {
  return arrformation_.size();
}
inline void TGuildWarTeamDetailInfo::clear_arrformation() {
  arrformation_.Clear();
}
inline const ::pb::TGuildWarHeroDetailInfo& TGuildWarTeamDetailInfo::arrformation(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTeamDetailInfo.ArrFormation)
  return arrformation_.Get(index);
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarTeamDetailInfo::mutable_arrformation(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarTeamDetailInfo.ArrFormation)
  return arrformation_.Mutable(index);
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarTeamDetailInfo::add_arrformation() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarTeamDetailInfo.ArrFormation)
  return arrformation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >&
TGuildWarTeamDetailInfo::arrformation() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarTeamDetailInfo.ArrFormation)
  return arrformation_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >*
TGuildWarTeamDetailInfo::mutable_arrformation() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarTeamDetailInfo.ArrFormation)
  return &arrformation_;
}

// optional uint32 AttackedNum = 3;
inline bool TGuildWarTeamDetailInfo::has_attackednum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildWarTeamDetailInfo::set_has_attackednum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildWarTeamDetailInfo::clear_has_attackednum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildWarTeamDetailInfo::clear_attackednum() {
  attackednum_ = 0u;
  clear_has_attackednum();
}
inline ::google::protobuf::uint32 TGuildWarTeamDetailInfo::attackednum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTeamDetailInfo.AttackedNum)
  return attackednum_;
}
inline void TGuildWarTeamDetailInfo::set_attackednum(::google::protobuf::uint32 value) {
  set_has_attackednum();
  attackednum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarTeamDetailInfo.AttackedNum)
}

// optional uint32 ReducedMorale = 4;
inline bool TGuildWarTeamDetailInfo::has_reducedmorale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildWarTeamDetailInfo::set_has_reducedmorale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildWarTeamDetailInfo::clear_has_reducedmorale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildWarTeamDetailInfo::clear_reducedmorale() {
  reducedmorale_ = 0u;
  clear_has_reducedmorale();
}
inline ::google::protobuf::uint32 TGuildWarTeamDetailInfo::reducedmorale() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTeamDetailInfo.ReducedMorale)
  return reducedmorale_;
}
inline void TGuildWarTeamDetailInfo::set_reducedmorale(::google::protobuf::uint32 value) {
  set_has_reducedmorale();
  reducedmorale_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarTeamDetailInfo.ReducedMorale)
}

// -------------------------------------------------------------------

// TGuildWarBattleRecordInfo

// optional uint64 AttackUid = 1;
inline bool TGuildWarBattleRecordInfo::has_attackuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarBattleRecordInfo::set_has_attackuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarBattleRecordInfo::clear_has_attackuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarBattleRecordInfo::clear_attackuid() {
  attackuid_ = GOOGLE_ULONGLONG(0);
  clear_has_attackuid();
}
inline ::google::protobuf::uint64 TGuildWarBattleRecordInfo::attackuid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarBattleRecordInfo.AttackUid)
  return attackuid_;
}
inline void TGuildWarBattleRecordInfo::set_attackuid(::google::protobuf::uint64 value) {
  set_has_attackuid();
  attackuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarBattleRecordInfo.AttackUid)
}

// optional uint64 DefenseUid = 2;
inline bool TGuildWarBattleRecordInfo::has_defenseuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarBattleRecordInfo::set_has_defenseuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarBattleRecordInfo::clear_has_defenseuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarBattleRecordInfo::clear_defenseuid() {
  defenseuid_ = GOOGLE_ULONGLONG(0);
  clear_has_defenseuid();
}
inline ::google::protobuf::uint64 TGuildWarBattleRecordInfo::defenseuid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarBattleRecordInfo.DefenseUid)
  return defenseuid_;
}
inline void TGuildWarBattleRecordInfo::set_defenseuid(::google::protobuf::uint64 value) {
  set_has_defenseuid();
  defenseuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarBattleRecordInfo.DefenseUid)
}

// optional uint32 TowerId = 3;
inline bool TGuildWarBattleRecordInfo::has_towerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildWarBattleRecordInfo::set_has_towerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildWarBattleRecordInfo::clear_has_towerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildWarBattleRecordInfo::clear_towerid() {
  towerid_ = 0u;
  clear_has_towerid();
}
inline ::google::protobuf::uint32 TGuildWarBattleRecordInfo::towerid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarBattleRecordInfo.TowerId)
  return towerid_;
}
inline void TGuildWarBattleRecordInfo::set_towerid(::google::protobuf::uint32 value) {
  set_has_towerid();
  towerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarBattleRecordInfo.TowerId)
}

// optional uint32 TeamIndex = 4;
inline bool TGuildWarBattleRecordInfo::has_teamindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildWarBattleRecordInfo::set_has_teamindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildWarBattleRecordInfo::clear_has_teamindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildWarBattleRecordInfo::clear_teamindex() {
  teamindex_ = 0u;
  clear_has_teamindex();
}
inline ::google::protobuf::uint32 TGuildWarBattleRecordInfo::teamindex() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarBattleRecordInfo.TeamIndex)
  return teamindex_;
}
inline void TGuildWarBattleRecordInfo::set_teamindex(::google::protobuf::uint32 value) {
  set_has_teamindex();
  teamindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarBattleRecordInfo.TeamIndex)
}

// optional uint64 AttackFightForce = 5;
inline bool TGuildWarBattleRecordInfo::has_attackfightforce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildWarBattleRecordInfo::set_has_attackfightforce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildWarBattleRecordInfo::clear_has_attackfightforce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildWarBattleRecordInfo::clear_attackfightforce() {
  attackfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_attackfightforce();
}
inline ::google::protobuf::uint64 TGuildWarBattleRecordInfo::attackfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarBattleRecordInfo.AttackFightForce)
  return attackfightforce_;
}
inline void TGuildWarBattleRecordInfo::set_attackfightforce(::google::protobuf::uint64 value) {
  set_has_attackfightforce();
  attackfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarBattleRecordInfo.AttackFightForce)
}

// optional uint64 DefenseFightForce = 6;
inline bool TGuildWarBattleRecordInfo::has_defensefightforce() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildWarBattleRecordInfo::set_has_defensefightforce() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildWarBattleRecordInfo::clear_has_defensefightforce() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildWarBattleRecordInfo::clear_defensefightforce() {
  defensefightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_defensefightforce();
}
inline ::google::protobuf::uint64 TGuildWarBattleRecordInfo::defensefightforce() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarBattleRecordInfo.DefenseFightForce)
  return defensefightforce_;
}
inline void TGuildWarBattleRecordInfo::set_defensefightforce(::google::protobuf::uint64 value) {
  set_has_defensefightforce();
  defensefightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarBattleRecordInfo.DefenseFightForce)
}

// optional uint64 RecordTime = 7;
inline bool TGuildWarBattleRecordInfo::has_recordtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGuildWarBattleRecordInfo::set_has_recordtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGuildWarBattleRecordInfo::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGuildWarBattleRecordInfo::clear_recordtime() {
  recordtime_ = GOOGLE_ULONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::uint64 TGuildWarBattleRecordInfo::recordtime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarBattleRecordInfo.RecordTime)
  return recordtime_;
}
inline void TGuildWarBattleRecordInfo::set_recordtime(::google::protobuf::uint64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarBattleRecordInfo.RecordTime)
}

// optional uint32 Success = 8;
inline bool TGuildWarBattleRecordInfo::has_success() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGuildWarBattleRecordInfo::set_has_success() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGuildWarBattleRecordInfo::clear_has_success() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGuildWarBattleRecordInfo::clear_success() {
  success_ = 0u;
  clear_has_success();
}
inline ::google::protobuf::uint32 TGuildWarBattleRecordInfo::success() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarBattleRecordInfo.Success)
  return success_;
}
inline void TGuildWarBattleRecordInfo::set_success(::google::protobuf::uint32 value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarBattleRecordInfo.Success)
}

// optional uint64 Rid = 9;
inline bool TGuildWarBattleRecordInfo::has_rid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TGuildWarBattleRecordInfo::set_has_rid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TGuildWarBattleRecordInfo::clear_has_rid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TGuildWarBattleRecordInfo::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::uint64 TGuildWarBattleRecordInfo::rid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarBattleRecordInfo.Rid)
  return rid_;
}
inline void TGuildWarBattleRecordInfo::set_rid(::google::protobuf::uint64 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarBattleRecordInfo.Rid)
}

// optional uint64 AttackGuildId = 10;
inline bool TGuildWarBattleRecordInfo::has_attackguildid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TGuildWarBattleRecordInfo::set_has_attackguildid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TGuildWarBattleRecordInfo::clear_has_attackguildid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TGuildWarBattleRecordInfo::clear_attackguildid() {
  attackguildid_ = GOOGLE_ULONGLONG(0);
  clear_has_attackguildid();
}
inline ::google::protobuf::uint64 TGuildWarBattleRecordInfo::attackguildid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarBattleRecordInfo.AttackGuildId)
  return attackguildid_;
}
inline void TGuildWarBattleRecordInfo::set_attackguildid(::google::protobuf::uint64 value) {
  set_has_attackguildid();
  attackguildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarBattleRecordInfo.AttackGuildId)
}

// optional uint64 DefenseGuildId = 11;
inline bool TGuildWarBattleRecordInfo::has_defenseguildid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TGuildWarBattleRecordInfo::set_has_defenseguildid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TGuildWarBattleRecordInfo::clear_has_defenseguildid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TGuildWarBattleRecordInfo::clear_defenseguildid() {
  defenseguildid_ = GOOGLE_ULONGLONG(0);
  clear_has_defenseguildid();
}
inline ::google::protobuf::uint64 TGuildWarBattleRecordInfo::defenseguildid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarBattleRecordInfo.DefenseGuildId)
  return defenseguildid_;
}
inline void TGuildWarBattleRecordInfo::set_defenseguildid(::google::protobuf::uint64 value) {
  set_has_defenseguildid();
  defenseguildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarBattleRecordInfo.DefenseGuildId)
}

// optional uint32 BattleInfoId = 12;
inline bool TGuildWarBattleRecordInfo::has_battleinfoid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TGuildWarBattleRecordInfo::set_has_battleinfoid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TGuildWarBattleRecordInfo::clear_has_battleinfoid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TGuildWarBattleRecordInfo::clear_battleinfoid() {
  battleinfoid_ = 0u;
  clear_has_battleinfoid();
}
inline ::google::protobuf::uint32 TGuildWarBattleRecordInfo::battleinfoid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarBattleRecordInfo.BattleInfoId)
  return battleinfoid_;
}
inline void TGuildWarBattleRecordInfo::set_battleinfoid(::google::protobuf::uint32 value) {
  set_has_battleinfoid();
  battleinfoid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarBattleRecordInfo.BattleInfoId)
}

// -------------------------------------------------------------------

// TGuildWarRankInfo

// optional uint64 Uid = 1;
inline bool TGuildWarRankInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarRankInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarRankInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarRankInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TGuildWarRankInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarRankInfo.Uid)
  return uid_;
}
inline void TGuildWarRankInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarRankInfo.Uid)
}

// optional uint32 DefeatNum = 2;
inline bool TGuildWarRankInfo::has_defeatnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarRankInfo::set_has_defeatnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarRankInfo::clear_has_defeatnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarRankInfo::clear_defeatnum() {
  defeatnum_ = 0u;
  clear_has_defeatnum();
}
inline ::google::protobuf::uint32 TGuildWarRankInfo::defeatnum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarRankInfo.DefeatNum)
  return defeatnum_;
}
inline void TGuildWarRankInfo::set_defeatnum(::google::protobuf::uint32 value) {
  set_has_defeatnum();
  defeatnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarRankInfo.DefeatNum)
}

// optional uint64 DefeatTime = 3;
inline bool TGuildWarRankInfo::has_defeattime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildWarRankInfo::set_has_defeattime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildWarRankInfo::clear_has_defeattime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildWarRankInfo::clear_defeattime() {
  defeattime_ = GOOGLE_ULONGLONG(0);
  clear_has_defeattime();
}
inline ::google::protobuf::uint64 TGuildWarRankInfo::defeattime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarRankInfo.DefeatTime)
  return defeattime_;
}
inline void TGuildWarRankInfo::set_defeattime(::google::protobuf::uint64 value) {
  set_has_defeattime();
  defeattime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarRankInfo.DefeatTime)
}

// optional uint64 DamageNum = 4;
inline bool TGuildWarRankInfo::has_damagenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildWarRankInfo::set_has_damagenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildWarRankInfo::clear_has_damagenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildWarRankInfo::clear_damagenum() {
  damagenum_ = GOOGLE_ULONGLONG(0);
  clear_has_damagenum();
}
inline ::google::protobuf::uint64 TGuildWarRankInfo::damagenum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarRankInfo.DamageNum)
  return damagenum_;
}
inline void TGuildWarRankInfo::set_damagenum(::google::protobuf::uint64 value) {
  set_has_damagenum();
  damagenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarRankInfo.DamageNum)
}

// optional uint64 DamageTime = 5;
inline bool TGuildWarRankInfo::has_damagetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildWarRankInfo::set_has_damagetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildWarRankInfo::clear_has_damagetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildWarRankInfo::clear_damagetime() {
  damagetime_ = GOOGLE_ULONGLONG(0);
  clear_has_damagetime();
}
inline ::google::protobuf::uint64 TGuildWarRankInfo::damagetime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarRankInfo.DamageTime)
  return damagetime_;
}
inline void TGuildWarRankInfo::set_damagetime(::google::protobuf::uint64 value) {
  set_has_damagetime();
  damagetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarRankInfo.DamageTime)
}

// -------------------------------------------------------------------

// TGuildWarStageInfo

// optional .pb.EGuildWarStage CurStage = 1;
inline bool TGuildWarStageInfo::has_curstage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarStageInfo::set_has_curstage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarStageInfo::clear_has_curstage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarStageInfo::clear_curstage() {
  curstage_ = 0;
  clear_has_curstage();
}
inline ::pb::EGuildWarStage TGuildWarStageInfo::curstage() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.CurStage)
  return static_cast< ::pb::EGuildWarStage >(curstage_);
}
inline void TGuildWarStageInfo::set_curstage(::pb::EGuildWarStage value) {
  assert(::pb::EGuildWarStage_IsValid(value));
  set_has_curstage();
  curstage_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarStageInfo.CurStage)
}

// optional uint64 BeginTime = 2;
inline bool TGuildWarStageInfo::has_begintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarStageInfo::set_has_begintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarStageInfo::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarStageInfo::clear_begintime() {
  begintime_ = GOOGLE_ULONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::uint64 TGuildWarStageInfo::begintime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.BeginTime)
  return begintime_;
}
inline void TGuildWarStageInfo::set_begintime(::google::protobuf::uint64 value) {
  set_has_begintime();
  begintime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarStageInfo.BeginTime)
}

// optional uint64 EndTime = 3;
inline bool TGuildWarStageInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildWarStageInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildWarStageInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildWarStageInfo::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TGuildWarStageInfo::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.EndTime)
  return endtime_;
}
inline void TGuildWarStageInfo::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarStageInfo.EndTime)
}

// optional uint64 SignUpTime = 4;
inline bool TGuildWarStageInfo::has_signuptime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildWarStageInfo::set_has_signuptime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildWarStageInfo::clear_has_signuptime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildWarStageInfo::clear_signuptime() {
  signuptime_ = GOOGLE_ULONGLONG(0);
  clear_has_signuptime();
}
inline ::google::protobuf::uint64 TGuildWarStageInfo::signuptime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.SignUpTime)
  return signuptime_;
}
inline void TGuildWarStageInfo::set_signuptime(::google::protobuf::uint64 value) {
  set_has_signuptime();
  signuptime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarStageInfo.SignUpTime)
}

// optional uint32 SelfGLevel = 5;
inline bool TGuildWarStageInfo::has_selfglevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildWarStageInfo::set_has_selfglevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildWarStageInfo::clear_has_selfglevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildWarStageInfo::clear_selfglevel() {
  selfglevel_ = 0u;
  clear_has_selfglevel();
}
inline ::google::protobuf::uint32 TGuildWarStageInfo::selfglevel() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.SelfGLevel)
  return selfglevel_;
}
inline void TGuildWarStageInfo::set_selfglevel(::google::protobuf::uint32 value) {
  set_has_selfglevel();
  selfglevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarStageInfo.SelfGLevel)
}

// optional uint32 SelfGPos = 6;
inline bool TGuildWarStageInfo::has_selfgpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildWarStageInfo::set_has_selfgpos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildWarStageInfo::clear_has_selfgpos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildWarStageInfo::clear_selfgpos() {
  selfgpos_ = 0u;
  clear_has_selfgpos();
}
inline ::google::protobuf::uint32 TGuildWarStageInfo::selfgpos() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.SelfGPos)
  return selfgpos_;
}
inline void TGuildWarStageInfo::set_selfgpos(::google::protobuf::uint32 value) {
  set_has_selfgpos();
  selfgpos_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarStageInfo.SelfGPos)
}

// optional uint64 TargetGid = 7;
inline bool TGuildWarStageInfo::has_targetgid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGuildWarStageInfo::set_has_targetgid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGuildWarStageInfo::clear_has_targetgid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGuildWarStageInfo::clear_targetgid() {
  targetgid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetgid();
}
inline ::google::protobuf::uint64 TGuildWarStageInfo::targetgid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.TargetGid)
  return targetgid_;
}
inline void TGuildWarStageInfo::set_targetgid(::google::protobuf::uint64 value) {
  set_has_targetgid();
  targetgid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarStageInfo.TargetGid)
}

// optional string TargetGName = 8;
inline bool TGuildWarStageInfo::has_targetgname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGuildWarStageInfo::set_has_targetgname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGuildWarStageInfo::clear_has_targetgname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGuildWarStageInfo::clear_targetgname() {
  if (targetgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetgname_->clear();
  }
  clear_has_targetgname();
}
inline const ::std::string& TGuildWarStageInfo::targetgname() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.TargetGName)
  return *targetgname_;
}
inline void TGuildWarStageInfo::set_targetgname(const ::std::string& value) {
  set_has_targetgname();
  if (targetgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetgname_ = new ::std::string;
  }
  targetgname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildWarStageInfo.TargetGName)
}
inline void TGuildWarStageInfo::set_targetgname(const char* value) {
  set_has_targetgname();
  if (targetgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetgname_ = new ::std::string;
  }
  targetgname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildWarStageInfo.TargetGName)
}
inline void TGuildWarStageInfo::set_targetgname(const char* value, size_t size) {
  set_has_targetgname();
  if (targetgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetgname_ = new ::std::string;
  }
  targetgname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildWarStageInfo.TargetGName)
}
inline ::std::string* TGuildWarStageInfo::mutable_targetgname() {
  set_has_targetgname();
  if (targetgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetgname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarStageInfo.TargetGName)
  return targetgname_;
}
inline ::std::string* TGuildWarStageInfo::release_targetgname() {
  clear_has_targetgname();
  if (targetgname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = targetgname_;
    targetgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildWarStageInfo::set_allocated_targetgname(::std::string* targetgname) {
  if (targetgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetgname_;
  }
  if (targetgname) {
    set_has_targetgname();
    targetgname_ = targetgname;
  } else {
    clear_has_targetgname();
    targetgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarStageInfo.TargetGName)
}

// optional string TargetServerId = 9;
inline bool TGuildWarStageInfo::has_targetserverid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TGuildWarStageInfo::set_has_targetserverid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TGuildWarStageInfo::clear_has_targetserverid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TGuildWarStageInfo::clear_targetserverid() {
  if (targetserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetserverid_->clear();
  }
  clear_has_targetserverid();
}
inline const ::std::string& TGuildWarStageInfo::targetserverid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.TargetServerId)
  return *targetserverid_;
}
inline void TGuildWarStageInfo::set_targetserverid(const ::std::string& value) {
  set_has_targetserverid();
  if (targetserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetserverid_ = new ::std::string;
  }
  targetserverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildWarStageInfo.TargetServerId)
}
inline void TGuildWarStageInfo::set_targetserverid(const char* value) {
  set_has_targetserverid();
  if (targetserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetserverid_ = new ::std::string;
  }
  targetserverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildWarStageInfo.TargetServerId)
}
inline void TGuildWarStageInfo::set_targetserverid(const char* value, size_t size) {
  set_has_targetserverid();
  if (targetserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetserverid_ = new ::std::string;
  }
  targetserverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildWarStageInfo.TargetServerId)
}
inline ::std::string* TGuildWarStageInfo::mutable_targetserverid() {
  set_has_targetserverid();
  if (targetserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetserverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarStageInfo.TargetServerId)
  return targetserverid_;
}
inline ::std::string* TGuildWarStageInfo::release_targetserverid() {
  clear_has_targetserverid();
  if (targetserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = targetserverid_;
    targetserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildWarStageInfo::set_allocated_targetserverid(::std::string* targetserverid) {
  if (targetserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetserverid_;
  }
  if (targetserverid) {
    set_has_targetserverid();
    targetserverid_ = targetserverid;
  } else {
    clear_has_targetserverid();
    targetserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarStageInfo.TargetServerId)
}

// optional uint32 TargetGLevel = 10;
inline bool TGuildWarStageInfo::has_targetglevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TGuildWarStageInfo::set_has_targetglevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TGuildWarStageInfo::clear_has_targetglevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TGuildWarStageInfo::clear_targetglevel() {
  targetglevel_ = 0u;
  clear_has_targetglevel();
}
inline ::google::protobuf::uint32 TGuildWarStageInfo::targetglevel() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.TargetGLevel)
  return targetglevel_;
}
inline void TGuildWarStageInfo::set_targetglevel(::google::protobuf::uint32 value) {
  set_has_targetglevel();
  targetglevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarStageInfo.TargetGLevel)
}

// repeated .pb.EGuildWarResult ArrCallForBattleResult = 11;
inline int TGuildWarStageInfo::arrcallforbattleresult_size() const {
  return arrcallforbattleresult_.size();
}
inline void TGuildWarStageInfo::clear_arrcallforbattleresult() {
  arrcallforbattleresult_.Clear();
}
inline ::pb::EGuildWarResult TGuildWarStageInfo::arrcallforbattleresult(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.ArrCallForBattleResult)
  return static_cast< ::pb::EGuildWarResult >(arrcallforbattleresult_.Get(index));
}
inline void TGuildWarStageInfo::set_arrcallforbattleresult(int index, ::pb::EGuildWarResult value) {
  assert(::pb::EGuildWarResult_IsValid(value));
  arrcallforbattleresult_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGuildWarStageInfo.ArrCallForBattleResult)
}
inline void TGuildWarStageInfo::add_arrcallforbattleresult(::pb::EGuildWarResult value) {
  assert(::pb::EGuildWarResult_IsValid(value));
  arrcallforbattleresult_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGuildWarStageInfo.ArrCallForBattleResult)
}
inline const ::google::protobuf::RepeatedField<int>&
TGuildWarStageInfo::arrcallforbattleresult() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarStageInfo.ArrCallForBattleResult)
  return arrcallforbattleresult_;
}
inline ::google::protobuf::RepeatedField<int>*
TGuildWarStageInfo::mutable_arrcallforbattleresult() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarStageInfo.ArrCallForBattleResult)
  return &arrcallforbattleresult_;
}

// optional .pb.EGuildWarResult GuildWarResult = 12;
inline bool TGuildWarStageInfo::has_guildwarresult() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TGuildWarStageInfo::set_has_guildwarresult() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TGuildWarStageInfo::clear_has_guildwarresult() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TGuildWarStageInfo::clear_guildwarresult() {
  guildwarresult_ = 0;
  clear_has_guildwarresult();
}
inline ::pb::EGuildWarResult TGuildWarStageInfo::guildwarresult() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.GuildWarResult)
  return static_cast< ::pb::EGuildWarResult >(guildwarresult_);
}
inline void TGuildWarStageInfo::set_guildwarresult(::pb::EGuildWarResult value) {
  assert(::pb::EGuildWarResult_IsValid(value));
  set_has_guildwarresult();
  guildwarresult_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarStageInfo.GuildWarResult)
}

// optional string SceneId = 13;
inline bool TGuildWarStageInfo::has_sceneid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TGuildWarStageInfo::set_has_sceneid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TGuildWarStageInfo::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TGuildWarStageInfo::clear_sceneid() {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_->clear();
  }
  clear_has_sceneid();
}
inline const ::std::string& TGuildWarStageInfo::sceneid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.SceneId)
  return *sceneid_;
}
inline void TGuildWarStageInfo::set_sceneid(const ::std::string& value) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildWarStageInfo.SceneId)
}
inline void TGuildWarStageInfo::set_sceneid(const char* value) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildWarStageInfo.SceneId)
}
inline void TGuildWarStageInfo::set_sceneid(const char* value, size_t size) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildWarStageInfo.SceneId)
}
inline ::std::string* TGuildWarStageInfo::mutable_sceneid() {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarStageInfo.SceneId)
  return sceneid_;
}
inline ::std::string* TGuildWarStageInfo::release_sceneid() {
  clear_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sceneid_;
    sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildWarStageInfo::set_allocated_sceneid(::std::string* sceneid) {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneid_;
  }
  if (sceneid) {
    set_has_sceneid();
    sceneid_ = sceneid;
  } else {
    clear_has_sceneid();
    sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarStageInfo.SceneId)
}

// optional uint32 SurplusAttackNum = 14;
inline bool TGuildWarStageInfo::has_surplusattacknum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TGuildWarStageInfo::set_has_surplusattacknum() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TGuildWarStageInfo::clear_has_surplusattacknum() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TGuildWarStageInfo::clear_surplusattacknum() {
  surplusattacknum_ = 0u;
  clear_has_surplusattacknum();
}
inline ::google::protobuf::uint32 TGuildWarStageInfo::surplusattacknum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.SurplusAttackNum)
  return surplusattacknum_;
}
inline void TGuildWarStageInfo::set_surplusattacknum(::google::protobuf::uint32 value) {
  set_has_surplusattacknum();
  surplusattacknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarStageInfo.SurplusAttackNum)
}

// optional bool IsSetCallForBattleHero = 15;
inline bool TGuildWarStageInfo::has_issetcallforbattlehero() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TGuildWarStageInfo::set_has_issetcallforbattlehero() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TGuildWarStageInfo::clear_has_issetcallforbattlehero() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TGuildWarStageInfo::clear_issetcallforbattlehero() {
  issetcallforbattlehero_ = false;
  clear_has_issetcallforbattlehero();
}
inline bool TGuildWarStageInfo::issetcallforbattlehero() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.IsSetCallForBattleHero)
  return issetcallforbattlehero_;
}
inline void TGuildWarStageInfo::set_issetcallforbattlehero(bool value) {
  set_has_issetcallforbattlehero();
  issetcallforbattlehero_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarStageInfo.IsSetCallForBattleHero)
}

// repeated .pb.TGuildWarTowerSimpleInfo ArrSelfTowerInfo = 16;
inline int TGuildWarStageInfo::arrselftowerinfo_size() const {
  return arrselftowerinfo_.size();
}
inline void TGuildWarStageInfo::clear_arrselftowerinfo() {
  arrselftowerinfo_.Clear();
}
inline const ::pb::TGuildWarTowerSimpleInfo& TGuildWarStageInfo::arrselftowerinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.ArrSelfTowerInfo)
  return arrselftowerinfo_.Get(index);
}
inline ::pb::TGuildWarTowerSimpleInfo* TGuildWarStageInfo::mutable_arrselftowerinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarStageInfo.ArrSelfTowerInfo)
  return arrselftowerinfo_.Mutable(index);
}
inline ::pb::TGuildWarTowerSimpleInfo* TGuildWarStageInfo::add_arrselftowerinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarStageInfo.ArrSelfTowerInfo)
  return arrselftowerinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTowerSimpleInfo >&
TGuildWarStageInfo::arrselftowerinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarStageInfo.ArrSelfTowerInfo)
  return arrselftowerinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTowerSimpleInfo >*
TGuildWarStageInfo::mutable_arrselftowerinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarStageInfo.ArrSelfTowerInfo)
  return &arrselftowerinfo_;
}

// repeated .pb.TGuildWarTeamBaseInfo ArrSelfTeamBaseInfo = 17;
inline int TGuildWarStageInfo::arrselfteambaseinfo_size() const {
  return arrselfteambaseinfo_.size();
}
inline void TGuildWarStageInfo::clear_arrselfteambaseinfo() {
  arrselfteambaseinfo_.Clear();
}
inline const ::pb::TGuildWarTeamBaseInfo& TGuildWarStageInfo::arrselfteambaseinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageInfo.ArrSelfTeamBaseInfo)
  return arrselfteambaseinfo_.Get(index);
}
inline ::pb::TGuildWarTeamBaseInfo* TGuildWarStageInfo::mutable_arrselfteambaseinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarStageInfo.ArrSelfTeamBaseInfo)
  return arrselfteambaseinfo_.Mutable(index);
}
inline ::pb::TGuildWarTeamBaseInfo* TGuildWarStageInfo::add_arrselfteambaseinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarStageInfo.ArrSelfTeamBaseInfo)
  return arrselfteambaseinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamBaseInfo >&
TGuildWarStageInfo::arrselfteambaseinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarStageInfo.ArrSelfTeamBaseInfo)
  return arrselfteambaseinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamBaseInfo >*
TGuildWarStageInfo::mutable_arrselfteambaseinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarStageInfo.ArrSelfTeamBaseInfo)
  return &arrselfteambaseinfo_;
}

// -------------------------------------------------------------------

// TGuildWarGetServerTeamInfoRsp

// optional uint32 TeamId = 1;
inline bool TGuildWarGetServerTeamInfoRsp::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarGetServerTeamInfoRsp::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarGetServerTeamInfoRsp::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarGetServerTeamInfoRsp::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TGuildWarGetServerTeamInfoRsp::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetServerTeamInfoRsp.TeamId)
  return teamid_;
}
inline void TGuildWarGetServerTeamInfoRsp::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarGetServerTeamInfoRsp.TeamId)
}

// optional uint32 NeedOpenDay = 2;
inline bool TGuildWarGetServerTeamInfoRsp::has_needopenday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarGetServerTeamInfoRsp::set_has_needopenday() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarGetServerTeamInfoRsp::clear_has_needopenday() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarGetServerTeamInfoRsp::clear_needopenday() {
  needopenday_ = 0u;
  clear_has_needopenday();
}
inline ::google::protobuf::uint32 TGuildWarGetServerTeamInfoRsp::needopenday() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetServerTeamInfoRsp.NeedOpenDay)
  return needopenday_;
}
inline void TGuildWarGetServerTeamInfoRsp::set_needopenday(::google::protobuf::uint32 value) {
  set_has_needopenday();
  needopenday_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarGetServerTeamInfoRsp.NeedOpenDay)
}

// -------------------------------------------------------------------

// TGuildWarGetStageInfoRsp

// optional .pb.TGuildWarStageInfo StageInfo = 1;
inline bool TGuildWarGetStageInfoRsp::has_stageinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarGetStageInfoRsp::set_has_stageinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarGetStageInfoRsp::clear_has_stageinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarGetStageInfoRsp::clear_stageinfo() {
  if (stageinfo_ != NULL) stageinfo_->::pb::TGuildWarStageInfo::Clear();
  clear_has_stageinfo();
}
inline const ::pb::TGuildWarStageInfo& TGuildWarGetStageInfoRsp::stageinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetStageInfoRsp.StageInfo)
  return stageinfo_ != NULL ? *stageinfo_ : *default_instance_->stageinfo_;
}
inline ::pb::TGuildWarStageInfo* TGuildWarGetStageInfoRsp::mutable_stageinfo() {
  set_has_stageinfo();
  if (stageinfo_ == NULL) stageinfo_ = new ::pb::TGuildWarStageInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetStageInfoRsp.StageInfo)
  return stageinfo_;
}
inline ::pb::TGuildWarStageInfo* TGuildWarGetStageInfoRsp::release_stageinfo() {
  clear_has_stageinfo();
  ::pb::TGuildWarStageInfo* temp = stageinfo_;
  stageinfo_ = NULL;
  return temp;
}
inline void TGuildWarGetStageInfoRsp::set_allocated_stageinfo(::pb::TGuildWarStageInfo* stageinfo) {
  delete stageinfo_;
  stageinfo_ = stageinfo;
  if (stageinfo) {
    set_has_stageinfo();
  } else {
    clear_has_stageinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarGetStageInfoRsp.StageInfo)
}

// -------------------------------------------------------------------

// TGuildWarEnterFieldRsp

// optional .pb.TGuildWarFieldInfo FieldInfo = 1;
inline bool TGuildWarEnterFieldRsp::has_fieldinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarEnterFieldRsp::set_has_fieldinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarEnterFieldRsp::clear_has_fieldinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarEnterFieldRsp::clear_fieldinfo() {
  if (fieldinfo_ != NULL) fieldinfo_->::pb::TGuildWarFieldInfo::Clear();
  clear_has_fieldinfo();
}
inline const ::pb::TGuildWarFieldInfo& TGuildWarEnterFieldRsp::fieldinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarEnterFieldRsp.FieldInfo)
  return fieldinfo_ != NULL ? *fieldinfo_ : *default_instance_->fieldinfo_;
}
inline ::pb::TGuildWarFieldInfo* TGuildWarEnterFieldRsp::mutable_fieldinfo() {
  set_has_fieldinfo();
  if (fieldinfo_ == NULL) fieldinfo_ = new ::pb::TGuildWarFieldInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarEnterFieldRsp.FieldInfo)
  return fieldinfo_;
}
inline ::pb::TGuildWarFieldInfo* TGuildWarEnterFieldRsp::release_fieldinfo() {
  clear_has_fieldinfo();
  ::pb::TGuildWarFieldInfo* temp = fieldinfo_;
  fieldinfo_ = NULL;
  return temp;
}
inline void TGuildWarEnterFieldRsp::set_allocated_fieldinfo(::pb::TGuildWarFieldInfo* fieldinfo) {
  delete fieldinfo_;
  fieldinfo_ = fieldinfo;
  if (fieldinfo) {
    set_has_fieldinfo();
  } else {
    clear_has_fieldinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarEnterFieldRsp.FieldInfo)
}

// -------------------------------------------------------------------

// TGuildWarGetFieldInfoRsp

// optional .pb.TGuildWarFieldInfo FieldInfo = 1;
inline bool TGuildWarGetFieldInfoRsp::has_fieldinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarGetFieldInfoRsp::set_has_fieldinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarGetFieldInfoRsp::clear_has_fieldinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarGetFieldInfoRsp::clear_fieldinfo() {
  if (fieldinfo_ != NULL) fieldinfo_->::pb::TGuildWarFieldInfo::Clear();
  clear_has_fieldinfo();
}
inline const ::pb::TGuildWarFieldInfo& TGuildWarGetFieldInfoRsp::fieldinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetFieldInfoRsp.FieldInfo)
  return fieldinfo_ != NULL ? *fieldinfo_ : *default_instance_->fieldinfo_;
}
inline ::pb::TGuildWarFieldInfo* TGuildWarGetFieldInfoRsp::mutable_fieldinfo() {
  set_has_fieldinfo();
  if (fieldinfo_ == NULL) fieldinfo_ = new ::pb::TGuildWarFieldInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetFieldInfoRsp.FieldInfo)
  return fieldinfo_;
}
inline ::pb::TGuildWarFieldInfo* TGuildWarGetFieldInfoRsp::release_fieldinfo() {
  clear_has_fieldinfo();
  ::pb::TGuildWarFieldInfo* temp = fieldinfo_;
  fieldinfo_ = NULL;
  return temp;
}
inline void TGuildWarGetFieldInfoRsp::set_allocated_fieldinfo(::pb::TGuildWarFieldInfo* fieldinfo) {
  delete fieldinfo_;
  fieldinfo_ = fieldinfo;
  if (fieldinfo) {
    set_has_fieldinfo();
  } else {
    clear_has_fieldinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarGetFieldInfoRsp.FieldInfo)
}

// -------------------------------------------------------------------

// TGuildWarSetTeamFormationReq

// repeated .pb.TGuildWarTeamFormationInfo ArrTeamFormation = 1;
inline int TGuildWarSetTeamFormationReq::arrteamformation_size() const {
  return arrteamformation_.size();
}
inline void TGuildWarSetTeamFormationReq::clear_arrteamformation() {
  arrteamformation_.Clear();
}
inline const ::pb::TGuildWarTeamFormationInfo& TGuildWarSetTeamFormationReq::arrteamformation(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarSetTeamFormationReq.ArrTeamFormation)
  return arrteamformation_.Get(index);
}
inline ::pb::TGuildWarTeamFormationInfo* TGuildWarSetTeamFormationReq::mutable_arrteamformation(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarSetTeamFormationReq.ArrTeamFormation)
  return arrteamformation_.Mutable(index);
}
inline ::pb::TGuildWarTeamFormationInfo* TGuildWarSetTeamFormationReq::add_arrteamformation() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarSetTeamFormationReq.ArrTeamFormation)
  return arrteamformation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamFormationInfo >&
TGuildWarSetTeamFormationReq::arrteamformation() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarSetTeamFormationReq.ArrTeamFormation)
  return arrteamformation_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamFormationInfo >*
TGuildWarSetTeamFormationReq::mutable_arrteamformation() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarSetTeamFormationReq.ArrTeamFormation)
  return &arrteamformation_;
}

// optional bool UseHistory = 2;
inline bool TGuildWarSetTeamFormationReq::has_usehistory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarSetTeamFormationReq::set_has_usehistory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarSetTeamFormationReq::clear_has_usehistory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarSetTeamFormationReq::clear_usehistory() {
  usehistory_ = false;
  clear_has_usehistory();
}
inline bool TGuildWarSetTeamFormationReq::usehistory() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarSetTeamFormationReq.UseHistory)
  return usehistory_;
}
inline void TGuildWarSetTeamFormationReq::set_usehistory(bool value) {
  set_has_usehistory();
  usehistory_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarSetTeamFormationReq.UseHistory)
}

// -------------------------------------------------------------------

// TGuildWarSetTeamFormationRsp

// repeated .pb.TGuildWarUserTeamInfo ArrTeamInfo = 1;
inline int TGuildWarSetTeamFormationRsp::arrteaminfo_size() const {
  return arrteaminfo_.size();
}
inline void TGuildWarSetTeamFormationRsp::clear_arrteaminfo() {
  arrteaminfo_.Clear();
}
inline const ::pb::TGuildWarUserTeamInfo& TGuildWarSetTeamFormationRsp::arrteaminfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarSetTeamFormationRsp.ArrTeamInfo)
  return arrteaminfo_.Get(index);
}
inline ::pb::TGuildWarUserTeamInfo* TGuildWarSetTeamFormationRsp::mutable_arrteaminfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarSetTeamFormationRsp.ArrTeamInfo)
  return arrteaminfo_.Mutable(index);
}
inline ::pb::TGuildWarUserTeamInfo* TGuildWarSetTeamFormationRsp::add_arrteaminfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarSetTeamFormationRsp.ArrTeamInfo)
  return arrteaminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserTeamInfo >&
TGuildWarSetTeamFormationRsp::arrteaminfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarSetTeamFormationRsp.ArrTeamInfo)
  return arrteaminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserTeamInfo >*
TGuildWarSetTeamFormationRsp::mutable_arrteaminfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarSetTeamFormationRsp.ArrTeamInfo)
  return &arrteaminfo_;
}

// -------------------------------------------------------------------

// TGuildWarSetCallForBattleHeroReq

// optional uint32 Hid = 1;
inline bool TGuildWarSetCallForBattleHeroReq::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarSetCallForBattleHeroReq::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarSetCallForBattleHeroReq::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarSetCallForBattleHeroReq::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TGuildWarSetCallForBattleHeroReq::hid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarSetCallForBattleHeroReq.Hid)
  return hid_;
}
inline void TGuildWarSetCallForBattleHeroReq::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarSetCallForBattleHeroReq.Hid)
}

// -------------------------------------------------------------------

// TGuildWarSetCallForBattleHeroRsp

// optional .pb.TGuildWarHeroDetailInfo CallForBattleHero = 1;
inline bool TGuildWarSetCallForBattleHeroRsp::has_callforbattlehero() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarSetCallForBattleHeroRsp::set_has_callforbattlehero() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarSetCallForBattleHeroRsp::clear_has_callforbattlehero() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarSetCallForBattleHeroRsp::clear_callforbattlehero() {
  if (callforbattlehero_ != NULL) callforbattlehero_->::pb::TGuildWarHeroDetailInfo::Clear();
  clear_has_callforbattlehero();
}
inline const ::pb::TGuildWarHeroDetailInfo& TGuildWarSetCallForBattleHeroRsp::callforbattlehero() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarSetCallForBattleHeroRsp.CallForBattleHero)
  return callforbattlehero_ != NULL ? *callforbattlehero_ : *default_instance_->callforbattlehero_;
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarSetCallForBattleHeroRsp::mutable_callforbattlehero() {
  set_has_callforbattlehero();
  if (callforbattlehero_ == NULL) callforbattlehero_ = new ::pb::TGuildWarHeroDetailInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarSetCallForBattleHeroRsp.CallForBattleHero)
  return callforbattlehero_;
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarSetCallForBattleHeroRsp::release_callforbattlehero() {
  clear_has_callforbattlehero();
  ::pb::TGuildWarHeroDetailInfo* temp = callforbattlehero_;
  callforbattlehero_ = NULL;
  return temp;
}
inline void TGuildWarSetCallForBattleHeroRsp::set_allocated_callforbattlehero(::pb::TGuildWarHeroDetailInfo* callforbattlehero) {
  delete callforbattlehero_;
  callforbattlehero_ = callforbattlehero;
  if (callforbattlehero) {
    set_has_callforbattlehero();
  } else {
    clear_has_callforbattlehero();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarSetCallForBattleHeroRsp.CallForBattleHero)
}

// -------------------------------------------------------------------

// TGuildWarSetAttackFormationReq

// repeated .pb.TGuildWarFormation ArrFormation = 1;
inline int TGuildWarSetAttackFormationReq::arrformation_size() const {
  return arrformation_.size();
}
inline void TGuildWarSetAttackFormationReq::clear_arrformation() {
  arrformation_.Clear();
}
inline const ::pb::TGuildWarFormation& TGuildWarSetAttackFormationReq::arrformation(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarSetAttackFormationReq.ArrFormation)
  return arrformation_.Get(index);
}
inline ::pb::TGuildWarFormation* TGuildWarSetAttackFormationReq::mutable_arrformation(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarSetAttackFormationReq.ArrFormation)
  return arrformation_.Mutable(index);
}
inline ::pb::TGuildWarFormation* TGuildWarSetAttackFormationReq::add_arrformation() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarSetAttackFormationReq.ArrFormation)
  return arrformation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation >&
TGuildWarSetAttackFormationReq::arrformation() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarSetAttackFormationReq.ArrFormation)
  return arrformation_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation >*
TGuildWarSetAttackFormationReq::mutable_arrformation() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarSetAttackFormationReq.ArrFormation)
  return &arrformation_;
}

// -------------------------------------------------------------------

// TGuildWarGetTowerInfoReq

// optional uint32 TowerId = 1;
inline bool TGuildWarGetTowerInfoReq::has_towerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarGetTowerInfoReq::set_has_towerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarGetTowerInfoReq::clear_has_towerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarGetTowerInfoReq::clear_towerid() {
  towerid_ = 0u;
  clear_has_towerid();
}
inline ::google::protobuf::uint32 TGuildWarGetTowerInfoReq::towerid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTowerInfoReq.TowerId)
  return towerid_;
}
inline void TGuildWarGetTowerInfoReq::set_towerid(::google::protobuf::uint32 value) {
  set_has_towerid();
  towerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarGetTowerInfoReq.TowerId)
}

// -------------------------------------------------------------------

// TGuildWarGetTowerInfoRsp

// optional uint32 TowerId = 1;
inline bool TGuildWarGetTowerInfoRsp::has_towerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarGetTowerInfoRsp::set_has_towerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarGetTowerInfoRsp::clear_has_towerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarGetTowerInfoRsp::clear_towerid() {
  towerid_ = 0u;
  clear_has_towerid();
}
inline ::google::protobuf::uint32 TGuildWarGetTowerInfoRsp::towerid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTowerInfoRsp.TowerId)
  return towerid_;
}
inline void TGuildWarGetTowerInfoRsp::set_towerid(::google::protobuf::uint32 value) {
  set_has_towerid();
  towerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarGetTowerInfoRsp.TowerId)
}

// repeated .pb.TGuildWarTeamInfoWithHp ArrTeamInfo = 2;
inline int TGuildWarGetTowerInfoRsp::arrteaminfo_size() const {
  return arrteaminfo_.size();
}
inline void TGuildWarGetTowerInfoRsp::clear_arrteaminfo() {
  arrteaminfo_.Clear();
}
inline const ::pb::TGuildWarTeamInfoWithHp& TGuildWarGetTowerInfoRsp::arrteaminfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTowerInfoRsp.ArrTeamInfo)
  return arrteaminfo_.Get(index);
}
inline ::pb::TGuildWarTeamInfoWithHp* TGuildWarGetTowerInfoRsp::mutable_arrteaminfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetTowerInfoRsp.ArrTeamInfo)
  return arrteaminfo_.Mutable(index);
}
inline ::pb::TGuildWarTeamInfoWithHp* TGuildWarGetTowerInfoRsp::add_arrteaminfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetTowerInfoRsp.ArrTeamInfo)
  return arrteaminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamInfoWithHp >&
TGuildWarGetTowerInfoRsp::arrteaminfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetTowerInfoRsp.ArrTeamInfo)
  return arrteaminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamInfoWithHp >*
TGuildWarGetTowerInfoRsp::mutable_arrteaminfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetTowerInfoRsp.ArrTeamInfo)
  return &arrteaminfo_;
}

// repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 3;
inline int TGuildWarGetTowerInfoRsp::arrusersimpleinfo_size() const {
  return arrusersimpleinfo_.size();
}
inline void TGuildWarGetTowerInfoRsp::clear_arrusersimpleinfo() {
  arrusersimpleinfo_.Clear();
}
inline const ::pb::TUserSimpleInfo& TGuildWarGetTowerInfoRsp::arrusersimpleinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTowerInfoRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Get(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarGetTowerInfoRsp::mutable_arrusersimpleinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetTowerInfoRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarGetTowerInfoRsp::add_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetTowerInfoRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TGuildWarGetTowerInfoRsp::arrusersimpleinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetTowerInfoRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TGuildWarGetTowerInfoRsp::mutable_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetTowerInfoRsp.ArrUserSimpleInfo)
  return &arrusersimpleinfo_;
}

// -------------------------------------------------------------------

// TGuildWarGetTowerTeamInfoReq

// optional uint32 TowerId = 1;
inline bool TGuildWarGetTowerTeamInfoReq::has_towerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarGetTowerTeamInfoReq::set_has_towerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarGetTowerTeamInfoReq::clear_has_towerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarGetTowerTeamInfoReq::clear_towerid() {
  towerid_ = 0u;
  clear_has_towerid();
}
inline ::google::protobuf::uint32 TGuildWarGetTowerTeamInfoReq::towerid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTowerTeamInfoReq.TowerId)
  return towerid_;
}
inline void TGuildWarGetTowerTeamInfoReq::set_towerid(::google::protobuf::uint32 value) {
  set_has_towerid();
  towerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarGetTowerTeamInfoReq.TowerId)
}

// optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
inline bool TGuildWarGetTowerTeamInfoReq::has_teamidinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarGetTowerTeamInfoReq::set_has_teamidinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarGetTowerTeamInfoReq::clear_has_teamidinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarGetTowerTeamInfoReq::clear_teamidinfo() {
  if (teamidinfo_ != NULL) teamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
  clear_has_teamidinfo();
}
inline const ::pb::TGuildWarTeamIdInfo& TGuildWarGetTowerTeamInfoReq::teamidinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTowerTeamInfoReq.TeamIdInfo)
  return teamidinfo_ != NULL ? *teamidinfo_ : *default_instance_->teamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarGetTowerTeamInfoReq::mutable_teamidinfo() {
  set_has_teamidinfo();
  if (teamidinfo_ == NULL) teamidinfo_ = new ::pb::TGuildWarTeamIdInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetTowerTeamInfoReq.TeamIdInfo)
  return teamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarGetTowerTeamInfoReq::release_teamidinfo() {
  clear_has_teamidinfo();
  ::pb::TGuildWarTeamIdInfo* temp = teamidinfo_;
  teamidinfo_ = NULL;
  return temp;
}
inline void TGuildWarGetTowerTeamInfoReq::set_allocated_teamidinfo(::pb::TGuildWarTeamIdInfo* teamidinfo) {
  delete teamidinfo_;
  teamidinfo_ = teamidinfo;
  if (teamidinfo) {
    set_has_teamidinfo();
  } else {
    clear_has_teamidinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarGetTowerTeamInfoReq.TeamIdInfo)
}

// -------------------------------------------------------------------

// TGuildWarGetTowerTeamInfoRsp

// optional .pb.TGuildWarTeamDetailInfo TeamInfo = 1;
inline bool TGuildWarGetTowerTeamInfoRsp::has_teaminfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarGetTowerTeamInfoRsp::set_has_teaminfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarGetTowerTeamInfoRsp::clear_has_teaminfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarGetTowerTeamInfoRsp::clear_teaminfo() {
  if (teaminfo_ != NULL) teaminfo_->::pb::TGuildWarTeamDetailInfo::Clear();
  clear_has_teaminfo();
}
inline const ::pb::TGuildWarTeamDetailInfo& TGuildWarGetTowerTeamInfoRsp::teaminfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTowerTeamInfoRsp.TeamInfo)
  return teaminfo_ != NULL ? *teaminfo_ : *default_instance_->teaminfo_;
}
inline ::pb::TGuildWarTeamDetailInfo* TGuildWarGetTowerTeamInfoRsp::mutable_teaminfo() {
  set_has_teaminfo();
  if (teaminfo_ == NULL) teaminfo_ = new ::pb::TGuildWarTeamDetailInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetTowerTeamInfoRsp.TeamInfo)
  return teaminfo_;
}
inline ::pb::TGuildWarTeamDetailInfo* TGuildWarGetTowerTeamInfoRsp::release_teaminfo() {
  clear_has_teaminfo();
  ::pb::TGuildWarTeamDetailInfo* temp = teaminfo_;
  teaminfo_ = NULL;
  return temp;
}
inline void TGuildWarGetTowerTeamInfoRsp::set_allocated_teaminfo(::pb::TGuildWarTeamDetailInfo* teaminfo) {
  delete teaminfo_;
  teaminfo_ = teaminfo;
  if (teaminfo) {
    set_has_teaminfo();
  } else {
    clear_has_teaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarGetTowerTeamInfoRsp.TeamInfo)
}

// -------------------------------------------------------------------

// TGuildWarGarrisonTowerReq

// optional uint32 TowerId = 1;
inline bool TGuildWarGarrisonTowerReq::has_towerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarGarrisonTowerReq::set_has_towerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarGarrisonTowerReq::clear_has_towerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarGarrisonTowerReq::clear_towerid() {
  towerid_ = 0u;
  clear_has_towerid();
}
inline ::google::protobuf::uint32 TGuildWarGarrisonTowerReq::towerid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGarrisonTowerReq.TowerId)
  return towerid_;
}
inline void TGuildWarGarrisonTowerReq::set_towerid(::google::protobuf::uint32 value) {
  set_has_towerid();
  towerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarGarrisonTowerReq.TowerId)
}

// optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
inline bool TGuildWarGarrisonTowerReq::has_teamidinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarGarrisonTowerReq::set_has_teamidinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarGarrisonTowerReq::clear_has_teamidinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarGarrisonTowerReq::clear_teamidinfo() {
  if (teamidinfo_ != NULL) teamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
  clear_has_teamidinfo();
}
inline const ::pb::TGuildWarTeamIdInfo& TGuildWarGarrisonTowerReq::teamidinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGarrisonTowerReq.TeamIdInfo)
  return teamidinfo_ != NULL ? *teamidinfo_ : *default_instance_->teamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarGarrisonTowerReq::mutable_teamidinfo() {
  set_has_teamidinfo();
  if (teamidinfo_ == NULL) teamidinfo_ = new ::pb::TGuildWarTeamIdInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGarrisonTowerReq.TeamIdInfo)
  return teamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarGarrisonTowerReq::release_teamidinfo() {
  clear_has_teamidinfo();
  ::pb::TGuildWarTeamIdInfo* temp = teamidinfo_;
  teamidinfo_ = NULL;
  return temp;
}
inline void TGuildWarGarrisonTowerReq::set_allocated_teamidinfo(::pb::TGuildWarTeamIdInfo* teamidinfo) {
  delete teamidinfo_;
  teamidinfo_ = teamidinfo;
  if (teamidinfo) {
    set_has_teamidinfo();
  } else {
    clear_has_teamidinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarGarrisonTowerReq.TeamIdInfo)
}

// optional .pb.TGuildWarTeamIdInfo ReplaceTeamIdInfo = 3;
inline bool TGuildWarGarrisonTowerReq::has_replaceteamidinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildWarGarrisonTowerReq::set_has_replaceteamidinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildWarGarrisonTowerReq::clear_has_replaceteamidinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildWarGarrisonTowerReq::clear_replaceteamidinfo() {
  if (replaceteamidinfo_ != NULL) replaceteamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
  clear_has_replaceteamidinfo();
}
inline const ::pb::TGuildWarTeamIdInfo& TGuildWarGarrisonTowerReq::replaceteamidinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGarrisonTowerReq.ReplaceTeamIdInfo)
  return replaceteamidinfo_ != NULL ? *replaceteamidinfo_ : *default_instance_->replaceteamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarGarrisonTowerReq::mutable_replaceteamidinfo() {
  set_has_replaceteamidinfo();
  if (replaceteamidinfo_ == NULL) replaceteamidinfo_ = new ::pb::TGuildWarTeamIdInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGarrisonTowerReq.ReplaceTeamIdInfo)
  return replaceteamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarGarrisonTowerReq::release_replaceteamidinfo() {
  clear_has_replaceteamidinfo();
  ::pb::TGuildWarTeamIdInfo* temp = replaceteamidinfo_;
  replaceteamidinfo_ = NULL;
  return temp;
}
inline void TGuildWarGarrisonTowerReq::set_allocated_replaceteamidinfo(::pb::TGuildWarTeamIdInfo* replaceteamidinfo) {
  delete replaceteamidinfo_;
  replaceteamidinfo_ = replaceteamidinfo;
  if (replaceteamidinfo) {
    set_has_replaceteamidinfo();
  } else {
    clear_has_replaceteamidinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarGarrisonTowerReq.ReplaceTeamIdInfo)
}

// -------------------------------------------------------------------

// TGuildWarCancelGarrisonTowerReq

// optional uint32 TowerId = 1;
inline bool TGuildWarCancelGarrisonTowerReq::has_towerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarCancelGarrisonTowerReq::set_has_towerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarCancelGarrisonTowerReq::clear_has_towerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarCancelGarrisonTowerReq::clear_towerid() {
  towerid_ = 0u;
  clear_has_towerid();
}
inline ::google::protobuf::uint32 TGuildWarCancelGarrisonTowerReq::towerid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarCancelGarrisonTowerReq.TowerId)
  return towerid_;
}
inline void TGuildWarCancelGarrisonTowerReq::set_towerid(::google::protobuf::uint32 value) {
  set_has_towerid();
  towerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarCancelGarrisonTowerReq.TowerId)
}

// optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
inline bool TGuildWarCancelGarrisonTowerReq::has_teamidinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarCancelGarrisonTowerReq::set_has_teamidinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarCancelGarrisonTowerReq::clear_has_teamidinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarCancelGarrisonTowerReq::clear_teamidinfo() {
  if (teamidinfo_ != NULL) teamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
  clear_has_teamidinfo();
}
inline const ::pb::TGuildWarTeamIdInfo& TGuildWarCancelGarrisonTowerReq::teamidinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarCancelGarrisonTowerReq.TeamIdInfo)
  return teamidinfo_ != NULL ? *teamidinfo_ : *default_instance_->teamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarCancelGarrisonTowerReq::mutable_teamidinfo() {
  set_has_teamidinfo();
  if (teamidinfo_ == NULL) teamidinfo_ = new ::pb::TGuildWarTeamIdInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarCancelGarrisonTowerReq.TeamIdInfo)
  return teamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarCancelGarrisonTowerReq::release_teamidinfo() {
  clear_has_teamidinfo();
  ::pb::TGuildWarTeamIdInfo* temp = teamidinfo_;
  teamidinfo_ = NULL;
  return temp;
}
inline void TGuildWarCancelGarrisonTowerReq::set_allocated_teamidinfo(::pb::TGuildWarTeamIdInfo* teamidinfo) {
  delete teamidinfo_;
  teamidinfo_ = teamidinfo;
  if (teamidinfo) {
    set_has_teamidinfo();
  } else {
    clear_has_teamidinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarCancelGarrisonTowerReq.TeamIdInfo)
}

// -------------------------------------------------------------------

// TGuildWarGetAllTeamInfoRsp

// repeated .pb.TGuildWarTeamBaseInfo ArrTeamBaseInfo = 1;
inline int TGuildWarGetAllTeamInfoRsp::arrteambaseinfo_size() const {
  return arrteambaseinfo_.size();
}
inline void TGuildWarGetAllTeamInfoRsp::clear_arrteambaseinfo() {
  arrteambaseinfo_.Clear();
}
inline const ::pb::TGuildWarTeamBaseInfo& TGuildWarGetAllTeamInfoRsp::arrteambaseinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetAllTeamInfoRsp.ArrTeamBaseInfo)
  return arrteambaseinfo_.Get(index);
}
inline ::pb::TGuildWarTeamBaseInfo* TGuildWarGetAllTeamInfoRsp::mutable_arrteambaseinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetAllTeamInfoRsp.ArrTeamBaseInfo)
  return arrteambaseinfo_.Mutable(index);
}
inline ::pb::TGuildWarTeamBaseInfo* TGuildWarGetAllTeamInfoRsp::add_arrteambaseinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetAllTeamInfoRsp.ArrTeamBaseInfo)
  return arrteambaseinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamBaseInfo >&
TGuildWarGetAllTeamInfoRsp::arrteambaseinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetAllTeamInfoRsp.ArrTeamBaseInfo)
  return arrteambaseinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTeamBaseInfo >*
TGuildWarGetAllTeamInfoRsp::mutable_arrteambaseinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetAllTeamInfoRsp.ArrTeamBaseInfo)
  return &arrteambaseinfo_;
}

// repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
inline int TGuildWarGetAllTeamInfoRsp::arrusersimpleinfo_size() const {
  return arrusersimpleinfo_.size();
}
inline void TGuildWarGetAllTeamInfoRsp::clear_arrusersimpleinfo() {
  arrusersimpleinfo_.Clear();
}
inline const ::pb::TUserSimpleInfo& TGuildWarGetAllTeamInfoRsp::arrusersimpleinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetAllTeamInfoRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Get(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarGetAllTeamInfoRsp::mutable_arrusersimpleinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetAllTeamInfoRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarGetAllTeamInfoRsp::add_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetAllTeamInfoRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TGuildWarGetAllTeamInfoRsp::arrusersimpleinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetAllTeamInfoRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TGuildWarGetAllTeamInfoRsp::mutable_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetAllTeamInfoRsp.ArrUserSimpleInfo)
  return &arrusersimpleinfo_;
}

// -------------------------------------------------------------------

// TGuildWarGetTeamInfoReq

// optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 1;
inline bool TGuildWarGetTeamInfoReq::has_teamidinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarGetTeamInfoReq::set_has_teamidinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarGetTeamInfoReq::clear_has_teamidinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarGetTeamInfoReq::clear_teamidinfo() {
  if (teamidinfo_ != NULL) teamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
  clear_has_teamidinfo();
}
inline const ::pb::TGuildWarTeamIdInfo& TGuildWarGetTeamInfoReq::teamidinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTeamInfoReq.TeamIdInfo)
  return teamidinfo_ != NULL ? *teamidinfo_ : *default_instance_->teamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarGetTeamInfoReq::mutable_teamidinfo() {
  set_has_teamidinfo();
  if (teamidinfo_ == NULL) teamidinfo_ = new ::pb::TGuildWarTeamIdInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetTeamInfoReq.TeamIdInfo)
  return teamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarGetTeamInfoReq::release_teamidinfo() {
  clear_has_teamidinfo();
  ::pb::TGuildWarTeamIdInfo* temp = teamidinfo_;
  teamidinfo_ = NULL;
  return temp;
}
inline void TGuildWarGetTeamInfoReq::set_allocated_teamidinfo(::pb::TGuildWarTeamIdInfo* teamidinfo) {
  delete teamidinfo_;
  teamidinfo_ = teamidinfo;
  if (teamidinfo) {
    set_has_teamidinfo();
  } else {
    clear_has_teamidinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarGetTeamInfoReq.TeamIdInfo)
}

// -------------------------------------------------------------------

// TGuildWarGetTeamInfoRsp

// optional .pb.TGuildWarTeamDetailInfo TeamInfo = 1;
inline bool TGuildWarGetTeamInfoRsp::has_teaminfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarGetTeamInfoRsp::set_has_teaminfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarGetTeamInfoRsp::clear_has_teaminfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarGetTeamInfoRsp::clear_teaminfo() {
  if (teaminfo_ != NULL) teaminfo_->::pb::TGuildWarTeamDetailInfo::Clear();
  clear_has_teaminfo();
}
inline const ::pb::TGuildWarTeamDetailInfo& TGuildWarGetTeamInfoRsp::teaminfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTeamInfoRsp.TeamInfo)
  return teaminfo_ != NULL ? *teaminfo_ : *default_instance_->teaminfo_;
}
inline ::pb::TGuildWarTeamDetailInfo* TGuildWarGetTeamInfoRsp::mutable_teaminfo() {
  set_has_teaminfo();
  if (teaminfo_ == NULL) teaminfo_ = new ::pb::TGuildWarTeamDetailInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetTeamInfoRsp.TeamInfo)
  return teaminfo_;
}
inline ::pb::TGuildWarTeamDetailInfo* TGuildWarGetTeamInfoRsp::release_teaminfo() {
  clear_has_teaminfo();
  ::pb::TGuildWarTeamDetailInfo* temp = teaminfo_;
  teaminfo_ = NULL;
  return temp;
}
inline void TGuildWarGetTeamInfoRsp::set_allocated_teaminfo(::pb::TGuildWarTeamDetailInfo* teaminfo) {
  delete teaminfo_;
  teaminfo_ = teaminfo;
  if (teaminfo) {
    set_has_teaminfo();
  } else {
    clear_has_teaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarGetTeamInfoRsp.TeamInfo)
}

// -------------------------------------------------------------------

// TGuildWarDeployTeamToTowerReq

// optional uint32 TowerId = 1;
inline bool TGuildWarDeployTeamToTowerReq::has_towerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarDeployTeamToTowerReq::set_has_towerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarDeployTeamToTowerReq::clear_has_towerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarDeployTeamToTowerReq::clear_towerid() {
  towerid_ = 0u;
  clear_has_towerid();
}
inline ::google::protobuf::uint32 TGuildWarDeployTeamToTowerReq::towerid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarDeployTeamToTowerReq.TowerId)
  return towerid_;
}
inline void TGuildWarDeployTeamToTowerReq::set_towerid(::google::protobuf::uint32 value) {
  set_has_towerid();
  towerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarDeployTeamToTowerReq.TowerId)
}

// optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
inline bool TGuildWarDeployTeamToTowerReq::has_teamidinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarDeployTeamToTowerReq::set_has_teamidinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarDeployTeamToTowerReq::clear_has_teamidinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarDeployTeamToTowerReq::clear_teamidinfo() {
  if (teamidinfo_ != NULL) teamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
  clear_has_teamidinfo();
}
inline const ::pb::TGuildWarTeamIdInfo& TGuildWarDeployTeamToTowerReq::teamidinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarDeployTeamToTowerReq.TeamIdInfo)
  return teamidinfo_ != NULL ? *teamidinfo_ : *default_instance_->teamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarDeployTeamToTowerReq::mutable_teamidinfo() {
  set_has_teamidinfo();
  if (teamidinfo_ == NULL) teamidinfo_ = new ::pb::TGuildWarTeamIdInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarDeployTeamToTowerReq.TeamIdInfo)
  return teamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarDeployTeamToTowerReq::release_teamidinfo() {
  clear_has_teamidinfo();
  ::pb::TGuildWarTeamIdInfo* temp = teamidinfo_;
  teamidinfo_ = NULL;
  return temp;
}
inline void TGuildWarDeployTeamToTowerReq::set_allocated_teamidinfo(::pb::TGuildWarTeamIdInfo* teamidinfo) {
  delete teamidinfo_;
  teamidinfo_ = teamidinfo;
  if (teamidinfo) {
    set_has_teamidinfo();
  } else {
    clear_has_teamidinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarDeployTeamToTowerReq.TeamIdInfo)
}

// optional .pb.TGuildWarTeamIdInfo ReplaceTeamIdInfo = 3;
inline bool TGuildWarDeployTeamToTowerReq::has_replaceteamidinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildWarDeployTeamToTowerReq::set_has_replaceteamidinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildWarDeployTeamToTowerReq::clear_has_replaceteamidinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildWarDeployTeamToTowerReq::clear_replaceteamidinfo() {
  if (replaceteamidinfo_ != NULL) replaceteamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
  clear_has_replaceteamidinfo();
}
inline const ::pb::TGuildWarTeamIdInfo& TGuildWarDeployTeamToTowerReq::replaceteamidinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarDeployTeamToTowerReq.ReplaceTeamIdInfo)
  return replaceteamidinfo_ != NULL ? *replaceteamidinfo_ : *default_instance_->replaceteamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarDeployTeamToTowerReq::mutable_replaceteamidinfo() {
  set_has_replaceteamidinfo();
  if (replaceteamidinfo_ == NULL) replaceteamidinfo_ = new ::pb::TGuildWarTeamIdInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarDeployTeamToTowerReq.ReplaceTeamIdInfo)
  return replaceteamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarDeployTeamToTowerReq::release_replaceteamidinfo() {
  clear_has_replaceteamidinfo();
  ::pb::TGuildWarTeamIdInfo* temp = replaceteamidinfo_;
  replaceteamidinfo_ = NULL;
  return temp;
}
inline void TGuildWarDeployTeamToTowerReq::set_allocated_replaceteamidinfo(::pb::TGuildWarTeamIdInfo* replaceteamidinfo) {
  delete replaceteamidinfo_;
  replaceteamidinfo_ = replaceteamidinfo;
  if (replaceteamidinfo) {
    set_has_replaceteamidinfo();
  } else {
    clear_has_replaceteamidinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarDeployTeamToTowerReq.ReplaceTeamIdInfo)
}

// -------------------------------------------------------------------

// TGuildWarGetAllCallForBattleHeroInfoRsp

// repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo = 1;
inline int TGuildWarGetAllCallForBattleHeroInfoRsp::arrheroinfo_size() const {
  return arrheroinfo_.size();
}
inline void TGuildWarGetAllCallForBattleHeroInfoRsp::clear_arrheroinfo() {
  arrheroinfo_.Clear();
}
inline const ::pb::TGuildWarHeroDetailInfo& TGuildWarGetAllCallForBattleHeroInfoRsp::arrheroinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetAllCallForBattleHeroInfoRsp.ArrHeroInfo)
  return arrheroinfo_.Get(index);
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarGetAllCallForBattleHeroInfoRsp::mutable_arrheroinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetAllCallForBattleHeroInfoRsp.ArrHeroInfo)
  return arrheroinfo_.Mutable(index);
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarGetAllCallForBattleHeroInfoRsp::add_arrheroinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetAllCallForBattleHeroInfoRsp.ArrHeroInfo)
  return arrheroinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >&
TGuildWarGetAllCallForBattleHeroInfoRsp::arrheroinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetAllCallForBattleHeroInfoRsp.ArrHeroInfo)
  return arrheroinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >*
TGuildWarGetAllCallForBattleHeroInfoRsp::mutable_arrheroinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetAllCallForBattleHeroInfoRsp.ArrHeroInfo)
  return &arrheroinfo_;
}

// repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
inline int TGuildWarGetAllCallForBattleHeroInfoRsp::arrusersimpleinfo_size() const {
  return arrusersimpleinfo_.size();
}
inline void TGuildWarGetAllCallForBattleHeroInfoRsp::clear_arrusersimpleinfo() {
  arrusersimpleinfo_.Clear();
}
inline const ::pb::TUserSimpleInfo& TGuildWarGetAllCallForBattleHeroInfoRsp::arrusersimpleinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetAllCallForBattleHeroInfoRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Get(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarGetAllCallForBattleHeroInfoRsp::mutable_arrusersimpleinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetAllCallForBattleHeroInfoRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarGetAllCallForBattleHeroInfoRsp::add_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetAllCallForBattleHeroInfoRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TGuildWarGetAllCallForBattleHeroInfoRsp::arrusersimpleinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetAllCallForBattleHeroInfoRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TGuildWarGetAllCallForBattleHeroInfoRsp::mutable_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetAllCallForBattleHeroInfoRsp.ArrUserSimpleInfo)
  return &arrusersimpleinfo_;
}

// repeated uint64 ArrUid = 3;
inline int TGuildWarGetAllCallForBattleHeroInfoRsp::arruid_size() const {
  return arruid_.size();
}
inline void TGuildWarGetAllCallForBattleHeroInfoRsp::clear_arruid() {
  arruid_.Clear();
}
inline ::google::protobuf::uint64 TGuildWarGetAllCallForBattleHeroInfoRsp::arruid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetAllCallForBattleHeroInfoRsp.ArrUid)
  return arruid_.Get(index);
}
inline void TGuildWarGetAllCallForBattleHeroInfoRsp::set_arruid(int index, ::google::protobuf::uint64 value) {
  arruid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGuildWarGetAllCallForBattleHeroInfoRsp.ArrUid)
}
inline void TGuildWarGetAllCallForBattleHeroInfoRsp::add_arruid(::google::protobuf::uint64 value) {
  arruid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetAllCallForBattleHeroInfoRsp.ArrUid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TGuildWarGetAllCallForBattleHeroInfoRsp::arruid() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetAllCallForBattleHeroInfoRsp.ArrUid)
  return arruid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TGuildWarGetAllCallForBattleHeroInfoRsp::mutable_arruid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetAllCallForBattleHeroInfoRsp.ArrUid)
  return &arruid_;
}

// -------------------------------------------------------------------

// TGuildWarSetCallForBattleHeroListReq

// repeated uint64 ArrUid = 1;
inline int TGuildWarSetCallForBattleHeroListReq::arruid_size() const {
  return arruid_.size();
}
inline void TGuildWarSetCallForBattleHeroListReq::clear_arruid() {
  arruid_.Clear();
}
inline ::google::protobuf::uint64 TGuildWarSetCallForBattleHeroListReq::arruid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarSetCallForBattleHeroListReq.ArrUid)
  return arruid_.Get(index);
}
inline void TGuildWarSetCallForBattleHeroListReq::set_arruid(int index, ::google::protobuf::uint64 value) {
  arruid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGuildWarSetCallForBattleHeroListReq.ArrUid)
}
inline void TGuildWarSetCallForBattleHeroListReq::add_arruid(::google::protobuf::uint64 value) {
  arruid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGuildWarSetCallForBattleHeroListReq.ArrUid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TGuildWarSetCallForBattleHeroListReq::arruid() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarSetCallForBattleHeroListReq.ArrUid)
  return arruid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TGuildWarSetCallForBattleHeroListReq::mutable_arruid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarSetCallForBattleHeroListReq.ArrUid)
  return &arruid_;
}

// -------------------------------------------------------------------

// TGuildWarGetCallForBattleRecordRsp

// repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
inline int TGuildWarGetCallForBattleRecordRsp::arrrecordinfo_size() const {
  return arrrecordinfo_.size();
}
inline void TGuildWarGetCallForBattleRecordRsp::clear_arrrecordinfo() {
  arrrecordinfo_.Clear();
}
inline const ::pb::TGuildWarBattleRecordInfo& TGuildWarGetCallForBattleRecordRsp::arrrecordinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetCallForBattleRecordRsp.ArrRecordInfo)
  return arrrecordinfo_.Get(index);
}
inline ::pb::TGuildWarBattleRecordInfo* TGuildWarGetCallForBattleRecordRsp::mutable_arrrecordinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetCallForBattleRecordRsp.ArrRecordInfo)
  return arrrecordinfo_.Mutable(index);
}
inline ::pb::TGuildWarBattleRecordInfo* TGuildWarGetCallForBattleRecordRsp::add_arrrecordinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetCallForBattleRecordRsp.ArrRecordInfo)
  return arrrecordinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo >&
TGuildWarGetCallForBattleRecordRsp::arrrecordinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetCallForBattleRecordRsp.ArrRecordInfo)
  return arrrecordinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo >*
TGuildWarGetCallForBattleRecordRsp::mutable_arrrecordinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetCallForBattleRecordRsp.ArrRecordInfo)
  return &arrrecordinfo_;
}

// repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo1 = 2;
inline int TGuildWarGetCallForBattleRecordRsp::arrheroinfo1_size() const {
  return arrheroinfo1_.size();
}
inline void TGuildWarGetCallForBattleRecordRsp::clear_arrheroinfo1() {
  arrheroinfo1_.Clear();
}
inline const ::pb::TGuildWarHeroDetailInfo& TGuildWarGetCallForBattleRecordRsp::arrheroinfo1(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetCallForBattleRecordRsp.ArrHeroInfo1)
  return arrheroinfo1_.Get(index);
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarGetCallForBattleRecordRsp::mutable_arrheroinfo1(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetCallForBattleRecordRsp.ArrHeroInfo1)
  return arrheroinfo1_.Mutable(index);
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarGetCallForBattleRecordRsp::add_arrheroinfo1() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetCallForBattleRecordRsp.ArrHeroInfo1)
  return arrheroinfo1_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >&
TGuildWarGetCallForBattleRecordRsp::arrheroinfo1() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetCallForBattleRecordRsp.ArrHeroInfo1)
  return arrheroinfo1_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >*
TGuildWarGetCallForBattleRecordRsp::mutable_arrheroinfo1() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetCallForBattleRecordRsp.ArrHeroInfo1)
  return &arrheroinfo1_;
}

// repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo2 = 3;
inline int TGuildWarGetCallForBattleRecordRsp::arrheroinfo2_size() const {
  return arrheroinfo2_.size();
}
inline void TGuildWarGetCallForBattleRecordRsp::clear_arrheroinfo2() {
  arrheroinfo2_.Clear();
}
inline const ::pb::TGuildWarHeroDetailInfo& TGuildWarGetCallForBattleRecordRsp::arrheroinfo2(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetCallForBattleRecordRsp.ArrHeroInfo2)
  return arrheroinfo2_.Get(index);
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarGetCallForBattleRecordRsp::mutable_arrheroinfo2(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetCallForBattleRecordRsp.ArrHeroInfo2)
  return arrheroinfo2_.Mutable(index);
}
inline ::pb::TGuildWarHeroDetailInfo* TGuildWarGetCallForBattleRecordRsp::add_arrheroinfo2() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetCallForBattleRecordRsp.ArrHeroInfo2)
  return arrheroinfo2_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >&
TGuildWarGetCallForBattleRecordRsp::arrheroinfo2() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetCallForBattleRecordRsp.ArrHeroInfo2)
  return arrheroinfo2_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarHeroDetailInfo >*
TGuildWarGetCallForBattleRecordRsp::mutable_arrheroinfo2() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetCallForBattleRecordRsp.ArrHeroInfo2)
  return &arrheroinfo2_;
}

// repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 4;
inline int TGuildWarGetCallForBattleRecordRsp::arrusersimpleinfo_size() const {
  return arrusersimpleinfo_.size();
}
inline void TGuildWarGetCallForBattleRecordRsp::clear_arrusersimpleinfo() {
  arrusersimpleinfo_.Clear();
}
inline const ::pb::TUserSimpleInfo& TGuildWarGetCallForBattleRecordRsp::arrusersimpleinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetCallForBattleRecordRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Get(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarGetCallForBattleRecordRsp::mutable_arrusersimpleinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetCallForBattleRecordRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarGetCallForBattleRecordRsp::add_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetCallForBattleRecordRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TGuildWarGetCallForBattleRecordRsp::arrusersimpleinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetCallForBattleRecordRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TGuildWarGetCallForBattleRecordRsp::mutable_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetCallForBattleRecordRsp.ArrUserSimpleInfo)
  return &arrusersimpleinfo_;
}

// -------------------------------------------------------------------

// TGuildWarAttackTowerTeamReq

// optional uint32 TowerId = 1;
inline bool TGuildWarAttackTowerTeamReq::has_towerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarAttackTowerTeamReq::set_has_towerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarAttackTowerTeamReq::clear_has_towerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarAttackTowerTeamReq::clear_towerid() {
  towerid_ = 0u;
  clear_has_towerid();
}
inline ::google::protobuf::uint32 TGuildWarAttackTowerTeamReq::towerid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarAttackTowerTeamReq.TowerId)
  return towerid_;
}
inline void TGuildWarAttackTowerTeamReq::set_towerid(::google::protobuf::uint32 value) {
  set_has_towerid();
  towerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarAttackTowerTeamReq.TowerId)
}

// optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
inline bool TGuildWarAttackTowerTeamReq::has_teamidinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarAttackTowerTeamReq::set_has_teamidinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarAttackTowerTeamReq::clear_has_teamidinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarAttackTowerTeamReq::clear_teamidinfo() {
  if (teamidinfo_ != NULL) teamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
  clear_has_teamidinfo();
}
inline const ::pb::TGuildWarTeamIdInfo& TGuildWarAttackTowerTeamReq::teamidinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarAttackTowerTeamReq.TeamIdInfo)
  return teamidinfo_ != NULL ? *teamidinfo_ : *default_instance_->teamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarAttackTowerTeamReq::mutable_teamidinfo() {
  set_has_teamidinfo();
  if (teamidinfo_ == NULL) teamidinfo_ = new ::pb::TGuildWarTeamIdInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarAttackTowerTeamReq.TeamIdInfo)
  return teamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarAttackTowerTeamReq::release_teamidinfo() {
  clear_has_teamidinfo();
  ::pb::TGuildWarTeamIdInfo* temp = teamidinfo_;
  teamidinfo_ = NULL;
  return temp;
}
inline void TGuildWarAttackTowerTeamReq::set_allocated_teamidinfo(::pb::TGuildWarTeamIdInfo* teamidinfo) {
  delete teamidinfo_;
  teamidinfo_ = teamidinfo;
  if (teamidinfo) {
    set_has_teamidinfo();
  } else {
    clear_has_teamidinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarAttackTowerTeamReq.TeamIdInfo)
}

// repeated .pb.TGuildWarFormation ArrFormation = 3;
inline int TGuildWarAttackTowerTeamReq::arrformation_size() const {
  return arrformation_.size();
}
inline void TGuildWarAttackTowerTeamReq::clear_arrformation() {
  arrformation_.Clear();
}
inline const ::pb::TGuildWarFormation& TGuildWarAttackTowerTeamReq::arrformation(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarAttackTowerTeamReq.ArrFormation)
  return arrformation_.Get(index);
}
inline ::pb::TGuildWarFormation* TGuildWarAttackTowerTeamReq::mutable_arrformation(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarAttackTowerTeamReq.ArrFormation)
  return arrformation_.Mutable(index);
}
inline ::pb::TGuildWarFormation* TGuildWarAttackTowerTeamReq::add_arrformation() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarAttackTowerTeamReq.ArrFormation)
  return arrformation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation >&
TGuildWarAttackTowerTeamReq::arrformation() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarAttackTowerTeamReq.ArrFormation)
  return arrformation_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarFormation >*
TGuildWarAttackTowerTeamReq::mutable_arrformation() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarAttackTowerTeamReq.ArrFormation)
  return &arrformation_;
}

// -------------------------------------------------------------------

// TGuildWarAttackTowerTeamRsp

// optional .pb.TBattleResult BattleRet = 1;
inline bool TGuildWarAttackTowerTeamRsp::has_battleret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarAttackTowerTeamRsp::set_has_battleret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarAttackTowerTeamRsp::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarAttackTowerTeamRsp::clear_battleret() {
  if (battleret_ != NULL) battleret_->::pb::TBattleResult::Clear();
  clear_has_battleret();
}
inline const ::pb::TBattleResult& TGuildWarAttackTowerTeamRsp::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarAttackTowerTeamRsp.BattleRet)
  return battleret_ != NULL ? *battleret_ : *default_instance_->battleret_;
}
inline ::pb::TBattleResult* TGuildWarAttackTowerTeamRsp::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == NULL) battleret_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarAttackTowerTeamRsp.BattleRet)
  return battleret_;
}
inline ::pb::TBattleResult* TGuildWarAttackTowerTeamRsp::release_battleret() {
  clear_has_battleret();
  ::pb::TBattleResult* temp = battleret_;
  battleret_ = NULL;
  return temp;
}
inline void TGuildWarAttackTowerTeamRsp::set_allocated_battleret(::pb::TBattleResult* battleret) {
  delete battleret_;
  battleret_ = battleret;
  if (battleret) {
    set_has_battleret();
  } else {
    clear_has_battleret();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarAttackTowerTeamRsp.BattleRet)
}

// optional uint32 Success = 2;
inline bool TGuildWarAttackTowerTeamRsp::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarAttackTowerTeamRsp::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarAttackTowerTeamRsp::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarAttackTowerTeamRsp::clear_success() {
  success_ = 0u;
  clear_has_success();
}
inline ::google::protobuf::uint32 TGuildWarAttackTowerTeamRsp::success() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarAttackTowerTeamRsp.Success)
  return success_;
}
inline void TGuildWarAttackTowerTeamRsp::set_success(::google::protobuf::uint32 value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarAttackTowerTeamRsp.Success)
}

// repeated uint32 ArrNotPickedBuff = 3;
inline int TGuildWarAttackTowerTeamRsp::arrnotpickedbuff_size() const {
  return arrnotpickedbuff_.size();
}
inline void TGuildWarAttackTowerTeamRsp::clear_arrnotpickedbuff() {
  arrnotpickedbuff_.Clear();
}
inline ::google::protobuf::uint32 TGuildWarAttackTowerTeamRsp::arrnotpickedbuff(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarAttackTowerTeamRsp.ArrNotPickedBuff)
  return arrnotpickedbuff_.Get(index);
}
inline void TGuildWarAttackTowerTeamRsp::set_arrnotpickedbuff(int index, ::google::protobuf::uint32 value) {
  arrnotpickedbuff_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGuildWarAttackTowerTeamRsp.ArrNotPickedBuff)
}
inline void TGuildWarAttackTowerTeamRsp::add_arrnotpickedbuff(::google::protobuf::uint32 value) {
  arrnotpickedbuff_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGuildWarAttackTowerTeamRsp.ArrNotPickedBuff)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGuildWarAttackTowerTeamRsp::arrnotpickedbuff() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarAttackTowerTeamRsp.ArrNotPickedBuff)
  return arrnotpickedbuff_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGuildWarAttackTowerTeamRsp::mutable_arrnotpickedbuff() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarAttackTowerTeamRsp.ArrNotPickedBuff)
  return &arrnotpickedbuff_;
}

// repeated .pb.TGuildWarUserHeroInheritInfo ArrHeroInfo = 4;
inline int TGuildWarAttackTowerTeamRsp::arrheroinfo_size() const {
  return arrheroinfo_.size();
}
inline void TGuildWarAttackTowerTeamRsp::clear_arrheroinfo() {
  arrheroinfo_.Clear();
}
inline const ::pb::TGuildWarUserHeroInheritInfo& TGuildWarAttackTowerTeamRsp::arrheroinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarAttackTowerTeamRsp.ArrHeroInfo)
  return arrheroinfo_.Get(index);
}
inline ::pb::TGuildWarUserHeroInheritInfo* TGuildWarAttackTowerTeamRsp::mutable_arrheroinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarAttackTowerTeamRsp.ArrHeroInfo)
  return arrheroinfo_.Mutable(index);
}
inline ::pb::TGuildWarUserHeroInheritInfo* TGuildWarAttackTowerTeamRsp::add_arrheroinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarAttackTowerTeamRsp.ArrHeroInfo)
  return arrheroinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserHeroInheritInfo >&
TGuildWarAttackTowerTeamRsp::arrheroinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarAttackTowerTeamRsp.ArrHeroInfo)
  return arrheroinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarUserHeroInheritInfo >*
TGuildWarAttackTowerTeamRsp::mutable_arrheroinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarAttackTowerTeamRsp.ArrHeroInfo)
  return &arrheroinfo_;
}

// -------------------------------------------------------------------

// TGuildWarChooseBuffReq

// optional uint32 BuffId = 1;
inline bool TGuildWarChooseBuffReq::has_buffid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarChooseBuffReq::set_has_buffid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarChooseBuffReq::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarChooseBuffReq::clear_buffid() {
  buffid_ = 0u;
  clear_has_buffid();
}
inline ::google::protobuf::uint32 TGuildWarChooseBuffReq::buffid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarChooseBuffReq.BuffId)
  return buffid_;
}
inline void TGuildWarChooseBuffReq::set_buffid(::google::protobuf::uint32 value) {
  set_has_buffid();
  buffid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarChooseBuffReq.BuffId)
}

// -------------------------------------------------------------------

// TGuildWarGetTowerBattleRecordReq

// optional uint32 TowerId = 1;
inline bool TGuildWarGetTowerBattleRecordReq::has_towerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarGetTowerBattleRecordReq::set_has_towerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarGetTowerBattleRecordReq::clear_has_towerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarGetTowerBattleRecordReq::clear_towerid() {
  towerid_ = 0u;
  clear_has_towerid();
}
inline ::google::protobuf::uint32 TGuildWarGetTowerBattleRecordReq::towerid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTowerBattleRecordReq.TowerId)
  return towerid_;
}
inline void TGuildWarGetTowerBattleRecordReq::set_towerid(::google::protobuf::uint32 value) {
  set_has_towerid();
  towerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarGetTowerBattleRecordReq.TowerId)
}

// -------------------------------------------------------------------

// TGuildWarGetTowerBattleRecordRsp

// repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
inline int TGuildWarGetTowerBattleRecordRsp::arrrecordinfo_size() const {
  return arrrecordinfo_.size();
}
inline void TGuildWarGetTowerBattleRecordRsp::clear_arrrecordinfo() {
  arrrecordinfo_.Clear();
}
inline const ::pb::TGuildWarBattleRecordInfo& TGuildWarGetTowerBattleRecordRsp::arrrecordinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTowerBattleRecordRsp.ArrRecordInfo)
  return arrrecordinfo_.Get(index);
}
inline ::pb::TGuildWarBattleRecordInfo* TGuildWarGetTowerBattleRecordRsp::mutable_arrrecordinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetTowerBattleRecordRsp.ArrRecordInfo)
  return arrrecordinfo_.Mutable(index);
}
inline ::pb::TGuildWarBattleRecordInfo* TGuildWarGetTowerBattleRecordRsp::add_arrrecordinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetTowerBattleRecordRsp.ArrRecordInfo)
  return arrrecordinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo >&
TGuildWarGetTowerBattleRecordRsp::arrrecordinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetTowerBattleRecordRsp.ArrRecordInfo)
  return arrrecordinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo >*
TGuildWarGetTowerBattleRecordRsp::mutable_arrrecordinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetTowerBattleRecordRsp.ArrRecordInfo)
  return &arrrecordinfo_;
}

// repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
inline int TGuildWarGetTowerBattleRecordRsp::arrusersimpleinfo_size() const {
  return arrusersimpleinfo_.size();
}
inline void TGuildWarGetTowerBattleRecordRsp::clear_arrusersimpleinfo() {
  arrusersimpleinfo_.Clear();
}
inline const ::pb::TUserSimpleInfo& TGuildWarGetTowerBattleRecordRsp::arrusersimpleinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTowerBattleRecordRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Get(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarGetTowerBattleRecordRsp::mutable_arrusersimpleinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetTowerBattleRecordRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarGetTowerBattleRecordRsp::add_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetTowerBattleRecordRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TGuildWarGetTowerBattleRecordRsp::arrusersimpleinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetTowerBattleRecordRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TGuildWarGetTowerBattleRecordRsp::mutable_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetTowerBattleRecordRsp.ArrUserSimpleInfo)
  return &arrusersimpleinfo_;
}

// -------------------------------------------------------------------

// TGuildWarGetTeamBattleRecordReq

// optional uint32 TowerId = 1;
inline bool TGuildWarGetTeamBattleRecordReq::has_towerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarGetTeamBattleRecordReq::set_has_towerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarGetTeamBattleRecordReq::clear_has_towerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarGetTeamBattleRecordReq::clear_towerid() {
  towerid_ = 0u;
  clear_has_towerid();
}
inline ::google::protobuf::uint32 TGuildWarGetTeamBattleRecordReq::towerid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTeamBattleRecordReq.TowerId)
  return towerid_;
}
inline void TGuildWarGetTeamBattleRecordReq::set_towerid(::google::protobuf::uint32 value) {
  set_has_towerid();
  towerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarGetTeamBattleRecordReq.TowerId)
}

// optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
inline bool TGuildWarGetTeamBattleRecordReq::has_teamidinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarGetTeamBattleRecordReq::set_has_teamidinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarGetTeamBattleRecordReq::clear_has_teamidinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarGetTeamBattleRecordReq::clear_teamidinfo() {
  if (teamidinfo_ != NULL) teamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
  clear_has_teamidinfo();
}
inline const ::pb::TGuildWarTeamIdInfo& TGuildWarGetTeamBattleRecordReq::teamidinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTeamBattleRecordReq.TeamIdInfo)
  return teamidinfo_ != NULL ? *teamidinfo_ : *default_instance_->teamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarGetTeamBattleRecordReq::mutable_teamidinfo() {
  set_has_teamidinfo();
  if (teamidinfo_ == NULL) teamidinfo_ = new ::pb::TGuildWarTeamIdInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetTeamBattleRecordReq.TeamIdInfo)
  return teamidinfo_;
}
inline ::pb::TGuildWarTeamIdInfo* TGuildWarGetTeamBattleRecordReq::release_teamidinfo() {
  clear_has_teamidinfo();
  ::pb::TGuildWarTeamIdInfo* temp = teamidinfo_;
  teamidinfo_ = NULL;
  return temp;
}
inline void TGuildWarGetTeamBattleRecordReq::set_allocated_teamidinfo(::pb::TGuildWarTeamIdInfo* teamidinfo) {
  delete teamidinfo_;
  teamidinfo_ = teamidinfo;
  if (teamidinfo) {
    set_has_teamidinfo();
  } else {
    clear_has_teamidinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarGetTeamBattleRecordReq.TeamIdInfo)
}

// -------------------------------------------------------------------

// TGuildWarGetTeamBattleRecordRsp

// repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
inline int TGuildWarGetTeamBattleRecordRsp::arrrecordinfo_size() const {
  return arrrecordinfo_.size();
}
inline void TGuildWarGetTeamBattleRecordRsp::clear_arrrecordinfo() {
  arrrecordinfo_.Clear();
}
inline const ::pb::TGuildWarBattleRecordInfo& TGuildWarGetTeamBattleRecordRsp::arrrecordinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTeamBattleRecordRsp.ArrRecordInfo)
  return arrrecordinfo_.Get(index);
}
inline ::pb::TGuildWarBattleRecordInfo* TGuildWarGetTeamBattleRecordRsp::mutable_arrrecordinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetTeamBattleRecordRsp.ArrRecordInfo)
  return arrrecordinfo_.Mutable(index);
}
inline ::pb::TGuildWarBattleRecordInfo* TGuildWarGetTeamBattleRecordRsp::add_arrrecordinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetTeamBattleRecordRsp.ArrRecordInfo)
  return arrrecordinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo >&
TGuildWarGetTeamBattleRecordRsp::arrrecordinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetTeamBattleRecordRsp.ArrRecordInfo)
  return arrrecordinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo >*
TGuildWarGetTeamBattleRecordRsp::mutable_arrrecordinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetTeamBattleRecordRsp.ArrRecordInfo)
  return &arrrecordinfo_;
}

// repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
inline int TGuildWarGetTeamBattleRecordRsp::arrusersimpleinfo_size() const {
  return arrusersimpleinfo_.size();
}
inline void TGuildWarGetTeamBattleRecordRsp::clear_arrusersimpleinfo() {
  arrusersimpleinfo_.Clear();
}
inline const ::pb::TUserSimpleInfo& TGuildWarGetTeamBattleRecordRsp::arrusersimpleinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTeamBattleRecordRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Get(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarGetTeamBattleRecordRsp::mutable_arrusersimpleinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetTeamBattleRecordRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarGetTeamBattleRecordRsp::add_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetTeamBattleRecordRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TGuildWarGetTeamBattleRecordRsp::arrusersimpleinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetTeamBattleRecordRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TGuildWarGetTeamBattleRecordRsp::mutable_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetTeamBattleRecordRsp.ArrUserSimpleInfo)
  return &arrusersimpleinfo_;
}

// -------------------------------------------------------------------

// TGuildWarGetSelfBattleRecordRsp

// repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
inline int TGuildWarGetSelfBattleRecordRsp::arrrecordinfo_size() const {
  return arrrecordinfo_.size();
}
inline void TGuildWarGetSelfBattleRecordRsp::clear_arrrecordinfo() {
  arrrecordinfo_.Clear();
}
inline const ::pb::TGuildWarBattleRecordInfo& TGuildWarGetSelfBattleRecordRsp::arrrecordinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetSelfBattleRecordRsp.ArrRecordInfo)
  return arrrecordinfo_.Get(index);
}
inline ::pb::TGuildWarBattleRecordInfo* TGuildWarGetSelfBattleRecordRsp::mutable_arrrecordinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetSelfBattleRecordRsp.ArrRecordInfo)
  return arrrecordinfo_.Mutable(index);
}
inline ::pb::TGuildWarBattleRecordInfo* TGuildWarGetSelfBattleRecordRsp::add_arrrecordinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetSelfBattleRecordRsp.ArrRecordInfo)
  return arrrecordinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo >&
TGuildWarGetSelfBattleRecordRsp::arrrecordinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetSelfBattleRecordRsp.ArrRecordInfo)
  return arrrecordinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarBattleRecordInfo >*
TGuildWarGetSelfBattleRecordRsp::mutable_arrrecordinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetSelfBattleRecordRsp.ArrRecordInfo)
  return &arrrecordinfo_;
}

// repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
inline int TGuildWarGetSelfBattleRecordRsp::arrusersimpleinfo_size() const {
  return arrusersimpleinfo_.size();
}
inline void TGuildWarGetSelfBattleRecordRsp::clear_arrusersimpleinfo() {
  arrusersimpleinfo_.Clear();
}
inline const ::pb::TUserSimpleInfo& TGuildWarGetSelfBattleRecordRsp::arrusersimpleinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetSelfBattleRecordRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Get(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarGetSelfBattleRecordRsp::mutable_arrusersimpleinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetSelfBattleRecordRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarGetSelfBattleRecordRsp::add_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetSelfBattleRecordRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TGuildWarGetSelfBattleRecordRsp::arrusersimpleinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetSelfBattleRecordRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TGuildWarGetSelfBattleRecordRsp::mutable_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetSelfBattleRecordRsp.ArrUserSimpleInfo)
  return &arrusersimpleinfo_;
}

// -------------------------------------------------------------------

// TGuildWarGetTowerRewardReq

// optional uint32 TowerId = 1;
inline bool TGuildWarGetTowerRewardReq::has_towerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarGetTowerRewardReq::set_has_towerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarGetTowerRewardReq::clear_has_towerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarGetTowerRewardReq::clear_towerid() {
  towerid_ = 0u;
  clear_has_towerid();
}
inline ::google::protobuf::uint32 TGuildWarGetTowerRewardReq::towerid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTowerRewardReq.TowerId)
  return towerid_;
}
inline void TGuildWarGetTowerRewardReq::set_towerid(::google::protobuf::uint32 value) {
  set_has_towerid();
  towerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarGetTowerRewardReq.TowerId)
}

// -------------------------------------------------------------------

// TGuildWarGetTowerRewardRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TGuildWarGetTowerRewardRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TGuildWarGetTowerRewardRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TGuildWarGetTowerRewardRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetTowerRewardRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TGuildWarGetTowerRewardRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetTowerRewardRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TGuildWarGetTowerRewardRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetTowerRewardRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TGuildWarGetTowerRewardRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetTowerRewardRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TGuildWarGetTowerRewardRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetTowerRewardRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TGuildWarGetBuffListRsp

// repeated uint32 ArrBuff = 1;
inline int TGuildWarGetBuffListRsp::arrbuff_size() const {
  return arrbuff_.size();
}
inline void TGuildWarGetBuffListRsp::clear_arrbuff() {
  arrbuff_.Clear();
}
inline ::google::protobuf::uint32 TGuildWarGetBuffListRsp::arrbuff(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetBuffListRsp.ArrBuff)
  return arrbuff_.Get(index);
}
inline void TGuildWarGetBuffListRsp::set_arrbuff(int index, ::google::protobuf::uint32 value) {
  arrbuff_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGuildWarGetBuffListRsp.ArrBuff)
}
inline void TGuildWarGetBuffListRsp::add_arrbuff(::google::protobuf::uint32 value) {
  arrbuff_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetBuffListRsp.ArrBuff)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGuildWarGetBuffListRsp::arrbuff() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetBuffListRsp.ArrBuff)
  return arrbuff_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGuildWarGetBuffListRsp::mutable_arrbuff() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetBuffListRsp.ArrBuff)
  return &arrbuff_;
}

// -------------------------------------------------------------------

// TGuildWarGetFieldRankRsp

// repeated .pb.TGuildWarRankInfo ArrRank = 1;
inline int TGuildWarGetFieldRankRsp::arrrank_size() const {
  return arrrank_.size();
}
inline void TGuildWarGetFieldRankRsp::clear_arrrank() {
  arrrank_.Clear();
}
inline const ::pb::TGuildWarRankInfo& TGuildWarGetFieldRankRsp::arrrank(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetFieldRankRsp.ArrRank)
  return arrrank_.Get(index);
}
inline ::pb::TGuildWarRankInfo* TGuildWarGetFieldRankRsp::mutable_arrrank(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetFieldRankRsp.ArrRank)
  return arrrank_.Mutable(index);
}
inline ::pb::TGuildWarRankInfo* TGuildWarGetFieldRankRsp::add_arrrank() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetFieldRankRsp.ArrRank)
  return arrrank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarRankInfo >&
TGuildWarGetFieldRankRsp::arrrank() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetFieldRankRsp.ArrRank)
  return arrrank_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarRankInfo >*
TGuildWarGetFieldRankRsp::mutable_arrrank() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetFieldRankRsp.ArrRank)
  return &arrrank_;
}

// repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
inline int TGuildWarGetFieldRankRsp::arrusersimpleinfo_size() const {
  return arrusersimpleinfo_.size();
}
inline void TGuildWarGetFieldRankRsp::clear_arrusersimpleinfo() {
  arrusersimpleinfo_.Clear();
}
inline const ::pb::TUserSimpleInfo& TGuildWarGetFieldRankRsp::arrusersimpleinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetFieldRankRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Get(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarGetFieldRankRsp::mutable_arrusersimpleinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetFieldRankRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TGuildWarGetFieldRankRsp::add_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetFieldRankRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TGuildWarGetFieldRankRsp::arrusersimpleinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetFieldRankRsp.ArrUserSimpleInfo)
  return arrusersimpleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TGuildWarGetFieldRankRsp::mutable_arrusersimpleinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetFieldRankRsp.ArrUserSimpleInfo)
  return &arrusersimpleinfo_;
}

// -------------------------------------------------------------------

// TGuildWarGetEndRewardRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TGuildWarGetEndRewardRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TGuildWarGetEndRewardRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TGuildWarGetEndRewardRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarGetEndRewardRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TGuildWarGetEndRewardRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarGetEndRewardRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TGuildWarGetEndRewardRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarGetEndRewardRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TGuildWarGetEndRewardRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarGetEndRewardRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TGuildWarGetEndRewardRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarGetEndRewardRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TGuildWarSendMsgReq

// optional .pb.EGuildWarMsgType MsgType = 1;
inline bool TGuildWarSendMsgReq::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarSendMsgReq::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarSendMsgReq::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarSendMsgReq::clear_msgtype() {
  msgtype_ = 1;
  clear_has_msgtype();
}
inline ::pb::EGuildWarMsgType TGuildWarSendMsgReq::msgtype() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarSendMsgReq.MsgType)
  return static_cast< ::pb::EGuildWarMsgType >(msgtype_);
}
inline void TGuildWarSendMsgReq::set_msgtype(::pb::EGuildWarMsgType value) {
  assert(::pb::EGuildWarMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarSendMsgReq.MsgType)
}

// optional string Msg = 2;
inline bool TGuildWarSendMsgReq::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarSendMsgReq::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarSendMsgReq::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarSendMsgReq::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& TGuildWarSendMsgReq::msg() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarSendMsgReq.Msg)
  return *msg_;
}
inline void TGuildWarSendMsgReq::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildWarSendMsgReq.Msg)
}
inline void TGuildWarSendMsgReq::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildWarSendMsgReq.Msg)
}
inline void TGuildWarSendMsgReq::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildWarSendMsgReq.Msg)
}
inline ::std::string* TGuildWarSendMsgReq::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarSendMsgReq.Msg)
  return msg_;
}
inline ::std::string* TGuildWarSendMsgReq::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildWarSendMsgReq::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarSendMsgReq.Msg)
}

// -------------------------------------------------------------------

// TGuildWarMoveReq

// optional uint32 TargetPos = 1;
inline bool TGuildWarMoveReq::has_targetpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarMoveReq::set_has_targetpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarMoveReq::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarMoveReq::clear_targetpos() {
  targetpos_ = 0u;
  clear_has_targetpos();
}
inline ::google::protobuf::uint32 TGuildWarMoveReq::targetpos() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarMoveReq.TargetPos)
  return targetpos_;
}
inline void TGuildWarMoveReq::set_targetpos(::google::protobuf::uint32 value) {
  set_has_targetpos();
  targetpos_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarMoveReq.TargetPos)
}

// -------------------------------------------------------------------

// TGuildWarUserMoveNotify

// optional .pb.TGuildWarOtherUserInfo OtherUserInfo = 1;
inline bool TGuildWarUserMoveNotify::has_otheruserinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarUserMoveNotify::set_has_otheruserinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarUserMoveNotify::clear_has_otheruserinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarUserMoveNotify::clear_otheruserinfo() {
  if (otheruserinfo_ != NULL) otheruserinfo_->::pb::TGuildWarOtherUserInfo::Clear();
  clear_has_otheruserinfo();
}
inline const ::pb::TGuildWarOtherUserInfo& TGuildWarUserMoveNotify::otheruserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarUserMoveNotify.OtherUserInfo)
  return otheruserinfo_ != NULL ? *otheruserinfo_ : *default_instance_->otheruserinfo_;
}
inline ::pb::TGuildWarOtherUserInfo* TGuildWarUserMoveNotify::mutable_otheruserinfo() {
  set_has_otheruserinfo();
  if (otheruserinfo_ == NULL) otheruserinfo_ = new ::pb::TGuildWarOtherUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarUserMoveNotify.OtherUserInfo)
  return otheruserinfo_;
}
inline ::pb::TGuildWarOtherUserInfo* TGuildWarUserMoveNotify::release_otheruserinfo() {
  clear_has_otheruserinfo();
  ::pb::TGuildWarOtherUserInfo* temp = otheruserinfo_;
  otheruserinfo_ = NULL;
  return temp;
}
inline void TGuildWarUserMoveNotify::set_allocated_otheruserinfo(::pb::TGuildWarOtherUserInfo* otheruserinfo) {
  delete otheruserinfo_;
  otheruserinfo_ = otheruserinfo;
  if (otheruserinfo) {
    set_has_otheruserinfo();
  } else {
    clear_has_otheruserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarUserMoveNotify.OtherUserInfo)
}

// -------------------------------------------------------------------

// TGuildWarStageNotify

// optional .pb.TGuildWarStageInfo StageInfo = 1;
inline bool TGuildWarStageNotify::has_stageinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarStageNotify::set_has_stageinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarStageNotify::clear_has_stageinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarStageNotify::clear_stageinfo() {
  if (stageinfo_ != NULL) stageinfo_->::pb::TGuildWarStageInfo::Clear();
  clear_has_stageinfo();
}
inline const ::pb::TGuildWarStageInfo& TGuildWarStageNotify::stageinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarStageNotify.StageInfo)
  return stageinfo_ != NULL ? *stageinfo_ : *default_instance_->stageinfo_;
}
inline ::pb::TGuildWarStageInfo* TGuildWarStageNotify::mutable_stageinfo() {
  set_has_stageinfo();
  if (stageinfo_ == NULL) stageinfo_ = new ::pb::TGuildWarStageInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarStageNotify.StageInfo)
  return stageinfo_;
}
inline ::pb::TGuildWarStageInfo* TGuildWarStageNotify::release_stageinfo() {
  clear_has_stageinfo();
  ::pb::TGuildWarStageInfo* temp = stageinfo_;
  stageinfo_ = NULL;
  return temp;
}
inline void TGuildWarStageNotify::set_allocated_stageinfo(::pb::TGuildWarStageInfo* stageinfo) {
  delete stageinfo_;
  stageinfo_ = stageinfo;
  if (stageinfo) {
    set_has_stageinfo();
  } else {
    clear_has_stageinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarStageNotify.StageInfo)
}

// -------------------------------------------------------------------

// TGuildWarTowerNotify

// repeated .pb.TGuildWarTowerSimpleInfo ArrTowerInfo = 1;
inline int TGuildWarTowerNotify::arrtowerinfo_size() const {
  return arrtowerinfo_.size();
}
inline void TGuildWarTowerNotify::clear_arrtowerinfo() {
  arrtowerinfo_.Clear();
}
inline const ::pb::TGuildWarTowerSimpleInfo& TGuildWarTowerNotify::arrtowerinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarTowerNotify.ArrTowerInfo)
  return arrtowerinfo_.Get(index);
}
inline ::pb::TGuildWarTowerSimpleInfo* TGuildWarTowerNotify::mutable_arrtowerinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarTowerNotify.ArrTowerInfo)
  return arrtowerinfo_.Mutable(index);
}
inline ::pb::TGuildWarTowerSimpleInfo* TGuildWarTowerNotify::add_arrtowerinfo() {
  // @@protoc_insertion_point(field_add:pb.TGuildWarTowerNotify.ArrTowerInfo)
  return arrtowerinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTowerSimpleInfo >&
TGuildWarTowerNotify::arrtowerinfo() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWarTowerNotify.ArrTowerInfo)
  return arrtowerinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWarTowerSimpleInfo >*
TGuildWarTowerNotify::mutable_arrtowerinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWarTowerNotify.ArrTowerInfo)
  return &arrtowerinfo_;
}

// -------------------------------------------------------------------

// TGuildWarMessageWithChatType

// optional .pb.TChatMessage ChatMessage = 1;
inline bool TGuildWarMessageWithChatType::has_chatmessage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarMessageWithChatType::set_has_chatmessage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarMessageWithChatType::clear_has_chatmessage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarMessageWithChatType::clear_chatmessage() {
  if (chatmessage_ != NULL) chatmessage_->::pb::TChatMessage::Clear();
  clear_has_chatmessage();
}
inline const ::pb::TChatMessage& TGuildWarMessageWithChatType::chatmessage() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarMessageWithChatType.ChatMessage)
  return chatmessage_ != NULL ? *chatmessage_ : *default_instance_->chatmessage_;
}
inline ::pb::TChatMessage* TGuildWarMessageWithChatType::mutable_chatmessage() {
  set_has_chatmessage();
  if (chatmessage_ == NULL) chatmessage_ = new ::pb::TChatMessage;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarMessageWithChatType.ChatMessage)
  return chatmessage_;
}
inline ::pb::TChatMessage* TGuildWarMessageWithChatType::release_chatmessage() {
  clear_has_chatmessage();
  ::pb::TChatMessage* temp = chatmessage_;
  chatmessage_ = NULL;
  return temp;
}
inline void TGuildWarMessageWithChatType::set_allocated_chatmessage(::pb::TChatMessage* chatmessage) {
  delete chatmessage_;
  chatmessage_ = chatmessage;
  if (chatmessage) {
    set_has_chatmessage();
  } else {
    clear_has_chatmessage();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarMessageWithChatType.ChatMessage)
}

// optional .pb.EGuildWarMsgType MsgType = 2;
inline bool TGuildWarMessageWithChatType::has_msgtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWarMessageWithChatType::set_has_msgtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWarMessageWithChatType::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWarMessageWithChatType::clear_msgtype() {
  msgtype_ = 1;
  clear_has_msgtype();
}
inline ::pb::EGuildWarMsgType TGuildWarMessageWithChatType::msgtype() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarMessageWithChatType.MsgType)
  return static_cast< ::pb::EGuildWarMsgType >(msgtype_);
}
inline void TGuildWarMessageWithChatType::set_msgtype(::pb::EGuildWarMsgType value) {
  assert(::pb::EGuildWarMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWarMessageWithChatType.MsgType)
}

// -------------------------------------------------------------------

// TGuildWarMessageNotify

// optional .pb.TGuildWarMessageWithChatType MessageInfo = 1;
inline bool TGuildWarMessageNotify::has_messageinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWarMessageNotify::set_has_messageinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWarMessageNotify::clear_has_messageinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWarMessageNotify::clear_messageinfo() {
  if (messageinfo_ != NULL) messageinfo_->::pb::TGuildWarMessageWithChatType::Clear();
  clear_has_messageinfo();
}
inline const ::pb::TGuildWarMessageWithChatType& TGuildWarMessageNotify::messageinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWarMessageNotify.MessageInfo)
  return messageinfo_ != NULL ? *messageinfo_ : *default_instance_->messageinfo_;
}
inline ::pb::TGuildWarMessageWithChatType* TGuildWarMessageNotify::mutable_messageinfo() {
  set_has_messageinfo();
  if (messageinfo_ == NULL) messageinfo_ = new ::pb::TGuildWarMessageWithChatType;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWarMessageNotify.MessageInfo)
  return messageinfo_;
}
inline ::pb::TGuildWarMessageWithChatType* TGuildWarMessageNotify::release_messageinfo() {
  clear_has_messageinfo();
  ::pb::TGuildWarMessageWithChatType* temp = messageinfo_;
  messageinfo_ = NULL;
  return temp;
}
inline void TGuildWarMessageNotify::set_allocated_messageinfo(::pb::TGuildWarMessageWithChatType* messageinfo) {
  delete messageinfo_;
  messageinfo_ = messageinfo;
  if (messageinfo) {
    set_has_messageinfo();
  } else {
    clear_has_messageinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWarMessageNotify.MessageInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EGuildWarStage> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EGuildWarStage>() {
  return ::pb::EGuildWarStage_descriptor();
}
template <> struct is_proto_enum< ::pb::EGuildWarResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EGuildWarResult>() {
  return ::pb::EGuildWarResult_descriptor();
}
template <> struct is_proto_enum< ::pb::EGuildWarMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EGuildWarMsgType>() {
  return ::pb::EGuildWarMsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fGuildWar_2eproto__INCLUDED
