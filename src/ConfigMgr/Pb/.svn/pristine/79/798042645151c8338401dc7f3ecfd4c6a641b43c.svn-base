// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SceneHeightData.proto

#ifndef PROTOBUF_module_2fSceneHeightData_2eproto__INCLUDED
#define PROTOBUF_module_2fSceneHeightData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/Util.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fSceneHeightData_2eproto();
void protobuf_AssignDesc_module_2fSceneHeightData_2eproto();
void protobuf_ShutdownFile_module_2fSceneHeightData_2eproto();

class CellData;
class SceneHeightData;

// ===================================================================

/*FOR2LUA
<Record>
	<name>CellData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SceneHeightData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class CellData : public ::google::protobuf::Message {
 public:
  CellData();
  virtual ~CellData();

  CellData(const CellData& from);

  inline CellData& operator=(const CellData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CellData& default_instance();

  void Swap(CellData* other);

  // implements Message ----------------------------------------------

  CellData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CellData& from);
  void MergeFrom(const CellData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 CellIndex = 1;
  inline bool has_cellindex() const;
  inline void clear_cellindex();
  static const int kCellIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>CellData</name>
  	<Function>
  		<name>cellindex</name>
  		<replaceName>CellIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cellindex</name>
  		<replaceName>CellIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cellindex</name>
  		<replaceName>CellIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 cellindex() const;
  inline void set_cellindex(::google::protobuf::int32 value);

  // optional int32 Height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>CellData</name>
  	<Function>
  		<name>height</name>
  		<replaceName>Height</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_height</name>
  		<replaceName>Height</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_height</name>
  		<replaceName>Height</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CellData)
 private:
  inline void set_has_cellindex();
  inline void clear_has_cellindex();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cellindex_;
  ::google::protobuf::int32 height_;
  friend void  protobuf_AddDesc_module_2fSceneHeightData_2eproto();
  friend void protobuf_AssignDesc_module_2fSceneHeightData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSceneHeightData_2eproto();

  void InitAsDefaultInstance();
  static CellData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SceneHeightData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SceneHeightData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SceneHeightData : public ::google::protobuf::Message {
 public:
  SceneHeightData();
  virtual ~SceneHeightData();

  SceneHeightData(const SceneHeightData& from);

  inline SceneHeightData& operator=(const SceneHeightData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneHeightData& default_instance();

  void Swap(SceneHeightData* other);

  // implements Message ----------------------------------------------

  SceneHeightData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneHeightData& from);
  void MergeFrom(const SceneHeightData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SceneHeightData</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string ArtSceneName = 2;
  inline bool has_artscenename() const;
  inline void clear_artscenename();
  static const int kArtSceneNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SceneHeightData</name>
  	<Function>
  		<name>artscenename</name>
  		<replaceName>ArtSceneName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_artscenename</name>
  		<replaceName>ArtSceneName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_artscenename</name>
  		<replaceName>ArtSceneName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& artscenename() const;
  inline void set_artscenename(const ::std::string& value);
  inline void set_artscenename(const char* value);
  inline void set_artscenename(const char* value, size_t size);
  inline ::std::string* mutable_artscenename();
  inline ::std::string* release_artscenename();
  inline void set_allocated_artscenename(::std::string* artscenename);

  // optional .pb.PbVector2_Int CoordinateOrigin = 3;
  inline bool has_coordinateorigin() const;
  inline void clear_coordinateorigin();
  static const int kCoordinateOriginFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SceneHeightData</name>
  	<Function>
  		<name>coordinateorigin</name>
  		<replaceName>CoordinateOrigin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_coordinateorigin</name>
  		<replaceName>CoordinateOrigin</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_coordinateorigin</name>
  		<replaceName>CoordinateOrigin</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_coordinateorigin</name>
  		<replaceName>CoordinateOrigin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& coordinateorigin() const;
  inline ::pb::PbVector2_Int* mutable_coordinateorigin();
  inline ::pb::PbVector2_Int* release_coordinateorigin();
  inline void set_allocated_coordinateorigin(::pb::PbVector2_Int* coordinateorigin);

  // optional .pb.PbVector2_Int CellSize = 4;
  inline bool has_cellsize() const;
  inline void clear_cellsize();
  static const int kCellSizeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SceneHeightData</name>
  	<Function>
  		<name>cellsize</name>
  		<replaceName>CellSize</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cellsize</name>
  		<replaceName>CellSize</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_cellsize</name>
  		<replaceName>CellSize</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cellsize</name>
  		<replaceName>CellSize</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& cellsize() const;
  inline ::pb::PbVector2_Int* mutable_cellsize();
  inline ::pb::PbVector2_Int* release_cellsize();
  inline void set_allocated_cellsize(::pb::PbVector2_Int* cellsize);

  // optional .pb.PbVector2_Int AreaSize = 5;
  inline bool has_areasize() const;
  inline void clear_areasize();
  static const int kAreaSizeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SceneHeightData</name>
  	<Function>
  		<name>areasize</name>
  		<replaceName>AreaSize</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_areasize</name>
  		<replaceName>AreaSize</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_areasize</name>
  		<replaceName>AreaSize</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_areasize</name>
  		<replaceName>AreaSize</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& areasize() const;
  inline ::pb::PbVector2_Int* mutable_areasize();
  inline ::pb::PbVector2_Int* release_areasize();
  inline void set_allocated_areasize(::pb::PbVector2_Int* areasize);

  // repeated .pb.CellData CellDataArr = 6;
  inline int celldataarr_size() const;
  inline void clear_celldataarr();
  static const int kCellDataArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SceneHeightData</name>
  	<Function>
  		<name>celldataarr</name>
  		<replaceName>CellDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_celldataarr</name>
  		<replaceName>CellDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_celldataarr</name>
  		<replaceName>CellDataArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_celldataarr</name>
  		<replaceName>CellDataArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>celldataarr_size</name>
  		<replaceName>CellDataArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::CellData& celldataarr(int index) const;
  inline ::pb::CellData* mutable_celldataarr(int index);
  inline ::pb::CellData* add_celldataarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::CellData >&
      celldataarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::CellData >*
      mutable_celldataarr();

  // @@protoc_insertion_point(class_scope:pb.SceneHeightData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_artscenename();
  inline void clear_has_artscenename();
  inline void set_has_coordinateorigin();
  inline void clear_has_coordinateorigin();
  inline void set_has_cellsize();
  inline void clear_has_cellsize();
  inline void set_has_areasize();
  inline void clear_has_areasize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* artscenename_;
  ::pb::PbVector2_Int* coordinateorigin_;
  ::pb::PbVector2_Int* cellsize_;
  ::pb::PbVector2_Int* areasize_;
  ::google::protobuf::RepeatedPtrField< ::pb::CellData > celldataarr_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_module_2fSceneHeightData_2eproto();
  friend void protobuf_AssignDesc_module_2fSceneHeightData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSceneHeightData_2eproto();

  void InitAsDefaultInstance();
  static SceneHeightData* default_instance_;
};
// ===================================================================


// ===================================================================

// CellData

// optional int32 CellIndex = 1;
inline bool CellData::has_cellindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CellData::set_has_cellindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CellData::clear_has_cellindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CellData::clear_cellindex() {
  cellindex_ = 0;
  clear_has_cellindex();
}
inline ::google::protobuf::int32 CellData::cellindex() const {
  // @@protoc_insertion_point(field_get:pb.CellData.CellIndex)
  return cellindex_;
}
inline void CellData::set_cellindex(::google::protobuf::int32 value) {
  set_has_cellindex();
  cellindex_ = value;
  // @@protoc_insertion_point(field_set:pb.CellData.CellIndex)
}

// optional int32 Height = 2;
inline bool CellData::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CellData::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CellData::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CellData::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 CellData::height() const {
  // @@protoc_insertion_point(field_get:pb.CellData.Height)
  return height_;
}
inline void CellData::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:pb.CellData.Height)
}

// -------------------------------------------------------------------

// SceneHeightData

// optional int32 Id = 1;
inline bool SceneHeightData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneHeightData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneHeightData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneHeightData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SceneHeightData::id() const {
  // @@protoc_insertion_point(field_get:pb.SceneHeightData.Id)
  return id_;
}
inline void SceneHeightData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.SceneHeightData.Id)
}

// optional string ArtSceneName = 2;
inline bool SceneHeightData::has_artscenename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneHeightData::set_has_artscenename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneHeightData::clear_has_artscenename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneHeightData::clear_artscenename() {
  if (artscenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    artscenename_->clear();
  }
  clear_has_artscenename();
}
inline const ::std::string& SceneHeightData::artscenename() const {
  // @@protoc_insertion_point(field_get:pb.SceneHeightData.ArtSceneName)
  return *artscenename_;
}
inline void SceneHeightData::set_artscenename(const ::std::string& value) {
  set_has_artscenename();
  if (artscenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    artscenename_ = new ::std::string;
  }
  artscenename_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SceneHeightData.ArtSceneName)
}
inline void SceneHeightData::set_artscenename(const char* value) {
  set_has_artscenename();
  if (artscenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    artscenename_ = new ::std::string;
  }
  artscenename_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SceneHeightData.ArtSceneName)
}
inline void SceneHeightData::set_artscenename(const char* value, size_t size) {
  set_has_artscenename();
  if (artscenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    artscenename_ = new ::std::string;
  }
  artscenename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SceneHeightData.ArtSceneName)
}
inline ::std::string* SceneHeightData::mutable_artscenename() {
  set_has_artscenename();
  if (artscenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    artscenename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SceneHeightData.ArtSceneName)
  return artscenename_;
}
inline ::std::string* SceneHeightData::release_artscenename() {
  clear_has_artscenename();
  if (artscenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = artscenename_;
    artscenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SceneHeightData::set_allocated_artscenename(::std::string* artscenename) {
  if (artscenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete artscenename_;
  }
  if (artscenename) {
    set_has_artscenename();
    artscenename_ = artscenename;
  } else {
    clear_has_artscenename();
    artscenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SceneHeightData.ArtSceneName)
}

// optional .pb.PbVector2_Int CoordinateOrigin = 3;
inline bool SceneHeightData::has_coordinateorigin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SceneHeightData::set_has_coordinateorigin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SceneHeightData::clear_has_coordinateorigin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SceneHeightData::clear_coordinateorigin() {
  if (coordinateorigin_ != NULL) coordinateorigin_->::pb::PbVector2_Int::Clear();
  clear_has_coordinateorigin();
}
inline const ::pb::PbVector2_Int& SceneHeightData::coordinateorigin() const {
  // @@protoc_insertion_point(field_get:pb.SceneHeightData.CoordinateOrigin)
  return coordinateorigin_ != NULL ? *coordinateorigin_ : *default_instance_->coordinateorigin_;
}
inline ::pb::PbVector2_Int* SceneHeightData::mutable_coordinateorigin() {
  set_has_coordinateorigin();
  if (coordinateorigin_ == NULL) coordinateorigin_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.SceneHeightData.CoordinateOrigin)
  return coordinateorigin_;
}
inline ::pb::PbVector2_Int* SceneHeightData::release_coordinateorigin() {
  clear_has_coordinateorigin();
  ::pb::PbVector2_Int* temp = coordinateorigin_;
  coordinateorigin_ = NULL;
  return temp;
}
inline void SceneHeightData::set_allocated_coordinateorigin(::pb::PbVector2_Int* coordinateorigin) {
  delete coordinateorigin_;
  coordinateorigin_ = coordinateorigin;
  if (coordinateorigin) {
    set_has_coordinateorigin();
  } else {
    clear_has_coordinateorigin();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SceneHeightData.CoordinateOrigin)
}

// optional .pb.PbVector2_Int CellSize = 4;
inline bool SceneHeightData::has_cellsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SceneHeightData::set_has_cellsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SceneHeightData::clear_has_cellsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SceneHeightData::clear_cellsize() {
  if (cellsize_ != NULL) cellsize_->::pb::PbVector2_Int::Clear();
  clear_has_cellsize();
}
inline const ::pb::PbVector2_Int& SceneHeightData::cellsize() const {
  // @@protoc_insertion_point(field_get:pb.SceneHeightData.CellSize)
  return cellsize_ != NULL ? *cellsize_ : *default_instance_->cellsize_;
}
inline ::pb::PbVector2_Int* SceneHeightData::mutable_cellsize() {
  set_has_cellsize();
  if (cellsize_ == NULL) cellsize_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.SceneHeightData.CellSize)
  return cellsize_;
}
inline ::pb::PbVector2_Int* SceneHeightData::release_cellsize() {
  clear_has_cellsize();
  ::pb::PbVector2_Int* temp = cellsize_;
  cellsize_ = NULL;
  return temp;
}
inline void SceneHeightData::set_allocated_cellsize(::pb::PbVector2_Int* cellsize) {
  delete cellsize_;
  cellsize_ = cellsize;
  if (cellsize) {
    set_has_cellsize();
  } else {
    clear_has_cellsize();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SceneHeightData.CellSize)
}

// optional .pb.PbVector2_Int AreaSize = 5;
inline bool SceneHeightData::has_areasize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SceneHeightData::set_has_areasize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SceneHeightData::clear_has_areasize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SceneHeightData::clear_areasize() {
  if (areasize_ != NULL) areasize_->::pb::PbVector2_Int::Clear();
  clear_has_areasize();
}
inline const ::pb::PbVector2_Int& SceneHeightData::areasize() const {
  // @@protoc_insertion_point(field_get:pb.SceneHeightData.AreaSize)
  return areasize_ != NULL ? *areasize_ : *default_instance_->areasize_;
}
inline ::pb::PbVector2_Int* SceneHeightData::mutable_areasize() {
  set_has_areasize();
  if (areasize_ == NULL) areasize_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.SceneHeightData.AreaSize)
  return areasize_;
}
inline ::pb::PbVector2_Int* SceneHeightData::release_areasize() {
  clear_has_areasize();
  ::pb::PbVector2_Int* temp = areasize_;
  areasize_ = NULL;
  return temp;
}
inline void SceneHeightData::set_allocated_areasize(::pb::PbVector2_Int* areasize) {
  delete areasize_;
  areasize_ = areasize;
  if (areasize) {
    set_has_areasize();
  } else {
    clear_has_areasize();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SceneHeightData.AreaSize)
}

// repeated .pb.CellData CellDataArr = 6;
inline int SceneHeightData::celldataarr_size() const {
  return celldataarr_.size();
}
inline void SceneHeightData::clear_celldataarr() {
  celldataarr_.Clear();
}
inline const ::pb::CellData& SceneHeightData::celldataarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.SceneHeightData.CellDataArr)
  return celldataarr_.Get(index);
}
inline ::pb::CellData* SceneHeightData::mutable_celldataarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SceneHeightData.CellDataArr)
  return celldataarr_.Mutable(index);
}
inline ::pb::CellData* SceneHeightData::add_celldataarr() {
  // @@protoc_insertion_point(field_add:pb.SceneHeightData.CellDataArr)
  return celldataarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::CellData >&
SceneHeightData::celldataarr() const {
  // @@protoc_insertion_point(field_list:pb.SceneHeightData.CellDataArr)
  return celldataarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::CellData >*
SceneHeightData::mutable_celldataarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.SceneHeightData.CellDataArr)
  return &celldataarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fSceneHeightData_2eproto__INCLUDED
