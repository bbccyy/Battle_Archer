// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActAlcoholFestival.proto

#ifndef PROTOBUF_net_2fActAlcoholFestival_2eproto__INCLUDED
#define PROTOBUF_net_2fActAlcoholFestival_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/OpenActivity.pb.h"
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto();
void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto();

class TActAlcoholFestival;
class TActAlcoholFestivalGetInfoRsp;
class TActAlcoholFestivalGetRewardReq;
class TActAlcoholFestivalGetRewardRsp;
class TActAlcoholFestivalGetRewardFirstReq;
class TActAlcoholFestivalGetRewardFirstRsp;
class TActAlcoholFestivalGetRewardSecondReq;
class TActAlcoholFestivalGetRewardSecondRsp;
class TActAlcoholFestivalUseItemReq;
class TActAlcoholFestivalGetArrRewardAllRsp;
class TActAlcoholFestivalGetServerTeamInfoRsp;
class TActAlcoholFestivalRankInfo;
class TActAlcoholFestivalGetRankListReq;
class TActAlcoholFestivalGetRankListRsp;
class TActAlcoholFestivalNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActAlcoholFestival</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActAlcoholFestival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActAlcoholFestival : public ::google::protobuf::Message {
 public:
  TActAlcoholFestival();
  virtual ~TActAlcoholFestival();

  TActAlcoholFestival(const TActAlcoholFestival& from);

  inline TActAlcoholFestival& operator=(const TActAlcoholFestival& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActAlcoholFestival& default_instance();

  void Swap(TActAlcoholFestival* other);

  // implements Message ----------------------------------------------

  TActAlcoholFestival* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActAlcoholFestival& from);
  void MergeFrom(const TActAlcoholFestival& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 BuyTimeFirst = 1;
  inline bool has_buytimefirst() const;
  inline void clear_buytimefirst();
  static const int kBuyTimeFirstFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestival</name>
  	<Function>
  		<name>buytimefirst</name>
  		<replaceName>BuyTimeFirst</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buytimefirst</name>
  		<replaceName>BuyTimeFirst</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buytimefirst</name>
  		<replaceName>BuyTimeFirst</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 buytimefirst() const;
  inline void set_buytimefirst(::google::protobuf::uint64 value);

  // optional uint64 BuyTimeSecond = 2;
  inline bool has_buytimesecond() const;
  inline void clear_buytimesecond();
  static const int kBuyTimeSecondFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestival</name>
  	<Function>
  		<name>buytimesecond</name>
  		<replaceName>BuyTimeSecond</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buytimesecond</name>
  		<replaceName>BuyTimeSecond</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buytimesecond</name>
  		<replaceName>BuyTimeSecond</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 buytimesecond() const;
  inline void set_buytimesecond(::google::protobuf::uint64 value);

  // optional uint64 TotalExp = 3;
  inline bool has_totalexp() const;
  inline void clear_totalexp();
  static const int kTotalExpFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestival</name>
  	<Function>
  		<name>totalexp</name>
  		<replaceName>TotalExp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalexp</name>
  		<replaceName>TotalExp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalexp</name>
  		<replaceName>TotalExp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totalexp() const;
  inline void set_totalexp(::google::protobuf::uint64 value);

  // optional uint32 Level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestival</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // repeated .pb.TActivityRewardInfo ArrRewardInfo = 5;
  inline int arrrewardinfo_size() const;
  inline void clear_arrrewardinfo();
  static const int kArrRewardInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestival</name>
  	<Function>
  		<name>arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrewardinfo_size</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityRewardInfo& arrrewardinfo(int index) const;
  inline ::pb::TActivityRewardInfo* mutable_arrrewardinfo(int index);
  inline ::pb::TActivityRewardInfo* add_arrrewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
      arrrewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
      mutable_arrrewardinfo();

  // repeated .pb.TActivityRewardInfo ArrCostRewardInfoFirst = 6;
  inline int arrcostrewardinfofirst_size() const;
  inline void clear_arrcostrewardinfofirst();
  static const int kArrCostRewardInfoFirstFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestival</name>
  	<Function>
  		<name>arrcostrewardinfofirst</name>
  		<replaceName>ArrCostRewardInfoFirst</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrcostrewardinfofirst</name>
  		<replaceName>ArrCostRewardInfoFirst</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrcostrewardinfofirst</name>
  		<replaceName>ArrCostRewardInfoFirst</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrcostrewardinfofirst</name>
  		<replaceName>ArrCostRewardInfoFirst</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrcostrewardinfofirst_size</name>
  		<replaceName>ArrCostRewardInfoFirst</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityRewardInfo& arrcostrewardinfofirst(int index) const;
  inline ::pb::TActivityRewardInfo* mutable_arrcostrewardinfofirst(int index);
  inline ::pb::TActivityRewardInfo* add_arrcostrewardinfofirst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
      arrcostrewardinfofirst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
      mutable_arrcostrewardinfofirst();

  // repeated .pb.TActivityRewardInfo ArrCostRewardInfoSecond = 7;
  inline int arrcostrewardinfosecond_size() const;
  inline void clear_arrcostrewardinfosecond();
  static const int kArrCostRewardInfoSecondFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestival</name>
  	<Function>
  		<name>arrcostrewardinfosecond</name>
  		<replaceName>ArrCostRewardInfoSecond</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrcostrewardinfosecond</name>
  		<replaceName>ArrCostRewardInfoSecond</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrcostrewardinfosecond</name>
  		<replaceName>ArrCostRewardInfoSecond</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrcostrewardinfosecond</name>
  		<replaceName>ArrCostRewardInfoSecond</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrcostrewardinfosecond_size</name>
  		<replaceName>ArrCostRewardInfoSecond</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityRewardInfo& arrcostrewardinfosecond(int index) const;
  inline ::pb::TActivityRewardInfo* mutable_arrcostrewardinfosecond(int index);
  inline ::pb::TActivityRewardInfo* add_arrcostrewardinfosecond();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
      arrcostrewardinfosecond() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
      mutable_arrcostrewardinfosecond();

  // optional uint32 Rank = 8;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestival</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActAlcoholFestival)
 private:
  inline void set_has_buytimefirst();
  inline void clear_has_buytimefirst();
  inline void set_has_buytimesecond();
  inline void clear_has_buytimesecond();
  inline void set_has_totalexp();
  inline void clear_has_totalexp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 buytimefirst_;
  ::google::protobuf::uint64 buytimesecond_;
  ::google::protobuf::uint64 totalexp_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo > arrrewardinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo > arrcostrewardinfofirst_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo > arrcostrewardinfosecond_;
  friend void  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto();

  void InitAsDefaultInstance();
  static TActAlcoholFestival* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActAlcoholFestivalGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActAlcoholFestival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActAlcoholFestivalGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActAlcoholFestivalGetInfoRsp();
  virtual ~TActAlcoholFestivalGetInfoRsp();

  TActAlcoholFestivalGetInfoRsp(const TActAlcoholFestivalGetInfoRsp& from);

  inline TActAlcoholFestivalGetInfoRsp& operator=(const TActAlcoholFestivalGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActAlcoholFestivalGetInfoRsp& default_instance();

  void Swap(TActAlcoholFestivalGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActAlcoholFestivalGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActAlcoholFestivalGetInfoRsp& from);
  void MergeFrom(const TActAlcoholFestivalGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TActAlcoholFestival TActAlcoholFestivalGetInfo = 1;
  inline bool has_tactalcoholfestivalgetinfo() const;
  inline void clear_tactalcoholfestivalgetinfo();
  static const int kTActAlcoholFestivalGetInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalGetInfoRsp</name>
  	<Function>
  		<name>tactalcoholfestivalgetinfo</name>
  		<replaceName>TActAlcoholFestivalGetInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tactalcoholfestivalgetinfo</name>
  		<replaceName>TActAlcoholFestivalGetInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_tactalcoholfestivalgetinfo</name>
  		<replaceName>TActAlcoholFestivalGetInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tactalcoholfestivalgetinfo</name>
  		<replaceName>TActAlcoholFestivalGetInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActAlcoholFestival& tactalcoholfestivalgetinfo() const;
  inline ::pb::TActAlcoholFestival* mutable_tactalcoholfestivalgetinfo();
  inline ::pb::TActAlcoholFestival* release_tactalcoholfestivalgetinfo();
  inline void set_allocated_tactalcoholfestivalgetinfo(::pb::TActAlcoholFestival* tactalcoholfestivalgetinfo);

  // @@protoc_insertion_point(class_scope:pb.TActAlcoholFestivalGetInfoRsp)
 private:
  inline void set_has_tactalcoholfestivalgetinfo();
  inline void clear_has_tactalcoholfestivalgetinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TActAlcoholFestival* tactalcoholfestivalgetinfo_;
  friend void  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto();

  void InitAsDefaultInstance();
  static TActAlcoholFestivalGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActAlcoholFestivalGetRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActAlcoholFestival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActAlcoholFestivalGetRewardReq : public ::google::protobuf::Message {
 public:
  TActAlcoholFestivalGetRewardReq();
  virtual ~TActAlcoholFestivalGetRewardReq();

  TActAlcoholFestivalGetRewardReq(const TActAlcoholFestivalGetRewardReq& from);

  inline TActAlcoholFestivalGetRewardReq& operator=(const TActAlcoholFestivalGetRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActAlcoholFestivalGetRewardReq& default_instance();

  void Swap(TActAlcoholFestivalGetRewardReq* other);

  // implements Message ----------------------------------------------

  TActAlcoholFestivalGetRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActAlcoholFestivalGetRewardReq& from);
  void MergeFrom(const TActAlcoholFestivalGetRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalGetRewardReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActAlcoholFestivalGetRewardReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto();

  void InitAsDefaultInstance();
  static TActAlcoholFestivalGetRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActAlcoholFestivalGetRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActAlcoholFestival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActAlcoholFestivalGetRewardRsp : public ::google::protobuf::Message {
 public:
  TActAlcoholFestivalGetRewardRsp();
  virtual ~TActAlcoholFestivalGetRewardRsp();

  TActAlcoholFestivalGetRewardRsp(const TActAlcoholFestivalGetRewardRsp& from);

  inline TActAlcoholFestivalGetRewardRsp& operator=(const TActAlcoholFestivalGetRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActAlcoholFestivalGetRewardRsp& default_instance();

  void Swap(TActAlcoholFestivalGetRewardRsp* other);

  // implements Message ----------------------------------------------

  TActAlcoholFestivalGetRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActAlcoholFestivalGetRewardRsp& from);
  void MergeFrom(const TActAlcoholFestivalGetRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalGetRewardRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActAlcoholFestivalGetRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto();

  void InitAsDefaultInstance();
  static TActAlcoholFestivalGetRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActAlcoholFestivalGetRewardFirstReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActAlcoholFestival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActAlcoholFestivalGetRewardFirstReq : public ::google::protobuf::Message {
 public:
  TActAlcoholFestivalGetRewardFirstReq();
  virtual ~TActAlcoholFestivalGetRewardFirstReq();

  TActAlcoholFestivalGetRewardFirstReq(const TActAlcoholFestivalGetRewardFirstReq& from);

  inline TActAlcoholFestivalGetRewardFirstReq& operator=(const TActAlcoholFestivalGetRewardFirstReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActAlcoholFestivalGetRewardFirstReq& default_instance();

  void Swap(TActAlcoholFestivalGetRewardFirstReq* other);

  // implements Message ----------------------------------------------

  TActAlcoholFestivalGetRewardFirstReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActAlcoholFestivalGetRewardFirstReq& from);
  void MergeFrom(const TActAlcoholFestivalGetRewardFirstReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalGetRewardFirstReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActAlcoholFestivalGetRewardFirstReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto();

  void InitAsDefaultInstance();
  static TActAlcoholFestivalGetRewardFirstReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActAlcoholFestivalGetRewardFirstRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActAlcoholFestival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActAlcoholFestivalGetRewardFirstRsp : public ::google::protobuf::Message {
 public:
  TActAlcoholFestivalGetRewardFirstRsp();
  virtual ~TActAlcoholFestivalGetRewardFirstRsp();

  TActAlcoholFestivalGetRewardFirstRsp(const TActAlcoholFestivalGetRewardFirstRsp& from);

  inline TActAlcoholFestivalGetRewardFirstRsp& operator=(const TActAlcoholFestivalGetRewardFirstRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActAlcoholFestivalGetRewardFirstRsp& default_instance();

  void Swap(TActAlcoholFestivalGetRewardFirstRsp* other);

  // implements Message ----------------------------------------------

  TActAlcoholFestivalGetRewardFirstRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActAlcoholFestivalGetRewardFirstRsp& from);
  void MergeFrom(const TActAlcoholFestivalGetRewardFirstRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalGetRewardFirstRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActAlcoholFestivalGetRewardFirstRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto();

  void InitAsDefaultInstance();
  static TActAlcoholFestivalGetRewardFirstRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActAlcoholFestivalGetRewardSecondReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActAlcoholFestival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActAlcoholFestivalGetRewardSecondReq : public ::google::protobuf::Message {
 public:
  TActAlcoholFestivalGetRewardSecondReq();
  virtual ~TActAlcoholFestivalGetRewardSecondReq();

  TActAlcoholFestivalGetRewardSecondReq(const TActAlcoholFestivalGetRewardSecondReq& from);

  inline TActAlcoholFestivalGetRewardSecondReq& operator=(const TActAlcoholFestivalGetRewardSecondReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActAlcoholFestivalGetRewardSecondReq& default_instance();

  void Swap(TActAlcoholFestivalGetRewardSecondReq* other);

  // implements Message ----------------------------------------------

  TActAlcoholFestivalGetRewardSecondReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActAlcoholFestivalGetRewardSecondReq& from);
  void MergeFrom(const TActAlcoholFestivalGetRewardSecondReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalGetRewardSecondReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActAlcoholFestivalGetRewardSecondReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto();

  void InitAsDefaultInstance();
  static TActAlcoholFestivalGetRewardSecondReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActAlcoholFestivalGetRewardSecondRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActAlcoholFestival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActAlcoholFestivalGetRewardSecondRsp : public ::google::protobuf::Message {
 public:
  TActAlcoholFestivalGetRewardSecondRsp();
  virtual ~TActAlcoholFestivalGetRewardSecondRsp();

  TActAlcoholFestivalGetRewardSecondRsp(const TActAlcoholFestivalGetRewardSecondRsp& from);

  inline TActAlcoholFestivalGetRewardSecondRsp& operator=(const TActAlcoholFestivalGetRewardSecondRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActAlcoholFestivalGetRewardSecondRsp& default_instance();

  void Swap(TActAlcoholFestivalGetRewardSecondRsp* other);

  // implements Message ----------------------------------------------

  TActAlcoholFestivalGetRewardSecondRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActAlcoholFestivalGetRewardSecondRsp& from);
  void MergeFrom(const TActAlcoholFestivalGetRewardSecondRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalGetRewardSecondRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActAlcoholFestivalGetRewardSecondRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto();

  void InitAsDefaultInstance();
  static TActAlcoholFestivalGetRewardSecondRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActAlcoholFestivalUseItemReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActAlcoholFestival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActAlcoholFestivalUseItemReq : public ::google::protobuf::Message {
 public:
  TActAlcoholFestivalUseItemReq();
  virtual ~TActAlcoholFestivalUseItemReq();

  TActAlcoholFestivalUseItemReq(const TActAlcoholFestivalUseItemReq& from);

  inline TActAlcoholFestivalUseItemReq& operator=(const TActAlcoholFestivalUseItemReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActAlcoholFestivalUseItemReq& default_instance();

  void Swap(TActAlcoholFestivalUseItemReq* other);

  // implements Message ----------------------------------------------

  TActAlcoholFestivalUseItemReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActAlcoholFestivalUseItemReq& from);
  void MergeFrom(const TActAlcoholFestivalUseItemReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalUseItemReq</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint32 ItemNum = 2;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalUseItemReq</name>
  	<Function>
  		<name>itemnum</name>
  		<replaceName>ItemNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemnum</name>
  		<replaceName>ItemNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemnum</name>
  		<replaceName>ItemNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 itemnum() const;
  inline void set_itemnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActAlcoholFestivalUseItemReq)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 itemnum_;
  friend void  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto();

  void InitAsDefaultInstance();
  static TActAlcoholFestivalUseItemReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActAlcoholFestivalGetArrRewardAllRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActAlcoholFestival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActAlcoholFestivalGetArrRewardAllRsp : public ::google::protobuf::Message {
 public:
  TActAlcoholFestivalGetArrRewardAllRsp();
  virtual ~TActAlcoholFestivalGetArrRewardAllRsp();

  TActAlcoholFestivalGetArrRewardAllRsp(const TActAlcoholFestivalGetArrRewardAllRsp& from);

  inline TActAlcoholFestivalGetArrRewardAllRsp& operator=(const TActAlcoholFestivalGetArrRewardAllRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActAlcoholFestivalGetArrRewardAllRsp& default_instance();

  void Swap(TActAlcoholFestivalGetArrRewardAllRsp* other);

  // implements Message ----------------------------------------------

  TActAlcoholFestivalGetArrRewardAllRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActAlcoholFestivalGetArrRewardAllRsp& from);
  void MergeFrom(const TActAlcoholFestivalGetArrRewardAllRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalGetArrRewardAllRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActAlcoholFestivalGetArrRewardAllRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto();

  void InitAsDefaultInstance();
  static TActAlcoholFestivalGetArrRewardAllRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActAlcoholFestivalGetServerTeamInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActAlcoholFestival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActAlcoholFestivalGetServerTeamInfoRsp : public ::google::protobuf::Message {
 public:
  TActAlcoholFestivalGetServerTeamInfoRsp();
  virtual ~TActAlcoholFestivalGetServerTeamInfoRsp();

  TActAlcoholFestivalGetServerTeamInfoRsp(const TActAlcoholFestivalGetServerTeamInfoRsp& from);

  inline TActAlcoholFestivalGetServerTeamInfoRsp& operator=(const TActAlcoholFestivalGetServerTeamInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActAlcoholFestivalGetServerTeamInfoRsp& default_instance();

  void Swap(TActAlcoholFestivalGetServerTeamInfoRsp* other);

  // implements Message ----------------------------------------------

  TActAlcoholFestivalGetServerTeamInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActAlcoholFestivalGetServerTeamInfoRsp& from);
  void MergeFrom(const TActAlcoholFestivalGetServerTeamInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalGetServerTeamInfoRsp</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 NeedOpenDay = 2;
  inline bool has_needopenday() const;
  inline void clear_needopenday();
  static const int kNeedOpenDayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalGetServerTeamInfoRsp</name>
  	<Function>
  		<name>needopenday</name>
  		<replaceName>NeedOpenDay</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_needopenday</name>
  		<replaceName>NeedOpenDay</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_needopenday</name>
  		<replaceName>NeedOpenDay</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 needopenday() const;
  inline void set_needopenday(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActAlcoholFestivalGetServerTeamInfoRsp)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_needopenday();
  inline void clear_has_needopenday();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 needopenday_;
  friend void  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto();

  void InitAsDefaultInstance();
  static TActAlcoholFestivalGetServerTeamInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActAlcoholFestivalRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActAlcoholFestival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActAlcoholFestivalRankInfo : public ::google::protobuf::Message {
 public:
  TActAlcoholFestivalRankInfo();
  virtual ~TActAlcoholFestivalRankInfo();

  TActAlcoholFestivalRankInfo(const TActAlcoholFestivalRankInfo& from);

  inline TActAlcoholFestivalRankInfo& operator=(const TActAlcoholFestivalRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActAlcoholFestivalRankInfo& default_instance();

  void Swap(TActAlcoholFestivalRankInfo* other);

  // implements Message ----------------------------------------------

  TActAlcoholFestivalRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActAlcoholFestivalRankInfo& from);
  void MergeFrom(const TActAlcoholFestivalRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalRankInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint64 TotalExp = 2;
  inline bool has_totalexp() const;
  inline void clear_totalexp();
  static const int kTotalExpFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalRankInfo</name>
  	<Function>
  		<name>totalexp</name>
  		<replaceName>TotalExp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalexp</name>
  		<replaceName>TotalExp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalexp</name>
  		<replaceName>TotalExp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totalexp() const;
  inline void set_totalexp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActAlcoholFestivalRankInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_totalexp();
  inline void clear_has_totalexp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 totalexp_;
  friend void  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto();

  void InitAsDefaultInstance();
  static TActAlcoholFestivalRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActAlcoholFestivalGetRankListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActAlcoholFestival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActAlcoholFestivalGetRankListReq : public ::google::protobuf::Message {
 public:
  TActAlcoholFestivalGetRankListReq();
  virtual ~TActAlcoholFestivalGetRankListReq();

  TActAlcoholFestivalGetRankListReq(const TActAlcoholFestivalGetRankListReq& from);

  inline TActAlcoholFestivalGetRankListReq& operator=(const TActAlcoholFestivalGetRankListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActAlcoholFestivalGetRankListReq& default_instance();

  void Swap(TActAlcoholFestivalGetRankListReq* other);

  // implements Message ----------------------------------------------

  TActAlcoholFestivalGetRankListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActAlcoholFestivalGetRankListReq& from);
  void MergeFrom(const TActAlcoholFestivalGetRankListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalGetRankListReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalGetRankListReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActAlcoholFestivalGetRankListReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto();

  void InitAsDefaultInstance();
  static TActAlcoholFestivalGetRankListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActAlcoholFestivalGetRankListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActAlcoholFestival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActAlcoholFestivalGetRankListRsp : public ::google::protobuf::Message {
 public:
  TActAlcoholFestivalGetRankListRsp();
  virtual ~TActAlcoholFestivalGetRankListRsp();

  TActAlcoholFestivalGetRankListRsp(const TActAlcoholFestivalGetRankListRsp& from);

  inline TActAlcoholFestivalGetRankListRsp& operator=(const TActAlcoholFestivalGetRankListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActAlcoholFestivalGetRankListRsp& default_instance();

  void Swap(TActAlcoholFestivalGetRankListRsp* other);

  // implements Message ----------------------------------------------

  TActAlcoholFestivalGetRankListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActAlcoholFestivalGetRankListRsp& from);
  void MergeFrom(const TActAlcoholFestivalGetRankListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActAlcoholFestivalRankInfo RankList = 1;
  inline int ranklist_size() const;
  inline void clear_ranklist();
  static const int kRankListFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalGetRankListRsp</name>
  	<Function>
  		<name>ranklist</name>
  		<replaceName>RankList</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ranklist</name>
  		<replaceName>RankList</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ranklist</name>
  		<replaceName>RankList</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ranklist</name>
  		<replaceName>RankList</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ranklist_size</name>
  		<replaceName>RankList</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActAlcoholFestivalRankInfo& ranklist(int index) const;
  inline ::pb::TActAlcoholFestivalRankInfo* mutable_ranklist(int index);
  inline ::pb::TActAlcoholFestivalRankInfo* add_ranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActAlcoholFestivalRankInfo >&
      ranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActAlcoholFestivalRankInfo >*
      mutable_ranklist();

  // optional uint32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalGetRankListRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActAlcoholFestivalGetRankListRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActAlcoholFestivalRankInfo > ranklist_;
  ::google::protobuf::uint32 myrank_;
  friend void  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto();

  void InitAsDefaultInstance();
  static TActAlcoholFestivalGetRankListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActAlcoholFestivalNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActAlcoholFestival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActAlcoholFestivalNotify : public ::google::protobuf::Message {
 public:
  TActAlcoholFestivalNotify();
  virtual ~TActAlcoholFestivalNotify();

  TActAlcoholFestivalNotify(const TActAlcoholFestivalNotify& from);

  inline TActAlcoholFestivalNotify& operator=(const TActAlcoholFestivalNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActAlcoholFestivalNotify& default_instance();

  void Swap(TActAlcoholFestivalNotify* other);

  // implements Message ----------------------------------------------

  TActAlcoholFestivalNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActAlcoholFestivalNotify& from);
  void MergeFrom(const TActAlcoholFestivalNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TActAlcoholFestival PushMsg = 1;
  inline bool has_pushmsg() const;
  inline void clear_pushmsg();
  static const int kPushMsgFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActAlcoholFestivalNotify</name>
  	<Function>
  		<name>pushmsg</name>
  		<replaceName>PushMsg</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pushmsg</name>
  		<replaceName>PushMsg</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pushmsg</name>
  		<replaceName>PushMsg</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pushmsg</name>
  		<replaceName>PushMsg</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActAlcoholFestival& pushmsg() const;
  inline ::pb::TActAlcoholFestival* mutable_pushmsg();
  inline ::pb::TActAlcoholFestival* release_pushmsg();
  inline void set_allocated_pushmsg(::pb::TActAlcoholFestival* pushmsg);

  // @@protoc_insertion_point(class_scope:pb.TActAlcoholFestivalNotify)
 private:
  inline void set_has_pushmsg();
  inline void clear_has_pushmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TActAlcoholFestival* pushmsg_;
  friend void  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto();

  void InitAsDefaultInstance();
  static TActAlcoholFestivalNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActAlcoholFestival

// optional uint64 BuyTimeFirst = 1;
inline bool TActAlcoholFestival::has_buytimefirst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActAlcoholFestival::set_has_buytimefirst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActAlcoholFestival::clear_has_buytimefirst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActAlcoholFestival::clear_buytimefirst() {
  buytimefirst_ = GOOGLE_ULONGLONG(0);
  clear_has_buytimefirst();
}
inline ::google::protobuf::uint64 TActAlcoholFestival::buytimefirst() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestival.BuyTimeFirst)
  return buytimefirst_;
}
inline void TActAlcoholFestival::set_buytimefirst(::google::protobuf::uint64 value) {
  set_has_buytimefirst();
  buytimefirst_ = value;
  // @@protoc_insertion_point(field_set:pb.TActAlcoholFestival.BuyTimeFirst)
}

// optional uint64 BuyTimeSecond = 2;
inline bool TActAlcoholFestival::has_buytimesecond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActAlcoholFestival::set_has_buytimesecond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActAlcoholFestival::clear_has_buytimesecond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActAlcoholFestival::clear_buytimesecond() {
  buytimesecond_ = GOOGLE_ULONGLONG(0);
  clear_has_buytimesecond();
}
inline ::google::protobuf::uint64 TActAlcoholFestival::buytimesecond() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestival.BuyTimeSecond)
  return buytimesecond_;
}
inline void TActAlcoholFestival::set_buytimesecond(::google::protobuf::uint64 value) {
  set_has_buytimesecond();
  buytimesecond_ = value;
  // @@protoc_insertion_point(field_set:pb.TActAlcoholFestival.BuyTimeSecond)
}

// optional uint64 TotalExp = 3;
inline bool TActAlcoholFestival::has_totalexp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActAlcoholFestival::set_has_totalexp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActAlcoholFestival::clear_has_totalexp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActAlcoholFestival::clear_totalexp() {
  totalexp_ = GOOGLE_ULONGLONG(0);
  clear_has_totalexp();
}
inline ::google::protobuf::uint64 TActAlcoholFestival::totalexp() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestival.TotalExp)
  return totalexp_;
}
inline void TActAlcoholFestival::set_totalexp(::google::protobuf::uint64 value) {
  set_has_totalexp();
  totalexp_ = value;
  // @@protoc_insertion_point(field_set:pb.TActAlcoholFestival.TotalExp)
}

// optional uint32 Level = 4;
inline bool TActAlcoholFestival::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TActAlcoholFestival::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TActAlcoholFestival::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TActAlcoholFestival::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TActAlcoholFestival::level() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestival.Level)
  return level_;
}
inline void TActAlcoholFestival::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TActAlcoholFestival.Level)
}

// repeated .pb.TActivityRewardInfo ArrRewardInfo = 5;
inline int TActAlcoholFestival::arrrewardinfo_size() const {
  return arrrewardinfo_.size();
}
inline void TActAlcoholFestival::clear_arrrewardinfo() {
  arrrewardinfo_.Clear();
}
inline const ::pb::TActivityRewardInfo& TActAlcoholFestival::arrrewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestival.ArrRewardInfo)
  return arrrewardinfo_.Get(index);
}
inline ::pb::TActivityRewardInfo* TActAlcoholFestival::mutable_arrrewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActAlcoholFestival.ArrRewardInfo)
  return arrrewardinfo_.Mutable(index);
}
inline ::pb::TActivityRewardInfo* TActAlcoholFestival::add_arrrewardinfo() {
  // @@protoc_insertion_point(field_add:pb.TActAlcoholFestival.ArrRewardInfo)
  return arrrewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
TActAlcoholFestival::arrrewardinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActAlcoholFestival.ArrRewardInfo)
  return arrrewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
TActAlcoholFestival::mutable_arrrewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActAlcoholFestival.ArrRewardInfo)
  return &arrrewardinfo_;
}

// repeated .pb.TActivityRewardInfo ArrCostRewardInfoFirst = 6;
inline int TActAlcoholFestival::arrcostrewardinfofirst_size() const {
  return arrcostrewardinfofirst_.size();
}
inline void TActAlcoholFestival::clear_arrcostrewardinfofirst() {
  arrcostrewardinfofirst_.Clear();
}
inline const ::pb::TActivityRewardInfo& TActAlcoholFestival::arrcostrewardinfofirst(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestival.ArrCostRewardInfoFirst)
  return arrcostrewardinfofirst_.Get(index);
}
inline ::pb::TActivityRewardInfo* TActAlcoholFestival::mutable_arrcostrewardinfofirst(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActAlcoholFestival.ArrCostRewardInfoFirst)
  return arrcostrewardinfofirst_.Mutable(index);
}
inline ::pb::TActivityRewardInfo* TActAlcoholFestival::add_arrcostrewardinfofirst() {
  // @@protoc_insertion_point(field_add:pb.TActAlcoholFestival.ArrCostRewardInfoFirst)
  return arrcostrewardinfofirst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
TActAlcoholFestival::arrcostrewardinfofirst() const {
  // @@protoc_insertion_point(field_list:pb.TActAlcoholFestival.ArrCostRewardInfoFirst)
  return arrcostrewardinfofirst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
TActAlcoholFestival::mutable_arrcostrewardinfofirst() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActAlcoholFestival.ArrCostRewardInfoFirst)
  return &arrcostrewardinfofirst_;
}

// repeated .pb.TActivityRewardInfo ArrCostRewardInfoSecond = 7;
inline int TActAlcoholFestival::arrcostrewardinfosecond_size() const {
  return arrcostrewardinfosecond_.size();
}
inline void TActAlcoholFestival::clear_arrcostrewardinfosecond() {
  arrcostrewardinfosecond_.Clear();
}
inline const ::pb::TActivityRewardInfo& TActAlcoholFestival::arrcostrewardinfosecond(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestival.ArrCostRewardInfoSecond)
  return arrcostrewardinfosecond_.Get(index);
}
inline ::pb::TActivityRewardInfo* TActAlcoholFestival::mutable_arrcostrewardinfosecond(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActAlcoholFestival.ArrCostRewardInfoSecond)
  return arrcostrewardinfosecond_.Mutable(index);
}
inline ::pb::TActivityRewardInfo* TActAlcoholFestival::add_arrcostrewardinfosecond() {
  // @@protoc_insertion_point(field_add:pb.TActAlcoholFestival.ArrCostRewardInfoSecond)
  return arrcostrewardinfosecond_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
TActAlcoholFestival::arrcostrewardinfosecond() const {
  // @@protoc_insertion_point(field_list:pb.TActAlcoholFestival.ArrCostRewardInfoSecond)
  return arrcostrewardinfosecond_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
TActAlcoholFestival::mutable_arrcostrewardinfosecond() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActAlcoholFestival.ArrCostRewardInfoSecond)
  return &arrcostrewardinfosecond_;
}

// optional uint32 Rank = 8;
inline bool TActAlcoholFestival::has_rank() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TActAlcoholFestival::set_has_rank() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TActAlcoholFestival::clear_has_rank() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TActAlcoholFestival::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TActAlcoholFestival::rank() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestival.Rank)
  return rank_;
}
inline void TActAlcoholFestival::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TActAlcoholFestival.Rank)
}

// -------------------------------------------------------------------

// TActAlcoholFestivalGetInfoRsp

// optional .pb.TActAlcoholFestival TActAlcoholFestivalGetInfo = 1;
inline bool TActAlcoholFestivalGetInfoRsp::has_tactalcoholfestivalgetinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActAlcoholFestivalGetInfoRsp::set_has_tactalcoholfestivalgetinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActAlcoholFestivalGetInfoRsp::clear_has_tactalcoholfestivalgetinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActAlcoholFestivalGetInfoRsp::clear_tactalcoholfestivalgetinfo() {
  if (tactalcoholfestivalgetinfo_ != NULL) tactalcoholfestivalgetinfo_->::pb::TActAlcoholFestival::Clear();
  clear_has_tactalcoholfestivalgetinfo();
}
inline const ::pb::TActAlcoholFestival& TActAlcoholFestivalGetInfoRsp::tactalcoholfestivalgetinfo() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalGetInfoRsp.TActAlcoholFestivalGetInfo)
  return tactalcoholfestivalgetinfo_ != NULL ? *tactalcoholfestivalgetinfo_ : *default_instance_->tactalcoholfestivalgetinfo_;
}
inline ::pb::TActAlcoholFestival* TActAlcoholFestivalGetInfoRsp::mutable_tactalcoholfestivalgetinfo() {
  set_has_tactalcoholfestivalgetinfo();
  if (tactalcoholfestivalgetinfo_ == NULL) tactalcoholfestivalgetinfo_ = new ::pb::TActAlcoholFestival;
  // @@protoc_insertion_point(field_mutable:pb.TActAlcoholFestivalGetInfoRsp.TActAlcoholFestivalGetInfo)
  return tactalcoholfestivalgetinfo_;
}
inline ::pb::TActAlcoholFestival* TActAlcoholFestivalGetInfoRsp::release_tactalcoholfestivalgetinfo() {
  clear_has_tactalcoholfestivalgetinfo();
  ::pb::TActAlcoholFestival* temp = tactalcoholfestivalgetinfo_;
  tactalcoholfestivalgetinfo_ = NULL;
  return temp;
}
inline void TActAlcoholFestivalGetInfoRsp::set_allocated_tactalcoholfestivalgetinfo(::pb::TActAlcoholFestival* tactalcoholfestivalgetinfo) {
  delete tactalcoholfestivalgetinfo_;
  tactalcoholfestivalgetinfo_ = tactalcoholfestivalgetinfo;
  if (tactalcoholfestivalgetinfo) {
    set_has_tactalcoholfestivalgetinfo();
  } else {
    clear_has_tactalcoholfestivalgetinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActAlcoholFestivalGetInfoRsp.TActAlcoholFestivalGetInfo)
}

// -------------------------------------------------------------------

// TActAlcoholFestivalGetRewardReq

// optional uint32 Id = 1;
inline bool TActAlcoholFestivalGetRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActAlcoholFestivalGetRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActAlcoholFestivalGetRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActAlcoholFestivalGetRewardReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActAlcoholFestivalGetRewardReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalGetRewardReq.Id)
  return id_;
}
inline void TActAlcoholFestivalGetRewardReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActAlcoholFestivalGetRewardReq.Id)
}

// -------------------------------------------------------------------

// TActAlcoholFestivalGetRewardRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActAlcoholFestivalGetRewardRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActAlcoholFestivalGetRewardRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActAlcoholFestivalGetRewardRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalGetRewardRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActAlcoholFestivalGetRewardRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActAlcoholFestivalGetRewardRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActAlcoholFestivalGetRewardRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActAlcoholFestivalGetRewardRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActAlcoholFestivalGetRewardRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActAlcoholFestivalGetRewardRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActAlcoholFestivalGetRewardRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActAlcoholFestivalGetRewardRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActAlcoholFestivalGetRewardFirstReq

// optional uint32 Id = 1;
inline bool TActAlcoholFestivalGetRewardFirstReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActAlcoholFestivalGetRewardFirstReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActAlcoholFestivalGetRewardFirstReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActAlcoholFestivalGetRewardFirstReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActAlcoholFestivalGetRewardFirstReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalGetRewardFirstReq.Id)
  return id_;
}
inline void TActAlcoholFestivalGetRewardFirstReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActAlcoholFestivalGetRewardFirstReq.Id)
}

// -------------------------------------------------------------------

// TActAlcoholFestivalGetRewardFirstRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActAlcoholFestivalGetRewardFirstRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActAlcoholFestivalGetRewardFirstRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActAlcoholFestivalGetRewardFirstRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalGetRewardFirstRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActAlcoholFestivalGetRewardFirstRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActAlcoholFestivalGetRewardFirstRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActAlcoholFestivalGetRewardFirstRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActAlcoholFestivalGetRewardFirstRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActAlcoholFestivalGetRewardFirstRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActAlcoholFestivalGetRewardFirstRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActAlcoholFestivalGetRewardFirstRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActAlcoholFestivalGetRewardFirstRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActAlcoholFestivalGetRewardSecondReq

// optional uint32 Id = 1;
inline bool TActAlcoholFestivalGetRewardSecondReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActAlcoholFestivalGetRewardSecondReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActAlcoholFestivalGetRewardSecondReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActAlcoholFestivalGetRewardSecondReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActAlcoholFestivalGetRewardSecondReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalGetRewardSecondReq.Id)
  return id_;
}
inline void TActAlcoholFestivalGetRewardSecondReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActAlcoholFestivalGetRewardSecondReq.Id)
}

// -------------------------------------------------------------------

// TActAlcoholFestivalGetRewardSecondRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActAlcoholFestivalGetRewardSecondRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActAlcoholFestivalGetRewardSecondRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActAlcoholFestivalGetRewardSecondRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalGetRewardSecondRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActAlcoholFestivalGetRewardSecondRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActAlcoholFestivalGetRewardSecondRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActAlcoholFestivalGetRewardSecondRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActAlcoholFestivalGetRewardSecondRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActAlcoholFestivalGetRewardSecondRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActAlcoholFestivalGetRewardSecondRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActAlcoholFestivalGetRewardSecondRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActAlcoholFestivalGetRewardSecondRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActAlcoholFestivalUseItemReq

// optional uint32 Tid = 1;
inline bool TActAlcoholFestivalUseItemReq::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActAlcoholFestivalUseItemReq::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActAlcoholFestivalUseItemReq::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActAlcoholFestivalUseItemReq::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TActAlcoholFestivalUseItemReq::tid() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalUseItemReq.Tid)
  return tid_;
}
inline void TActAlcoholFestivalUseItemReq::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActAlcoholFestivalUseItemReq.Tid)
}

// optional uint32 ItemNum = 2;
inline bool TActAlcoholFestivalUseItemReq::has_itemnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActAlcoholFestivalUseItemReq::set_has_itemnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActAlcoholFestivalUseItemReq::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActAlcoholFestivalUseItemReq::clear_itemnum() {
  itemnum_ = 0u;
  clear_has_itemnum();
}
inline ::google::protobuf::uint32 TActAlcoholFestivalUseItemReq::itemnum() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalUseItemReq.ItemNum)
  return itemnum_;
}
inline void TActAlcoholFestivalUseItemReq::set_itemnum(::google::protobuf::uint32 value) {
  set_has_itemnum();
  itemnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActAlcoholFestivalUseItemReq.ItemNum)
}

// -------------------------------------------------------------------

// TActAlcoholFestivalGetArrRewardAllRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActAlcoholFestivalGetArrRewardAllRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActAlcoholFestivalGetArrRewardAllRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActAlcoholFestivalGetArrRewardAllRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalGetArrRewardAllRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActAlcoholFestivalGetArrRewardAllRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActAlcoholFestivalGetArrRewardAllRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActAlcoholFestivalGetArrRewardAllRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActAlcoholFestivalGetArrRewardAllRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActAlcoholFestivalGetArrRewardAllRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActAlcoholFestivalGetArrRewardAllRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActAlcoholFestivalGetArrRewardAllRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActAlcoholFestivalGetArrRewardAllRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActAlcoholFestivalGetServerTeamInfoRsp

// optional uint32 TeamId = 1;
inline bool TActAlcoholFestivalGetServerTeamInfoRsp::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActAlcoholFestivalGetServerTeamInfoRsp::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActAlcoholFestivalGetServerTeamInfoRsp::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActAlcoholFestivalGetServerTeamInfoRsp::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TActAlcoholFestivalGetServerTeamInfoRsp::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalGetServerTeamInfoRsp.TeamId)
  return teamid_;
}
inline void TActAlcoholFestivalGetServerTeamInfoRsp::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActAlcoholFestivalGetServerTeamInfoRsp.TeamId)
}

// optional uint32 NeedOpenDay = 2;
inline bool TActAlcoholFestivalGetServerTeamInfoRsp::has_needopenday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActAlcoholFestivalGetServerTeamInfoRsp::set_has_needopenday() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActAlcoholFestivalGetServerTeamInfoRsp::clear_has_needopenday() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActAlcoholFestivalGetServerTeamInfoRsp::clear_needopenday() {
  needopenday_ = 0u;
  clear_has_needopenday();
}
inline ::google::protobuf::uint32 TActAlcoholFestivalGetServerTeamInfoRsp::needopenday() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalGetServerTeamInfoRsp.NeedOpenDay)
  return needopenday_;
}
inline void TActAlcoholFestivalGetServerTeamInfoRsp::set_needopenday(::google::protobuf::uint32 value) {
  set_has_needopenday();
  needopenday_ = value;
  // @@protoc_insertion_point(field_set:pb.TActAlcoholFestivalGetServerTeamInfoRsp.NeedOpenDay)
}

// -------------------------------------------------------------------

// TActAlcoholFestivalRankInfo

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TActAlcoholFestivalRankInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActAlcoholFestivalRankInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActAlcoholFestivalRankInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActAlcoholFestivalRankInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TActAlcoholFestivalRankInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalRankInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TActAlcoholFestivalRankInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActAlcoholFestivalRankInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TActAlcoholFestivalRankInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TActAlcoholFestivalRankInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActAlcoholFestivalRankInfo.UserInfo)
}

// optional uint64 TotalExp = 2;
inline bool TActAlcoholFestivalRankInfo::has_totalexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActAlcoholFestivalRankInfo::set_has_totalexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActAlcoholFestivalRankInfo::clear_has_totalexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActAlcoholFestivalRankInfo::clear_totalexp() {
  totalexp_ = GOOGLE_ULONGLONG(0);
  clear_has_totalexp();
}
inline ::google::protobuf::uint64 TActAlcoholFestivalRankInfo::totalexp() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalRankInfo.TotalExp)
  return totalexp_;
}
inline void TActAlcoholFestivalRankInfo::set_totalexp(::google::protobuf::uint64 value) {
  set_has_totalexp();
  totalexp_ = value;
  // @@protoc_insertion_point(field_set:pb.TActAlcoholFestivalRankInfo.TotalExp)
}

// -------------------------------------------------------------------

// TActAlcoholFestivalGetRankListReq

// optional uint32 Offset = 1;
inline bool TActAlcoholFestivalGetRankListReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActAlcoholFestivalGetRankListReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActAlcoholFestivalGetRankListReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActAlcoholFestivalGetRankListReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TActAlcoholFestivalGetRankListReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalGetRankListReq.Offset)
  return offset_;
}
inline void TActAlcoholFestivalGetRankListReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TActAlcoholFestivalGetRankListReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TActAlcoholFestivalGetRankListReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActAlcoholFestivalGetRankListReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActAlcoholFestivalGetRankListReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActAlcoholFestivalGetRankListReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TActAlcoholFestivalGetRankListReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalGetRankListReq.Limit)
  return limit_;
}
inline void TActAlcoholFestivalGetRankListReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TActAlcoholFestivalGetRankListReq.Limit)
}

// -------------------------------------------------------------------

// TActAlcoholFestivalGetRankListRsp

// repeated .pb.TActAlcoholFestivalRankInfo RankList = 1;
inline int TActAlcoholFestivalGetRankListRsp::ranklist_size() const {
  return ranklist_.size();
}
inline void TActAlcoholFestivalGetRankListRsp::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::pb::TActAlcoholFestivalRankInfo& TActAlcoholFestivalGetRankListRsp::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalGetRankListRsp.RankList)
  return ranklist_.Get(index);
}
inline ::pb::TActAlcoholFestivalRankInfo* TActAlcoholFestivalGetRankListRsp::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActAlcoholFestivalGetRankListRsp.RankList)
  return ranklist_.Mutable(index);
}
inline ::pb::TActAlcoholFestivalRankInfo* TActAlcoholFestivalGetRankListRsp::add_ranklist() {
  // @@protoc_insertion_point(field_add:pb.TActAlcoholFestivalGetRankListRsp.RankList)
  return ranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActAlcoholFestivalRankInfo >&
TActAlcoholFestivalGetRankListRsp::ranklist() const {
  // @@protoc_insertion_point(field_list:pb.TActAlcoholFestivalGetRankListRsp.RankList)
  return ranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActAlcoholFestivalRankInfo >*
TActAlcoholFestivalGetRankListRsp::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActAlcoholFestivalGetRankListRsp.RankList)
  return &ranklist_;
}

// optional uint32 MyRank = 2;
inline bool TActAlcoholFestivalGetRankListRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActAlcoholFestivalGetRankListRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActAlcoholFestivalGetRankListRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActAlcoholFestivalGetRankListRsp::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 TActAlcoholFestivalGetRankListRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalGetRankListRsp.MyRank)
  return myrank_;
}
inline void TActAlcoholFestivalGetRankListRsp::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TActAlcoholFestivalGetRankListRsp.MyRank)
}

// -------------------------------------------------------------------

// TActAlcoholFestivalNotify

// optional .pb.TActAlcoholFestival PushMsg = 1;
inline bool TActAlcoholFestivalNotify::has_pushmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActAlcoholFestivalNotify::set_has_pushmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActAlcoholFestivalNotify::clear_has_pushmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActAlcoholFestivalNotify::clear_pushmsg() {
  if (pushmsg_ != NULL) pushmsg_->::pb::TActAlcoholFestival::Clear();
  clear_has_pushmsg();
}
inline const ::pb::TActAlcoholFestival& TActAlcoholFestivalNotify::pushmsg() const {
  // @@protoc_insertion_point(field_get:pb.TActAlcoholFestivalNotify.PushMsg)
  return pushmsg_ != NULL ? *pushmsg_ : *default_instance_->pushmsg_;
}
inline ::pb::TActAlcoholFestival* TActAlcoholFestivalNotify::mutable_pushmsg() {
  set_has_pushmsg();
  if (pushmsg_ == NULL) pushmsg_ = new ::pb::TActAlcoholFestival;
  // @@protoc_insertion_point(field_mutable:pb.TActAlcoholFestivalNotify.PushMsg)
  return pushmsg_;
}
inline ::pb::TActAlcoholFestival* TActAlcoholFestivalNotify::release_pushmsg() {
  clear_has_pushmsg();
  ::pb::TActAlcoholFestival* temp = pushmsg_;
  pushmsg_ = NULL;
  return temp;
}
inline void TActAlcoholFestivalNotify::set_allocated_pushmsg(::pb::TActAlcoholFestival* pushmsg) {
  delete pushmsg_;
  pushmsg_ = pushmsg;
  if (pushmsg) {
    set_has_pushmsg();
  } else {
    clear_has_pushmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActAlcoholFestivalNotify.PushMsg)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActAlcoholFestival_2eproto__INCLUDED
