// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CampRank.proto

#ifndef PROTOBUF_net_2fCampRank_2eproto__INCLUDED
#define PROTOBUF_net_2fCampRank_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fCampRank_2eproto();
void protobuf_AssignDesc_net_2fCampRank_2eproto();
void protobuf_ShutdownFile_net_2fCampRank_2eproto();

class TCampRankRankItem;
class TCampRankHeroRankItem;
class TCampRankGetCampRankReq;
class TCampRankGetCampRankRsp;
class TCampRankGetHeroRankReq;
class TCampRankGetHeroRankRsp;
class TCampRankGetHeroAppearReq;
class TCampRankGetHeroAppearRsp;
class TcampRankCampRankFirst;
class TCampRankGetCampRankFirstRsp;
class TCampRankHeroRankInfo;
class TCampRankGetSelfRankInfoRsp;
class TCampRankSelfRankInfoPush;

enum ECampRankType {
  ECampRank_Wei = 1,
  ECampRank_Shu = 2,
  ECampRank_Wu = 3,
  ECampRank_Qun = 4,
  EcampRank_Mix = 6
};
bool ECampRankType_IsValid(int value);
const ECampRankType ECampRankType_MIN = ECampRank_Wei;
const ECampRankType ECampRankType_MAX = EcampRank_Mix;
const int ECampRankType_ARRAYSIZE = ECampRankType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECampRankType_descriptor();
inline const ::std::string& ECampRankType_Name(ECampRankType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECampRankType_descriptor(), value);
}
inline bool ECampRankType_Parse(
    const ::std::string& name, ECampRankType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECampRankType>(
    ECampRankType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TCampRankRankItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampRankRankItem : public ::google::protobuf::Message {
 public:
  TCampRankRankItem();
  virtual ~TCampRankRankItem();

  TCampRankRankItem(const TCampRankRankItem& from);

  inline TCampRankRankItem& operator=(const TCampRankRankItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampRankRankItem& default_instance();

  void Swap(TCampRankRankItem* other);

  // implements Message ----------------------------------------------

  TCampRankRankItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampRankRankItem& from);
  void MergeFrom(const TCampRankRankItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampRankRankItem</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint64 FightForce = 2;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampRankRankItem</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint64 ChangeTime = 3;
  inline bool has_changetime() const;
  inline void clear_changetime();
  static const int kChangeTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCampRankRankItem</name>
  	<Function>
  		<name>changetime</name>
  		<replaceName>ChangeTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_changetime</name>
  		<replaceName>ChangeTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_changetime</name>
  		<replaceName>ChangeTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 changetime() const;
  inline void set_changetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCampRankRankItem)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_changetime();
  inline void clear_has_changetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint64 changetime_;
  friend void  protobuf_AddDesc_net_2fCampRank_2eproto();
  friend void protobuf_AssignDesc_net_2fCampRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampRank_2eproto();

  void InitAsDefaultInstance();
  static TCampRankRankItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampRankHeroRankItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampRankHeroRankItem : public ::google::protobuf::Message {
 public:
  TCampRankHeroRankItem();
  virtual ~TCampRankHeroRankItem();

  TCampRankHeroRankItem(const TCampRankHeroRankItem& from);

  inline TCampRankHeroRankItem& operator=(const TCampRankHeroRankItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampRankHeroRankItem& default_instance();

  void Swap(TCampRankHeroRankItem* other);

  // implements Message ----------------------------------------------

  TCampRankHeroRankItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampRankHeroRankItem& from);
  void MergeFrom(const TCampRankHeroRankItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampRankHeroRankItem</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint64 FightForce = 2;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampRankHeroRankItem</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint64 ChangeTime = 3;
  inline bool has_changetime() const;
  inline void clear_changetime();
  static const int kChangeTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCampRankHeroRankItem</name>
  	<Function>
  		<name>changetime</name>
  		<replaceName>ChangeTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_changetime</name>
  		<replaceName>ChangeTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_changetime</name>
  		<replaceName>ChangeTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 changetime() const;
  inline void set_changetime(::google::protobuf::uint64 value);

  // optional uint32 Htid = 4;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCampRankHeroRankItem</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint32 HeroLv = 5;
  inline bool has_herolv() const;
  inline void clear_herolv();
  static const int kHeroLvFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCampRankHeroRankItem</name>
  	<Function>
  		<name>herolv</name>
  		<replaceName>HeroLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_herolv</name>
  		<replaceName>HeroLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_herolv</name>
  		<replaceName>HeroLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 herolv() const;
  inline void set_herolv(::google::protobuf::uint32 value);

  // optional uint32 HeroStarLv = 6;
  inline bool has_herostarlv() const;
  inline void clear_herostarlv();
  static const int kHeroStarLvFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCampRankHeroRankItem</name>
  	<Function>
  		<name>herostarlv</name>
  		<replaceName>HeroStarLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_herostarlv</name>
  		<replaceName>HeroStarLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_herostarlv</name>
  		<replaceName>HeroStarLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 herostarlv() const;
  inline void set_herostarlv(::google::protobuf::uint32 value);

  // optional uint32 HeroAdvLv = 7;
  inline bool has_heroadvlv() const;
  inline void clear_heroadvlv();
  static const int kHeroAdvLvFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCampRankHeroRankItem</name>
  	<Function>
  		<name>heroadvlv</name>
  		<replaceName>HeroAdvLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_heroadvlv</name>
  		<replaceName>HeroAdvLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_heroadvlv</name>
  		<replaceName>HeroAdvLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 heroadvlv() const;
  inline void set_heroadvlv(::google::protobuf::uint32 value);

  // optional uint32 HeroTitle = 8;
  inline bool has_herotitle() const;
  inline void clear_herotitle();
  static const int kHeroTitleFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCampRankHeroRankItem</name>
  	<Function>
  		<name>herotitle</name>
  		<replaceName>HeroTitle</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_herotitle</name>
  		<replaceName>HeroTitle</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_herotitle</name>
  		<replaceName>HeroTitle</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 herotitle() const;
  inline void set_herotitle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCampRankHeroRankItem)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_changetime();
  inline void clear_has_changetime();
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_herolv();
  inline void clear_has_herolv();
  inline void set_has_herostarlv();
  inline void clear_has_herostarlv();
  inline void set_has_heroadvlv();
  inline void clear_has_heroadvlv();
  inline void set_has_herotitle();
  inline void clear_has_herotitle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint64 changetime_;
  ::google::protobuf::uint32 htid_;
  ::google::protobuf::uint32 herolv_;
  ::google::protobuf::uint32 herostarlv_;
  ::google::protobuf::uint32 heroadvlv_;
  ::google::protobuf::uint32 herotitle_;
  friend void  protobuf_AddDesc_net_2fCampRank_2eproto();
  friend void protobuf_AssignDesc_net_2fCampRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampRank_2eproto();

  void InitAsDefaultInstance();
  static TCampRankHeroRankItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampRankGetCampRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampRankGetCampRankReq : public ::google::protobuf::Message {
 public:
  TCampRankGetCampRankReq();
  virtual ~TCampRankGetCampRankReq();

  TCampRankGetCampRankReq(const TCampRankGetCampRankReq& from);

  inline TCampRankGetCampRankReq& operator=(const TCampRankGetCampRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampRankGetCampRankReq& default_instance();

  void Swap(TCampRankGetCampRankReq* other);

  // implements Message ----------------------------------------------

  TCampRankGetCampRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampRankGetCampRankReq& from);
  void MergeFrom(const TCampRankGetCampRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ECampRankType CampType = 1;
  inline bool has_camptype() const;
  inline void clear_camptype();
  static const int kCampTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampRankGetCampRankReq</name>
  	<Function>
  		<name>camptype</name>
  		<replaceName>CampType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_camptype</name>
  		<replaceName>CampType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_camptype</name>
  		<replaceName>CampType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECampRankType camptype() const;
  inline void set_camptype(::pb::ECampRankType value);

  // optional int32 Offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampRankGetCampRankReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional int32 Limit = 3;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCampRankGetCampRankReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TCampRankGetCampRankReq)
 private:
  inline void set_has_camptype();
  inline void clear_has_camptype();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int camptype_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 limit_;
  friend void  protobuf_AddDesc_net_2fCampRank_2eproto();
  friend void protobuf_AssignDesc_net_2fCampRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampRank_2eproto();

  void InitAsDefaultInstance();
  static TCampRankGetCampRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampRankGetCampRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampRankGetCampRankRsp : public ::google::protobuf::Message {
 public:
  TCampRankGetCampRankRsp();
  virtual ~TCampRankGetCampRankRsp();

  TCampRankGetCampRankRsp(const TCampRankGetCampRankRsp& from);

  inline TCampRankGetCampRankRsp& operator=(const TCampRankGetCampRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampRankGetCampRankRsp& default_instance();

  void Swap(TCampRankGetCampRankRsp* other);

  // implements Message ----------------------------------------------

  TCampRankGetCampRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampRankGetCampRankRsp& from);
  void MergeFrom(const TCampRankGetCampRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCampRankRankItem RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampRankGetCampRankRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCampRankRankItem& rankarr(int index) const;
  inline ::pb::TCampRankRankItem* mutable_rankarr(int index);
  inline ::pb::TCampRankRankItem* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCampRankRankItem >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCampRankRankItem >*
      mutable_rankarr();

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampRankGetCampRankRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TCampRankGetCampRankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCampRankRankItem > rankarr_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fCampRank_2eproto();
  friend void protobuf_AssignDesc_net_2fCampRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampRank_2eproto();

  void InitAsDefaultInstance();
  static TCampRankGetCampRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampRankGetHeroRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampRankGetHeroRankReq : public ::google::protobuf::Message {
 public:
  TCampRankGetHeroRankReq();
  virtual ~TCampRankGetHeroRankReq();

  TCampRankGetHeroRankReq(const TCampRankGetHeroRankReq& from);

  inline TCampRankGetHeroRankReq& operator=(const TCampRankGetHeroRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampRankGetHeroRankReq& default_instance();

  void Swap(TCampRankGetHeroRankReq* other);

  // implements Message ----------------------------------------------

  TCampRankGetHeroRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampRankGetHeroRankReq& from);
  void MergeFrom(const TCampRankGetHeroRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 HeroModelId = 1;
  inline bool has_heromodelid() const;
  inline void clear_heromodelid();
  static const int kHeroModelIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampRankGetHeroRankReq</name>
  	<Function>
  		<name>heromodelid</name>
  		<replaceName>HeroModelId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_heromodelid</name>
  		<replaceName>HeroModelId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_heromodelid</name>
  		<replaceName>HeroModelId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 heromodelid() const;
  inline void set_heromodelid(::google::protobuf::int32 value);

  // optional int32 Offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampRankGetHeroRankReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional int32 Limit = 3;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCampRankGetHeroRankReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TCampRankGetHeroRankReq)
 private:
  inline void set_has_heromodelid();
  inline void clear_has_heromodelid();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 heromodelid_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 limit_;
  friend void  protobuf_AddDesc_net_2fCampRank_2eproto();
  friend void protobuf_AssignDesc_net_2fCampRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampRank_2eproto();

  void InitAsDefaultInstance();
  static TCampRankGetHeroRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampRankGetHeroRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampRankGetHeroRankRsp : public ::google::protobuf::Message {
 public:
  TCampRankGetHeroRankRsp();
  virtual ~TCampRankGetHeroRankRsp();

  TCampRankGetHeroRankRsp(const TCampRankGetHeroRankRsp& from);

  inline TCampRankGetHeroRankRsp& operator=(const TCampRankGetHeroRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampRankGetHeroRankRsp& default_instance();

  void Swap(TCampRankGetHeroRankRsp* other);

  // implements Message ----------------------------------------------

  TCampRankGetHeroRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampRankGetHeroRankRsp& from);
  void MergeFrom(const TCampRankGetHeroRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCampRankHeroRankItem RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampRankGetHeroRankRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCampRankHeroRankItem& rankarr(int index) const;
  inline ::pb::TCampRankHeroRankItem* mutable_rankarr(int index);
  inline ::pb::TCampRankHeroRankItem* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCampRankHeroRankItem >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCampRankHeroRankItem >*
      mutable_rankarr();

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampRankGetHeroRankRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TCampRankGetHeroRankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCampRankHeroRankItem > rankarr_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fCampRank_2eproto();
  friend void protobuf_AssignDesc_net_2fCampRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampRank_2eproto();

  void InitAsDefaultInstance();
  static TCampRankGetHeroRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampRankGetHeroAppearReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampRankGetHeroAppearReq : public ::google::protobuf::Message {
 public:
  TCampRankGetHeroAppearReq();
  virtual ~TCampRankGetHeroAppearReq();

  TCampRankGetHeroAppearReq(const TCampRankGetHeroAppearReq& from);

  inline TCampRankGetHeroAppearReq& operator=(const TCampRankGetHeroAppearReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampRankGetHeroAppearReq& default_instance();

  void Swap(TCampRankGetHeroAppearReq* other);

  // implements Message ----------------------------------------------

  TCampRankGetHeroAppearReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampRankGetHeroAppearReq& from);
  void MergeFrom(const TCampRankGetHeroAppearReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ECampRankType CampType = 1;
  inline bool has_camptype() const;
  inline void clear_camptype();
  static const int kCampTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampRankGetHeroAppearReq</name>
  	<Function>
  		<name>camptype</name>
  		<replaceName>CampType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_camptype</name>
  		<replaceName>CampType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_camptype</name>
  		<replaceName>CampType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECampRankType camptype() const;
  inline void set_camptype(::pb::ECampRankType value);

  // @@protoc_insertion_point(class_scope:pb.TCampRankGetHeroAppearReq)
 private:
  inline void set_has_camptype();
  inline void clear_has_camptype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int camptype_;
  friend void  protobuf_AddDesc_net_2fCampRank_2eproto();
  friend void protobuf_AssignDesc_net_2fCampRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampRank_2eproto();

  void InitAsDefaultInstance();
  static TCampRankGetHeroAppearReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampRankGetHeroAppearRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampRankGetHeroAppearRsp : public ::google::protobuf::Message {
 public:
  TCampRankGetHeroAppearRsp();
  virtual ~TCampRankGetHeroAppearRsp();

  TCampRankGetHeroAppearRsp(const TCampRankGetHeroAppearRsp& from);

  inline TCampRankGetHeroAppearRsp& operator=(const TCampRankGetHeroAppearRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampRankGetHeroAppearRsp& default_instance();

  void Swap(TCampRankGetHeroAppearRsp* other);

  // implements Message ----------------------------------------------

  TCampRankGetHeroAppearRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampRankGetHeroAppearRsp& from);
  void MergeFrom(const TCampRankGetHeroAppearRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ECampRankType CampType = 1;
  inline bool has_camptype() const;
  inline void clear_camptype();
  static const int kCampTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampRankGetHeroAppearRsp</name>
  	<Function>
  		<name>camptype</name>
  		<replaceName>CampType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_camptype</name>
  		<replaceName>CampType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_camptype</name>
  		<replaceName>CampType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECampRankType camptype() const;
  inline void set_camptype(::pb::ECampRankType value);

  // repeated uint32 ModelIdArr = 2;
  inline int modelidarr_size() const;
  inline void clear_modelidarr();
  static const int kModelIdArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampRankGetHeroAppearRsp</name>
  	<Function>
  		<name>modelidarr</name>
  		<replaceName>ModelIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_modelidarr</name>
  		<replaceName>ModelIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_modelidarr</name>
  		<replaceName>ModelIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_modelidarr</name>
  		<replaceName>ModelIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>modelidarr_size</name>
  		<replaceName>ModelIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 modelidarr(int index) const;
  inline void set_modelidarr(int index, ::google::protobuf::uint32 value);
  inline void add_modelidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      modelidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_modelidarr();

  // @@protoc_insertion_point(class_scope:pb.TCampRankGetHeroAppearRsp)
 private:
  inline void set_has_camptype();
  inline void clear_has_camptype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > modelidarr_;
  int camptype_;
  friend void  protobuf_AddDesc_net_2fCampRank_2eproto();
  friend void protobuf_AssignDesc_net_2fCampRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampRank_2eproto();

  void InitAsDefaultInstance();
  static TCampRankGetHeroAppearRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TcampRankCampRankFirst</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TcampRankCampRankFirst : public ::google::protobuf::Message {
 public:
  TcampRankCampRankFirst();
  virtual ~TcampRankCampRankFirst();

  TcampRankCampRankFirst(const TcampRankCampRankFirst& from);

  inline TcampRankCampRankFirst& operator=(const TcampRankCampRankFirst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TcampRankCampRankFirst& default_instance();

  void Swap(TcampRankCampRankFirst* other);

  // implements Message ----------------------------------------------

  TcampRankCampRankFirst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TcampRankCampRankFirst& from);
  void MergeFrom(const TcampRankCampRankFirst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ECampRankType CampType = 1;
  inline bool has_camptype() const;
  inline void clear_camptype();
  static const int kCampTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TcampRankCampRankFirst</name>
  	<Function>
  		<name>camptype</name>
  		<replaceName>CampType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_camptype</name>
  		<replaceName>CampType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_camptype</name>
  		<replaceName>CampType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECampRankType camptype() const;
  inline void set_camptype(::pb::ECampRankType value);

  // optional .pb.TCampRankRankItem RankInfo = 2;
  inline bool has_rankinfo() const;
  inline void clear_rankinfo();
  static const int kRankInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TcampRankCampRankFirst</name>
  	<Function>
  		<name>rankinfo</name>
  		<replaceName>RankInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rankinfo</name>
  		<replaceName>RankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_rankinfo</name>
  		<replaceName>RankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankinfo</name>
  		<replaceName>RankInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCampRankRankItem& rankinfo() const;
  inline ::pb::TCampRankRankItem* mutable_rankinfo();
  inline ::pb::TCampRankRankItem* release_rankinfo();
  inline void set_allocated_rankinfo(::pb::TCampRankRankItem* rankinfo);

  // @@protoc_insertion_point(class_scope:pb.TcampRankCampRankFirst)
 private:
  inline void set_has_camptype();
  inline void clear_has_camptype();
  inline void set_has_rankinfo();
  inline void clear_has_rankinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TCampRankRankItem* rankinfo_;
  int camptype_;
  friend void  protobuf_AddDesc_net_2fCampRank_2eproto();
  friend void protobuf_AssignDesc_net_2fCampRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampRank_2eproto();

  void InitAsDefaultInstance();
  static TcampRankCampRankFirst* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampRankGetCampRankFirstRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampRankGetCampRankFirstRsp : public ::google::protobuf::Message {
 public:
  TCampRankGetCampRankFirstRsp();
  virtual ~TCampRankGetCampRankFirstRsp();

  TCampRankGetCampRankFirstRsp(const TCampRankGetCampRankFirstRsp& from);

  inline TCampRankGetCampRankFirstRsp& operator=(const TCampRankGetCampRankFirstRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampRankGetCampRankFirstRsp& default_instance();

  void Swap(TCampRankGetCampRankFirstRsp* other);

  // implements Message ----------------------------------------------

  TCampRankGetCampRankFirstRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampRankGetCampRankFirstRsp& from);
  void MergeFrom(const TCampRankGetCampRankFirstRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TcampRankCampRankFirst RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampRankGetCampRankFirstRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TcampRankCampRankFirst& rankarr(int index) const;
  inline ::pb::TcampRankCampRankFirst* mutable_rankarr(int index);
  inline ::pb::TcampRankCampRankFirst* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TcampRankCampRankFirst >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TcampRankCampRankFirst >*
      mutable_rankarr();

  // @@protoc_insertion_point(class_scope:pb.TCampRankGetCampRankFirstRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TcampRankCampRankFirst > rankarr_;
  friend void  protobuf_AddDesc_net_2fCampRank_2eproto();
  friend void protobuf_AssignDesc_net_2fCampRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampRank_2eproto();

  void InitAsDefaultInstance();
  static TCampRankGetCampRankFirstRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampRankHeroRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampRankHeroRankInfo : public ::google::protobuf::Message {
 public:
  TCampRankHeroRankInfo();
  virtual ~TCampRankHeroRankInfo();

  TCampRankHeroRankInfo(const TCampRankHeroRankInfo& from);

  inline TCampRankHeroRankInfo& operator=(const TCampRankHeroRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampRankHeroRankInfo& default_instance();

  void Swap(TCampRankHeroRankInfo* other);

  // implements Message ----------------------------------------------

  TCampRankHeroRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampRankHeroRankInfo& from);
  void MergeFrom(const TCampRankHeroRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampRankHeroRankInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional int32 RankIdx = 2;
  inline bool has_rankidx() const;
  inline void clear_rankidx();
  static const int kRankIdxFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampRankHeroRankInfo</name>
  	<Function>
  		<name>rankidx</name>
  		<replaceName>RankIdx</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rankidx</name>
  		<replaceName>RankIdx</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankidx</name>
  		<replaceName>RankIdx</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 rankidx() const;
  inline void set_rankidx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TCampRankHeroRankInfo)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_rankidx();
  inline void clear_has_rankidx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::int32 rankidx_;
  friend void  protobuf_AddDesc_net_2fCampRank_2eproto();
  friend void protobuf_AssignDesc_net_2fCampRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampRank_2eproto();

  void InitAsDefaultInstance();
  static TCampRankHeroRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampRankGetSelfRankInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampRankGetSelfRankInfoRsp : public ::google::protobuf::Message {
 public:
  TCampRankGetSelfRankInfoRsp();
  virtual ~TCampRankGetSelfRankInfoRsp();

  TCampRankGetSelfRankInfoRsp(const TCampRankGetSelfRankInfoRsp& from);

  inline TCampRankGetSelfRankInfoRsp& operator=(const TCampRankGetSelfRankInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampRankGetSelfRankInfoRsp& default_instance();

  void Swap(TCampRankGetSelfRankInfoRsp* other);

  // implements Message ----------------------------------------------

  TCampRankGetSelfRankInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampRankGetSelfRankInfoRsp& from);
  void MergeFrom(const TCampRankGetSelfRankInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCampRankHeroRankInfo HeroRankArr = 1;
  inline int herorankarr_size() const;
  inline void clear_herorankarr();
  static const int kHeroRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampRankGetSelfRankInfoRsp</name>
  	<Function>
  		<name>herorankarr</name>
  		<replaceName>HeroRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_herorankarr</name>
  		<replaceName>HeroRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_herorankarr</name>
  		<replaceName>HeroRankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_herorankarr</name>
  		<replaceName>HeroRankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>herorankarr_size</name>
  		<replaceName>HeroRankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCampRankHeroRankInfo& herorankarr(int index) const;
  inline ::pb::TCampRankHeroRankInfo* mutable_herorankarr(int index);
  inline ::pb::TCampRankHeroRankInfo* add_herorankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCampRankHeroRankInfo >&
      herorankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCampRankHeroRankInfo >*
      mutable_herorankarr();

  // @@protoc_insertion_point(class_scope:pb.TCampRankGetSelfRankInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCampRankHeroRankInfo > herorankarr_;
  friend void  protobuf_AddDesc_net_2fCampRank_2eproto();
  friend void protobuf_AssignDesc_net_2fCampRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampRank_2eproto();

  void InitAsDefaultInstance();
  static TCampRankGetSelfRankInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampRankSelfRankInfoPush</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampRankSelfRankInfoPush : public ::google::protobuf::Message {
 public:
  TCampRankSelfRankInfoPush();
  virtual ~TCampRankSelfRankInfoPush();

  TCampRankSelfRankInfoPush(const TCampRankSelfRankInfoPush& from);

  inline TCampRankSelfRankInfoPush& operator=(const TCampRankSelfRankInfoPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampRankSelfRankInfoPush& default_instance();

  void Swap(TCampRankSelfRankInfoPush* other);

  // implements Message ----------------------------------------------

  TCampRankSelfRankInfoPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampRankSelfRankInfoPush& from);
  void MergeFrom(const TCampRankSelfRankInfoPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCampRankHeroRankInfo HeroRankArr = 1;
  inline int herorankarr_size() const;
  inline void clear_herorankarr();
  static const int kHeroRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampRankSelfRankInfoPush</name>
  	<Function>
  		<name>herorankarr</name>
  		<replaceName>HeroRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_herorankarr</name>
  		<replaceName>HeroRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_herorankarr</name>
  		<replaceName>HeroRankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_herorankarr</name>
  		<replaceName>HeroRankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>herorankarr_size</name>
  		<replaceName>HeroRankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCampRankHeroRankInfo& herorankarr(int index) const;
  inline ::pb::TCampRankHeroRankInfo* mutable_herorankarr(int index);
  inline ::pb::TCampRankHeroRankInfo* add_herorankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCampRankHeroRankInfo >&
      herorankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCampRankHeroRankInfo >*
      mutable_herorankarr();

  // @@protoc_insertion_point(class_scope:pb.TCampRankSelfRankInfoPush)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCampRankHeroRankInfo > herorankarr_;
  friend void  protobuf_AddDesc_net_2fCampRank_2eproto();
  friend void protobuf_AssignDesc_net_2fCampRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampRank_2eproto();

  void InitAsDefaultInstance();
  static TCampRankSelfRankInfoPush* default_instance_;
};
// ===================================================================


// ===================================================================

// TCampRankRankItem

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TCampRankRankItem::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampRankRankItem::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampRankRankItem::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampRankRankItem::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TCampRankRankItem::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankRankItem.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TCampRankRankItem::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCampRankRankItem.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TCampRankRankItem::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TCampRankRankItem::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCampRankRankItem.UserInfo)
}

// optional uint64 FightForce = 2;
inline bool TCampRankRankItem::has_fightforce() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCampRankRankItem::set_has_fightforce() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCampRankRankItem::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCampRankRankItem::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TCampRankRankItem::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankRankItem.FightForce)
  return fightforce_;
}
inline void TCampRankRankItem::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankRankItem.FightForce)
}

// optional uint64 ChangeTime = 3;
inline bool TCampRankRankItem::has_changetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCampRankRankItem::set_has_changetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCampRankRankItem::clear_has_changetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCampRankRankItem::clear_changetime() {
  changetime_ = GOOGLE_ULONGLONG(0);
  clear_has_changetime();
}
inline ::google::protobuf::uint64 TCampRankRankItem::changetime() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankRankItem.ChangeTime)
  return changetime_;
}
inline void TCampRankRankItem::set_changetime(::google::protobuf::uint64 value) {
  set_has_changetime();
  changetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankRankItem.ChangeTime)
}

// -------------------------------------------------------------------

// TCampRankHeroRankItem

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TCampRankHeroRankItem::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampRankHeroRankItem::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampRankHeroRankItem::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampRankHeroRankItem::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TCampRankHeroRankItem::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankHeroRankItem.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TCampRankHeroRankItem::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCampRankHeroRankItem.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TCampRankHeroRankItem::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TCampRankHeroRankItem::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCampRankHeroRankItem.UserInfo)
}

// optional uint64 FightForce = 2;
inline bool TCampRankHeroRankItem::has_fightforce() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCampRankHeroRankItem::set_has_fightforce() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCampRankHeroRankItem::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCampRankHeroRankItem::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TCampRankHeroRankItem::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankHeroRankItem.FightForce)
  return fightforce_;
}
inline void TCampRankHeroRankItem::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankHeroRankItem.FightForce)
}

// optional uint64 ChangeTime = 3;
inline bool TCampRankHeroRankItem::has_changetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCampRankHeroRankItem::set_has_changetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCampRankHeroRankItem::clear_has_changetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCampRankHeroRankItem::clear_changetime() {
  changetime_ = GOOGLE_ULONGLONG(0);
  clear_has_changetime();
}
inline ::google::protobuf::uint64 TCampRankHeroRankItem::changetime() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankHeroRankItem.ChangeTime)
  return changetime_;
}
inline void TCampRankHeroRankItem::set_changetime(::google::protobuf::uint64 value) {
  set_has_changetime();
  changetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankHeroRankItem.ChangeTime)
}

// optional uint32 Htid = 4;
inline bool TCampRankHeroRankItem::has_htid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCampRankHeroRankItem::set_has_htid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCampRankHeroRankItem::clear_has_htid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCampRankHeroRankItem::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TCampRankHeroRankItem::htid() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankHeroRankItem.Htid)
  return htid_;
}
inline void TCampRankHeroRankItem::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankHeroRankItem.Htid)
}

// optional uint32 HeroLv = 5;
inline bool TCampRankHeroRankItem::has_herolv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCampRankHeroRankItem::set_has_herolv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCampRankHeroRankItem::clear_has_herolv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCampRankHeroRankItem::clear_herolv() {
  herolv_ = 0u;
  clear_has_herolv();
}
inline ::google::protobuf::uint32 TCampRankHeroRankItem::herolv() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankHeroRankItem.HeroLv)
  return herolv_;
}
inline void TCampRankHeroRankItem::set_herolv(::google::protobuf::uint32 value) {
  set_has_herolv();
  herolv_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankHeroRankItem.HeroLv)
}

// optional uint32 HeroStarLv = 6;
inline bool TCampRankHeroRankItem::has_herostarlv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCampRankHeroRankItem::set_has_herostarlv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCampRankHeroRankItem::clear_has_herostarlv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCampRankHeroRankItem::clear_herostarlv() {
  herostarlv_ = 0u;
  clear_has_herostarlv();
}
inline ::google::protobuf::uint32 TCampRankHeroRankItem::herostarlv() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankHeroRankItem.HeroStarLv)
  return herostarlv_;
}
inline void TCampRankHeroRankItem::set_herostarlv(::google::protobuf::uint32 value) {
  set_has_herostarlv();
  herostarlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankHeroRankItem.HeroStarLv)
}

// optional uint32 HeroAdvLv = 7;
inline bool TCampRankHeroRankItem::has_heroadvlv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCampRankHeroRankItem::set_has_heroadvlv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCampRankHeroRankItem::clear_has_heroadvlv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCampRankHeroRankItem::clear_heroadvlv() {
  heroadvlv_ = 0u;
  clear_has_heroadvlv();
}
inline ::google::protobuf::uint32 TCampRankHeroRankItem::heroadvlv() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankHeroRankItem.HeroAdvLv)
  return heroadvlv_;
}
inline void TCampRankHeroRankItem::set_heroadvlv(::google::protobuf::uint32 value) {
  set_has_heroadvlv();
  heroadvlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankHeroRankItem.HeroAdvLv)
}

// optional uint32 HeroTitle = 8;
inline bool TCampRankHeroRankItem::has_herotitle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCampRankHeroRankItem::set_has_herotitle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCampRankHeroRankItem::clear_has_herotitle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCampRankHeroRankItem::clear_herotitle() {
  herotitle_ = 0u;
  clear_has_herotitle();
}
inline ::google::protobuf::uint32 TCampRankHeroRankItem::herotitle() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankHeroRankItem.HeroTitle)
  return herotitle_;
}
inline void TCampRankHeroRankItem::set_herotitle(::google::protobuf::uint32 value) {
  set_has_herotitle();
  herotitle_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankHeroRankItem.HeroTitle)
}

// -------------------------------------------------------------------

// TCampRankGetCampRankReq

// optional .pb.ECampRankType CampType = 1;
inline bool TCampRankGetCampRankReq::has_camptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampRankGetCampRankReq::set_has_camptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampRankGetCampRankReq::clear_has_camptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampRankGetCampRankReq::clear_camptype() {
  camptype_ = 1;
  clear_has_camptype();
}
inline ::pb::ECampRankType TCampRankGetCampRankReq::camptype() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankGetCampRankReq.CampType)
  return static_cast< ::pb::ECampRankType >(camptype_);
}
inline void TCampRankGetCampRankReq::set_camptype(::pb::ECampRankType value) {
  assert(::pb::ECampRankType_IsValid(value));
  set_has_camptype();
  camptype_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankGetCampRankReq.CampType)
}

// optional int32 Offset = 2;
inline bool TCampRankGetCampRankReq::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCampRankGetCampRankReq::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCampRankGetCampRankReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCampRankGetCampRankReq::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 TCampRankGetCampRankReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankGetCampRankReq.Offset)
  return offset_;
}
inline void TCampRankGetCampRankReq::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankGetCampRankReq.Offset)
}

// optional int32 Limit = 3;
inline bool TCampRankGetCampRankReq::has_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCampRankGetCampRankReq::set_has_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCampRankGetCampRankReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCampRankGetCampRankReq::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 TCampRankGetCampRankReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankGetCampRankReq.Limit)
  return limit_;
}
inline void TCampRankGetCampRankReq::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankGetCampRankReq.Limit)
}

// -------------------------------------------------------------------

// TCampRankGetCampRankRsp

// repeated .pb.TCampRankRankItem RankArr = 1;
inline int TCampRankGetCampRankRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TCampRankGetCampRankRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TCampRankRankItem& TCampRankGetCampRankRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCampRankGetCampRankRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TCampRankRankItem* TCampRankGetCampRankRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCampRankGetCampRankRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TCampRankRankItem* TCampRankGetCampRankRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TCampRankGetCampRankRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCampRankRankItem >&
TCampRankGetCampRankRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TCampRankGetCampRankRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCampRankRankItem >*
TCampRankGetCampRankRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCampRankGetCampRankRsp.RankArr)
  return &rankarr_;
}

// optional int32 MyRank = 2;
inline bool TCampRankGetCampRankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCampRankGetCampRankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCampRankGetCampRankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCampRankGetCampRankRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TCampRankGetCampRankRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankGetCampRankRsp.MyRank)
  return myrank_;
}
inline void TCampRankGetCampRankRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankGetCampRankRsp.MyRank)
}

// -------------------------------------------------------------------

// TCampRankGetHeroRankReq

// optional int32 HeroModelId = 1;
inline bool TCampRankGetHeroRankReq::has_heromodelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampRankGetHeroRankReq::set_has_heromodelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampRankGetHeroRankReq::clear_has_heromodelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampRankGetHeroRankReq::clear_heromodelid() {
  heromodelid_ = 0;
  clear_has_heromodelid();
}
inline ::google::protobuf::int32 TCampRankGetHeroRankReq::heromodelid() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankGetHeroRankReq.HeroModelId)
  return heromodelid_;
}
inline void TCampRankGetHeroRankReq::set_heromodelid(::google::protobuf::int32 value) {
  set_has_heromodelid();
  heromodelid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankGetHeroRankReq.HeroModelId)
}

// optional int32 Offset = 2;
inline bool TCampRankGetHeroRankReq::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCampRankGetHeroRankReq::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCampRankGetHeroRankReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCampRankGetHeroRankReq::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 TCampRankGetHeroRankReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankGetHeroRankReq.Offset)
  return offset_;
}
inline void TCampRankGetHeroRankReq::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankGetHeroRankReq.Offset)
}

// optional int32 Limit = 3;
inline bool TCampRankGetHeroRankReq::has_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCampRankGetHeroRankReq::set_has_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCampRankGetHeroRankReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCampRankGetHeroRankReq::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 TCampRankGetHeroRankReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankGetHeroRankReq.Limit)
  return limit_;
}
inline void TCampRankGetHeroRankReq::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankGetHeroRankReq.Limit)
}

// -------------------------------------------------------------------

// TCampRankGetHeroRankRsp

// repeated .pb.TCampRankHeroRankItem RankArr = 1;
inline int TCampRankGetHeroRankRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TCampRankGetHeroRankRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TCampRankHeroRankItem& TCampRankGetHeroRankRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCampRankGetHeroRankRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TCampRankHeroRankItem* TCampRankGetHeroRankRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCampRankGetHeroRankRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TCampRankHeroRankItem* TCampRankGetHeroRankRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TCampRankGetHeroRankRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCampRankHeroRankItem >&
TCampRankGetHeroRankRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TCampRankGetHeroRankRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCampRankHeroRankItem >*
TCampRankGetHeroRankRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCampRankGetHeroRankRsp.RankArr)
  return &rankarr_;
}

// optional int32 MyRank = 2;
inline bool TCampRankGetHeroRankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCampRankGetHeroRankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCampRankGetHeroRankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCampRankGetHeroRankRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TCampRankGetHeroRankRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankGetHeroRankRsp.MyRank)
  return myrank_;
}
inline void TCampRankGetHeroRankRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankGetHeroRankRsp.MyRank)
}

// -------------------------------------------------------------------

// TCampRankGetHeroAppearReq

// optional .pb.ECampRankType CampType = 1;
inline bool TCampRankGetHeroAppearReq::has_camptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampRankGetHeroAppearReq::set_has_camptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampRankGetHeroAppearReq::clear_has_camptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampRankGetHeroAppearReq::clear_camptype() {
  camptype_ = 1;
  clear_has_camptype();
}
inline ::pb::ECampRankType TCampRankGetHeroAppearReq::camptype() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankGetHeroAppearReq.CampType)
  return static_cast< ::pb::ECampRankType >(camptype_);
}
inline void TCampRankGetHeroAppearReq::set_camptype(::pb::ECampRankType value) {
  assert(::pb::ECampRankType_IsValid(value));
  set_has_camptype();
  camptype_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankGetHeroAppearReq.CampType)
}

// -------------------------------------------------------------------

// TCampRankGetHeroAppearRsp

// optional .pb.ECampRankType CampType = 1;
inline bool TCampRankGetHeroAppearRsp::has_camptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampRankGetHeroAppearRsp::set_has_camptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampRankGetHeroAppearRsp::clear_has_camptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampRankGetHeroAppearRsp::clear_camptype() {
  camptype_ = 1;
  clear_has_camptype();
}
inline ::pb::ECampRankType TCampRankGetHeroAppearRsp::camptype() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankGetHeroAppearRsp.CampType)
  return static_cast< ::pb::ECampRankType >(camptype_);
}
inline void TCampRankGetHeroAppearRsp::set_camptype(::pb::ECampRankType value) {
  assert(::pb::ECampRankType_IsValid(value));
  set_has_camptype();
  camptype_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankGetHeroAppearRsp.CampType)
}

// repeated uint32 ModelIdArr = 2;
inline int TCampRankGetHeroAppearRsp::modelidarr_size() const {
  return modelidarr_.size();
}
inline void TCampRankGetHeroAppearRsp::clear_modelidarr() {
  modelidarr_.Clear();
}
inline ::google::protobuf::uint32 TCampRankGetHeroAppearRsp::modelidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCampRankGetHeroAppearRsp.ModelIdArr)
  return modelidarr_.Get(index);
}
inline void TCampRankGetHeroAppearRsp::set_modelidarr(int index, ::google::protobuf::uint32 value) {
  modelidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCampRankGetHeroAppearRsp.ModelIdArr)
}
inline void TCampRankGetHeroAppearRsp::add_modelidarr(::google::protobuf::uint32 value) {
  modelidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCampRankGetHeroAppearRsp.ModelIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TCampRankGetHeroAppearRsp::modelidarr() const {
  // @@protoc_insertion_point(field_list:pb.TCampRankGetHeroAppearRsp.ModelIdArr)
  return modelidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TCampRankGetHeroAppearRsp::mutable_modelidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCampRankGetHeroAppearRsp.ModelIdArr)
  return &modelidarr_;
}

// -------------------------------------------------------------------

// TcampRankCampRankFirst

// optional .pb.ECampRankType CampType = 1;
inline bool TcampRankCampRankFirst::has_camptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TcampRankCampRankFirst::set_has_camptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TcampRankCampRankFirst::clear_has_camptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TcampRankCampRankFirst::clear_camptype() {
  camptype_ = 1;
  clear_has_camptype();
}
inline ::pb::ECampRankType TcampRankCampRankFirst::camptype() const {
  // @@protoc_insertion_point(field_get:pb.TcampRankCampRankFirst.CampType)
  return static_cast< ::pb::ECampRankType >(camptype_);
}
inline void TcampRankCampRankFirst::set_camptype(::pb::ECampRankType value) {
  assert(::pb::ECampRankType_IsValid(value));
  set_has_camptype();
  camptype_ = value;
  // @@protoc_insertion_point(field_set:pb.TcampRankCampRankFirst.CampType)
}

// optional .pb.TCampRankRankItem RankInfo = 2;
inline bool TcampRankCampRankFirst::has_rankinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TcampRankCampRankFirst::set_has_rankinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TcampRankCampRankFirst::clear_has_rankinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TcampRankCampRankFirst::clear_rankinfo() {
  if (rankinfo_ != NULL) rankinfo_->::pb::TCampRankRankItem::Clear();
  clear_has_rankinfo();
}
inline const ::pb::TCampRankRankItem& TcampRankCampRankFirst::rankinfo() const {
  // @@protoc_insertion_point(field_get:pb.TcampRankCampRankFirst.RankInfo)
  return rankinfo_ != NULL ? *rankinfo_ : *default_instance_->rankinfo_;
}
inline ::pb::TCampRankRankItem* TcampRankCampRankFirst::mutable_rankinfo() {
  set_has_rankinfo();
  if (rankinfo_ == NULL) rankinfo_ = new ::pb::TCampRankRankItem;
  // @@protoc_insertion_point(field_mutable:pb.TcampRankCampRankFirst.RankInfo)
  return rankinfo_;
}
inline ::pb::TCampRankRankItem* TcampRankCampRankFirst::release_rankinfo() {
  clear_has_rankinfo();
  ::pb::TCampRankRankItem* temp = rankinfo_;
  rankinfo_ = NULL;
  return temp;
}
inline void TcampRankCampRankFirst::set_allocated_rankinfo(::pb::TCampRankRankItem* rankinfo) {
  delete rankinfo_;
  rankinfo_ = rankinfo;
  if (rankinfo) {
    set_has_rankinfo();
  } else {
    clear_has_rankinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TcampRankCampRankFirst.RankInfo)
}

// -------------------------------------------------------------------

// TCampRankGetCampRankFirstRsp

// repeated .pb.TcampRankCampRankFirst RankArr = 1;
inline int TCampRankGetCampRankFirstRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TCampRankGetCampRankFirstRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TcampRankCampRankFirst& TCampRankGetCampRankFirstRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCampRankGetCampRankFirstRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TcampRankCampRankFirst* TCampRankGetCampRankFirstRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCampRankGetCampRankFirstRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TcampRankCampRankFirst* TCampRankGetCampRankFirstRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TCampRankGetCampRankFirstRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TcampRankCampRankFirst >&
TCampRankGetCampRankFirstRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TCampRankGetCampRankFirstRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TcampRankCampRankFirst >*
TCampRankGetCampRankFirstRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCampRankGetCampRankFirstRsp.RankArr)
  return &rankarr_;
}

// -------------------------------------------------------------------

// TCampRankHeroRankInfo

// optional uint32 hid = 1;
inline bool TCampRankHeroRankInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampRankHeroRankInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampRankHeroRankInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampRankHeroRankInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TCampRankHeroRankInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankHeroRankInfo.hid)
  return hid_;
}
inline void TCampRankHeroRankInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankHeroRankInfo.hid)
}

// optional int32 RankIdx = 2;
inline bool TCampRankHeroRankInfo::has_rankidx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCampRankHeroRankInfo::set_has_rankidx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCampRankHeroRankInfo::clear_has_rankidx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCampRankHeroRankInfo::clear_rankidx() {
  rankidx_ = 0;
  clear_has_rankidx();
}
inline ::google::protobuf::int32 TCampRankHeroRankInfo::rankidx() const {
  // @@protoc_insertion_point(field_get:pb.TCampRankHeroRankInfo.RankIdx)
  return rankidx_;
}
inline void TCampRankHeroRankInfo::set_rankidx(::google::protobuf::int32 value) {
  set_has_rankidx();
  rankidx_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampRankHeroRankInfo.RankIdx)
}

// -------------------------------------------------------------------

// TCampRankGetSelfRankInfoRsp

// repeated .pb.TCampRankHeroRankInfo HeroRankArr = 1;
inline int TCampRankGetSelfRankInfoRsp::herorankarr_size() const {
  return herorankarr_.size();
}
inline void TCampRankGetSelfRankInfoRsp::clear_herorankarr() {
  herorankarr_.Clear();
}
inline const ::pb::TCampRankHeroRankInfo& TCampRankGetSelfRankInfoRsp::herorankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCampRankGetSelfRankInfoRsp.HeroRankArr)
  return herorankarr_.Get(index);
}
inline ::pb::TCampRankHeroRankInfo* TCampRankGetSelfRankInfoRsp::mutable_herorankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCampRankGetSelfRankInfoRsp.HeroRankArr)
  return herorankarr_.Mutable(index);
}
inline ::pb::TCampRankHeroRankInfo* TCampRankGetSelfRankInfoRsp::add_herorankarr() {
  // @@protoc_insertion_point(field_add:pb.TCampRankGetSelfRankInfoRsp.HeroRankArr)
  return herorankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCampRankHeroRankInfo >&
TCampRankGetSelfRankInfoRsp::herorankarr() const {
  // @@protoc_insertion_point(field_list:pb.TCampRankGetSelfRankInfoRsp.HeroRankArr)
  return herorankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCampRankHeroRankInfo >*
TCampRankGetSelfRankInfoRsp::mutable_herorankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCampRankGetSelfRankInfoRsp.HeroRankArr)
  return &herorankarr_;
}

// -------------------------------------------------------------------

// TCampRankSelfRankInfoPush

// repeated .pb.TCampRankHeroRankInfo HeroRankArr = 1;
inline int TCampRankSelfRankInfoPush::herorankarr_size() const {
  return herorankarr_.size();
}
inline void TCampRankSelfRankInfoPush::clear_herorankarr() {
  herorankarr_.Clear();
}
inline const ::pb::TCampRankHeroRankInfo& TCampRankSelfRankInfoPush::herorankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCampRankSelfRankInfoPush.HeroRankArr)
  return herorankarr_.Get(index);
}
inline ::pb::TCampRankHeroRankInfo* TCampRankSelfRankInfoPush::mutable_herorankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCampRankSelfRankInfoPush.HeroRankArr)
  return herorankarr_.Mutable(index);
}
inline ::pb::TCampRankHeroRankInfo* TCampRankSelfRankInfoPush::add_herorankarr() {
  // @@protoc_insertion_point(field_add:pb.TCampRankSelfRankInfoPush.HeroRankArr)
  return herorankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCampRankHeroRankInfo >&
TCampRankSelfRankInfoPush::herorankarr() const {
  // @@protoc_insertion_point(field_list:pb.TCampRankSelfRankInfoPush.HeroRankArr)
  return herorankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCampRankHeroRankInfo >*
TCampRankSelfRankInfoPush::mutable_herorankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCampRankSelfRankInfoPush.HeroRankArr)
  return &herorankarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::ECampRankType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ECampRankType>() {
  return ::pb::ECampRankType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fCampRank_2eproto__INCLUDED
