// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Tower.proto

#ifndef PROTOBUF_net_2fTower_2eproto__INCLUDED
#define PROTOBUF_net_2fTower_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
#include "net/Battle.pb.h"
#include "net/CommonReward.pb.h"
#include "net/LocalBattleReport.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fTower_2eproto();
void protobuf_AssignDesc_net_2fTower_2eproto();
void protobuf_ShutdownFile_net_2fTower_2eproto();

class TTowerInfo;
class TTowerHangRewardInfo;
class TTowerGetTowerInfoRsp;
class TTowerEnterChallengeReq;
class TTowerEnterChallengeRsp;
class TTowerReportChallengeReq;
class TTowerSweepReq;
class TTowerSweepRsp;
class TTowerReportChallengeRsp;
class TTowerResetReq;
class TTowerResetRsp;
class TTowerPassedLevelRankItem;
class TTowerPassedLevelRankReq;
class TTowerPassedLevelRankRsp;
class TTowerReportCampSingle;
class TTowerGetReportInfoReq;
class TTowerGetReportInfoRsp;
class TTowerGetHangRewardInfoRsp;
class TTowerReceiveHangRewardRsp;
class TTowerBuyHangRewardRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TTowerInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerInfo : public ::google::protobuf::Message {
 public:
  TTowerInfo();
  virtual ~TTowerInfo();

  TTowerInfo(const TTowerInfo& from);

  inline TTowerInfo& operator=(const TTowerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerInfo& default_instance();

  void Swap(TTowerInfo* other);

  // implements Message ----------------------------------------------

  TTowerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerInfo& from);
  void MergeFrom(const TTowerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CurPassedLayerId = 1;
  inline bool has_curpassedlayerid() const;
  inline void clear_curpassedlayerid();
  static const int kCurPassedLayerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerInfo</name>
  	<Function>
  		<name>curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curpassedlayerid() const;
  inline void set_curpassedlayerid(::google::protobuf::uint32 value);

  // optional uint32 MaxPassedLayerId = 2;
  inline bool has_maxpassedlayerid() const;
  inline void clear_maxpassedlayerid();
  static const int kMaxPassedLayerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerInfo</name>
  	<Function>
  		<name>maxpassedlayerid</name>
  		<replaceName>MaxPassedLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxpassedlayerid</name>
  		<replaceName>MaxPassedLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxpassedlayerid</name>
  		<replaceName>MaxPassedLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxpassedlayerid() const;
  inline void set_maxpassedlayerid(::google::protobuf::uint32 value);

  // optional uint32 UsedResetNum = 3;
  inline bool has_usedresetnum() const;
  inline void clear_usedresetnum();
  static const int kUsedResetNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerInfo</name>
  	<Function>
  		<name>usedresetnum</name>
  		<replaceName>UsedResetNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usedresetnum</name>
  		<replaceName>UsedResetNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usedresetnum</name>
  		<replaceName>UsedResetNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 usedresetnum() const;
  inline void set_usedresetnum(::google::protobuf::uint32 value);

  // optional uint32 HasBuyResetNum = 4;
  inline bool has_hasbuyresetnum() const;
  inline void clear_hasbuyresetnum();
  static const int kHasBuyResetNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTowerInfo</name>
  	<Function>
  		<name>hasbuyresetnum</name>
  		<replaceName>HasBuyResetNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hasbuyresetnum</name>
  		<replaceName>HasBuyResetNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hasbuyresetnum</name>
  		<replaceName>HasBuyResetNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hasbuyresetnum() const;
  inline void set_hasbuyresetnum(::google::protobuf::uint32 value);

  // optional uint32 BanLayerId = 5;
  inline bool has_banlayerid() const;
  inline void clear_banlayerid();
  static const int kBanLayerIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TTowerInfo</name>
  	<Function>
  		<name>banlayerid</name>
  		<replaceName>BanLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_banlayerid</name>
  		<replaceName>BanLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_banlayerid</name>
  		<replaceName>BanLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 banlayerid() const;
  inline void set_banlayerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerInfo)
 private:
  inline void set_has_curpassedlayerid();
  inline void clear_has_curpassedlayerid();
  inline void set_has_maxpassedlayerid();
  inline void clear_has_maxpassedlayerid();
  inline void set_has_usedresetnum();
  inline void clear_has_usedresetnum();
  inline void set_has_hasbuyresetnum();
  inline void clear_has_hasbuyresetnum();
  inline void set_has_banlayerid();
  inline void clear_has_banlayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 curpassedlayerid_;
  ::google::protobuf::uint32 maxpassedlayerid_;
  ::google::protobuf::uint32 usedresetnum_;
  ::google::protobuf::uint32 hasbuyresetnum_;
  ::google::protobuf::uint32 banlayerid_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerHangRewardInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerHangRewardInfo : public ::google::protobuf::Message {
 public:
  TTowerHangRewardInfo();
  virtual ~TTowerHangRewardInfo();

  TTowerHangRewardInfo(const TTowerHangRewardInfo& from);

  inline TTowerHangRewardInfo& operator=(const TTowerHangRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerHangRewardInfo& default_instance();

  void Swap(TTowerHangRewardInfo* other);

  // implements Message ----------------------------------------------

  TTowerHangRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerHangRewardInfo& from);
  void MergeFrom(const TTowerHangRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 HangTime = 1;
  inline bool has_hangtime() const;
  inline void clear_hangtime();
  static const int kHangTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerHangRewardInfo</name>
  	<Function>
  		<name>hangtime</name>
  		<replaceName>HangTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hangtime</name>
  		<replaceName>HangTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hangtime</name>
  		<replaceName>HangTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hangtime() const;
  inline void set_hangtime(::google::protobuf::uint64 value);

  // optional uint64 HangReceiveTime = 2;
  inline bool has_hangreceivetime() const;
  inline void clear_hangreceivetime();
  static const int kHangReceiveTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerHangRewardInfo</name>
  	<Function>
  		<name>hangreceivetime</name>
  		<replaceName>HangReceiveTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hangreceivetime</name>
  		<replaceName>HangReceiveTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hangreceivetime</name>
  		<replaceName>HangReceiveTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hangreceivetime() const;
  inline void set_hangreceivetime(::google::protobuf::uint64 value);

  // repeated .pb.TCommonReward RandomRewardArr = 3;
  inline int randomrewardarr_size() const;
  inline void clear_randomrewardarr();
  static const int kRandomRewardArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerHangRewardInfo</name>
  	<Function>
  		<name>randomrewardarr</name>
  		<replaceName>RandomRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_randomrewardarr</name>
  		<replaceName>RandomRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_randomrewardarr</name>
  		<replaceName>RandomRewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_randomrewardarr</name>
  		<replaceName>RandomRewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>randomrewardarr_size</name>
  		<replaceName>RandomRewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& randomrewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_randomrewardarr(int index);
  inline ::pb::TCommonReward* add_randomrewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      randomrewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_randomrewardarr();

  // @@protoc_insertion_point(class_scope:pb.TTowerHangRewardInfo)
 private:
  inline void set_has_hangtime();
  inline void clear_has_hangtime();
  inline void set_has_hangreceivetime();
  inline void clear_has_hangreceivetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 hangtime_;
  ::google::protobuf::uint64 hangreceivetime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > randomrewardarr_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerHangRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerGetTowerInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerGetTowerInfoRsp : public ::google::protobuf::Message {
 public:
  TTowerGetTowerInfoRsp();
  virtual ~TTowerGetTowerInfoRsp();

  TTowerGetTowerInfoRsp(const TTowerGetTowerInfoRsp& from);

  inline TTowerGetTowerInfoRsp& operator=(const TTowerGetTowerInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerGetTowerInfoRsp& default_instance();

  void Swap(TTowerGetTowerInfoRsp* other);

  // implements Message ----------------------------------------------

  TTowerGetTowerInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerGetTowerInfoRsp& from);
  void MergeFrom(const TTowerGetTowerInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TTowerInfo TowerInfo = 1;
  inline bool has_towerinfo() const;
  inline void clear_towerinfo();
  static const int kTowerInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerGetTowerInfoRsp</name>
  	<Function>
  		<name>towerinfo</name>
  		<replaceName>TowerInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_towerinfo</name>
  		<replaceName>TowerInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_towerinfo</name>
  		<replaceName>TowerInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerinfo</name>
  		<replaceName>TowerInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerInfo& towerinfo() const;
  inline ::pb::TTowerInfo* mutable_towerinfo();
  inline ::pb::TTowerInfo* release_towerinfo();
  inline void set_allocated_towerinfo(::pb::TTowerInfo* towerinfo);

  // optional .pb.TTowerHangRewardInfo HangInfo = 2;
  inline bool has_hanginfo() const;
  inline void clear_hanginfo();
  static const int kHangInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerGetTowerInfoRsp</name>
  	<Function>
  		<name>hanginfo</name>
  		<replaceName>HangInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hanginfo</name>
  		<replaceName>HangInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_hanginfo</name>
  		<replaceName>HangInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hanginfo</name>
  		<replaceName>HangInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerHangRewardInfo& hanginfo() const;
  inline ::pb::TTowerHangRewardInfo* mutable_hanginfo();
  inline ::pb::TTowerHangRewardInfo* release_hanginfo();
  inline void set_allocated_hanginfo(::pb::TTowerHangRewardInfo* hanginfo);

  // optional uint32 BoughtHangRewardNum = 3;
  inline bool has_boughthangrewardnum() const;
  inline void clear_boughthangrewardnum();
  static const int kBoughtHangRewardNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerGetTowerInfoRsp</name>
  	<Function>
  		<name>boughthangrewardnum</name>
  		<replaceName>BoughtHangRewardNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_boughthangrewardnum</name>
  		<replaceName>BoughtHangRewardNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_boughthangrewardnum</name>
  		<replaceName>BoughtHangRewardNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 boughthangrewardnum() const;
  inline void set_boughthangrewardnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerGetTowerInfoRsp)
 private:
  inline void set_has_towerinfo();
  inline void clear_has_towerinfo();
  inline void set_has_hanginfo();
  inline void clear_has_hanginfo();
  inline void set_has_boughthangrewardnum();
  inline void clear_has_boughthangrewardnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TTowerInfo* towerinfo_;
  ::pb::TTowerHangRewardInfo* hanginfo_;
  ::google::protobuf::uint32 boughthangrewardnum_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerGetTowerInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerEnterChallengeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerEnterChallengeReq : public ::google::protobuf::Message {
 public:
  TTowerEnterChallengeReq();
  virtual ~TTowerEnterChallengeReq();

  TTowerEnterChallengeReq(const TTowerEnterChallengeReq& from);

  inline TTowerEnterChallengeReq& operator=(const TTowerEnterChallengeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerEnterChallengeReq& default_instance();

  void Swap(TTowerEnterChallengeReq* other);

  // implements Message ----------------------------------------------

  TTowerEnterChallengeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerEnterChallengeReq& from);
  void MergeFrom(const TTowerEnterChallengeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerId = 1;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerEnterChallengeReq</name>
  	<Function>
  		<name>layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerid() const;
  inline void set_layerid(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerEnterChallengeReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TTowerEnterChallengeReq)
 private:
  inline void set_has_layerid();
  inline void clear_has_layerid();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  ::google::protobuf::uint32 layerid_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerEnterChallengeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerEnterChallengeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerEnterChallengeRsp : public ::google::protobuf::Message {
 public:
  TTowerEnterChallengeRsp();
  virtual ~TTowerEnterChallengeRsp();

  TTowerEnterChallengeRsp(const TTowerEnterChallengeRsp& from);

  inline TTowerEnterChallengeRsp& operator=(const TTowerEnterChallengeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerEnterChallengeRsp& default_instance();

  void Swap(TTowerEnterChallengeRsp* other);

  // implements Message ----------------------------------------------

  TTowerEnterChallengeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerEnterChallengeRsp& from);
  void MergeFrom(const TTowerEnterChallengeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleArgs BattleArgs = 2;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerEnterChallengeRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TTowerEnterChallengeRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleArgs* battleargs_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerEnterChallengeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerReportChallengeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerReportChallengeReq : public ::google::protobuf::Message {
 public:
  TTowerReportChallengeReq();
  virtual ~TTowerReportChallengeReq();

  TTowerReportChallengeReq(const TTowerReportChallengeReq& from);

  inline TTowerReportChallengeReq& operator=(const TTowerReportChallengeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerReportChallengeReq& default_instance();

  void Swap(TTowerReportChallengeReq* other);

  // implements Message ----------------------------------------------

  TTowerReportChallengeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerReportChallengeReq& from);
  void MergeFrom(const TTowerReportChallengeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerId = 1;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerReportChallengeReq</name>
  	<Function>
  		<name>layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerid() const;
  inline void set_layerid(::google::protobuf::uint32 value);

  // optional bool IsSweep = 2;
  inline bool has_issweep() const;
  inline void clear_issweep();
  static const int kIsSweepFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerReportChallengeReq</name>
  	<Function>
  		<name>issweep</name>
  		<replaceName>IsSweep</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_issweep</name>
  		<replaceName>IsSweep</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_issweep</name>
  		<replaceName>IsSweep</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool issweep() const;
  inline void set_issweep(bool value);

  // optional bytes BattleReport = 3;
  inline bool has_battlereport() const;
  inline void clear_battlereport();
  static const int kBattleReportFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerReportChallengeReq</name>
  	<Function>
  		<name>battlereport</name>
  		<replaceName>BattleReport</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlereport</name>
  		<replaceName>BattleReport</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlereport</name>
  		<replaceName>BattleReport</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battlereport() const;
  inline void set_battlereport(const ::std::string& value);
  inline void set_battlereport(const char* value);
  inline void set_battlereport(const void* value, size_t size);
  inline ::std::string* mutable_battlereport();
  inline ::std::string* release_battlereport();
  inline void set_allocated_battlereport(::std::string* battlereport);

  // @@protoc_insertion_point(class_scope:pb.TTowerReportChallengeReq)
 private:
  inline void set_has_layerid();
  inline void clear_has_layerid();
  inline void set_has_issweep();
  inline void clear_has_issweep();
  inline void set_has_battlereport();
  inline void clear_has_battlereport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layerid_;
  bool issweep_;
  ::std::string* battlereport_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerReportChallengeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerSweepReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerSweepReq : public ::google::protobuf::Message {
 public:
  TTowerSweepReq();
  virtual ~TTowerSweepReq();

  TTowerSweepReq(const TTowerSweepReq& from);

  inline TTowerSweepReq& operator=(const TTowerSweepReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerSweepReq& default_instance();

  void Swap(TTowerSweepReq* other);

  // implements Message ----------------------------------------------

  TTowerSweepReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerSweepReq& from);
  void MergeFrom(const TTowerSweepReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 StartLayer = 1;
  inline bool has_startlayer() const;
  inline void clear_startlayer();
  static const int kStartLayerFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerSweepReq</name>
  	<Function>
  		<name>startlayer</name>
  		<replaceName>StartLayer</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_startlayer</name>
  		<replaceName>StartLayer</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_startlayer</name>
  		<replaceName>StartLayer</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 startlayer() const;
  inline void set_startlayer(::google::protobuf::uint32 value);

  // optional uint32 TargetLayer = 2;
  inline bool has_targetlayer() const;
  inline void clear_targetlayer();
  static const int kTargetLayerFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerSweepReq</name>
  	<Function>
  		<name>targetlayer</name>
  		<replaceName>TargetLayer</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetlayer</name>
  		<replaceName>TargetLayer</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetlayer</name>
  		<replaceName>TargetLayer</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetlayer() const;
  inline void set_targetlayer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerSweepReq)
 private:
  inline void set_has_startlayer();
  inline void clear_has_startlayer();
  inline void set_has_targetlayer();
  inline void clear_has_targetlayer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 startlayer_;
  ::google::protobuf::uint32 targetlayer_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerSweepReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerSweepRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerSweepRsp : public ::google::protobuf::Message {
 public:
  TTowerSweepRsp();
  virtual ~TTowerSweepRsp();

  TTowerSweepRsp(const TTowerSweepRsp& from);

  inline TTowerSweepRsp& operator=(const TTowerSweepRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerSweepRsp& default_instance();

  void Swap(TTowerSweepRsp* other);

  // implements Message ----------------------------------------------

  TTowerSweepRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerSweepRsp& from);
  void MergeFrom(const TTowerSweepRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerSweepRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint32 CurPassedLayerId = 2;
  inline bool has_curpassedlayerid() const;
  inline void clear_curpassedlayerid();
  static const int kCurPassedLayerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerSweepRsp</name>
  	<Function>
  		<name>curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curpassedlayerid() const;
  inline void set_curpassedlayerid(::google::protobuf::uint32 value);

  // optional uint32 MaxPassedLayerId = 3;
  inline bool has_maxpassedlayerid() const;
  inline void clear_maxpassedlayerid();
  static const int kMaxPassedLayerIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerSweepRsp</name>
  	<Function>
  		<name>maxpassedlayerid</name>
  		<replaceName>MaxPassedLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxpassedlayerid</name>
  		<replaceName>MaxPassedLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxpassedlayerid</name>
  		<replaceName>MaxPassedLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxpassedlayerid() const;
  inline void set_maxpassedlayerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerSweepRsp)
 private:
  inline void set_has_curpassedlayerid();
  inline void clear_has_curpassedlayerid();
  inline void set_has_maxpassedlayerid();
  inline void clear_has_maxpassedlayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 curpassedlayerid_;
  ::google::protobuf::uint32 maxpassedlayerid_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerSweepRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerReportChallengeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerReportChallengeRsp : public ::google::protobuf::Message {
 public:
  TTowerReportChallengeRsp();
  virtual ~TTowerReportChallengeRsp();

  TTowerReportChallengeRsp(const TTowerReportChallengeRsp& from);

  inline TTowerReportChallengeRsp& operator=(const TTowerReportChallengeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerReportChallengeRsp& default_instance();

  void Swap(TTowerReportChallengeRsp* other);

  // implements Message ----------------------------------------------

  TTowerReportChallengeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerReportChallengeRsp& from);
  void MergeFrom(const TTowerReportChallengeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsWin = 1;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerReportChallengeRsp</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool iswin() const;
  inline void set_iswin(bool value);

  // optional uint32 CurPassedLayerId = 2;
  inline bool has_curpassedlayerid() const;
  inline void clear_curpassedlayerid();
  static const int kCurPassedLayerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerReportChallengeRsp</name>
  	<Function>
  		<name>curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curpassedlayerid() const;
  inline void set_curpassedlayerid(::google::protobuf::uint32 value);

  // optional uint32 MaxPassedLayerId = 3;
  inline bool has_maxpassedlayerid() const;
  inline void clear_maxpassedlayerid();
  static const int kMaxPassedLayerIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerReportChallengeRsp</name>
  	<Function>
  		<name>maxpassedlayerid</name>
  		<replaceName>MaxPassedLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxpassedlayerid</name>
  		<replaceName>MaxPassedLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxpassedlayerid</name>
  		<replaceName>MaxPassedLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxpassedlayerid() const;
  inline void set_maxpassedlayerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerReportChallengeRsp)
 private:
  inline void set_has_iswin();
  inline void clear_has_iswin();
  inline void set_has_curpassedlayerid();
  inline void clear_has_curpassedlayerid();
  inline void set_has_maxpassedlayerid();
  inline void clear_has_maxpassedlayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool iswin_;
  ::google::protobuf::uint32 curpassedlayerid_;
  ::google::protobuf::uint32 maxpassedlayerid_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerReportChallengeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerResetReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerResetReq : public ::google::protobuf::Message {
 public:
  TTowerResetReq();
  virtual ~TTowerResetReq();

  TTowerResetReq(const TTowerResetReq& from);

  inline TTowerResetReq& operator=(const TTowerResetReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerResetReq& default_instance();

  void Swap(TTowerResetReq* other);

  // implements Message ----------------------------------------------

  TTowerResetReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerResetReq& from);
  void MergeFrom(const TTowerResetReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 UsedResetNum = 1;
  inline bool has_usedresetnum() const;
  inline void clear_usedresetnum();
  static const int kUsedResetNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerResetReq</name>
  	<Function>
  		<name>usedresetnum</name>
  		<replaceName>UsedResetNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usedresetnum</name>
  		<replaceName>UsedResetNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usedresetnum</name>
  		<replaceName>UsedResetNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 usedresetnum() const;
  inline void set_usedresetnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerResetReq)
 private:
  inline void set_has_usedresetnum();
  inline void clear_has_usedresetnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 usedresetnum_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerResetReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerResetRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerResetRsp : public ::google::protobuf::Message {
 public:
  TTowerResetRsp();
  virtual ~TTowerResetRsp();

  TTowerResetRsp(const TTowerResetRsp& from);

  inline TTowerResetRsp& operator=(const TTowerResetRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerResetRsp& default_instance();

  void Swap(TTowerResetRsp* other);

  // implements Message ----------------------------------------------

  TTowerResetRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerResetRsp& from);
  void MergeFrom(const TTowerResetRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CurPassedLayerId = 1;
  inline bool has_curpassedlayerid() const;
  inline void clear_curpassedlayerid();
  static const int kCurPassedLayerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerResetRsp</name>
  	<Function>
  		<name>curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curpassedlayerid</name>
  		<replaceName>CurPassedLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curpassedlayerid() const;
  inline void set_curpassedlayerid(::google::protobuf::uint32 value);

  // optional uint32 UsedResetNum = 2;
  inline bool has_usedresetnum() const;
  inline void clear_usedresetnum();
  static const int kUsedResetNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerResetRsp</name>
  	<Function>
  		<name>usedresetnum</name>
  		<replaceName>UsedResetNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usedresetnum</name>
  		<replaceName>UsedResetNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usedresetnum</name>
  		<replaceName>UsedResetNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 usedresetnum() const;
  inline void set_usedresetnum(::google::protobuf::uint32 value);

  // optional uint32 HasBuyResetNum = 3;
  inline bool has_hasbuyresetnum() const;
  inline void clear_hasbuyresetnum();
  static const int kHasBuyResetNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerResetRsp</name>
  	<Function>
  		<name>hasbuyresetnum</name>
  		<replaceName>HasBuyResetNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hasbuyresetnum</name>
  		<replaceName>HasBuyResetNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hasbuyresetnum</name>
  		<replaceName>HasBuyResetNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hasbuyresetnum() const;
  inline void set_hasbuyresetnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerResetRsp)
 private:
  inline void set_has_curpassedlayerid();
  inline void clear_has_curpassedlayerid();
  inline void set_has_usedresetnum();
  inline void clear_has_usedresetnum();
  inline void set_has_hasbuyresetnum();
  inline void clear_has_hasbuyresetnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 curpassedlayerid_;
  ::google::protobuf::uint32 usedresetnum_;
  ::google::protobuf::uint32 hasbuyresetnum_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerResetRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerPassedLevelRankItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerPassedLevelRankItem : public ::google::protobuf::Message {
 public:
  TTowerPassedLevelRankItem();
  virtual ~TTowerPassedLevelRankItem();

  TTowerPassedLevelRankItem(const TTowerPassedLevelRankItem& from);

  inline TTowerPassedLevelRankItem& operator=(const TTowerPassedLevelRankItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerPassedLevelRankItem& default_instance();

  void Swap(TTowerPassedLevelRankItem* other);

  // implements Message ----------------------------------------------

  TTowerPassedLevelRankItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerPassedLevelRankItem& from);
  void MergeFrom(const TTowerPassedLevelRankItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerPassedLevelRankItem</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 PassedLayer = 2;
  inline bool has_passedlayer() const;
  inline void clear_passedlayer();
  static const int kPassedLayerFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerPassedLevelRankItem</name>
  	<Function>
  		<name>passedlayer</name>
  		<replaceName>PassedLayer</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_passedlayer</name>
  		<replaceName>PassedLayer</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_passedlayer</name>
  		<replaceName>PassedLayer</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 passedlayer() const;
  inline void set_passedlayer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerPassedLevelRankItem)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_passedlayer();
  inline void clear_has_passedlayer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint32 passedlayer_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerPassedLevelRankItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerPassedLevelRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerPassedLevelRankReq : public ::google::protobuf::Message {
 public:
  TTowerPassedLevelRankReq();
  virtual ~TTowerPassedLevelRankReq();

  TTowerPassedLevelRankReq(const TTowerPassedLevelRankReq& from);

  inline TTowerPassedLevelRankReq& operator=(const TTowerPassedLevelRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerPassedLevelRankReq& default_instance();

  void Swap(TTowerPassedLevelRankReq* other);

  // implements Message ----------------------------------------------

  TTowerPassedLevelRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerPassedLevelRankReq& from);
  void MergeFrom(const TTowerPassedLevelRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerPassedLevelRankReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional int32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerPassedLevelRankReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerPassedLevelRankReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 limit_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerPassedLevelRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerPassedLevelRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerPassedLevelRankRsp : public ::google::protobuf::Message {
 public:
  TTowerPassedLevelRankRsp();
  virtual ~TTowerPassedLevelRankRsp();

  TTowerPassedLevelRankRsp(const TTowerPassedLevelRankRsp& from);

  inline TTowerPassedLevelRankRsp& operator=(const TTowerPassedLevelRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerPassedLevelRankRsp& default_instance();

  void Swap(TTowerPassedLevelRankRsp* other);

  // implements Message ----------------------------------------------

  TTowerPassedLevelRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerPassedLevelRankRsp& from);
  void MergeFrom(const TTowerPassedLevelRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTowerPassedLevelRankItem RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerPassedLevelRankRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerPassedLevelRankItem& rankarr(int index) const;
  inline ::pb::TTowerPassedLevelRankItem* mutable_rankarr(int index);
  inline ::pb::TTowerPassedLevelRankItem* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerPassedLevelRankItem >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerPassedLevelRankItem >*
      mutable_rankarr();

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerPassedLevelRankRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerPassedLevelRankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTowerPassedLevelRankItem > rankarr_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerPassedLevelRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerReportCampSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerReportCampSingle : public ::google::protobuf::Message {
 public:
  TTowerReportCampSingle();
  virtual ~TTowerReportCampSingle();

  TTowerReportCampSingle(const TTowerReportCampSingle& from);

  inline TTowerReportCampSingle& operator=(const TTowerReportCampSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerReportCampSingle& default_instance();

  void Swap(TTowerReportCampSingle* other);

  // implements Message ----------------------------------------------

  TTowerReportCampSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerReportCampSingle& from);
  void MergeFrom(const TTowerReportCampSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CampId = 1;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerReportCampSingle</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 2;
  inline int reportarr_size() const;
  inline void clear_reportarr();
  static const int kReportArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerReportCampSingle</name>
  	<Function>
  		<name>reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>reportarr_size</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLocalBattleReportSimpleInfo& reportarr(int index) const;
  inline ::pb::TLocalBattleReportSimpleInfo* mutable_reportarr(int index);
  inline ::pb::TLocalBattleReportSimpleInfo* add_reportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
      reportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
      mutable_reportarr();

  // @@protoc_insertion_point(class_scope:pb.TTowerReportCampSingle)
 private:
  inline void set_has_campid();
  inline void clear_has_campid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo > reportarr_;
  ::google::protobuf::uint32 campid_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerReportCampSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerGetReportInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerGetReportInfoReq : public ::google::protobuf::Message {
 public:
  TTowerGetReportInfoReq();
  virtual ~TTowerGetReportInfoReq();

  TTowerGetReportInfoReq(const TTowerGetReportInfoReq& from);

  inline TTowerGetReportInfoReq& operator=(const TTowerGetReportInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerGetReportInfoReq& default_instance();

  void Swap(TTowerGetReportInfoReq* other);

  // implements Message ----------------------------------------------

  TTowerGetReportInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerGetReportInfoReq& from);
  void MergeFrom(const TTowerGetReportInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerId = 1;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerGetReportInfoReq</name>
  	<Function>
  		<name>layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerid() const;
  inline void set_layerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerGetReportInfoReq)
 private:
  inline void set_has_layerid();
  inline void clear_has_layerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layerid_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerGetReportInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerGetReportInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerGetReportInfoRsp : public ::google::protobuf::Message {
 public:
  TTowerGetReportInfoRsp();
  virtual ~TTowerGetReportInfoRsp();

  TTowerGetReportInfoRsp(const TTowerGetReportInfoRsp& from);

  inline TTowerGetReportInfoRsp& operator=(const TTowerGetReportInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerGetReportInfoRsp& default_instance();

  void Swap(TTowerGetReportInfoRsp* other);

  // implements Message ----------------------------------------------

  TTowerGetReportInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerGetReportInfoRsp& from);
  void MergeFrom(const TTowerGetReportInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTowerReportCampSingle FirstCampReportArr = 1;
  inline int firstcampreportarr_size() const;
  inline void clear_firstcampreportarr();
  static const int kFirstCampReportArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerGetReportInfoRsp</name>
  	<Function>
  		<name>firstcampreportarr</name>
  		<replaceName>FirstCampReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_firstcampreportarr</name>
  		<replaceName>FirstCampReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_firstcampreportarr</name>
  		<replaceName>FirstCampReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_firstcampreportarr</name>
  		<replaceName>FirstCampReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>firstcampreportarr_size</name>
  		<replaceName>FirstCampReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerReportCampSingle& firstcampreportarr(int index) const;
  inline ::pb::TTowerReportCampSingle* mutable_firstcampreportarr(int index);
  inline ::pb::TTowerReportCampSingle* add_firstcampreportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerReportCampSingle >&
      firstcampreportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerReportCampSingle >*
      mutable_firstcampreportarr();

  // repeated .pb.TTowerReportCampSingle RecentlyCampReportArr = 2;
  inline int recentlycampreportarr_size() const;
  inline void clear_recentlycampreportarr();
  static const int kRecentlyCampReportArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerGetReportInfoRsp</name>
  	<Function>
  		<name>recentlycampreportarr</name>
  		<replaceName>RecentlyCampReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recentlycampreportarr</name>
  		<replaceName>RecentlyCampReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recentlycampreportarr</name>
  		<replaceName>RecentlyCampReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recentlycampreportarr</name>
  		<replaceName>RecentlyCampReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recentlycampreportarr_size</name>
  		<replaceName>RecentlyCampReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerReportCampSingle& recentlycampreportarr(int index) const;
  inline ::pb::TTowerReportCampSingle* mutable_recentlycampreportarr(int index);
  inline ::pb::TTowerReportCampSingle* add_recentlycampreportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerReportCampSingle >&
      recentlycampreportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerReportCampSingle >*
      mutable_recentlycampreportarr();

  // repeated .pb.TTowerReportCampSingle FightForceMinCampReportArr = 3;
  inline int fightforcemincampreportarr_size() const;
  inline void clear_fightforcemincampreportarr();
  static const int kFightForceMinCampReportArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerGetReportInfoRsp</name>
  	<Function>
  		<name>fightforcemincampreportarr</name>
  		<replaceName>FightForceMinCampReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fightforcemincampreportarr</name>
  		<replaceName>FightForceMinCampReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fightforcemincampreportarr</name>
  		<replaceName>FightForceMinCampReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforcemincampreportarr</name>
  		<replaceName>FightForceMinCampReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fightforcemincampreportarr_size</name>
  		<replaceName>FightForceMinCampReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerReportCampSingle& fightforcemincampreportarr(int index) const;
  inline ::pb::TTowerReportCampSingle* mutable_fightforcemincampreportarr(int index);
  inline ::pb::TTowerReportCampSingle* add_fightforcemincampreportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerReportCampSingle >&
      fightforcemincampreportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerReportCampSingle >*
      mutable_fightforcemincampreportarr();

  // @@protoc_insertion_point(class_scope:pb.TTowerGetReportInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTowerReportCampSingle > firstcampreportarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTowerReportCampSingle > recentlycampreportarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTowerReportCampSingle > fightforcemincampreportarr_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerGetReportInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerGetHangRewardInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerGetHangRewardInfoRsp : public ::google::protobuf::Message {
 public:
  TTowerGetHangRewardInfoRsp();
  virtual ~TTowerGetHangRewardInfoRsp();

  TTowerGetHangRewardInfoRsp(const TTowerGetHangRewardInfoRsp& from);

  inline TTowerGetHangRewardInfoRsp& operator=(const TTowerGetHangRewardInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerGetHangRewardInfoRsp& default_instance();

  void Swap(TTowerGetHangRewardInfoRsp* other);

  // implements Message ----------------------------------------------

  TTowerGetHangRewardInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerGetHangRewardInfoRsp& from);
  void MergeFrom(const TTowerGetHangRewardInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TTowerHangRewardInfo HangInfo = 1;
  inline bool has_hanginfo() const;
  inline void clear_hanginfo();
  static const int kHangInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerGetHangRewardInfoRsp</name>
  	<Function>
  		<name>hanginfo</name>
  		<replaceName>HangInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hanginfo</name>
  		<replaceName>HangInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_hanginfo</name>
  		<replaceName>HangInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hanginfo</name>
  		<replaceName>HangInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerHangRewardInfo& hanginfo() const;
  inline ::pb::TTowerHangRewardInfo* mutable_hanginfo();
  inline ::pb::TTowerHangRewardInfo* release_hanginfo();
  inline void set_allocated_hanginfo(::pb::TTowerHangRewardInfo* hanginfo);

  // @@protoc_insertion_point(class_scope:pb.TTowerGetHangRewardInfoRsp)
 private:
  inline void set_has_hanginfo();
  inline void clear_has_hanginfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TTowerHangRewardInfo* hanginfo_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerGetHangRewardInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerReceiveHangRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerReceiveHangRewardRsp : public ::google::protobuf::Message {
 public:
  TTowerReceiveHangRewardRsp();
  virtual ~TTowerReceiveHangRewardRsp();

  TTowerReceiveHangRewardRsp(const TTowerReceiveHangRewardRsp& from);

  inline TTowerReceiveHangRewardRsp& operator=(const TTowerReceiveHangRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerReceiveHangRewardRsp& default_instance();

  void Swap(TTowerReceiveHangRewardRsp* other);

  // implements Message ----------------------------------------------

  TTowerReceiveHangRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerReceiveHangRewardRsp& from);
  void MergeFrom(const TTowerReceiveHangRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerReceiveHangRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint64 HangTime = 2;
  inline bool has_hangtime() const;
  inline void clear_hangtime();
  static const int kHangTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerReceiveHangRewardRsp</name>
  	<Function>
  		<name>hangtime</name>
  		<replaceName>HangTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hangtime</name>
  		<replaceName>HangTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hangtime</name>
  		<replaceName>HangTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hangtime() const;
  inline void set_hangtime(::google::protobuf::uint64 value);

  // optional uint64 HangReceiveTime = 3;
  inline bool has_hangreceivetime() const;
  inline void clear_hangreceivetime();
  static const int kHangReceiveTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerReceiveHangRewardRsp</name>
  	<Function>
  		<name>hangreceivetime</name>
  		<replaceName>HangReceiveTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hangreceivetime</name>
  		<replaceName>HangReceiveTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hangreceivetime</name>
  		<replaceName>HangReceiveTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hangreceivetime() const;
  inline void set_hangreceivetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerReceiveHangRewardRsp)
 private:
  inline void set_has_hangtime();
  inline void clear_has_hangtime();
  inline void set_has_hangreceivetime();
  inline void clear_has_hangreceivetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint64 hangtime_;
  ::google::protobuf::uint64 hangreceivetime_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerReceiveHangRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerBuyHangRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Tower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerBuyHangRewardRsp : public ::google::protobuf::Message {
 public:
  TTowerBuyHangRewardRsp();
  virtual ~TTowerBuyHangRewardRsp();

  TTowerBuyHangRewardRsp(const TTowerBuyHangRewardRsp& from);

  inline TTowerBuyHangRewardRsp& operator=(const TTowerBuyHangRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerBuyHangRewardRsp& default_instance();

  void Swap(TTowerBuyHangRewardRsp* other);

  // implements Message ----------------------------------------------

  TTowerBuyHangRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerBuyHangRewardRsp& from);
  void MergeFrom(const TTowerBuyHangRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerBuyHangRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint32 BoughtHangRewardNum = 2;
  inline bool has_boughthangrewardnum() const;
  inline void clear_boughthangrewardnum();
  static const int kBoughtHangRewardNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerBuyHangRewardRsp</name>
  	<Function>
  		<name>boughthangrewardnum</name>
  		<replaceName>BoughtHangRewardNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_boughthangrewardnum</name>
  		<replaceName>BoughtHangRewardNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_boughthangrewardnum</name>
  		<replaceName>BoughtHangRewardNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 boughthangrewardnum() const;
  inline void set_boughthangrewardnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerBuyHangRewardRsp)
 private:
  inline void set_has_boughthangrewardnum();
  inline void clear_has_boughthangrewardnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 boughthangrewardnum_;
  friend void  protobuf_AddDesc_net_2fTower_2eproto();
  friend void protobuf_AssignDesc_net_2fTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fTower_2eproto();

  void InitAsDefaultInstance();
  static TTowerBuyHangRewardRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TTowerInfo

// optional uint32 CurPassedLayerId = 1;
inline bool TTowerInfo::has_curpassedlayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerInfo::set_has_curpassedlayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerInfo::clear_has_curpassedlayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerInfo::clear_curpassedlayerid() {
  curpassedlayerid_ = 0u;
  clear_has_curpassedlayerid();
}
inline ::google::protobuf::uint32 TTowerInfo::curpassedlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerInfo.CurPassedLayerId)
  return curpassedlayerid_;
}
inline void TTowerInfo::set_curpassedlayerid(::google::protobuf::uint32 value) {
  set_has_curpassedlayerid();
  curpassedlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerInfo.CurPassedLayerId)
}

// optional uint32 MaxPassedLayerId = 2;
inline bool TTowerInfo::has_maxpassedlayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerInfo::set_has_maxpassedlayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerInfo::clear_has_maxpassedlayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerInfo::clear_maxpassedlayerid() {
  maxpassedlayerid_ = 0u;
  clear_has_maxpassedlayerid();
}
inline ::google::protobuf::uint32 TTowerInfo::maxpassedlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerInfo.MaxPassedLayerId)
  return maxpassedlayerid_;
}
inline void TTowerInfo::set_maxpassedlayerid(::google::protobuf::uint32 value) {
  set_has_maxpassedlayerid();
  maxpassedlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerInfo.MaxPassedLayerId)
}

// optional uint32 UsedResetNum = 3;
inline bool TTowerInfo::has_usedresetnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerInfo::set_has_usedresetnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerInfo::clear_has_usedresetnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerInfo::clear_usedresetnum() {
  usedresetnum_ = 0u;
  clear_has_usedresetnum();
}
inline ::google::protobuf::uint32 TTowerInfo::usedresetnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerInfo.UsedResetNum)
  return usedresetnum_;
}
inline void TTowerInfo::set_usedresetnum(::google::protobuf::uint32 value) {
  set_has_usedresetnum();
  usedresetnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerInfo.UsedResetNum)
}

// optional uint32 HasBuyResetNum = 4;
inline bool TTowerInfo::has_hasbuyresetnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTowerInfo::set_has_hasbuyresetnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTowerInfo::clear_has_hasbuyresetnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTowerInfo::clear_hasbuyresetnum() {
  hasbuyresetnum_ = 0u;
  clear_has_hasbuyresetnum();
}
inline ::google::protobuf::uint32 TTowerInfo::hasbuyresetnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerInfo.HasBuyResetNum)
  return hasbuyresetnum_;
}
inline void TTowerInfo::set_hasbuyresetnum(::google::protobuf::uint32 value) {
  set_has_hasbuyresetnum();
  hasbuyresetnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerInfo.HasBuyResetNum)
}

// optional uint32 BanLayerId = 5;
inline bool TTowerInfo::has_banlayerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TTowerInfo::set_has_banlayerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TTowerInfo::clear_has_banlayerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TTowerInfo::clear_banlayerid() {
  banlayerid_ = 0u;
  clear_has_banlayerid();
}
inline ::google::protobuf::uint32 TTowerInfo::banlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerInfo.BanLayerId)
  return banlayerid_;
}
inline void TTowerInfo::set_banlayerid(::google::protobuf::uint32 value) {
  set_has_banlayerid();
  banlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerInfo.BanLayerId)
}

// -------------------------------------------------------------------

// TTowerHangRewardInfo

// optional uint64 HangTime = 1;
inline bool TTowerHangRewardInfo::has_hangtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerHangRewardInfo::set_has_hangtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerHangRewardInfo::clear_has_hangtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerHangRewardInfo::clear_hangtime() {
  hangtime_ = GOOGLE_ULONGLONG(0);
  clear_has_hangtime();
}
inline ::google::protobuf::uint64 TTowerHangRewardInfo::hangtime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHangRewardInfo.HangTime)
  return hangtime_;
}
inline void TTowerHangRewardInfo::set_hangtime(::google::protobuf::uint64 value) {
  set_has_hangtime();
  hangtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHangRewardInfo.HangTime)
}

// optional uint64 HangReceiveTime = 2;
inline bool TTowerHangRewardInfo::has_hangreceivetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerHangRewardInfo::set_has_hangreceivetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerHangRewardInfo::clear_has_hangreceivetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerHangRewardInfo::clear_hangreceivetime() {
  hangreceivetime_ = GOOGLE_ULONGLONG(0);
  clear_has_hangreceivetime();
}
inline ::google::protobuf::uint64 TTowerHangRewardInfo::hangreceivetime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerHangRewardInfo.HangReceiveTime)
  return hangreceivetime_;
}
inline void TTowerHangRewardInfo::set_hangreceivetime(::google::protobuf::uint64 value) {
  set_has_hangreceivetime();
  hangreceivetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerHangRewardInfo.HangReceiveTime)
}

// repeated .pb.TCommonReward RandomRewardArr = 3;
inline int TTowerHangRewardInfo::randomrewardarr_size() const {
  return randomrewardarr_.size();
}
inline void TTowerHangRewardInfo::clear_randomrewardarr() {
  randomrewardarr_.Clear();
}
inline const ::pb::TCommonReward& TTowerHangRewardInfo::randomrewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerHangRewardInfo.RandomRewardArr)
  return randomrewardarr_.Get(index);
}
inline ::pb::TCommonReward* TTowerHangRewardInfo::mutable_randomrewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerHangRewardInfo.RandomRewardArr)
  return randomrewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerHangRewardInfo::add_randomrewardarr() {
  // @@protoc_insertion_point(field_add:pb.TTowerHangRewardInfo.RandomRewardArr)
  return randomrewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerHangRewardInfo::randomrewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TTowerHangRewardInfo.RandomRewardArr)
  return randomrewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerHangRewardInfo::mutable_randomrewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerHangRewardInfo.RandomRewardArr)
  return &randomrewardarr_;
}

// -------------------------------------------------------------------

// TTowerGetTowerInfoRsp

// optional .pb.TTowerInfo TowerInfo = 1;
inline bool TTowerGetTowerInfoRsp::has_towerinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerGetTowerInfoRsp::set_has_towerinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerGetTowerInfoRsp::clear_has_towerinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerGetTowerInfoRsp::clear_towerinfo() {
  if (towerinfo_ != NULL) towerinfo_->::pb::TTowerInfo::Clear();
  clear_has_towerinfo();
}
inline const ::pb::TTowerInfo& TTowerGetTowerInfoRsp::towerinfo() const {
  // @@protoc_insertion_point(field_get:pb.TTowerGetTowerInfoRsp.TowerInfo)
  return towerinfo_ != NULL ? *towerinfo_ : *default_instance_->towerinfo_;
}
inline ::pb::TTowerInfo* TTowerGetTowerInfoRsp::mutable_towerinfo() {
  set_has_towerinfo();
  if (towerinfo_ == NULL) towerinfo_ = new ::pb::TTowerInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTowerGetTowerInfoRsp.TowerInfo)
  return towerinfo_;
}
inline ::pb::TTowerInfo* TTowerGetTowerInfoRsp::release_towerinfo() {
  clear_has_towerinfo();
  ::pb::TTowerInfo* temp = towerinfo_;
  towerinfo_ = NULL;
  return temp;
}
inline void TTowerGetTowerInfoRsp::set_allocated_towerinfo(::pb::TTowerInfo* towerinfo) {
  delete towerinfo_;
  towerinfo_ = towerinfo;
  if (towerinfo) {
    set_has_towerinfo();
  } else {
    clear_has_towerinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerGetTowerInfoRsp.TowerInfo)
}

// optional .pb.TTowerHangRewardInfo HangInfo = 2;
inline bool TTowerGetTowerInfoRsp::has_hanginfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerGetTowerInfoRsp::set_has_hanginfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerGetTowerInfoRsp::clear_has_hanginfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerGetTowerInfoRsp::clear_hanginfo() {
  if (hanginfo_ != NULL) hanginfo_->::pb::TTowerHangRewardInfo::Clear();
  clear_has_hanginfo();
}
inline const ::pb::TTowerHangRewardInfo& TTowerGetTowerInfoRsp::hanginfo() const {
  // @@protoc_insertion_point(field_get:pb.TTowerGetTowerInfoRsp.HangInfo)
  return hanginfo_ != NULL ? *hanginfo_ : *default_instance_->hanginfo_;
}
inline ::pb::TTowerHangRewardInfo* TTowerGetTowerInfoRsp::mutable_hanginfo() {
  set_has_hanginfo();
  if (hanginfo_ == NULL) hanginfo_ = new ::pb::TTowerHangRewardInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTowerGetTowerInfoRsp.HangInfo)
  return hanginfo_;
}
inline ::pb::TTowerHangRewardInfo* TTowerGetTowerInfoRsp::release_hanginfo() {
  clear_has_hanginfo();
  ::pb::TTowerHangRewardInfo* temp = hanginfo_;
  hanginfo_ = NULL;
  return temp;
}
inline void TTowerGetTowerInfoRsp::set_allocated_hanginfo(::pb::TTowerHangRewardInfo* hanginfo) {
  delete hanginfo_;
  hanginfo_ = hanginfo;
  if (hanginfo) {
    set_has_hanginfo();
  } else {
    clear_has_hanginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerGetTowerInfoRsp.HangInfo)
}

// optional uint32 BoughtHangRewardNum = 3;
inline bool TTowerGetTowerInfoRsp::has_boughthangrewardnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerGetTowerInfoRsp::set_has_boughthangrewardnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerGetTowerInfoRsp::clear_has_boughthangrewardnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerGetTowerInfoRsp::clear_boughthangrewardnum() {
  boughthangrewardnum_ = 0u;
  clear_has_boughthangrewardnum();
}
inline ::google::protobuf::uint32 TTowerGetTowerInfoRsp::boughthangrewardnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerGetTowerInfoRsp.BoughtHangRewardNum)
  return boughthangrewardnum_;
}
inline void TTowerGetTowerInfoRsp::set_boughthangrewardnum(::google::protobuf::uint32 value) {
  set_has_boughthangrewardnum();
  boughthangrewardnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerGetTowerInfoRsp.BoughtHangRewardNum)
}

// -------------------------------------------------------------------

// TTowerEnterChallengeReq

// optional uint32 LayerId = 1;
inline bool TTowerEnterChallengeReq::has_layerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerEnterChallengeReq::set_has_layerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerEnterChallengeReq::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerEnterChallengeReq::clear_layerid() {
  layerid_ = 0u;
  clear_has_layerid();
}
inline ::google::protobuf::uint32 TTowerEnterChallengeReq::layerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerEnterChallengeReq.LayerId)
  return layerid_;
}
inline void TTowerEnterChallengeReq::set_layerid(::google::protobuf::uint32 value) {
  set_has_layerid();
  layerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerEnterChallengeReq.LayerId)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 2;
inline bool TTowerEnterChallengeReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerEnterChallengeReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerEnterChallengeReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerEnterChallengeReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TTowerEnterChallengeReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TTowerEnterChallengeReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TTowerEnterChallengeReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TTowerEnterChallengeReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TTowerEnterChallengeReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TTowerEnterChallengeReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerEnterChallengeReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TTowerEnterChallengeRsp

// optional .pb.TBattleArgs BattleArgs = 2;
inline bool TTowerEnterChallengeRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerEnterChallengeRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerEnterChallengeRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerEnterChallengeRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TTowerEnterChallengeRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TTowerEnterChallengeRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TTowerEnterChallengeRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TTowerEnterChallengeRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TTowerEnterChallengeRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TTowerEnterChallengeRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerEnterChallengeRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TTowerReportChallengeReq

// optional uint32 LayerId = 1;
inline bool TTowerReportChallengeReq::has_layerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerReportChallengeReq::set_has_layerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerReportChallengeReq::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerReportChallengeReq::clear_layerid() {
  layerid_ = 0u;
  clear_has_layerid();
}
inline ::google::protobuf::uint32 TTowerReportChallengeReq::layerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerReportChallengeReq.LayerId)
  return layerid_;
}
inline void TTowerReportChallengeReq::set_layerid(::google::protobuf::uint32 value) {
  set_has_layerid();
  layerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerReportChallengeReq.LayerId)
}

// optional bool IsSweep = 2;
inline bool TTowerReportChallengeReq::has_issweep() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerReportChallengeReq::set_has_issweep() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerReportChallengeReq::clear_has_issweep() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerReportChallengeReq::clear_issweep() {
  issweep_ = false;
  clear_has_issweep();
}
inline bool TTowerReportChallengeReq::issweep() const {
  // @@protoc_insertion_point(field_get:pb.TTowerReportChallengeReq.IsSweep)
  return issweep_;
}
inline void TTowerReportChallengeReq::set_issweep(bool value) {
  set_has_issweep();
  issweep_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerReportChallengeReq.IsSweep)
}

// optional bytes BattleReport = 3;
inline bool TTowerReportChallengeReq::has_battlereport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerReportChallengeReq::set_has_battlereport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerReportChallengeReq::clear_has_battlereport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerReportChallengeReq::clear_battlereport() {
  if (battlereport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlereport_->clear();
  }
  clear_has_battlereport();
}
inline const ::std::string& TTowerReportChallengeReq::battlereport() const {
  // @@protoc_insertion_point(field_get:pb.TTowerReportChallengeReq.BattleReport)
  return *battlereport_;
}
inline void TTowerReportChallengeReq::set_battlereport(const ::std::string& value) {
  set_has_battlereport();
  if (battlereport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlereport_ = new ::std::string;
  }
  battlereport_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TTowerReportChallengeReq.BattleReport)
}
inline void TTowerReportChallengeReq::set_battlereport(const char* value) {
  set_has_battlereport();
  if (battlereport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlereport_ = new ::std::string;
  }
  battlereport_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TTowerReportChallengeReq.BattleReport)
}
inline void TTowerReportChallengeReq::set_battlereport(const void* value, size_t size) {
  set_has_battlereport();
  if (battlereport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlereport_ = new ::std::string;
  }
  battlereport_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TTowerReportChallengeReq.BattleReport)
}
inline ::std::string* TTowerReportChallengeReq::mutable_battlereport() {
  set_has_battlereport();
  if (battlereport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlereport_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TTowerReportChallengeReq.BattleReport)
  return battlereport_;
}
inline ::std::string* TTowerReportChallengeReq::release_battlereport() {
  clear_has_battlereport();
  if (battlereport_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battlereport_;
    battlereport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TTowerReportChallengeReq::set_allocated_battlereport(::std::string* battlereport) {
  if (battlereport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battlereport_;
  }
  if (battlereport) {
    set_has_battlereport();
    battlereport_ = battlereport;
  } else {
    clear_has_battlereport();
    battlereport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerReportChallengeReq.BattleReport)
}

// -------------------------------------------------------------------

// TTowerSweepReq

// optional uint32 StartLayer = 1;
inline bool TTowerSweepReq::has_startlayer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerSweepReq::set_has_startlayer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerSweepReq::clear_has_startlayer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerSweepReq::clear_startlayer() {
  startlayer_ = 0u;
  clear_has_startlayer();
}
inline ::google::protobuf::uint32 TTowerSweepReq::startlayer() const {
  // @@protoc_insertion_point(field_get:pb.TTowerSweepReq.StartLayer)
  return startlayer_;
}
inline void TTowerSweepReq::set_startlayer(::google::protobuf::uint32 value) {
  set_has_startlayer();
  startlayer_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerSweepReq.StartLayer)
}

// optional uint32 TargetLayer = 2;
inline bool TTowerSweepReq::has_targetlayer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerSweepReq::set_has_targetlayer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerSweepReq::clear_has_targetlayer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerSweepReq::clear_targetlayer() {
  targetlayer_ = 0u;
  clear_has_targetlayer();
}
inline ::google::protobuf::uint32 TTowerSweepReq::targetlayer() const {
  // @@protoc_insertion_point(field_get:pb.TTowerSweepReq.TargetLayer)
  return targetlayer_;
}
inline void TTowerSweepReq::set_targetlayer(::google::protobuf::uint32 value) {
  set_has_targetlayer();
  targetlayer_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerSweepReq.TargetLayer)
}

// -------------------------------------------------------------------

// TTowerSweepRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TTowerSweepRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TTowerSweepRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TTowerSweepRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerSweepRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TTowerSweepRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerSweepRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerSweepRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TTowerSweepRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerSweepRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TTowerSweepRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerSweepRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerSweepRsp.RewardArr)
  return &rewardarr_;
}

// optional uint32 CurPassedLayerId = 2;
inline bool TTowerSweepRsp::has_curpassedlayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerSweepRsp::set_has_curpassedlayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerSweepRsp::clear_has_curpassedlayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerSweepRsp::clear_curpassedlayerid() {
  curpassedlayerid_ = 0u;
  clear_has_curpassedlayerid();
}
inline ::google::protobuf::uint32 TTowerSweepRsp::curpassedlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerSweepRsp.CurPassedLayerId)
  return curpassedlayerid_;
}
inline void TTowerSweepRsp::set_curpassedlayerid(::google::protobuf::uint32 value) {
  set_has_curpassedlayerid();
  curpassedlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerSweepRsp.CurPassedLayerId)
}

// optional uint32 MaxPassedLayerId = 3;
inline bool TTowerSweepRsp::has_maxpassedlayerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerSweepRsp::set_has_maxpassedlayerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerSweepRsp::clear_has_maxpassedlayerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerSweepRsp::clear_maxpassedlayerid() {
  maxpassedlayerid_ = 0u;
  clear_has_maxpassedlayerid();
}
inline ::google::protobuf::uint32 TTowerSweepRsp::maxpassedlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerSweepRsp.MaxPassedLayerId)
  return maxpassedlayerid_;
}
inline void TTowerSweepRsp::set_maxpassedlayerid(::google::protobuf::uint32 value) {
  set_has_maxpassedlayerid();
  maxpassedlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerSweepRsp.MaxPassedLayerId)
}

// -------------------------------------------------------------------

// TTowerReportChallengeRsp

// optional bool IsWin = 1;
inline bool TTowerReportChallengeRsp::has_iswin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerReportChallengeRsp::set_has_iswin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerReportChallengeRsp::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerReportChallengeRsp::clear_iswin() {
  iswin_ = false;
  clear_has_iswin();
}
inline bool TTowerReportChallengeRsp::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TTowerReportChallengeRsp.IsWin)
  return iswin_;
}
inline void TTowerReportChallengeRsp::set_iswin(bool value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerReportChallengeRsp.IsWin)
}

// optional uint32 CurPassedLayerId = 2;
inline bool TTowerReportChallengeRsp::has_curpassedlayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerReportChallengeRsp::set_has_curpassedlayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerReportChallengeRsp::clear_has_curpassedlayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerReportChallengeRsp::clear_curpassedlayerid() {
  curpassedlayerid_ = 0u;
  clear_has_curpassedlayerid();
}
inline ::google::protobuf::uint32 TTowerReportChallengeRsp::curpassedlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerReportChallengeRsp.CurPassedLayerId)
  return curpassedlayerid_;
}
inline void TTowerReportChallengeRsp::set_curpassedlayerid(::google::protobuf::uint32 value) {
  set_has_curpassedlayerid();
  curpassedlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerReportChallengeRsp.CurPassedLayerId)
}

// optional uint32 MaxPassedLayerId = 3;
inline bool TTowerReportChallengeRsp::has_maxpassedlayerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerReportChallengeRsp::set_has_maxpassedlayerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerReportChallengeRsp::clear_has_maxpassedlayerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerReportChallengeRsp::clear_maxpassedlayerid() {
  maxpassedlayerid_ = 0u;
  clear_has_maxpassedlayerid();
}
inline ::google::protobuf::uint32 TTowerReportChallengeRsp::maxpassedlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerReportChallengeRsp.MaxPassedLayerId)
  return maxpassedlayerid_;
}
inline void TTowerReportChallengeRsp::set_maxpassedlayerid(::google::protobuf::uint32 value) {
  set_has_maxpassedlayerid();
  maxpassedlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerReportChallengeRsp.MaxPassedLayerId)
}

// -------------------------------------------------------------------

// TTowerResetReq

// optional uint32 UsedResetNum = 1;
inline bool TTowerResetReq::has_usedresetnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerResetReq::set_has_usedresetnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerResetReq::clear_has_usedresetnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerResetReq::clear_usedresetnum() {
  usedresetnum_ = 0u;
  clear_has_usedresetnum();
}
inline ::google::protobuf::uint32 TTowerResetReq::usedresetnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerResetReq.UsedResetNum)
  return usedresetnum_;
}
inline void TTowerResetReq::set_usedresetnum(::google::protobuf::uint32 value) {
  set_has_usedresetnum();
  usedresetnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerResetReq.UsedResetNum)
}

// -------------------------------------------------------------------

// TTowerResetRsp

// optional uint32 CurPassedLayerId = 1;
inline bool TTowerResetRsp::has_curpassedlayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerResetRsp::set_has_curpassedlayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerResetRsp::clear_has_curpassedlayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerResetRsp::clear_curpassedlayerid() {
  curpassedlayerid_ = 0u;
  clear_has_curpassedlayerid();
}
inline ::google::protobuf::uint32 TTowerResetRsp::curpassedlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerResetRsp.CurPassedLayerId)
  return curpassedlayerid_;
}
inline void TTowerResetRsp::set_curpassedlayerid(::google::protobuf::uint32 value) {
  set_has_curpassedlayerid();
  curpassedlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerResetRsp.CurPassedLayerId)
}

// optional uint32 UsedResetNum = 2;
inline bool TTowerResetRsp::has_usedresetnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerResetRsp::set_has_usedresetnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerResetRsp::clear_has_usedresetnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerResetRsp::clear_usedresetnum() {
  usedresetnum_ = 0u;
  clear_has_usedresetnum();
}
inline ::google::protobuf::uint32 TTowerResetRsp::usedresetnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerResetRsp.UsedResetNum)
  return usedresetnum_;
}
inline void TTowerResetRsp::set_usedresetnum(::google::protobuf::uint32 value) {
  set_has_usedresetnum();
  usedresetnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerResetRsp.UsedResetNum)
}

// optional uint32 HasBuyResetNum = 3;
inline bool TTowerResetRsp::has_hasbuyresetnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerResetRsp::set_has_hasbuyresetnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerResetRsp::clear_has_hasbuyresetnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerResetRsp::clear_hasbuyresetnum() {
  hasbuyresetnum_ = 0u;
  clear_has_hasbuyresetnum();
}
inline ::google::protobuf::uint32 TTowerResetRsp::hasbuyresetnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerResetRsp.HasBuyResetNum)
  return hasbuyresetnum_;
}
inline void TTowerResetRsp::set_hasbuyresetnum(::google::protobuf::uint32 value) {
  set_has_hasbuyresetnum();
  hasbuyresetnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerResetRsp.HasBuyResetNum)
}

// -------------------------------------------------------------------

// TTowerPassedLevelRankItem

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TTowerPassedLevelRankItem::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerPassedLevelRankItem::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerPassedLevelRankItem::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerPassedLevelRankItem::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TTowerPassedLevelRankItem::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TTowerPassedLevelRankItem.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TTowerPassedLevelRankItem::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTowerPassedLevelRankItem.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TTowerPassedLevelRankItem::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TTowerPassedLevelRankItem::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerPassedLevelRankItem.UserInfo)
}

// optional uint32 PassedLayer = 2;
inline bool TTowerPassedLevelRankItem::has_passedlayer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerPassedLevelRankItem::set_has_passedlayer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerPassedLevelRankItem::clear_has_passedlayer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerPassedLevelRankItem::clear_passedlayer() {
  passedlayer_ = 0u;
  clear_has_passedlayer();
}
inline ::google::protobuf::uint32 TTowerPassedLevelRankItem::passedlayer() const {
  // @@protoc_insertion_point(field_get:pb.TTowerPassedLevelRankItem.PassedLayer)
  return passedlayer_;
}
inline void TTowerPassedLevelRankItem::set_passedlayer(::google::protobuf::uint32 value) {
  set_has_passedlayer();
  passedlayer_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerPassedLevelRankItem.PassedLayer)
}

// -------------------------------------------------------------------

// TTowerPassedLevelRankReq

// optional int32 Offset = 1;
inline bool TTowerPassedLevelRankReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerPassedLevelRankReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerPassedLevelRankReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerPassedLevelRankReq::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 TTowerPassedLevelRankReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TTowerPassedLevelRankReq.Offset)
  return offset_;
}
inline void TTowerPassedLevelRankReq::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerPassedLevelRankReq.Offset)
}

// optional int32 Limit = 2;
inline bool TTowerPassedLevelRankReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerPassedLevelRankReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerPassedLevelRankReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerPassedLevelRankReq::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 TTowerPassedLevelRankReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TTowerPassedLevelRankReq.Limit)
  return limit_;
}
inline void TTowerPassedLevelRankReq::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerPassedLevelRankReq.Limit)
}

// -------------------------------------------------------------------

// TTowerPassedLevelRankRsp

// repeated .pb.TTowerPassedLevelRankItem RankArr = 1;
inline int TTowerPassedLevelRankRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TTowerPassedLevelRankRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TTowerPassedLevelRankItem& TTowerPassedLevelRankRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerPassedLevelRankRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TTowerPassedLevelRankItem* TTowerPassedLevelRankRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerPassedLevelRankRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TTowerPassedLevelRankItem* TTowerPassedLevelRankRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TTowerPassedLevelRankRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerPassedLevelRankItem >&
TTowerPassedLevelRankRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TTowerPassedLevelRankRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerPassedLevelRankItem >*
TTowerPassedLevelRankRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerPassedLevelRankRsp.RankArr)
  return &rankarr_;
}

// optional int32 MyRank = 2;
inline bool TTowerPassedLevelRankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerPassedLevelRankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerPassedLevelRankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerPassedLevelRankRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TTowerPassedLevelRankRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TTowerPassedLevelRankRsp.MyRank)
  return myrank_;
}
inline void TTowerPassedLevelRankRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerPassedLevelRankRsp.MyRank)
}

// -------------------------------------------------------------------

// TTowerReportCampSingle

// optional uint32 CampId = 1;
inline bool TTowerReportCampSingle::has_campid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerReportCampSingle::set_has_campid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerReportCampSingle::clear_has_campid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerReportCampSingle::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TTowerReportCampSingle::campid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerReportCampSingle.CampId)
  return campid_;
}
inline void TTowerReportCampSingle::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerReportCampSingle.CampId)
}

// repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 2;
inline int TTowerReportCampSingle::reportarr_size() const {
  return reportarr_.size();
}
inline void TTowerReportCampSingle::clear_reportarr() {
  reportarr_.Clear();
}
inline const ::pb::TLocalBattleReportSimpleInfo& TTowerReportCampSingle::reportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerReportCampSingle.ReportArr)
  return reportarr_.Get(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TTowerReportCampSingle::mutable_reportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerReportCampSingle.ReportArr)
  return reportarr_.Mutable(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TTowerReportCampSingle::add_reportarr() {
  // @@protoc_insertion_point(field_add:pb.TTowerReportCampSingle.ReportArr)
  return reportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
TTowerReportCampSingle::reportarr() const {
  // @@protoc_insertion_point(field_list:pb.TTowerReportCampSingle.ReportArr)
  return reportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
TTowerReportCampSingle::mutable_reportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerReportCampSingle.ReportArr)
  return &reportarr_;
}

// -------------------------------------------------------------------

// TTowerGetReportInfoReq

// optional uint32 LayerId = 1;
inline bool TTowerGetReportInfoReq::has_layerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerGetReportInfoReq::set_has_layerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerGetReportInfoReq::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerGetReportInfoReq::clear_layerid() {
  layerid_ = 0u;
  clear_has_layerid();
}
inline ::google::protobuf::uint32 TTowerGetReportInfoReq::layerid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerGetReportInfoReq.LayerId)
  return layerid_;
}
inline void TTowerGetReportInfoReq::set_layerid(::google::protobuf::uint32 value) {
  set_has_layerid();
  layerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerGetReportInfoReq.LayerId)
}

// -------------------------------------------------------------------

// TTowerGetReportInfoRsp

// repeated .pb.TTowerReportCampSingle FirstCampReportArr = 1;
inline int TTowerGetReportInfoRsp::firstcampreportarr_size() const {
  return firstcampreportarr_.size();
}
inline void TTowerGetReportInfoRsp::clear_firstcampreportarr() {
  firstcampreportarr_.Clear();
}
inline const ::pb::TTowerReportCampSingle& TTowerGetReportInfoRsp::firstcampreportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerGetReportInfoRsp.FirstCampReportArr)
  return firstcampreportarr_.Get(index);
}
inline ::pb::TTowerReportCampSingle* TTowerGetReportInfoRsp::mutable_firstcampreportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerGetReportInfoRsp.FirstCampReportArr)
  return firstcampreportarr_.Mutable(index);
}
inline ::pb::TTowerReportCampSingle* TTowerGetReportInfoRsp::add_firstcampreportarr() {
  // @@protoc_insertion_point(field_add:pb.TTowerGetReportInfoRsp.FirstCampReportArr)
  return firstcampreportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerReportCampSingle >&
TTowerGetReportInfoRsp::firstcampreportarr() const {
  // @@protoc_insertion_point(field_list:pb.TTowerGetReportInfoRsp.FirstCampReportArr)
  return firstcampreportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerReportCampSingle >*
TTowerGetReportInfoRsp::mutable_firstcampreportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerGetReportInfoRsp.FirstCampReportArr)
  return &firstcampreportarr_;
}

// repeated .pb.TTowerReportCampSingle RecentlyCampReportArr = 2;
inline int TTowerGetReportInfoRsp::recentlycampreportarr_size() const {
  return recentlycampreportarr_.size();
}
inline void TTowerGetReportInfoRsp::clear_recentlycampreportarr() {
  recentlycampreportarr_.Clear();
}
inline const ::pb::TTowerReportCampSingle& TTowerGetReportInfoRsp::recentlycampreportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerGetReportInfoRsp.RecentlyCampReportArr)
  return recentlycampreportarr_.Get(index);
}
inline ::pb::TTowerReportCampSingle* TTowerGetReportInfoRsp::mutable_recentlycampreportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerGetReportInfoRsp.RecentlyCampReportArr)
  return recentlycampreportarr_.Mutable(index);
}
inline ::pb::TTowerReportCampSingle* TTowerGetReportInfoRsp::add_recentlycampreportarr() {
  // @@protoc_insertion_point(field_add:pb.TTowerGetReportInfoRsp.RecentlyCampReportArr)
  return recentlycampreportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerReportCampSingle >&
TTowerGetReportInfoRsp::recentlycampreportarr() const {
  // @@protoc_insertion_point(field_list:pb.TTowerGetReportInfoRsp.RecentlyCampReportArr)
  return recentlycampreportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerReportCampSingle >*
TTowerGetReportInfoRsp::mutable_recentlycampreportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerGetReportInfoRsp.RecentlyCampReportArr)
  return &recentlycampreportarr_;
}

// repeated .pb.TTowerReportCampSingle FightForceMinCampReportArr = 3;
inline int TTowerGetReportInfoRsp::fightforcemincampreportarr_size() const {
  return fightforcemincampreportarr_.size();
}
inline void TTowerGetReportInfoRsp::clear_fightforcemincampreportarr() {
  fightforcemincampreportarr_.Clear();
}
inline const ::pb::TTowerReportCampSingle& TTowerGetReportInfoRsp::fightforcemincampreportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerGetReportInfoRsp.FightForceMinCampReportArr)
  return fightforcemincampreportarr_.Get(index);
}
inline ::pb::TTowerReportCampSingle* TTowerGetReportInfoRsp::mutable_fightforcemincampreportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerGetReportInfoRsp.FightForceMinCampReportArr)
  return fightforcemincampreportarr_.Mutable(index);
}
inline ::pb::TTowerReportCampSingle* TTowerGetReportInfoRsp::add_fightforcemincampreportarr() {
  // @@protoc_insertion_point(field_add:pb.TTowerGetReportInfoRsp.FightForceMinCampReportArr)
  return fightforcemincampreportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerReportCampSingle >&
TTowerGetReportInfoRsp::fightforcemincampreportarr() const {
  // @@protoc_insertion_point(field_list:pb.TTowerGetReportInfoRsp.FightForceMinCampReportArr)
  return fightforcemincampreportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerReportCampSingle >*
TTowerGetReportInfoRsp::mutable_fightforcemincampreportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerGetReportInfoRsp.FightForceMinCampReportArr)
  return &fightforcemincampreportarr_;
}

// -------------------------------------------------------------------

// TTowerGetHangRewardInfoRsp

// optional .pb.TTowerHangRewardInfo HangInfo = 1;
inline bool TTowerGetHangRewardInfoRsp::has_hanginfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerGetHangRewardInfoRsp::set_has_hanginfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerGetHangRewardInfoRsp::clear_has_hanginfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerGetHangRewardInfoRsp::clear_hanginfo() {
  if (hanginfo_ != NULL) hanginfo_->::pb::TTowerHangRewardInfo::Clear();
  clear_has_hanginfo();
}
inline const ::pb::TTowerHangRewardInfo& TTowerGetHangRewardInfoRsp::hanginfo() const {
  // @@protoc_insertion_point(field_get:pb.TTowerGetHangRewardInfoRsp.HangInfo)
  return hanginfo_ != NULL ? *hanginfo_ : *default_instance_->hanginfo_;
}
inline ::pb::TTowerHangRewardInfo* TTowerGetHangRewardInfoRsp::mutable_hanginfo() {
  set_has_hanginfo();
  if (hanginfo_ == NULL) hanginfo_ = new ::pb::TTowerHangRewardInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTowerGetHangRewardInfoRsp.HangInfo)
  return hanginfo_;
}
inline ::pb::TTowerHangRewardInfo* TTowerGetHangRewardInfoRsp::release_hanginfo() {
  clear_has_hanginfo();
  ::pb::TTowerHangRewardInfo* temp = hanginfo_;
  hanginfo_ = NULL;
  return temp;
}
inline void TTowerGetHangRewardInfoRsp::set_allocated_hanginfo(::pb::TTowerHangRewardInfo* hanginfo) {
  delete hanginfo_;
  hanginfo_ = hanginfo;
  if (hanginfo) {
    set_has_hanginfo();
  } else {
    clear_has_hanginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerGetHangRewardInfoRsp.HangInfo)
}

// -------------------------------------------------------------------

// TTowerReceiveHangRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TTowerReceiveHangRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TTowerReceiveHangRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TTowerReceiveHangRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerReceiveHangRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TTowerReceiveHangRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerReceiveHangRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerReceiveHangRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TTowerReceiveHangRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerReceiveHangRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TTowerReceiveHangRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerReceiveHangRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerReceiveHangRewardRsp.RewardArr)
  return &rewardarr_;
}

// optional uint64 HangTime = 2;
inline bool TTowerReceiveHangRewardRsp::has_hangtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerReceiveHangRewardRsp::set_has_hangtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerReceiveHangRewardRsp::clear_has_hangtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerReceiveHangRewardRsp::clear_hangtime() {
  hangtime_ = GOOGLE_ULONGLONG(0);
  clear_has_hangtime();
}
inline ::google::protobuf::uint64 TTowerReceiveHangRewardRsp::hangtime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerReceiveHangRewardRsp.HangTime)
  return hangtime_;
}
inline void TTowerReceiveHangRewardRsp::set_hangtime(::google::protobuf::uint64 value) {
  set_has_hangtime();
  hangtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerReceiveHangRewardRsp.HangTime)
}

// optional uint64 HangReceiveTime = 3;
inline bool TTowerReceiveHangRewardRsp::has_hangreceivetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerReceiveHangRewardRsp::set_has_hangreceivetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerReceiveHangRewardRsp::clear_has_hangreceivetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerReceiveHangRewardRsp::clear_hangreceivetime() {
  hangreceivetime_ = GOOGLE_ULONGLONG(0);
  clear_has_hangreceivetime();
}
inline ::google::protobuf::uint64 TTowerReceiveHangRewardRsp::hangreceivetime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerReceiveHangRewardRsp.HangReceiveTime)
  return hangreceivetime_;
}
inline void TTowerReceiveHangRewardRsp::set_hangreceivetime(::google::protobuf::uint64 value) {
  set_has_hangreceivetime();
  hangreceivetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerReceiveHangRewardRsp.HangReceiveTime)
}

// -------------------------------------------------------------------

// TTowerBuyHangRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TTowerBuyHangRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TTowerBuyHangRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TTowerBuyHangRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerBuyHangRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TTowerBuyHangRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerBuyHangRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerBuyHangRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TTowerBuyHangRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerBuyHangRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TTowerBuyHangRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerBuyHangRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerBuyHangRewardRsp.RewardArr)
  return &rewardarr_;
}

// optional uint32 BoughtHangRewardNum = 2;
inline bool TTowerBuyHangRewardRsp::has_boughthangrewardnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerBuyHangRewardRsp::set_has_boughthangrewardnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerBuyHangRewardRsp::clear_has_boughthangrewardnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerBuyHangRewardRsp::clear_boughthangrewardnum() {
  boughthangrewardnum_ = 0u;
  clear_has_boughthangrewardnum();
}
inline ::google::protobuf::uint32 TTowerBuyHangRewardRsp::boughthangrewardnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerBuyHangRewardRsp.BoughtHangRewardNum)
  return boughthangrewardnum_;
}
inline void TTowerBuyHangRewardRsp::set_boughthangrewardnum(::google::protobuf::uint32 value) {
  set_has_boughthangrewardnum();
  boughthangrewardnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerBuyHangRewardRsp.BoughtHangRewardNum)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fTower_2eproto__INCLUDED
