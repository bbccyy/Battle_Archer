// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TSimpleItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSimpleItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArmItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArmItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAccessoryItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAccessoryItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSoulItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSoulItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMountEquipItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMountEquipItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExclEquipItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExclEquipItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExclEquipItemRefineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExclEquipItemRefineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastArmRefineRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastArmRefineRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeastArmItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeastArmItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTreasureItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTreasureItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSilkBagItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSilkBagItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDecorationBagItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDecorationBagItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDivineBagItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDivineBagItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TForceSoulItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TForceSoulItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fCommon_2eproto() {
  protobuf_AddDesc_net_2fCommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Common.proto");
  GOOGLE_CHECK(file != NULL);
  TSimpleItem_descriptor_ = file->message_type(0);
  static const int TSimpleItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSimpleItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSimpleItem, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSimpleItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSimpleItem, expiretime_),
  };
  TSimpleItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSimpleItem_descriptor_,
      TSimpleItem::default_instance_,
      TSimpleItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSimpleItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSimpleItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSimpleItem));
  TArmItem_descriptor_ = file->message_type(1);
  static const int TArmItem_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, refinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, refinesublv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, enhancelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, goldlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, carveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, carvecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, whitegoldlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, evolvelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, evolveexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, evolveluck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, evolverandattrarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, evolvecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, violetgoldlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, violetgoldexp_),
  };
  TArmItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArmItem_descriptor_,
      TArmItem::default_instance_,
      TArmItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArmItem));
  TAccessoryItem_descriptor_ = file->message_type(2);
  static const int TAccessoryItem_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAccessoryItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAccessoryItem, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAccessoryItem, refinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAccessoryItem, refinesublv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAccessoryItem, enhancelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAccessoryItem, enhanceexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAccessoryItem, enhancecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAccessoryItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAccessoryItem, goldlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAccessoryItem, whitegoldlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAccessoryItem, violetgoldlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAccessoryItem, violetgoldexp_),
  };
  TAccessoryItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAccessoryItem_descriptor_,
      TAccessoryItem::default_instance_,
      TAccessoryItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAccessoryItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAccessoryItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAccessoryItem));
  TSoulItem_descriptor_ = file->message_type(3);
  static const int TSoulItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSoulItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSoulItem, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSoulItem, advancelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSoulItem, num_),
  };
  TSoulItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSoulItem_descriptor_,
      TSoulItem::default_instance_,
      TSoulItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSoulItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSoulItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSoulItem));
  TMountEquipItem_descriptor_ = file->message_type(4);
  static const int TMountEquipItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipItem, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipItem, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipItem, exp_),
  };
  TMountEquipItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMountEquipItem_descriptor_,
      TMountEquipItem::default_instance_,
      TMountEquipItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMountEquipItem));
  TExclEquipItem_descriptor_ = file->message_type(5);
  static const int TExclEquipItem_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItem, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItem, advancelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItem, advancenum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItem, advancenum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItem, advancenum3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItem, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItem, goldlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItem, engravelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItem, refineinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItem, refinetotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItem, confirmedrefineinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItem, refinereward_),
  };
  TExclEquipItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExclEquipItem_descriptor_,
      TExclEquipItem::default_instance_,
      TExclEquipItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExclEquipItem));
  TExclEquipItemRefineInfo_descriptor_ = file->message_type(6);
  static const int TExclEquipItemRefineInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItemRefineInfo, posid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItemRefineInfo, attrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItemRefineInfo, attrvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItemRefineInfo, attrscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItemRefineInfo, process_),
  };
  TExclEquipItemRefineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExclEquipItemRefineInfo_descriptor_,
      TExclEquipItemRefineInfo::default_instance_,
      TExclEquipItemRefineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItemRefineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExclEquipItemRefineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExclEquipItemRefineInfo));
  TBeastArmRefineRecord_descriptor_ = file->message_type(7);
  static const int TBeastArmRefineRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastArmRefineRecord, randattrindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastArmRefineRecord, refineattrarr_),
  };
  TBeastArmRefineRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastArmRefineRecord_descriptor_,
      TBeastArmRefineRecord::default_instance_,
      TBeastArmRefineRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastArmRefineRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastArmRefineRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastArmRefineRecord));
  TBeastArmItem_descriptor_ = file->message_type(8);
  static const int TBeastArmItem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastArmItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastArmItem, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastArmItem, enhancelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastArmItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastArmItem, randattrarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastArmItem, refinerecordarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastArmItem, advancelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastArmItem, advancestarlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastArmItem, initialitemtid_),
  };
  TBeastArmItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeastArmItem_descriptor_,
      TBeastArmItem::default_instance_,
      TBeastArmItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastArmItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeastArmItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeastArmItem));
  TTreasureItem_descriptor_ = file->message_type(9);
  static const int TTreasureItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureItem, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureItem, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureItem, isactivated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureItem, isawaked_),
  };
  TTreasureItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTreasureItem_descriptor_,
      TTreasureItem::default_instance_,
      TTreasureItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTreasureItem));
  TSilkBagItem_descriptor_ = file->message_type(10);
  static const int TSilkBagItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagItem, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagItem, enhancelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagItem, enhanceexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagItem, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagItem, enhancecost_),
  };
  TSilkBagItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSilkBagItem_descriptor_,
      TSilkBagItem::default_instance_,
      TSilkBagItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSilkBagItem));
  TDecorationBagItem_descriptor_ = file->message_type(11);
  static const int TDecorationBagItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDecorationBagItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDecorationBagItem, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDecorationBagItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDecorationBagItem, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDecorationBagItem, enhancecost_),
  };
  TDecorationBagItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDecorationBagItem_descriptor_,
      TDecorationBagItem::default_instance_,
      TDecorationBagItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDecorationBagItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDecorationBagItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDecorationBagItem));
  TDivineBagItem_descriptor_ = file->message_type(12);
  static const int TDivineBagItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDivineBagItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDivineBagItem, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDivineBagItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDivineBagItem, smeltafterlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDivineBagItem, surmountafterlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDivineBagItem, smeltattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDivineBagItem, smeltunsubmitattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDivineBagItem, lastsmelttype_),
  };
  TDivineBagItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDivineBagItem_descriptor_,
      TDivineBagItem::default_instance_,
      TDivineBagItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDivineBagItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDivineBagItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDivineBagItem));
  TForceSoulItem_descriptor_ = file->message_type(13);
  static const int TForceSoulItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TForceSoulItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TForceSoulItem, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TForceSoulItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TForceSoulItem, enhancelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TForceSoulItem, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TForceSoulItem, enhancecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TForceSoulItem, starcost_),
  };
  TForceSoulItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TForceSoulItem_descriptor_,
      TForceSoulItem::default_instance_,
      TForceSoulItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TForceSoulItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TForceSoulItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TForceSoulItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fCommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSimpleItem_descriptor_, &TSimpleItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArmItem_descriptor_, &TArmItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAccessoryItem_descriptor_, &TAccessoryItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSoulItem_descriptor_, &TSoulItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMountEquipItem_descriptor_, &TMountEquipItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExclEquipItem_descriptor_, &TExclEquipItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExclEquipItemRefineInfo_descriptor_, &TExclEquipItemRefineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastArmRefineRecord_descriptor_, &TBeastArmRefineRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeastArmItem_descriptor_, &TBeastArmItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTreasureItem_descriptor_, &TTreasureItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSilkBagItem_descriptor_, &TSilkBagItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDecorationBagItem_descriptor_, &TDecorationBagItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDivineBagItem_descriptor_, &TDivineBagItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TForceSoulItem_descriptor_, &TForceSoulItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fCommon_2eproto() {
  delete TSimpleItem::default_instance_;
  delete TSimpleItem_reflection_;
  delete TArmItem::default_instance_;
  delete TArmItem_reflection_;
  delete TAccessoryItem::default_instance_;
  delete TAccessoryItem_reflection_;
  delete TSoulItem::default_instance_;
  delete TSoulItem_reflection_;
  delete TMountEquipItem::default_instance_;
  delete TMountEquipItem_reflection_;
  delete TExclEquipItem::default_instance_;
  delete TExclEquipItem_reflection_;
  delete TExclEquipItemRefineInfo::default_instance_;
  delete TExclEquipItemRefineInfo_reflection_;
  delete TBeastArmRefineRecord::default_instance_;
  delete TBeastArmRefineRecord_reflection_;
  delete TBeastArmItem::default_instance_;
  delete TBeastArmItem_reflection_;
  delete TTreasureItem::default_instance_;
  delete TTreasureItem_reflection_;
  delete TSilkBagItem::default_instance_;
  delete TSilkBagItem_reflection_;
  delete TDecorationBagItem::default_instance_;
  delete TDecorationBagItem_reflection_;
  delete TDivineBagItem::default_instance_;
  delete TDivineBagItem_reflection_;
  delete TForceSoulItem::default_instance_;
  delete TForceSoulItem_reflection_;
}

void protobuf_AddDesc_net_2fCommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fAttributer_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020net/Common.proto\022\002pb\032\027module/Attribute"
    "r.proto\032\026net/CommonReward.proto\"K\n\013TSimp"
    "leItem\022\016\n\006ItemId\030\001 \001(\005\022\013\n\003Tid\030\002 \001(\005\022\013\n\003N"
    "um\030\003 \001(\005\022\022\n\nExpireTime\030\004 \001(\004\"\202\003\n\010TArmIte"
    "m\022\016\n\006ItemId\030\001 \001(\005\022\013\n\003Tid\030\002 \001(\005\022\020\n\010Refine"
    "Lv\030\003 \001(\005\022\023\n\013RefineSubLv\030\004 \001(\005\022\021\n\tEnhance"
    "Lv\030\005 \001(\005\022\013\n\003Num\030\006 \001(\005\022\016\n\006GoldLv\030\007 \001(\005\022\017\n"
    "\007CarveId\030\010 \001(\005\022$\n\tCarveCost\030\t \003(\0132\021.pb.T"
    "CommonReward\022\023\n\013WhiteGoldLv\030\n \001(\005\022\020\n\010Evo"
    "lveLv\030\013 \001(\005\022\021\n\tEvolveExp\030\014 \001(\005\022\022\n\nEvolve"
    "Luck\030\r \001(\005\022)\n\021EvolveRandAttrArr\030\016 \003(\0132\016."
    "pb.TAttribute\022%\n\nEvolveCost\030\017 \003(\0132\021.pb.T"
    "CommonReward\022\024\n\014VioletGoldLv\030\020 \001(\005\022\025\n\rVi"
    "oletGoldExp\030\021 \001(\005\"\202\002\n\016TAccessoryItem\022\016\n\006"
    "ItemId\030\001 \001(\005\022\013\n\003Tid\030\002 \001(\005\022\020\n\010RefineLv\030\003 "
    "\001(\005\022\023\n\013RefineSubLv\030\004 \001(\005\022\021\n\tEnhanceLv\030\005 "
    "\001(\005\022\022\n\nEnhanceExp\030\006 \001(\005\022&\n\013EnhanceCost\030\007"
    " \003(\0132\021.pb.TCommonReward\022\013\n\003Num\030\010 \001(\005\022\016\n\006"
    "GoldLv\030\t \001(\005\022\023\n\013WhiteGoldLv\030\n \001(\005\022\024\n\014Vio"
    "letGoldLv\030\020 \001(\005\022\025\n\rVioletGoldExp\030\021 \001(\005\"H"
    "\n\tTSoulItem\022\016\n\006ItemId\030\001 \001(\r\022\013\n\003Tid\030\002 \001(\r"
    "\022\021\n\tAdvanceLv\030\003 \001(\r\022\013\n\003Num\030\004 \001(\r\"\\\n\017TMou"
    "ntEquipItem\022\016\n\006ItemId\030\001 \001(\r\022\013\n\003Tid\030\002 \001(\r"
    "\022\022\n\nExpireTime\030\003 \001(\004\022\013\n\003Num\030\004 \001(\r\022\013\n\003Exp"
    "\030\005 \001(\r\"\357\002\n\016TExclEquipItem\022\016\n\006ItemId\030\001 \001("
    "\r\022\013\n\003Tid\030\002 \001(\r\022\021\n\tAdvanceLv\030\003 \001(\r\022\023\n\013Adv"
    "anceNum1\030\004 \001(\r\022\023\n\013AdvanceNum2\030\005 \001(\r\022\023\n\013A"
    "dvanceNum3\030\006 \001(\r\022\016\n\006StarLv\030\007 \001(\r\022\013\n\003Num\030"
    "\010 \001(\r\022\016\n\006GoldLv\030\t \001(\r\022\021\n\tEngraveLv\030\n \001(\r"
    "\0220\n\nRefineInfo\030\013 \003(\0132\034.pb.TExclEquipItem"
    "RefineInfo\022\030\n\020RefineTotalScore\030\014 \001(\r\0229\n\023"
    "confirmedRefineInfo\030\r \001(\0132\034.pb.TExclEqui"
    "pItemRefineInfo\022\'\n\014refineReward\030\016 \003(\0132\021."
    "pb.TCommonReward\"p\n\030TExclEquipItemRefine"
    "Info\022\r\n\005posId\030\001 \001(\r\022\016\n\006AttrId\030\002 \001(\r\022\021\n\tA"
    "ttrValue\030\003 \001(\r\022\021\n\tAttrScore\030\004 \001(\r\022\017\n\007Pro"
    "cess\030\005 \001(\r\"E\n\025TBeastArmRefineRecord\022\025\n\rR"
    "andAttrIndex\030\001 \001(\r\022\025\n\rRefineAttrArr\030\002 \003("
    "\r\"\327\001\n\rTBeastArmItem\022\016\n\006ItemId\030\001 \001(\r\022\013\n\003T"
    "id\030\002 \001(\r\022\021\n\tEnhanceLv\030\003 \001(\r\022\013\n\003Num\030\004 \001(\r"
    "\022\023\n\013RandAttrArr\030\005 \003(\r\0222\n\017RefineRecordArr"
    "\030\006 \003(\0132\031.pb.TBeastArmRefineRecord\022\021\n\tAdv"
    "anceLv\030\007 \001(\r\022\025\n\rAdvanceStarLv\030\010 \001(\r\022\026\n\016I"
    "nitialItemTid\030\t \001(\r\"p\n\rTTreasureItem\022\016\n\006"
    "ItemId\030\001 \001(\005\022\013\n\003Tid\030\002 \001(\005\022\013\n\003Num\030\003 \001(\005\022\016"
    "\n\006StarLv\030\004 \001(\005\022\023\n\013IsActivated\030\005 \001(\005\022\020\n\010I"
    "sAwaked\030\006 \001(\005\"\227\001\n\014TSilkBagItem\022\016\n\006ItemId"
    "\030\001 \001(\005\022\013\n\003Tid\030\002 \001(\005\022\013\n\003Num\030\003 \001(\005\022\021\n\tEnha"
    "nceLv\030\004 \001(\005\022\022\n\nEnhanceExp\030\005 \001(\005\022\016\n\006StarL"
    "v\030\006 \001(\005\022&\n\013EnhanceCost\030\007 \003(\0132\021.pb.TCommo"
    "nReward\"v\n\022TDecorationBagItem\022\016\n\006ItemId\030"
    "\001 \001(\r\022\013\n\003Tid\030\002 \001(\r\022\013\n\003Num\030\003 \001(\r\022\016\n\006StarL"
    "v\030\004 \001(\r\022&\n\013EnhanceCost\030\007 \003(\0132\021.pb.TCommo"
    "nReward\"\340\001\n\016TDivineBagItem\022\016\n\006ItemId\030\001 \001"
    "(\005\022\013\n\003Tid\030\002 \001(\005\022\013\n\003Num\030\003 \001(\r\022\024\n\014SmeltAft"
    "erLv\030\004 \001(\005\022\027\n\017SurmountAfterLv\030\005 \001(\005\022*\n\016S"
    "meltAttribute\030\006 \003(\0132\022.pb.TAttributeInfo\022"
    "2\n\026SmeltUnSubmitAttribute\030\007 \003(\0132\022.pb.TAt"
    "tributeInfo\022\025\n\rLastSmeltType\030\010 \001(\005\"\252\001\n\016T"
    "ForceSoulItem\022\016\n\006ItemId\030\001 \001(\005\022\013\n\003Tid\030\002 \001"
    "(\005\022\013\n\003Num\030\003 \001(\005\022\021\n\tEnhanceLv\030\004 \001(\005\022\016\n\006St"
    "arLv\030\005 \001(\005\022&\n\013EnhanceCost\030\006 \003(\0132\021.pb.TCo"
    "mmonReward\022#\n\010StarCost\030\007 \003(\0132\021.pb.TCommo"
    "nReward", 2527);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Common.proto", &protobuf_RegisterTypes);
  TSimpleItem::default_instance_ = new TSimpleItem();
  TArmItem::default_instance_ = new TArmItem();
  TAccessoryItem::default_instance_ = new TAccessoryItem();
  TSoulItem::default_instance_ = new TSoulItem();
  TMountEquipItem::default_instance_ = new TMountEquipItem();
  TExclEquipItem::default_instance_ = new TExclEquipItem();
  TExclEquipItemRefineInfo::default_instance_ = new TExclEquipItemRefineInfo();
  TBeastArmRefineRecord::default_instance_ = new TBeastArmRefineRecord();
  TBeastArmItem::default_instance_ = new TBeastArmItem();
  TTreasureItem::default_instance_ = new TTreasureItem();
  TSilkBagItem::default_instance_ = new TSilkBagItem();
  TDecorationBagItem::default_instance_ = new TDecorationBagItem();
  TDivineBagItem::default_instance_ = new TDivineBagItem();
  TForceSoulItem::default_instance_ = new TForceSoulItem();
  TSimpleItem::default_instance_->InitAsDefaultInstance();
  TArmItem::default_instance_->InitAsDefaultInstance();
  TAccessoryItem::default_instance_->InitAsDefaultInstance();
  TSoulItem::default_instance_->InitAsDefaultInstance();
  TMountEquipItem::default_instance_->InitAsDefaultInstance();
  TExclEquipItem::default_instance_->InitAsDefaultInstance();
  TExclEquipItemRefineInfo::default_instance_->InitAsDefaultInstance();
  TBeastArmRefineRecord::default_instance_->InitAsDefaultInstance();
  TBeastArmItem::default_instance_->InitAsDefaultInstance();
  TTreasureItem::default_instance_->InitAsDefaultInstance();
  TSilkBagItem::default_instance_->InitAsDefaultInstance();
  TDecorationBagItem::default_instance_->InitAsDefaultInstance();
  TDivineBagItem::default_instance_->InitAsDefaultInstance();
  TForceSoulItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fCommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fCommon_2eproto {
  StaticDescriptorInitializer_net_2fCommon_2eproto() {
    protobuf_AddDesc_net_2fCommon_2eproto();
  }
} static_descriptor_initializer_net_2fCommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TSimpleItem::kItemIdFieldNumber;
const int TSimpleItem::kTidFieldNumber;
const int TSimpleItem::kNumFieldNumber;
const int TSimpleItem::kExpireTimeFieldNumber;
#endif  // !_MSC_VER

TSimpleItem::TSimpleItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSimpleItem)
}

void TSimpleItem::InitAsDefaultInstance() {
}

TSimpleItem::TSimpleItem(const TSimpleItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSimpleItem)
}

void TSimpleItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  tid_ = 0;
  num_ = 0;
  expiretime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSimpleItem::~TSimpleItem() {
  // @@protoc_insertion_point(destructor:pb.TSimpleItem)
  SharedDtor();
}

void TSimpleItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSimpleItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSimpleItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSimpleItem_descriptor_;
}

const TSimpleItem& TSimpleItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCommon_2eproto();
  return *default_instance_;
}

TSimpleItem* TSimpleItem::default_instance_ = NULL;

TSimpleItem* TSimpleItem::New() const {
  return new TSimpleItem;
}

void TSimpleItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSimpleItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSimpleItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSimpleItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Tid;
        break;
      }

      // optional int32 Tid = 2;
      case 2: {
        if (tag == 16) {
         parse_Tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Num;
        break;
      }

      // optional int32 Num = 3;
      case 3: {
        if (tag == 24) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ExpireTime;
        break;
      }

      // optional uint64 ExpireTime = 4;
      case 4: {
        if (tag == 32) {
         parse_ExpireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSimpleItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSimpleItem)
  return false;
#undef DO_
}

void TSimpleItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSimpleItem)
  // optional int32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 Tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tid(), output);
  }

  // optional int32 Num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional uint64 ExpireTime = 4;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->expiretime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSimpleItem)
}

::google::protobuf::uint8* TSimpleItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSimpleItem)
  // optional int32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 Tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tid(), target);
  }

  // optional int32 Num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional uint64 ExpireTime = 4;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->expiretime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSimpleItem)
  return target;
}

int TSimpleItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 Tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int32 Num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional uint64 ExpireTime = 4;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiretime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSimpleItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSimpleItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSimpleItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSimpleItem::MergeFrom(const TSimpleItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSimpleItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSimpleItem::CopyFrom(const TSimpleItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSimpleItem::IsInitialized() const {

  return true;
}

void TSimpleItem::Swap(TSimpleItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(tid_, other->tid_);
    std::swap(num_, other->num_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSimpleItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSimpleItem_descriptor_;
  metadata.reflection = TSimpleItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArmItem::kItemIdFieldNumber;
const int TArmItem::kTidFieldNumber;
const int TArmItem::kRefineLvFieldNumber;
const int TArmItem::kRefineSubLvFieldNumber;
const int TArmItem::kEnhanceLvFieldNumber;
const int TArmItem::kNumFieldNumber;
const int TArmItem::kGoldLvFieldNumber;
const int TArmItem::kCarveIdFieldNumber;
const int TArmItem::kCarveCostFieldNumber;
const int TArmItem::kWhiteGoldLvFieldNumber;
const int TArmItem::kEvolveLvFieldNumber;
const int TArmItem::kEvolveExpFieldNumber;
const int TArmItem::kEvolveLuckFieldNumber;
const int TArmItem::kEvolveRandAttrArrFieldNumber;
const int TArmItem::kEvolveCostFieldNumber;
const int TArmItem::kVioletGoldLvFieldNumber;
const int TArmItem::kVioletGoldExpFieldNumber;
#endif  // !_MSC_VER

TArmItem::TArmItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArmItem)
}

void TArmItem::InitAsDefaultInstance() {
}

TArmItem::TArmItem(const TArmItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArmItem)
}

void TArmItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  tid_ = 0;
  refinelv_ = 0;
  refinesublv_ = 0;
  enhancelv_ = 0;
  num_ = 0;
  goldlv_ = 0;
  carveid_ = 0;
  whitegoldlv_ = 0;
  evolvelv_ = 0;
  evolveexp_ = 0;
  evolveluck_ = 0;
  violetgoldlv_ = 0;
  violetgoldexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArmItem::~TArmItem() {
  // @@protoc_insertion_point(destructor:pb.TArmItem)
  SharedDtor();
}

void TArmItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArmItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArmItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArmItem_descriptor_;
}

const TArmItem& TArmItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCommon_2eproto();
  return *default_instance_;
}

TArmItem* TArmItem::default_instance_ = NULL;

TArmItem* TArmItem::New() const {
  return new TArmItem;
}

void TArmItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArmItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(itemid_, carveid_);
  }
  if (_has_bits_[8 / 32] & 40448) {
    ZR_(whitegoldlv_, evolveluck_);
    violetgoldlv_ = 0;
  }
  violetgoldexp_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  carvecost_.Clear();
  evolverandattrarr_.Clear();
  evolvecost_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArmItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArmItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Tid;
        break;
      }

      // optional int32 Tid = 2;
      case 2: {
        if (tag == 16) {
         parse_Tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RefineLv;
        break;
      }

      // optional int32 RefineLv = 3;
      case 3: {
        if (tag == 24) {
         parse_RefineLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refinelv_)));
          set_has_refinelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RefineSubLv;
        break;
      }

      // optional int32 RefineSubLv = 4;
      case 4: {
        if (tag == 32) {
         parse_RefineSubLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refinesublv_)));
          set_has_refinesublv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_EnhanceLv;
        break;
      }

      // optional int32 EnhanceLv = 5;
      case 5: {
        if (tag == 40) {
         parse_EnhanceLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhancelv_)));
          set_has_enhancelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Num;
        break;
      }

      // optional int32 Num = 6;
      case 6: {
        if (tag == 48) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_GoldLv;
        break;
      }

      // optional int32 GoldLv = 7;
      case 7: {
        if (tag == 56) {
         parse_GoldLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldlv_)));
          set_has_goldlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_CarveId;
        break;
      }

      // optional int32 CarveId = 8;
      case 8: {
        if (tag == 64) {
         parse_CarveId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carveid_)));
          set_has_carveid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_CarveCost;
        break;
      }

      // repeated .pb.TCommonReward CarveCost = 9;
      case 9: {
        if (tag == 74) {
         parse_CarveCost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_carvecost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_CarveCost;
        if (input->ExpectTag(80)) goto parse_WhiteGoldLv;
        break;
      }

      // optional int32 WhiteGoldLv = 10;
      case 10: {
        if (tag == 80) {
         parse_WhiteGoldLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whitegoldlv_)));
          set_has_whitegoldlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_EvolveLv;
        break;
      }

      // optional int32 EvolveLv = 11;
      case 11: {
        if (tag == 88) {
         parse_EvolveLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evolvelv_)));
          set_has_evolvelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_EvolveExp;
        break;
      }

      // optional int32 EvolveExp = 12;
      case 12: {
        if (tag == 96) {
         parse_EvolveExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evolveexp_)));
          set_has_evolveexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_EvolveLuck;
        break;
      }

      // optional int32 EvolveLuck = 13;
      case 13: {
        if (tag == 104) {
         parse_EvolveLuck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evolveluck_)));
          set_has_evolveluck();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_EvolveRandAttrArr;
        break;
      }

      // repeated .pb.TAttribute EvolveRandAttrArr = 14;
      case 14: {
        if (tag == 114) {
         parse_EvolveRandAttrArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_evolverandattrarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_EvolveRandAttrArr;
        if (input->ExpectTag(122)) goto parse_EvolveCost;
        break;
      }

      // repeated .pb.TCommonReward EvolveCost = 15;
      case 15: {
        if (tag == 122) {
         parse_EvolveCost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_evolvecost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_EvolveCost;
        if (input->ExpectTag(128)) goto parse_VioletGoldLv;
        break;
      }

      // optional int32 VioletGoldLv = 16;
      case 16: {
        if (tag == 128) {
         parse_VioletGoldLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &violetgoldlv_)));
          set_has_violetgoldlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_VioletGoldExp;
        break;
      }

      // optional int32 VioletGoldExp = 17;
      case 17: {
        if (tag == 136) {
         parse_VioletGoldExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &violetgoldexp_)));
          set_has_violetgoldexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArmItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArmItem)
  return false;
#undef DO_
}

void TArmItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArmItem)
  // optional int32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 Tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tid(), output);
  }

  // optional int32 RefineLv = 3;
  if (has_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->refinelv(), output);
  }

  // optional int32 RefineSubLv = 4;
  if (has_refinesublv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->refinesublv(), output);
  }

  // optional int32 EnhanceLv = 5;
  if (has_enhancelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->enhancelv(), output);
  }

  // optional int32 Num = 6;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num(), output);
  }

  // optional int32 GoldLv = 7;
  if (has_goldlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->goldlv(), output);
  }

  // optional int32 CarveId = 8;
  if (has_carveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->carveid(), output);
  }

  // repeated .pb.TCommonReward CarveCost = 9;
  for (int i = 0; i < this->carvecost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->carvecost(i), output);
  }

  // optional int32 WhiteGoldLv = 10;
  if (has_whitegoldlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->whitegoldlv(), output);
  }

  // optional int32 EvolveLv = 11;
  if (has_evolvelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->evolvelv(), output);
  }

  // optional int32 EvolveExp = 12;
  if (has_evolveexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->evolveexp(), output);
  }

  // optional int32 EvolveLuck = 13;
  if (has_evolveluck()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->evolveluck(), output);
  }

  // repeated .pb.TAttribute EvolveRandAttrArr = 14;
  for (int i = 0; i < this->evolverandattrarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->evolverandattrarr(i), output);
  }

  // repeated .pb.TCommonReward EvolveCost = 15;
  for (int i = 0; i < this->evolvecost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->evolvecost(i), output);
  }

  // optional int32 VioletGoldLv = 16;
  if (has_violetgoldlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->violetgoldlv(), output);
  }

  // optional int32 VioletGoldExp = 17;
  if (has_violetgoldexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->violetgoldexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArmItem)
}

::google::protobuf::uint8* TArmItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArmItem)
  // optional int32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 Tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tid(), target);
  }

  // optional int32 RefineLv = 3;
  if (has_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->refinelv(), target);
  }

  // optional int32 RefineSubLv = 4;
  if (has_refinesublv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->refinesublv(), target);
  }

  // optional int32 EnhanceLv = 5;
  if (has_enhancelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->enhancelv(), target);
  }

  // optional int32 Num = 6;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num(), target);
  }

  // optional int32 GoldLv = 7;
  if (has_goldlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->goldlv(), target);
  }

  // optional int32 CarveId = 8;
  if (has_carveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->carveid(), target);
  }

  // repeated .pb.TCommonReward CarveCost = 9;
  for (int i = 0; i < this->carvecost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->carvecost(i), target);
  }

  // optional int32 WhiteGoldLv = 10;
  if (has_whitegoldlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->whitegoldlv(), target);
  }

  // optional int32 EvolveLv = 11;
  if (has_evolvelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->evolvelv(), target);
  }

  // optional int32 EvolveExp = 12;
  if (has_evolveexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->evolveexp(), target);
  }

  // optional int32 EvolveLuck = 13;
  if (has_evolveluck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->evolveluck(), target);
  }

  // repeated .pb.TAttribute EvolveRandAttrArr = 14;
  for (int i = 0; i < this->evolverandattrarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->evolverandattrarr(i), target);
  }

  // repeated .pb.TCommonReward EvolveCost = 15;
  for (int i = 0; i < this->evolvecost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->evolvecost(i), target);
  }

  // optional int32 VioletGoldLv = 16;
  if (has_violetgoldlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->violetgoldlv(), target);
  }

  // optional int32 VioletGoldExp = 17;
  if (has_violetgoldexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->violetgoldexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArmItem)
  return target;
}

int TArmItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 Tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int32 RefineLv = 3;
    if (has_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refinelv());
    }

    // optional int32 RefineSubLv = 4;
    if (has_refinesublv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refinesublv());
    }

    // optional int32 EnhanceLv = 5;
    if (has_enhancelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhancelv());
    }

    // optional int32 Num = 6;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 GoldLv = 7;
    if (has_goldlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldlv());
    }

    // optional int32 CarveId = 8;
    if (has_carveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carveid());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 WhiteGoldLv = 10;
    if (has_whitegoldlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->whitegoldlv());
    }

    // optional int32 EvolveLv = 11;
    if (has_evolvelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->evolvelv());
    }

    // optional int32 EvolveExp = 12;
    if (has_evolveexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->evolveexp());
    }

    // optional int32 EvolveLuck = 13;
    if (has_evolveluck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->evolveluck());
    }

    // optional int32 VioletGoldLv = 16;
    if (has_violetgoldlv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->violetgoldlv());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 VioletGoldExp = 17;
    if (has_violetgoldexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->violetgoldexp());
    }

  }
  // repeated .pb.TCommonReward CarveCost = 9;
  total_size += 1 * this->carvecost_size();
  for (int i = 0; i < this->carvecost_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->carvecost(i));
  }

  // repeated .pb.TAttribute EvolveRandAttrArr = 14;
  total_size += 1 * this->evolverandattrarr_size();
  for (int i = 0; i < this->evolverandattrarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->evolverandattrarr(i));
  }

  // repeated .pb.TCommonReward EvolveCost = 15;
  total_size += 1 * this->evolvecost_size();
  for (int i = 0; i < this->evolvecost_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->evolvecost(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArmItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArmItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArmItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArmItem::MergeFrom(const TArmItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  carvecost_.MergeFrom(from.carvecost_);
  evolverandattrarr_.MergeFrom(from.evolverandattrarr_);
  evolvecost_.MergeFrom(from.evolvecost_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_refinelv()) {
      set_refinelv(from.refinelv());
    }
    if (from.has_refinesublv()) {
      set_refinesublv(from.refinesublv());
    }
    if (from.has_enhancelv()) {
      set_enhancelv(from.enhancelv());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_goldlv()) {
      set_goldlv(from.goldlv());
    }
    if (from.has_carveid()) {
      set_carveid(from.carveid());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_whitegoldlv()) {
      set_whitegoldlv(from.whitegoldlv());
    }
    if (from.has_evolvelv()) {
      set_evolvelv(from.evolvelv());
    }
    if (from.has_evolveexp()) {
      set_evolveexp(from.evolveexp());
    }
    if (from.has_evolveluck()) {
      set_evolveluck(from.evolveluck());
    }
    if (from.has_violetgoldlv()) {
      set_violetgoldlv(from.violetgoldlv());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_violetgoldexp()) {
      set_violetgoldexp(from.violetgoldexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArmItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArmItem::CopyFrom(const TArmItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArmItem::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->evolverandattrarr())) return false;
  return true;
}

void TArmItem::Swap(TArmItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(tid_, other->tid_);
    std::swap(refinelv_, other->refinelv_);
    std::swap(refinesublv_, other->refinesublv_);
    std::swap(enhancelv_, other->enhancelv_);
    std::swap(num_, other->num_);
    std::swap(goldlv_, other->goldlv_);
    std::swap(carveid_, other->carveid_);
    carvecost_.Swap(&other->carvecost_);
    std::swap(whitegoldlv_, other->whitegoldlv_);
    std::swap(evolvelv_, other->evolvelv_);
    std::swap(evolveexp_, other->evolveexp_);
    std::swap(evolveluck_, other->evolveluck_);
    evolverandattrarr_.Swap(&other->evolverandattrarr_);
    evolvecost_.Swap(&other->evolvecost_);
    std::swap(violetgoldlv_, other->violetgoldlv_);
    std::swap(violetgoldexp_, other->violetgoldexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArmItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArmItem_descriptor_;
  metadata.reflection = TArmItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAccessoryItem::kItemIdFieldNumber;
const int TAccessoryItem::kTidFieldNumber;
const int TAccessoryItem::kRefineLvFieldNumber;
const int TAccessoryItem::kRefineSubLvFieldNumber;
const int TAccessoryItem::kEnhanceLvFieldNumber;
const int TAccessoryItem::kEnhanceExpFieldNumber;
const int TAccessoryItem::kEnhanceCostFieldNumber;
const int TAccessoryItem::kNumFieldNumber;
const int TAccessoryItem::kGoldLvFieldNumber;
const int TAccessoryItem::kWhiteGoldLvFieldNumber;
const int TAccessoryItem::kVioletGoldLvFieldNumber;
const int TAccessoryItem::kVioletGoldExpFieldNumber;
#endif  // !_MSC_VER

TAccessoryItem::TAccessoryItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAccessoryItem)
}

void TAccessoryItem::InitAsDefaultInstance() {
}

TAccessoryItem::TAccessoryItem(const TAccessoryItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAccessoryItem)
}

void TAccessoryItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  tid_ = 0;
  refinelv_ = 0;
  refinesublv_ = 0;
  enhancelv_ = 0;
  enhanceexp_ = 0;
  num_ = 0;
  goldlv_ = 0;
  whitegoldlv_ = 0;
  violetgoldlv_ = 0;
  violetgoldexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAccessoryItem::~TAccessoryItem() {
  // @@protoc_insertion_point(destructor:pb.TAccessoryItem)
  SharedDtor();
}

void TAccessoryItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAccessoryItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAccessoryItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAccessoryItem_descriptor_;
}

const TAccessoryItem& TAccessoryItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCommon_2eproto();
  return *default_instance_;
}

TAccessoryItem* TAccessoryItem::default_instance_ = NULL;

TAccessoryItem* TAccessoryItem::New() const {
  return new TAccessoryItem;
}

void TAccessoryItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAccessoryItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(itemid_, enhanceexp_);
    num_ = 0;
  }
  ZR_(goldlv_, violetgoldexp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  enhancecost_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAccessoryItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAccessoryItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Tid;
        break;
      }

      // optional int32 Tid = 2;
      case 2: {
        if (tag == 16) {
         parse_Tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RefineLv;
        break;
      }

      // optional int32 RefineLv = 3;
      case 3: {
        if (tag == 24) {
         parse_RefineLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refinelv_)));
          set_has_refinelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RefineSubLv;
        break;
      }

      // optional int32 RefineSubLv = 4;
      case 4: {
        if (tag == 32) {
         parse_RefineSubLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refinesublv_)));
          set_has_refinesublv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_EnhanceLv;
        break;
      }

      // optional int32 EnhanceLv = 5;
      case 5: {
        if (tag == 40) {
         parse_EnhanceLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhancelv_)));
          set_has_enhancelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_EnhanceExp;
        break;
      }

      // optional int32 EnhanceExp = 6;
      case 6: {
        if (tag == 48) {
         parse_EnhanceExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhanceexp_)));
          set_has_enhanceexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_EnhanceCost;
        break;
      }

      // repeated .pb.TCommonReward EnhanceCost = 7;
      case 7: {
        if (tag == 58) {
         parse_EnhanceCost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enhancecost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_EnhanceCost;
        if (input->ExpectTag(64)) goto parse_Num;
        break;
      }

      // optional int32 Num = 8;
      case 8: {
        if (tag == 64) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_GoldLv;
        break;
      }

      // optional int32 GoldLv = 9;
      case 9: {
        if (tag == 72) {
         parse_GoldLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldlv_)));
          set_has_goldlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_WhiteGoldLv;
        break;
      }

      // optional int32 WhiteGoldLv = 10;
      case 10: {
        if (tag == 80) {
         parse_WhiteGoldLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whitegoldlv_)));
          set_has_whitegoldlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_VioletGoldLv;
        break;
      }

      // optional int32 VioletGoldLv = 16;
      case 16: {
        if (tag == 128) {
         parse_VioletGoldLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &violetgoldlv_)));
          set_has_violetgoldlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_VioletGoldExp;
        break;
      }

      // optional int32 VioletGoldExp = 17;
      case 17: {
        if (tag == 136) {
         parse_VioletGoldExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &violetgoldexp_)));
          set_has_violetgoldexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAccessoryItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAccessoryItem)
  return false;
#undef DO_
}

void TAccessoryItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAccessoryItem)
  // optional int32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 Tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tid(), output);
  }

  // optional int32 RefineLv = 3;
  if (has_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->refinelv(), output);
  }

  // optional int32 RefineSubLv = 4;
  if (has_refinesublv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->refinesublv(), output);
  }

  // optional int32 EnhanceLv = 5;
  if (has_enhancelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->enhancelv(), output);
  }

  // optional int32 EnhanceExp = 6;
  if (has_enhanceexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->enhanceexp(), output);
  }

  // repeated .pb.TCommonReward EnhanceCost = 7;
  for (int i = 0; i < this->enhancecost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->enhancecost(i), output);
  }

  // optional int32 Num = 8;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num(), output);
  }

  // optional int32 GoldLv = 9;
  if (has_goldlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->goldlv(), output);
  }

  // optional int32 WhiteGoldLv = 10;
  if (has_whitegoldlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->whitegoldlv(), output);
  }

  // optional int32 VioletGoldLv = 16;
  if (has_violetgoldlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->violetgoldlv(), output);
  }

  // optional int32 VioletGoldExp = 17;
  if (has_violetgoldexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->violetgoldexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAccessoryItem)
}

::google::protobuf::uint8* TAccessoryItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAccessoryItem)
  // optional int32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 Tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tid(), target);
  }

  // optional int32 RefineLv = 3;
  if (has_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->refinelv(), target);
  }

  // optional int32 RefineSubLv = 4;
  if (has_refinesublv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->refinesublv(), target);
  }

  // optional int32 EnhanceLv = 5;
  if (has_enhancelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->enhancelv(), target);
  }

  // optional int32 EnhanceExp = 6;
  if (has_enhanceexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->enhanceexp(), target);
  }

  // repeated .pb.TCommonReward EnhanceCost = 7;
  for (int i = 0; i < this->enhancecost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->enhancecost(i), target);
  }

  // optional int32 Num = 8;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->num(), target);
  }

  // optional int32 GoldLv = 9;
  if (has_goldlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->goldlv(), target);
  }

  // optional int32 WhiteGoldLv = 10;
  if (has_whitegoldlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->whitegoldlv(), target);
  }

  // optional int32 VioletGoldLv = 16;
  if (has_violetgoldlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->violetgoldlv(), target);
  }

  // optional int32 VioletGoldExp = 17;
  if (has_violetgoldexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->violetgoldexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAccessoryItem)
  return target;
}

int TAccessoryItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 Tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int32 RefineLv = 3;
    if (has_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refinelv());
    }

    // optional int32 RefineSubLv = 4;
    if (has_refinesublv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refinesublv());
    }

    // optional int32 EnhanceLv = 5;
    if (has_enhancelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhancelv());
    }

    // optional int32 EnhanceExp = 6;
    if (has_enhanceexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhanceexp());
    }

    // optional int32 Num = 8;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 GoldLv = 9;
    if (has_goldlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldlv());
    }

    // optional int32 WhiteGoldLv = 10;
    if (has_whitegoldlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->whitegoldlv());
    }

    // optional int32 VioletGoldLv = 16;
    if (has_violetgoldlv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->violetgoldlv());
    }

    // optional int32 VioletGoldExp = 17;
    if (has_violetgoldexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->violetgoldexp());
    }

  }
  // repeated .pb.TCommonReward EnhanceCost = 7;
  total_size += 1 * this->enhancecost_size();
  for (int i = 0; i < this->enhancecost_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enhancecost(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAccessoryItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAccessoryItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAccessoryItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAccessoryItem::MergeFrom(const TAccessoryItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  enhancecost_.MergeFrom(from.enhancecost_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_refinelv()) {
      set_refinelv(from.refinelv());
    }
    if (from.has_refinesublv()) {
      set_refinesublv(from.refinesublv());
    }
    if (from.has_enhancelv()) {
      set_enhancelv(from.enhancelv());
    }
    if (from.has_enhanceexp()) {
      set_enhanceexp(from.enhanceexp());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_goldlv()) {
      set_goldlv(from.goldlv());
    }
    if (from.has_whitegoldlv()) {
      set_whitegoldlv(from.whitegoldlv());
    }
    if (from.has_violetgoldlv()) {
      set_violetgoldlv(from.violetgoldlv());
    }
    if (from.has_violetgoldexp()) {
      set_violetgoldexp(from.violetgoldexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAccessoryItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAccessoryItem::CopyFrom(const TAccessoryItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAccessoryItem::IsInitialized() const {

  return true;
}

void TAccessoryItem::Swap(TAccessoryItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(tid_, other->tid_);
    std::swap(refinelv_, other->refinelv_);
    std::swap(refinesublv_, other->refinesublv_);
    std::swap(enhancelv_, other->enhancelv_);
    std::swap(enhanceexp_, other->enhanceexp_);
    enhancecost_.Swap(&other->enhancecost_);
    std::swap(num_, other->num_);
    std::swap(goldlv_, other->goldlv_);
    std::swap(whitegoldlv_, other->whitegoldlv_);
    std::swap(violetgoldlv_, other->violetgoldlv_);
    std::swap(violetgoldexp_, other->violetgoldexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAccessoryItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAccessoryItem_descriptor_;
  metadata.reflection = TAccessoryItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSoulItem::kItemIdFieldNumber;
const int TSoulItem::kTidFieldNumber;
const int TSoulItem::kAdvanceLvFieldNumber;
const int TSoulItem::kNumFieldNumber;
#endif  // !_MSC_VER

TSoulItem::TSoulItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSoulItem)
}

void TSoulItem::InitAsDefaultInstance() {
}

TSoulItem::TSoulItem(const TSoulItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSoulItem)
}

void TSoulItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  tid_ = 0u;
  advancelv_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSoulItem::~TSoulItem() {
  // @@protoc_insertion_point(destructor:pb.TSoulItem)
  SharedDtor();
}

void TSoulItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSoulItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSoulItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSoulItem_descriptor_;
}

const TSoulItem& TSoulItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCommon_2eproto();
  return *default_instance_;
}

TSoulItem* TSoulItem::default_instance_ = NULL;

TSoulItem* TSoulItem::New() const {
  return new TSoulItem;
}

void TSoulItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSoulItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSoulItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSoulItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Tid;
        break;
      }

      // optional uint32 Tid = 2;
      case 2: {
        if (tag == 16) {
         parse_Tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AdvanceLv;
        break;
      }

      // optional uint32 AdvanceLv = 3;
      case 3: {
        if (tag == 24) {
         parse_AdvanceLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancelv_)));
          set_has_advancelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 4;
      case 4: {
        if (tag == 32) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSoulItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSoulItem)
  return false;
#undef DO_
}

void TSoulItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSoulItem)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 Tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
  }

  // optional uint32 AdvanceLv = 3;
  if (has_advancelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->advancelv(), output);
  }

  // optional uint32 Num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSoulItem)
}

::google::protobuf::uint8* TSoulItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSoulItem)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 Tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tid(), target);
  }

  // optional uint32 AdvanceLv = 3;
  if (has_advancelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->advancelv(), target);
  }

  // optional uint32 Num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSoulItem)
  return target;
}

int TSoulItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 Tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint32 AdvanceLv = 3;
    if (has_advancelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancelv());
    }

    // optional uint32 Num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSoulItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSoulItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSoulItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSoulItem::MergeFrom(const TSoulItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_advancelv()) {
      set_advancelv(from.advancelv());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSoulItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSoulItem::CopyFrom(const TSoulItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSoulItem::IsInitialized() const {

  return true;
}

void TSoulItem::Swap(TSoulItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(tid_, other->tid_);
    std::swap(advancelv_, other->advancelv_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSoulItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSoulItem_descriptor_;
  metadata.reflection = TSoulItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMountEquipItem::kItemIdFieldNumber;
const int TMountEquipItem::kTidFieldNumber;
const int TMountEquipItem::kExpireTimeFieldNumber;
const int TMountEquipItem::kNumFieldNumber;
const int TMountEquipItem::kExpFieldNumber;
#endif  // !_MSC_VER

TMountEquipItem::TMountEquipItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMountEquipItem)
}

void TMountEquipItem::InitAsDefaultInstance() {
}

TMountEquipItem::TMountEquipItem(const TMountEquipItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMountEquipItem)
}

void TMountEquipItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  tid_ = 0u;
  expiretime_ = GOOGLE_ULONGLONG(0);
  num_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMountEquipItem::~TMountEquipItem() {
  // @@protoc_insertion_point(destructor:pb.TMountEquipItem)
  SharedDtor();
}

void TMountEquipItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMountEquipItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMountEquipItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMountEquipItem_descriptor_;
}

const TMountEquipItem& TMountEquipItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCommon_2eproto();
  return *default_instance_;
}

TMountEquipItem* TMountEquipItem::default_instance_ = NULL;

TMountEquipItem* TMountEquipItem::New() const {
  return new TMountEquipItem;
}

void TMountEquipItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TMountEquipItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(itemid_, exp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMountEquipItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMountEquipItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Tid;
        break;
      }

      // optional uint32 Tid = 2;
      case 2: {
        if (tag == 16) {
         parse_Tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ExpireTime;
        break;
      }

      // optional uint64 ExpireTime = 3;
      case 3: {
        if (tag == 24) {
         parse_ExpireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 4;
      case 4: {
        if (tag == 32) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Exp;
        break;
      }

      // optional uint32 Exp = 5;
      case 5: {
        if (tag == 40) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMountEquipItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMountEquipItem)
  return false;
#undef DO_
}

void TMountEquipItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMountEquipItem)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 Tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
  }

  // optional uint64 ExpireTime = 3;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->expiretime(), output);
  }

  // optional uint32 Num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  // optional uint32 Exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMountEquipItem)
}

::google::protobuf::uint8* TMountEquipItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMountEquipItem)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 Tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tid(), target);
  }

  // optional uint64 ExpireTime = 3;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->expiretime(), target);
  }

  // optional uint32 Num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  // optional uint32 Exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMountEquipItem)
  return target;
}

int TMountEquipItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 Tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint64 ExpireTime = 3;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiretime());
    }

    // optional uint32 Num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 Exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMountEquipItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMountEquipItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMountEquipItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMountEquipItem::MergeFrom(const TMountEquipItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMountEquipItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMountEquipItem::CopyFrom(const TMountEquipItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMountEquipItem::IsInitialized() const {

  return true;
}

void TMountEquipItem::Swap(TMountEquipItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(tid_, other->tid_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(num_, other->num_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMountEquipItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMountEquipItem_descriptor_;
  metadata.reflection = TMountEquipItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExclEquipItem::kItemIdFieldNumber;
const int TExclEquipItem::kTidFieldNumber;
const int TExclEquipItem::kAdvanceLvFieldNumber;
const int TExclEquipItem::kAdvanceNum1FieldNumber;
const int TExclEquipItem::kAdvanceNum2FieldNumber;
const int TExclEquipItem::kAdvanceNum3FieldNumber;
const int TExclEquipItem::kStarLvFieldNumber;
const int TExclEquipItem::kNumFieldNumber;
const int TExclEquipItem::kGoldLvFieldNumber;
const int TExclEquipItem::kEngraveLvFieldNumber;
const int TExclEquipItem::kRefineInfoFieldNumber;
const int TExclEquipItem::kRefineTotalScoreFieldNumber;
const int TExclEquipItem::kConfirmedRefineInfoFieldNumber;
const int TExclEquipItem::kRefineRewardFieldNumber;
#endif  // !_MSC_VER

TExclEquipItem::TExclEquipItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExclEquipItem)
}

void TExclEquipItem::InitAsDefaultInstance() {
  confirmedrefineinfo_ = const_cast< ::pb::TExclEquipItemRefineInfo*>(&::pb::TExclEquipItemRefineInfo::default_instance());
}

TExclEquipItem::TExclEquipItem(const TExclEquipItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExclEquipItem)
}

void TExclEquipItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  tid_ = 0u;
  advancelv_ = 0u;
  advancenum1_ = 0u;
  advancenum2_ = 0u;
  advancenum3_ = 0u;
  starlv_ = 0u;
  num_ = 0u;
  goldlv_ = 0u;
  engravelv_ = 0u;
  refinetotalscore_ = 0u;
  confirmedrefineinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExclEquipItem::~TExclEquipItem() {
  // @@protoc_insertion_point(destructor:pb.TExclEquipItem)
  SharedDtor();
}

void TExclEquipItem::SharedDtor() {
  if (this != default_instance_) {
    delete confirmedrefineinfo_;
  }
}

void TExclEquipItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExclEquipItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExclEquipItem_descriptor_;
}

const TExclEquipItem& TExclEquipItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCommon_2eproto();
  return *default_instance_;
}

TExclEquipItem* TExclEquipItem::default_instance_ = NULL;

TExclEquipItem* TExclEquipItem::New() const {
  return new TExclEquipItem;
}

void TExclEquipItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TExclEquipItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(itemid_, num_);
  }
  if (_has_bits_[8 / 32] & 6912) {
    ZR_(goldlv_, engravelv_);
    refinetotalscore_ = 0u;
    if (has_confirmedrefineinfo()) {
      if (confirmedrefineinfo_ != NULL) confirmedrefineinfo_->::pb::TExclEquipItemRefineInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  refineinfo_.Clear();
  refinereward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExclEquipItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExclEquipItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Tid;
        break;
      }

      // optional uint32 Tid = 2;
      case 2: {
        if (tag == 16) {
         parse_Tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AdvanceLv;
        break;
      }

      // optional uint32 AdvanceLv = 3;
      case 3: {
        if (tag == 24) {
         parse_AdvanceLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancelv_)));
          set_has_advancelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AdvanceNum1;
        break;
      }

      // optional uint32 AdvanceNum1 = 4;
      case 4: {
        if (tag == 32) {
         parse_AdvanceNum1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancenum1_)));
          set_has_advancenum1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AdvanceNum2;
        break;
      }

      // optional uint32 AdvanceNum2 = 5;
      case 5: {
        if (tag == 40) {
         parse_AdvanceNum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancenum2_)));
          set_has_advancenum2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_AdvanceNum3;
        break;
      }

      // optional uint32 AdvanceNum3 = 6;
      case 6: {
        if (tag == 48) {
         parse_AdvanceNum3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancenum3_)));
          set_has_advancenum3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_StarLv;
        break;
      }

      // optional uint32 StarLv = 7;
      case 7: {
        if (tag == 56) {
         parse_StarLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 8;
      case 8: {
        if (tag == 64) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_GoldLv;
        break;
      }

      // optional uint32 GoldLv = 9;
      case 9: {
        if (tag == 72) {
         parse_GoldLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldlv_)));
          set_has_goldlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_EngraveLv;
        break;
      }

      // optional uint32 EngraveLv = 10;
      case 10: {
        if (tag == 80) {
         parse_EngraveLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &engravelv_)));
          set_has_engravelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_RefineInfo;
        break;
      }

      // repeated .pb.TExclEquipItemRefineInfo RefineInfo = 11;
      case 11: {
        if (tag == 90) {
         parse_RefineInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refineinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_RefineInfo;
        if (input->ExpectTag(96)) goto parse_RefineTotalScore;
        break;
      }

      // optional uint32 RefineTotalScore = 12;
      case 12: {
        if (tag == 96) {
         parse_RefineTotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refinetotalscore_)));
          set_has_refinetotalscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_confirmedRefineInfo;
        break;
      }

      // optional .pb.TExclEquipItemRefineInfo confirmedRefineInfo = 13;
      case 13: {
        if (tag == 106) {
         parse_confirmedRefineInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmedrefineinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_refineReward;
        break;
      }

      // repeated .pb.TCommonReward refineReward = 14;
      case 14: {
        if (tag == 114) {
         parse_refineReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refinereward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_refineReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExclEquipItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExclEquipItem)
  return false;
#undef DO_
}

void TExclEquipItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExclEquipItem)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 Tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
  }

  // optional uint32 AdvanceLv = 3;
  if (has_advancelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->advancelv(), output);
  }

  // optional uint32 AdvanceNum1 = 4;
  if (has_advancenum1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->advancenum1(), output);
  }

  // optional uint32 AdvanceNum2 = 5;
  if (has_advancenum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->advancenum2(), output);
  }

  // optional uint32 AdvanceNum3 = 6;
  if (has_advancenum3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->advancenum3(), output);
  }

  // optional uint32 StarLv = 7;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->starlv(), output);
  }

  // optional uint32 Num = 8;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num(), output);
  }

  // optional uint32 GoldLv = 9;
  if (has_goldlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->goldlv(), output);
  }

  // optional uint32 EngraveLv = 10;
  if (has_engravelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->engravelv(), output);
  }

  // repeated .pb.TExclEquipItemRefineInfo RefineInfo = 11;
  for (int i = 0; i < this->refineinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->refineinfo(i), output);
  }

  // optional uint32 RefineTotalScore = 12;
  if (has_refinetotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->refinetotalscore(), output);
  }

  // optional .pb.TExclEquipItemRefineInfo confirmedRefineInfo = 13;
  if (has_confirmedrefineinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->confirmedrefineinfo(), output);
  }

  // repeated .pb.TCommonReward refineReward = 14;
  for (int i = 0; i < this->refinereward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->refinereward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExclEquipItem)
}

::google::protobuf::uint8* TExclEquipItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExclEquipItem)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 Tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tid(), target);
  }

  // optional uint32 AdvanceLv = 3;
  if (has_advancelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->advancelv(), target);
  }

  // optional uint32 AdvanceNum1 = 4;
  if (has_advancenum1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->advancenum1(), target);
  }

  // optional uint32 AdvanceNum2 = 5;
  if (has_advancenum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->advancenum2(), target);
  }

  // optional uint32 AdvanceNum3 = 6;
  if (has_advancenum3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->advancenum3(), target);
  }

  // optional uint32 StarLv = 7;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->starlv(), target);
  }

  // optional uint32 Num = 8;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num(), target);
  }

  // optional uint32 GoldLv = 9;
  if (has_goldlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->goldlv(), target);
  }

  // optional uint32 EngraveLv = 10;
  if (has_engravelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->engravelv(), target);
  }

  // repeated .pb.TExclEquipItemRefineInfo RefineInfo = 11;
  for (int i = 0; i < this->refineinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->refineinfo(i), target);
  }

  // optional uint32 RefineTotalScore = 12;
  if (has_refinetotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->refinetotalscore(), target);
  }

  // optional .pb.TExclEquipItemRefineInfo confirmedRefineInfo = 13;
  if (has_confirmedrefineinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->confirmedrefineinfo(), target);
  }

  // repeated .pb.TCommonReward refineReward = 14;
  for (int i = 0; i < this->refinereward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->refinereward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExclEquipItem)
  return target;
}

int TExclEquipItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 Tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint32 AdvanceLv = 3;
    if (has_advancelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancelv());
    }

    // optional uint32 AdvanceNum1 = 4;
    if (has_advancenum1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancenum1());
    }

    // optional uint32 AdvanceNum2 = 5;
    if (has_advancenum2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancenum2());
    }

    // optional uint32 AdvanceNum3 = 6;
    if (has_advancenum3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancenum3());
    }

    // optional uint32 StarLv = 7;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlv());
    }

    // optional uint32 Num = 8;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 GoldLv = 9;
    if (has_goldlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldlv());
    }

    // optional uint32 EngraveLv = 10;
    if (has_engravelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->engravelv());
    }

    // optional uint32 RefineTotalScore = 12;
    if (has_refinetotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refinetotalscore());
    }

    // optional .pb.TExclEquipItemRefineInfo confirmedRefineInfo = 13;
    if (has_confirmedrefineinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmedrefineinfo());
    }

  }
  // repeated .pb.TExclEquipItemRefineInfo RefineInfo = 11;
  total_size += 1 * this->refineinfo_size();
  for (int i = 0; i < this->refineinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refineinfo(i));
  }

  // repeated .pb.TCommonReward refineReward = 14;
  total_size += 1 * this->refinereward_size();
  for (int i = 0; i < this->refinereward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refinereward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExclEquipItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExclEquipItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExclEquipItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExclEquipItem::MergeFrom(const TExclEquipItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  refineinfo_.MergeFrom(from.refineinfo_);
  refinereward_.MergeFrom(from.refinereward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_advancelv()) {
      set_advancelv(from.advancelv());
    }
    if (from.has_advancenum1()) {
      set_advancenum1(from.advancenum1());
    }
    if (from.has_advancenum2()) {
      set_advancenum2(from.advancenum2());
    }
    if (from.has_advancenum3()) {
      set_advancenum3(from.advancenum3());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_goldlv()) {
      set_goldlv(from.goldlv());
    }
    if (from.has_engravelv()) {
      set_engravelv(from.engravelv());
    }
    if (from.has_refinetotalscore()) {
      set_refinetotalscore(from.refinetotalscore());
    }
    if (from.has_confirmedrefineinfo()) {
      mutable_confirmedrefineinfo()->::pb::TExclEquipItemRefineInfo::MergeFrom(from.confirmedrefineinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExclEquipItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExclEquipItem::CopyFrom(const TExclEquipItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExclEquipItem::IsInitialized() const {

  return true;
}

void TExclEquipItem::Swap(TExclEquipItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(tid_, other->tid_);
    std::swap(advancelv_, other->advancelv_);
    std::swap(advancenum1_, other->advancenum1_);
    std::swap(advancenum2_, other->advancenum2_);
    std::swap(advancenum3_, other->advancenum3_);
    std::swap(starlv_, other->starlv_);
    std::swap(num_, other->num_);
    std::swap(goldlv_, other->goldlv_);
    std::swap(engravelv_, other->engravelv_);
    refineinfo_.Swap(&other->refineinfo_);
    std::swap(refinetotalscore_, other->refinetotalscore_);
    std::swap(confirmedrefineinfo_, other->confirmedrefineinfo_);
    refinereward_.Swap(&other->refinereward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExclEquipItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExclEquipItem_descriptor_;
  metadata.reflection = TExclEquipItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExclEquipItemRefineInfo::kPosIdFieldNumber;
const int TExclEquipItemRefineInfo::kAttrIdFieldNumber;
const int TExclEquipItemRefineInfo::kAttrValueFieldNumber;
const int TExclEquipItemRefineInfo::kAttrScoreFieldNumber;
const int TExclEquipItemRefineInfo::kProcessFieldNumber;
#endif  // !_MSC_VER

TExclEquipItemRefineInfo::TExclEquipItemRefineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExclEquipItemRefineInfo)
}

void TExclEquipItemRefineInfo::InitAsDefaultInstance() {
}

TExclEquipItemRefineInfo::TExclEquipItemRefineInfo(const TExclEquipItemRefineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExclEquipItemRefineInfo)
}

void TExclEquipItemRefineInfo::SharedCtor() {
  _cached_size_ = 0;
  posid_ = 0u;
  attrid_ = 0u;
  attrvalue_ = 0u;
  attrscore_ = 0u;
  process_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExclEquipItemRefineInfo::~TExclEquipItemRefineInfo() {
  // @@protoc_insertion_point(destructor:pb.TExclEquipItemRefineInfo)
  SharedDtor();
}

void TExclEquipItemRefineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TExclEquipItemRefineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExclEquipItemRefineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExclEquipItemRefineInfo_descriptor_;
}

const TExclEquipItemRefineInfo& TExclEquipItemRefineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCommon_2eproto();
  return *default_instance_;
}

TExclEquipItemRefineInfo* TExclEquipItemRefineInfo::default_instance_ = NULL;

TExclEquipItemRefineInfo* TExclEquipItemRefineInfo::New() const {
  return new TExclEquipItemRefineInfo;
}

void TExclEquipItemRefineInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TExclEquipItemRefineInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(posid_, process_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExclEquipItemRefineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExclEquipItemRefineInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 posId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posid_)));
          set_has_posid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AttrId;
        break;
      }

      // optional uint32 AttrId = 2;
      case 2: {
        if (tag == 16) {
         parse_AttrId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrid_)));
          set_has_attrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AttrValue;
        break;
      }

      // optional uint32 AttrValue = 3;
      case 3: {
        if (tag == 24) {
         parse_AttrValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrvalue_)));
          set_has_attrvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AttrScore;
        break;
      }

      // optional uint32 AttrScore = 4;
      case 4: {
        if (tag == 32) {
         parse_AttrScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrscore_)));
          set_has_attrscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Process;
        break;
      }

      // optional uint32 Process = 5;
      case 5: {
        if (tag == 40) {
         parse_Process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_)));
          set_has_process();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExclEquipItemRefineInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExclEquipItemRefineInfo)
  return false;
#undef DO_
}

void TExclEquipItemRefineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExclEquipItemRefineInfo)
  // optional uint32 posId = 1;
  if (has_posid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->posid(), output);
  }

  // optional uint32 AttrId = 2;
  if (has_attrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attrid(), output);
  }

  // optional uint32 AttrValue = 3;
  if (has_attrvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attrvalue(), output);
  }

  // optional uint32 AttrScore = 4;
  if (has_attrscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attrscore(), output);
  }

  // optional uint32 Process = 5;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->process(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExclEquipItemRefineInfo)
}

::google::protobuf::uint8* TExclEquipItemRefineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExclEquipItemRefineInfo)
  // optional uint32 posId = 1;
  if (has_posid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->posid(), target);
  }

  // optional uint32 AttrId = 2;
  if (has_attrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attrid(), target);
  }

  // optional uint32 AttrValue = 3;
  if (has_attrvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attrvalue(), target);
  }

  // optional uint32 AttrScore = 4;
  if (has_attrscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attrscore(), target);
  }

  // optional uint32 Process = 5;
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->process(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExclEquipItemRefineInfo)
  return target;
}

int TExclEquipItemRefineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 posId = 1;
    if (has_posid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posid());
    }

    // optional uint32 AttrId = 2;
    if (has_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrid());
    }

    // optional uint32 AttrValue = 3;
    if (has_attrvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrvalue());
    }

    // optional uint32 AttrScore = 4;
    if (has_attrscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrscore());
    }

    // optional uint32 Process = 5;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExclEquipItemRefineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExclEquipItemRefineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExclEquipItemRefineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExclEquipItemRefineInfo::MergeFrom(const TExclEquipItemRefineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posid()) {
      set_posid(from.posid());
    }
    if (from.has_attrid()) {
      set_attrid(from.attrid());
    }
    if (from.has_attrvalue()) {
      set_attrvalue(from.attrvalue());
    }
    if (from.has_attrscore()) {
      set_attrscore(from.attrscore());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExclEquipItemRefineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExclEquipItemRefineInfo::CopyFrom(const TExclEquipItemRefineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExclEquipItemRefineInfo::IsInitialized() const {

  return true;
}

void TExclEquipItemRefineInfo::Swap(TExclEquipItemRefineInfo* other) {
  if (other != this) {
    std::swap(posid_, other->posid_);
    std::swap(attrid_, other->attrid_);
    std::swap(attrvalue_, other->attrvalue_);
    std::swap(attrscore_, other->attrscore_);
    std::swap(process_, other->process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExclEquipItemRefineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExclEquipItemRefineInfo_descriptor_;
  metadata.reflection = TExclEquipItemRefineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastArmRefineRecord::kRandAttrIndexFieldNumber;
const int TBeastArmRefineRecord::kRefineAttrArrFieldNumber;
#endif  // !_MSC_VER

TBeastArmRefineRecord::TBeastArmRefineRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastArmRefineRecord)
}

void TBeastArmRefineRecord::InitAsDefaultInstance() {
}

TBeastArmRefineRecord::TBeastArmRefineRecord(const TBeastArmRefineRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastArmRefineRecord)
}

void TBeastArmRefineRecord::SharedCtor() {
  _cached_size_ = 0;
  randattrindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastArmRefineRecord::~TBeastArmRefineRecord() {
  // @@protoc_insertion_point(destructor:pb.TBeastArmRefineRecord)
  SharedDtor();
}

void TBeastArmRefineRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastArmRefineRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastArmRefineRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastArmRefineRecord_descriptor_;
}

const TBeastArmRefineRecord& TBeastArmRefineRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCommon_2eproto();
  return *default_instance_;
}

TBeastArmRefineRecord* TBeastArmRefineRecord::default_instance_ = NULL;

TBeastArmRefineRecord* TBeastArmRefineRecord::New() const {
  return new TBeastArmRefineRecord;
}

void TBeastArmRefineRecord::Clear() {
  randattrindex_ = 0u;
  refineattrarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastArmRefineRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastArmRefineRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RandAttrIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &randattrindex_)));
          set_has_randattrindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RefineAttrArr;
        break;
      }

      // repeated uint32 RefineAttrArr = 2;
      case 2: {
        if (tag == 16) {
         parse_RefineAttrArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_refineattrarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_refineattrarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RefineAttrArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastArmRefineRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastArmRefineRecord)
  return false;
#undef DO_
}

void TBeastArmRefineRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastArmRefineRecord)
  // optional uint32 RandAttrIndex = 1;
  if (has_randattrindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->randattrindex(), output);
  }

  // repeated uint32 RefineAttrArr = 2;
  for (int i = 0; i < this->refineattrarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->refineattrarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastArmRefineRecord)
}

::google::protobuf::uint8* TBeastArmRefineRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastArmRefineRecord)
  // optional uint32 RandAttrIndex = 1;
  if (has_randattrindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->randattrindex(), target);
  }

  // repeated uint32 RefineAttrArr = 2;
  for (int i = 0; i < this->refineattrarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->refineattrarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastArmRefineRecord)
  return target;
}

int TBeastArmRefineRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RandAttrIndex = 1;
    if (has_randattrindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->randattrindex());
    }

  }
  // repeated uint32 RefineAttrArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->refineattrarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->refineattrarr(i));
    }
    total_size += 1 * this->refineattrarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastArmRefineRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastArmRefineRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastArmRefineRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastArmRefineRecord::MergeFrom(const TBeastArmRefineRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  refineattrarr_.MergeFrom(from.refineattrarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_randattrindex()) {
      set_randattrindex(from.randattrindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastArmRefineRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastArmRefineRecord::CopyFrom(const TBeastArmRefineRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastArmRefineRecord::IsInitialized() const {

  return true;
}

void TBeastArmRefineRecord::Swap(TBeastArmRefineRecord* other) {
  if (other != this) {
    std::swap(randattrindex_, other->randattrindex_);
    refineattrarr_.Swap(&other->refineattrarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastArmRefineRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastArmRefineRecord_descriptor_;
  metadata.reflection = TBeastArmRefineRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeastArmItem::kItemIdFieldNumber;
const int TBeastArmItem::kTidFieldNumber;
const int TBeastArmItem::kEnhanceLvFieldNumber;
const int TBeastArmItem::kNumFieldNumber;
const int TBeastArmItem::kRandAttrArrFieldNumber;
const int TBeastArmItem::kRefineRecordArrFieldNumber;
const int TBeastArmItem::kAdvanceLvFieldNumber;
const int TBeastArmItem::kAdvanceStarLvFieldNumber;
const int TBeastArmItem::kInitialItemTidFieldNumber;
#endif  // !_MSC_VER

TBeastArmItem::TBeastArmItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeastArmItem)
}

void TBeastArmItem::InitAsDefaultInstance() {
}

TBeastArmItem::TBeastArmItem(const TBeastArmItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeastArmItem)
}

void TBeastArmItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  tid_ = 0u;
  enhancelv_ = 0u;
  num_ = 0u;
  advancelv_ = 0u;
  advancestarlv_ = 0u;
  initialitemtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeastArmItem::~TBeastArmItem() {
  // @@protoc_insertion_point(destructor:pb.TBeastArmItem)
  SharedDtor();
}

void TBeastArmItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBeastArmItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeastArmItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeastArmItem_descriptor_;
}

const TBeastArmItem& TBeastArmItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCommon_2eproto();
  return *default_instance_;
}

TBeastArmItem* TBeastArmItem::default_instance_ = NULL;

TBeastArmItem* TBeastArmItem::New() const {
  return new TBeastArmItem;
}

void TBeastArmItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBeastArmItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 207) {
    ZR_(itemid_, num_);
    ZR_(advancelv_, advancestarlv_);
  }
  initialitemtid_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  randattrarr_.Clear();
  refinerecordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeastArmItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeastArmItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Tid;
        break;
      }

      // optional uint32 Tid = 2;
      case 2: {
        if (tag == 16) {
         parse_Tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EnhanceLv;
        break;
      }

      // optional uint32 EnhanceLv = 3;
      case 3: {
        if (tag == 24) {
         parse_EnhanceLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enhancelv_)));
          set_has_enhancelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 4;
      case 4: {
        if (tag == 32) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_RandAttrArr;
        break;
      }

      // repeated uint32 RandAttrArr = 5;
      case 5: {
        if (tag == 40) {
         parse_RandAttrArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_randattrarr())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_randattrarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_RandAttrArr;
        if (input->ExpectTag(50)) goto parse_RefineRecordArr;
        break;
      }

      // repeated .pb.TBeastArmRefineRecord RefineRecordArr = 6;
      case 6: {
        if (tag == 50) {
         parse_RefineRecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refinerecordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RefineRecordArr;
        if (input->ExpectTag(56)) goto parse_AdvanceLv;
        break;
      }

      // optional uint32 AdvanceLv = 7;
      case 7: {
        if (tag == 56) {
         parse_AdvanceLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancelv_)));
          set_has_advancelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_AdvanceStarLv;
        break;
      }

      // optional uint32 AdvanceStarLv = 8;
      case 8: {
        if (tag == 64) {
         parse_AdvanceStarLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancestarlv_)));
          set_has_advancestarlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_InitialItemTid;
        break;
      }

      // optional uint32 InitialItemTid = 9;
      case 9: {
        if (tag == 72) {
         parse_InitialItemTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initialitemtid_)));
          set_has_initialitemtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeastArmItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeastArmItem)
  return false;
#undef DO_
}

void TBeastArmItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeastArmItem)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 Tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
  }

  // optional uint32 EnhanceLv = 3;
  if (has_enhancelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->enhancelv(), output);
  }

  // optional uint32 Num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  // repeated uint32 RandAttrArr = 5;
  for (int i = 0; i < this->randattrarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->randattrarr(i), output);
  }

  // repeated .pb.TBeastArmRefineRecord RefineRecordArr = 6;
  for (int i = 0; i < this->refinerecordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->refinerecordarr(i), output);
  }

  // optional uint32 AdvanceLv = 7;
  if (has_advancelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->advancelv(), output);
  }

  // optional uint32 AdvanceStarLv = 8;
  if (has_advancestarlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->advancestarlv(), output);
  }

  // optional uint32 InitialItemTid = 9;
  if (has_initialitemtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->initialitemtid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeastArmItem)
}

::google::protobuf::uint8* TBeastArmItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeastArmItem)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 Tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tid(), target);
  }

  // optional uint32 EnhanceLv = 3;
  if (has_enhancelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->enhancelv(), target);
  }

  // optional uint32 Num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  // repeated uint32 RandAttrArr = 5;
  for (int i = 0; i < this->randattrarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->randattrarr(i), target);
  }

  // repeated .pb.TBeastArmRefineRecord RefineRecordArr = 6;
  for (int i = 0; i < this->refinerecordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->refinerecordarr(i), target);
  }

  // optional uint32 AdvanceLv = 7;
  if (has_advancelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->advancelv(), target);
  }

  // optional uint32 AdvanceStarLv = 8;
  if (has_advancestarlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->advancestarlv(), target);
  }

  // optional uint32 InitialItemTid = 9;
  if (has_initialitemtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->initialitemtid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeastArmItem)
  return target;
}

int TBeastArmItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 Tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint32 EnhanceLv = 3;
    if (has_enhancelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enhancelv());
    }

    // optional uint32 Num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 AdvanceLv = 7;
    if (has_advancelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancelv());
    }

    // optional uint32 AdvanceStarLv = 8;
    if (has_advancestarlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancestarlv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 InitialItemTid = 9;
    if (has_initialitemtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initialitemtid());
    }

  }
  // repeated uint32 RandAttrArr = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->randattrarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->randattrarr(i));
    }
    total_size += 1 * this->randattrarr_size() + data_size;
  }

  // repeated .pb.TBeastArmRefineRecord RefineRecordArr = 6;
  total_size += 1 * this->refinerecordarr_size();
  for (int i = 0; i < this->refinerecordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refinerecordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeastArmItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeastArmItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeastArmItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeastArmItem::MergeFrom(const TBeastArmItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  randattrarr_.MergeFrom(from.randattrarr_);
  refinerecordarr_.MergeFrom(from.refinerecordarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_enhancelv()) {
      set_enhancelv(from.enhancelv());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_advancelv()) {
      set_advancelv(from.advancelv());
    }
    if (from.has_advancestarlv()) {
      set_advancestarlv(from.advancestarlv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_initialitemtid()) {
      set_initialitemtid(from.initialitemtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeastArmItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeastArmItem::CopyFrom(const TBeastArmItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeastArmItem::IsInitialized() const {

  return true;
}

void TBeastArmItem::Swap(TBeastArmItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(tid_, other->tid_);
    std::swap(enhancelv_, other->enhancelv_);
    std::swap(num_, other->num_);
    randattrarr_.Swap(&other->randattrarr_);
    refinerecordarr_.Swap(&other->refinerecordarr_);
    std::swap(advancelv_, other->advancelv_);
    std::swap(advancestarlv_, other->advancestarlv_);
    std::swap(initialitemtid_, other->initialitemtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeastArmItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeastArmItem_descriptor_;
  metadata.reflection = TBeastArmItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTreasureItem::kItemIdFieldNumber;
const int TTreasureItem::kTidFieldNumber;
const int TTreasureItem::kNumFieldNumber;
const int TTreasureItem::kStarLvFieldNumber;
const int TTreasureItem::kIsActivatedFieldNumber;
const int TTreasureItem::kIsAwakedFieldNumber;
#endif  // !_MSC_VER

TTreasureItem::TTreasureItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTreasureItem)
}

void TTreasureItem::InitAsDefaultInstance() {
}

TTreasureItem::TTreasureItem(const TTreasureItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTreasureItem)
}

void TTreasureItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  tid_ = 0;
  num_ = 0;
  starlv_ = 0;
  isactivated_ = 0;
  isawaked_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTreasureItem::~TTreasureItem() {
  // @@protoc_insertion_point(destructor:pb.TTreasureItem)
  SharedDtor();
}

void TTreasureItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTreasureItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTreasureItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTreasureItem_descriptor_;
}

const TTreasureItem& TTreasureItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCommon_2eproto();
  return *default_instance_;
}

TTreasureItem* TTreasureItem::default_instance_ = NULL;

TTreasureItem* TTreasureItem::New() const {
  return new TTreasureItem;
}

void TTreasureItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTreasureItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(itemid_, isawaked_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTreasureItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTreasureItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Tid;
        break;
      }

      // optional int32 Tid = 2;
      case 2: {
        if (tag == 16) {
         parse_Tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Num;
        break;
      }

      // optional int32 Num = 3;
      case 3: {
        if (tag == 24) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_StarLv;
        break;
      }

      // optional int32 StarLv = 4;
      case 4: {
        if (tag == 32) {
         parse_StarLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IsActivated;
        break;
      }

      // optional int32 IsActivated = 5;
      case 5: {
        if (tag == 40) {
         parse_IsActivated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isactivated_)));
          set_has_isactivated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_IsAwaked;
        break;
      }

      // optional int32 IsAwaked = 6;
      case 6: {
        if (tag == 48) {
         parse_IsAwaked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isawaked_)));
          set_has_isawaked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTreasureItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTreasureItem)
  return false;
#undef DO_
}

void TTreasureItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTreasureItem)
  // optional int32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 Tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tid(), output);
  }

  // optional int32 Num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 StarLv = 4;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->starlv(), output);
  }

  // optional int32 IsActivated = 5;
  if (has_isactivated()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isactivated(), output);
  }

  // optional int32 IsAwaked = 6;
  if (has_isawaked()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->isawaked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTreasureItem)
}

::google::protobuf::uint8* TTreasureItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTreasureItem)
  // optional int32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 Tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tid(), target);
  }

  // optional int32 Num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 StarLv = 4;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->starlv(), target);
  }

  // optional int32 IsActivated = 5;
  if (has_isactivated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isactivated(), target);
  }

  // optional int32 IsAwaked = 6;
  if (has_isawaked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->isawaked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTreasureItem)
  return target;
}

int TTreasureItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 Tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int32 Num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 StarLv = 4;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starlv());
    }

    // optional int32 IsActivated = 5;
    if (has_isactivated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isactivated());
    }

    // optional int32 IsAwaked = 6;
    if (has_isawaked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isawaked());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTreasureItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTreasureItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTreasureItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTreasureItem::MergeFrom(const TTreasureItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
    if (from.has_isactivated()) {
      set_isactivated(from.isactivated());
    }
    if (from.has_isawaked()) {
      set_isawaked(from.isawaked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTreasureItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTreasureItem::CopyFrom(const TTreasureItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTreasureItem::IsInitialized() const {

  return true;
}

void TTreasureItem::Swap(TTreasureItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(tid_, other->tid_);
    std::swap(num_, other->num_);
    std::swap(starlv_, other->starlv_);
    std::swap(isactivated_, other->isactivated_);
    std::swap(isawaked_, other->isawaked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTreasureItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTreasureItem_descriptor_;
  metadata.reflection = TTreasureItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSilkBagItem::kItemIdFieldNumber;
const int TSilkBagItem::kTidFieldNumber;
const int TSilkBagItem::kNumFieldNumber;
const int TSilkBagItem::kEnhanceLvFieldNumber;
const int TSilkBagItem::kEnhanceExpFieldNumber;
const int TSilkBagItem::kStarLvFieldNumber;
const int TSilkBagItem::kEnhanceCostFieldNumber;
#endif  // !_MSC_VER

TSilkBagItem::TSilkBagItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSilkBagItem)
}

void TSilkBagItem::InitAsDefaultInstance() {
}

TSilkBagItem::TSilkBagItem(const TSilkBagItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSilkBagItem)
}

void TSilkBagItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  tid_ = 0;
  num_ = 0;
  enhancelv_ = 0;
  enhanceexp_ = 0;
  starlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSilkBagItem::~TSilkBagItem() {
  // @@protoc_insertion_point(destructor:pb.TSilkBagItem)
  SharedDtor();
}

void TSilkBagItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSilkBagItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSilkBagItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSilkBagItem_descriptor_;
}

const TSilkBagItem& TSilkBagItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCommon_2eproto();
  return *default_instance_;
}

TSilkBagItem* TSilkBagItem::default_instance_ = NULL;

TSilkBagItem* TSilkBagItem::New() const {
  return new TSilkBagItem;
}

void TSilkBagItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSilkBagItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(itemid_, starlv_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  enhancecost_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSilkBagItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSilkBagItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Tid;
        break;
      }

      // optional int32 Tid = 2;
      case 2: {
        if (tag == 16) {
         parse_Tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Num;
        break;
      }

      // optional int32 Num = 3;
      case 3: {
        if (tag == 24) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EnhanceLv;
        break;
      }

      // optional int32 EnhanceLv = 4;
      case 4: {
        if (tag == 32) {
         parse_EnhanceLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhancelv_)));
          set_has_enhancelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_EnhanceExp;
        break;
      }

      // optional int32 EnhanceExp = 5;
      case 5: {
        if (tag == 40) {
         parse_EnhanceExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhanceexp_)));
          set_has_enhanceexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_StarLv;
        break;
      }

      // optional int32 StarLv = 6;
      case 6: {
        if (tag == 48) {
         parse_StarLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_EnhanceCost;
        break;
      }

      // repeated .pb.TCommonReward EnhanceCost = 7;
      case 7: {
        if (tag == 58) {
         parse_EnhanceCost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enhancecost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_EnhanceCost;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSilkBagItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSilkBagItem)
  return false;
#undef DO_
}

void TSilkBagItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSilkBagItem)
  // optional int32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 Tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tid(), output);
  }

  // optional int32 Num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 EnhanceLv = 4;
  if (has_enhancelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enhancelv(), output);
  }

  // optional int32 EnhanceExp = 5;
  if (has_enhanceexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->enhanceexp(), output);
  }

  // optional int32 StarLv = 6;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->starlv(), output);
  }

  // repeated .pb.TCommonReward EnhanceCost = 7;
  for (int i = 0; i < this->enhancecost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->enhancecost(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSilkBagItem)
}

::google::protobuf::uint8* TSilkBagItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSilkBagItem)
  // optional int32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 Tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tid(), target);
  }

  // optional int32 Num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 EnhanceLv = 4;
  if (has_enhancelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enhancelv(), target);
  }

  // optional int32 EnhanceExp = 5;
  if (has_enhanceexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->enhanceexp(), target);
  }

  // optional int32 StarLv = 6;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->starlv(), target);
  }

  // repeated .pb.TCommonReward EnhanceCost = 7;
  for (int i = 0; i < this->enhancecost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->enhancecost(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSilkBagItem)
  return target;
}

int TSilkBagItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 Tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int32 Num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 EnhanceLv = 4;
    if (has_enhancelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhancelv());
    }

    // optional int32 EnhanceExp = 5;
    if (has_enhanceexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhanceexp());
    }

    // optional int32 StarLv = 6;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starlv());
    }

  }
  // repeated .pb.TCommonReward EnhanceCost = 7;
  total_size += 1 * this->enhancecost_size();
  for (int i = 0; i < this->enhancecost_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enhancecost(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSilkBagItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSilkBagItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSilkBagItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSilkBagItem::MergeFrom(const TSilkBagItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  enhancecost_.MergeFrom(from.enhancecost_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_enhancelv()) {
      set_enhancelv(from.enhancelv());
    }
    if (from.has_enhanceexp()) {
      set_enhanceexp(from.enhanceexp());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSilkBagItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSilkBagItem::CopyFrom(const TSilkBagItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSilkBagItem::IsInitialized() const {

  return true;
}

void TSilkBagItem::Swap(TSilkBagItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(tid_, other->tid_);
    std::swap(num_, other->num_);
    std::swap(enhancelv_, other->enhancelv_);
    std::swap(enhanceexp_, other->enhanceexp_);
    std::swap(starlv_, other->starlv_);
    enhancecost_.Swap(&other->enhancecost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSilkBagItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSilkBagItem_descriptor_;
  metadata.reflection = TSilkBagItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDecorationBagItem::kItemIdFieldNumber;
const int TDecorationBagItem::kTidFieldNumber;
const int TDecorationBagItem::kNumFieldNumber;
const int TDecorationBagItem::kStarLvFieldNumber;
const int TDecorationBagItem::kEnhanceCostFieldNumber;
#endif  // !_MSC_VER

TDecorationBagItem::TDecorationBagItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDecorationBagItem)
}

void TDecorationBagItem::InitAsDefaultInstance() {
}

TDecorationBagItem::TDecorationBagItem(const TDecorationBagItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDecorationBagItem)
}

void TDecorationBagItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  tid_ = 0u;
  num_ = 0u;
  starlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDecorationBagItem::~TDecorationBagItem() {
  // @@protoc_insertion_point(destructor:pb.TDecorationBagItem)
  SharedDtor();
}

void TDecorationBagItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDecorationBagItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDecorationBagItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDecorationBagItem_descriptor_;
}

const TDecorationBagItem& TDecorationBagItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCommon_2eproto();
  return *default_instance_;
}

TDecorationBagItem* TDecorationBagItem::default_instance_ = NULL;

TDecorationBagItem* TDecorationBagItem::New() const {
  return new TDecorationBagItem;
}

void TDecorationBagItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDecorationBagItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, starlv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  enhancecost_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDecorationBagItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDecorationBagItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Tid;
        break;
      }

      // optional uint32 Tid = 2;
      case 2: {
        if (tag == 16) {
         parse_Tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 3;
      case 3: {
        if (tag == 24) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_StarLv;
        break;
      }

      // optional uint32 StarLv = 4;
      case 4: {
        if (tag == 32) {
         parse_StarLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_EnhanceCost;
        break;
      }

      // repeated .pb.TCommonReward EnhanceCost = 7;
      case 7: {
        if (tag == 58) {
         parse_EnhanceCost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enhancecost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_EnhanceCost;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDecorationBagItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDecorationBagItem)
  return false;
#undef DO_
}

void TDecorationBagItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDecorationBagItem)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 Tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
  }

  // optional uint32 Num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional uint32 StarLv = 4;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->starlv(), output);
  }

  // repeated .pb.TCommonReward EnhanceCost = 7;
  for (int i = 0; i < this->enhancecost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->enhancecost(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDecorationBagItem)
}

::google::protobuf::uint8* TDecorationBagItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDecorationBagItem)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 Tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tid(), target);
  }

  // optional uint32 Num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional uint32 StarLv = 4;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->starlv(), target);
  }

  // repeated .pb.TCommonReward EnhanceCost = 7;
  for (int i = 0; i < this->enhancecost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->enhancecost(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDecorationBagItem)
  return target;
}

int TDecorationBagItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 Tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint32 Num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 StarLv = 4;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlv());
    }

  }
  // repeated .pb.TCommonReward EnhanceCost = 7;
  total_size += 1 * this->enhancecost_size();
  for (int i = 0; i < this->enhancecost_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enhancecost(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDecorationBagItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDecorationBagItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDecorationBagItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDecorationBagItem::MergeFrom(const TDecorationBagItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  enhancecost_.MergeFrom(from.enhancecost_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDecorationBagItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDecorationBagItem::CopyFrom(const TDecorationBagItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDecorationBagItem::IsInitialized() const {

  return true;
}

void TDecorationBagItem::Swap(TDecorationBagItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(tid_, other->tid_);
    std::swap(num_, other->num_);
    std::swap(starlv_, other->starlv_);
    enhancecost_.Swap(&other->enhancecost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDecorationBagItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDecorationBagItem_descriptor_;
  metadata.reflection = TDecorationBagItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDivineBagItem::kItemIdFieldNumber;
const int TDivineBagItem::kTidFieldNumber;
const int TDivineBagItem::kNumFieldNumber;
const int TDivineBagItem::kSmeltAfterLvFieldNumber;
const int TDivineBagItem::kSurmountAfterLvFieldNumber;
const int TDivineBagItem::kSmeltAttributeFieldNumber;
const int TDivineBagItem::kSmeltUnSubmitAttributeFieldNumber;
const int TDivineBagItem::kLastSmeltTypeFieldNumber;
#endif  // !_MSC_VER

TDivineBagItem::TDivineBagItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDivineBagItem)
}

void TDivineBagItem::InitAsDefaultInstance() {
}

TDivineBagItem::TDivineBagItem(const TDivineBagItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDivineBagItem)
}

void TDivineBagItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  tid_ = 0;
  num_ = 0u;
  smeltafterlv_ = 0;
  surmountafterlv_ = 0;
  lastsmelttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDivineBagItem::~TDivineBagItem() {
  // @@protoc_insertion_point(destructor:pb.TDivineBagItem)
  SharedDtor();
}

void TDivineBagItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDivineBagItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDivineBagItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDivineBagItem_descriptor_;
}

const TDivineBagItem& TDivineBagItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCommon_2eproto();
  return *default_instance_;
}

TDivineBagItem* TDivineBagItem::default_instance_ = NULL;

TDivineBagItem* TDivineBagItem::New() const {
  return new TDivineBagItem;
}

void TDivineBagItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDivineBagItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 159) {
    ZR_(itemid_, smeltafterlv_);
    ZR_(surmountafterlv_, lastsmelttype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  smeltattribute_.Clear();
  smeltunsubmitattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDivineBagItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDivineBagItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Tid;
        break;
      }

      // optional int32 Tid = 2;
      case 2: {
        if (tag == 16) {
         parse_Tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 3;
      case 3: {
        if (tag == 24) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SmeltAfterLv;
        break;
      }

      // optional int32 SmeltAfterLv = 4;
      case 4: {
        if (tag == 32) {
         parse_SmeltAfterLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smeltafterlv_)));
          set_has_smeltafterlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SurmountAfterLv;
        break;
      }

      // optional int32 SurmountAfterLv = 5;
      case 5: {
        if (tag == 40) {
         parse_SurmountAfterLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surmountafterlv_)));
          set_has_surmountafterlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SmeltAttribute;
        break;
      }

      // repeated .pb.TAttributeInfo SmeltAttribute = 6;
      case 6: {
        if (tag == 50) {
         parse_SmeltAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_smeltattribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SmeltAttribute;
        if (input->ExpectTag(58)) goto parse_SmeltUnSubmitAttribute;
        break;
      }

      // repeated .pb.TAttributeInfo SmeltUnSubmitAttribute = 7;
      case 7: {
        if (tag == 58) {
         parse_SmeltUnSubmitAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_smeltunsubmitattribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_SmeltUnSubmitAttribute;
        if (input->ExpectTag(64)) goto parse_LastSmeltType;
        break;
      }

      // optional int32 LastSmeltType = 8;
      case 8: {
        if (tag == 64) {
         parse_LastSmeltType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastsmelttype_)));
          set_has_lastsmelttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDivineBagItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDivineBagItem)
  return false;
#undef DO_
}

void TDivineBagItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDivineBagItem)
  // optional int32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 Tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tid(), output);
  }

  // optional uint32 Num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional int32 SmeltAfterLv = 4;
  if (has_smeltafterlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->smeltafterlv(), output);
  }

  // optional int32 SurmountAfterLv = 5;
  if (has_surmountafterlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->surmountafterlv(), output);
  }

  // repeated .pb.TAttributeInfo SmeltAttribute = 6;
  for (int i = 0; i < this->smeltattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->smeltattribute(i), output);
  }

  // repeated .pb.TAttributeInfo SmeltUnSubmitAttribute = 7;
  for (int i = 0; i < this->smeltunsubmitattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->smeltunsubmitattribute(i), output);
  }

  // optional int32 LastSmeltType = 8;
  if (has_lastsmelttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lastsmelttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDivineBagItem)
}

::google::protobuf::uint8* TDivineBagItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDivineBagItem)
  // optional int32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 Tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tid(), target);
  }

  // optional uint32 Num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional int32 SmeltAfterLv = 4;
  if (has_smeltafterlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->smeltafterlv(), target);
  }

  // optional int32 SurmountAfterLv = 5;
  if (has_surmountafterlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->surmountafterlv(), target);
  }

  // repeated .pb.TAttributeInfo SmeltAttribute = 6;
  for (int i = 0; i < this->smeltattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->smeltattribute(i), target);
  }

  // repeated .pb.TAttributeInfo SmeltUnSubmitAttribute = 7;
  for (int i = 0; i < this->smeltunsubmitattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->smeltunsubmitattribute(i), target);
  }

  // optional int32 LastSmeltType = 8;
  if (has_lastsmelttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lastsmelttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDivineBagItem)
  return target;
}

int TDivineBagItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 Tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional uint32 Num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional int32 SmeltAfterLv = 4;
    if (has_smeltafterlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smeltafterlv());
    }

    // optional int32 SurmountAfterLv = 5;
    if (has_surmountafterlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surmountafterlv());
    }

    // optional int32 LastSmeltType = 8;
    if (has_lastsmelttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastsmelttype());
    }

  }
  // repeated .pb.TAttributeInfo SmeltAttribute = 6;
  total_size += 1 * this->smeltattribute_size();
  for (int i = 0; i < this->smeltattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->smeltattribute(i));
  }

  // repeated .pb.TAttributeInfo SmeltUnSubmitAttribute = 7;
  total_size += 1 * this->smeltunsubmitattribute_size();
  for (int i = 0; i < this->smeltunsubmitattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->smeltunsubmitattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDivineBagItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDivineBagItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDivineBagItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDivineBagItem::MergeFrom(const TDivineBagItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  smeltattribute_.MergeFrom(from.smeltattribute_);
  smeltunsubmitattribute_.MergeFrom(from.smeltunsubmitattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_smeltafterlv()) {
      set_smeltafterlv(from.smeltafterlv());
    }
    if (from.has_surmountafterlv()) {
      set_surmountafterlv(from.surmountafterlv());
    }
    if (from.has_lastsmelttype()) {
      set_lastsmelttype(from.lastsmelttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDivineBagItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDivineBagItem::CopyFrom(const TDivineBagItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDivineBagItem::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->smeltattribute())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->smeltunsubmitattribute())) return false;
  return true;
}

void TDivineBagItem::Swap(TDivineBagItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(tid_, other->tid_);
    std::swap(num_, other->num_);
    std::swap(smeltafterlv_, other->smeltafterlv_);
    std::swap(surmountafterlv_, other->surmountafterlv_);
    smeltattribute_.Swap(&other->smeltattribute_);
    smeltunsubmitattribute_.Swap(&other->smeltunsubmitattribute_);
    std::swap(lastsmelttype_, other->lastsmelttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDivineBagItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDivineBagItem_descriptor_;
  metadata.reflection = TDivineBagItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TForceSoulItem::kItemIdFieldNumber;
const int TForceSoulItem::kTidFieldNumber;
const int TForceSoulItem::kNumFieldNumber;
const int TForceSoulItem::kEnhanceLvFieldNumber;
const int TForceSoulItem::kStarLvFieldNumber;
const int TForceSoulItem::kEnhanceCostFieldNumber;
const int TForceSoulItem::kStarCostFieldNumber;
#endif  // !_MSC_VER

TForceSoulItem::TForceSoulItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TForceSoulItem)
}

void TForceSoulItem::InitAsDefaultInstance() {
}

TForceSoulItem::TForceSoulItem(const TForceSoulItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TForceSoulItem)
}

void TForceSoulItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  tid_ = 0;
  num_ = 0;
  enhancelv_ = 0;
  starlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TForceSoulItem::~TForceSoulItem() {
  // @@protoc_insertion_point(destructor:pb.TForceSoulItem)
  SharedDtor();
}

void TForceSoulItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TForceSoulItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TForceSoulItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TForceSoulItem_descriptor_;
}

const TForceSoulItem& TForceSoulItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCommon_2eproto();
  return *default_instance_;
}

TForceSoulItem* TForceSoulItem::default_instance_ = NULL;

TForceSoulItem* TForceSoulItem::New() const {
  return new TForceSoulItem;
}

void TForceSoulItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TForceSoulItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(itemid_, enhancelv_);
    starlv_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  enhancecost_.Clear();
  starcost_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TForceSoulItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TForceSoulItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Tid;
        break;
      }

      // optional int32 Tid = 2;
      case 2: {
        if (tag == 16) {
         parse_Tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Num;
        break;
      }

      // optional int32 Num = 3;
      case 3: {
        if (tag == 24) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EnhanceLv;
        break;
      }

      // optional int32 EnhanceLv = 4;
      case 4: {
        if (tag == 32) {
         parse_EnhanceLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhancelv_)));
          set_has_enhancelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_StarLv;
        break;
      }

      // optional int32 StarLv = 5;
      case 5: {
        if (tag == 40) {
         parse_StarLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_EnhanceCost;
        break;
      }

      // repeated .pb.TCommonReward EnhanceCost = 6;
      case 6: {
        if (tag == 50) {
         parse_EnhanceCost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enhancecost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_EnhanceCost;
        if (input->ExpectTag(58)) goto parse_StarCost;
        break;
      }

      // repeated .pb.TCommonReward StarCost = 7;
      case 7: {
        if (tag == 58) {
         parse_StarCost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_starcost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_StarCost;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TForceSoulItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TForceSoulItem)
  return false;
#undef DO_
}

void TForceSoulItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TForceSoulItem)
  // optional int32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 Tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tid(), output);
  }

  // optional int32 Num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 EnhanceLv = 4;
  if (has_enhancelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enhancelv(), output);
  }

  // optional int32 StarLv = 5;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->starlv(), output);
  }

  // repeated .pb.TCommonReward EnhanceCost = 6;
  for (int i = 0; i < this->enhancecost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->enhancecost(i), output);
  }

  // repeated .pb.TCommonReward StarCost = 7;
  for (int i = 0; i < this->starcost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->starcost(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TForceSoulItem)
}

::google::protobuf::uint8* TForceSoulItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TForceSoulItem)
  // optional int32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 Tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tid(), target);
  }

  // optional int32 Num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 EnhanceLv = 4;
  if (has_enhancelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enhancelv(), target);
  }

  // optional int32 StarLv = 5;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->starlv(), target);
  }

  // repeated .pb.TCommonReward EnhanceCost = 6;
  for (int i = 0; i < this->enhancecost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->enhancecost(i), target);
  }

  // repeated .pb.TCommonReward StarCost = 7;
  for (int i = 0; i < this->starcost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->starcost(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TForceSoulItem)
  return target;
}

int TForceSoulItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 Tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int32 Num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 EnhanceLv = 4;
    if (has_enhancelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhancelv());
    }

    // optional int32 StarLv = 5;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starlv());
    }

  }
  // repeated .pb.TCommonReward EnhanceCost = 6;
  total_size += 1 * this->enhancecost_size();
  for (int i = 0; i < this->enhancecost_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enhancecost(i));
  }

  // repeated .pb.TCommonReward StarCost = 7;
  total_size += 1 * this->starcost_size();
  for (int i = 0; i < this->starcost_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->starcost(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TForceSoulItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TForceSoulItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TForceSoulItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TForceSoulItem::MergeFrom(const TForceSoulItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  enhancecost_.MergeFrom(from.enhancecost_);
  starcost_.MergeFrom(from.starcost_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_enhancelv()) {
      set_enhancelv(from.enhancelv());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TForceSoulItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TForceSoulItem::CopyFrom(const TForceSoulItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TForceSoulItem::IsInitialized() const {

  return true;
}

void TForceSoulItem::Swap(TForceSoulItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(tid_, other->tid_);
    std::swap(num_, other->num_);
    std::swap(enhancelv_, other->enhancelv_);
    std::swap(starlv_, other->starlv_);
    enhancecost_.Swap(&other->enhancecost_);
    starcost_.Swap(&other->starcost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TForceSoulItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TForceSoulItem_descriptor_;
  metadata.reflection = TForceSoulItem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
