// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/BInstance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/BInstance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TBStrongholdBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBStrongholdBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBStrongholdInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBStrongholdInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBChapterStarRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBChapterStarRewardInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fBInstance_2eproto() {
  protobuf_AddDesc_net_2fBInstance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/BInstance.proto");
  GOOGLE_CHECK(file != NULL);
  TBStrongholdBattleInfo_descriptor_ = file->message_type(0);
  static const int TBStrongholdBattleInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBStrongholdBattleInfo, strongholdbattleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBStrongholdBattleInfo, challengesuccessnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBStrongholdBattleInfo, challengecurrentnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBStrongholdBattleInfo, starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBStrongholdBattleInfo, challengenum_),
  };
  TBStrongholdBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBStrongholdBattleInfo_descriptor_,
      TBStrongholdBattleInfo::default_instance_,
      TBStrongholdBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBStrongholdBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBStrongholdBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBStrongholdBattleInfo));
  TBStrongholdInfo_descriptor_ = file->message_type(1);
  static const int TBStrongholdInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBStrongholdInfo, strongholdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBStrongholdInfo, battlearray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBStrongholdInfo, firstvictorytime_),
  };
  TBStrongholdInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBStrongholdInfo_descriptor_,
      TBStrongholdInfo::default_instance_,
      TBStrongholdInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBStrongholdInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBStrongholdInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBStrongholdInfo));
  TBChapterStarRewardInfo_descriptor_ = file->message_type(2);
  static const int TBChapterStarRewardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBChapterStarRewardInfo, starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBChapterStarRewardInfo, rewardtime_),
  };
  TBChapterStarRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBChapterStarRewardInfo_descriptor_,
      TBChapterStarRewardInfo::default_instance_,
      TBChapterStarRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBChapterStarRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBChapterStarRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBChapterStarRewardInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fBInstance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBStrongholdBattleInfo_descriptor_, &TBStrongholdBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBStrongholdInfo_descriptor_, &TBStrongholdInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBChapterStarRewardInfo_descriptor_, &TBChapterStarRewardInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fBInstance_2eproto() {
  delete TBStrongholdBattleInfo::default_instance_;
  delete TBStrongholdBattleInfo_reflection_;
  delete TBStrongholdInfo::default_instance_;
  delete TBStrongholdInfo_reflection_;
  delete TBChapterStarRewardInfo::default_instance_;
  delete TBChapterStarRewardInfo_reflection_;
}

void protobuf_AddDesc_net_2fBInstance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/BInstance.proto\022\002pb\"\225\001\n\026TBStrongho"
    "ldBattleInfo\022\032\n\022StrongholdBattleId\030\001 \001(\r"
    "\022\033\n\023ChallengeSuccessNum\030\002 \001(\r\022\033\n\023Challen"
    "geCurrentNum\030\003 \001(\r\022\017\n\007StarNum\030\004 \001(\r\022\024\n\014C"
    "hallengeNum\030\005 \001(\r\"s\n\020TBStrongholdInfo\022\024\n"
    "\014StrongholdId\030\001 \001(\r\022/\n\013BattleArray\030\002 \003(\013"
    "2\032.pb.TBStrongholdBattleInfo\022\030\n\020FirstVic"
    "toryTime\030\003 \001(\004\">\n\027TBChapterStarRewardInf"
    "o\022\017\n\007StarNum\030\001 \001(\r\022\022\n\nRewardTime\030\002 \001(\004", 358);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/BInstance.proto", &protobuf_RegisterTypes);
  TBStrongholdBattleInfo::default_instance_ = new TBStrongholdBattleInfo();
  TBStrongholdInfo::default_instance_ = new TBStrongholdInfo();
  TBChapterStarRewardInfo::default_instance_ = new TBChapterStarRewardInfo();
  TBStrongholdBattleInfo::default_instance_->InitAsDefaultInstance();
  TBStrongholdInfo::default_instance_->InitAsDefaultInstance();
  TBChapterStarRewardInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fBInstance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fBInstance_2eproto {
  StaticDescriptorInitializer_net_2fBInstance_2eproto() {
    protobuf_AddDesc_net_2fBInstance_2eproto();
  }
} static_descriptor_initializer_net_2fBInstance_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TBStrongholdBattleInfo::kStrongholdBattleIdFieldNumber;
const int TBStrongholdBattleInfo::kChallengeSuccessNumFieldNumber;
const int TBStrongholdBattleInfo::kChallengeCurrentNumFieldNumber;
const int TBStrongholdBattleInfo::kStarNumFieldNumber;
const int TBStrongholdBattleInfo::kChallengeNumFieldNumber;
#endif  // !_MSC_VER

TBStrongholdBattleInfo::TBStrongholdBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBStrongholdBattleInfo)
}

void TBStrongholdBattleInfo::InitAsDefaultInstance() {
}

TBStrongholdBattleInfo::TBStrongholdBattleInfo(const TBStrongholdBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBStrongholdBattleInfo)
}

void TBStrongholdBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  strongholdbattleid_ = 0u;
  challengesuccessnum_ = 0u;
  challengecurrentnum_ = 0u;
  starnum_ = 0u;
  challengenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBStrongholdBattleInfo::~TBStrongholdBattleInfo() {
  // @@protoc_insertion_point(destructor:pb.TBStrongholdBattleInfo)
  SharedDtor();
}

void TBStrongholdBattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBStrongholdBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBStrongholdBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBStrongholdBattleInfo_descriptor_;
}

const TBStrongholdBattleInfo& TBStrongholdBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBInstance_2eproto();
  return *default_instance_;
}

TBStrongholdBattleInfo* TBStrongholdBattleInfo::default_instance_ = NULL;

TBStrongholdBattleInfo* TBStrongholdBattleInfo::New() const {
  return new TBStrongholdBattleInfo;
}

void TBStrongholdBattleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBStrongholdBattleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(strongholdbattleid_, challengenum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBStrongholdBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBStrongholdBattleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 StrongholdBattleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strongholdbattleid_)));
          set_has_strongholdbattleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChallengeSuccessNum;
        break;
      }

      // optional uint32 ChallengeSuccessNum = 2;
      case 2: {
        if (tag == 16) {
         parse_ChallengeSuccessNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengesuccessnum_)));
          set_has_challengesuccessnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ChallengeCurrentNum;
        break;
      }

      // optional uint32 ChallengeCurrentNum = 3;
      case 3: {
        if (tag == 24) {
         parse_ChallengeCurrentNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengecurrentnum_)));
          set_has_challengecurrentnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_StarNum;
        break;
      }

      // optional uint32 StarNum = 4;
      case 4: {
        if (tag == 32) {
         parse_StarNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starnum_)));
          set_has_starnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ChallengeNum;
        break;
      }

      // optional uint32 ChallengeNum = 5;
      case 5: {
        if (tag == 40) {
         parse_ChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengenum_)));
          set_has_challengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBStrongholdBattleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBStrongholdBattleInfo)
  return false;
#undef DO_
}

void TBStrongholdBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBStrongholdBattleInfo)
  // optional uint32 StrongholdBattleId = 1;
  if (has_strongholdbattleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->strongholdbattleid(), output);
  }

  // optional uint32 ChallengeSuccessNum = 2;
  if (has_challengesuccessnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challengesuccessnum(), output);
  }

  // optional uint32 ChallengeCurrentNum = 3;
  if (has_challengecurrentnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->challengecurrentnum(), output);
  }

  // optional uint32 StarNum = 4;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->starnum(), output);
  }

  // optional uint32 ChallengeNum = 5;
  if (has_challengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->challengenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBStrongholdBattleInfo)
}

::google::protobuf::uint8* TBStrongholdBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBStrongholdBattleInfo)
  // optional uint32 StrongholdBattleId = 1;
  if (has_strongholdbattleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->strongholdbattleid(), target);
  }

  // optional uint32 ChallengeSuccessNum = 2;
  if (has_challengesuccessnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->challengesuccessnum(), target);
  }

  // optional uint32 ChallengeCurrentNum = 3;
  if (has_challengecurrentnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->challengecurrentnum(), target);
  }

  // optional uint32 StarNum = 4;
  if (has_starnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->starnum(), target);
  }

  // optional uint32 ChallengeNum = 5;
  if (has_challengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->challengenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBStrongholdBattleInfo)
  return target;
}

int TBStrongholdBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StrongholdBattleId = 1;
    if (has_strongholdbattleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strongholdbattleid());
    }

    // optional uint32 ChallengeSuccessNum = 2;
    if (has_challengesuccessnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengesuccessnum());
    }

    // optional uint32 ChallengeCurrentNum = 3;
    if (has_challengecurrentnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengecurrentnum());
    }

    // optional uint32 StarNum = 4;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starnum());
    }

    // optional uint32 ChallengeNum = 5;
    if (has_challengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBStrongholdBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBStrongholdBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBStrongholdBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBStrongholdBattleInfo::MergeFrom(const TBStrongholdBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strongholdbattleid()) {
      set_strongholdbattleid(from.strongholdbattleid());
    }
    if (from.has_challengesuccessnum()) {
      set_challengesuccessnum(from.challengesuccessnum());
    }
    if (from.has_challengecurrentnum()) {
      set_challengecurrentnum(from.challengecurrentnum());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
    if (from.has_challengenum()) {
      set_challengenum(from.challengenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBStrongholdBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBStrongholdBattleInfo::CopyFrom(const TBStrongholdBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBStrongholdBattleInfo::IsInitialized() const {

  return true;
}

void TBStrongholdBattleInfo::Swap(TBStrongholdBattleInfo* other) {
  if (other != this) {
    std::swap(strongholdbattleid_, other->strongholdbattleid_);
    std::swap(challengesuccessnum_, other->challengesuccessnum_);
    std::swap(challengecurrentnum_, other->challengecurrentnum_);
    std::swap(starnum_, other->starnum_);
    std::swap(challengenum_, other->challengenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBStrongholdBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBStrongholdBattleInfo_descriptor_;
  metadata.reflection = TBStrongholdBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBStrongholdInfo::kStrongholdIdFieldNumber;
const int TBStrongholdInfo::kBattleArrayFieldNumber;
const int TBStrongholdInfo::kFirstVictoryTimeFieldNumber;
#endif  // !_MSC_VER

TBStrongholdInfo::TBStrongholdInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBStrongholdInfo)
}

void TBStrongholdInfo::InitAsDefaultInstance() {
}

TBStrongholdInfo::TBStrongholdInfo(const TBStrongholdInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBStrongholdInfo)
}

void TBStrongholdInfo::SharedCtor() {
  _cached_size_ = 0;
  strongholdid_ = 0u;
  firstvictorytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBStrongholdInfo::~TBStrongholdInfo() {
  // @@protoc_insertion_point(destructor:pb.TBStrongholdInfo)
  SharedDtor();
}

void TBStrongholdInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBStrongholdInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBStrongholdInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBStrongholdInfo_descriptor_;
}

const TBStrongholdInfo& TBStrongholdInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBInstance_2eproto();
  return *default_instance_;
}

TBStrongholdInfo* TBStrongholdInfo::default_instance_ = NULL;

TBStrongholdInfo* TBStrongholdInfo::New() const {
  return new TBStrongholdInfo;
}

void TBStrongholdInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBStrongholdInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(firstvictorytime_, strongholdid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  battlearray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBStrongholdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBStrongholdInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 StrongholdId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strongholdid_)));
          set_has_strongholdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleArray;
        break;
      }

      // repeated .pb.TBStrongholdBattleInfo BattleArray = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battlearray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleArray;
        if (input->ExpectTag(24)) goto parse_FirstVictoryTime;
        break;
      }

      // optional uint64 FirstVictoryTime = 3;
      case 3: {
        if (tag == 24) {
         parse_FirstVictoryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &firstvictorytime_)));
          set_has_firstvictorytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBStrongholdInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBStrongholdInfo)
  return false;
#undef DO_
}

void TBStrongholdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBStrongholdInfo)
  // optional uint32 StrongholdId = 1;
  if (has_strongholdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->strongholdid(), output);
  }

  // repeated .pb.TBStrongholdBattleInfo BattleArray = 2;
  for (int i = 0; i < this->battlearray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battlearray(i), output);
  }

  // optional uint64 FirstVictoryTime = 3;
  if (has_firstvictorytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->firstvictorytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBStrongholdInfo)
}

::google::protobuf::uint8* TBStrongholdInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBStrongholdInfo)
  // optional uint32 StrongholdId = 1;
  if (has_strongholdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->strongholdid(), target);
  }

  // repeated .pb.TBStrongholdBattleInfo BattleArray = 2;
  for (int i = 0; i < this->battlearray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battlearray(i), target);
  }

  // optional uint64 FirstVictoryTime = 3;
  if (has_firstvictorytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->firstvictorytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBStrongholdInfo)
  return target;
}

int TBStrongholdInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StrongholdId = 1;
    if (has_strongholdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strongholdid());
    }

    // optional uint64 FirstVictoryTime = 3;
    if (has_firstvictorytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->firstvictorytime());
    }

  }
  // repeated .pb.TBStrongholdBattleInfo BattleArray = 2;
  total_size += 1 * this->battlearray_size();
  for (int i = 0; i < this->battlearray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battlearray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBStrongholdInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBStrongholdInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBStrongholdInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBStrongholdInfo::MergeFrom(const TBStrongholdInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  battlearray_.MergeFrom(from.battlearray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strongholdid()) {
      set_strongholdid(from.strongholdid());
    }
    if (from.has_firstvictorytime()) {
      set_firstvictorytime(from.firstvictorytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBStrongholdInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBStrongholdInfo::CopyFrom(const TBStrongholdInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBStrongholdInfo::IsInitialized() const {

  return true;
}

void TBStrongholdInfo::Swap(TBStrongholdInfo* other) {
  if (other != this) {
    std::swap(strongholdid_, other->strongholdid_);
    battlearray_.Swap(&other->battlearray_);
    std::swap(firstvictorytime_, other->firstvictorytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBStrongholdInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBStrongholdInfo_descriptor_;
  metadata.reflection = TBStrongholdInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBChapterStarRewardInfo::kStarNumFieldNumber;
const int TBChapterStarRewardInfo::kRewardTimeFieldNumber;
#endif  // !_MSC_VER

TBChapterStarRewardInfo::TBChapterStarRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBChapterStarRewardInfo)
}

void TBChapterStarRewardInfo::InitAsDefaultInstance() {
}

TBChapterStarRewardInfo::TBChapterStarRewardInfo(const TBChapterStarRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBChapterStarRewardInfo)
}

void TBChapterStarRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  starnum_ = 0u;
  rewardtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBChapterStarRewardInfo::~TBChapterStarRewardInfo() {
  // @@protoc_insertion_point(destructor:pb.TBChapterStarRewardInfo)
  SharedDtor();
}

void TBChapterStarRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBChapterStarRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBChapterStarRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBChapterStarRewardInfo_descriptor_;
}

const TBChapterStarRewardInfo& TBChapterStarRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBInstance_2eproto();
  return *default_instance_;
}

TBChapterStarRewardInfo* TBChapterStarRewardInfo::default_instance_ = NULL;

TBChapterStarRewardInfo* TBChapterStarRewardInfo::New() const {
  return new TBChapterStarRewardInfo;
}

void TBChapterStarRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBChapterStarRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rewardtime_, starnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBChapterStarRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBChapterStarRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 StarNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starnum_)));
          set_has_starnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RewardTime;
        break;
      }

      // optional uint64 RewardTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBChapterStarRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBChapterStarRewardInfo)
  return false;
#undef DO_
}

void TBChapterStarRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBChapterStarRewardInfo)
  // optional uint32 StarNum = 1;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->starnum(), output);
  }

  // optional uint64 RewardTime = 2;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rewardtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBChapterStarRewardInfo)
}

::google::protobuf::uint8* TBChapterStarRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBChapterStarRewardInfo)
  // optional uint32 StarNum = 1;
  if (has_starnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->starnum(), target);
  }

  // optional uint64 RewardTime = 2;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rewardtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBChapterStarRewardInfo)
  return target;
}

int TBChapterStarRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StarNum = 1;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starnum());
    }

    // optional uint64 RewardTime = 2;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewardtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBChapterStarRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBChapterStarRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBChapterStarRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBChapterStarRewardInfo::MergeFrom(const TBChapterStarRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBChapterStarRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBChapterStarRewardInfo::CopyFrom(const TBChapterStarRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBChapterStarRewardInfo::IsInitialized() const {

  return true;
}

void TBChapterStarRewardInfo::Swap(TBChapterStarRewardInfo* other) {
  if (other != this) {
    std::swap(starnum_, other->starnum_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBChapterStarRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBChapterStarRewardInfo_descriptor_;
  metadata.reflection = TBChapterStarRewardInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
