// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/NationalWarMap.proto

#ifndef PROTOBUF_module_2fNationalWarMap_2eproto__INCLUDED
#define PROTOBUF_module_2fNationalWarMap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fNationalWarMap_2eproto();
void protobuf_AssignDesc_module_2fNationalWarMap_2eproto();
void protobuf_ShutdownFile_module_2fNationalWarMap_2eproto();

class NationalWarMap;
class GridData;
class OrnamentGroupData;
class OrnamentGroupGridIdxData;
class OrnamentGroupBlockData;
class OrnamentGroupGridData;

// ===================================================================

/*FOR2LUA
<Record>
	<name>NationalWarMap</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/NationalWarMap.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class NationalWarMap : public ::google::protobuf::Message {
 public:
  NationalWarMap();
  virtual ~NationalWarMap();

  NationalWarMap(const NationalWarMap& from);

  inline NationalWarMap& operator=(const NationalWarMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NationalWarMap& default_instance();

  void Swap(NationalWarMap* other);

  // implements Message ----------------------------------------------

  NationalWarMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NationalWarMap& from);
  void MergeFrom(const NationalWarMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMap</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string MapName = 2;
  inline bool has_mapname() const;
  inline void clear_mapname();
  static const int kMapNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMap</name>
  	<Function>
  		<name>mapname</name>
  		<replaceName>MapName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapname</name>
  		<replaceName>MapName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapname</name>
  		<replaceName>MapName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& mapname() const;
  inline void set_mapname(const ::std::string& value);
  inline void set_mapname(const char* value);
  inline void set_mapname(const char* value, size_t size);
  inline ::std::string* mutable_mapname();
  inline ::std::string* release_mapname();
  inline void set_allocated_mapname(::std::string* mapname);

  // optional int32 MapWidth = 3;
  inline bool has_mapwidth() const;
  inline void clear_mapwidth();
  static const int kMapWidthFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMap</name>
  	<Function>
  		<name>mapwidth</name>
  		<replaceName>MapWidth</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapwidth</name>
  		<replaceName>MapWidth</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapwidth</name>
  		<replaceName>MapWidth</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 mapwidth() const;
  inline void set_mapwidth(::google::protobuf::int32 value);

  // optional int32 MapHeight = 4;
  inline bool has_mapheight() const;
  inline void clear_mapheight();
  static const int kMapHeightFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMap</name>
  	<Function>
  		<name>mapheight</name>
  		<replaceName>MapHeight</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapheight</name>
  		<replaceName>MapHeight</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapheight</name>
  		<replaceName>MapHeight</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 mapheight() const;
  inline void set_mapheight(::google::protobuf::int32 value);

  // optional int32 CircleCount = 5;
  inline bool has_circlecount() const;
  inline void clear_circlecount();
  static const int kCircleCountFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMap</name>
  	<Function>
  		<name>circlecount</name>
  		<replaceName>CircleCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_circlecount</name>
  		<replaceName>CircleCount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_circlecount</name>
  		<replaceName>CircleCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 circlecount() const;
  inline void set_circlecount(::google::protobuf::int32 value);

  // repeated .pb.GridData GridDataArr = 6;
  inline int griddataarr_size() const;
  inline void clear_griddataarr();
  static const int kGridDataArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMap</name>
  	<Function>
  		<name>griddataarr</name>
  		<replaceName>GridDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_griddataarr</name>
  		<replaceName>GridDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_griddataarr</name>
  		<replaceName>GridDataArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_griddataarr</name>
  		<replaceName>GridDataArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>griddataarr_size</name>
  		<replaceName>GridDataArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::GridData& griddataarr(int index) const;
  inline ::pb::GridData* mutable_griddataarr(int index);
  inline ::pb::GridData* add_griddataarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GridData >&
      griddataarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GridData >*
      mutable_griddataarr();

  // repeated .pb.OrnamentGroupData OrnamentGroupDataArr = 7;
  inline int ornamentgroupdataarr_size() const;
  inline void clear_ornamentgroupdataarr();
  static const int kOrnamentGroupDataArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMap</name>
  	<Function>
  		<name>ornamentgroupdataarr</name>
  		<replaceName>OrnamentGroupDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ornamentgroupdataarr</name>
  		<replaceName>OrnamentGroupDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ornamentgroupdataarr</name>
  		<replaceName>OrnamentGroupDataArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ornamentgroupdataarr</name>
  		<replaceName>OrnamentGroupDataArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ornamentgroupdataarr_size</name>
  		<replaceName>OrnamentGroupDataArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::OrnamentGroupData& ornamentgroupdataarr(int index) const;
  inline ::pb::OrnamentGroupData* mutable_ornamentgroupdataarr(int index);
  inline ::pb::OrnamentGroupData* add_ornamentgroupdataarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupData >&
      ornamentgroupdataarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupData >*
      mutable_ornamentgroupdataarr();

  // repeated .pb.OrnamentGroupGridIdxData OrnamentGroupGridIdxArr = 8;
  inline int ornamentgroupgrididxarr_size() const;
  inline void clear_ornamentgroupgrididxarr();
  static const int kOrnamentGroupGridIdxArrFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMap</name>
  	<Function>
  		<name>ornamentgroupgrididxarr</name>
  		<replaceName>OrnamentGroupGridIdxArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ornamentgroupgrididxarr</name>
  		<replaceName>OrnamentGroupGridIdxArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ornamentgroupgrididxarr</name>
  		<replaceName>OrnamentGroupGridIdxArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ornamentgroupgrididxarr</name>
  		<replaceName>OrnamentGroupGridIdxArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ornamentgroupgrididxarr_size</name>
  		<replaceName>OrnamentGroupGridIdxArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::OrnamentGroupGridIdxData& ornamentgroupgrididxarr(int index) const;
  inline ::pb::OrnamentGroupGridIdxData* mutable_ornamentgroupgrididxarr(int index);
  inline ::pb::OrnamentGroupGridIdxData* add_ornamentgroupgrididxarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupGridIdxData >&
      ornamentgroupgrididxarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupGridIdxData >*
      mutable_ornamentgroupgrididxarr();

  // repeated .pb.OrnamentGroupBlockData OrnamentGroupBlockDataArr = 9;
  inline int ornamentgroupblockdataarr_size() const;
  inline void clear_ornamentgroupblockdataarr();
  static const int kOrnamentGroupBlockDataArrFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMap</name>
  	<Function>
  		<name>ornamentgroupblockdataarr</name>
  		<replaceName>OrnamentGroupBlockDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ornamentgroupblockdataarr</name>
  		<replaceName>OrnamentGroupBlockDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ornamentgroupblockdataarr</name>
  		<replaceName>OrnamentGroupBlockDataArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ornamentgroupblockdataarr</name>
  		<replaceName>OrnamentGroupBlockDataArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ornamentgroupblockdataarr_size</name>
  		<replaceName>OrnamentGroupBlockDataArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::OrnamentGroupBlockData& ornamentgroupblockdataarr(int index) const;
  inline ::pb::OrnamentGroupBlockData* mutable_ornamentgroupblockdataarr(int index);
  inline ::pb::OrnamentGroupBlockData* add_ornamentgroupblockdataarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupBlockData >&
      ornamentgroupblockdataarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupBlockData >*
      mutable_ornamentgroupblockdataarr();

  // repeated .pb.OrnamentGroupGridData OrnamentGroupGridDataArr = 10;
  inline int ornamentgroupgriddataarr_size() const;
  inline void clear_ornamentgroupgriddataarr();
  static const int kOrnamentGroupGridDataArrFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMap</name>
  	<Function>
  		<name>ornamentgroupgriddataarr</name>
  		<replaceName>OrnamentGroupGridDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ornamentgroupgriddataarr</name>
  		<replaceName>OrnamentGroupGridDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ornamentgroupgriddataarr</name>
  		<replaceName>OrnamentGroupGridDataArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ornamentgroupgriddataarr</name>
  		<replaceName>OrnamentGroupGridDataArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ornamentgroupgriddataarr_size</name>
  		<replaceName>OrnamentGroupGridDataArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::OrnamentGroupGridData& ornamentgroupgriddataarr(int index) const;
  inline ::pb::OrnamentGroupGridData* mutable_ornamentgroupgriddataarr(int index);
  inline ::pb::OrnamentGroupGridData* add_ornamentgroupgriddataarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupGridData >&
      ornamentgroupgriddataarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupGridData >*
      mutable_ornamentgroupgriddataarr();

  // @@protoc_insertion_point(class_scope:pb.NationalWarMap)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mapname();
  inline void clear_has_mapname();
  inline void set_has_mapwidth();
  inline void clear_has_mapwidth();
  inline void set_has_mapheight();
  inline void clear_has_mapheight();
  inline void set_has_circlecount();
  inline void clear_has_circlecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mapname_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 mapwidth_;
  ::google::protobuf::int32 mapheight_;
  ::google::protobuf::int32 circlecount_;
  ::google::protobuf::RepeatedPtrField< ::pb::GridData > griddataarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupData > ornamentgroupdataarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupGridIdxData > ornamentgroupgrididxarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupBlockData > ornamentgroupblockdataarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupGridData > ornamentgroupgriddataarr_;
  friend void  protobuf_AddDesc_module_2fNationalWarMap_2eproto();
  friend void protobuf_AssignDesc_module_2fNationalWarMap_2eproto();
  friend void protobuf_ShutdownFile_module_2fNationalWarMap_2eproto();

  void InitAsDefaultInstance();
  static NationalWarMap* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>GridData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/NationalWarMap.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class GridData : public ::google::protobuf::Message {
 public:
  GridData();
  virtual ~GridData();

  GridData(const GridData& from);

  inline GridData& operator=(const GridData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GridData& default_instance();

  void Swap(GridData* other);

  // implements Message ----------------------------------------------

  GridData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridData& from);
  void MergeFrom(const GridData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 CircleIdx = 1;
  inline bool has_circleidx() const;
  inline void clear_circleidx();
  static const int kCircleIdxFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>GridData</name>
  	<Function>
  		<name>circleidx</name>
  		<replaceName>CircleIdx</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_circleidx</name>
  		<replaceName>CircleIdx</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_circleidx</name>
  		<replaceName>CircleIdx</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 circleidx() const;
  inline void set_circleidx(::google::protobuf::int32 value);

  // optional uint32 ResId = 2;
  inline bool has_resid() const;
  inline void clear_resid();
  static const int kResIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>GridData</name>
  	<Function>
  		<name>resid</name>
  		<replaceName>ResId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resid</name>
  		<replaceName>ResId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resid</name>
  		<replaceName>ResId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 resid() const;
  inline void set_resid(::google::protobuf::uint32 value);

  // optional bool IsObstacle = 3;
  inline bool has_isobstacle() const;
  inline void clear_isobstacle();
  static const int kIsObstacleFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>GridData</name>
  	<Function>
  		<name>isobstacle</name>
  		<replaceName>IsObstacle</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isobstacle</name>
  		<replaceName>IsObstacle</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isobstacle</name>
  		<replaceName>IsObstacle</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isobstacle() const;
  inline void set_isobstacle(bool value);

  // optional bool IsSpecial = 4;
  inline bool has_isspecial() const;
  inline void clear_isspecial();
  static const int kIsSpecialFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>GridData</name>
  	<Function>
  		<name>isspecial</name>
  		<replaceName>IsSpecial</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isspecial</name>
  		<replaceName>IsSpecial</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isspecial</name>
  		<replaceName>IsSpecial</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isspecial() const;
  inline void set_isspecial(bool value);

  // @@protoc_insertion_point(class_scope:pb.GridData)
 private:
  inline void set_has_circleidx();
  inline void clear_has_circleidx();
  inline void set_has_resid();
  inline void clear_has_resid();
  inline void set_has_isobstacle();
  inline void clear_has_isobstacle();
  inline void set_has_isspecial();
  inline void clear_has_isspecial();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 circleidx_;
  ::google::protobuf::uint32 resid_;
  bool isobstacle_;
  bool isspecial_;
  friend void  protobuf_AddDesc_module_2fNationalWarMap_2eproto();
  friend void protobuf_AssignDesc_module_2fNationalWarMap_2eproto();
  friend void protobuf_ShutdownFile_module_2fNationalWarMap_2eproto();

  void InitAsDefaultInstance();
  static GridData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>OrnamentGroupData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/NationalWarMap.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class OrnamentGroupData : public ::google::protobuf::Message {
 public:
  OrnamentGroupData();
  virtual ~OrnamentGroupData();

  OrnamentGroupData(const OrnamentGroupData& from);

  inline OrnamentGroupData& operator=(const OrnamentGroupData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrnamentGroupData& default_instance();

  void Swap(OrnamentGroupData* other);

  // implements Message ----------------------------------------------

  OrnamentGroupData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrnamentGroupData& from);
  void MergeFrom(const OrnamentGroupData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string OrnamentGroupName = 1;
  inline bool has_ornamentgroupname() const;
  inline void clear_ornamentgroupname();
  static const int kOrnamentGroupNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>OrnamentGroupData</name>
  	<Function>
  		<name>ornamentgroupname</name>
  		<replaceName>OrnamentGroupName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ornamentgroupname</name>
  		<replaceName>OrnamentGroupName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ornamentgroupname</name>
  		<replaceName>OrnamentGroupName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& ornamentgroupname() const;
  inline void set_ornamentgroupname(const ::std::string& value);
  inline void set_ornamentgroupname(const char* value);
  inline void set_ornamentgroupname(const char* value, size_t size);
  inline ::std::string* mutable_ornamentgroupname();
  inline ::std::string* release_ornamentgroupname();
  inline void set_allocated_ornamentgroupname(::std::string* ornamentgroupname);

  // repeated int32 GridIdxArr = 2;
  inline int grididxarr_size() const;
  inline void clear_grididxarr();
  static const int kGridIdxArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>OrnamentGroupData</name>
  	<Function>
  		<name>grididxarr</name>
  		<replaceName>GridIdxArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_grididxarr</name>
  		<replaceName>GridIdxArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_grididxarr</name>
  		<replaceName>GridIdxArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_grididxarr</name>
  		<replaceName>GridIdxArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>grididxarr_size</name>
  		<replaceName>GridIdxArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 grididxarr(int index) const;
  inline void set_grididxarr(int index, ::google::protobuf::int32 value);
  inline void add_grididxarr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      grididxarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_grididxarr();

  // @@protoc_insertion_point(class_scope:pb.OrnamentGroupData)
 private:
  inline void set_has_ornamentgroupname();
  inline void clear_has_ornamentgroupname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ornamentgroupname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > grididxarr_;
  friend void  protobuf_AddDesc_module_2fNationalWarMap_2eproto();
  friend void protobuf_AssignDesc_module_2fNationalWarMap_2eproto();
  friend void protobuf_ShutdownFile_module_2fNationalWarMap_2eproto();

  void InitAsDefaultInstance();
  static OrnamentGroupData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>OrnamentGroupGridIdxData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/NationalWarMap.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class OrnamentGroupGridIdxData : public ::google::protobuf::Message {
 public:
  OrnamentGroupGridIdxData();
  virtual ~OrnamentGroupGridIdxData();

  OrnamentGroupGridIdxData(const OrnamentGroupGridIdxData& from);

  inline OrnamentGroupGridIdxData& operator=(const OrnamentGroupGridIdxData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrnamentGroupGridIdxData& default_instance();

  void Swap(OrnamentGroupGridIdxData* other);

  // implements Message ----------------------------------------------

  OrnamentGroupGridIdxData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrnamentGroupGridIdxData& from);
  void MergeFrom(const OrnamentGroupGridIdxData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 OrnamentGroupId = 1;
  inline bool has_ornamentgroupid() const;
  inline void clear_ornamentgroupid();
  static const int kOrnamentGroupIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>OrnamentGroupGridIdxData</name>
  	<Function>
  		<name>ornamentgroupid</name>
  		<replaceName>OrnamentGroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ornamentgroupid</name>
  		<replaceName>OrnamentGroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ornamentgroupid</name>
  		<replaceName>OrnamentGroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 ornamentgroupid() const;
  inline void set_ornamentgroupid(::google::protobuf::int32 value);

  // optional int32 GridIdx = 2;
  inline bool has_grididx() const;
  inline void clear_grididx();
  static const int kGridIdxFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>OrnamentGroupGridIdxData</name>
  	<Function>
  		<name>grididx</name>
  		<replaceName>GridIdx</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_grididx</name>
  		<replaceName>GridIdx</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_grididx</name>
  		<replaceName>GridIdx</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 grididx() const;
  inline void set_grididx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.OrnamentGroupGridIdxData)
 private:
  inline void set_has_ornamentgroupid();
  inline void clear_has_ornamentgroupid();
  inline void set_has_grididx();
  inline void clear_has_grididx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ornamentgroupid_;
  ::google::protobuf::int32 grididx_;
  friend void  protobuf_AddDesc_module_2fNationalWarMap_2eproto();
  friend void protobuf_AssignDesc_module_2fNationalWarMap_2eproto();
  friend void protobuf_ShutdownFile_module_2fNationalWarMap_2eproto();

  void InitAsDefaultInstance();
  static OrnamentGroupGridIdxData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>OrnamentGroupBlockData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/NationalWarMap.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class OrnamentGroupBlockData : public ::google::protobuf::Message {
 public:
  OrnamentGroupBlockData();
  virtual ~OrnamentGroupBlockData();

  OrnamentGroupBlockData(const OrnamentGroupBlockData& from);

  inline OrnamentGroupBlockData& operator=(const OrnamentGroupBlockData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrnamentGroupBlockData& default_instance();

  void Swap(OrnamentGroupBlockData* other);

  // implements Message ----------------------------------------------

  OrnamentGroupBlockData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrnamentGroupBlockData& from);
  void MergeFrom(const OrnamentGroupBlockData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BlockIdx = 1;
  inline bool has_blockidx() const;
  inline void clear_blockidx();
  static const int kBlockIdxFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>OrnamentGroupBlockData</name>
  	<Function>
  		<name>blockidx</name>
  		<replaceName>BlockIdx</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_blockidx</name>
  		<replaceName>BlockIdx</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_blockidx</name>
  		<replaceName>BlockIdx</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 blockidx() const;
  inline void set_blockidx(::google::protobuf::int32 value);

  // repeated int32 OrnamentGroupIdArr = 2;
  inline int ornamentgroupidarr_size() const;
  inline void clear_ornamentgroupidarr();
  static const int kOrnamentGroupIdArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>OrnamentGroupBlockData</name>
  	<Function>
  		<name>ornamentgroupidarr</name>
  		<replaceName>OrnamentGroupIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ornamentgroupidarr</name>
  		<replaceName>OrnamentGroupIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ornamentgroupidarr</name>
  		<replaceName>OrnamentGroupIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ornamentgroupidarr</name>
  		<replaceName>OrnamentGroupIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ornamentgroupidarr_size</name>
  		<replaceName>OrnamentGroupIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 ornamentgroupidarr(int index) const;
  inline void set_ornamentgroupidarr(int index, ::google::protobuf::int32 value);
  inline void add_ornamentgroupidarr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ornamentgroupidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ornamentgroupidarr();

  // @@protoc_insertion_point(class_scope:pb.OrnamentGroupBlockData)
 private:
  inline void set_has_blockidx();
  inline void clear_has_blockidx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ornamentgroupidarr_;
  ::google::protobuf::int32 blockidx_;
  friend void  protobuf_AddDesc_module_2fNationalWarMap_2eproto();
  friend void protobuf_AssignDesc_module_2fNationalWarMap_2eproto();
  friend void protobuf_ShutdownFile_module_2fNationalWarMap_2eproto();

  void InitAsDefaultInstance();
  static OrnamentGroupBlockData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>OrnamentGroupGridData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/NationalWarMap.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class OrnamentGroupGridData : public ::google::protobuf::Message {
 public:
  OrnamentGroupGridData();
  virtual ~OrnamentGroupGridData();

  OrnamentGroupGridData(const OrnamentGroupGridData& from);

  inline OrnamentGroupGridData& operator=(const OrnamentGroupGridData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrnamentGroupGridData& default_instance();

  void Swap(OrnamentGroupGridData* other);

  // implements Message ----------------------------------------------

  OrnamentGroupGridData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrnamentGroupGridData& from);
  void MergeFrom(const OrnamentGroupGridData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 GridIdx = 1;
  inline bool has_grididx() const;
  inline void clear_grididx();
  static const int kGridIdxFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>OrnamentGroupGridData</name>
  	<Function>
  		<name>grididx</name>
  		<replaceName>GridIdx</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_grididx</name>
  		<replaceName>GridIdx</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_grididx</name>
  		<replaceName>GridIdx</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 grididx() const;
  inline void set_grididx(::google::protobuf::int32 value);

  // repeated int32 OrnamentGroupId = 2;
  inline int ornamentgroupid_size() const;
  inline void clear_ornamentgroupid();
  static const int kOrnamentGroupIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>OrnamentGroupGridData</name>
  	<Function>
  		<name>ornamentgroupid</name>
  		<replaceName>OrnamentGroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ornamentgroupid</name>
  		<replaceName>OrnamentGroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ornamentgroupid</name>
  		<replaceName>OrnamentGroupId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ornamentgroupid</name>
  		<replaceName>OrnamentGroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ornamentgroupid_size</name>
  		<replaceName>OrnamentGroupId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 ornamentgroupid(int index) const;
  inline void set_ornamentgroupid(int index, ::google::protobuf::int32 value);
  inline void add_ornamentgroupid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ornamentgroupid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ornamentgroupid();

  // @@protoc_insertion_point(class_scope:pb.OrnamentGroupGridData)
 private:
  inline void set_has_grididx();
  inline void clear_has_grididx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ornamentgroupid_;
  ::google::protobuf::int32 grididx_;
  friend void  protobuf_AddDesc_module_2fNationalWarMap_2eproto();
  friend void protobuf_AssignDesc_module_2fNationalWarMap_2eproto();
  friend void protobuf_ShutdownFile_module_2fNationalWarMap_2eproto();

  void InitAsDefaultInstance();
  static OrnamentGroupGridData* default_instance_;
};
// ===================================================================


// ===================================================================

// NationalWarMap

// required int32 Id = 1;
inline bool NationalWarMap::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NationalWarMap::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NationalWarMap::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NationalWarMap::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NationalWarMap::id() const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMap.Id)
  return id_;
}
inline void NationalWarMap::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.NationalWarMap.Id)
}

// required string MapName = 2;
inline bool NationalWarMap::has_mapname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NationalWarMap::set_has_mapname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NationalWarMap::clear_has_mapname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NationalWarMap::clear_mapname() {
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapname_->clear();
  }
  clear_has_mapname();
}
inline const ::std::string& NationalWarMap::mapname() const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMap.MapName)
  return *mapname_;
}
inline void NationalWarMap::set_mapname(const ::std::string& value) {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapname_ = new ::std::string;
  }
  mapname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.NationalWarMap.MapName)
}
inline void NationalWarMap::set_mapname(const char* value) {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapname_ = new ::std::string;
  }
  mapname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.NationalWarMap.MapName)
}
inline void NationalWarMap::set_mapname(const char* value, size_t size) {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapname_ = new ::std::string;
  }
  mapname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.NationalWarMap.MapName)
}
inline ::std::string* NationalWarMap::mutable_mapname() {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.NationalWarMap.MapName)
  return mapname_;
}
inline ::std::string* NationalWarMap::release_mapname() {
  clear_has_mapname();
  if (mapname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mapname_;
    mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NationalWarMap::set_allocated_mapname(::std::string* mapname) {
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapname_;
  }
  if (mapname) {
    set_has_mapname();
    mapname_ = mapname;
  } else {
    clear_has_mapname();
    mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.NationalWarMap.MapName)
}

// optional int32 MapWidth = 3;
inline bool NationalWarMap::has_mapwidth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NationalWarMap::set_has_mapwidth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NationalWarMap::clear_has_mapwidth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NationalWarMap::clear_mapwidth() {
  mapwidth_ = 0;
  clear_has_mapwidth();
}
inline ::google::protobuf::int32 NationalWarMap::mapwidth() const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMap.MapWidth)
  return mapwidth_;
}
inline void NationalWarMap::set_mapwidth(::google::protobuf::int32 value) {
  set_has_mapwidth();
  mapwidth_ = value;
  // @@protoc_insertion_point(field_set:pb.NationalWarMap.MapWidth)
}

// optional int32 MapHeight = 4;
inline bool NationalWarMap::has_mapheight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NationalWarMap::set_has_mapheight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NationalWarMap::clear_has_mapheight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NationalWarMap::clear_mapheight() {
  mapheight_ = 0;
  clear_has_mapheight();
}
inline ::google::protobuf::int32 NationalWarMap::mapheight() const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMap.MapHeight)
  return mapheight_;
}
inline void NationalWarMap::set_mapheight(::google::protobuf::int32 value) {
  set_has_mapheight();
  mapheight_ = value;
  // @@protoc_insertion_point(field_set:pb.NationalWarMap.MapHeight)
}

// optional int32 CircleCount = 5;
inline bool NationalWarMap::has_circlecount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NationalWarMap::set_has_circlecount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NationalWarMap::clear_has_circlecount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NationalWarMap::clear_circlecount() {
  circlecount_ = 0;
  clear_has_circlecount();
}
inline ::google::protobuf::int32 NationalWarMap::circlecount() const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMap.CircleCount)
  return circlecount_;
}
inline void NationalWarMap::set_circlecount(::google::protobuf::int32 value) {
  set_has_circlecount();
  circlecount_ = value;
  // @@protoc_insertion_point(field_set:pb.NationalWarMap.CircleCount)
}

// repeated .pb.GridData GridDataArr = 6;
inline int NationalWarMap::griddataarr_size() const {
  return griddataarr_.size();
}
inline void NationalWarMap::clear_griddataarr() {
  griddataarr_.Clear();
}
inline const ::pb::GridData& NationalWarMap::griddataarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMap.GridDataArr)
  return griddataarr_.Get(index);
}
inline ::pb::GridData* NationalWarMap::mutable_griddataarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.NationalWarMap.GridDataArr)
  return griddataarr_.Mutable(index);
}
inline ::pb::GridData* NationalWarMap::add_griddataarr() {
  // @@protoc_insertion_point(field_add:pb.NationalWarMap.GridDataArr)
  return griddataarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GridData >&
NationalWarMap::griddataarr() const {
  // @@protoc_insertion_point(field_list:pb.NationalWarMap.GridDataArr)
  return griddataarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GridData >*
NationalWarMap::mutable_griddataarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.NationalWarMap.GridDataArr)
  return &griddataarr_;
}

// repeated .pb.OrnamentGroupData OrnamentGroupDataArr = 7;
inline int NationalWarMap::ornamentgroupdataarr_size() const {
  return ornamentgroupdataarr_.size();
}
inline void NationalWarMap::clear_ornamentgroupdataarr() {
  ornamentgroupdataarr_.Clear();
}
inline const ::pb::OrnamentGroupData& NationalWarMap::ornamentgroupdataarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMap.OrnamentGroupDataArr)
  return ornamentgroupdataarr_.Get(index);
}
inline ::pb::OrnamentGroupData* NationalWarMap::mutable_ornamentgroupdataarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.NationalWarMap.OrnamentGroupDataArr)
  return ornamentgroupdataarr_.Mutable(index);
}
inline ::pb::OrnamentGroupData* NationalWarMap::add_ornamentgroupdataarr() {
  // @@protoc_insertion_point(field_add:pb.NationalWarMap.OrnamentGroupDataArr)
  return ornamentgroupdataarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupData >&
NationalWarMap::ornamentgroupdataarr() const {
  // @@protoc_insertion_point(field_list:pb.NationalWarMap.OrnamentGroupDataArr)
  return ornamentgroupdataarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupData >*
NationalWarMap::mutable_ornamentgroupdataarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.NationalWarMap.OrnamentGroupDataArr)
  return &ornamentgroupdataarr_;
}

// repeated .pb.OrnamentGroupGridIdxData OrnamentGroupGridIdxArr = 8;
inline int NationalWarMap::ornamentgroupgrididxarr_size() const {
  return ornamentgroupgrididxarr_.size();
}
inline void NationalWarMap::clear_ornamentgroupgrididxarr() {
  ornamentgroupgrididxarr_.Clear();
}
inline const ::pb::OrnamentGroupGridIdxData& NationalWarMap::ornamentgroupgrididxarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMap.OrnamentGroupGridIdxArr)
  return ornamentgroupgrididxarr_.Get(index);
}
inline ::pb::OrnamentGroupGridIdxData* NationalWarMap::mutable_ornamentgroupgrididxarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.NationalWarMap.OrnamentGroupGridIdxArr)
  return ornamentgroupgrididxarr_.Mutable(index);
}
inline ::pb::OrnamentGroupGridIdxData* NationalWarMap::add_ornamentgroupgrididxarr() {
  // @@protoc_insertion_point(field_add:pb.NationalWarMap.OrnamentGroupGridIdxArr)
  return ornamentgroupgrididxarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupGridIdxData >&
NationalWarMap::ornamentgroupgrididxarr() const {
  // @@protoc_insertion_point(field_list:pb.NationalWarMap.OrnamentGroupGridIdxArr)
  return ornamentgroupgrididxarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupGridIdxData >*
NationalWarMap::mutable_ornamentgroupgrididxarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.NationalWarMap.OrnamentGroupGridIdxArr)
  return &ornamentgroupgrididxarr_;
}

// repeated .pb.OrnamentGroupBlockData OrnamentGroupBlockDataArr = 9;
inline int NationalWarMap::ornamentgroupblockdataarr_size() const {
  return ornamentgroupblockdataarr_.size();
}
inline void NationalWarMap::clear_ornamentgroupblockdataarr() {
  ornamentgroupblockdataarr_.Clear();
}
inline const ::pb::OrnamentGroupBlockData& NationalWarMap::ornamentgroupblockdataarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMap.OrnamentGroupBlockDataArr)
  return ornamentgroupblockdataarr_.Get(index);
}
inline ::pb::OrnamentGroupBlockData* NationalWarMap::mutable_ornamentgroupblockdataarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.NationalWarMap.OrnamentGroupBlockDataArr)
  return ornamentgroupblockdataarr_.Mutable(index);
}
inline ::pb::OrnamentGroupBlockData* NationalWarMap::add_ornamentgroupblockdataarr() {
  // @@protoc_insertion_point(field_add:pb.NationalWarMap.OrnamentGroupBlockDataArr)
  return ornamentgroupblockdataarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupBlockData >&
NationalWarMap::ornamentgroupblockdataarr() const {
  // @@protoc_insertion_point(field_list:pb.NationalWarMap.OrnamentGroupBlockDataArr)
  return ornamentgroupblockdataarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupBlockData >*
NationalWarMap::mutable_ornamentgroupblockdataarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.NationalWarMap.OrnamentGroupBlockDataArr)
  return &ornamentgroupblockdataarr_;
}

// repeated .pb.OrnamentGroupGridData OrnamentGroupGridDataArr = 10;
inline int NationalWarMap::ornamentgroupgriddataarr_size() const {
  return ornamentgroupgriddataarr_.size();
}
inline void NationalWarMap::clear_ornamentgroupgriddataarr() {
  ornamentgroupgriddataarr_.Clear();
}
inline const ::pb::OrnamentGroupGridData& NationalWarMap::ornamentgroupgriddataarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMap.OrnamentGroupGridDataArr)
  return ornamentgroupgriddataarr_.Get(index);
}
inline ::pb::OrnamentGroupGridData* NationalWarMap::mutable_ornamentgroupgriddataarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.NationalWarMap.OrnamentGroupGridDataArr)
  return ornamentgroupgriddataarr_.Mutable(index);
}
inline ::pb::OrnamentGroupGridData* NationalWarMap::add_ornamentgroupgriddataarr() {
  // @@protoc_insertion_point(field_add:pb.NationalWarMap.OrnamentGroupGridDataArr)
  return ornamentgroupgriddataarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupGridData >&
NationalWarMap::ornamentgroupgriddataarr() const {
  // @@protoc_insertion_point(field_list:pb.NationalWarMap.OrnamentGroupGridDataArr)
  return ornamentgroupgriddataarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupGridData >*
NationalWarMap::mutable_ornamentgroupgriddataarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.NationalWarMap.OrnamentGroupGridDataArr)
  return &ornamentgroupgriddataarr_;
}

// -------------------------------------------------------------------

// GridData

// optional int32 CircleIdx = 1;
inline bool GridData::has_circleidx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GridData::set_has_circleidx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GridData::clear_has_circleidx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GridData::clear_circleidx() {
  circleidx_ = 0;
  clear_has_circleidx();
}
inline ::google::protobuf::int32 GridData::circleidx() const {
  // @@protoc_insertion_point(field_get:pb.GridData.CircleIdx)
  return circleidx_;
}
inline void GridData::set_circleidx(::google::protobuf::int32 value) {
  set_has_circleidx();
  circleidx_ = value;
  // @@protoc_insertion_point(field_set:pb.GridData.CircleIdx)
}

// optional uint32 ResId = 2;
inline bool GridData::has_resid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GridData::set_has_resid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GridData::clear_has_resid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GridData::clear_resid() {
  resid_ = 0u;
  clear_has_resid();
}
inline ::google::protobuf::uint32 GridData::resid() const {
  // @@protoc_insertion_point(field_get:pb.GridData.ResId)
  return resid_;
}
inline void GridData::set_resid(::google::protobuf::uint32 value) {
  set_has_resid();
  resid_ = value;
  // @@protoc_insertion_point(field_set:pb.GridData.ResId)
}

// optional bool IsObstacle = 3;
inline bool GridData::has_isobstacle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GridData::set_has_isobstacle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GridData::clear_has_isobstacle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GridData::clear_isobstacle() {
  isobstacle_ = false;
  clear_has_isobstacle();
}
inline bool GridData::isobstacle() const {
  // @@protoc_insertion_point(field_get:pb.GridData.IsObstacle)
  return isobstacle_;
}
inline void GridData::set_isobstacle(bool value) {
  set_has_isobstacle();
  isobstacle_ = value;
  // @@protoc_insertion_point(field_set:pb.GridData.IsObstacle)
}

// optional bool IsSpecial = 4;
inline bool GridData::has_isspecial() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GridData::set_has_isspecial() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GridData::clear_has_isspecial() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GridData::clear_isspecial() {
  isspecial_ = false;
  clear_has_isspecial();
}
inline bool GridData::isspecial() const {
  // @@protoc_insertion_point(field_get:pb.GridData.IsSpecial)
  return isspecial_;
}
inline void GridData::set_isspecial(bool value) {
  set_has_isspecial();
  isspecial_ = value;
  // @@protoc_insertion_point(field_set:pb.GridData.IsSpecial)
}

// -------------------------------------------------------------------

// OrnamentGroupData

// optional string OrnamentGroupName = 1;
inline bool OrnamentGroupData::has_ornamentgroupname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrnamentGroupData::set_has_ornamentgroupname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrnamentGroupData::clear_has_ornamentgroupname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrnamentGroupData::clear_ornamentgroupname() {
  if (ornamentgroupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ornamentgroupname_->clear();
  }
  clear_has_ornamentgroupname();
}
inline const ::std::string& OrnamentGroupData::ornamentgroupname() const {
  // @@protoc_insertion_point(field_get:pb.OrnamentGroupData.OrnamentGroupName)
  return *ornamentgroupname_;
}
inline void OrnamentGroupData::set_ornamentgroupname(const ::std::string& value) {
  set_has_ornamentgroupname();
  if (ornamentgroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ornamentgroupname_ = new ::std::string;
  }
  ornamentgroupname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.OrnamentGroupData.OrnamentGroupName)
}
inline void OrnamentGroupData::set_ornamentgroupname(const char* value) {
  set_has_ornamentgroupname();
  if (ornamentgroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ornamentgroupname_ = new ::std::string;
  }
  ornamentgroupname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.OrnamentGroupData.OrnamentGroupName)
}
inline void OrnamentGroupData::set_ornamentgroupname(const char* value, size_t size) {
  set_has_ornamentgroupname();
  if (ornamentgroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ornamentgroupname_ = new ::std::string;
  }
  ornamentgroupname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.OrnamentGroupData.OrnamentGroupName)
}
inline ::std::string* OrnamentGroupData::mutable_ornamentgroupname() {
  set_has_ornamentgroupname();
  if (ornamentgroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ornamentgroupname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.OrnamentGroupData.OrnamentGroupName)
  return ornamentgroupname_;
}
inline ::std::string* OrnamentGroupData::release_ornamentgroupname() {
  clear_has_ornamentgroupname();
  if (ornamentgroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ornamentgroupname_;
    ornamentgroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OrnamentGroupData::set_allocated_ornamentgroupname(::std::string* ornamentgroupname) {
  if (ornamentgroupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ornamentgroupname_;
  }
  if (ornamentgroupname) {
    set_has_ornamentgroupname();
    ornamentgroupname_ = ornamentgroupname;
  } else {
    clear_has_ornamentgroupname();
    ornamentgroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.OrnamentGroupData.OrnamentGroupName)
}

// repeated int32 GridIdxArr = 2;
inline int OrnamentGroupData::grididxarr_size() const {
  return grididxarr_.size();
}
inline void OrnamentGroupData::clear_grididxarr() {
  grididxarr_.Clear();
}
inline ::google::protobuf::int32 OrnamentGroupData::grididxarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.OrnamentGroupData.GridIdxArr)
  return grididxarr_.Get(index);
}
inline void OrnamentGroupData::set_grididxarr(int index, ::google::protobuf::int32 value) {
  grididxarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.OrnamentGroupData.GridIdxArr)
}
inline void OrnamentGroupData::add_grididxarr(::google::protobuf::int32 value) {
  grididxarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.OrnamentGroupData.GridIdxArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OrnamentGroupData::grididxarr() const {
  // @@protoc_insertion_point(field_list:pb.OrnamentGroupData.GridIdxArr)
  return grididxarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OrnamentGroupData::mutable_grididxarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.OrnamentGroupData.GridIdxArr)
  return &grididxarr_;
}

// -------------------------------------------------------------------

// OrnamentGroupGridIdxData

// optional int32 OrnamentGroupId = 1;
inline bool OrnamentGroupGridIdxData::has_ornamentgroupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrnamentGroupGridIdxData::set_has_ornamentgroupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrnamentGroupGridIdxData::clear_has_ornamentgroupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrnamentGroupGridIdxData::clear_ornamentgroupid() {
  ornamentgroupid_ = 0;
  clear_has_ornamentgroupid();
}
inline ::google::protobuf::int32 OrnamentGroupGridIdxData::ornamentgroupid() const {
  // @@protoc_insertion_point(field_get:pb.OrnamentGroupGridIdxData.OrnamentGroupId)
  return ornamentgroupid_;
}
inline void OrnamentGroupGridIdxData::set_ornamentgroupid(::google::protobuf::int32 value) {
  set_has_ornamentgroupid();
  ornamentgroupid_ = value;
  // @@protoc_insertion_point(field_set:pb.OrnamentGroupGridIdxData.OrnamentGroupId)
}

// optional int32 GridIdx = 2;
inline bool OrnamentGroupGridIdxData::has_grididx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrnamentGroupGridIdxData::set_has_grididx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrnamentGroupGridIdxData::clear_has_grididx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrnamentGroupGridIdxData::clear_grididx() {
  grididx_ = 0;
  clear_has_grididx();
}
inline ::google::protobuf::int32 OrnamentGroupGridIdxData::grididx() const {
  // @@protoc_insertion_point(field_get:pb.OrnamentGroupGridIdxData.GridIdx)
  return grididx_;
}
inline void OrnamentGroupGridIdxData::set_grididx(::google::protobuf::int32 value) {
  set_has_grididx();
  grididx_ = value;
  // @@protoc_insertion_point(field_set:pb.OrnamentGroupGridIdxData.GridIdx)
}

// -------------------------------------------------------------------

// OrnamentGroupBlockData

// optional int32 BlockIdx = 1;
inline bool OrnamentGroupBlockData::has_blockidx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrnamentGroupBlockData::set_has_blockidx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrnamentGroupBlockData::clear_has_blockidx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrnamentGroupBlockData::clear_blockidx() {
  blockidx_ = 0;
  clear_has_blockidx();
}
inline ::google::protobuf::int32 OrnamentGroupBlockData::blockidx() const {
  // @@protoc_insertion_point(field_get:pb.OrnamentGroupBlockData.BlockIdx)
  return blockidx_;
}
inline void OrnamentGroupBlockData::set_blockidx(::google::protobuf::int32 value) {
  set_has_blockidx();
  blockidx_ = value;
  // @@protoc_insertion_point(field_set:pb.OrnamentGroupBlockData.BlockIdx)
}

// repeated int32 OrnamentGroupIdArr = 2;
inline int OrnamentGroupBlockData::ornamentgroupidarr_size() const {
  return ornamentgroupidarr_.size();
}
inline void OrnamentGroupBlockData::clear_ornamentgroupidarr() {
  ornamentgroupidarr_.Clear();
}
inline ::google::protobuf::int32 OrnamentGroupBlockData::ornamentgroupidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.OrnamentGroupBlockData.OrnamentGroupIdArr)
  return ornamentgroupidarr_.Get(index);
}
inline void OrnamentGroupBlockData::set_ornamentgroupidarr(int index, ::google::protobuf::int32 value) {
  ornamentgroupidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.OrnamentGroupBlockData.OrnamentGroupIdArr)
}
inline void OrnamentGroupBlockData::add_ornamentgroupidarr(::google::protobuf::int32 value) {
  ornamentgroupidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.OrnamentGroupBlockData.OrnamentGroupIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OrnamentGroupBlockData::ornamentgroupidarr() const {
  // @@protoc_insertion_point(field_list:pb.OrnamentGroupBlockData.OrnamentGroupIdArr)
  return ornamentgroupidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OrnamentGroupBlockData::mutable_ornamentgroupidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.OrnamentGroupBlockData.OrnamentGroupIdArr)
  return &ornamentgroupidarr_;
}

// -------------------------------------------------------------------

// OrnamentGroupGridData

// optional int32 GridIdx = 1;
inline bool OrnamentGroupGridData::has_grididx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrnamentGroupGridData::set_has_grididx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrnamentGroupGridData::clear_has_grididx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrnamentGroupGridData::clear_grididx() {
  grididx_ = 0;
  clear_has_grididx();
}
inline ::google::protobuf::int32 OrnamentGroupGridData::grididx() const {
  // @@protoc_insertion_point(field_get:pb.OrnamentGroupGridData.GridIdx)
  return grididx_;
}
inline void OrnamentGroupGridData::set_grididx(::google::protobuf::int32 value) {
  set_has_grididx();
  grididx_ = value;
  // @@protoc_insertion_point(field_set:pb.OrnamentGroupGridData.GridIdx)
}

// repeated int32 OrnamentGroupId = 2;
inline int OrnamentGroupGridData::ornamentgroupid_size() const {
  return ornamentgroupid_.size();
}
inline void OrnamentGroupGridData::clear_ornamentgroupid() {
  ornamentgroupid_.Clear();
}
inline ::google::protobuf::int32 OrnamentGroupGridData::ornamentgroupid(int index) const {
  // @@protoc_insertion_point(field_get:pb.OrnamentGroupGridData.OrnamentGroupId)
  return ornamentgroupid_.Get(index);
}
inline void OrnamentGroupGridData::set_ornamentgroupid(int index, ::google::protobuf::int32 value) {
  ornamentgroupid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.OrnamentGroupGridData.OrnamentGroupId)
}
inline void OrnamentGroupGridData::add_ornamentgroupid(::google::protobuf::int32 value) {
  ornamentgroupid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.OrnamentGroupGridData.OrnamentGroupId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OrnamentGroupGridData::ornamentgroupid() const {
  // @@protoc_insertion_point(field_list:pb.OrnamentGroupGridData.OrnamentGroupId)
  return ornamentgroupid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OrnamentGroupGridData::mutable_ornamentgroupid() {
  // @@protoc_insertion_point(field_mutable_list:pb.OrnamentGroupGridData.OrnamentGroupId)
  return &ornamentgroupid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fNationalWarMap_2eproto__INCLUDED
