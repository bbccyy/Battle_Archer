// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Moments.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Moments.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TMomentsPublishedData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMomentsPublishedData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMomentsPrePublishData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMomentsPrePublishData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMomentsInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMomentsInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMomentsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMomentsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMomentsCommentOnReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMomentsCommentOnReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMomentsPublishReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMomentsPublishReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMomentsLikeOnReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMomentsLikeOnReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fMoments_2eproto() {
  protobuf_AddDesc_net_2fMoments_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Moments.proto");
  GOOGLE_CHECK(file != NULL);
  TMomentsPublishedData_descriptor_ = file->message_type(0);
  static const int TMomentsPublishedData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsPublishedData, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsPublishedData, publishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsPublishedData, playercommenttid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsPublishedData, playercommenttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsPublishedData, playerliketime_),
  };
  TMomentsPublishedData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMomentsPublishedData_descriptor_,
      TMomentsPublishedData::default_instance_,
      TMomentsPublishedData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsPublishedData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsPublishedData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMomentsPublishedData));
  TMomentsPrePublishData_descriptor_ = file->message_type(1);
  static const int TMomentsPrePublishData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsPrePublishData, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsPrePublishData, triggertime_),
  };
  TMomentsPrePublishData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMomentsPrePublishData_descriptor_,
      TMomentsPrePublishData::default_instance_,
      TMomentsPrePublishData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsPrePublishData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsPrePublishData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMomentsPrePublishData));
  TMomentsInfoRsp_descriptor_ = file->message_type(2);
  static const int TMomentsInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsInfoRsp, publisharr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsInfoRsp, prearr_),
  };
  TMomentsInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMomentsInfoRsp_descriptor_,
      TMomentsInfoRsp::default_instance_,
      TMomentsInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMomentsInfoRsp));
  TMomentsNotify_descriptor_ = file->message_type(3);
  static const int TMomentsNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsNotify, publishinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsNotify, prearr_),
  };
  TMomentsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMomentsNotify_descriptor_,
      TMomentsNotify::default_instance_,
      TMomentsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMomentsNotify));
  TMomentsCommentOnReq_descriptor_ = file->message_type(4);
  static const int TMomentsCommentOnReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsCommentOnReq, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsCommentOnReq, commenttid_),
  };
  TMomentsCommentOnReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMomentsCommentOnReq_descriptor_,
      TMomentsCommentOnReq::default_instance_,
      TMomentsCommentOnReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsCommentOnReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsCommentOnReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMomentsCommentOnReq));
  TMomentsPublishReq_descriptor_ = file->message_type(5);
  static const int TMomentsPublishReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsPublishReq, tid_),
  };
  TMomentsPublishReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMomentsPublishReq_descriptor_,
      TMomentsPublishReq::default_instance_,
      TMomentsPublishReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsPublishReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsPublishReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMomentsPublishReq));
  TMomentsLikeOnReq_descriptor_ = file->message_type(6);
  static const int TMomentsLikeOnReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsLikeOnReq, tid_),
  };
  TMomentsLikeOnReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMomentsLikeOnReq_descriptor_,
      TMomentsLikeOnReq::default_instance_,
      TMomentsLikeOnReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsLikeOnReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMomentsLikeOnReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMomentsLikeOnReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fMoments_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMomentsPublishedData_descriptor_, &TMomentsPublishedData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMomentsPrePublishData_descriptor_, &TMomentsPrePublishData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMomentsInfoRsp_descriptor_, &TMomentsInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMomentsNotify_descriptor_, &TMomentsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMomentsCommentOnReq_descriptor_, &TMomentsCommentOnReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMomentsPublishReq_descriptor_, &TMomentsPublishReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMomentsLikeOnReq_descriptor_, &TMomentsLikeOnReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fMoments_2eproto() {
  delete TMomentsPublishedData::default_instance_;
  delete TMomentsPublishedData_reflection_;
  delete TMomentsPrePublishData::default_instance_;
  delete TMomentsPrePublishData_reflection_;
  delete TMomentsInfoRsp::default_instance_;
  delete TMomentsInfoRsp_reflection_;
  delete TMomentsNotify::default_instance_;
  delete TMomentsNotify_reflection_;
  delete TMomentsCommentOnReq::default_instance_;
  delete TMomentsCommentOnReq_reflection_;
  delete TMomentsPublishReq::default_instance_;
  delete TMomentsPublishReq_reflection_;
  delete TMomentsLikeOnReq::default_instance_;
  delete TMomentsLikeOnReq_reflection_;
}

void protobuf_AddDesc_net_2fMoments_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021net/Moments.proto\022\002pb\"\206\001\n\025TMomentsPubl"
    "ishedData\022\013\n\003Tid\030\001 \001(\005\022\023\n\013PublishTime\030\002 "
    "\001(\003\022\030\n\020PlayerCommentTid\030\003 \001(\005\022\031\n\021PlayerC"
    "ommentTime\030\004 \001(\003\022\026\n\016PlayerLikeTime\030\005 \001(\003"
    "\":\n\026TMomentsPrePublishData\022\013\n\003Tid\030\001 \001(\005\022"
    "\023\n\013TriggerTime\030\002 \001(\003\"l\n\017TMomentsInfoRsp\022"
    "-\n\nPublishArr\030\001 \003(\0132\031.pb.TMomentsPublish"
    "edData\022*\n\006PreArr\030\002 \003(\0132\032.pb.TMomentsPreP"
    "ublishData\"l\n\016TMomentsNotify\022.\n\013PublishI"
    "nfo\030\001 \001(\0132\031.pb.TMomentsPublishedData\022*\n\006"
    "PreArr\030\002 \003(\0132\032.pb.TMomentsPrePublishData"
    "\"7\n\024TMomentsCommentOnReq\022\013\n\003Tid\030\001 \001(\005\022\022\n"
    "\nCommentTid\030\002 \001(\005\"!\n\022TMomentsPublishReq\022"
    "\013\n\003Tid\030\001 \001(\005\" \n\021TMomentsLikeOnReq\022\013\n\003Tid"
    "\030\001 \001(\005", 566);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Moments.proto", &protobuf_RegisterTypes);
  TMomentsPublishedData::default_instance_ = new TMomentsPublishedData();
  TMomentsPrePublishData::default_instance_ = new TMomentsPrePublishData();
  TMomentsInfoRsp::default_instance_ = new TMomentsInfoRsp();
  TMomentsNotify::default_instance_ = new TMomentsNotify();
  TMomentsCommentOnReq::default_instance_ = new TMomentsCommentOnReq();
  TMomentsPublishReq::default_instance_ = new TMomentsPublishReq();
  TMomentsLikeOnReq::default_instance_ = new TMomentsLikeOnReq();
  TMomentsPublishedData::default_instance_->InitAsDefaultInstance();
  TMomentsPrePublishData::default_instance_->InitAsDefaultInstance();
  TMomentsInfoRsp::default_instance_->InitAsDefaultInstance();
  TMomentsNotify::default_instance_->InitAsDefaultInstance();
  TMomentsCommentOnReq::default_instance_->InitAsDefaultInstance();
  TMomentsPublishReq::default_instance_->InitAsDefaultInstance();
  TMomentsLikeOnReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fMoments_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fMoments_2eproto {
  StaticDescriptorInitializer_net_2fMoments_2eproto() {
    protobuf_AddDesc_net_2fMoments_2eproto();
  }
} static_descriptor_initializer_net_2fMoments_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TMomentsPublishedData::kTidFieldNumber;
const int TMomentsPublishedData::kPublishTimeFieldNumber;
const int TMomentsPublishedData::kPlayerCommentTidFieldNumber;
const int TMomentsPublishedData::kPlayerCommentTimeFieldNumber;
const int TMomentsPublishedData::kPlayerLikeTimeFieldNumber;
#endif  // !_MSC_VER

TMomentsPublishedData::TMomentsPublishedData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMomentsPublishedData)
}

void TMomentsPublishedData::InitAsDefaultInstance() {
}

TMomentsPublishedData::TMomentsPublishedData(const TMomentsPublishedData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMomentsPublishedData)
}

void TMomentsPublishedData::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0;
  publishtime_ = GOOGLE_LONGLONG(0);
  playercommenttid_ = 0;
  playercommenttime_ = GOOGLE_LONGLONG(0);
  playerliketime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMomentsPublishedData::~TMomentsPublishedData() {
  // @@protoc_insertion_point(destructor:pb.TMomentsPublishedData)
  SharedDtor();
}

void TMomentsPublishedData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMomentsPublishedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMomentsPublishedData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMomentsPublishedData_descriptor_;
}

const TMomentsPublishedData& TMomentsPublishedData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMoments_2eproto();
  return *default_instance_;
}

TMomentsPublishedData* TMomentsPublishedData::default_instance_ = NULL;

TMomentsPublishedData* TMomentsPublishedData::New() const {
  return new TMomentsPublishedData;
}

void TMomentsPublishedData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TMomentsPublishedData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(publishtime_, playerliketime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMomentsPublishedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMomentsPublishedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PublishTime;
        break;
      }

      // optional int64 PublishTime = 2;
      case 2: {
        if (tag == 16) {
         parse_PublishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &publishtime_)));
          set_has_publishtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PlayerCommentTid;
        break;
      }

      // optional int32 PlayerCommentTid = 3;
      case 3: {
        if (tag == 24) {
         parse_PlayerCommentTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playercommenttid_)));
          set_has_playercommenttid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PlayerCommentTime;
        break;
      }

      // optional int64 PlayerCommentTime = 4;
      case 4: {
        if (tag == 32) {
         parse_PlayerCommentTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playercommenttime_)));
          set_has_playercommenttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_PlayerLikeTime;
        break;
      }

      // optional int64 PlayerLikeTime = 5;
      case 5: {
        if (tag == 40) {
         parse_PlayerLikeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerliketime_)));
          set_has_playerliketime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMomentsPublishedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMomentsPublishedData)
  return false;
#undef DO_
}

void TMomentsPublishedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMomentsPublishedData)
  // optional int32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }

  // optional int64 PublishTime = 2;
  if (has_publishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->publishtime(), output);
  }

  // optional int32 PlayerCommentTid = 3;
  if (has_playercommenttid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playercommenttid(), output);
  }

  // optional int64 PlayerCommentTime = 4;
  if (has_playercommenttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->playercommenttime(), output);
  }

  // optional int64 PlayerLikeTime = 5;
  if (has_playerliketime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->playerliketime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMomentsPublishedData)
}

::google::protobuf::uint8* TMomentsPublishedData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMomentsPublishedData)
  // optional int32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }

  // optional int64 PublishTime = 2;
  if (has_publishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->publishtime(), target);
  }

  // optional int32 PlayerCommentTid = 3;
  if (has_playercommenttid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playercommenttid(), target);
  }

  // optional int64 PlayerCommentTime = 4;
  if (has_playercommenttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->playercommenttime(), target);
  }

  // optional int64 PlayerLikeTime = 5;
  if (has_playerliketime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->playerliketime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMomentsPublishedData)
  return target;
}

int TMomentsPublishedData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int64 PublishTime = 2;
    if (has_publishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->publishtime());
    }

    // optional int32 PlayerCommentTid = 3;
    if (has_playercommenttid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playercommenttid());
    }

    // optional int64 PlayerCommentTime = 4;
    if (has_playercommenttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playercommenttime());
    }

    // optional int64 PlayerLikeTime = 5;
    if (has_playerliketime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerliketime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMomentsPublishedData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMomentsPublishedData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMomentsPublishedData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMomentsPublishedData::MergeFrom(const TMomentsPublishedData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_publishtime()) {
      set_publishtime(from.publishtime());
    }
    if (from.has_playercommenttid()) {
      set_playercommenttid(from.playercommenttid());
    }
    if (from.has_playercommenttime()) {
      set_playercommenttime(from.playercommenttime());
    }
    if (from.has_playerliketime()) {
      set_playerliketime(from.playerliketime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMomentsPublishedData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMomentsPublishedData::CopyFrom(const TMomentsPublishedData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMomentsPublishedData::IsInitialized() const {

  return true;
}

void TMomentsPublishedData::Swap(TMomentsPublishedData* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(publishtime_, other->publishtime_);
    std::swap(playercommenttid_, other->playercommenttid_);
    std::swap(playercommenttime_, other->playercommenttime_);
    std::swap(playerliketime_, other->playerliketime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMomentsPublishedData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMomentsPublishedData_descriptor_;
  metadata.reflection = TMomentsPublishedData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMomentsPrePublishData::kTidFieldNumber;
const int TMomentsPrePublishData::kTriggerTimeFieldNumber;
#endif  // !_MSC_VER

TMomentsPrePublishData::TMomentsPrePublishData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMomentsPrePublishData)
}

void TMomentsPrePublishData::InitAsDefaultInstance() {
}

TMomentsPrePublishData::TMomentsPrePublishData(const TMomentsPrePublishData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMomentsPrePublishData)
}

void TMomentsPrePublishData::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0;
  triggertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMomentsPrePublishData::~TMomentsPrePublishData() {
  // @@protoc_insertion_point(destructor:pb.TMomentsPrePublishData)
  SharedDtor();
}

void TMomentsPrePublishData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMomentsPrePublishData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMomentsPrePublishData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMomentsPrePublishData_descriptor_;
}

const TMomentsPrePublishData& TMomentsPrePublishData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMoments_2eproto();
  return *default_instance_;
}

TMomentsPrePublishData* TMomentsPrePublishData::default_instance_ = NULL;

TMomentsPrePublishData* TMomentsPrePublishData::New() const {
  return new TMomentsPrePublishData;
}

void TMomentsPrePublishData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TMomentsPrePublishData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(triggertime_, tid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMomentsPrePublishData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMomentsPrePublishData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TriggerTime;
        break;
      }

      // optional int64 TriggerTime = 2;
      case 2: {
        if (tag == 16) {
         parse_TriggerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &triggertime_)));
          set_has_triggertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMomentsPrePublishData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMomentsPrePublishData)
  return false;
#undef DO_
}

void TMomentsPrePublishData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMomentsPrePublishData)
  // optional int32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }

  // optional int64 TriggerTime = 2;
  if (has_triggertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->triggertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMomentsPrePublishData)
}

::google::protobuf::uint8* TMomentsPrePublishData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMomentsPrePublishData)
  // optional int32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }

  // optional int64 TriggerTime = 2;
  if (has_triggertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->triggertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMomentsPrePublishData)
  return target;
}

int TMomentsPrePublishData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int64 TriggerTime = 2;
    if (has_triggertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->triggertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMomentsPrePublishData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMomentsPrePublishData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMomentsPrePublishData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMomentsPrePublishData::MergeFrom(const TMomentsPrePublishData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_triggertime()) {
      set_triggertime(from.triggertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMomentsPrePublishData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMomentsPrePublishData::CopyFrom(const TMomentsPrePublishData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMomentsPrePublishData::IsInitialized() const {

  return true;
}

void TMomentsPrePublishData::Swap(TMomentsPrePublishData* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(triggertime_, other->triggertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMomentsPrePublishData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMomentsPrePublishData_descriptor_;
  metadata.reflection = TMomentsPrePublishData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMomentsInfoRsp::kPublishArrFieldNumber;
const int TMomentsInfoRsp::kPreArrFieldNumber;
#endif  // !_MSC_VER

TMomentsInfoRsp::TMomentsInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMomentsInfoRsp)
}

void TMomentsInfoRsp::InitAsDefaultInstance() {
}

TMomentsInfoRsp::TMomentsInfoRsp(const TMomentsInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMomentsInfoRsp)
}

void TMomentsInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMomentsInfoRsp::~TMomentsInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TMomentsInfoRsp)
  SharedDtor();
}

void TMomentsInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMomentsInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMomentsInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMomentsInfoRsp_descriptor_;
}

const TMomentsInfoRsp& TMomentsInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMoments_2eproto();
  return *default_instance_;
}

TMomentsInfoRsp* TMomentsInfoRsp::default_instance_ = NULL;

TMomentsInfoRsp* TMomentsInfoRsp::New() const {
  return new TMomentsInfoRsp;
}

void TMomentsInfoRsp::Clear() {
  publisharr_.Clear();
  prearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMomentsInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMomentsInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TMomentsPublishedData PublishArr = 1;
      case 1: {
        if (tag == 10) {
         parse_PublishArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_publisharr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_PublishArr;
        if (input->ExpectTag(18)) goto parse_PreArr;
        break;
      }

      // repeated .pb.TMomentsPrePublishData PreArr = 2;
      case 2: {
        if (tag == 18) {
         parse_PreArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PreArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMomentsInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMomentsInfoRsp)
  return false;
#undef DO_
}

void TMomentsInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMomentsInfoRsp)
  // repeated .pb.TMomentsPublishedData PublishArr = 1;
  for (int i = 0; i < this->publisharr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->publisharr(i), output);
  }

  // repeated .pb.TMomentsPrePublishData PreArr = 2;
  for (int i = 0; i < this->prearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMomentsInfoRsp)
}

::google::protobuf::uint8* TMomentsInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMomentsInfoRsp)
  // repeated .pb.TMomentsPublishedData PublishArr = 1;
  for (int i = 0; i < this->publisharr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->publisharr(i), target);
  }

  // repeated .pb.TMomentsPrePublishData PreArr = 2;
  for (int i = 0; i < this->prearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMomentsInfoRsp)
  return target;
}

int TMomentsInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TMomentsPublishedData PublishArr = 1;
  total_size += 1 * this->publisharr_size();
  for (int i = 0; i < this->publisharr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->publisharr(i));
  }

  // repeated .pb.TMomentsPrePublishData PreArr = 2;
  total_size += 1 * this->prearr_size();
  for (int i = 0; i < this->prearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMomentsInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMomentsInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMomentsInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMomentsInfoRsp::MergeFrom(const TMomentsInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  publisharr_.MergeFrom(from.publisharr_);
  prearr_.MergeFrom(from.prearr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMomentsInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMomentsInfoRsp::CopyFrom(const TMomentsInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMomentsInfoRsp::IsInitialized() const {

  return true;
}

void TMomentsInfoRsp::Swap(TMomentsInfoRsp* other) {
  if (other != this) {
    publisharr_.Swap(&other->publisharr_);
    prearr_.Swap(&other->prearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMomentsInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMomentsInfoRsp_descriptor_;
  metadata.reflection = TMomentsInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMomentsNotify::kPublishInfoFieldNumber;
const int TMomentsNotify::kPreArrFieldNumber;
#endif  // !_MSC_VER

TMomentsNotify::TMomentsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMomentsNotify)
}

void TMomentsNotify::InitAsDefaultInstance() {
  publishinfo_ = const_cast< ::pb::TMomentsPublishedData*>(&::pb::TMomentsPublishedData::default_instance());
}

TMomentsNotify::TMomentsNotify(const TMomentsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMomentsNotify)
}

void TMomentsNotify::SharedCtor() {
  _cached_size_ = 0;
  publishinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMomentsNotify::~TMomentsNotify() {
  // @@protoc_insertion_point(destructor:pb.TMomentsNotify)
  SharedDtor();
}

void TMomentsNotify::SharedDtor() {
  if (this != default_instance_) {
    delete publishinfo_;
  }
}

void TMomentsNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMomentsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMomentsNotify_descriptor_;
}

const TMomentsNotify& TMomentsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMoments_2eproto();
  return *default_instance_;
}

TMomentsNotify* TMomentsNotify::default_instance_ = NULL;

TMomentsNotify* TMomentsNotify::New() const {
  return new TMomentsNotify;
}

void TMomentsNotify::Clear() {
  if (has_publishinfo()) {
    if (publishinfo_ != NULL) publishinfo_->::pb::TMomentsPublishedData::Clear();
  }
  prearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMomentsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMomentsNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TMomentsPublishedData PublishInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publishinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PreArr;
        break;
      }

      // repeated .pb.TMomentsPrePublishData PreArr = 2;
      case 2: {
        if (tag == 18) {
         parse_PreArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PreArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMomentsNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMomentsNotify)
  return false;
#undef DO_
}

void TMomentsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMomentsNotify)
  // optional .pb.TMomentsPublishedData PublishInfo = 1;
  if (has_publishinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->publishinfo(), output);
  }

  // repeated .pb.TMomentsPrePublishData PreArr = 2;
  for (int i = 0; i < this->prearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMomentsNotify)
}

::google::protobuf::uint8* TMomentsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMomentsNotify)
  // optional .pb.TMomentsPublishedData PublishInfo = 1;
  if (has_publishinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->publishinfo(), target);
  }

  // repeated .pb.TMomentsPrePublishData PreArr = 2;
  for (int i = 0; i < this->prearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMomentsNotify)
  return target;
}

int TMomentsNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TMomentsPublishedData PublishInfo = 1;
    if (has_publishinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->publishinfo());
    }

  }
  // repeated .pb.TMomentsPrePublishData PreArr = 2;
  total_size += 1 * this->prearr_size();
  for (int i = 0; i < this->prearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMomentsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMomentsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMomentsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMomentsNotify::MergeFrom(const TMomentsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  prearr_.MergeFrom(from.prearr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_publishinfo()) {
      mutable_publishinfo()->::pb::TMomentsPublishedData::MergeFrom(from.publishinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMomentsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMomentsNotify::CopyFrom(const TMomentsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMomentsNotify::IsInitialized() const {

  return true;
}

void TMomentsNotify::Swap(TMomentsNotify* other) {
  if (other != this) {
    std::swap(publishinfo_, other->publishinfo_);
    prearr_.Swap(&other->prearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMomentsNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMomentsNotify_descriptor_;
  metadata.reflection = TMomentsNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMomentsCommentOnReq::kTidFieldNumber;
const int TMomentsCommentOnReq::kCommentTidFieldNumber;
#endif  // !_MSC_VER

TMomentsCommentOnReq::TMomentsCommentOnReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMomentsCommentOnReq)
}

void TMomentsCommentOnReq::InitAsDefaultInstance() {
}

TMomentsCommentOnReq::TMomentsCommentOnReq(const TMomentsCommentOnReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMomentsCommentOnReq)
}

void TMomentsCommentOnReq::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0;
  commenttid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMomentsCommentOnReq::~TMomentsCommentOnReq() {
  // @@protoc_insertion_point(destructor:pb.TMomentsCommentOnReq)
  SharedDtor();
}

void TMomentsCommentOnReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMomentsCommentOnReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMomentsCommentOnReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMomentsCommentOnReq_descriptor_;
}

const TMomentsCommentOnReq& TMomentsCommentOnReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMoments_2eproto();
  return *default_instance_;
}

TMomentsCommentOnReq* TMomentsCommentOnReq::default_instance_ = NULL;

TMomentsCommentOnReq* TMomentsCommentOnReq::New() const {
  return new TMomentsCommentOnReq;
}

void TMomentsCommentOnReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TMomentsCommentOnReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tid_, commenttid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMomentsCommentOnReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMomentsCommentOnReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CommentTid;
        break;
      }

      // optional int32 CommentTid = 2;
      case 2: {
        if (tag == 16) {
         parse_CommentTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commenttid_)));
          set_has_commenttid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMomentsCommentOnReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMomentsCommentOnReq)
  return false;
#undef DO_
}

void TMomentsCommentOnReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMomentsCommentOnReq)
  // optional int32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }

  // optional int32 CommentTid = 2;
  if (has_commenttid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->commenttid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMomentsCommentOnReq)
}

::google::protobuf::uint8* TMomentsCommentOnReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMomentsCommentOnReq)
  // optional int32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }

  // optional int32 CommentTid = 2;
  if (has_commenttid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->commenttid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMomentsCommentOnReq)
  return target;
}

int TMomentsCommentOnReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int32 CommentTid = 2;
    if (has_commenttid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commenttid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMomentsCommentOnReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMomentsCommentOnReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMomentsCommentOnReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMomentsCommentOnReq::MergeFrom(const TMomentsCommentOnReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_commenttid()) {
      set_commenttid(from.commenttid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMomentsCommentOnReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMomentsCommentOnReq::CopyFrom(const TMomentsCommentOnReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMomentsCommentOnReq::IsInitialized() const {

  return true;
}

void TMomentsCommentOnReq::Swap(TMomentsCommentOnReq* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(commenttid_, other->commenttid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMomentsCommentOnReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMomentsCommentOnReq_descriptor_;
  metadata.reflection = TMomentsCommentOnReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMomentsPublishReq::kTidFieldNumber;
#endif  // !_MSC_VER

TMomentsPublishReq::TMomentsPublishReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMomentsPublishReq)
}

void TMomentsPublishReq::InitAsDefaultInstance() {
}

TMomentsPublishReq::TMomentsPublishReq(const TMomentsPublishReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMomentsPublishReq)
}

void TMomentsPublishReq::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMomentsPublishReq::~TMomentsPublishReq() {
  // @@protoc_insertion_point(destructor:pb.TMomentsPublishReq)
  SharedDtor();
}

void TMomentsPublishReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMomentsPublishReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMomentsPublishReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMomentsPublishReq_descriptor_;
}

const TMomentsPublishReq& TMomentsPublishReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMoments_2eproto();
  return *default_instance_;
}

TMomentsPublishReq* TMomentsPublishReq::default_instance_ = NULL;

TMomentsPublishReq* TMomentsPublishReq::New() const {
  return new TMomentsPublishReq;
}

void TMomentsPublishReq::Clear() {
  tid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMomentsPublishReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMomentsPublishReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMomentsPublishReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMomentsPublishReq)
  return false;
#undef DO_
}

void TMomentsPublishReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMomentsPublishReq)
  // optional int32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMomentsPublishReq)
}

::google::protobuf::uint8* TMomentsPublishReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMomentsPublishReq)
  // optional int32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMomentsPublishReq)
  return target;
}

int TMomentsPublishReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMomentsPublishReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMomentsPublishReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMomentsPublishReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMomentsPublishReq::MergeFrom(const TMomentsPublishReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMomentsPublishReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMomentsPublishReq::CopyFrom(const TMomentsPublishReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMomentsPublishReq::IsInitialized() const {

  return true;
}

void TMomentsPublishReq::Swap(TMomentsPublishReq* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMomentsPublishReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMomentsPublishReq_descriptor_;
  metadata.reflection = TMomentsPublishReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMomentsLikeOnReq::kTidFieldNumber;
#endif  // !_MSC_VER

TMomentsLikeOnReq::TMomentsLikeOnReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMomentsLikeOnReq)
}

void TMomentsLikeOnReq::InitAsDefaultInstance() {
}

TMomentsLikeOnReq::TMomentsLikeOnReq(const TMomentsLikeOnReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMomentsLikeOnReq)
}

void TMomentsLikeOnReq::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMomentsLikeOnReq::~TMomentsLikeOnReq() {
  // @@protoc_insertion_point(destructor:pb.TMomentsLikeOnReq)
  SharedDtor();
}

void TMomentsLikeOnReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMomentsLikeOnReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMomentsLikeOnReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMomentsLikeOnReq_descriptor_;
}

const TMomentsLikeOnReq& TMomentsLikeOnReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMoments_2eproto();
  return *default_instance_;
}

TMomentsLikeOnReq* TMomentsLikeOnReq::default_instance_ = NULL;

TMomentsLikeOnReq* TMomentsLikeOnReq::New() const {
  return new TMomentsLikeOnReq;
}

void TMomentsLikeOnReq::Clear() {
  tid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMomentsLikeOnReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMomentsLikeOnReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMomentsLikeOnReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMomentsLikeOnReq)
  return false;
#undef DO_
}

void TMomentsLikeOnReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMomentsLikeOnReq)
  // optional int32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMomentsLikeOnReq)
}

::google::protobuf::uint8* TMomentsLikeOnReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMomentsLikeOnReq)
  // optional int32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMomentsLikeOnReq)
  return target;
}

int TMomentsLikeOnReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMomentsLikeOnReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMomentsLikeOnReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMomentsLikeOnReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMomentsLikeOnReq::MergeFrom(const TMomentsLikeOnReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMomentsLikeOnReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMomentsLikeOnReq::CopyFrom(const TMomentsLikeOnReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMomentsLikeOnReq::IsInitialized() const {

  return true;
}

void TMomentsLikeOnReq::Swap(TMomentsLikeOnReq* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMomentsLikeOnReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMomentsLikeOnReq_descriptor_;
  metadata.reflection = TMomentsLikeOnReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
