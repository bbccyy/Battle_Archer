// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SceneUIAudio.proto

#ifndef PROTOBUF_module_2fSceneUIAudio_2eproto__INCLUDED
#define PROTOBUF_module_2fSceneUIAudio_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/AudioDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fSceneUIAudio_2eproto();
void protobuf_AssignDesc_module_2fSceneUIAudio_2eproto();
void protobuf_ShutdownFile_module_2fSceneUIAudio_2eproto();

class ButtonClickAudioInfo;
class SceneUIAudio;

// ===================================================================

/*FOR2LUA
<Record>
	<name>ButtonClickAudioInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SceneUIAudio.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class ButtonClickAudioInfo : public ::google::protobuf::Message {
 public:
  ButtonClickAudioInfo();
  virtual ~ButtonClickAudioInfo();

  ButtonClickAudioInfo(const ButtonClickAudioInfo& from);

  inline ButtonClickAudioInfo& operator=(const ButtonClickAudioInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ButtonClickAudioInfo& default_instance();

  void Swap(ButtonClickAudioInfo* other);

  // implements Message ----------------------------------------------

  ButtonClickAudioInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ButtonClickAudioInfo& from);
  void MergeFrom(const ButtonClickAudioInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ComponentName = 1;
  inline bool has_componentname() const;
  inline void clear_componentname();
  static const int kComponentNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>ButtonClickAudioInfo</name>
  	<Function>
  		<name>componentname</name>
  		<replaceName>ComponentName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_componentname</name>
  		<replaceName>ComponentName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_componentname</name>
  		<replaceName>ComponentName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& componentname() const;
  inline void set_componentname(const ::std::string& value);
  inline void set_componentname(const char* value);
  inline void set_componentname(const char* value, size_t size);
  inline ::std::string* mutable_componentname();
  inline ::std::string* release_componentname();
  inline void set_allocated_componentname(::std::string* componentname);

  // optional .pb.AudioInfo DownAduioInfo = 2;
  inline bool has_downaduioinfo() const;
  inline void clear_downaduioinfo();
  static const int kDownAduioInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>ButtonClickAudioInfo</name>
  	<Function>
  		<name>downaduioinfo</name>
  		<replaceName>DownAduioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_downaduioinfo</name>
  		<replaceName>DownAduioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_downaduioinfo</name>
  		<replaceName>DownAduioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_downaduioinfo</name>
  		<replaceName>DownAduioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AudioInfo& downaduioinfo() const;
  inline ::pb::AudioInfo* mutable_downaduioinfo();
  inline ::pb::AudioInfo* release_downaduioinfo();
  inline void set_allocated_downaduioinfo(::pb::AudioInfo* downaduioinfo);

  // optional .pb.AudioInfo UpAudioInfo = 3;
  inline bool has_upaudioinfo() const;
  inline void clear_upaudioinfo();
  static const int kUpAudioInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>ButtonClickAudioInfo</name>
  	<Function>
  		<name>upaudioinfo</name>
  		<replaceName>UpAudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_upaudioinfo</name>
  		<replaceName>UpAudioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_upaudioinfo</name>
  		<replaceName>UpAudioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_upaudioinfo</name>
  		<replaceName>UpAudioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AudioInfo& upaudioinfo() const;
  inline ::pb::AudioInfo* mutable_upaudioinfo();
  inline ::pb::AudioInfo* release_upaudioinfo();
  inline void set_allocated_upaudioinfo(::pb::AudioInfo* upaudioinfo);

  // @@protoc_insertion_point(class_scope:pb.ButtonClickAudioInfo)
 private:
  inline void set_has_componentname();
  inline void clear_has_componentname();
  inline void set_has_downaduioinfo();
  inline void clear_has_downaduioinfo();
  inline void set_has_upaudioinfo();
  inline void clear_has_upaudioinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* componentname_;
  ::pb::AudioInfo* downaduioinfo_;
  ::pb::AudioInfo* upaudioinfo_;
  friend void  protobuf_AddDesc_module_2fSceneUIAudio_2eproto();
  friend void protobuf_AssignDesc_module_2fSceneUIAudio_2eproto();
  friend void protobuf_ShutdownFile_module_2fSceneUIAudio_2eproto();

  void InitAsDefaultInstance();
  static ButtonClickAudioInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SceneUIAudio</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SceneUIAudio.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SceneUIAudio : public ::google::protobuf::Message {
 public:
  SceneUIAudio();
  virtual ~SceneUIAudio();

  SceneUIAudio(const SceneUIAudio& from);

  inline SceneUIAudio& operator=(const SceneUIAudio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneUIAudio& default_instance();

  void Swap(SceneUIAudio* other);

  // implements Message ----------------------------------------------

  SceneUIAudio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneUIAudio& from);
  void MergeFrom(const SceneUIAudio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SceneUIAudio</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string SceneUIName = 2;
  inline bool has_sceneuiname() const;
  inline void clear_sceneuiname();
  static const int kSceneUINameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SceneUIAudio</name>
  	<Function>
  		<name>sceneuiname</name>
  		<replaceName>SceneUIName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sceneuiname</name>
  		<replaceName>SceneUIName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sceneuiname</name>
  		<replaceName>SceneUIName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& sceneuiname() const;
  inline void set_sceneuiname(const ::std::string& value);
  inline void set_sceneuiname(const char* value);
  inline void set_sceneuiname(const char* value, size_t size);
  inline ::std::string* mutable_sceneuiname();
  inline ::std::string* release_sceneuiname();
  inline void set_allocated_sceneuiname(::std::string* sceneuiname);

  // repeated .pb.ButtonClickAudioInfo ButtonClickAudioInfo = 7;
  inline int buttonclickaudioinfo_size() const;
  inline void clear_buttonclickaudioinfo();
  static const int kButtonClickAudioInfoFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>SceneUIAudio</name>
  	<Function>
  		<name>buttonclickaudioinfo</name>
  		<replaceName>ButtonClickAudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buttonclickaudioinfo</name>
  		<replaceName>ButtonClickAudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buttonclickaudioinfo</name>
  		<replaceName>ButtonClickAudioInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buttonclickaudioinfo</name>
  		<replaceName>ButtonClickAudioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buttonclickaudioinfo_size</name>
  		<replaceName>ButtonClickAudioInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::ButtonClickAudioInfo& buttonclickaudioinfo(int index) const;
  inline ::pb::ButtonClickAudioInfo* mutable_buttonclickaudioinfo(int index);
  inline ::pb::ButtonClickAudioInfo* add_buttonclickaudioinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::ButtonClickAudioInfo >&
      buttonclickaudioinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::ButtonClickAudioInfo >*
      mutable_buttonclickaudioinfo();

  // @@protoc_insertion_point(class_scope:pb.SceneUIAudio)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sceneuiname();
  inline void clear_has_sceneuiname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sceneuiname_;
  ::google::protobuf::RepeatedPtrField< ::pb::ButtonClickAudioInfo > buttonclickaudioinfo_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_module_2fSceneUIAudio_2eproto();
  friend void protobuf_AssignDesc_module_2fSceneUIAudio_2eproto();
  friend void protobuf_ShutdownFile_module_2fSceneUIAudio_2eproto();

  void InitAsDefaultInstance();
  static SceneUIAudio* default_instance_;
};
// ===================================================================


// ===================================================================

// ButtonClickAudioInfo

// optional string ComponentName = 1;
inline bool ButtonClickAudioInfo::has_componentname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ButtonClickAudioInfo::set_has_componentname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ButtonClickAudioInfo::clear_has_componentname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ButtonClickAudioInfo::clear_componentname() {
  if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_->clear();
  }
  clear_has_componentname();
}
inline const ::std::string& ButtonClickAudioInfo::componentname() const {
  // @@protoc_insertion_point(field_get:pb.ButtonClickAudioInfo.ComponentName)
  return *componentname_;
}
inline void ButtonClickAudioInfo::set_componentname(const ::std::string& value) {
  set_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_ = new ::std::string;
  }
  componentname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.ButtonClickAudioInfo.ComponentName)
}
inline void ButtonClickAudioInfo::set_componentname(const char* value) {
  set_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_ = new ::std::string;
  }
  componentname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.ButtonClickAudioInfo.ComponentName)
}
inline void ButtonClickAudioInfo::set_componentname(const char* value, size_t size) {
  set_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_ = new ::std::string;
  }
  componentname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.ButtonClickAudioInfo.ComponentName)
}
inline ::std::string* ButtonClickAudioInfo::mutable_componentname() {
  set_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.ButtonClickAudioInfo.ComponentName)
  return componentname_;
}
inline ::std::string* ButtonClickAudioInfo::release_componentname() {
  clear_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = componentname_;
    componentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ButtonClickAudioInfo::set_allocated_componentname(::std::string* componentname) {
  if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentname_;
  }
  if (componentname) {
    set_has_componentname();
    componentname_ = componentname;
  } else {
    clear_has_componentname();
    componentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.ButtonClickAudioInfo.ComponentName)
}

// optional .pb.AudioInfo DownAduioInfo = 2;
inline bool ButtonClickAudioInfo::has_downaduioinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ButtonClickAudioInfo::set_has_downaduioinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ButtonClickAudioInfo::clear_has_downaduioinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ButtonClickAudioInfo::clear_downaduioinfo() {
  if (downaduioinfo_ != NULL) downaduioinfo_->::pb::AudioInfo::Clear();
  clear_has_downaduioinfo();
}
inline const ::pb::AudioInfo& ButtonClickAudioInfo::downaduioinfo() const {
  // @@protoc_insertion_point(field_get:pb.ButtonClickAudioInfo.DownAduioInfo)
  return downaduioinfo_ != NULL ? *downaduioinfo_ : *default_instance_->downaduioinfo_;
}
inline ::pb::AudioInfo* ButtonClickAudioInfo::mutable_downaduioinfo() {
  set_has_downaduioinfo();
  if (downaduioinfo_ == NULL) downaduioinfo_ = new ::pb::AudioInfo;
  // @@protoc_insertion_point(field_mutable:pb.ButtonClickAudioInfo.DownAduioInfo)
  return downaduioinfo_;
}
inline ::pb::AudioInfo* ButtonClickAudioInfo::release_downaduioinfo() {
  clear_has_downaduioinfo();
  ::pb::AudioInfo* temp = downaduioinfo_;
  downaduioinfo_ = NULL;
  return temp;
}
inline void ButtonClickAudioInfo::set_allocated_downaduioinfo(::pb::AudioInfo* downaduioinfo) {
  delete downaduioinfo_;
  downaduioinfo_ = downaduioinfo;
  if (downaduioinfo) {
    set_has_downaduioinfo();
  } else {
    clear_has_downaduioinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.ButtonClickAudioInfo.DownAduioInfo)
}

// optional .pb.AudioInfo UpAudioInfo = 3;
inline bool ButtonClickAudioInfo::has_upaudioinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ButtonClickAudioInfo::set_has_upaudioinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ButtonClickAudioInfo::clear_has_upaudioinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ButtonClickAudioInfo::clear_upaudioinfo() {
  if (upaudioinfo_ != NULL) upaudioinfo_->::pb::AudioInfo::Clear();
  clear_has_upaudioinfo();
}
inline const ::pb::AudioInfo& ButtonClickAudioInfo::upaudioinfo() const {
  // @@protoc_insertion_point(field_get:pb.ButtonClickAudioInfo.UpAudioInfo)
  return upaudioinfo_ != NULL ? *upaudioinfo_ : *default_instance_->upaudioinfo_;
}
inline ::pb::AudioInfo* ButtonClickAudioInfo::mutable_upaudioinfo() {
  set_has_upaudioinfo();
  if (upaudioinfo_ == NULL) upaudioinfo_ = new ::pb::AudioInfo;
  // @@protoc_insertion_point(field_mutable:pb.ButtonClickAudioInfo.UpAudioInfo)
  return upaudioinfo_;
}
inline ::pb::AudioInfo* ButtonClickAudioInfo::release_upaudioinfo() {
  clear_has_upaudioinfo();
  ::pb::AudioInfo* temp = upaudioinfo_;
  upaudioinfo_ = NULL;
  return temp;
}
inline void ButtonClickAudioInfo::set_allocated_upaudioinfo(::pb::AudioInfo* upaudioinfo) {
  delete upaudioinfo_;
  upaudioinfo_ = upaudioinfo;
  if (upaudioinfo) {
    set_has_upaudioinfo();
  } else {
    clear_has_upaudioinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.ButtonClickAudioInfo.UpAudioInfo)
}

// -------------------------------------------------------------------

// SceneUIAudio

// optional int32 Id = 1;
inline bool SceneUIAudio::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneUIAudio::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneUIAudio::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneUIAudio::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SceneUIAudio::id() const {
  // @@protoc_insertion_point(field_get:pb.SceneUIAudio.Id)
  return id_;
}
inline void SceneUIAudio::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.SceneUIAudio.Id)
}

// optional string SceneUIName = 2;
inline bool SceneUIAudio::has_sceneuiname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneUIAudio::set_has_sceneuiname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneUIAudio::clear_has_sceneuiname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneUIAudio::clear_sceneuiname() {
  if (sceneuiname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneuiname_->clear();
  }
  clear_has_sceneuiname();
}
inline const ::std::string& SceneUIAudio::sceneuiname() const {
  // @@protoc_insertion_point(field_get:pb.SceneUIAudio.SceneUIName)
  return *sceneuiname_;
}
inline void SceneUIAudio::set_sceneuiname(const ::std::string& value) {
  set_has_sceneuiname();
  if (sceneuiname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneuiname_ = new ::std::string;
  }
  sceneuiname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SceneUIAudio.SceneUIName)
}
inline void SceneUIAudio::set_sceneuiname(const char* value) {
  set_has_sceneuiname();
  if (sceneuiname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneuiname_ = new ::std::string;
  }
  sceneuiname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SceneUIAudio.SceneUIName)
}
inline void SceneUIAudio::set_sceneuiname(const char* value, size_t size) {
  set_has_sceneuiname();
  if (sceneuiname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneuiname_ = new ::std::string;
  }
  sceneuiname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SceneUIAudio.SceneUIName)
}
inline ::std::string* SceneUIAudio::mutable_sceneuiname() {
  set_has_sceneuiname();
  if (sceneuiname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneuiname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SceneUIAudio.SceneUIName)
  return sceneuiname_;
}
inline ::std::string* SceneUIAudio::release_sceneuiname() {
  clear_has_sceneuiname();
  if (sceneuiname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sceneuiname_;
    sceneuiname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SceneUIAudio::set_allocated_sceneuiname(::std::string* sceneuiname) {
  if (sceneuiname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneuiname_;
  }
  if (sceneuiname) {
    set_has_sceneuiname();
    sceneuiname_ = sceneuiname;
  } else {
    clear_has_sceneuiname();
    sceneuiname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SceneUIAudio.SceneUIName)
}

// repeated .pb.ButtonClickAudioInfo ButtonClickAudioInfo = 7;
inline int SceneUIAudio::buttonclickaudioinfo_size() const {
  return buttonclickaudioinfo_.size();
}
inline void SceneUIAudio::clear_buttonclickaudioinfo() {
  buttonclickaudioinfo_.Clear();
}
inline const ::pb::ButtonClickAudioInfo& SceneUIAudio::buttonclickaudioinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.SceneUIAudio.ButtonClickAudioInfo)
  return buttonclickaudioinfo_.Get(index);
}
inline ::pb::ButtonClickAudioInfo* SceneUIAudio::mutable_buttonclickaudioinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SceneUIAudio.ButtonClickAudioInfo)
  return buttonclickaudioinfo_.Mutable(index);
}
inline ::pb::ButtonClickAudioInfo* SceneUIAudio::add_buttonclickaudioinfo() {
  // @@protoc_insertion_point(field_add:pb.SceneUIAudio.ButtonClickAudioInfo)
  return buttonclickaudioinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::ButtonClickAudioInfo >&
SceneUIAudio::buttonclickaudioinfo() const {
  // @@protoc_insertion_point(field_list:pb.SceneUIAudio.ButtonClickAudioInfo)
  return buttonclickaudioinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::ButtonClickAudioInfo >*
SceneUIAudio::mutable_buttonclickaudioinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.SceneUIAudio.ButtonClickAudioInfo)
  return &buttonclickaudioinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fSceneUIAudio_2eproto__INCLUDED
