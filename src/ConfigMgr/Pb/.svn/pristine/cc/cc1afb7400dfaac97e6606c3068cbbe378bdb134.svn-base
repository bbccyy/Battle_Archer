// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Fate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Fate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TFateGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFateGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFateActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFateActiveReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fFate_2eproto() {
  protobuf_AddDesc_net_2fFate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Fate.proto");
  GOOGLE_CHECK(file != NULL);
  TFateGetInfoRsp_descriptor_ = file->message_type(0);
  static const int TFateGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFateGetInfoRsp, fate_),
  };
  TFateGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFateGetInfoRsp_descriptor_,
      TFateGetInfoRsp::default_instance_,
      TFateGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFateGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFateGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFateGetInfoRsp));
  TFateActiveReq_descriptor_ = file->message_type(1);
  static const int TFateActiveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFateActiveReq, id_),
  };
  TFateActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFateActiveReq_descriptor_,
      TFateActiveReq::default_instance_,
      TFateActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFateActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFateActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFateActiveReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fFate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFateGetInfoRsp_descriptor_, &TFateGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFateActiveReq_descriptor_, &TFateActiveReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fFate_2eproto() {
  delete TFateGetInfoRsp::default_instance_;
  delete TFateGetInfoRsp_reflection_;
  delete TFateActiveReq::default_instance_;
  delete TFateActiveReq_reflection_;
}

void protobuf_AddDesc_net_2fFate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016net/Fate.proto\022\002pb\"\037\n\017TFateGetInfoRsp\022"
    "\014\n\004Fate\030\001 \001(\r\"\034\n\016TFateActiveReq\022\n\n\002Id\030\001 "
    "\001(\r", 83);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Fate.proto", &protobuf_RegisterTypes);
  TFateGetInfoRsp::default_instance_ = new TFateGetInfoRsp();
  TFateActiveReq::default_instance_ = new TFateActiveReq();
  TFateGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TFateActiveReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fFate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fFate_2eproto {
  StaticDescriptorInitializer_net_2fFate_2eproto() {
    protobuf_AddDesc_net_2fFate_2eproto();
  }
} static_descriptor_initializer_net_2fFate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TFateGetInfoRsp::kFateFieldNumber;
#endif  // !_MSC_VER

TFateGetInfoRsp::TFateGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFateGetInfoRsp)
}

void TFateGetInfoRsp::InitAsDefaultInstance() {
}

TFateGetInfoRsp::TFateGetInfoRsp(const TFateGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFateGetInfoRsp)
}

void TFateGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  fate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFateGetInfoRsp::~TFateGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TFateGetInfoRsp)
  SharedDtor();
}

void TFateGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFateGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFateGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFateGetInfoRsp_descriptor_;
}

const TFateGetInfoRsp& TFateGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFate_2eproto();
  return *default_instance_;
}

TFateGetInfoRsp* TFateGetInfoRsp::default_instance_ = NULL;

TFateGetInfoRsp* TFateGetInfoRsp::New() const {
  return new TFateGetInfoRsp;
}

void TFateGetInfoRsp::Clear() {
  fate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFateGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFateGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Fate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fate_)));
          set_has_fate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFateGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFateGetInfoRsp)
  return false;
#undef DO_
}

void TFateGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFateGetInfoRsp)
  // optional uint32 Fate = 1;
  if (has_fate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFateGetInfoRsp)
}

::google::protobuf::uint8* TFateGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFateGetInfoRsp)
  // optional uint32 Fate = 1;
  if (has_fate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFateGetInfoRsp)
  return target;
}

int TFateGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Fate = 1;
    if (has_fate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFateGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFateGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFateGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFateGetInfoRsp::MergeFrom(const TFateGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fate()) {
      set_fate(from.fate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFateGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFateGetInfoRsp::CopyFrom(const TFateGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFateGetInfoRsp::IsInitialized() const {

  return true;
}

void TFateGetInfoRsp::Swap(TFateGetInfoRsp* other) {
  if (other != this) {
    std::swap(fate_, other->fate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFateGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFateGetInfoRsp_descriptor_;
  metadata.reflection = TFateGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFateActiveReq::kIdFieldNumber;
#endif  // !_MSC_VER

TFateActiveReq::TFateActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFateActiveReq)
}

void TFateActiveReq::InitAsDefaultInstance() {
}

TFateActiveReq::TFateActiveReq(const TFateActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFateActiveReq)
}

void TFateActiveReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFateActiveReq::~TFateActiveReq() {
  // @@protoc_insertion_point(destructor:pb.TFateActiveReq)
  SharedDtor();
}

void TFateActiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFateActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFateActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFateActiveReq_descriptor_;
}

const TFateActiveReq& TFateActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFate_2eproto();
  return *default_instance_;
}

TFateActiveReq* TFateActiveReq::default_instance_ = NULL;

TFateActiveReq* TFateActiveReq::New() const {
  return new TFateActiveReq;
}

void TFateActiveReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFateActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFateActiveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFateActiveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFateActiveReq)
  return false;
#undef DO_
}

void TFateActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFateActiveReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFateActiveReq)
}

::google::protobuf::uint8* TFateActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFateActiveReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFateActiveReq)
  return target;
}

int TFateActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFateActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFateActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFateActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFateActiveReq::MergeFrom(const TFateActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFateActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFateActiveReq::CopyFrom(const TFateActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFateActiveReq::IsInitialized() const {

  return true;
}

void TFateActiveReq::Swap(TFateActiveReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFateActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFateActiveReq_descriptor_;
  metadata.reflection = TFateActiveReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
