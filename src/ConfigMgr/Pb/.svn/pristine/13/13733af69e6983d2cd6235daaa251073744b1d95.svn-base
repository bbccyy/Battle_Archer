// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActMonthlyFund.proto

#ifndef PROTOBUF_net_2fActMonthlyFund_2eproto__INCLUDED
#define PROTOBUF_net_2fActMonthlyFund_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
void protobuf_AssignDesc_net_2fActMonthlyFund_2eproto();
void protobuf_ShutdownFile_net_2fActMonthlyFund_2eproto();

class TActMonthlyFundSignInfo;
class TActMonthlyFundGetInfoRsp;
class TActMonthlyFundGetRandGiftRsp;
class TActMonthlyFundGetRewardReq;
class TActMonthlyFundAutoGetRewardReq;
class TActMonthlyFundAutoGetRewardRsp;
class TActMonthlyFundGetAllBuyGiftRsp;
class TActMonthlyFundNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActMonthlyFundSignInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMonthlyFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMonthlyFundSignInfo : public ::google::protobuf::Message {
 public:
  TActMonthlyFundSignInfo();
  virtual ~TActMonthlyFundSignInfo();

  TActMonthlyFundSignInfo(const TActMonthlyFundSignInfo& from);

  inline TActMonthlyFundSignInfo& operator=(const TActMonthlyFundSignInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMonthlyFundSignInfo& default_instance();

  void Swap(TActMonthlyFundSignInfo* other);

  // implements Message ----------------------------------------------

  TActMonthlyFundSignInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMonthlyFundSignInfo& from);
  void MergeFrom(const TActMonthlyFundSignInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMonthlyFundSignInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 PayTime = 2;
  inline bool has_paytime() const;
  inline void clear_paytime();
  static const int kPayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActMonthlyFundSignInfo</name>
  	<Function>
  		<name>paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 paytime() const;
  inline void set_paytime(::google::protobuf::uint64 value);

  // repeated uint32 RewardIdArr = 3;
  inline int rewardidarr_size() const;
  inline void clear_rewardidarr();
  static const int kRewardIdArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActMonthlyFundSignInfo</name>
  	<Function>
  		<name>rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardidarr_size</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardidarr(int index) const;
  inline void set_rewardidarr(int index, ::google::protobuf::uint32 value);
  inline void add_rewardidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rewardidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rewardidarr();

  // @@protoc_insertion_point(class_scope:pb.TActMonthlyFundSignInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_paytime();
  inline void clear_has_paytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 paytime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rewardidarr_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  friend void protobuf_AssignDesc_net_2fActMonthlyFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMonthlyFund_2eproto();

  void InitAsDefaultInstance();
  static TActMonthlyFundSignInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActMonthlyFundGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMonthlyFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMonthlyFundGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActMonthlyFundGetInfoRsp();
  virtual ~TActMonthlyFundGetInfoRsp();

  TActMonthlyFundGetInfoRsp(const TActMonthlyFundGetInfoRsp& from);

  inline TActMonthlyFundGetInfoRsp& operator=(const TActMonthlyFundGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMonthlyFundGetInfoRsp& default_instance();

  void Swap(TActMonthlyFundGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActMonthlyFundGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMonthlyFundGetInfoRsp& from);
  void MergeFrom(const TActMonthlyFundGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActMonthlyFundSignInfo SignArr = 1;
  inline int signarr_size() const;
  inline void clear_signarr();
  static const int kSignArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMonthlyFundGetInfoRsp</name>
  	<Function>
  		<name>signarr</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_signarr</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_signarr</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signarr</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>signarr_size</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActMonthlyFundSignInfo& signarr(int index) const;
  inline ::pb::TActMonthlyFundSignInfo* mutable_signarr(int index);
  inline ::pb::TActMonthlyFundSignInfo* add_signarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActMonthlyFundSignInfo >&
      signarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActMonthlyFundSignInfo >*
      mutable_signarr();

  // optional uint64 RandGiftGetTime = 2;
  inline bool has_randgiftgettime() const;
  inline void clear_randgiftgettime();
  static const int kRandGiftGetTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActMonthlyFundGetInfoRsp</name>
  	<Function>
  		<name>randgiftgettime</name>
  		<replaceName>RandGiftGetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_randgiftgettime</name>
  		<replaceName>RandGiftGetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_randgiftgettime</name>
  		<replaceName>RandGiftGetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 randgiftgettime() const;
  inline void set_randgiftgettime(::google::protobuf::uint64 value);

  // optional uint64 AllBuyGiftGetTime = 3;
  inline bool has_allbuygiftgettime() const;
  inline void clear_allbuygiftgettime();
  static const int kAllBuyGiftGetTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActMonthlyFundGetInfoRsp</name>
  	<Function>
  		<name>allbuygiftgettime</name>
  		<replaceName>AllBuyGiftGetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allbuygiftgettime</name>
  		<replaceName>AllBuyGiftGetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allbuygiftgettime</name>
  		<replaceName>AllBuyGiftGetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 allbuygiftgettime() const;
  inline void set_allbuygiftgettime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActMonthlyFundGetInfoRsp)
 private:
  inline void set_has_randgiftgettime();
  inline void clear_has_randgiftgettime();
  inline void set_has_allbuygiftgettime();
  inline void clear_has_allbuygiftgettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActMonthlyFundSignInfo > signarr_;
  ::google::protobuf::uint64 randgiftgettime_;
  ::google::protobuf::uint64 allbuygiftgettime_;
  friend void  protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  friend void protobuf_AssignDesc_net_2fActMonthlyFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMonthlyFund_2eproto();

  void InitAsDefaultInstance();
  static TActMonthlyFundGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActMonthlyFundGetRandGiftRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMonthlyFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMonthlyFundGetRandGiftRsp : public ::google::protobuf::Message {
 public:
  TActMonthlyFundGetRandGiftRsp();
  virtual ~TActMonthlyFundGetRandGiftRsp();

  TActMonthlyFundGetRandGiftRsp(const TActMonthlyFundGetRandGiftRsp& from);

  inline TActMonthlyFundGetRandGiftRsp& operator=(const TActMonthlyFundGetRandGiftRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMonthlyFundGetRandGiftRsp& default_instance();

  void Swap(TActMonthlyFundGetRandGiftRsp* other);

  // implements Message ----------------------------------------------

  TActMonthlyFundGetRandGiftRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMonthlyFundGetRandGiftRsp& from);
  void MergeFrom(const TActMonthlyFundGetRandGiftRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RandGiftGetTime = 1;
  inline bool has_randgiftgettime() const;
  inline void clear_randgiftgettime();
  static const int kRandGiftGetTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMonthlyFundGetRandGiftRsp</name>
  	<Function>
  		<name>randgiftgettime</name>
  		<replaceName>RandGiftGetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_randgiftgettime</name>
  		<replaceName>RandGiftGetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_randgiftgettime</name>
  		<replaceName>RandGiftGetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 randgiftgettime() const;
  inline void set_randgiftgettime(::google::protobuf::uint64 value);

  // repeated .pb.TCommonReward DropArr = 2;
  inline int droparr_size() const;
  inline void clear_droparr();
  static const int kDropArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActMonthlyFundGetRandGiftRsp</name>
  	<Function>
  		<name>droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparr_size</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparr(int index) const;
  inline ::pb::TCommonReward* mutable_droparr(int index);
  inline ::pb::TCommonReward* add_droparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparr();

  // @@protoc_insertion_point(class_scope:pb.TActMonthlyFundGetRandGiftRsp)
 private:
  inline void set_has_randgiftgettime();
  inline void clear_has_randgiftgettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 randgiftgettime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparr_;
  friend void  protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  friend void protobuf_AssignDesc_net_2fActMonthlyFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMonthlyFund_2eproto();

  void InitAsDefaultInstance();
  static TActMonthlyFundGetRandGiftRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActMonthlyFundGetRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMonthlyFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMonthlyFundGetRewardReq : public ::google::protobuf::Message {
 public:
  TActMonthlyFundGetRewardReq();
  virtual ~TActMonthlyFundGetRewardReq();

  TActMonthlyFundGetRewardReq(const TActMonthlyFundGetRewardReq& from);

  inline TActMonthlyFundGetRewardReq& operator=(const TActMonthlyFundGetRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMonthlyFundGetRewardReq& default_instance();

  void Swap(TActMonthlyFundGetRewardReq* other);

  // implements Message ----------------------------------------------

  TActMonthlyFundGetRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMonthlyFundGetRewardReq& from);
  void MergeFrom(const TActMonthlyFundGetRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ActId = 1;
  inline bool has_actid() const;
  inline void clear_actid();
  static const int kActIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMonthlyFundGetRewardReq</name>
  	<Function>
  		<name>actid</name>
  		<replaceName>ActId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_actid</name>
  		<replaceName>ActId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actid</name>
  		<replaceName>ActId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 actid() const;
  inline void set_actid(::google::protobuf::uint32 value);

  // optional uint32 RewardId = 2;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActMonthlyFundGetRewardReq</name>
  	<Function>
  		<name>rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardid() const;
  inline void set_rewardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActMonthlyFundGetRewardReq)
 private:
  inline void set_has_actid();
  inline void clear_has_actid();
  inline void set_has_rewardid();
  inline void clear_has_rewardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 actid_;
  ::google::protobuf::uint32 rewardid_;
  friend void  protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  friend void protobuf_AssignDesc_net_2fActMonthlyFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMonthlyFund_2eproto();

  void InitAsDefaultInstance();
  static TActMonthlyFundGetRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActMonthlyFundAutoGetRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMonthlyFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMonthlyFundAutoGetRewardReq : public ::google::protobuf::Message {
 public:
  TActMonthlyFundAutoGetRewardReq();
  virtual ~TActMonthlyFundAutoGetRewardReq();

  TActMonthlyFundAutoGetRewardReq(const TActMonthlyFundAutoGetRewardReq& from);

  inline TActMonthlyFundAutoGetRewardReq& operator=(const TActMonthlyFundAutoGetRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMonthlyFundAutoGetRewardReq& default_instance();

  void Swap(TActMonthlyFundAutoGetRewardReq* other);

  // implements Message ----------------------------------------------

  TActMonthlyFundAutoGetRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMonthlyFundAutoGetRewardReq& from);
  void MergeFrom(const TActMonthlyFundAutoGetRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ActId = 1;
  inline bool has_actid() const;
  inline void clear_actid();
  static const int kActIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMonthlyFundAutoGetRewardReq</name>
  	<Function>
  		<name>actid</name>
  		<replaceName>ActId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_actid</name>
  		<replaceName>ActId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actid</name>
  		<replaceName>ActId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 actid() const;
  inline void set_actid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActMonthlyFundAutoGetRewardReq)
 private:
  inline void set_has_actid();
  inline void clear_has_actid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 actid_;
  friend void  protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  friend void protobuf_AssignDesc_net_2fActMonthlyFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMonthlyFund_2eproto();

  void InitAsDefaultInstance();
  static TActMonthlyFundAutoGetRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActMonthlyFundAutoGetRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMonthlyFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMonthlyFundAutoGetRewardRsp : public ::google::protobuf::Message {
 public:
  TActMonthlyFundAutoGetRewardRsp();
  virtual ~TActMonthlyFundAutoGetRewardRsp();

  TActMonthlyFundAutoGetRewardRsp(const TActMonthlyFundAutoGetRewardRsp& from);

  inline TActMonthlyFundAutoGetRewardRsp& operator=(const TActMonthlyFundAutoGetRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMonthlyFundAutoGetRewardRsp& default_instance();

  void Swap(TActMonthlyFundAutoGetRewardRsp* other);

  // implements Message ----------------------------------------------

  TActMonthlyFundAutoGetRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMonthlyFundAutoGetRewardRsp& from);
  void MergeFrom(const TActMonthlyFundAutoGetRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 RewardIdArr = 1;
  inline int rewardidarr_size() const;
  inline void clear_rewardidarr();
  static const int kRewardIdArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMonthlyFundAutoGetRewardRsp</name>
  	<Function>
  		<name>rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardidarr_size</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardidarr(int index) const;
  inline void set_rewardidarr(int index, ::google::protobuf::uint32 value);
  inline void add_rewardidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rewardidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rewardidarr();

  // repeated .pb.TCommonReward RewardArr = 2;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActMonthlyFundAutoGetRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TActMonthlyFundAutoGetRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rewardidarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  friend void protobuf_AssignDesc_net_2fActMonthlyFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMonthlyFund_2eproto();

  void InitAsDefaultInstance();
  static TActMonthlyFundAutoGetRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActMonthlyFundGetAllBuyGiftRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMonthlyFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMonthlyFundGetAllBuyGiftRsp : public ::google::protobuf::Message {
 public:
  TActMonthlyFundGetAllBuyGiftRsp();
  virtual ~TActMonthlyFundGetAllBuyGiftRsp();

  TActMonthlyFundGetAllBuyGiftRsp(const TActMonthlyFundGetAllBuyGiftRsp& from);

  inline TActMonthlyFundGetAllBuyGiftRsp& operator=(const TActMonthlyFundGetAllBuyGiftRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMonthlyFundGetAllBuyGiftRsp& default_instance();

  void Swap(TActMonthlyFundGetAllBuyGiftRsp* other);

  // implements Message ----------------------------------------------

  TActMonthlyFundGetAllBuyGiftRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMonthlyFundGetAllBuyGiftRsp& from);
  void MergeFrom(const TActMonthlyFundGetAllBuyGiftRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 AllBuyGiftGetTime = 1;
  inline bool has_allbuygiftgettime() const;
  inline void clear_allbuygiftgettime();
  static const int kAllBuyGiftGetTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMonthlyFundGetAllBuyGiftRsp</name>
  	<Function>
  		<name>allbuygiftgettime</name>
  		<replaceName>AllBuyGiftGetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allbuygiftgettime</name>
  		<replaceName>AllBuyGiftGetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allbuygiftgettime</name>
  		<replaceName>AllBuyGiftGetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 allbuygiftgettime() const;
  inline void set_allbuygiftgettime(::google::protobuf::uint64 value);

  // repeated .pb.TCommonReward DropArr = 2;
  inline int droparr_size() const;
  inline void clear_droparr();
  static const int kDropArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActMonthlyFundGetAllBuyGiftRsp</name>
  	<Function>
  		<name>droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparr_size</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparr(int index) const;
  inline ::pb::TCommonReward* mutable_droparr(int index);
  inline ::pb::TCommonReward* add_droparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparr();

  // @@protoc_insertion_point(class_scope:pb.TActMonthlyFundGetAllBuyGiftRsp)
 private:
  inline void set_has_allbuygiftgettime();
  inline void clear_has_allbuygiftgettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 allbuygiftgettime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparr_;
  friend void  protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  friend void protobuf_AssignDesc_net_2fActMonthlyFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMonthlyFund_2eproto();

  void InitAsDefaultInstance();
  static TActMonthlyFundGetAllBuyGiftRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActMonthlyFundNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMonthlyFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMonthlyFundNotify : public ::google::protobuf::Message {
 public:
  TActMonthlyFundNotify();
  virtual ~TActMonthlyFundNotify();

  TActMonthlyFundNotify(const TActMonthlyFundNotify& from);

  inline TActMonthlyFundNotify& operator=(const TActMonthlyFundNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMonthlyFundNotify& default_instance();

  void Swap(TActMonthlyFundNotify* other);

  // implements Message ----------------------------------------------

  TActMonthlyFundNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMonthlyFundNotify& from);
  void MergeFrom(const TActMonthlyFundNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TActMonthlyFundSignInfo SignArr = 1;
  inline bool has_signarr() const;
  inline void clear_signarr();
  static const int kSignArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMonthlyFundNotify</name>
  	<Function>
  		<name>signarr</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signarr</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_signarr</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signarr</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActMonthlyFundSignInfo& signarr() const;
  inline ::pb::TActMonthlyFundSignInfo* mutable_signarr();
  inline ::pb::TActMonthlyFundSignInfo* release_signarr();
  inline void set_allocated_signarr(::pb::TActMonthlyFundSignInfo* signarr);

  // @@protoc_insertion_point(class_scope:pb.TActMonthlyFundNotify)
 private:
  inline void set_has_signarr();
  inline void clear_has_signarr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TActMonthlyFundSignInfo* signarr_;
  friend void  protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  friend void protobuf_AssignDesc_net_2fActMonthlyFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMonthlyFund_2eproto();

  void InitAsDefaultInstance();
  static TActMonthlyFundNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActMonthlyFundSignInfo

// optional uint32 Id = 1;
inline bool TActMonthlyFundSignInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActMonthlyFundSignInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActMonthlyFundSignInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActMonthlyFundSignInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActMonthlyFundSignInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TActMonthlyFundSignInfo.Id)
  return id_;
}
inline void TActMonthlyFundSignInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMonthlyFundSignInfo.Id)
}

// optional uint64 PayTime = 2;
inline bool TActMonthlyFundSignInfo::has_paytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActMonthlyFundSignInfo::set_has_paytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActMonthlyFundSignInfo::clear_has_paytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActMonthlyFundSignInfo::clear_paytime() {
  paytime_ = GOOGLE_ULONGLONG(0);
  clear_has_paytime();
}
inline ::google::protobuf::uint64 TActMonthlyFundSignInfo::paytime() const {
  // @@protoc_insertion_point(field_get:pb.TActMonthlyFundSignInfo.PayTime)
  return paytime_;
}
inline void TActMonthlyFundSignInfo::set_paytime(::google::protobuf::uint64 value) {
  set_has_paytime();
  paytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMonthlyFundSignInfo.PayTime)
}

// repeated uint32 RewardIdArr = 3;
inline int TActMonthlyFundSignInfo::rewardidarr_size() const {
  return rewardidarr_.size();
}
inline void TActMonthlyFundSignInfo::clear_rewardidarr() {
  rewardidarr_.Clear();
}
inline ::google::protobuf::uint32 TActMonthlyFundSignInfo::rewardidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActMonthlyFundSignInfo.RewardIdArr)
  return rewardidarr_.Get(index);
}
inline void TActMonthlyFundSignInfo::set_rewardidarr(int index, ::google::protobuf::uint32 value) {
  rewardidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActMonthlyFundSignInfo.RewardIdArr)
}
inline void TActMonthlyFundSignInfo::add_rewardidarr(::google::protobuf::uint32 value) {
  rewardidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActMonthlyFundSignInfo.RewardIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActMonthlyFundSignInfo::rewardidarr() const {
  // @@protoc_insertion_point(field_list:pb.TActMonthlyFundSignInfo.RewardIdArr)
  return rewardidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActMonthlyFundSignInfo::mutable_rewardidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActMonthlyFundSignInfo.RewardIdArr)
  return &rewardidarr_;
}

// -------------------------------------------------------------------

// TActMonthlyFundGetInfoRsp

// repeated .pb.TActMonthlyFundSignInfo SignArr = 1;
inline int TActMonthlyFundGetInfoRsp::signarr_size() const {
  return signarr_.size();
}
inline void TActMonthlyFundGetInfoRsp::clear_signarr() {
  signarr_.Clear();
}
inline const ::pb::TActMonthlyFundSignInfo& TActMonthlyFundGetInfoRsp::signarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActMonthlyFundGetInfoRsp.SignArr)
  return signarr_.Get(index);
}
inline ::pb::TActMonthlyFundSignInfo* TActMonthlyFundGetInfoRsp::mutable_signarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActMonthlyFundGetInfoRsp.SignArr)
  return signarr_.Mutable(index);
}
inline ::pb::TActMonthlyFundSignInfo* TActMonthlyFundGetInfoRsp::add_signarr() {
  // @@protoc_insertion_point(field_add:pb.TActMonthlyFundGetInfoRsp.SignArr)
  return signarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActMonthlyFundSignInfo >&
TActMonthlyFundGetInfoRsp::signarr() const {
  // @@protoc_insertion_point(field_list:pb.TActMonthlyFundGetInfoRsp.SignArr)
  return signarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActMonthlyFundSignInfo >*
TActMonthlyFundGetInfoRsp::mutable_signarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActMonthlyFundGetInfoRsp.SignArr)
  return &signarr_;
}

// optional uint64 RandGiftGetTime = 2;
inline bool TActMonthlyFundGetInfoRsp::has_randgiftgettime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActMonthlyFundGetInfoRsp::set_has_randgiftgettime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActMonthlyFundGetInfoRsp::clear_has_randgiftgettime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActMonthlyFundGetInfoRsp::clear_randgiftgettime() {
  randgiftgettime_ = GOOGLE_ULONGLONG(0);
  clear_has_randgiftgettime();
}
inline ::google::protobuf::uint64 TActMonthlyFundGetInfoRsp::randgiftgettime() const {
  // @@protoc_insertion_point(field_get:pb.TActMonthlyFundGetInfoRsp.RandGiftGetTime)
  return randgiftgettime_;
}
inline void TActMonthlyFundGetInfoRsp::set_randgiftgettime(::google::protobuf::uint64 value) {
  set_has_randgiftgettime();
  randgiftgettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMonthlyFundGetInfoRsp.RandGiftGetTime)
}

// optional uint64 AllBuyGiftGetTime = 3;
inline bool TActMonthlyFundGetInfoRsp::has_allbuygiftgettime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActMonthlyFundGetInfoRsp::set_has_allbuygiftgettime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActMonthlyFundGetInfoRsp::clear_has_allbuygiftgettime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActMonthlyFundGetInfoRsp::clear_allbuygiftgettime() {
  allbuygiftgettime_ = GOOGLE_ULONGLONG(0);
  clear_has_allbuygiftgettime();
}
inline ::google::protobuf::uint64 TActMonthlyFundGetInfoRsp::allbuygiftgettime() const {
  // @@protoc_insertion_point(field_get:pb.TActMonthlyFundGetInfoRsp.AllBuyGiftGetTime)
  return allbuygiftgettime_;
}
inline void TActMonthlyFundGetInfoRsp::set_allbuygiftgettime(::google::protobuf::uint64 value) {
  set_has_allbuygiftgettime();
  allbuygiftgettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMonthlyFundGetInfoRsp.AllBuyGiftGetTime)
}

// -------------------------------------------------------------------

// TActMonthlyFundGetRandGiftRsp

// optional uint64 RandGiftGetTime = 1;
inline bool TActMonthlyFundGetRandGiftRsp::has_randgiftgettime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActMonthlyFundGetRandGiftRsp::set_has_randgiftgettime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActMonthlyFundGetRandGiftRsp::clear_has_randgiftgettime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActMonthlyFundGetRandGiftRsp::clear_randgiftgettime() {
  randgiftgettime_ = GOOGLE_ULONGLONG(0);
  clear_has_randgiftgettime();
}
inline ::google::protobuf::uint64 TActMonthlyFundGetRandGiftRsp::randgiftgettime() const {
  // @@protoc_insertion_point(field_get:pb.TActMonthlyFundGetRandGiftRsp.RandGiftGetTime)
  return randgiftgettime_;
}
inline void TActMonthlyFundGetRandGiftRsp::set_randgiftgettime(::google::protobuf::uint64 value) {
  set_has_randgiftgettime();
  randgiftgettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMonthlyFundGetRandGiftRsp.RandGiftGetTime)
}

// repeated .pb.TCommonReward DropArr = 2;
inline int TActMonthlyFundGetRandGiftRsp::droparr_size() const {
  return droparr_.size();
}
inline void TActMonthlyFundGetRandGiftRsp::clear_droparr() {
  droparr_.Clear();
}
inline const ::pb::TCommonReward& TActMonthlyFundGetRandGiftRsp::droparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActMonthlyFundGetRandGiftRsp.DropArr)
  return droparr_.Get(index);
}
inline ::pb::TCommonReward* TActMonthlyFundGetRandGiftRsp::mutable_droparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActMonthlyFundGetRandGiftRsp.DropArr)
  return droparr_.Mutable(index);
}
inline ::pb::TCommonReward* TActMonthlyFundGetRandGiftRsp::add_droparr() {
  // @@protoc_insertion_point(field_add:pb.TActMonthlyFundGetRandGiftRsp.DropArr)
  return droparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActMonthlyFundGetRandGiftRsp::droparr() const {
  // @@protoc_insertion_point(field_list:pb.TActMonthlyFundGetRandGiftRsp.DropArr)
  return droparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActMonthlyFundGetRandGiftRsp::mutable_droparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActMonthlyFundGetRandGiftRsp.DropArr)
  return &droparr_;
}

// -------------------------------------------------------------------

// TActMonthlyFundGetRewardReq

// optional uint32 ActId = 1;
inline bool TActMonthlyFundGetRewardReq::has_actid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActMonthlyFundGetRewardReq::set_has_actid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActMonthlyFundGetRewardReq::clear_has_actid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActMonthlyFundGetRewardReq::clear_actid() {
  actid_ = 0u;
  clear_has_actid();
}
inline ::google::protobuf::uint32 TActMonthlyFundGetRewardReq::actid() const {
  // @@protoc_insertion_point(field_get:pb.TActMonthlyFundGetRewardReq.ActId)
  return actid_;
}
inline void TActMonthlyFundGetRewardReq::set_actid(::google::protobuf::uint32 value) {
  set_has_actid();
  actid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMonthlyFundGetRewardReq.ActId)
}

// optional uint32 RewardId = 2;
inline bool TActMonthlyFundGetRewardReq::has_rewardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActMonthlyFundGetRewardReq::set_has_rewardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActMonthlyFundGetRewardReq::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActMonthlyFundGetRewardReq::clear_rewardid() {
  rewardid_ = 0u;
  clear_has_rewardid();
}
inline ::google::protobuf::uint32 TActMonthlyFundGetRewardReq::rewardid() const {
  // @@protoc_insertion_point(field_get:pb.TActMonthlyFundGetRewardReq.RewardId)
  return rewardid_;
}
inline void TActMonthlyFundGetRewardReq::set_rewardid(::google::protobuf::uint32 value) {
  set_has_rewardid();
  rewardid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMonthlyFundGetRewardReq.RewardId)
}

// -------------------------------------------------------------------

// TActMonthlyFundAutoGetRewardReq

// optional uint32 ActId = 1;
inline bool TActMonthlyFundAutoGetRewardReq::has_actid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActMonthlyFundAutoGetRewardReq::set_has_actid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActMonthlyFundAutoGetRewardReq::clear_has_actid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActMonthlyFundAutoGetRewardReq::clear_actid() {
  actid_ = 0u;
  clear_has_actid();
}
inline ::google::protobuf::uint32 TActMonthlyFundAutoGetRewardReq::actid() const {
  // @@protoc_insertion_point(field_get:pb.TActMonthlyFundAutoGetRewardReq.ActId)
  return actid_;
}
inline void TActMonthlyFundAutoGetRewardReq::set_actid(::google::protobuf::uint32 value) {
  set_has_actid();
  actid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMonthlyFundAutoGetRewardReq.ActId)
}

// -------------------------------------------------------------------

// TActMonthlyFundAutoGetRewardRsp

// repeated uint32 RewardIdArr = 1;
inline int TActMonthlyFundAutoGetRewardRsp::rewardidarr_size() const {
  return rewardidarr_.size();
}
inline void TActMonthlyFundAutoGetRewardRsp::clear_rewardidarr() {
  rewardidarr_.Clear();
}
inline ::google::protobuf::uint32 TActMonthlyFundAutoGetRewardRsp::rewardidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActMonthlyFundAutoGetRewardRsp.RewardIdArr)
  return rewardidarr_.Get(index);
}
inline void TActMonthlyFundAutoGetRewardRsp::set_rewardidarr(int index, ::google::protobuf::uint32 value) {
  rewardidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActMonthlyFundAutoGetRewardRsp.RewardIdArr)
}
inline void TActMonthlyFundAutoGetRewardRsp::add_rewardidarr(::google::protobuf::uint32 value) {
  rewardidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActMonthlyFundAutoGetRewardRsp.RewardIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActMonthlyFundAutoGetRewardRsp::rewardidarr() const {
  // @@protoc_insertion_point(field_list:pb.TActMonthlyFundAutoGetRewardRsp.RewardIdArr)
  return rewardidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActMonthlyFundAutoGetRewardRsp::mutable_rewardidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActMonthlyFundAutoGetRewardRsp.RewardIdArr)
  return &rewardidarr_;
}

// repeated .pb.TCommonReward RewardArr = 2;
inline int TActMonthlyFundAutoGetRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TActMonthlyFundAutoGetRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TActMonthlyFundAutoGetRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActMonthlyFundAutoGetRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TActMonthlyFundAutoGetRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActMonthlyFundAutoGetRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TActMonthlyFundAutoGetRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TActMonthlyFundAutoGetRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActMonthlyFundAutoGetRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TActMonthlyFundAutoGetRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActMonthlyFundAutoGetRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActMonthlyFundAutoGetRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TActMonthlyFundGetAllBuyGiftRsp

// optional uint64 AllBuyGiftGetTime = 1;
inline bool TActMonthlyFundGetAllBuyGiftRsp::has_allbuygiftgettime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActMonthlyFundGetAllBuyGiftRsp::set_has_allbuygiftgettime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActMonthlyFundGetAllBuyGiftRsp::clear_has_allbuygiftgettime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActMonthlyFundGetAllBuyGiftRsp::clear_allbuygiftgettime() {
  allbuygiftgettime_ = GOOGLE_ULONGLONG(0);
  clear_has_allbuygiftgettime();
}
inline ::google::protobuf::uint64 TActMonthlyFundGetAllBuyGiftRsp::allbuygiftgettime() const {
  // @@protoc_insertion_point(field_get:pb.TActMonthlyFundGetAllBuyGiftRsp.AllBuyGiftGetTime)
  return allbuygiftgettime_;
}
inline void TActMonthlyFundGetAllBuyGiftRsp::set_allbuygiftgettime(::google::protobuf::uint64 value) {
  set_has_allbuygiftgettime();
  allbuygiftgettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMonthlyFundGetAllBuyGiftRsp.AllBuyGiftGetTime)
}

// repeated .pb.TCommonReward DropArr = 2;
inline int TActMonthlyFundGetAllBuyGiftRsp::droparr_size() const {
  return droparr_.size();
}
inline void TActMonthlyFundGetAllBuyGiftRsp::clear_droparr() {
  droparr_.Clear();
}
inline const ::pb::TCommonReward& TActMonthlyFundGetAllBuyGiftRsp::droparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActMonthlyFundGetAllBuyGiftRsp.DropArr)
  return droparr_.Get(index);
}
inline ::pb::TCommonReward* TActMonthlyFundGetAllBuyGiftRsp::mutable_droparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActMonthlyFundGetAllBuyGiftRsp.DropArr)
  return droparr_.Mutable(index);
}
inline ::pb::TCommonReward* TActMonthlyFundGetAllBuyGiftRsp::add_droparr() {
  // @@protoc_insertion_point(field_add:pb.TActMonthlyFundGetAllBuyGiftRsp.DropArr)
  return droparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActMonthlyFundGetAllBuyGiftRsp::droparr() const {
  // @@protoc_insertion_point(field_list:pb.TActMonthlyFundGetAllBuyGiftRsp.DropArr)
  return droparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActMonthlyFundGetAllBuyGiftRsp::mutable_droparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActMonthlyFundGetAllBuyGiftRsp.DropArr)
  return &droparr_;
}

// -------------------------------------------------------------------

// TActMonthlyFundNotify

// optional .pb.TActMonthlyFundSignInfo SignArr = 1;
inline bool TActMonthlyFundNotify::has_signarr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActMonthlyFundNotify::set_has_signarr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActMonthlyFundNotify::clear_has_signarr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActMonthlyFundNotify::clear_signarr() {
  if (signarr_ != NULL) signarr_->::pb::TActMonthlyFundSignInfo::Clear();
  clear_has_signarr();
}
inline const ::pb::TActMonthlyFundSignInfo& TActMonthlyFundNotify::signarr() const {
  // @@protoc_insertion_point(field_get:pb.TActMonthlyFundNotify.SignArr)
  return signarr_ != NULL ? *signarr_ : *default_instance_->signarr_;
}
inline ::pb::TActMonthlyFundSignInfo* TActMonthlyFundNotify::mutable_signarr() {
  set_has_signarr();
  if (signarr_ == NULL) signarr_ = new ::pb::TActMonthlyFundSignInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActMonthlyFundNotify.SignArr)
  return signarr_;
}
inline ::pb::TActMonthlyFundSignInfo* TActMonthlyFundNotify::release_signarr() {
  clear_has_signarr();
  ::pb::TActMonthlyFundSignInfo* temp = signarr_;
  signarr_ = NULL;
  return temp;
}
inline void TActMonthlyFundNotify::set_allocated_signarr(::pb::TActMonthlyFundSignInfo* signarr) {
  delete signarr_;
  signarr_ = signarr;
  if (signarr) {
    set_has_signarr();
  } else {
    clear_has_signarr();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActMonthlyFundNotify.SignArr)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActMonthlyFund_2eproto__INCLUDED
