// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActCelebrationTwo.proto

#ifndef PROTOBUF_net_2fActCelebrationTwo_2eproto__INCLUDED
#define PROTOBUF_net_2fActCelebrationTwo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/OpenActivity.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
void protobuf_AssignDesc_net_2fActCelebrationTwo_2eproto();
void protobuf_ShutdownFile_net_2fActCelebrationTwo_2eproto();

class TActCelebrationTwoBuyInfo;
class TActCelebrationTwoTaskInfo;
class TActCelebrationTwoGetInfoRsp;
class TActCelebrationTwoBuyGoodsReq;
class TActCelebrationTwoBuyGoodsRsp;
class TActCelebrationTwoGetTaskRewardReq;
class TActCelebrationTwoGetTaskRewardRsp;
class TActCelebrationTwoExchangeReq;
class TActCelebrationTwoExchangeRsp;
class TActCelebrationTwoNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActCelebrationTwoBuyInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebrationTwo.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationTwoBuyInfo : public ::google::protobuf::Message {
 public:
  TActCelebrationTwoBuyInfo();
  virtual ~TActCelebrationTwoBuyInfo();

  TActCelebrationTwoBuyInfo(const TActCelebrationTwoBuyInfo& from);

  inline TActCelebrationTwoBuyInfo& operator=(const TActCelebrationTwoBuyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationTwoBuyInfo& default_instance();

  void Swap(TActCelebrationTwoBuyInfo* other);

  // implements Message ----------------------------------------------

  TActCelebrationTwoBuyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationTwoBuyInfo& from);
  void MergeFrom(const TActCelebrationTwoBuyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoBuyInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoBuyInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint64 BuyTime = 3;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoBuyInfo</name>
  	<Function>
  		<name>buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 buytime() const;
  inline void set_buytime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationTwoBuyInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_buytime();
  inline void clear_has_buytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint64 buytime_;
  friend void  protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebrationTwo_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationTwoBuyInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationTwoTaskInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebrationTwo.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationTwoTaskInfo : public ::google::protobuf::Message {
 public:
  TActCelebrationTwoTaskInfo();
  virtual ~TActCelebrationTwoTaskInfo();

  TActCelebrationTwoTaskInfo(const TActCelebrationTwoTaskInfo& from);

  inline TActCelebrationTwoTaskInfo& operator=(const TActCelebrationTwoTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationTwoTaskInfo& default_instance();

  void Swap(TActCelebrationTwoTaskInfo* other);

  // implements Message ----------------------------------------------

  TActCelebrationTwoTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationTwoTaskInfo& from);
  void MergeFrom(const TActCelebrationTwoTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskType = 1;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoTaskInfo</name>
  	<Function>
  		<name>tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tasktype() const;
  inline void set_tasktype(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoTaskInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationTwoTaskInfo)
 private:
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tasktype_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebrationTwo_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationTwoTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationTwoGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebrationTwo.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationTwoGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActCelebrationTwoGetInfoRsp();
  virtual ~TActCelebrationTwoGetInfoRsp();

  TActCelebrationTwoGetInfoRsp(const TActCelebrationTwoGetInfoRsp& from);

  inline TActCelebrationTwoGetInfoRsp& operator=(const TActCelebrationTwoGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationTwoGetInfoRsp& default_instance();

  void Swap(TActCelebrationTwoGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActCelebrationTwoGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationTwoGetInfoRsp& from);
  void MergeFrom(const TActCelebrationTwoGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActCelebrationTwoBuyInfo ArrRmbGoodBuyInfo = 1;
  inline int arrrmbgoodbuyinfo_size() const;
  inline void clear_arrrmbgoodbuyinfo();
  static const int kArrRmbGoodBuyInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoGetInfoRsp</name>
  	<Function>
  		<name>arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrmbgoodbuyinfo_size</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActCelebrationTwoBuyInfo& arrrmbgoodbuyinfo(int index) const;
  inline ::pb::TActCelebrationTwoBuyInfo* mutable_arrrmbgoodbuyinfo(int index);
  inline ::pb::TActCelebrationTwoBuyInfo* add_arrrmbgoodbuyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo >&
      arrrmbgoodbuyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo >*
      mutable_arrrmbgoodbuyinfo();

  // repeated .pb.TActCelebrationTwoBuyInfo ArrGoodBuyInfo = 2;
  inline int arrgoodbuyinfo_size() const;
  inline void clear_arrgoodbuyinfo();
  static const int kArrGoodBuyInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoGetInfoRsp</name>
  	<Function>
  		<name>arrgoodbuyinfo</name>
  		<replaceName>ArrGoodBuyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrgoodbuyinfo</name>
  		<replaceName>ArrGoodBuyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrgoodbuyinfo</name>
  		<replaceName>ArrGoodBuyInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrgoodbuyinfo</name>
  		<replaceName>ArrGoodBuyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrgoodbuyinfo_size</name>
  		<replaceName>ArrGoodBuyInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActCelebrationTwoBuyInfo& arrgoodbuyinfo(int index) const;
  inline ::pb::TActCelebrationTwoBuyInfo* mutable_arrgoodbuyinfo(int index);
  inline ::pb::TActCelebrationTwoBuyInfo* add_arrgoodbuyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo >&
      arrgoodbuyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo >*
      mutable_arrgoodbuyinfo();

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 3;
  inline int arrtaskrewardinfo_size() const;
  inline void clear_arrtaskrewardinfo();
  static const int kArrTaskRewardInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoGetInfoRsp</name>
  	<Function>
  		<name>arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskrewardinfo_size</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityRewardInfo& arrtaskrewardinfo(int index) const;
  inline ::pb::TActivityRewardInfo* mutable_arrtaskrewardinfo(int index);
  inline ::pb::TActivityRewardInfo* add_arrtaskrewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
      arrtaskrewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
      mutable_arrtaskrewardinfo();

  // repeated .pb.TActCelebrationTwoBuyInfo ArrExchangedInfo = 4;
  inline int arrexchangedinfo_size() const;
  inline void clear_arrexchangedinfo();
  static const int kArrExchangedInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoGetInfoRsp</name>
  	<Function>
  		<name>arrexchangedinfo</name>
  		<replaceName>ArrExchangedInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrexchangedinfo</name>
  		<replaceName>ArrExchangedInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrexchangedinfo</name>
  		<replaceName>ArrExchangedInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrexchangedinfo</name>
  		<replaceName>ArrExchangedInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrexchangedinfo_size</name>
  		<replaceName>ArrExchangedInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActCelebrationTwoBuyInfo& arrexchangedinfo(int index) const;
  inline ::pb::TActCelebrationTwoBuyInfo* mutable_arrexchangedinfo(int index);
  inline ::pb::TActCelebrationTwoBuyInfo* add_arrexchangedinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo >&
      arrexchangedinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo >*
      mutable_arrexchangedinfo();

  // repeated .pb.TActCelebrationTwoTaskInfo ArrTaskInfo = 5;
  inline int arrtaskinfo_size() const;
  inline void clear_arrtaskinfo();
  static const int kArrTaskInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoGetInfoRsp</name>
  	<Function>
  		<name>arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskinfo_size</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActCelebrationTwoTaskInfo& arrtaskinfo(int index) const;
  inline ::pb::TActCelebrationTwoTaskInfo* mutable_arrtaskinfo(int index);
  inline ::pb::TActCelebrationTwoTaskInfo* add_arrtaskinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoTaskInfo >&
      arrtaskinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoTaskInfo >*
      mutable_arrtaskinfo();

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationTwoGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo > arrrmbgoodbuyinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo > arrgoodbuyinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo > arrtaskrewardinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo > arrexchangedinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoTaskInfo > arrtaskinfo_;
  friend void  protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebrationTwo_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationTwoGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationTwoBuyGoodsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebrationTwo.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationTwoBuyGoodsReq : public ::google::protobuf::Message {
 public:
  TActCelebrationTwoBuyGoodsReq();
  virtual ~TActCelebrationTwoBuyGoodsReq();

  TActCelebrationTwoBuyGoodsReq(const TActCelebrationTwoBuyGoodsReq& from);

  inline TActCelebrationTwoBuyGoodsReq& operator=(const TActCelebrationTwoBuyGoodsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationTwoBuyGoodsReq& default_instance();

  void Swap(TActCelebrationTwoBuyGoodsReq* other);

  // implements Message ----------------------------------------------

  TActCelebrationTwoBuyGoodsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationTwoBuyGoodsReq& from);
  void MergeFrom(const TActCelebrationTwoBuyGoodsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GoodId = 1;
  inline bool has_goodid() const;
  inline void clear_goodid();
  static const int kGoodIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoBuyGoodsReq</name>
  	<Function>
  		<name>goodid</name>
  		<replaceName>GoodId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goodid</name>
  		<replaceName>GoodId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goodid</name>
  		<replaceName>GoodId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goodid() const;
  inline void set_goodid(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoBuyGoodsReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationTwoBuyGoodsReq)
 private:
  inline void set_has_goodid();
  inline void clear_has_goodid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 goodid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebrationTwo_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationTwoBuyGoodsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationTwoBuyGoodsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebrationTwo.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationTwoBuyGoodsRsp : public ::google::protobuf::Message {
 public:
  TActCelebrationTwoBuyGoodsRsp();
  virtual ~TActCelebrationTwoBuyGoodsRsp();

  TActCelebrationTwoBuyGoodsRsp(const TActCelebrationTwoBuyGoodsRsp& from);

  inline TActCelebrationTwoBuyGoodsRsp& operator=(const TActCelebrationTwoBuyGoodsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationTwoBuyGoodsRsp& default_instance();

  void Swap(TActCelebrationTwoBuyGoodsRsp* other);

  // implements Message ----------------------------------------------

  TActCelebrationTwoBuyGoodsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationTwoBuyGoodsRsp& from);
  void MergeFrom(const TActCelebrationTwoBuyGoodsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoBuyGoodsRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationTwoBuyGoodsRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebrationTwo_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationTwoBuyGoodsRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationTwoGetTaskRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebrationTwo.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationTwoGetTaskRewardReq : public ::google::protobuf::Message {
 public:
  TActCelebrationTwoGetTaskRewardReq();
  virtual ~TActCelebrationTwoGetTaskRewardReq();

  TActCelebrationTwoGetTaskRewardReq(const TActCelebrationTwoGetTaskRewardReq& from);

  inline TActCelebrationTwoGetTaskRewardReq& operator=(const TActCelebrationTwoGetTaskRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationTwoGetTaskRewardReq& default_instance();

  void Swap(TActCelebrationTwoGetTaskRewardReq* other);

  // implements Message ----------------------------------------------

  TActCelebrationTwoGetTaskRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationTwoGetTaskRewardReq& from);
  void MergeFrom(const TActCelebrationTwoGetTaskRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoGetTaskRewardReq</name>
  	<Function>
  		<name>taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationTwoGetTaskRewardReq)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 taskid_;
  friend void  protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebrationTwo_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationTwoGetTaskRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationTwoGetTaskRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebrationTwo.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationTwoGetTaskRewardRsp : public ::google::protobuf::Message {
 public:
  TActCelebrationTwoGetTaskRewardRsp();
  virtual ~TActCelebrationTwoGetTaskRewardRsp();

  TActCelebrationTwoGetTaskRewardRsp(const TActCelebrationTwoGetTaskRewardRsp& from);

  inline TActCelebrationTwoGetTaskRewardRsp& operator=(const TActCelebrationTwoGetTaskRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationTwoGetTaskRewardRsp& default_instance();

  void Swap(TActCelebrationTwoGetTaskRewardRsp* other);

  // implements Message ----------------------------------------------

  TActCelebrationTwoGetTaskRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationTwoGetTaskRewardRsp& from);
  void MergeFrom(const TActCelebrationTwoGetTaskRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoGetTaskRewardRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationTwoGetTaskRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebrationTwo_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationTwoGetTaskRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationTwoExchangeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebrationTwo.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationTwoExchangeReq : public ::google::protobuf::Message {
 public:
  TActCelebrationTwoExchangeReq();
  virtual ~TActCelebrationTwoExchangeReq();

  TActCelebrationTwoExchangeReq(const TActCelebrationTwoExchangeReq& from);

  inline TActCelebrationTwoExchangeReq& operator=(const TActCelebrationTwoExchangeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationTwoExchangeReq& default_instance();

  void Swap(TActCelebrationTwoExchangeReq* other);

  // implements Message ----------------------------------------------

  TActCelebrationTwoExchangeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationTwoExchangeReq& from);
  void MergeFrom(const TActCelebrationTwoExchangeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ExchangeId = 1;
  inline bool has_exchangeid() const;
  inline void clear_exchangeid();
  static const int kExchangeIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoExchangeReq</name>
  	<Function>
  		<name>exchangeid</name>
  		<replaceName>ExchangeId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exchangeid</name>
  		<replaceName>ExchangeId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exchangeid</name>
  		<replaceName>ExchangeId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 exchangeid() const;
  inline void set_exchangeid(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoExchangeReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationTwoExchangeReq)
 private:
  inline void set_has_exchangeid();
  inline void clear_has_exchangeid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 exchangeid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebrationTwo_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationTwoExchangeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationTwoExchangeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebrationTwo.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationTwoExchangeRsp : public ::google::protobuf::Message {
 public:
  TActCelebrationTwoExchangeRsp();
  virtual ~TActCelebrationTwoExchangeRsp();

  TActCelebrationTwoExchangeRsp(const TActCelebrationTwoExchangeRsp& from);

  inline TActCelebrationTwoExchangeRsp& operator=(const TActCelebrationTwoExchangeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationTwoExchangeRsp& default_instance();

  void Swap(TActCelebrationTwoExchangeRsp* other);

  // implements Message ----------------------------------------------

  TActCelebrationTwoExchangeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationTwoExchangeRsp& from);
  void MergeFrom(const TActCelebrationTwoExchangeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoExchangeRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationTwoExchangeRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebrationTwo_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationTwoExchangeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationTwoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebrationTwo.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationTwoNotify : public ::google::protobuf::Message {
 public:
  TActCelebrationTwoNotify();
  virtual ~TActCelebrationTwoNotify();

  TActCelebrationTwoNotify(const TActCelebrationTwoNotify& from);

  inline TActCelebrationTwoNotify& operator=(const TActCelebrationTwoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationTwoNotify& default_instance();

  void Swap(TActCelebrationTwoNotify* other);

  // implements Message ----------------------------------------------

  TActCelebrationTwoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationTwoNotify& from);
  void MergeFrom(const TActCelebrationTwoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActCelebrationTwoBuyInfo ArrRmbGoodBuyInfo = 1;
  inline int arrrmbgoodbuyinfo_size() const;
  inline void clear_arrrmbgoodbuyinfo();
  static const int kArrRmbGoodBuyInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoNotify</name>
  	<Function>
  		<name>arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrmbgoodbuyinfo_size</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActCelebrationTwoBuyInfo& arrrmbgoodbuyinfo(int index) const;
  inline ::pb::TActCelebrationTwoBuyInfo* mutable_arrrmbgoodbuyinfo(int index);
  inline ::pb::TActCelebrationTwoBuyInfo* add_arrrmbgoodbuyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo >&
      arrrmbgoodbuyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo >*
      mutable_arrrmbgoodbuyinfo();

  // repeated .pb.TActCelebrationTwoTaskInfo ArrTaskInfo = 2;
  inline int arrtaskinfo_size() const;
  inline void clear_arrtaskinfo();
  static const int kArrTaskInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTwoNotify</name>
  	<Function>
  		<name>arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskinfo_size</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActCelebrationTwoTaskInfo& arrtaskinfo(int index) const;
  inline ::pb::TActCelebrationTwoTaskInfo* mutable_arrtaskinfo(int index);
  inline ::pb::TActCelebrationTwoTaskInfo* add_arrtaskinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoTaskInfo >&
      arrtaskinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoTaskInfo >*
      mutable_arrtaskinfo();

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationTwoNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo > arrrmbgoodbuyinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoTaskInfo > arrtaskinfo_;
  friend void  protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebrationTwo_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebrationTwo_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationTwoNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActCelebrationTwoBuyInfo

// optional uint32 Id = 1;
inline bool TActCelebrationTwoBuyInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActCelebrationTwoBuyInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActCelebrationTwoBuyInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActCelebrationTwoBuyInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActCelebrationTwoBuyInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoBuyInfo.Id)
  return id_;
}
inline void TActCelebrationTwoBuyInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationTwoBuyInfo.Id)
}

// optional uint32 Num = 2;
inline bool TActCelebrationTwoBuyInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActCelebrationTwoBuyInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActCelebrationTwoBuyInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActCelebrationTwoBuyInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActCelebrationTwoBuyInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoBuyInfo.Num)
  return num_;
}
inline void TActCelebrationTwoBuyInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationTwoBuyInfo.Num)
}

// optional uint64 BuyTime = 3;
inline bool TActCelebrationTwoBuyInfo::has_buytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActCelebrationTwoBuyInfo::set_has_buytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActCelebrationTwoBuyInfo::clear_has_buytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActCelebrationTwoBuyInfo::clear_buytime() {
  buytime_ = GOOGLE_ULONGLONG(0);
  clear_has_buytime();
}
inline ::google::protobuf::uint64 TActCelebrationTwoBuyInfo::buytime() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoBuyInfo.BuyTime)
  return buytime_;
}
inline void TActCelebrationTwoBuyInfo::set_buytime(::google::protobuf::uint64 value) {
  set_has_buytime();
  buytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationTwoBuyInfo.BuyTime)
}

// -------------------------------------------------------------------

// TActCelebrationTwoTaskInfo

// optional uint32 TaskType = 1;
inline bool TActCelebrationTwoTaskInfo::has_tasktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActCelebrationTwoTaskInfo::set_has_tasktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActCelebrationTwoTaskInfo::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActCelebrationTwoTaskInfo::clear_tasktype() {
  tasktype_ = 0u;
  clear_has_tasktype();
}
inline ::google::protobuf::uint32 TActCelebrationTwoTaskInfo::tasktype() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoTaskInfo.TaskType)
  return tasktype_;
}
inline void TActCelebrationTwoTaskInfo::set_tasktype(::google::protobuf::uint32 value) {
  set_has_tasktype();
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationTwoTaskInfo.TaskType)
}

// optional uint32 Num = 2;
inline bool TActCelebrationTwoTaskInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActCelebrationTwoTaskInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActCelebrationTwoTaskInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActCelebrationTwoTaskInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActCelebrationTwoTaskInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoTaskInfo.Num)
  return num_;
}
inline void TActCelebrationTwoTaskInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationTwoTaskInfo.Num)
}

// -------------------------------------------------------------------

// TActCelebrationTwoGetInfoRsp

// repeated .pb.TActCelebrationTwoBuyInfo ArrRmbGoodBuyInfo = 1;
inline int TActCelebrationTwoGetInfoRsp::arrrmbgoodbuyinfo_size() const {
  return arrrmbgoodbuyinfo_.size();
}
inline void TActCelebrationTwoGetInfoRsp::clear_arrrmbgoodbuyinfo() {
  arrrmbgoodbuyinfo_.Clear();
}
inline const ::pb::TActCelebrationTwoBuyInfo& TActCelebrationTwoGetInfoRsp::arrrmbgoodbuyinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoGetInfoRsp.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Get(index);
}
inline ::pb::TActCelebrationTwoBuyInfo* TActCelebrationTwoGetInfoRsp::mutable_arrrmbgoodbuyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationTwoGetInfoRsp.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Mutable(index);
}
inline ::pb::TActCelebrationTwoBuyInfo* TActCelebrationTwoGetInfoRsp::add_arrrmbgoodbuyinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationTwoGetInfoRsp.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo >&
TActCelebrationTwoGetInfoRsp::arrrmbgoodbuyinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationTwoGetInfoRsp.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo >*
TActCelebrationTwoGetInfoRsp::mutable_arrrmbgoodbuyinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationTwoGetInfoRsp.ArrRmbGoodBuyInfo)
  return &arrrmbgoodbuyinfo_;
}

// repeated .pb.TActCelebrationTwoBuyInfo ArrGoodBuyInfo = 2;
inline int TActCelebrationTwoGetInfoRsp::arrgoodbuyinfo_size() const {
  return arrgoodbuyinfo_.size();
}
inline void TActCelebrationTwoGetInfoRsp::clear_arrgoodbuyinfo() {
  arrgoodbuyinfo_.Clear();
}
inline const ::pb::TActCelebrationTwoBuyInfo& TActCelebrationTwoGetInfoRsp::arrgoodbuyinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoGetInfoRsp.ArrGoodBuyInfo)
  return arrgoodbuyinfo_.Get(index);
}
inline ::pb::TActCelebrationTwoBuyInfo* TActCelebrationTwoGetInfoRsp::mutable_arrgoodbuyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationTwoGetInfoRsp.ArrGoodBuyInfo)
  return arrgoodbuyinfo_.Mutable(index);
}
inline ::pb::TActCelebrationTwoBuyInfo* TActCelebrationTwoGetInfoRsp::add_arrgoodbuyinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationTwoGetInfoRsp.ArrGoodBuyInfo)
  return arrgoodbuyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo >&
TActCelebrationTwoGetInfoRsp::arrgoodbuyinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationTwoGetInfoRsp.ArrGoodBuyInfo)
  return arrgoodbuyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo >*
TActCelebrationTwoGetInfoRsp::mutable_arrgoodbuyinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationTwoGetInfoRsp.ArrGoodBuyInfo)
  return &arrgoodbuyinfo_;
}

// repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 3;
inline int TActCelebrationTwoGetInfoRsp::arrtaskrewardinfo_size() const {
  return arrtaskrewardinfo_.size();
}
inline void TActCelebrationTwoGetInfoRsp::clear_arrtaskrewardinfo() {
  arrtaskrewardinfo_.Clear();
}
inline const ::pb::TActivityRewardInfo& TActCelebrationTwoGetInfoRsp::arrtaskrewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoGetInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_.Get(index);
}
inline ::pb::TActivityRewardInfo* TActCelebrationTwoGetInfoRsp::mutable_arrtaskrewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationTwoGetInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_.Mutable(index);
}
inline ::pb::TActivityRewardInfo* TActCelebrationTwoGetInfoRsp::add_arrtaskrewardinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationTwoGetInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
TActCelebrationTwoGetInfoRsp::arrtaskrewardinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationTwoGetInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
TActCelebrationTwoGetInfoRsp::mutable_arrtaskrewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationTwoGetInfoRsp.ArrTaskRewardInfo)
  return &arrtaskrewardinfo_;
}

// repeated .pb.TActCelebrationTwoBuyInfo ArrExchangedInfo = 4;
inline int TActCelebrationTwoGetInfoRsp::arrexchangedinfo_size() const {
  return arrexchangedinfo_.size();
}
inline void TActCelebrationTwoGetInfoRsp::clear_arrexchangedinfo() {
  arrexchangedinfo_.Clear();
}
inline const ::pb::TActCelebrationTwoBuyInfo& TActCelebrationTwoGetInfoRsp::arrexchangedinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoGetInfoRsp.ArrExchangedInfo)
  return arrexchangedinfo_.Get(index);
}
inline ::pb::TActCelebrationTwoBuyInfo* TActCelebrationTwoGetInfoRsp::mutable_arrexchangedinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationTwoGetInfoRsp.ArrExchangedInfo)
  return arrexchangedinfo_.Mutable(index);
}
inline ::pb::TActCelebrationTwoBuyInfo* TActCelebrationTwoGetInfoRsp::add_arrexchangedinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationTwoGetInfoRsp.ArrExchangedInfo)
  return arrexchangedinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo >&
TActCelebrationTwoGetInfoRsp::arrexchangedinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationTwoGetInfoRsp.ArrExchangedInfo)
  return arrexchangedinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo >*
TActCelebrationTwoGetInfoRsp::mutable_arrexchangedinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationTwoGetInfoRsp.ArrExchangedInfo)
  return &arrexchangedinfo_;
}

// repeated .pb.TActCelebrationTwoTaskInfo ArrTaskInfo = 5;
inline int TActCelebrationTwoGetInfoRsp::arrtaskinfo_size() const {
  return arrtaskinfo_.size();
}
inline void TActCelebrationTwoGetInfoRsp::clear_arrtaskinfo() {
  arrtaskinfo_.Clear();
}
inline const ::pb::TActCelebrationTwoTaskInfo& TActCelebrationTwoGetInfoRsp::arrtaskinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoGetInfoRsp.ArrTaskInfo)
  return arrtaskinfo_.Get(index);
}
inline ::pb::TActCelebrationTwoTaskInfo* TActCelebrationTwoGetInfoRsp::mutable_arrtaskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationTwoGetInfoRsp.ArrTaskInfo)
  return arrtaskinfo_.Mutable(index);
}
inline ::pb::TActCelebrationTwoTaskInfo* TActCelebrationTwoGetInfoRsp::add_arrtaskinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationTwoGetInfoRsp.ArrTaskInfo)
  return arrtaskinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoTaskInfo >&
TActCelebrationTwoGetInfoRsp::arrtaskinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationTwoGetInfoRsp.ArrTaskInfo)
  return arrtaskinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoTaskInfo >*
TActCelebrationTwoGetInfoRsp::mutable_arrtaskinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationTwoGetInfoRsp.ArrTaskInfo)
  return &arrtaskinfo_;
}

// -------------------------------------------------------------------

// TActCelebrationTwoBuyGoodsReq

// optional uint32 GoodId = 1;
inline bool TActCelebrationTwoBuyGoodsReq::has_goodid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActCelebrationTwoBuyGoodsReq::set_has_goodid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActCelebrationTwoBuyGoodsReq::clear_has_goodid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActCelebrationTwoBuyGoodsReq::clear_goodid() {
  goodid_ = 0u;
  clear_has_goodid();
}
inline ::google::protobuf::uint32 TActCelebrationTwoBuyGoodsReq::goodid() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoBuyGoodsReq.GoodId)
  return goodid_;
}
inline void TActCelebrationTwoBuyGoodsReq::set_goodid(::google::protobuf::uint32 value) {
  set_has_goodid();
  goodid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationTwoBuyGoodsReq.GoodId)
}

// optional uint32 Num = 2;
inline bool TActCelebrationTwoBuyGoodsReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActCelebrationTwoBuyGoodsReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActCelebrationTwoBuyGoodsReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActCelebrationTwoBuyGoodsReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActCelebrationTwoBuyGoodsReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoBuyGoodsReq.Num)
  return num_;
}
inline void TActCelebrationTwoBuyGoodsReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationTwoBuyGoodsReq.Num)
}

// -------------------------------------------------------------------

// TActCelebrationTwoBuyGoodsRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActCelebrationTwoBuyGoodsRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActCelebrationTwoBuyGoodsRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActCelebrationTwoBuyGoodsRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoBuyGoodsRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActCelebrationTwoBuyGoodsRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationTwoBuyGoodsRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActCelebrationTwoBuyGoodsRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationTwoBuyGoodsRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActCelebrationTwoBuyGoodsRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationTwoBuyGoodsRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActCelebrationTwoBuyGoodsRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationTwoBuyGoodsRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActCelebrationTwoGetTaskRewardReq

// optional uint32 TaskId = 1;
inline bool TActCelebrationTwoGetTaskRewardReq::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActCelebrationTwoGetTaskRewardReq::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActCelebrationTwoGetTaskRewardReq::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActCelebrationTwoGetTaskRewardReq::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 TActCelebrationTwoGetTaskRewardReq::taskid() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoGetTaskRewardReq.TaskId)
  return taskid_;
}
inline void TActCelebrationTwoGetTaskRewardReq::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationTwoGetTaskRewardReq.TaskId)
}

// -------------------------------------------------------------------

// TActCelebrationTwoGetTaskRewardRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActCelebrationTwoGetTaskRewardRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActCelebrationTwoGetTaskRewardRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActCelebrationTwoGetTaskRewardRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoGetTaskRewardRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActCelebrationTwoGetTaskRewardRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationTwoGetTaskRewardRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActCelebrationTwoGetTaskRewardRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationTwoGetTaskRewardRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActCelebrationTwoGetTaskRewardRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationTwoGetTaskRewardRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActCelebrationTwoGetTaskRewardRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationTwoGetTaskRewardRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActCelebrationTwoExchangeReq

// optional uint32 ExchangeId = 1;
inline bool TActCelebrationTwoExchangeReq::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActCelebrationTwoExchangeReq::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActCelebrationTwoExchangeReq::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActCelebrationTwoExchangeReq::clear_exchangeid() {
  exchangeid_ = 0u;
  clear_has_exchangeid();
}
inline ::google::protobuf::uint32 TActCelebrationTwoExchangeReq::exchangeid() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoExchangeReq.ExchangeId)
  return exchangeid_;
}
inline void TActCelebrationTwoExchangeReq::set_exchangeid(::google::protobuf::uint32 value) {
  set_has_exchangeid();
  exchangeid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationTwoExchangeReq.ExchangeId)
}

// optional uint32 Num = 2;
inline bool TActCelebrationTwoExchangeReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActCelebrationTwoExchangeReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActCelebrationTwoExchangeReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActCelebrationTwoExchangeReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActCelebrationTwoExchangeReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoExchangeReq.Num)
  return num_;
}
inline void TActCelebrationTwoExchangeReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationTwoExchangeReq.Num)
}

// -------------------------------------------------------------------

// TActCelebrationTwoExchangeRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActCelebrationTwoExchangeRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActCelebrationTwoExchangeRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActCelebrationTwoExchangeRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoExchangeRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActCelebrationTwoExchangeRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationTwoExchangeRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActCelebrationTwoExchangeRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationTwoExchangeRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActCelebrationTwoExchangeRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationTwoExchangeRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActCelebrationTwoExchangeRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationTwoExchangeRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActCelebrationTwoNotify

// repeated .pb.TActCelebrationTwoBuyInfo ArrRmbGoodBuyInfo = 1;
inline int TActCelebrationTwoNotify::arrrmbgoodbuyinfo_size() const {
  return arrrmbgoodbuyinfo_.size();
}
inline void TActCelebrationTwoNotify::clear_arrrmbgoodbuyinfo() {
  arrrmbgoodbuyinfo_.Clear();
}
inline const ::pb::TActCelebrationTwoBuyInfo& TActCelebrationTwoNotify::arrrmbgoodbuyinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoNotify.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Get(index);
}
inline ::pb::TActCelebrationTwoBuyInfo* TActCelebrationTwoNotify::mutable_arrrmbgoodbuyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationTwoNotify.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Mutable(index);
}
inline ::pb::TActCelebrationTwoBuyInfo* TActCelebrationTwoNotify::add_arrrmbgoodbuyinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationTwoNotify.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo >&
TActCelebrationTwoNotify::arrrmbgoodbuyinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationTwoNotify.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoBuyInfo >*
TActCelebrationTwoNotify::mutable_arrrmbgoodbuyinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationTwoNotify.ArrRmbGoodBuyInfo)
  return &arrrmbgoodbuyinfo_;
}

// repeated .pb.TActCelebrationTwoTaskInfo ArrTaskInfo = 2;
inline int TActCelebrationTwoNotify::arrtaskinfo_size() const {
  return arrtaskinfo_.size();
}
inline void TActCelebrationTwoNotify::clear_arrtaskinfo() {
  arrtaskinfo_.Clear();
}
inline const ::pb::TActCelebrationTwoTaskInfo& TActCelebrationTwoNotify::arrtaskinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTwoNotify.ArrTaskInfo)
  return arrtaskinfo_.Get(index);
}
inline ::pb::TActCelebrationTwoTaskInfo* TActCelebrationTwoNotify::mutable_arrtaskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationTwoNotify.ArrTaskInfo)
  return arrtaskinfo_.Mutable(index);
}
inline ::pb::TActCelebrationTwoTaskInfo* TActCelebrationTwoNotify::add_arrtaskinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationTwoNotify.ArrTaskInfo)
  return arrtaskinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoTaskInfo >&
TActCelebrationTwoNotify::arrtaskinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationTwoNotify.ArrTaskInfo)
  return arrtaskinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTwoTaskInfo >*
TActCelebrationTwoNotify::mutable_arrtaskinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationTwoNotify.ArrTaskInfo)
  return &arrtaskinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActCelebrationTwo_2eproto__INCLUDED
