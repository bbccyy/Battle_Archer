// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Destiny.proto

#ifndef PROTOBUF_net_2fDestiny_2eproto__INCLUDED
#define PROTOBUF_net_2fDestiny_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fDestiny_2eproto();
void protobuf_AssignDesc_net_2fDestiny_2eproto();
void protobuf_ShutdownFile_net_2fDestiny_2eproto();

class TDestinyStone;
class TDestinySlab;
class TDestinyInfoRsp;
class TDestinyNotify;
class TDestinyInlayReq;
class TDestinyActivateSlabReq;

enum EDestinySlabStatus {
  SlabUnActive = 0,
  SlabActived = 1
};
bool EDestinySlabStatus_IsValid(int value);
const EDestinySlabStatus EDestinySlabStatus_MIN = SlabUnActive;
const EDestinySlabStatus EDestinySlabStatus_MAX = SlabActived;
const int EDestinySlabStatus_ARRAYSIZE = EDestinySlabStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDestinySlabStatus_descriptor();
inline const ::std::string& EDestinySlabStatus_Name(EDestinySlabStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDestinySlabStatus_descriptor(), value);
}
inline bool EDestinySlabStatus_Parse(
    const ::std::string& name, EDestinySlabStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDestinySlabStatus>(
    EDestinySlabStatus_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TDestinyStone</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Destiny.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDestinyStone : public ::google::protobuf::Message {
 public:
  TDestinyStone();
  virtual ~TDestinyStone();

  TDestinyStone(const TDestinyStone& from);

  inline TDestinyStone& operator=(const TDestinyStone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDestinyStone& default_instance();

  void Swap(TDestinyStone* other);

  // implements Message ----------------------------------------------

  TDestinyStone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDestinyStone& from);
  void MergeFrom(const TDestinyStone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 StoneId = 1;
  inline bool has_stoneid() const;
  inline void clear_stoneid();
  static const int kStoneIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDestinyStone</name>
  	<Function>
  		<name>stoneid</name>
  		<replaceName>StoneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stoneid</name>
  		<replaceName>StoneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stoneid</name>
  		<replaceName>StoneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 stoneid() const;
  inline void set_stoneid(::google::protobuf::uint32 value);

  // optional uint32 Status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDestinyStone</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDestinyStone)
 private:
  inline void set_has_stoneid();
  inline void clear_has_stoneid();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 stoneid_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_net_2fDestiny_2eproto();
  friend void protobuf_AssignDesc_net_2fDestiny_2eproto();
  friend void protobuf_ShutdownFile_net_2fDestiny_2eproto();

  void InitAsDefaultInstance();
  static TDestinyStone* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDestinySlab</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Destiny.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDestinySlab : public ::google::protobuf::Message {
 public:
  TDestinySlab();
  virtual ~TDestinySlab();

  TDestinySlab(const TDestinySlab& from);

  inline TDestinySlab& operator=(const TDestinySlab& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDestinySlab& default_instance();

  void Swap(TDestinySlab* other);

  // implements Message ----------------------------------------------

  TDestinySlab* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDestinySlab& from);
  void MergeFrom(const TDestinySlab& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SlabId = 1;
  inline bool has_slabid() const;
  inline void clear_slabid();
  static const int kSlabIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDestinySlab</name>
  	<Function>
  		<name>slabid</name>
  		<replaceName>SlabId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slabid</name>
  		<replaceName>SlabId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slabid</name>
  		<replaceName>SlabId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 slabid() const;
  inline void set_slabid(::google::protobuf::uint32 value);

  // optional uint32 Status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDestinySlab</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // repeated .pb.TDestinyStone StoneArr = 3;
  inline int stonearr_size() const;
  inline void clear_stonearr();
  static const int kStoneArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TDestinySlab</name>
  	<Function>
  		<name>stonearr</name>
  		<replaceName>StoneArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_stonearr</name>
  		<replaceName>StoneArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_stonearr</name>
  		<replaceName>StoneArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stonearr</name>
  		<replaceName>StoneArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>stonearr_size</name>
  		<replaceName>StoneArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDestinyStone& stonearr(int index) const;
  inline ::pb::TDestinyStone* mutable_stonearr(int index);
  inline ::pb::TDestinyStone* add_stonearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDestinyStone >&
      stonearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDestinyStone >*
      mutable_stonearr();

  // @@protoc_insertion_point(class_scope:pb.TDestinySlab)
 private:
  inline void set_has_slabid();
  inline void clear_has_slabid();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 slabid_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDestinyStone > stonearr_;
  friend void  protobuf_AddDesc_net_2fDestiny_2eproto();
  friend void protobuf_AssignDesc_net_2fDestiny_2eproto();
  friend void protobuf_ShutdownFile_net_2fDestiny_2eproto();

  void InitAsDefaultInstance();
  static TDestinySlab* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDestinyInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Destiny.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDestinyInfoRsp : public ::google::protobuf::Message {
 public:
  TDestinyInfoRsp();
  virtual ~TDestinyInfoRsp();

  TDestinyInfoRsp(const TDestinyInfoRsp& from);

  inline TDestinyInfoRsp& operator=(const TDestinyInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDestinyInfoRsp& default_instance();

  void Swap(TDestinyInfoRsp* other);

  // implements Message ----------------------------------------------

  TDestinyInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDestinyInfoRsp& from);
  void MergeFrom(const TDestinyInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TDestinySlab DestinyArr = 1;
  inline int destinyarr_size() const;
  inline void clear_destinyarr();
  static const int kDestinyArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDestinyInfoRsp</name>
  	<Function>
  		<name>destinyarr</name>
  		<replaceName>DestinyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_destinyarr</name>
  		<replaceName>DestinyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_destinyarr</name>
  		<replaceName>DestinyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_destinyarr</name>
  		<replaceName>DestinyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>destinyarr_size</name>
  		<replaceName>DestinyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDestinySlab& destinyarr(int index) const;
  inline ::pb::TDestinySlab* mutable_destinyarr(int index);
  inline ::pb::TDestinySlab* add_destinyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDestinySlab >&
      destinyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDestinySlab >*
      mutable_destinyarr();

  // @@protoc_insertion_point(class_scope:pb.TDestinyInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDestinySlab > destinyarr_;
  friend void  protobuf_AddDesc_net_2fDestiny_2eproto();
  friend void protobuf_AssignDesc_net_2fDestiny_2eproto();
  friend void protobuf_ShutdownFile_net_2fDestiny_2eproto();

  void InitAsDefaultInstance();
  static TDestinyInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDestinyNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Destiny.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDestinyNotify : public ::google::protobuf::Message {
 public:
  TDestinyNotify();
  virtual ~TDestinyNotify();

  TDestinyNotify(const TDestinyNotify& from);

  inline TDestinyNotify& operator=(const TDestinyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDestinyNotify& default_instance();

  void Swap(TDestinyNotify* other);

  // implements Message ----------------------------------------------

  TDestinyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDestinyNotify& from);
  void MergeFrom(const TDestinyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TDestinySlab DestinyArr = 1;
  inline int destinyarr_size() const;
  inline void clear_destinyarr();
  static const int kDestinyArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDestinyNotify</name>
  	<Function>
  		<name>destinyarr</name>
  		<replaceName>DestinyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_destinyarr</name>
  		<replaceName>DestinyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_destinyarr</name>
  		<replaceName>DestinyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_destinyarr</name>
  		<replaceName>DestinyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>destinyarr_size</name>
  		<replaceName>DestinyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDestinySlab& destinyarr(int index) const;
  inline ::pb::TDestinySlab* mutable_destinyarr(int index);
  inline ::pb::TDestinySlab* add_destinyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDestinySlab >&
      destinyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDestinySlab >*
      mutable_destinyarr();

  // @@protoc_insertion_point(class_scope:pb.TDestinyNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDestinySlab > destinyarr_;
  friend void  protobuf_AddDesc_net_2fDestiny_2eproto();
  friend void protobuf_AssignDesc_net_2fDestiny_2eproto();
  friend void protobuf_ShutdownFile_net_2fDestiny_2eproto();

  void InitAsDefaultInstance();
  static TDestinyNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDestinyInlayReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Destiny.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDestinyInlayReq : public ::google::protobuf::Message {
 public:
  TDestinyInlayReq();
  virtual ~TDestinyInlayReq();

  TDestinyInlayReq(const TDestinyInlayReq& from);

  inline TDestinyInlayReq& operator=(const TDestinyInlayReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDestinyInlayReq& default_instance();

  void Swap(TDestinyInlayReq* other);

  // implements Message ----------------------------------------------

  TDestinyInlayReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDestinyInlayReq& from);
  void MergeFrom(const TDestinyInlayReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 StoneId = 1;
  inline bool has_stoneid() const;
  inline void clear_stoneid();
  static const int kStoneIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDestinyInlayReq</name>
  	<Function>
  		<name>stoneid</name>
  		<replaceName>StoneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stoneid</name>
  		<replaceName>StoneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stoneid</name>
  		<replaceName>StoneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 stoneid() const;
  inline void set_stoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDestinyInlayReq)
 private:
  inline void set_has_stoneid();
  inline void clear_has_stoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 stoneid_;
  friend void  protobuf_AddDesc_net_2fDestiny_2eproto();
  friend void protobuf_AssignDesc_net_2fDestiny_2eproto();
  friend void protobuf_ShutdownFile_net_2fDestiny_2eproto();

  void InitAsDefaultInstance();
  static TDestinyInlayReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDestinyActivateSlabReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Destiny.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDestinyActivateSlabReq : public ::google::protobuf::Message {
 public:
  TDestinyActivateSlabReq();
  virtual ~TDestinyActivateSlabReq();

  TDestinyActivateSlabReq(const TDestinyActivateSlabReq& from);

  inline TDestinyActivateSlabReq& operator=(const TDestinyActivateSlabReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDestinyActivateSlabReq& default_instance();

  void Swap(TDestinyActivateSlabReq* other);

  // implements Message ----------------------------------------------

  TDestinyActivateSlabReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDestinyActivateSlabReq& from);
  void MergeFrom(const TDestinyActivateSlabReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SlabId = 1;
  inline bool has_slabid() const;
  inline void clear_slabid();
  static const int kSlabIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDestinyActivateSlabReq</name>
  	<Function>
  		<name>slabid</name>
  		<replaceName>SlabId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slabid</name>
  		<replaceName>SlabId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slabid</name>
  		<replaceName>SlabId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 slabid() const;
  inline void set_slabid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDestinyActivateSlabReq)
 private:
  inline void set_has_slabid();
  inline void clear_has_slabid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 slabid_;
  friend void  protobuf_AddDesc_net_2fDestiny_2eproto();
  friend void protobuf_AssignDesc_net_2fDestiny_2eproto();
  friend void protobuf_ShutdownFile_net_2fDestiny_2eproto();

  void InitAsDefaultInstance();
  static TDestinyActivateSlabReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TDestinyStone

// optional uint32 StoneId = 1;
inline bool TDestinyStone::has_stoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDestinyStone::set_has_stoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDestinyStone::clear_has_stoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDestinyStone::clear_stoneid() {
  stoneid_ = 0u;
  clear_has_stoneid();
}
inline ::google::protobuf::uint32 TDestinyStone::stoneid() const {
  // @@protoc_insertion_point(field_get:pb.TDestinyStone.StoneId)
  return stoneid_;
}
inline void TDestinyStone::set_stoneid(::google::protobuf::uint32 value) {
  set_has_stoneid();
  stoneid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDestinyStone.StoneId)
}

// optional uint32 Status = 2;
inline bool TDestinyStone::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDestinyStone::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDestinyStone::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDestinyStone::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 TDestinyStone::status() const {
  // @@protoc_insertion_point(field_get:pb.TDestinyStone.Status)
  return status_;
}
inline void TDestinyStone::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TDestinyStone.Status)
}

// -------------------------------------------------------------------

// TDestinySlab

// optional uint32 SlabId = 1;
inline bool TDestinySlab::has_slabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDestinySlab::set_has_slabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDestinySlab::clear_has_slabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDestinySlab::clear_slabid() {
  slabid_ = 0u;
  clear_has_slabid();
}
inline ::google::protobuf::uint32 TDestinySlab::slabid() const {
  // @@protoc_insertion_point(field_get:pb.TDestinySlab.SlabId)
  return slabid_;
}
inline void TDestinySlab::set_slabid(::google::protobuf::uint32 value) {
  set_has_slabid();
  slabid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDestinySlab.SlabId)
}

// optional uint32 Status = 2;
inline bool TDestinySlab::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDestinySlab::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDestinySlab::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDestinySlab::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 TDestinySlab::status() const {
  // @@protoc_insertion_point(field_get:pb.TDestinySlab.Status)
  return status_;
}
inline void TDestinySlab::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TDestinySlab.Status)
}

// repeated .pb.TDestinyStone StoneArr = 3;
inline int TDestinySlab::stonearr_size() const {
  return stonearr_.size();
}
inline void TDestinySlab::clear_stonearr() {
  stonearr_.Clear();
}
inline const ::pb::TDestinyStone& TDestinySlab::stonearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDestinySlab.StoneArr)
  return stonearr_.Get(index);
}
inline ::pb::TDestinyStone* TDestinySlab::mutable_stonearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDestinySlab.StoneArr)
  return stonearr_.Mutable(index);
}
inline ::pb::TDestinyStone* TDestinySlab::add_stonearr() {
  // @@protoc_insertion_point(field_add:pb.TDestinySlab.StoneArr)
  return stonearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDestinyStone >&
TDestinySlab::stonearr() const {
  // @@protoc_insertion_point(field_list:pb.TDestinySlab.StoneArr)
  return stonearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDestinyStone >*
TDestinySlab::mutable_stonearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDestinySlab.StoneArr)
  return &stonearr_;
}

// -------------------------------------------------------------------

// TDestinyInfoRsp

// repeated .pb.TDestinySlab DestinyArr = 1;
inline int TDestinyInfoRsp::destinyarr_size() const {
  return destinyarr_.size();
}
inline void TDestinyInfoRsp::clear_destinyarr() {
  destinyarr_.Clear();
}
inline const ::pb::TDestinySlab& TDestinyInfoRsp::destinyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDestinyInfoRsp.DestinyArr)
  return destinyarr_.Get(index);
}
inline ::pb::TDestinySlab* TDestinyInfoRsp::mutable_destinyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDestinyInfoRsp.DestinyArr)
  return destinyarr_.Mutable(index);
}
inline ::pb::TDestinySlab* TDestinyInfoRsp::add_destinyarr() {
  // @@protoc_insertion_point(field_add:pb.TDestinyInfoRsp.DestinyArr)
  return destinyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDestinySlab >&
TDestinyInfoRsp::destinyarr() const {
  // @@protoc_insertion_point(field_list:pb.TDestinyInfoRsp.DestinyArr)
  return destinyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDestinySlab >*
TDestinyInfoRsp::mutable_destinyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDestinyInfoRsp.DestinyArr)
  return &destinyarr_;
}

// -------------------------------------------------------------------

// TDestinyNotify

// repeated .pb.TDestinySlab DestinyArr = 1;
inline int TDestinyNotify::destinyarr_size() const {
  return destinyarr_.size();
}
inline void TDestinyNotify::clear_destinyarr() {
  destinyarr_.Clear();
}
inline const ::pb::TDestinySlab& TDestinyNotify::destinyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDestinyNotify.DestinyArr)
  return destinyarr_.Get(index);
}
inline ::pb::TDestinySlab* TDestinyNotify::mutable_destinyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDestinyNotify.DestinyArr)
  return destinyarr_.Mutable(index);
}
inline ::pb::TDestinySlab* TDestinyNotify::add_destinyarr() {
  // @@protoc_insertion_point(field_add:pb.TDestinyNotify.DestinyArr)
  return destinyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDestinySlab >&
TDestinyNotify::destinyarr() const {
  // @@protoc_insertion_point(field_list:pb.TDestinyNotify.DestinyArr)
  return destinyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDestinySlab >*
TDestinyNotify::mutable_destinyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDestinyNotify.DestinyArr)
  return &destinyarr_;
}

// -------------------------------------------------------------------

// TDestinyInlayReq

// optional uint32 StoneId = 1;
inline bool TDestinyInlayReq::has_stoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDestinyInlayReq::set_has_stoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDestinyInlayReq::clear_has_stoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDestinyInlayReq::clear_stoneid() {
  stoneid_ = 0u;
  clear_has_stoneid();
}
inline ::google::protobuf::uint32 TDestinyInlayReq::stoneid() const {
  // @@protoc_insertion_point(field_get:pb.TDestinyInlayReq.StoneId)
  return stoneid_;
}
inline void TDestinyInlayReq::set_stoneid(::google::protobuf::uint32 value) {
  set_has_stoneid();
  stoneid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDestinyInlayReq.StoneId)
}

// -------------------------------------------------------------------

// TDestinyActivateSlabReq

// optional uint32 SlabId = 1;
inline bool TDestinyActivateSlabReq::has_slabid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDestinyActivateSlabReq::set_has_slabid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDestinyActivateSlabReq::clear_has_slabid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDestinyActivateSlabReq::clear_slabid() {
  slabid_ = 0u;
  clear_has_slabid();
}
inline ::google::protobuf::uint32 TDestinyActivateSlabReq::slabid() const {
  // @@protoc_insertion_point(field_get:pb.TDestinyActivateSlabReq.SlabId)
  return slabid_;
}
inline void TDestinyActivateSlabReq::set_slabid(::google::protobuf::uint32 value) {
  set_has_slabid();
  slabid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDestinyActivateSlabReq.SlabId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EDestinySlabStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EDestinySlabStatus>() {
  return ::pb::EDestinySlabStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fDestiny_2eproto__INCLUDED
