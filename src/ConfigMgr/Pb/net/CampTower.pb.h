// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CampTower.proto

#ifndef PROTOBUF_net_2fCampTower_2eproto__INCLUDED
#define PROTOBUF_net_2fCampTower_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
#include "net/Battle.pb.h"
#include "net/CommonReward.pb.h"
#include "net/LocalBattleReport.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fCampTower_2eproto();
void protobuf_AssignDesc_net_2fCampTower_2eproto();
void protobuf_ShutdownFile_net_2fCampTower_2eproto();

class TCampTowerInfo;
class TCampTowerRandAttr;
class TCampTowerGetInfoRsp;
class TCampTowerStartChallengeReq;
class TCampTowerStartChallengeRsp;
class TCampTowerReportChallengeReq;
class TCampTowerReportChallengeRsp;
class TCampTowerReport;
class TCampTowerGetReportInfoReq;
class TCampTowerGetReportInfoRsp;
class TCampTowerReceiveWelfareReq;
class TCampTowerReceiveWelfareRsp;
class TCampTowerPassedRankItem;
class TCampTowerGetCampRankReq;
class TCampTowerGetCampRankRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TCampTowerInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampTowerInfo : public ::google::protobuf::Message {
 public:
  TCampTowerInfo();
  virtual ~TCampTowerInfo();

  TCampTowerInfo(const TCampTowerInfo& from);

  inline TCampTowerInfo& operator=(const TCampTowerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampTowerInfo& default_instance();

  void Swap(TCampTowerInfo* other);

  // implements Message ----------------------------------------------

  TCampTowerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampTowerInfo& from);
  void MergeFrom(const TCampTowerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CampId = 1;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerInfo</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint32 PassedLayerId = 2;
  inline bool has_passedlayerid() const;
  inline void clear_passedlayerid();
  static const int kPassedLayerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerInfo</name>
  	<Function>
  		<name>passedlayerid</name>
  		<replaceName>PassedLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_passedlayerid</name>
  		<replaceName>PassedLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_passedlayerid</name>
  		<replaceName>PassedLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 passedlayerid() const;
  inline void set_passedlayerid(::google::protobuf::uint32 value);

  // optional uint32 CurPassedNum = 3;
  inline bool has_curpassednum() const;
  inline void clear_curpassednum();
  static const int kCurPassedNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerInfo</name>
  	<Function>
  		<name>curpassednum</name>
  		<replaceName>CurPassedNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curpassednum</name>
  		<replaceName>CurPassedNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curpassednum</name>
  		<replaceName>CurPassedNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curpassednum() const;
  inline void set_curpassednum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCampTowerInfo)
 private:
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_passedlayerid();
  inline void clear_has_passedlayerid();
  inline void set_has_curpassednum();
  inline void clear_has_curpassednum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 passedlayerid_;
  ::google::protobuf::uint32 curpassednum_;
  friend void  protobuf_AddDesc_net_2fCampTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCampTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampTower_2eproto();

  void InitAsDefaultInstance();
  static TCampTowerInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampTowerRandAttr</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampTowerRandAttr : public ::google::protobuf::Message {
 public:
  TCampTowerRandAttr();
  virtual ~TCampTowerRandAttr();

  TCampTowerRandAttr(const TCampTowerRandAttr& from);

  inline TCampTowerRandAttr& operator=(const TCampTowerRandAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampTowerRandAttr& default_instance();

  void Swap(TCampTowerRandAttr* other);

  // implements Message ----------------------------------------------

  TCampTowerRandAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampTowerRandAttr& from);
  void MergeFrom(const TCampTowerRandAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CampId = 1;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerRandAttr</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // repeated uint32 HtidArr = 2;
  inline int htidarr_size() const;
  inline void clear_htidarr();
  static const int kHtidArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerRandAttr</name>
  	<Function>
  		<name>htidarr</name>
  		<replaceName>HtidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_htidarr</name>
  		<replaceName>HtidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_htidarr</name>
  		<replaceName>HtidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htidarr</name>
  		<replaceName>HtidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>htidarr_size</name>
  		<replaceName>HtidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htidarr(int index) const;
  inline void set_htidarr(int index, ::google::protobuf::uint32 value);
  inline void add_htidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      htidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_htidarr();

  // @@protoc_insertion_point(class_scope:pb.TCampTowerRandAttr)
 private:
  inline void set_has_campid();
  inline void clear_has_campid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > htidarr_;
  ::google::protobuf::uint32 campid_;
  friend void  protobuf_AddDesc_net_2fCampTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCampTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampTower_2eproto();

  void InitAsDefaultInstance();
  static TCampTowerRandAttr* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampTowerGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampTowerGetInfoRsp : public ::google::protobuf::Message {
 public:
  TCampTowerGetInfoRsp();
  virtual ~TCampTowerGetInfoRsp();

  TCampTowerGetInfoRsp(const TCampTowerGetInfoRsp& from);

  inline TCampTowerGetInfoRsp& operator=(const TCampTowerGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampTowerGetInfoRsp& default_instance();

  void Swap(TCampTowerGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TCampTowerGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampTowerGetInfoRsp& from);
  void MergeFrom(const TCampTowerGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCampTowerInfo TowerInfoArr = 1;
  inline int towerinfoarr_size() const;
  inline void clear_towerinfoarr();
  static const int kTowerInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerGetInfoRsp</name>
  	<Function>
  		<name>towerinfoarr</name>
  		<replaceName>TowerInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_towerinfoarr</name>
  		<replaceName>TowerInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_towerinfoarr</name>
  		<replaceName>TowerInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_towerinfoarr</name>
  		<replaceName>TowerInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>towerinfoarr_size</name>
  		<replaceName>TowerInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCampTowerInfo& towerinfoarr(int index) const;
  inline ::pb::TCampTowerInfo* mutable_towerinfoarr(int index);
  inline ::pb::TCampTowerInfo* add_towerinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCampTowerInfo >&
      towerinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCampTowerInfo >*
      mutable_towerinfoarr();

  // repeated uint32 ReceiveWelfareArr = 2;
  inline int receivewelfarearr_size() const;
  inline void clear_receivewelfarearr();
  static const int kReceiveWelfareArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerGetInfoRsp</name>
  	<Function>
  		<name>receivewelfarearr</name>
  		<replaceName>ReceiveWelfareArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_receivewelfarearr</name>
  		<replaceName>ReceiveWelfareArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_receivewelfarearr</name>
  		<replaceName>ReceiveWelfareArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivewelfarearr</name>
  		<replaceName>ReceiveWelfareArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>receivewelfarearr_size</name>
  		<replaceName>ReceiveWelfareArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 receivewelfarearr(int index) const;
  inline void set_receivewelfarearr(int index, ::google::protobuf::uint32 value);
  inline void add_receivewelfarearr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      receivewelfarearr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_receivewelfarearr();

  // repeated .pb.TCampTowerRandAttr RandAttrArr = 3;
  inline int randattrarr_size() const;
  inline void clear_randattrarr();
  static const int kRandAttrArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerGetInfoRsp</name>
  	<Function>
  		<name>randattrarr</name>
  		<replaceName>RandAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_randattrarr</name>
  		<replaceName>RandAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_randattrarr</name>
  		<replaceName>RandAttrArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_randattrarr</name>
  		<replaceName>RandAttrArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>randattrarr_size</name>
  		<replaceName>RandAttrArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCampTowerRandAttr& randattrarr(int index) const;
  inline ::pb::TCampTowerRandAttr* mutable_randattrarr(int index);
  inline ::pb::TCampTowerRandAttr* add_randattrarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCampTowerRandAttr >&
      randattrarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCampTowerRandAttr >*
      mutable_randattrarr();

  // @@protoc_insertion_point(class_scope:pb.TCampTowerGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCampTowerInfo > towerinfoarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > receivewelfarearr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCampTowerRandAttr > randattrarr_;
  friend void  protobuf_AddDesc_net_2fCampTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCampTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampTower_2eproto();

  void InitAsDefaultInstance();
  static TCampTowerGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampTowerStartChallengeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampTowerStartChallengeReq : public ::google::protobuf::Message {
 public:
  TCampTowerStartChallengeReq();
  virtual ~TCampTowerStartChallengeReq();

  TCampTowerStartChallengeReq(const TCampTowerStartChallengeReq& from);

  inline TCampTowerStartChallengeReq& operator=(const TCampTowerStartChallengeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampTowerStartChallengeReq& default_instance();

  void Swap(TCampTowerStartChallengeReq* other);

  // implements Message ----------------------------------------------

  TCampTowerStartChallengeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampTowerStartChallengeReq& from);
  void MergeFrom(const TCampTowerStartChallengeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CampId = 1;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerStartChallengeReq</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint32 LayerId = 2;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerStartChallengeReq</name>
  	<Function>
  		<name>layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerid() const;
  inline void set_layerid(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerStartChallengeReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TCampTowerStartChallengeReq)
 private:
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_layerid();
  inline void clear_has_layerid();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 layerid_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  friend void  protobuf_AddDesc_net_2fCampTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCampTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampTower_2eproto();

  void InitAsDefaultInstance();
  static TCampTowerStartChallengeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampTowerStartChallengeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampTowerStartChallengeRsp : public ::google::protobuf::Message {
 public:
  TCampTowerStartChallengeRsp();
  virtual ~TCampTowerStartChallengeRsp();

  TCampTowerStartChallengeRsp(const TCampTowerStartChallengeRsp& from);

  inline TCampTowerStartChallengeRsp& operator=(const TCampTowerStartChallengeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampTowerStartChallengeRsp& default_instance();

  void Swap(TCampTowerStartChallengeRsp* other);

  // implements Message ----------------------------------------------

  TCampTowerStartChallengeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampTowerStartChallengeRsp& from);
  void MergeFrom(const TCampTowerStartChallengeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleArgs BattleArgs = 1;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerStartChallengeRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TCampTowerStartChallengeRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleArgs* battleargs_;
  friend void  protobuf_AddDesc_net_2fCampTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCampTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampTower_2eproto();

  void InitAsDefaultInstance();
  static TCampTowerStartChallengeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampTowerReportChallengeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampTowerReportChallengeReq : public ::google::protobuf::Message {
 public:
  TCampTowerReportChallengeReq();
  virtual ~TCampTowerReportChallengeReq();

  TCampTowerReportChallengeReq(const TCampTowerReportChallengeReq& from);

  inline TCampTowerReportChallengeReq& operator=(const TCampTowerReportChallengeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampTowerReportChallengeReq& default_instance();

  void Swap(TCampTowerReportChallengeReq* other);

  // implements Message ----------------------------------------------

  TCampTowerReportChallengeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampTowerReportChallengeReq& from);
  void MergeFrom(const TCampTowerReportChallengeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CampId = 1;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerReportChallengeReq</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint32 LayerId = 2;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerReportChallengeReq</name>
  	<Function>
  		<name>layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerid() const;
  inline void set_layerid(::google::protobuf::uint32 value);

  // optional .pb.TBattleResult BattleReport = 3;
  inline bool has_battlereport() const;
  inline void clear_battlereport();
  static const int kBattleReportFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerReportChallengeReq</name>
  	<Function>
  		<name>battlereport</name>
  		<replaceName>BattleReport</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlereport</name>
  		<replaceName>BattleReport</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlereport</name>
  		<replaceName>BattleReport</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlereport</name>
  		<replaceName>BattleReport</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battlereport() const;
  inline ::pb::TBattleResult* mutable_battlereport();
  inline ::pb::TBattleResult* release_battlereport();
  inline void set_allocated_battlereport(::pb::TBattleResult* battlereport);

  // @@protoc_insertion_point(class_scope:pb.TCampTowerReportChallengeReq)
 private:
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_layerid();
  inline void clear_has_layerid();
  inline void set_has_battlereport();
  inline void clear_has_battlereport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 layerid_;
  ::pb::TBattleResult* battlereport_;
  friend void  protobuf_AddDesc_net_2fCampTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCampTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampTower_2eproto();

  void InitAsDefaultInstance();
  static TCampTowerReportChallengeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampTowerReportChallengeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampTowerReportChallengeRsp : public ::google::protobuf::Message {
 public:
  TCampTowerReportChallengeRsp();
  virtual ~TCampTowerReportChallengeRsp();

  TCampTowerReportChallengeRsp(const TCampTowerReportChallengeRsp& from);

  inline TCampTowerReportChallengeRsp& operator=(const TCampTowerReportChallengeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampTowerReportChallengeRsp& default_instance();

  void Swap(TCampTowerReportChallengeRsp* other);

  // implements Message ----------------------------------------------

  TCampTowerReportChallengeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampTowerReportChallengeRsp& from);
  void MergeFrom(const TCampTowerReportChallengeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsWin = 1;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerReportChallengeRsp</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool iswin() const;
  inline void set_iswin(bool value);

  // optional uint32 PassedLayerId = 2;
  inline bool has_passedlayerid() const;
  inline void clear_passedlayerid();
  static const int kPassedLayerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerReportChallengeRsp</name>
  	<Function>
  		<name>passedlayerid</name>
  		<replaceName>PassedLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_passedlayerid</name>
  		<replaceName>PassedLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_passedlayerid</name>
  		<replaceName>PassedLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 passedlayerid() const;
  inline void set_passedlayerid(::google::protobuf::uint32 value);

  // optional uint32 CurPassedNum = 3;
  inline bool has_curpassednum() const;
  inline void clear_curpassednum();
  static const int kCurPassedNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerReportChallengeRsp</name>
  	<Function>
  		<name>curpassednum</name>
  		<replaceName>CurPassedNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curpassednum</name>
  		<replaceName>CurPassedNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curpassednum</name>
  		<replaceName>CurPassedNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curpassednum() const;
  inline void set_curpassednum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCampTowerReportChallengeRsp)
 private:
  inline void set_has_iswin();
  inline void clear_has_iswin();
  inline void set_has_passedlayerid();
  inline void clear_has_passedlayerid();
  inline void set_has_curpassednum();
  inline void clear_has_curpassednum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool iswin_;
  ::google::protobuf::uint32 passedlayerid_;
  ::google::protobuf::uint32 curpassednum_;
  friend void  protobuf_AddDesc_net_2fCampTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCampTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampTower_2eproto();

  void InitAsDefaultInstance();
  static TCampTowerReportChallengeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampTowerReport</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampTowerReport : public ::google::protobuf::Message {
 public:
  TCampTowerReport();
  virtual ~TCampTowerReport();

  TCampTowerReport(const TCampTowerReport& from);

  inline TCampTowerReport& operator=(const TCampTowerReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampTowerReport& default_instance();

  void Swap(TCampTowerReport* other);

  // implements Message ----------------------------------------------

  TCampTowerReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampTowerReport& from);
  void MergeFrom(const TCampTowerReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ReportId = 1;
  inline bool has_reportid() const;
  inline void clear_reportid();
  static const int kReportIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerReport</name>
  	<Function>
  		<name>reportid</name>
  		<replaceName>ReportId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reportid</name>
  		<replaceName>ReportId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reportid</name>
  		<replaceName>ReportId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 reportid() const;
  inline void set_reportid(::google::protobuf::uint64 value);

  // optional uint64 PassTime = 2;
  inline bool has_passtime() const;
  inline void clear_passtime();
  static const int kPassTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerReport</name>
  	<Function>
  		<name>passtime</name>
  		<replaceName>PassTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_passtime</name>
  		<replaceName>PassTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_passtime</name>
  		<replaceName>PassTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 passtime() const;
  inline void set_passtime(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerReport</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // @@protoc_insertion_point(class_scope:pb.TCampTowerReport)
 private:
  inline void set_has_reportid();
  inline void clear_has_reportid();
  inline void set_has_passtime();
  inline void clear_has_passtime();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 reportid_;
  ::google::protobuf::uint64 passtime_;
  ::pb::TUserSimpleInfo* userinfo_;
  friend void  protobuf_AddDesc_net_2fCampTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCampTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampTower_2eproto();

  void InitAsDefaultInstance();
  static TCampTowerReport* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampTowerGetReportInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampTowerGetReportInfoReq : public ::google::protobuf::Message {
 public:
  TCampTowerGetReportInfoReq();
  virtual ~TCampTowerGetReportInfoReq();

  TCampTowerGetReportInfoReq(const TCampTowerGetReportInfoReq& from);

  inline TCampTowerGetReportInfoReq& operator=(const TCampTowerGetReportInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampTowerGetReportInfoReq& default_instance();

  void Swap(TCampTowerGetReportInfoReq* other);

  // implements Message ----------------------------------------------

  TCampTowerGetReportInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampTowerGetReportInfoReq& from);
  void MergeFrom(const TCampTowerGetReportInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CampId = 1;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerGetReportInfoReq</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint32 LayerId = 2;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerGetReportInfoReq</name>
  	<Function>
  		<name>layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerid() const;
  inline void set_layerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCampTowerGetReportInfoReq)
 private:
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_layerid();
  inline void clear_has_layerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 layerid_;
  friend void  protobuf_AddDesc_net_2fCampTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCampTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampTower_2eproto();

  void InitAsDefaultInstance();
  static TCampTowerGetReportInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampTowerGetReportInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampTowerGetReportInfoRsp : public ::google::protobuf::Message {
 public:
  TCampTowerGetReportInfoRsp();
  virtual ~TCampTowerGetReportInfoRsp();

  TCampTowerGetReportInfoRsp(const TCampTowerGetReportInfoRsp& from);

  inline TCampTowerGetReportInfoRsp& operator=(const TCampTowerGetReportInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampTowerGetReportInfoRsp& default_instance();

  void Swap(TCampTowerGetReportInfoRsp* other);

  // implements Message ----------------------------------------------

  TCampTowerGetReportInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampTowerGetReportInfoRsp& from);
  void MergeFrom(const TCampTowerGetReportInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
  inline int reportarr_size() const;
  inline void clear_reportarr();
  static const int kReportArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerGetReportInfoRsp</name>
  	<Function>
  		<name>reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>reportarr_size</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLocalBattleReportSimpleInfo& reportarr(int index) const;
  inline ::pb::TLocalBattleReportSimpleInfo* mutable_reportarr(int index);
  inline ::pb::TLocalBattleReportSimpleInfo* add_reportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
      reportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
      mutable_reportarr();

  // repeated .pb.TLocalBattleReportSimpleInfo RecentReportArr = 2;
  inline int recentreportarr_size() const;
  inline void clear_recentreportarr();
  static const int kRecentReportArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerGetReportInfoRsp</name>
  	<Function>
  		<name>recentreportarr</name>
  		<replaceName>RecentReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recentreportarr</name>
  		<replaceName>RecentReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recentreportarr</name>
  		<replaceName>RecentReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recentreportarr</name>
  		<replaceName>RecentReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recentreportarr_size</name>
  		<replaceName>RecentReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLocalBattleReportSimpleInfo& recentreportarr(int index) const;
  inline ::pb::TLocalBattleReportSimpleInfo* mutable_recentreportarr(int index);
  inline ::pb::TLocalBattleReportSimpleInfo* add_recentreportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
      recentreportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
      mutable_recentreportarr();

  // repeated .pb.TLocalBattleReportSimpleInfo ExtremeReportArr = 3;
  inline int extremereportarr_size() const;
  inline void clear_extremereportarr();
  static const int kExtremeReportArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerGetReportInfoRsp</name>
  	<Function>
  		<name>extremereportarr</name>
  		<replaceName>ExtremeReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_extremereportarr</name>
  		<replaceName>ExtremeReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_extremereportarr</name>
  		<replaceName>ExtremeReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extremereportarr</name>
  		<replaceName>ExtremeReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>extremereportarr_size</name>
  		<replaceName>ExtremeReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLocalBattleReportSimpleInfo& extremereportarr(int index) const;
  inline ::pb::TLocalBattleReportSimpleInfo* mutable_extremereportarr(int index);
  inline ::pb::TLocalBattleReportSimpleInfo* add_extremereportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
      extremereportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
      mutable_extremereportarr();

  // @@protoc_insertion_point(class_scope:pb.TCampTowerGetReportInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo > reportarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo > recentreportarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo > extremereportarr_;
  friend void  protobuf_AddDesc_net_2fCampTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCampTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampTower_2eproto();

  void InitAsDefaultInstance();
  static TCampTowerGetReportInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampTowerReceiveWelfareReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampTowerReceiveWelfareReq : public ::google::protobuf::Message {
 public:
  TCampTowerReceiveWelfareReq();
  virtual ~TCampTowerReceiveWelfareReq();

  TCampTowerReceiveWelfareReq(const TCampTowerReceiveWelfareReq& from);

  inline TCampTowerReceiveWelfareReq& operator=(const TCampTowerReceiveWelfareReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampTowerReceiveWelfareReq& default_instance();

  void Swap(TCampTowerReceiveWelfareReq* other);

  // implements Message ----------------------------------------------

  TCampTowerReceiveWelfareReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampTowerReceiveWelfareReq& from);
  void MergeFrom(const TCampTowerReceiveWelfareReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 WelfareId = 1;
  inline bool has_welfareid() const;
  inline void clear_welfareid();
  static const int kWelfareIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerReceiveWelfareReq</name>
  	<Function>
  		<name>welfareid</name>
  		<replaceName>WelfareId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_welfareid</name>
  		<replaceName>WelfareId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_welfareid</name>
  		<replaceName>WelfareId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 welfareid() const;
  inline void set_welfareid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCampTowerReceiveWelfareReq)
 private:
  inline void set_has_welfareid();
  inline void clear_has_welfareid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 welfareid_;
  friend void  protobuf_AddDesc_net_2fCampTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCampTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampTower_2eproto();

  void InitAsDefaultInstance();
  static TCampTowerReceiveWelfareReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampTowerReceiveWelfareRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampTowerReceiveWelfareRsp : public ::google::protobuf::Message {
 public:
  TCampTowerReceiveWelfareRsp();
  virtual ~TCampTowerReceiveWelfareRsp();

  TCampTowerReceiveWelfareRsp(const TCampTowerReceiveWelfareRsp& from);

  inline TCampTowerReceiveWelfareRsp& operator=(const TCampTowerReceiveWelfareRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampTowerReceiveWelfareRsp& default_instance();

  void Swap(TCampTowerReceiveWelfareRsp* other);

  // implements Message ----------------------------------------------

  TCampTowerReceiveWelfareRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampTowerReceiveWelfareRsp& from);
  void MergeFrom(const TCampTowerReceiveWelfareRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerReceiveWelfareRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TCampTowerReceiveWelfareRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fCampTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCampTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampTower_2eproto();

  void InitAsDefaultInstance();
  static TCampTowerReceiveWelfareRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampTowerPassedRankItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampTowerPassedRankItem : public ::google::protobuf::Message {
 public:
  TCampTowerPassedRankItem();
  virtual ~TCampTowerPassedRankItem();

  TCampTowerPassedRankItem(const TCampTowerPassedRankItem& from);

  inline TCampTowerPassedRankItem& operator=(const TCampTowerPassedRankItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampTowerPassedRankItem& default_instance();

  void Swap(TCampTowerPassedRankItem* other);

  // implements Message ----------------------------------------------

  TCampTowerPassedRankItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampTowerPassedRankItem& from);
  void MergeFrom(const TCampTowerPassedRankItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerPassedRankItem</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 PassedLayerId = 2;
  inline bool has_passedlayerid() const;
  inline void clear_passedlayerid();
  static const int kPassedLayerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerPassedRankItem</name>
  	<Function>
  		<name>passedlayerid</name>
  		<replaceName>PassedLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_passedlayerid</name>
  		<replaceName>PassedLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_passedlayerid</name>
  		<replaceName>PassedLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 passedlayerid() const;
  inline void set_passedlayerid(::google::protobuf::uint32 value);

  // optional uint64 PassedTime = 3;
  inline bool has_passedtime() const;
  inline void clear_passedtime();
  static const int kPassedTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerPassedRankItem</name>
  	<Function>
  		<name>passedtime</name>
  		<replaceName>PassedTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_passedtime</name>
  		<replaceName>PassedTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_passedtime</name>
  		<replaceName>PassedTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 passedtime() const;
  inline void set_passedtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCampTowerPassedRankItem)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_passedlayerid();
  inline void clear_has_passedlayerid();
  inline void set_has_passedtime();
  inline void clear_has_passedtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 passedtime_;
  ::google::protobuf::uint32 passedlayerid_;
  friend void  protobuf_AddDesc_net_2fCampTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCampTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampTower_2eproto();

  void InitAsDefaultInstance();
  static TCampTowerPassedRankItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampTowerGetCampRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampTowerGetCampRankReq : public ::google::protobuf::Message {
 public:
  TCampTowerGetCampRankReq();
  virtual ~TCampTowerGetCampRankReq();

  TCampTowerGetCampRankReq(const TCampTowerGetCampRankReq& from);

  inline TCampTowerGetCampRankReq& operator=(const TCampTowerGetCampRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampTowerGetCampRankReq& default_instance();

  void Swap(TCampTowerGetCampRankReq* other);

  // implements Message ----------------------------------------------

  TCampTowerGetCampRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampTowerGetCampRankReq& from);
  void MergeFrom(const TCampTowerGetCampRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CampId = 1;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerGetCampRankReq</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional int32 Offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerGetCampRankReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional int32 Limit = 3;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerGetCampRankReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TCampTowerGetCampRankReq)
 private:
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 limit_;
  friend void  protobuf_AddDesc_net_2fCampTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCampTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampTower_2eproto();

  void InitAsDefaultInstance();
  static TCampTowerGetCampRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCampTowerGetCampRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CampTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCampTowerGetCampRankRsp : public ::google::protobuf::Message {
 public:
  TCampTowerGetCampRankRsp();
  virtual ~TCampTowerGetCampRankRsp();

  TCampTowerGetCampRankRsp(const TCampTowerGetCampRankRsp& from);

  inline TCampTowerGetCampRankRsp& operator=(const TCampTowerGetCampRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCampTowerGetCampRankRsp& default_instance();

  void Swap(TCampTowerGetCampRankRsp* other);

  // implements Message ----------------------------------------------

  TCampTowerGetCampRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCampTowerGetCampRankRsp& from);
  void MergeFrom(const TCampTowerGetCampRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCampTowerPassedRankItem RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerGetCampRankRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCampTowerPassedRankItem& rankarr(int index) const;
  inline ::pb::TCampTowerPassedRankItem* mutable_rankarr(int index);
  inline ::pb::TCampTowerPassedRankItem* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCampTowerPassedRankItem >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCampTowerPassedRankItem >*
      mutable_rankarr();

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCampTowerGetCampRankRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TCampTowerGetCampRankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCampTowerPassedRankItem > rankarr_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fCampTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCampTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCampTower_2eproto();

  void InitAsDefaultInstance();
  static TCampTowerGetCampRankRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TCampTowerInfo

// optional uint32 CampId = 1;
inline bool TCampTowerInfo::has_campid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampTowerInfo::set_has_campid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampTowerInfo::clear_has_campid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampTowerInfo::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCampTowerInfo::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerInfo.CampId)
  return campid_;
}
inline void TCampTowerInfo::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerInfo.CampId)
}

// optional uint32 PassedLayerId = 2;
inline bool TCampTowerInfo::has_passedlayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCampTowerInfo::set_has_passedlayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCampTowerInfo::clear_has_passedlayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCampTowerInfo::clear_passedlayerid() {
  passedlayerid_ = 0u;
  clear_has_passedlayerid();
}
inline ::google::protobuf::uint32 TCampTowerInfo::passedlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerInfo.PassedLayerId)
  return passedlayerid_;
}
inline void TCampTowerInfo::set_passedlayerid(::google::protobuf::uint32 value) {
  set_has_passedlayerid();
  passedlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerInfo.PassedLayerId)
}

// optional uint32 CurPassedNum = 3;
inline bool TCampTowerInfo::has_curpassednum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCampTowerInfo::set_has_curpassednum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCampTowerInfo::clear_has_curpassednum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCampTowerInfo::clear_curpassednum() {
  curpassednum_ = 0u;
  clear_has_curpassednum();
}
inline ::google::protobuf::uint32 TCampTowerInfo::curpassednum() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerInfo.CurPassedNum)
  return curpassednum_;
}
inline void TCampTowerInfo::set_curpassednum(::google::protobuf::uint32 value) {
  set_has_curpassednum();
  curpassednum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerInfo.CurPassedNum)
}

// -------------------------------------------------------------------

// TCampTowerRandAttr

// optional uint32 CampId = 1;
inline bool TCampTowerRandAttr::has_campid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampTowerRandAttr::set_has_campid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampTowerRandAttr::clear_has_campid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampTowerRandAttr::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCampTowerRandAttr::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerRandAttr.CampId)
  return campid_;
}
inline void TCampTowerRandAttr::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerRandAttr.CampId)
}

// repeated uint32 HtidArr = 2;
inline int TCampTowerRandAttr::htidarr_size() const {
  return htidarr_.size();
}
inline void TCampTowerRandAttr::clear_htidarr() {
  htidarr_.Clear();
}
inline ::google::protobuf::uint32 TCampTowerRandAttr::htidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerRandAttr.HtidArr)
  return htidarr_.Get(index);
}
inline void TCampTowerRandAttr::set_htidarr(int index, ::google::protobuf::uint32 value) {
  htidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCampTowerRandAttr.HtidArr)
}
inline void TCampTowerRandAttr::add_htidarr(::google::protobuf::uint32 value) {
  htidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCampTowerRandAttr.HtidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TCampTowerRandAttr::htidarr() const {
  // @@protoc_insertion_point(field_list:pb.TCampTowerRandAttr.HtidArr)
  return htidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TCampTowerRandAttr::mutable_htidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCampTowerRandAttr.HtidArr)
  return &htidarr_;
}

// -------------------------------------------------------------------

// TCampTowerGetInfoRsp

// repeated .pb.TCampTowerInfo TowerInfoArr = 1;
inline int TCampTowerGetInfoRsp::towerinfoarr_size() const {
  return towerinfoarr_.size();
}
inline void TCampTowerGetInfoRsp::clear_towerinfoarr() {
  towerinfoarr_.Clear();
}
inline const ::pb::TCampTowerInfo& TCampTowerGetInfoRsp::towerinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerGetInfoRsp.TowerInfoArr)
  return towerinfoarr_.Get(index);
}
inline ::pb::TCampTowerInfo* TCampTowerGetInfoRsp::mutable_towerinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCampTowerGetInfoRsp.TowerInfoArr)
  return towerinfoarr_.Mutable(index);
}
inline ::pb::TCampTowerInfo* TCampTowerGetInfoRsp::add_towerinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCampTowerGetInfoRsp.TowerInfoArr)
  return towerinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCampTowerInfo >&
TCampTowerGetInfoRsp::towerinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCampTowerGetInfoRsp.TowerInfoArr)
  return towerinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCampTowerInfo >*
TCampTowerGetInfoRsp::mutable_towerinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCampTowerGetInfoRsp.TowerInfoArr)
  return &towerinfoarr_;
}

// repeated uint32 ReceiveWelfareArr = 2;
inline int TCampTowerGetInfoRsp::receivewelfarearr_size() const {
  return receivewelfarearr_.size();
}
inline void TCampTowerGetInfoRsp::clear_receivewelfarearr() {
  receivewelfarearr_.Clear();
}
inline ::google::protobuf::uint32 TCampTowerGetInfoRsp::receivewelfarearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerGetInfoRsp.ReceiveWelfareArr)
  return receivewelfarearr_.Get(index);
}
inline void TCampTowerGetInfoRsp::set_receivewelfarearr(int index, ::google::protobuf::uint32 value) {
  receivewelfarearr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCampTowerGetInfoRsp.ReceiveWelfareArr)
}
inline void TCampTowerGetInfoRsp::add_receivewelfarearr(::google::protobuf::uint32 value) {
  receivewelfarearr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCampTowerGetInfoRsp.ReceiveWelfareArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TCampTowerGetInfoRsp::receivewelfarearr() const {
  // @@protoc_insertion_point(field_list:pb.TCampTowerGetInfoRsp.ReceiveWelfareArr)
  return receivewelfarearr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TCampTowerGetInfoRsp::mutable_receivewelfarearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCampTowerGetInfoRsp.ReceiveWelfareArr)
  return &receivewelfarearr_;
}

// repeated .pb.TCampTowerRandAttr RandAttrArr = 3;
inline int TCampTowerGetInfoRsp::randattrarr_size() const {
  return randattrarr_.size();
}
inline void TCampTowerGetInfoRsp::clear_randattrarr() {
  randattrarr_.Clear();
}
inline const ::pb::TCampTowerRandAttr& TCampTowerGetInfoRsp::randattrarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerGetInfoRsp.RandAttrArr)
  return randattrarr_.Get(index);
}
inline ::pb::TCampTowerRandAttr* TCampTowerGetInfoRsp::mutable_randattrarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCampTowerGetInfoRsp.RandAttrArr)
  return randattrarr_.Mutable(index);
}
inline ::pb::TCampTowerRandAttr* TCampTowerGetInfoRsp::add_randattrarr() {
  // @@protoc_insertion_point(field_add:pb.TCampTowerGetInfoRsp.RandAttrArr)
  return randattrarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCampTowerRandAttr >&
TCampTowerGetInfoRsp::randattrarr() const {
  // @@protoc_insertion_point(field_list:pb.TCampTowerGetInfoRsp.RandAttrArr)
  return randattrarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCampTowerRandAttr >*
TCampTowerGetInfoRsp::mutable_randattrarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCampTowerGetInfoRsp.RandAttrArr)
  return &randattrarr_;
}

// -------------------------------------------------------------------

// TCampTowerStartChallengeReq

// optional uint32 CampId = 1;
inline bool TCampTowerStartChallengeReq::has_campid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampTowerStartChallengeReq::set_has_campid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampTowerStartChallengeReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampTowerStartChallengeReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCampTowerStartChallengeReq::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerStartChallengeReq.CampId)
  return campid_;
}
inline void TCampTowerStartChallengeReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerStartChallengeReq.CampId)
}

// optional uint32 LayerId = 2;
inline bool TCampTowerStartChallengeReq::has_layerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCampTowerStartChallengeReq::set_has_layerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCampTowerStartChallengeReq::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCampTowerStartChallengeReq::clear_layerid() {
  layerid_ = 0u;
  clear_has_layerid();
}
inline ::google::protobuf::uint32 TCampTowerStartChallengeReq::layerid() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerStartChallengeReq.LayerId)
  return layerid_;
}
inline void TCampTowerStartChallengeReq::set_layerid(::google::protobuf::uint32 value) {
  set_has_layerid();
  layerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerStartChallengeReq.LayerId)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 3;
inline bool TCampTowerStartChallengeReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCampTowerStartChallengeReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCampTowerStartChallengeReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCampTowerStartChallengeReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TCampTowerStartChallengeReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerStartChallengeReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TCampTowerStartChallengeReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TCampTowerStartChallengeReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TCampTowerStartChallengeReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TCampTowerStartChallengeReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCampTowerStartChallengeReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TCampTowerStartChallengeRsp

// optional .pb.TBattleArgs BattleArgs = 1;
inline bool TCampTowerStartChallengeRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampTowerStartChallengeRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampTowerStartChallengeRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampTowerStartChallengeRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TCampTowerStartChallengeRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerStartChallengeRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TCampTowerStartChallengeRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TCampTowerStartChallengeRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TCampTowerStartChallengeRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TCampTowerStartChallengeRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCampTowerStartChallengeRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TCampTowerReportChallengeReq

// optional uint32 CampId = 1;
inline bool TCampTowerReportChallengeReq::has_campid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampTowerReportChallengeReq::set_has_campid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampTowerReportChallengeReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampTowerReportChallengeReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCampTowerReportChallengeReq::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerReportChallengeReq.CampId)
  return campid_;
}
inline void TCampTowerReportChallengeReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerReportChallengeReq.CampId)
}

// optional uint32 LayerId = 2;
inline bool TCampTowerReportChallengeReq::has_layerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCampTowerReportChallengeReq::set_has_layerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCampTowerReportChallengeReq::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCampTowerReportChallengeReq::clear_layerid() {
  layerid_ = 0u;
  clear_has_layerid();
}
inline ::google::protobuf::uint32 TCampTowerReportChallengeReq::layerid() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerReportChallengeReq.LayerId)
  return layerid_;
}
inline void TCampTowerReportChallengeReq::set_layerid(::google::protobuf::uint32 value) {
  set_has_layerid();
  layerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerReportChallengeReq.LayerId)
}

// optional .pb.TBattleResult BattleReport = 3;
inline bool TCampTowerReportChallengeReq::has_battlereport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCampTowerReportChallengeReq::set_has_battlereport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCampTowerReportChallengeReq::clear_has_battlereport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCampTowerReportChallengeReq::clear_battlereport() {
  if (battlereport_ != NULL) battlereport_->::pb::TBattleResult::Clear();
  clear_has_battlereport();
}
inline const ::pb::TBattleResult& TCampTowerReportChallengeReq::battlereport() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerReportChallengeReq.BattleReport)
  return battlereport_ != NULL ? *battlereport_ : *default_instance_->battlereport_;
}
inline ::pb::TBattleResult* TCampTowerReportChallengeReq::mutable_battlereport() {
  set_has_battlereport();
  if (battlereport_ == NULL) battlereport_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TCampTowerReportChallengeReq.BattleReport)
  return battlereport_;
}
inline ::pb::TBattleResult* TCampTowerReportChallengeReq::release_battlereport() {
  clear_has_battlereport();
  ::pb::TBattleResult* temp = battlereport_;
  battlereport_ = NULL;
  return temp;
}
inline void TCampTowerReportChallengeReq::set_allocated_battlereport(::pb::TBattleResult* battlereport) {
  delete battlereport_;
  battlereport_ = battlereport;
  if (battlereport) {
    set_has_battlereport();
  } else {
    clear_has_battlereport();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCampTowerReportChallengeReq.BattleReport)
}

// -------------------------------------------------------------------

// TCampTowerReportChallengeRsp

// optional bool IsWin = 1;
inline bool TCampTowerReportChallengeRsp::has_iswin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampTowerReportChallengeRsp::set_has_iswin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampTowerReportChallengeRsp::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampTowerReportChallengeRsp::clear_iswin() {
  iswin_ = false;
  clear_has_iswin();
}
inline bool TCampTowerReportChallengeRsp::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerReportChallengeRsp.IsWin)
  return iswin_;
}
inline void TCampTowerReportChallengeRsp::set_iswin(bool value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerReportChallengeRsp.IsWin)
}

// optional uint32 PassedLayerId = 2;
inline bool TCampTowerReportChallengeRsp::has_passedlayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCampTowerReportChallengeRsp::set_has_passedlayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCampTowerReportChallengeRsp::clear_has_passedlayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCampTowerReportChallengeRsp::clear_passedlayerid() {
  passedlayerid_ = 0u;
  clear_has_passedlayerid();
}
inline ::google::protobuf::uint32 TCampTowerReportChallengeRsp::passedlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerReportChallengeRsp.PassedLayerId)
  return passedlayerid_;
}
inline void TCampTowerReportChallengeRsp::set_passedlayerid(::google::protobuf::uint32 value) {
  set_has_passedlayerid();
  passedlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerReportChallengeRsp.PassedLayerId)
}

// optional uint32 CurPassedNum = 3;
inline bool TCampTowerReportChallengeRsp::has_curpassednum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCampTowerReportChallengeRsp::set_has_curpassednum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCampTowerReportChallengeRsp::clear_has_curpassednum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCampTowerReportChallengeRsp::clear_curpassednum() {
  curpassednum_ = 0u;
  clear_has_curpassednum();
}
inline ::google::protobuf::uint32 TCampTowerReportChallengeRsp::curpassednum() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerReportChallengeRsp.CurPassedNum)
  return curpassednum_;
}
inline void TCampTowerReportChallengeRsp::set_curpassednum(::google::protobuf::uint32 value) {
  set_has_curpassednum();
  curpassednum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerReportChallengeRsp.CurPassedNum)
}

// -------------------------------------------------------------------

// TCampTowerReport

// optional uint64 ReportId = 1;
inline bool TCampTowerReport::has_reportid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampTowerReport::set_has_reportid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampTowerReport::clear_has_reportid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampTowerReport::clear_reportid() {
  reportid_ = GOOGLE_ULONGLONG(0);
  clear_has_reportid();
}
inline ::google::protobuf::uint64 TCampTowerReport::reportid() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerReport.ReportId)
  return reportid_;
}
inline void TCampTowerReport::set_reportid(::google::protobuf::uint64 value) {
  set_has_reportid();
  reportid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerReport.ReportId)
}

// optional uint64 PassTime = 2;
inline bool TCampTowerReport::has_passtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCampTowerReport::set_has_passtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCampTowerReport::clear_has_passtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCampTowerReport::clear_passtime() {
  passtime_ = GOOGLE_ULONGLONG(0);
  clear_has_passtime();
}
inline ::google::protobuf::uint64 TCampTowerReport::passtime() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerReport.PassTime)
  return passtime_;
}
inline void TCampTowerReport::set_passtime(::google::protobuf::uint64 value) {
  set_has_passtime();
  passtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerReport.PassTime)
}

// optional .pb.TUserSimpleInfo UserInfo = 3;
inline bool TCampTowerReport::has_userinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCampTowerReport::set_has_userinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCampTowerReport::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCampTowerReport::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TCampTowerReport::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerReport.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TCampTowerReport::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCampTowerReport.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TCampTowerReport::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TCampTowerReport::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCampTowerReport.UserInfo)
}

// -------------------------------------------------------------------

// TCampTowerGetReportInfoReq

// optional uint32 CampId = 1;
inline bool TCampTowerGetReportInfoReq::has_campid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampTowerGetReportInfoReq::set_has_campid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampTowerGetReportInfoReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampTowerGetReportInfoReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCampTowerGetReportInfoReq::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerGetReportInfoReq.CampId)
  return campid_;
}
inline void TCampTowerGetReportInfoReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerGetReportInfoReq.CampId)
}

// optional uint32 LayerId = 2;
inline bool TCampTowerGetReportInfoReq::has_layerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCampTowerGetReportInfoReq::set_has_layerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCampTowerGetReportInfoReq::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCampTowerGetReportInfoReq::clear_layerid() {
  layerid_ = 0u;
  clear_has_layerid();
}
inline ::google::protobuf::uint32 TCampTowerGetReportInfoReq::layerid() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerGetReportInfoReq.LayerId)
  return layerid_;
}
inline void TCampTowerGetReportInfoReq::set_layerid(::google::protobuf::uint32 value) {
  set_has_layerid();
  layerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerGetReportInfoReq.LayerId)
}

// -------------------------------------------------------------------

// TCampTowerGetReportInfoRsp

// repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
inline int TCampTowerGetReportInfoRsp::reportarr_size() const {
  return reportarr_.size();
}
inline void TCampTowerGetReportInfoRsp::clear_reportarr() {
  reportarr_.Clear();
}
inline const ::pb::TLocalBattleReportSimpleInfo& TCampTowerGetReportInfoRsp::reportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerGetReportInfoRsp.ReportArr)
  return reportarr_.Get(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TCampTowerGetReportInfoRsp::mutable_reportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCampTowerGetReportInfoRsp.ReportArr)
  return reportarr_.Mutable(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TCampTowerGetReportInfoRsp::add_reportarr() {
  // @@protoc_insertion_point(field_add:pb.TCampTowerGetReportInfoRsp.ReportArr)
  return reportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
TCampTowerGetReportInfoRsp::reportarr() const {
  // @@protoc_insertion_point(field_list:pb.TCampTowerGetReportInfoRsp.ReportArr)
  return reportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
TCampTowerGetReportInfoRsp::mutable_reportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCampTowerGetReportInfoRsp.ReportArr)
  return &reportarr_;
}

// repeated .pb.TLocalBattleReportSimpleInfo RecentReportArr = 2;
inline int TCampTowerGetReportInfoRsp::recentreportarr_size() const {
  return recentreportarr_.size();
}
inline void TCampTowerGetReportInfoRsp::clear_recentreportarr() {
  recentreportarr_.Clear();
}
inline const ::pb::TLocalBattleReportSimpleInfo& TCampTowerGetReportInfoRsp::recentreportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerGetReportInfoRsp.RecentReportArr)
  return recentreportarr_.Get(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TCampTowerGetReportInfoRsp::mutable_recentreportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCampTowerGetReportInfoRsp.RecentReportArr)
  return recentreportarr_.Mutable(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TCampTowerGetReportInfoRsp::add_recentreportarr() {
  // @@protoc_insertion_point(field_add:pb.TCampTowerGetReportInfoRsp.RecentReportArr)
  return recentreportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
TCampTowerGetReportInfoRsp::recentreportarr() const {
  // @@protoc_insertion_point(field_list:pb.TCampTowerGetReportInfoRsp.RecentReportArr)
  return recentreportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
TCampTowerGetReportInfoRsp::mutable_recentreportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCampTowerGetReportInfoRsp.RecentReportArr)
  return &recentreportarr_;
}

// repeated .pb.TLocalBattleReportSimpleInfo ExtremeReportArr = 3;
inline int TCampTowerGetReportInfoRsp::extremereportarr_size() const {
  return extremereportarr_.size();
}
inline void TCampTowerGetReportInfoRsp::clear_extremereportarr() {
  extremereportarr_.Clear();
}
inline const ::pb::TLocalBattleReportSimpleInfo& TCampTowerGetReportInfoRsp::extremereportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerGetReportInfoRsp.ExtremeReportArr)
  return extremereportarr_.Get(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TCampTowerGetReportInfoRsp::mutable_extremereportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCampTowerGetReportInfoRsp.ExtremeReportArr)
  return extremereportarr_.Mutable(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TCampTowerGetReportInfoRsp::add_extremereportarr() {
  // @@protoc_insertion_point(field_add:pb.TCampTowerGetReportInfoRsp.ExtremeReportArr)
  return extremereportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
TCampTowerGetReportInfoRsp::extremereportarr() const {
  // @@protoc_insertion_point(field_list:pb.TCampTowerGetReportInfoRsp.ExtremeReportArr)
  return extremereportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
TCampTowerGetReportInfoRsp::mutable_extremereportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCampTowerGetReportInfoRsp.ExtremeReportArr)
  return &extremereportarr_;
}

// -------------------------------------------------------------------

// TCampTowerReceiveWelfareReq

// optional uint32 WelfareId = 1;
inline bool TCampTowerReceiveWelfareReq::has_welfareid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampTowerReceiveWelfareReq::set_has_welfareid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampTowerReceiveWelfareReq::clear_has_welfareid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampTowerReceiveWelfareReq::clear_welfareid() {
  welfareid_ = 0u;
  clear_has_welfareid();
}
inline ::google::protobuf::uint32 TCampTowerReceiveWelfareReq::welfareid() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerReceiveWelfareReq.WelfareId)
  return welfareid_;
}
inline void TCampTowerReceiveWelfareReq::set_welfareid(::google::protobuf::uint32 value) {
  set_has_welfareid();
  welfareid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerReceiveWelfareReq.WelfareId)
}

// -------------------------------------------------------------------

// TCampTowerReceiveWelfareRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TCampTowerReceiveWelfareRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TCampTowerReceiveWelfareRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TCampTowerReceiveWelfareRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerReceiveWelfareRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TCampTowerReceiveWelfareRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCampTowerReceiveWelfareRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TCampTowerReceiveWelfareRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TCampTowerReceiveWelfareRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCampTowerReceiveWelfareRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TCampTowerReceiveWelfareRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCampTowerReceiveWelfareRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCampTowerReceiveWelfareRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TCampTowerPassedRankItem

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TCampTowerPassedRankItem::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampTowerPassedRankItem::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampTowerPassedRankItem::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampTowerPassedRankItem::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TCampTowerPassedRankItem::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerPassedRankItem.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TCampTowerPassedRankItem::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCampTowerPassedRankItem.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TCampTowerPassedRankItem::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TCampTowerPassedRankItem::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCampTowerPassedRankItem.UserInfo)
}

// optional uint32 PassedLayerId = 2;
inline bool TCampTowerPassedRankItem::has_passedlayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCampTowerPassedRankItem::set_has_passedlayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCampTowerPassedRankItem::clear_has_passedlayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCampTowerPassedRankItem::clear_passedlayerid() {
  passedlayerid_ = 0u;
  clear_has_passedlayerid();
}
inline ::google::protobuf::uint32 TCampTowerPassedRankItem::passedlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerPassedRankItem.PassedLayerId)
  return passedlayerid_;
}
inline void TCampTowerPassedRankItem::set_passedlayerid(::google::protobuf::uint32 value) {
  set_has_passedlayerid();
  passedlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerPassedRankItem.PassedLayerId)
}

// optional uint64 PassedTime = 3;
inline bool TCampTowerPassedRankItem::has_passedtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCampTowerPassedRankItem::set_has_passedtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCampTowerPassedRankItem::clear_has_passedtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCampTowerPassedRankItem::clear_passedtime() {
  passedtime_ = GOOGLE_ULONGLONG(0);
  clear_has_passedtime();
}
inline ::google::protobuf::uint64 TCampTowerPassedRankItem::passedtime() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerPassedRankItem.PassedTime)
  return passedtime_;
}
inline void TCampTowerPassedRankItem::set_passedtime(::google::protobuf::uint64 value) {
  set_has_passedtime();
  passedtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerPassedRankItem.PassedTime)
}

// -------------------------------------------------------------------

// TCampTowerGetCampRankReq

// optional uint32 CampId = 1;
inline bool TCampTowerGetCampRankReq::has_campid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCampTowerGetCampRankReq::set_has_campid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCampTowerGetCampRankReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCampTowerGetCampRankReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCampTowerGetCampRankReq::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerGetCampRankReq.CampId)
  return campid_;
}
inline void TCampTowerGetCampRankReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerGetCampRankReq.CampId)
}

// optional int32 Offset = 2;
inline bool TCampTowerGetCampRankReq::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCampTowerGetCampRankReq::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCampTowerGetCampRankReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCampTowerGetCampRankReq::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 TCampTowerGetCampRankReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerGetCampRankReq.Offset)
  return offset_;
}
inline void TCampTowerGetCampRankReq::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerGetCampRankReq.Offset)
}

// optional int32 Limit = 3;
inline bool TCampTowerGetCampRankReq::has_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCampTowerGetCampRankReq::set_has_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCampTowerGetCampRankReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCampTowerGetCampRankReq::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 TCampTowerGetCampRankReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerGetCampRankReq.Limit)
  return limit_;
}
inline void TCampTowerGetCampRankReq::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerGetCampRankReq.Limit)
}

// -------------------------------------------------------------------

// TCampTowerGetCampRankRsp

// repeated .pb.TCampTowerPassedRankItem RankArr = 1;
inline int TCampTowerGetCampRankRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TCampTowerGetCampRankRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TCampTowerPassedRankItem& TCampTowerGetCampRankRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerGetCampRankRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TCampTowerPassedRankItem* TCampTowerGetCampRankRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCampTowerGetCampRankRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TCampTowerPassedRankItem* TCampTowerGetCampRankRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TCampTowerGetCampRankRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCampTowerPassedRankItem >&
TCampTowerGetCampRankRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TCampTowerGetCampRankRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCampTowerPassedRankItem >*
TCampTowerGetCampRankRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCampTowerGetCampRankRsp.RankArr)
  return &rankarr_;
}

// optional int32 MyRank = 2;
inline bool TCampTowerGetCampRankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCampTowerGetCampRankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCampTowerGetCampRankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCampTowerGetCampRankRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TCampTowerGetCampRankRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TCampTowerGetCampRankRsp.MyRank)
  return myrank_;
}
inline void TCampTowerGetCampRankRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TCampTowerGetCampRankRsp.MyRank)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fCampTower_2eproto__INCLUDED
