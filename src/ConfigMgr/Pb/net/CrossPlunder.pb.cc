// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossPlunder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/CrossPlunder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TPlunderMinePos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderMinePos_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderPageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderPageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderEnemyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderEnemyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderRevengeRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderRevengeRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderMineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderMineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGetServerTeamInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGetServerTeamInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGetBaseInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGetBaseInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderChallengeGuardStartBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderChallengeGuardStartBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderChallengeGuardStartBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderChallengeGuardStartBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderChallengeGuardReportBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderChallengeGuardReportBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderChallengeGuardReportBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderChallengeGuardReportBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderEnterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderEnterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderEnterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderEnterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGetPageInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGetPageInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGetPageInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGetPageInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGetRivalFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGetRivalFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGetRivalFormationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGetRivalFormationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGatherRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGatherRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderAttackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderAttackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderAttackRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderAttackRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGiveupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGiveupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderAutoSetMineReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderAutoSetMineReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderAutoSetMineRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderAutoSetMineRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGetSelfRecordListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGetSelfRecordListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGetSelfRecordInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGetSelfRecordInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGetSelfRecordInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGetSelfRecordInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGetEnemyListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGetEnemyListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderRemoveEnemyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderRemoveEnemyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGetEnemyMineListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGetEnemyMineListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGetEnemyMineListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGetEnemyMineListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderRevengeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderRevengeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderRevengeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderRevengeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGetRevengeRecordListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGetRevengeRecordListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGetRevengeRecordInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGetRevengeRecordInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGetRevengeRecordInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGetRevengeRecordInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderGetPalaceCDNumRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderGetPalaceCDNumRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderBaseInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderBaseInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderMapInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderMapInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderMineInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderMineInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlunderRecordNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlunderRecordNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EMineGiveupResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPlunderGatherResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPlunderAttackResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPlunderEvent_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fCrossPlunder_2eproto() {
  protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/CrossPlunder.proto");
  GOOGLE_CHECK(file != NULL);
  TPlunderMinePos_descriptor_ = file->message_type(0);
  static const int TPlunderMinePos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMinePos, arealevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMinePos, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMinePos, mineid_),
  };
  TPlunderMinePos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderMinePos_descriptor_,
      TPlunderMinePos::default_instance_,
      TPlunderMinePos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMinePos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMinePos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderMinePos));
  TPlunderBaseInfo_descriptor_ = file->message_type(1);
  static const int TPlunderBaseInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderBaseInfo, mymineinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderBaseInfo, plundernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderBaseInfo, lastplundertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderBaseInfo, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderBaseInfo, maxarealevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderBaseInfo, defeatednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderBaseInfo, enableplundertime_),
  };
  TPlunderBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderBaseInfo_descriptor_,
      TPlunderBaseInfo::default_instance_,
      TPlunderBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderBaseInfo));
  TPlunderMapInfo_descriptor_ = file->message_type(2);
  static const int TPlunderMapInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMapInfo, arealevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMapInfo, minenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMapInfo, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMapInfo, pagenum_),
  };
  TPlunderMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderMapInfo_descriptor_,
      TPlunderMapInfo::default_instance_,
      TPlunderMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderMapInfo));
  TPlunderPageInfo_descriptor_ = file->message_type(3);
  static const int TPlunderPageInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderPageInfo, arealevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderPageInfo, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderPageInfo, arrmineinfo_),
  };
  TPlunderPageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderPageInfo_descriptor_,
      TPlunderPageInfo::default_instance_,
      TPlunderPageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderPageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderPageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderPageInfo));
  TPlunderEnemyInfo_descriptor_ = file->message_type(4);
  static const int TPlunderEnemyInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnemyInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnemyInfo, hatenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnemyInfo, firsttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnemyInfo, plundertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnemyInfo, hatescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnemyInfo, revenged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnemyInfo, hateseniorrewardscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnemyInfo, userinfo_),
  };
  TPlunderEnemyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderEnemyInfo_descriptor_,
      TPlunderEnemyInfo::default_instance_,
      TPlunderEnemyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnemyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnemyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderEnemyInfo));
  TPlunderRecordInfo_descriptor_ = file->message_type(5);
  static const int TPlunderRecordInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordInfo, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordInfo, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordInfo, minepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordInfo, atkuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordInfo, defuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordInfo, starlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordInfo, norewardscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordInfo, atkrewardscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordInfo, defrewardscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordInfo, sysrewardscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordInfo, atkseniorrewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordInfo, defseniorrewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordInfo, sysseniorrewardarr_),
  };
  TPlunderRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderRecordInfo_descriptor_,
      TPlunderRecordInfo::default_instance_,
      TPlunderRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderRecordInfo));
  TPlunderRevengeRecordInfo_descriptor_ = file->message_type(6);
  static const int TPlunderRevengeRecordInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRevengeRecordInfo, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRevengeRecordInfo, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRevengeRecordInfo, starlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRevengeRecordInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRevengeRecordInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRevengeRecordInfo, seniorrewardarr_),
  };
  TPlunderRevengeRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderRevengeRecordInfo_descriptor_,
      TPlunderRevengeRecordInfo::default_instance_,
      TPlunderRevengeRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRevengeRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRevengeRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderRevengeRecordInfo));
  TPlunderMineInfo_descriptor_ = file->message_type(7);
  static const int TPlunderMineInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMineInfo, minepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMineInfo, occupyuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMineInfo, occupytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMineInfo, receivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMineInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMineInfo, issenior_),
  };
  TPlunderMineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderMineInfo_descriptor_,
      TPlunderMineInfo::default_instance_,
      TPlunderMineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderMineInfo));
  TPlunderGetServerTeamInfoRsp_descriptor_ = file->message_type(8);
  static const int TPlunderGetServerTeamInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetServerTeamInfoRsp, serverteamid_),
  };
  TPlunderGetServerTeamInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGetServerTeamInfoRsp_descriptor_,
      TPlunderGetServerTeamInfoRsp::default_instance_,
      TPlunderGetServerTeamInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetServerTeamInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetServerTeamInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGetServerTeamInfoRsp));
  TPlunderGetBaseInfoRsp_descriptor_ = file->message_type(9);
  static const int TPlunderGetBaseInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetBaseInfoRsp, baseinfo_),
  };
  TPlunderGetBaseInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGetBaseInfoRsp_descriptor_,
      TPlunderGetBaseInfoRsp::default_instance_,
      TPlunderGetBaseInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetBaseInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetBaseInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGetBaseInfoRsp));
  TPlunderChallengeGuardStartBattleReq_descriptor_ = file->message_type(10);
  static const int TPlunderChallengeGuardStartBattleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderChallengeGuardStartBattleReq, battlecheckparam_),
  };
  TPlunderChallengeGuardStartBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderChallengeGuardStartBattleReq_descriptor_,
      TPlunderChallengeGuardStartBattleReq::default_instance_,
      TPlunderChallengeGuardStartBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderChallengeGuardStartBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderChallengeGuardStartBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderChallengeGuardStartBattleReq));
  TPlunderChallengeGuardStartBattleRsp_descriptor_ = file->message_type(11);
  static const int TPlunderChallengeGuardStartBattleRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderChallengeGuardStartBattleRsp, battleargs_),
  };
  TPlunderChallengeGuardStartBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderChallengeGuardStartBattleRsp_descriptor_,
      TPlunderChallengeGuardStartBattleRsp::default_instance_,
      TPlunderChallengeGuardStartBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderChallengeGuardStartBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderChallengeGuardStartBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderChallengeGuardStartBattleRsp));
  TPlunderChallengeGuardReportBattleReq_descriptor_ = file->message_type(12);
  static const int TPlunderChallengeGuardReportBattleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderChallengeGuardReportBattleReq, battleret_),
  };
  TPlunderChallengeGuardReportBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderChallengeGuardReportBattleReq_descriptor_,
      TPlunderChallengeGuardReportBattleReq::default_instance_,
      TPlunderChallengeGuardReportBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderChallengeGuardReportBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderChallengeGuardReportBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderChallengeGuardReportBattleReq));
  TPlunderChallengeGuardReportBattleRsp_descriptor_ = file->message_type(13);
  static const int TPlunderChallengeGuardReportBattleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderChallengeGuardReportBattleRsp, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderChallengeGuardReportBattleRsp, maxarealevel_),
  };
  TPlunderChallengeGuardReportBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderChallengeGuardReportBattleRsp_descriptor_,
      TPlunderChallengeGuardReportBattleRsp::default_instance_,
      TPlunderChallengeGuardReportBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderChallengeGuardReportBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderChallengeGuardReportBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderChallengeGuardReportBattleRsp));
  TPlunderEnterReq_descriptor_ = file->message_type(14);
  static const int TPlunderEnterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnterReq, arealevel_),
  };
  TPlunderEnterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderEnterReq_descriptor_,
      TPlunderEnterReq::default_instance_,
      TPlunderEnterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderEnterReq));
  TPlunderEnterRsp_descriptor_ = file->message_type(15);
  static const int TPlunderEnterRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnterRsp, mapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnterRsp, recordinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnterRsp, pageinfo_),
  };
  TPlunderEnterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderEnterRsp_descriptor_,
      TPlunderEnterRsp::default_instance_,
      TPlunderEnterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderEnterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderEnterRsp));
  TPlunderGetPageInfoReq_descriptor_ = file->message_type(16);
  static const int TPlunderGetPageInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetPageInfoReq, arealevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetPageInfoReq, page_),
  };
  TPlunderGetPageInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGetPageInfoReq_descriptor_,
      TPlunderGetPageInfoReq::default_instance_,
      TPlunderGetPageInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetPageInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetPageInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGetPageInfoReq));
  TPlunderGetPageInfoRsp_descriptor_ = file->message_type(17);
  static const int TPlunderGetPageInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetPageInfoRsp, pageinfo_),
  };
  TPlunderGetPageInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGetPageInfoRsp_descriptor_,
      TPlunderGetPageInfoRsp::default_instance_,
      TPlunderGetPageInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetPageInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetPageInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGetPageInfoRsp));
  TPlunderGetRivalFormationReq_descriptor_ = file->message_type(18);
  static const int TPlunderGetRivalFormationReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRivalFormationReq, uid_),
  };
  TPlunderGetRivalFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGetRivalFormationReq_descriptor_,
      TPlunderGetRivalFormationReq::default_instance_,
      TPlunderGetRivalFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRivalFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRivalFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGetRivalFormationReq));
  TPlunderGetRivalFormationRsp_descriptor_ = file->message_type(19);
  static const int TPlunderGetRivalFormationRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRivalFormationRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRivalFormationRsp, unitarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRivalFormationRsp, fightforce_),
  };
  TPlunderGetRivalFormationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGetRivalFormationRsp_descriptor_,
      TPlunderGetRivalFormationRsp::default_instance_,
      TPlunderGetRivalFormationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRivalFormationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRivalFormationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGetRivalFormationRsp));
  TPlunderGatherRsp_descriptor_ = file->message_type(20);
  static const int TPlunderGatherRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGatherRsp, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGatherRsp, rewardscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGatherRsp, seniorrewardarr_),
  };
  TPlunderGatherRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGatherRsp_descriptor_,
      TPlunderGatherRsp::default_instance_,
      TPlunderGatherRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGatherRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGatherRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGatherRsp));
  TPlunderAttackReq_descriptor_ = file->message_type(21);
  static const int TPlunderAttackReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAttackReq, minepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAttackReq, enemyuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAttackReq, skipbattleresult_),
  };
  TPlunderAttackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderAttackReq_descriptor_,
      TPlunderAttackReq::default_instance_,
      TPlunderAttackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAttackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAttackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderAttackReq));
  TPlunderAttackRsp_descriptor_ = file->message_type(22);
  static const int TPlunderAttackRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAttackRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAttackRsp, mineinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAttackRsp, battleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAttackRsp, battleresult_),
  };
  TPlunderAttackRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderAttackRsp_descriptor_,
      TPlunderAttackRsp::default_instance_,
      TPlunderAttackRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAttackRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAttackRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderAttackRsp));
  TPlunderGiveupRsp_descriptor_ = file->message_type(23);
  static const int TPlunderGiveupRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGiveupRsp, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGiveupRsp, rewardscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGiveupRsp, seniorrewardarr_),
  };
  TPlunderGiveupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGiveupRsp_descriptor_,
      TPlunderGiveupRsp::default_instance_,
      TPlunderGiveupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGiveupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGiveupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGiveupRsp));
  TPlunderAutoSetMineReq_descriptor_ = file->message_type(24);
  static const int TPlunderAutoSetMineReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAutoSetMineReq, arealevel_),
  };
  TPlunderAutoSetMineReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderAutoSetMineReq_descriptor_,
      TPlunderAutoSetMineReq::default_instance_,
      TPlunderAutoSetMineReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAutoSetMineReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAutoSetMineReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderAutoSetMineReq));
  TPlunderAutoSetMineRsp_descriptor_ = file->message_type(25);
  static const int TPlunderAutoSetMineRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAutoSetMineRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAutoSetMineRsp, mineinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAutoSetMineRsp, giveuprsp_),
  };
  TPlunderAutoSetMineRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderAutoSetMineRsp_descriptor_,
      TPlunderAutoSetMineRsp::default_instance_,
      TPlunderAutoSetMineRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAutoSetMineRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderAutoSetMineRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderAutoSetMineRsp));
  TPlunderGetSelfRecordListRsp_descriptor_ = file->message_type(26);
  static const int TPlunderGetSelfRecordListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetSelfRecordListRsp, recordarr_),
  };
  TPlunderGetSelfRecordListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGetSelfRecordListRsp_descriptor_,
      TPlunderGetSelfRecordListRsp::default_instance_,
      TPlunderGetSelfRecordListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetSelfRecordListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetSelfRecordListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGetSelfRecordListRsp));
  TPlunderGetSelfRecordInfoReq_descriptor_ = file->message_type(27);
  static const int TPlunderGetSelfRecordInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetSelfRecordInfoReq, recordid_),
  };
  TPlunderGetSelfRecordInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGetSelfRecordInfoReq_descriptor_,
      TPlunderGetSelfRecordInfoReq::default_instance_,
      TPlunderGetSelfRecordInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetSelfRecordInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetSelfRecordInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGetSelfRecordInfoReq));
  TPlunderGetSelfRecordInfoRsp_descriptor_ = file->message_type(28);
  static const int TPlunderGetSelfRecordInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetSelfRecordInfoRsp, recordinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetSelfRecordInfoRsp, battleresult_),
  };
  TPlunderGetSelfRecordInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGetSelfRecordInfoRsp_descriptor_,
      TPlunderGetSelfRecordInfoRsp::default_instance_,
      TPlunderGetSelfRecordInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetSelfRecordInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetSelfRecordInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGetSelfRecordInfoRsp));
  TPlunderGetEnemyListRsp_descriptor_ = file->message_type(29);
  static const int TPlunderGetEnemyListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetEnemyListRsp, enemylist_),
  };
  TPlunderGetEnemyListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGetEnemyListRsp_descriptor_,
      TPlunderGetEnemyListRsp::default_instance_,
      TPlunderGetEnemyListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetEnemyListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetEnemyListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGetEnemyListRsp));
  TPlunderRemoveEnemyReq_descriptor_ = file->message_type(30);
  static const int TPlunderRemoveEnemyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRemoveEnemyReq, uid_),
  };
  TPlunderRemoveEnemyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderRemoveEnemyReq_descriptor_,
      TPlunderRemoveEnemyReq::default_instance_,
      TPlunderRemoveEnemyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRemoveEnemyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRemoveEnemyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderRemoveEnemyReq));
  TPlunderGetEnemyMineListReq_descriptor_ = file->message_type(31);
  static const int TPlunderGetEnemyMineListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetEnemyMineListReq, uid_),
  };
  TPlunderGetEnemyMineListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGetEnemyMineListReq_descriptor_,
      TPlunderGetEnemyMineListReq::default_instance_,
      TPlunderGetEnemyMineListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetEnemyMineListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetEnemyMineListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGetEnemyMineListReq));
  TPlunderGetEnemyMineListRsp_descriptor_ = file->message_type(32);
  static const int TPlunderGetEnemyMineListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetEnemyMineListRsp, minepos_),
  };
  TPlunderGetEnemyMineListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGetEnemyMineListRsp_descriptor_,
      TPlunderGetEnemyMineListRsp::default_instance_,
      TPlunderGetEnemyMineListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetEnemyMineListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetEnemyMineListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGetEnemyMineListRsp));
  TPlunderRevengeReq_descriptor_ = file->message_type(33);
  static const int TPlunderRevengeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRevengeReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRevengeReq, skipbattleresult_),
  };
  TPlunderRevengeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderRevengeReq_descriptor_,
      TPlunderRevengeReq::default_instance_,
      TPlunderRevengeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRevengeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRevengeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderRevengeReq));
  TPlunderRevengeRsp_descriptor_ = file->message_type(34);
  static const int TPlunderRevengeRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRevengeRsp, battleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRevengeRsp, battleresult_),
  };
  TPlunderRevengeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderRevengeRsp_descriptor_,
      TPlunderRevengeRsp::default_instance_,
      TPlunderRevengeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRevengeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRevengeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderRevengeRsp));
  TPlunderRankInfo_descriptor_ = file->message_type(35);
  static const int TPlunderRankInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRankInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRankInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRankInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRankInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRankInfo, rank_),
  };
  TPlunderRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderRankInfo_descriptor_,
      TPlunderRankInfo::default_instance_,
      TPlunderRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderRankInfo));
  TPlunderGetRevengeRecordListRsp_descriptor_ = file->message_type(36);
  static const int TPlunderGetRevengeRecordListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRevengeRecordListRsp, recordarr_),
  };
  TPlunderGetRevengeRecordListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGetRevengeRecordListRsp_descriptor_,
      TPlunderGetRevengeRecordListRsp::default_instance_,
      TPlunderGetRevengeRecordListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRevengeRecordListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRevengeRecordListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGetRevengeRecordListRsp));
  TPlunderGetRevengeRecordInfoReq_descriptor_ = file->message_type(37);
  static const int TPlunderGetRevengeRecordInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRevengeRecordInfoReq, recordid_),
  };
  TPlunderGetRevengeRecordInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGetRevengeRecordInfoReq_descriptor_,
      TPlunderGetRevengeRecordInfoReq::default_instance_,
      TPlunderGetRevengeRecordInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRevengeRecordInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRevengeRecordInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGetRevengeRecordInfoReq));
  TPlunderGetRevengeRecordInfoRsp_descriptor_ = file->message_type(38);
  static const int TPlunderGetRevengeRecordInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRevengeRecordInfoRsp, recordinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRevengeRecordInfoRsp, battleresult_),
  };
  TPlunderGetRevengeRecordInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGetRevengeRecordInfoRsp_descriptor_,
      TPlunderGetRevengeRecordInfoRsp::default_instance_,
      TPlunderGetRevengeRecordInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRevengeRecordInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetRevengeRecordInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGetRevengeRecordInfoRsp));
  TPlunderRankReq_descriptor_ = file->message_type(39);
  static const int TPlunderRankReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRankReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRankReq, limit_),
  };
  TPlunderRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderRankReq_descriptor_,
      TPlunderRankReq::default_instance_,
      TPlunderRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderRankReq));
  TPlunderRankRsp_descriptor_ = file->message_type(40);
  static const int TPlunderRankRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRankRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRankRsp, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRankRsp, myscore_),
  };
  TPlunderRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderRankRsp_descriptor_,
      TPlunderRankRsp::default_instance_,
      TPlunderRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderRankRsp));
  TPlunderGetPalaceCDNumRsp_descriptor_ = file->message_type(41);
  static const int TPlunderGetPalaceCDNumRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetPalaceCDNumRsp, freecdnum_),
  };
  TPlunderGetPalaceCDNumRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderGetPalaceCDNumRsp_descriptor_,
      TPlunderGetPalaceCDNumRsp::default_instance_,
      TPlunderGetPalaceCDNumRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetPalaceCDNumRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderGetPalaceCDNumRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderGetPalaceCDNumRsp));
  TPlunderBaseInfoNotify_descriptor_ = file->message_type(42);
  static const int TPlunderBaseInfoNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderBaseInfoNotify, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderBaseInfoNotify, event_),
  };
  TPlunderBaseInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderBaseInfoNotify_descriptor_,
      TPlunderBaseInfoNotify::default_instance_,
      TPlunderBaseInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderBaseInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderBaseInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderBaseInfoNotify));
  TPlunderMapInfoNotify_descriptor_ = file->message_type(43);
  static const int TPlunderMapInfoNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMapInfoNotify, mapinfo_),
  };
  TPlunderMapInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderMapInfoNotify_descriptor_,
      TPlunderMapInfoNotify::default_instance_,
      TPlunderMapInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMapInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMapInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderMapInfoNotify));
  TPlunderMineInfoNotify_descriptor_ = file->message_type(44);
  static const int TPlunderMineInfoNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMineInfoNotify, changedinfo_),
  };
  TPlunderMineInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderMineInfoNotify_descriptor_,
      TPlunderMineInfoNotify::default_instance_,
      TPlunderMineInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMineInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderMineInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderMineInfoNotify));
  TPlunderRecordNotify_descriptor_ = file->message_type(45);
  static const int TPlunderRecordNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordNotify, recordarr_),
  };
  TPlunderRecordNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlunderRecordNotify_descriptor_,
      TPlunderRecordNotify::default_instance_,
      TPlunderRecordNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlunderRecordNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlunderRecordNotify));
  EMineGiveupResult_descriptor_ = file->enum_type(0);
  EPlunderGatherResult_descriptor_ = file->enum_type(1);
  EPlunderAttackResult_descriptor_ = file->enum_type(2);
  EPlunderEvent_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fCrossPlunder_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderMinePos_descriptor_, &TPlunderMinePos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderBaseInfo_descriptor_, &TPlunderBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderMapInfo_descriptor_, &TPlunderMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderPageInfo_descriptor_, &TPlunderPageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderEnemyInfo_descriptor_, &TPlunderEnemyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderRecordInfo_descriptor_, &TPlunderRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderRevengeRecordInfo_descriptor_, &TPlunderRevengeRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderMineInfo_descriptor_, &TPlunderMineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGetServerTeamInfoRsp_descriptor_, &TPlunderGetServerTeamInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGetBaseInfoRsp_descriptor_, &TPlunderGetBaseInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderChallengeGuardStartBattleReq_descriptor_, &TPlunderChallengeGuardStartBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderChallengeGuardStartBattleRsp_descriptor_, &TPlunderChallengeGuardStartBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderChallengeGuardReportBattleReq_descriptor_, &TPlunderChallengeGuardReportBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderChallengeGuardReportBattleRsp_descriptor_, &TPlunderChallengeGuardReportBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderEnterReq_descriptor_, &TPlunderEnterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderEnterRsp_descriptor_, &TPlunderEnterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGetPageInfoReq_descriptor_, &TPlunderGetPageInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGetPageInfoRsp_descriptor_, &TPlunderGetPageInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGetRivalFormationReq_descriptor_, &TPlunderGetRivalFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGetRivalFormationRsp_descriptor_, &TPlunderGetRivalFormationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGatherRsp_descriptor_, &TPlunderGatherRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderAttackReq_descriptor_, &TPlunderAttackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderAttackRsp_descriptor_, &TPlunderAttackRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGiveupRsp_descriptor_, &TPlunderGiveupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderAutoSetMineReq_descriptor_, &TPlunderAutoSetMineReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderAutoSetMineRsp_descriptor_, &TPlunderAutoSetMineRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGetSelfRecordListRsp_descriptor_, &TPlunderGetSelfRecordListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGetSelfRecordInfoReq_descriptor_, &TPlunderGetSelfRecordInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGetSelfRecordInfoRsp_descriptor_, &TPlunderGetSelfRecordInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGetEnemyListRsp_descriptor_, &TPlunderGetEnemyListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderRemoveEnemyReq_descriptor_, &TPlunderRemoveEnemyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGetEnemyMineListReq_descriptor_, &TPlunderGetEnemyMineListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGetEnemyMineListRsp_descriptor_, &TPlunderGetEnemyMineListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderRevengeReq_descriptor_, &TPlunderRevengeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderRevengeRsp_descriptor_, &TPlunderRevengeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderRankInfo_descriptor_, &TPlunderRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGetRevengeRecordListRsp_descriptor_, &TPlunderGetRevengeRecordListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGetRevengeRecordInfoReq_descriptor_, &TPlunderGetRevengeRecordInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGetRevengeRecordInfoRsp_descriptor_, &TPlunderGetRevengeRecordInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderRankReq_descriptor_, &TPlunderRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderRankRsp_descriptor_, &TPlunderRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderGetPalaceCDNumRsp_descriptor_, &TPlunderGetPalaceCDNumRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderBaseInfoNotify_descriptor_, &TPlunderBaseInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderMapInfoNotify_descriptor_, &TPlunderMapInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderMineInfoNotify_descriptor_, &TPlunderMineInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlunderRecordNotify_descriptor_, &TPlunderRecordNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fCrossPlunder_2eproto() {
  delete TPlunderMinePos::default_instance_;
  delete TPlunderMinePos_reflection_;
  delete TPlunderBaseInfo::default_instance_;
  delete TPlunderBaseInfo_reflection_;
  delete TPlunderMapInfo::default_instance_;
  delete TPlunderMapInfo_reflection_;
  delete TPlunderPageInfo::default_instance_;
  delete TPlunderPageInfo_reflection_;
  delete TPlunderEnemyInfo::default_instance_;
  delete TPlunderEnemyInfo_reflection_;
  delete TPlunderRecordInfo::default_instance_;
  delete TPlunderRecordInfo_reflection_;
  delete TPlunderRevengeRecordInfo::default_instance_;
  delete TPlunderRevengeRecordInfo_reflection_;
  delete TPlunderMineInfo::default_instance_;
  delete TPlunderMineInfo_reflection_;
  delete TPlunderGetServerTeamInfoRsp::default_instance_;
  delete TPlunderGetServerTeamInfoRsp_reflection_;
  delete TPlunderGetBaseInfoRsp::default_instance_;
  delete TPlunderGetBaseInfoRsp_reflection_;
  delete TPlunderChallengeGuardStartBattleReq::default_instance_;
  delete TPlunderChallengeGuardStartBattleReq_reflection_;
  delete TPlunderChallengeGuardStartBattleRsp::default_instance_;
  delete TPlunderChallengeGuardStartBattleRsp_reflection_;
  delete TPlunderChallengeGuardReportBattleReq::default_instance_;
  delete TPlunderChallengeGuardReportBattleReq_reflection_;
  delete TPlunderChallengeGuardReportBattleRsp::default_instance_;
  delete TPlunderChallengeGuardReportBattleRsp_reflection_;
  delete TPlunderEnterReq::default_instance_;
  delete TPlunderEnterReq_reflection_;
  delete TPlunderEnterRsp::default_instance_;
  delete TPlunderEnterRsp_reflection_;
  delete TPlunderGetPageInfoReq::default_instance_;
  delete TPlunderGetPageInfoReq_reflection_;
  delete TPlunderGetPageInfoRsp::default_instance_;
  delete TPlunderGetPageInfoRsp_reflection_;
  delete TPlunderGetRivalFormationReq::default_instance_;
  delete TPlunderGetRivalFormationReq_reflection_;
  delete TPlunderGetRivalFormationRsp::default_instance_;
  delete TPlunderGetRivalFormationRsp_reflection_;
  delete TPlunderGatherRsp::default_instance_;
  delete TPlunderGatherRsp_reflection_;
  delete TPlunderAttackReq::default_instance_;
  delete TPlunderAttackReq_reflection_;
  delete TPlunderAttackRsp::default_instance_;
  delete TPlunderAttackRsp_reflection_;
  delete TPlunderGiveupRsp::default_instance_;
  delete TPlunderGiveupRsp_reflection_;
  delete TPlunderAutoSetMineReq::default_instance_;
  delete TPlunderAutoSetMineReq_reflection_;
  delete TPlunderAutoSetMineRsp::default_instance_;
  delete TPlunderAutoSetMineRsp_reflection_;
  delete TPlunderGetSelfRecordListRsp::default_instance_;
  delete TPlunderGetSelfRecordListRsp_reflection_;
  delete TPlunderGetSelfRecordInfoReq::default_instance_;
  delete TPlunderGetSelfRecordInfoReq_reflection_;
  delete TPlunderGetSelfRecordInfoRsp::default_instance_;
  delete TPlunderGetSelfRecordInfoRsp_reflection_;
  delete TPlunderGetEnemyListRsp::default_instance_;
  delete TPlunderGetEnemyListRsp_reflection_;
  delete TPlunderRemoveEnemyReq::default_instance_;
  delete TPlunderRemoveEnemyReq_reflection_;
  delete TPlunderGetEnemyMineListReq::default_instance_;
  delete TPlunderGetEnemyMineListReq_reflection_;
  delete TPlunderGetEnemyMineListRsp::default_instance_;
  delete TPlunderGetEnemyMineListRsp_reflection_;
  delete TPlunderRevengeReq::default_instance_;
  delete TPlunderRevengeReq_reflection_;
  delete TPlunderRevengeRsp::default_instance_;
  delete TPlunderRevengeRsp_reflection_;
  delete TPlunderRankInfo::default_instance_;
  delete TPlunderRankInfo_reflection_;
  delete TPlunderGetRevengeRecordListRsp::default_instance_;
  delete TPlunderGetRevengeRecordListRsp_reflection_;
  delete TPlunderGetRevengeRecordInfoReq::default_instance_;
  delete TPlunderGetRevengeRecordInfoReq_reflection_;
  delete TPlunderGetRevengeRecordInfoRsp::default_instance_;
  delete TPlunderGetRevengeRecordInfoRsp_reflection_;
  delete TPlunderRankReq::default_instance_;
  delete TPlunderRankReq_reflection_;
  delete TPlunderRankRsp::default_instance_;
  delete TPlunderRankRsp_reflection_;
  delete TPlunderGetPalaceCDNumRsp::default_instance_;
  delete TPlunderGetPalaceCDNumRsp_reflection_;
  delete TPlunderBaseInfoNotify::default_instance_;
  delete TPlunderBaseInfoNotify_reflection_;
  delete TPlunderMapInfoNotify::default_instance_;
  delete TPlunderMapInfoNotify_reflection_;
  delete TPlunderMineInfoNotify::default_instance_;
  delete TPlunderMineInfoNotify_reflection_;
  delete TPlunderRecordNotify::default_instance_;
  delete TPlunderRecordNotify_reflection_;
}

void protobuf_AddDesc_net_2fCrossPlunder_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026net/CrossPlunder.proto\022\002pb\032\016net/User.p"
    "roto\032\020net/Battle.proto\032\026net/CommonReward"
    ".proto\"B\n\017TPlunderMinePos\022\021\n\tAreaLevel\030\001"
    " \001(\r\022\014\n\004Page\030\002 \001(\r\022\016\n\006MineId\030\003 \001(\r\"\303\001\n\020T"
    "PlunderBaseInfo\022(\n\nMyMineInfo\030\001 \001(\0132\024.pb"
    ".TPlunderMineInfo\022\022\n\nPlunderNum\030\002 \001(\r\022\027\n"
    "\017LastPlunderTime\030\003 \001(\003\022\022\n\nTotalScore\030\004 \001"
    "(\r\022\024\n\014MaxAreaLevel\030\005 \001(\r\022\023\n\013DefeatedNum\030"
    "\006 \001(\r\022\031\n\021EnablePlunderTime\030\007 \001(\003\"W\n\017TPlu"
    "nderMapInfo\022\021\n\tAreaLevel\030\001 \001(\r\022\017\n\007MineNu"
    "m\030\002 \001(\r\022\017\n\007UserNum\030\003 \001(\r\022\017\n\007PageNum\030\004 \001("
    "\r\"^\n\020TPlunderPageInfo\022\021\n\tAreaLevel\030\001 \001(\r"
    "\022\014\n\004Page\030\002 \001(\r\022)\n\013ArrMineInfo\030\003 \003(\0132\024.pb"
    ".TPlunderMineInfo\"\314\001\n\021TPlunderEnemyInfo\022"
    "\013\n\003Uid\030\001 \001(\004\022\017\n\007HateNum\030\002 \001(\r\022\021\n\tFirstTi"
    "me\030\003 \001(\003\022\023\n\013PlunderTime\030\004 \001(\003\022\021\n\tHateSco"
    "re\030\005 \001(\r\022\020\n\010Revenged\030\006 \001(\010\022\035\n\025HateSenior"
    "RewardScore\030\007 \001(\r\022-\n\010UserInfo\030\n \001(\0132\033.pb"
    ".TUserSimpleInfoWithAlly\"\303\003\n\022TPlunderRec"
    "ordInfo\022\020\n\010RecordId\030\001 \001(\004\022\022\n\nRecordTime\030"
    "\002 \001(\003\022$\n\007MinePos\030\003 \001(\0132\023.pb.TPlunderMine"
    "Pos\0220\n\013AtkUserInfo\030\004 \001(\0132\033.pb.TUserSimpl"
    "eInfoWithAlly\0220\n\013DefUserInfo\030\005 \001(\0132\033.pb."
    "TUserSimpleInfoWithAlly\022\021\n\tStarLevel\030\006 \001"
    "(\r\022\025\n\rNoRewardScore\030\t \001(\010\022\026\n\016AtkRewardSc"
    "ore\030\n \001(\r\022\026\n\016DefRewardScore\030\013 \001(\r\022\026\n\016Sys"
    "RewardScore\030\014 \001(\r\022-\n\022AtkSeniorRewardArr\030"
    "\r \003(\0132\021.pb.TCommonReward\022-\n\022DefSeniorRew"
    "ardArr\030\016 \003(\0132\021.pb.TCommonReward\022-\n\022SysSe"
    "niorRewardArr\030\017 \003(\0132\021.pb.TCommonReward\"\276"
    "\001\n\031TPlunderRevengeRecordInfo\022\020\n\010RecordId"
    "\030\001 \001(\004\022\022\n\nRecordTime\030\002 \001(\003\022\021\n\tStarLevel\030"
    "\003 \001(\r\022\r\n\005Score\030\004 \001(\r\022-\n\010UserInfo\030\005 \001(\0132\033"
    ".pb.TUserSimpleInfoWithAlly\022*\n\017SeniorRew"
    "ardArr\030\006 \003(\0132\021.pb.TCommonReward\"\265\001\n\020TPlu"
    "nderMineInfo\022$\n\007MinePos\030\001 \001(\0132\023.pb.TPlun"
    "derMinePos\022\021\n\tOccupyUid\030\002 \001(\004\022\022\n\nOccupyT"
    "ime\030\003 \001(\003\022\023\n\013ReceiveTime\030\004 \001(\003\022-\n\010UserIn"
    "fo\030\005 \001(\0132\033.pb.TUserSimpleInfoWithAlly\022\020\n"
    "\010IsSenior\030\006 \001(\010\"4\n\034TPlunderGetServerTeam"
    "InfoRsp\022\024\n\014ServerTeamId\030\001 \001(\r\"@\n\026TPlunde"
    "rGetBaseInfoRsp\022&\n\010BaseInfo\030\001 \001(\0132\024.pb.T"
    "PlunderBaseInfo\"W\n$TPlunderChallengeGuar"
    "dStartBattleReq\022/\n\020BattleCheckParam\030\001 \001("
    "\0132\025.pb.TBattleCheckParam\"K\n$TPlunderChal"
    "lengeGuardStartBattleRsp\022#\n\nBattleArgs\030\001"
    " \001(\0132\017.pb.TBattleArgs\":\n%TPlunderChallen"
    "geGuardReportBattleReq\022\021\n\tBattleRet\030\001 \001("
    "\014\"Q\n%TPlunderChallengeGuardReportBattleR"
    "sp\022\022\n\nResultCode\030\001 \001(\005\022\024\n\014MaxAreaLevel\030\002"
    " \001(\r\"%\n\020TPlunderEnterReq\022\021\n\tAreaLevel\030\001 "
    "\001(\r\"\217\001\n\020TPlunderEnterRsp\022$\n\007MapInfo\030\001 \001("
    "\0132\023.pb.TPlunderMapInfo\022-\n\rRecordInfoArr\030"
    "\002 \003(\0132\026.pb.TPlunderRecordInfo\022&\n\010PageInf"
    "o\030\003 \001(\0132\024.pb.TPlunderPageInfo\"9\n\026TPlunde"
    "rGetPageInfoReq\022\021\n\tAreaLevel\030\001 \001(\r\022\014\n\004Pa"
    "ge\030\002 \001(\r\"@\n\026TPlunderGetPageInfoRsp\022&\n\010Pa"
    "geInfo\030\001 \001(\0132\024.pb.TPlunderPageInfo\"+\n\034TP"
    "lunderGetRivalFormationReq\022\013\n\003Uid\030\001 \001(\004\""
    "_\n\034TPlunderGetRivalFormationRsp\022\013\n\003Uid\030\001"
    " \001(\004\022\036\n\007UnitArr\030\002 \003(\0132\r.pb.TUnitInfo\022\022\n\n"
    "FightForce\030\003 \001(\004\"\202\001\n\021TPlunderGatherRsp\022,"
    "\n\nResultCode\030\001 \001(\0162\030.pb.EPlunderGatherRe"
    "sult\022\023\n\013RewardScore\030\002 \001(\r\022*\n\017SeniorRewar"
    "dArr\030\003 \003(\0132\021.pb.TCommonReward\"e\n\021TPlunde"
    "rAttackReq\022$\n\007MinePos\030\001 \001(\0132\023.pb.TPlunde"
    "rMinePos\022\020\n\010EnemyUid\030\002 \001(\004\022\030\n\020SkipBattle"
    "Result\030\003 \001(\010\"\247\001\n\021TPlunderAttackRsp\022(\n\006Re"
    "sult\030\001 \001(\0162\030.pb.EPlunderAttackResult\022&\n\010"
    "MineInfo\030\002 \001(\0132\024.pb.TPlunderMineInfo\022*\n\n"
    "BattleInfo\030\003 \001(\0132\026.pb.TPlunderRecordInfo"
    "\022\024\n\014BattleResult\030\004 \001(\014\"\202\001\n\021TPlunderGiveu"
    "pRsp\022,\n\nResultCode\030\001 \001(\0162\030.pb.EPlunderGa"
    "therResult\022\023\n\013RewardScore\030\002 \001(\r\022*\n\017Senio"
    "rRewardArr\030\003 \003(\0132\021.pb.TCommonReward\"+\n\026T"
    "PlunderAutoSetMineReq\022\021\n\tAreaLevel\030\001 \001(\r"
    "\"\224\001\n\026TPlunderAutoSetMineRsp\022(\n\006Result\030\001 "
    "\001(\0162\030.pb.EPlunderAttackResult\022&\n\010MineInf"
    "o\030\002 \001(\0132\024.pb.TPlunderMineInfo\022(\n\tGiveupR"
    "sp\030\003 \001(\0132\025.pb.TPlunderGiveupRsp\"I\n\034TPlun"
    "derGetSelfRecordListRsp\022)\n\tRecordArr\030\001 \003"
    "(\0132\026.pb.TPlunderRecordInfo\"0\n\034TPlunderGe"
    "tSelfRecordInfoReq\022\020\n\010RecordId\030\001 \001(\004\"`\n\034"
    "TPlunderGetSelfRecordInfoRsp\022*\n\nRecordIn"
    "fo\030\001 \001(\0132\026.pb.TPlunderRecordInfo\022\024\n\014Batt"
    "leResult\030\002 \001(\014\"C\n\027TPlunderGetEnemyListRs"
    "p\022(\n\tEnemyList\030\001 \003(\0132\025.pb.TPlunderEnemyI"
    "nfo\"%\n\026TPlunderRemoveEnemyReq\022\013\n\003Uid\030\001 \001"
    "(\004\"*\n\033TPlunderGetEnemyMineListReq\022\013\n\003Uid"
    "\030\001 \001(\004\"C\n\033TPlunderGetEnemyMineListRsp\022$\n"
    "\007MinePos\030\001 \001(\0132\023.pb.TPlunderMinePos\";\n\022T"
    "PlunderRevengeReq\022\013\n\003Uid\030\001 \001(\004\022\030\n\020SkipBa"
    "ttleResult\030\002 \001(\010\"]\n\022TPlunderRevengeRsp\0221"
    "\n\nBattleInfo\030\001 \001(\0132\035.pb.TPlunderRevengeR"
    "ecordInfo\022\024\n\014BattleResult\030\002 \001(\014\"y\n\020TPlun"
    "derRankInfo\022\013\n\003Uid\030\001 \001(\004\022-\n\010UserInfo\030\002 \001"
    "(\0132\033.pb.TUserSimpleInfoWithAlly\022\r\n\005Score"
    "\030\n \001(\r\022\014\n\004Time\030\013 \001(\003\022\014\n\004Rank\030\014 \001(\005\"S\n\037TP"
    "lunderGetRevengeRecordListRsp\0220\n\tRecordA"
    "rr\030\001 \003(\0132\035.pb.TPlunderRevengeRecordInfo\""
    "3\n\037TPlunderGetRevengeRecordInfoReq\022\020\n\010Re"
    "cordId\030\001 \001(\004\"j\n\037TPlunderGetRevengeRecord"
    "InfoRsp\0221\n\nRecordInfo\030\001 \001(\0132\035.pb.TPlunde"
    "rRevengeRecordInfo\022\024\n\014BattleResult\030\002 \001(\014"
    "\"0\n\017TPlunderRankReq\022\016\n\006Offset\030\001 \001(\r\022\r\n\005L"
    "imit\030\002 \001(\r\"Y\n\017TPlunderRankRsp\022%\n\007RankArr"
    "\030\001 \003(\0132\024.pb.TPlunderRankInfo\022\016\n\006MyRank\030\002"
    " \001(\005\022\017\n\007MyScore\030\003 \001(\r\".\n\031TPlunderGetPala"
    "ceCDNumRsp\022\021\n\tFreeCDNum\030\001 \001(\r\"b\n\026TPlunde"
    "rBaseInfoNotify\022&\n\010BaseInfo\030\001 \001(\0132\024.pb.T"
    "PlunderBaseInfo\022 \n\005Event\030\002 \001(\0162\021.pb.EPlu"
    "nderEvent\"=\n\025TPlunderMapInfoNotify\022$\n\007Ma"
    "pInfo\030\001 \001(\0132\023.pb.TPlunderMapInfo\"C\n\026TPlu"
    "nderMineInfoNotify\022)\n\013ChangedInfo\030\001 \003(\0132"
    "\024.pb.TPlunderMineInfo\"A\n\024TPlunderRecordN"
    "otify\022)\n\tRecordArr\030\001 \003(\0132\026.pb.TPlunderRe"
    "cordInfo*.\n\021EMineGiveupResult\022\n\n\006NORMAL\020"
    "\000\022\r\n\tBE_OCCUPY\020\001*V\n\024EPlunderGatherResult"
    "\022\022\n\016GATHER_SUCCEED\020\000\022\023\n\017GATHER_BEOCCUPY\020"
    "\001\022\025\n\021GATHER_ADJOURNING\020\002*\342\001\n\024EPlunderAtt"
    "ackResult\022\022\n\016ATTACK_SUCCEED\020\000\022\021\n\rATTACK_"
    "OCCUPY\020\001\022\023\n\017ATTACK_BEOCCUPY\020\002\022\r\n\tATTACK_"
    "CD\020\003\022\017\n\013ATTACK_FULL\020\004\022\021\n\rATTACK_GIVEUP\020\005"
    "\022\025\n\021ATTACK_PROTECTION\020\006\022\027\n\023ATTACK_DEFEAT"
    "PUNISH\020\007\022\021\n\rATTACK_FAILED\020\010\022\030\n\024ATTACK_PR"
    "OTECTEDTIME\020\t*H\n\rEPlunderEvent\022\020\n\014PLUNDE"
    "R_NONE\020\000\022\022\n\016PLUNDER_ATTACK\020\001\022\021\n\rPLUNDER_"
    "EXPEL\020\002", 5087);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/CrossPlunder.proto", &protobuf_RegisterTypes);
  TPlunderMinePos::default_instance_ = new TPlunderMinePos();
  TPlunderBaseInfo::default_instance_ = new TPlunderBaseInfo();
  TPlunderMapInfo::default_instance_ = new TPlunderMapInfo();
  TPlunderPageInfo::default_instance_ = new TPlunderPageInfo();
  TPlunderEnemyInfo::default_instance_ = new TPlunderEnemyInfo();
  TPlunderRecordInfo::default_instance_ = new TPlunderRecordInfo();
  TPlunderRevengeRecordInfo::default_instance_ = new TPlunderRevengeRecordInfo();
  TPlunderMineInfo::default_instance_ = new TPlunderMineInfo();
  TPlunderGetServerTeamInfoRsp::default_instance_ = new TPlunderGetServerTeamInfoRsp();
  TPlunderGetBaseInfoRsp::default_instance_ = new TPlunderGetBaseInfoRsp();
  TPlunderChallengeGuardStartBattleReq::default_instance_ = new TPlunderChallengeGuardStartBattleReq();
  TPlunderChallengeGuardStartBattleRsp::default_instance_ = new TPlunderChallengeGuardStartBattleRsp();
  TPlunderChallengeGuardReportBattleReq::default_instance_ = new TPlunderChallengeGuardReportBattleReq();
  TPlunderChallengeGuardReportBattleRsp::default_instance_ = new TPlunderChallengeGuardReportBattleRsp();
  TPlunderEnterReq::default_instance_ = new TPlunderEnterReq();
  TPlunderEnterRsp::default_instance_ = new TPlunderEnterRsp();
  TPlunderGetPageInfoReq::default_instance_ = new TPlunderGetPageInfoReq();
  TPlunderGetPageInfoRsp::default_instance_ = new TPlunderGetPageInfoRsp();
  TPlunderGetRivalFormationReq::default_instance_ = new TPlunderGetRivalFormationReq();
  TPlunderGetRivalFormationRsp::default_instance_ = new TPlunderGetRivalFormationRsp();
  TPlunderGatherRsp::default_instance_ = new TPlunderGatherRsp();
  TPlunderAttackReq::default_instance_ = new TPlunderAttackReq();
  TPlunderAttackRsp::default_instance_ = new TPlunderAttackRsp();
  TPlunderGiveupRsp::default_instance_ = new TPlunderGiveupRsp();
  TPlunderAutoSetMineReq::default_instance_ = new TPlunderAutoSetMineReq();
  TPlunderAutoSetMineRsp::default_instance_ = new TPlunderAutoSetMineRsp();
  TPlunderGetSelfRecordListRsp::default_instance_ = new TPlunderGetSelfRecordListRsp();
  TPlunderGetSelfRecordInfoReq::default_instance_ = new TPlunderGetSelfRecordInfoReq();
  TPlunderGetSelfRecordInfoRsp::default_instance_ = new TPlunderGetSelfRecordInfoRsp();
  TPlunderGetEnemyListRsp::default_instance_ = new TPlunderGetEnemyListRsp();
  TPlunderRemoveEnemyReq::default_instance_ = new TPlunderRemoveEnemyReq();
  TPlunderGetEnemyMineListReq::default_instance_ = new TPlunderGetEnemyMineListReq();
  TPlunderGetEnemyMineListRsp::default_instance_ = new TPlunderGetEnemyMineListRsp();
  TPlunderRevengeReq::default_instance_ = new TPlunderRevengeReq();
  TPlunderRevengeRsp::default_instance_ = new TPlunderRevengeRsp();
  TPlunderRankInfo::default_instance_ = new TPlunderRankInfo();
  TPlunderGetRevengeRecordListRsp::default_instance_ = new TPlunderGetRevengeRecordListRsp();
  TPlunderGetRevengeRecordInfoReq::default_instance_ = new TPlunderGetRevengeRecordInfoReq();
  TPlunderGetRevengeRecordInfoRsp::default_instance_ = new TPlunderGetRevengeRecordInfoRsp();
  TPlunderRankReq::default_instance_ = new TPlunderRankReq();
  TPlunderRankRsp::default_instance_ = new TPlunderRankRsp();
  TPlunderGetPalaceCDNumRsp::default_instance_ = new TPlunderGetPalaceCDNumRsp();
  TPlunderBaseInfoNotify::default_instance_ = new TPlunderBaseInfoNotify();
  TPlunderMapInfoNotify::default_instance_ = new TPlunderMapInfoNotify();
  TPlunderMineInfoNotify::default_instance_ = new TPlunderMineInfoNotify();
  TPlunderRecordNotify::default_instance_ = new TPlunderRecordNotify();
  TPlunderMinePos::default_instance_->InitAsDefaultInstance();
  TPlunderBaseInfo::default_instance_->InitAsDefaultInstance();
  TPlunderMapInfo::default_instance_->InitAsDefaultInstance();
  TPlunderPageInfo::default_instance_->InitAsDefaultInstance();
  TPlunderEnemyInfo::default_instance_->InitAsDefaultInstance();
  TPlunderRecordInfo::default_instance_->InitAsDefaultInstance();
  TPlunderRevengeRecordInfo::default_instance_->InitAsDefaultInstance();
  TPlunderMineInfo::default_instance_->InitAsDefaultInstance();
  TPlunderGetServerTeamInfoRsp::default_instance_->InitAsDefaultInstance();
  TPlunderGetBaseInfoRsp::default_instance_->InitAsDefaultInstance();
  TPlunderChallengeGuardStartBattleReq::default_instance_->InitAsDefaultInstance();
  TPlunderChallengeGuardStartBattleRsp::default_instance_->InitAsDefaultInstance();
  TPlunderChallengeGuardReportBattleReq::default_instance_->InitAsDefaultInstance();
  TPlunderChallengeGuardReportBattleRsp::default_instance_->InitAsDefaultInstance();
  TPlunderEnterReq::default_instance_->InitAsDefaultInstance();
  TPlunderEnterRsp::default_instance_->InitAsDefaultInstance();
  TPlunderGetPageInfoReq::default_instance_->InitAsDefaultInstance();
  TPlunderGetPageInfoRsp::default_instance_->InitAsDefaultInstance();
  TPlunderGetRivalFormationReq::default_instance_->InitAsDefaultInstance();
  TPlunderGetRivalFormationRsp::default_instance_->InitAsDefaultInstance();
  TPlunderGatherRsp::default_instance_->InitAsDefaultInstance();
  TPlunderAttackReq::default_instance_->InitAsDefaultInstance();
  TPlunderAttackRsp::default_instance_->InitAsDefaultInstance();
  TPlunderGiveupRsp::default_instance_->InitAsDefaultInstance();
  TPlunderAutoSetMineReq::default_instance_->InitAsDefaultInstance();
  TPlunderAutoSetMineRsp::default_instance_->InitAsDefaultInstance();
  TPlunderGetSelfRecordListRsp::default_instance_->InitAsDefaultInstance();
  TPlunderGetSelfRecordInfoReq::default_instance_->InitAsDefaultInstance();
  TPlunderGetSelfRecordInfoRsp::default_instance_->InitAsDefaultInstance();
  TPlunderGetEnemyListRsp::default_instance_->InitAsDefaultInstance();
  TPlunderRemoveEnemyReq::default_instance_->InitAsDefaultInstance();
  TPlunderGetEnemyMineListReq::default_instance_->InitAsDefaultInstance();
  TPlunderGetEnemyMineListRsp::default_instance_->InitAsDefaultInstance();
  TPlunderRevengeReq::default_instance_->InitAsDefaultInstance();
  TPlunderRevengeRsp::default_instance_->InitAsDefaultInstance();
  TPlunderRankInfo::default_instance_->InitAsDefaultInstance();
  TPlunderGetRevengeRecordListRsp::default_instance_->InitAsDefaultInstance();
  TPlunderGetRevengeRecordInfoReq::default_instance_->InitAsDefaultInstance();
  TPlunderGetRevengeRecordInfoRsp::default_instance_->InitAsDefaultInstance();
  TPlunderRankReq::default_instance_->InitAsDefaultInstance();
  TPlunderRankRsp::default_instance_->InitAsDefaultInstance();
  TPlunderGetPalaceCDNumRsp::default_instance_->InitAsDefaultInstance();
  TPlunderBaseInfoNotify::default_instance_->InitAsDefaultInstance();
  TPlunderMapInfoNotify::default_instance_->InitAsDefaultInstance();
  TPlunderMineInfoNotify::default_instance_->InitAsDefaultInstance();
  TPlunderRecordNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fCrossPlunder_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fCrossPlunder_2eproto {
  StaticDescriptorInitializer_net_2fCrossPlunder_2eproto() {
    protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  }
} static_descriptor_initializer_net_2fCrossPlunder_2eproto_;
const ::google::protobuf::EnumDescriptor* EMineGiveupResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMineGiveupResult_descriptor_;
}
bool EMineGiveupResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPlunderGatherResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPlunderGatherResult_descriptor_;
}
bool EPlunderGatherResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPlunderAttackResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPlunderAttackResult_descriptor_;
}
bool EPlunderAttackResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPlunderEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPlunderEvent_descriptor_;
}
bool EPlunderEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderMinePos::kAreaLevelFieldNumber;
const int TPlunderMinePos::kPageFieldNumber;
const int TPlunderMinePos::kMineIdFieldNumber;
#endif  // !_MSC_VER

TPlunderMinePos::TPlunderMinePos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderMinePos)
}

void TPlunderMinePos::InitAsDefaultInstance() {
}

TPlunderMinePos::TPlunderMinePos(const TPlunderMinePos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderMinePos)
}

void TPlunderMinePos::SharedCtor() {
  _cached_size_ = 0;
  arealevel_ = 0u;
  page_ = 0u;
  mineid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderMinePos::~TPlunderMinePos() {
  // @@protoc_insertion_point(destructor:pb.TPlunderMinePos)
  SharedDtor();
}

void TPlunderMinePos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderMinePos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderMinePos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderMinePos_descriptor_;
}

const TPlunderMinePos& TPlunderMinePos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderMinePos* TPlunderMinePos::default_instance_ = NULL;

TPlunderMinePos* TPlunderMinePos::New() const {
  return new TPlunderMinePos;
}

void TPlunderMinePos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderMinePos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(arealevel_, mineid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderMinePos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderMinePos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AreaLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arealevel_)));
          set_has_arealevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Page;
        break;
      }

      // optional uint32 Page = 2;
      case 2: {
        if (tag == 16) {
         parse_Page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MineId;
        break;
      }

      // optional uint32 MineId = 3;
      case 3: {
        if (tag == 24) {
         parse_MineId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mineid_)));
          set_has_mineid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderMinePos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderMinePos)
  return false;
#undef DO_
}

void TPlunderMinePos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderMinePos)
  // optional uint32 AreaLevel = 1;
  if (has_arealevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->arealevel(), output);
  }

  // optional uint32 Page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->page(), output);
  }

  // optional uint32 MineId = 3;
  if (has_mineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mineid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderMinePos)
}

::google::protobuf::uint8* TPlunderMinePos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderMinePos)
  // optional uint32 AreaLevel = 1;
  if (has_arealevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->arealevel(), target);
  }

  // optional uint32 Page = 2;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->page(), target);
  }

  // optional uint32 MineId = 3;
  if (has_mineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mineid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderMinePos)
  return target;
}

int TPlunderMinePos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AreaLevel = 1;
    if (has_arealevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arealevel());
    }

    // optional uint32 Page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

    // optional uint32 MineId = 3;
    if (has_mineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mineid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderMinePos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderMinePos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderMinePos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderMinePos::MergeFrom(const TPlunderMinePos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arealevel()) {
      set_arealevel(from.arealevel());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_mineid()) {
      set_mineid(from.mineid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderMinePos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderMinePos::CopyFrom(const TPlunderMinePos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderMinePos::IsInitialized() const {

  return true;
}

void TPlunderMinePos::Swap(TPlunderMinePos* other) {
  if (other != this) {
    std::swap(arealevel_, other->arealevel_);
    std::swap(page_, other->page_);
    std::swap(mineid_, other->mineid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderMinePos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderMinePos_descriptor_;
  metadata.reflection = TPlunderMinePos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderBaseInfo::kMyMineInfoFieldNumber;
const int TPlunderBaseInfo::kPlunderNumFieldNumber;
const int TPlunderBaseInfo::kLastPlunderTimeFieldNumber;
const int TPlunderBaseInfo::kTotalScoreFieldNumber;
const int TPlunderBaseInfo::kMaxAreaLevelFieldNumber;
const int TPlunderBaseInfo::kDefeatedNumFieldNumber;
const int TPlunderBaseInfo::kEnablePlunderTimeFieldNumber;
#endif  // !_MSC_VER

TPlunderBaseInfo::TPlunderBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderBaseInfo)
}

void TPlunderBaseInfo::InitAsDefaultInstance() {
  mymineinfo_ = const_cast< ::pb::TPlunderMineInfo*>(&::pb::TPlunderMineInfo::default_instance());
}

TPlunderBaseInfo::TPlunderBaseInfo(const TPlunderBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderBaseInfo)
}

void TPlunderBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  mymineinfo_ = NULL;
  plundernum_ = 0u;
  lastplundertime_ = GOOGLE_LONGLONG(0);
  totalscore_ = 0u;
  maxarealevel_ = 0u;
  defeatednum_ = 0u;
  enableplundertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderBaseInfo::~TPlunderBaseInfo() {
  // @@protoc_insertion_point(destructor:pb.TPlunderBaseInfo)
  SharedDtor();
}

void TPlunderBaseInfo::SharedDtor() {
  if (this != default_instance_) {
    delete mymineinfo_;
  }
}

void TPlunderBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderBaseInfo_descriptor_;
}

const TPlunderBaseInfo& TPlunderBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderBaseInfo* TPlunderBaseInfo::default_instance_ = NULL;

TPlunderBaseInfo* TPlunderBaseInfo::New() const {
  return new TPlunderBaseInfo;
}

void TPlunderBaseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderBaseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(lastplundertime_, enableplundertime_);
    if (has_mymineinfo()) {
      if (mymineinfo_ != NULL) mymineinfo_->::pb::TPlunderMineInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPlunderMineInfo MyMineInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mymineinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PlunderNum;
        break;
      }

      // optional uint32 PlunderNum = 2;
      case 2: {
        if (tag == 16) {
         parse_PlunderNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plundernum_)));
          set_has_plundernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LastPlunderTime;
        break;
      }

      // optional int64 LastPlunderTime = 3;
      case 3: {
        if (tag == 24) {
         parse_LastPlunderTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastplundertime_)));
          set_has_lastplundertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TotalScore;
        break;
      }

      // optional uint32 TotalScore = 4;
      case 4: {
        if (tag == 32) {
         parse_TotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MaxAreaLevel;
        break;
      }

      // optional uint32 MaxAreaLevel = 5;
      case 5: {
        if (tag == 40) {
         parse_MaxAreaLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxarealevel_)));
          set_has_maxarealevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_DefeatedNum;
        break;
      }

      // optional uint32 DefeatedNum = 6;
      case 6: {
        if (tag == 48) {
         parse_DefeatedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defeatednum_)));
          set_has_defeatednum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_EnablePlunderTime;
        break;
      }

      // optional int64 EnablePlunderTime = 7;
      case 7: {
        if (tag == 56) {
         parse_EnablePlunderTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &enableplundertime_)));
          set_has_enableplundertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderBaseInfo)
  return false;
#undef DO_
}

void TPlunderBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderBaseInfo)
  // optional .pb.TPlunderMineInfo MyMineInfo = 1;
  if (has_mymineinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mymineinfo(), output);
  }

  // optional uint32 PlunderNum = 2;
  if (has_plundernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->plundernum(), output);
  }

  // optional int64 LastPlunderTime = 3;
  if (has_lastplundertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lastplundertime(), output);
  }

  // optional uint32 TotalScore = 4;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totalscore(), output);
  }

  // optional uint32 MaxAreaLevel = 5;
  if (has_maxarealevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxarealevel(), output);
  }

  // optional uint32 DefeatedNum = 6;
  if (has_defeatednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->defeatednum(), output);
  }

  // optional int64 EnablePlunderTime = 7;
  if (has_enableplundertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->enableplundertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderBaseInfo)
}

::google::protobuf::uint8* TPlunderBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderBaseInfo)
  // optional .pb.TPlunderMineInfo MyMineInfo = 1;
  if (has_mymineinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mymineinfo(), target);
  }

  // optional uint32 PlunderNum = 2;
  if (has_plundernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->plundernum(), target);
  }

  // optional int64 LastPlunderTime = 3;
  if (has_lastplundertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lastplundertime(), target);
  }

  // optional uint32 TotalScore = 4;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->totalscore(), target);
  }

  // optional uint32 MaxAreaLevel = 5;
  if (has_maxarealevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxarealevel(), target);
  }

  // optional uint32 DefeatedNum = 6;
  if (has_defeatednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->defeatednum(), target);
  }

  // optional int64 EnablePlunderTime = 7;
  if (has_enableplundertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->enableplundertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderBaseInfo)
  return target;
}

int TPlunderBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPlunderMineInfo MyMineInfo = 1;
    if (has_mymineinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mymineinfo());
    }

    // optional uint32 PlunderNum = 2;
    if (has_plundernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plundernum());
    }

    // optional int64 LastPlunderTime = 3;
    if (has_lastplundertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastplundertime());
    }

    // optional uint32 TotalScore = 4;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalscore());
    }

    // optional uint32 MaxAreaLevel = 5;
    if (has_maxarealevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxarealevel());
    }

    // optional uint32 DefeatedNum = 6;
    if (has_defeatednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defeatednum());
    }

    // optional int64 EnablePlunderTime = 7;
    if (has_enableplundertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->enableplundertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderBaseInfo::MergeFrom(const TPlunderBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mymineinfo()) {
      mutable_mymineinfo()->::pb::TPlunderMineInfo::MergeFrom(from.mymineinfo());
    }
    if (from.has_plundernum()) {
      set_plundernum(from.plundernum());
    }
    if (from.has_lastplundertime()) {
      set_lastplundertime(from.lastplundertime());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
    if (from.has_maxarealevel()) {
      set_maxarealevel(from.maxarealevel());
    }
    if (from.has_defeatednum()) {
      set_defeatednum(from.defeatednum());
    }
    if (from.has_enableplundertime()) {
      set_enableplundertime(from.enableplundertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderBaseInfo::CopyFrom(const TPlunderBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderBaseInfo::IsInitialized() const {

  return true;
}

void TPlunderBaseInfo::Swap(TPlunderBaseInfo* other) {
  if (other != this) {
    std::swap(mymineinfo_, other->mymineinfo_);
    std::swap(plundernum_, other->plundernum_);
    std::swap(lastplundertime_, other->lastplundertime_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(maxarealevel_, other->maxarealevel_);
    std::swap(defeatednum_, other->defeatednum_);
    std::swap(enableplundertime_, other->enableplundertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderBaseInfo_descriptor_;
  metadata.reflection = TPlunderBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderMapInfo::kAreaLevelFieldNumber;
const int TPlunderMapInfo::kMineNumFieldNumber;
const int TPlunderMapInfo::kUserNumFieldNumber;
const int TPlunderMapInfo::kPageNumFieldNumber;
#endif  // !_MSC_VER

TPlunderMapInfo::TPlunderMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderMapInfo)
}

void TPlunderMapInfo::InitAsDefaultInstance() {
}

TPlunderMapInfo::TPlunderMapInfo(const TPlunderMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderMapInfo)
}

void TPlunderMapInfo::SharedCtor() {
  _cached_size_ = 0;
  arealevel_ = 0u;
  minenum_ = 0u;
  usernum_ = 0u;
  pagenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderMapInfo::~TPlunderMapInfo() {
  // @@protoc_insertion_point(destructor:pb.TPlunderMapInfo)
  SharedDtor();
}

void TPlunderMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderMapInfo_descriptor_;
}

const TPlunderMapInfo& TPlunderMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderMapInfo* TPlunderMapInfo::default_instance_ = NULL;

TPlunderMapInfo* TPlunderMapInfo::New() const {
  return new TPlunderMapInfo;
}

void TPlunderMapInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderMapInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(arealevel_, pagenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderMapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AreaLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arealevel_)));
          set_has_arealevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MineNum;
        break;
      }

      // optional uint32 MineNum = 2;
      case 2: {
        if (tag == 16) {
         parse_MineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minenum_)));
          set_has_minenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UserNum;
        break;
      }

      // optional uint32 UserNum = 3;
      case 3: {
        if (tag == 24) {
         parse_UserNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PageNum;
        break;
      }

      // optional uint32 PageNum = 4;
      case 4: {
        if (tag == 32) {
         parse_PageNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagenum_)));
          set_has_pagenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderMapInfo)
  return false;
#undef DO_
}

void TPlunderMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderMapInfo)
  // optional uint32 AreaLevel = 1;
  if (has_arealevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->arealevel(), output);
  }

  // optional uint32 MineNum = 2;
  if (has_minenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minenum(), output);
  }

  // optional uint32 UserNum = 3;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usernum(), output);
  }

  // optional uint32 PageNum = 4;
  if (has_pagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pagenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderMapInfo)
}

::google::protobuf::uint8* TPlunderMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderMapInfo)
  // optional uint32 AreaLevel = 1;
  if (has_arealevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->arealevel(), target);
  }

  // optional uint32 MineNum = 2;
  if (has_minenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minenum(), target);
  }

  // optional uint32 UserNum = 3;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usernum(), target);
  }

  // optional uint32 PageNum = 4;
  if (has_pagenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pagenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderMapInfo)
  return target;
}

int TPlunderMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AreaLevel = 1;
    if (has_arealevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arealevel());
    }

    // optional uint32 MineNum = 2;
    if (has_minenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minenum());
    }

    // optional uint32 UserNum = 3;
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usernum());
    }

    // optional uint32 PageNum = 4;
    if (has_pagenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderMapInfo::MergeFrom(const TPlunderMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arealevel()) {
      set_arealevel(from.arealevel());
    }
    if (from.has_minenum()) {
      set_minenum(from.minenum());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
    if (from.has_pagenum()) {
      set_pagenum(from.pagenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderMapInfo::CopyFrom(const TPlunderMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderMapInfo::IsInitialized() const {

  return true;
}

void TPlunderMapInfo::Swap(TPlunderMapInfo* other) {
  if (other != this) {
    std::swap(arealevel_, other->arealevel_);
    std::swap(minenum_, other->minenum_);
    std::swap(usernum_, other->usernum_);
    std::swap(pagenum_, other->pagenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderMapInfo_descriptor_;
  metadata.reflection = TPlunderMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderPageInfo::kAreaLevelFieldNumber;
const int TPlunderPageInfo::kPageFieldNumber;
const int TPlunderPageInfo::kArrMineInfoFieldNumber;
#endif  // !_MSC_VER

TPlunderPageInfo::TPlunderPageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderPageInfo)
}

void TPlunderPageInfo::InitAsDefaultInstance() {
}

TPlunderPageInfo::TPlunderPageInfo(const TPlunderPageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderPageInfo)
}

void TPlunderPageInfo::SharedCtor() {
  _cached_size_ = 0;
  arealevel_ = 0u;
  page_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderPageInfo::~TPlunderPageInfo() {
  // @@protoc_insertion_point(destructor:pb.TPlunderPageInfo)
  SharedDtor();
}

void TPlunderPageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderPageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderPageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderPageInfo_descriptor_;
}

const TPlunderPageInfo& TPlunderPageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderPageInfo* TPlunderPageInfo::default_instance_ = NULL;

TPlunderPageInfo* TPlunderPageInfo::New() const {
  return new TPlunderPageInfo;
}

void TPlunderPageInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderPageInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(arealevel_, page_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrmineinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderPageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderPageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AreaLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arealevel_)));
          set_has_arealevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Page;
        break;
      }

      // optional uint32 Page = 2;
      case 2: {
        if (tag == 16) {
         parse_Page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrMineInfo;
        break;
      }

      // repeated .pb.TPlunderMineInfo ArrMineInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrMineInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrmineinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrMineInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderPageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderPageInfo)
  return false;
#undef DO_
}

void TPlunderPageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderPageInfo)
  // optional uint32 AreaLevel = 1;
  if (has_arealevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->arealevel(), output);
  }

  // optional uint32 Page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->page(), output);
  }

  // repeated .pb.TPlunderMineInfo ArrMineInfo = 3;
  for (int i = 0; i < this->arrmineinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrmineinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderPageInfo)
}

::google::protobuf::uint8* TPlunderPageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderPageInfo)
  // optional uint32 AreaLevel = 1;
  if (has_arealevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->arealevel(), target);
  }

  // optional uint32 Page = 2;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->page(), target);
  }

  // repeated .pb.TPlunderMineInfo ArrMineInfo = 3;
  for (int i = 0; i < this->arrmineinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrmineinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderPageInfo)
  return target;
}

int TPlunderPageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AreaLevel = 1;
    if (has_arealevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arealevel());
    }

    // optional uint32 Page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

  }
  // repeated .pb.TPlunderMineInfo ArrMineInfo = 3;
  total_size += 1 * this->arrmineinfo_size();
  for (int i = 0; i < this->arrmineinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrmineinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderPageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderPageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderPageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderPageInfo::MergeFrom(const TPlunderPageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrmineinfo_.MergeFrom(from.arrmineinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arealevel()) {
      set_arealevel(from.arealevel());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderPageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderPageInfo::CopyFrom(const TPlunderPageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderPageInfo::IsInitialized() const {

  return true;
}

void TPlunderPageInfo::Swap(TPlunderPageInfo* other) {
  if (other != this) {
    std::swap(arealevel_, other->arealevel_);
    std::swap(page_, other->page_);
    arrmineinfo_.Swap(&other->arrmineinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderPageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderPageInfo_descriptor_;
  metadata.reflection = TPlunderPageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderEnemyInfo::kUidFieldNumber;
const int TPlunderEnemyInfo::kHateNumFieldNumber;
const int TPlunderEnemyInfo::kFirstTimeFieldNumber;
const int TPlunderEnemyInfo::kPlunderTimeFieldNumber;
const int TPlunderEnemyInfo::kHateScoreFieldNumber;
const int TPlunderEnemyInfo::kRevengedFieldNumber;
const int TPlunderEnemyInfo::kHateSeniorRewardScoreFieldNumber;
const int TPlunderEnemyInfo::kUserInfoFieldNumber;
#endif  // !_MSC_VER

TPlunderEnemyInfo::TPlunderEnemyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderEnemyInfo)
}

void TPlunderEnemyInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfoWithAlly*>(&::pb::TUserSimpleInfoWithAlly::default_instance());
}

TPlunderEnemyInfo::TPlunderEnemyInfo(const TPlunderEnemyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderEnemyInfo)
}

void TPlunderEnemyInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  hatenum_ = 0u;
  firsttime_ = GOOGLE_LONGLONG(0);
  plundertime_ = GOOGLE_LONGLONG(0);
  hatescore_ = 0u;
  revenged_ = false;
  hateseniorrewardscore_ = 0u;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderEnemyInfo::~TPlunderEnemyInfo() {
  // @@protoc_insertion_point(destructor:pb.TPlunderEnemyInfo)
  SharedDtor();
}

void TPlunderEnemyInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TPlunderEnemyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderEnemyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderEnemyInfo_descriptor_;
}

const TPlunderEnemyInfo& TPlunderEnemyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderEnemyInfo* TPlunderEnemyInfo::default_instance_ = NULL;

TPlunderEnemyInfo* TPlunderEnemyInfo::New() const {
  return new TPlunderEnemyInfo;
}

void TPlunderEnemyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderEnemyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, hateseniorrewardscore_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfoWithAlly::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderEnemyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderEnemyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HateNum;
        break;
      }

      // optional uint32 HateNum = 2;
      case 2: {
        if (tag == 16) {
         parse_HateNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hatenum_)));
          set_has_hatenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FirstTime;
        break;
      }

      // optional int64 FirstTime = 3;
      case 3: {
        if (tag == 24) {
         parse_FirstTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &firsttime_)));
          set_has_firsttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PlunderTime;
        break;
      }

      // optional int64 PlunderTime = 4;
      case 4: {
        if (tag == 32) {
         parse_PlunderTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &plundertime_)));
          set_has_plundertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_HateScore;
        break;
      }

      // optional uint32 HateScore = 5;
      case 5: {
        if (tag == 40) {
         parse_HateScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hatescore_)));
          set_has_hatescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Revenged;
        break;
      }

      // optional bool Revenged = 6;
      case 6: {
        if (tag == 48) {
         parse_Revenged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &revenged_)));
          set_has_revenged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_HateSeniorRewardScore;
        break;
      }

      // optional uint32 HateSeniorRewardScore = 7;
      case 7: {
        if (tag == 56) {
         parse_HateSeniorRewardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hateseniorrewardscore_)));
          set_has_hateseniorrewardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfoWithAlly UserInfo = 10;
      case 10: {
        if (tag == 82) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderEnemyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderEnemyInfo)
  return false;
#undef DO_
}

void TPlunderEnemyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderEnemyInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 HateNum = 2;
  if (has_hatenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hatenum(), output);
  }

  // optional int64 FirstTime = 3;
  if (has_firsttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->firsttime(), output);
  }

  // optional int64 PlunderTime = 4;
  if (has_plundertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->plundertime(), output);
  }

  // optional uint32 HateScore = 5;
  if (has_hatescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hatescore(), output);
  }

  // optional bool Revenged = 6;
  if (has_revenged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->revenged(), output);
  }

  // optional uint32 HateSeniorRewardScore = 7;
  if (has_hateseniorrewardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hateseniorrewardscore(), output);
  }

  // optional .pb.TUserSimpleInfoWithAlly UserInfo = 10;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderEnemyInfo)
}

::google::protobuf::uint8* TPlunderEnemyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderEnemyInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 HateNum = 2;
  if (has_hatenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hatenum(), target);
  }

  // optional int64 FirstTime = 3;
  if (has_firsttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->firsttime(), target);
  }

  // optional int64 PlunderTime = 4;
  if (has_plundertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->plundertime(), target);
  }

  // optional uint32 HateScore = 5;
  if (has_hatescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hatescore(), target);
  }

  // optional bool Revenged = 6;
  if (has_revenged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->revenged(), target);
  }

  // optional uint32 HateSeniorRewardScore = 7;
  if (has_hateseniorrewardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hateseniorrewardscore(), target);
  }

  // optional .pb.TUserSimpleInfoWithAlly UserInfo = 10;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderEnemyInfo)
  return target;
}

int TPlunderEnemyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 HateNum = 2;
    if (has_hatenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hatenum());
    }

    // optional int64 FirstTime = 3;
    if (has_firsttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->firsttime());
    }

    // optional int64 PlunderTime = 4;
    if (has_plundertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->plundertime());
    }

    // optional uint32 HateScore = 5;
    if (has_hatescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hatescore());
    }

    // optional bool Revenged = 6;
    if (has_revenged()) {
      total_size += 1 + 1;
    }

    // optional uint32 HateSeniorRewardScore = 7;
    if (has_hateseniorrewardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hateseniorrewardscore());
    }

    // optional .pb.TUserSimpleInfoWithAlly UserInfo = 10;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderEnemyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderEnemyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderEnemyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderEnemyInfo::MergeFrom(const TPlunderEnemyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_hatenum()) {
      set_hatenum(from.hatenum());
    }
    if (from.has_firsttime()) {
      set_firsttime(from.firsttime());
    }
    if (from.has_plundertime()) {
      set_plundertime(from.plundertime());
    }
    if (from.has_hatescore()) {
      set_hatescore(from.hatescore());
    }
    if (from.has_revenged()) {
      set_revenged(from.revenged());
    }
    if (from.has_hateseniorrewardscore()) {
      set_hateseniorrewardscore(from.hateseniorrewardscore());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfoWithAlly::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderEnemyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderEnemyInfo::CopyFrom(const TPlunderEnemyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderEnemyInfo::IsInitialized() const {

  return true;
}

void TPlunderEnemyInfo::Swap(TPlunderEnemyInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(hatenum_, other->hatenum_);
    std::swap(firsttime_, other->firsttime_);
    std::swap(plundertime_, other->plundertime_);
    std::swap(hatescore_, other->hatescore_);
    std::swap(revenged_, other->revenged_);
    std::swap(hateseniorrewardscore_, other->hateseniorrewardscore_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderEnemyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderEnemyInfo_descriptor_;
  metadata.reflection = TPlunderEnemyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderRecordInfo::kRecordIdFieldNumber;
const int TPlunderRecordInfo::kRecordTimeFieldNumber;
const int TPlunderRecordInfo::kMinePosFieldNumber;
const int TPlunderRecordInfo::kAtkUserInfoFieldNumber;
const int TPlunderRecordInfo::kDefUserInfoFieldNumber;
const int TPlunderRecordInfo::kStarLevelFieldNumber;
const int TPlunderRecordInfo::kNoRewardScoreFieldNumber;
const int TPlunderRecordInfo::kAtkRewardScoreFieldNumber;
const int TPlunderRecordInfo::kDefRewardScoreFieldNumber;
const int TPlunderRecordInfo::kSysRewardScoreFieldNumber;
const int TPlunderRecordInfo::kAtkSeniorRewardArrFieldNumber;
const int TPlunderRecordInfo::kDefSeniorRewardArrFieldNumber;
const int TPlunderRecordInfo::kSysSeniorRewardArrFieldNumber;
#endif  // !_MSC_VER

TPlunderRecordInfo::TPlunderRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderRecordInfo)
}

void TPlunderRecordInfo::InitAsDefaultInstance() {
  minepos_ = const_cast< ::pb::TPlunderMinePos*>(&::pb::TPlunderMinePos::default_instance());
  atkuserinfo_ = const_cast< ::pb::TUserSimpleInfoWithAlly*>(&::pb::TUserSimpleInfoWithAlly::default_instance());
  defuserinfo_ = const_cast< ::pb::TUserSimpleInfoWithAlly*>(&::pb::TUserSimpleInfoWithAlly::default_instance());
}

TPlunderRecordInfo::TPlunderRecordInfo(const TPlunderRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderRecordInfo)
}

void TPlunderRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  recordid_ = GOOGLE_ULONGLONG(0);
  recordtime_ = GOOGLE_LONGLONG(0);
  minepos_ = NULL;
  atkuserinfo_ = NULL;
  defuserinfo_ = NULL;
  starlevel_ = 0u;
  norewardscore_ = false;
  atkrewardscore_ = 0u;
  defrewardscore_ = 0u;
  sysrewardscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderRecordInfo::~TPlunderRecordInfo() {
  // @@protoc_insertion_point(destructor:pb.TPlunderRecordInfo)
  SharedDtor();
}

void TPlunderRecordInfo::SharedDtor() {
  if (this != default_instance_) {
    delete minepos_;
    delete atkuserinfo_;
    delete defuserinfo_;
  }
}

void TPlunderRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderRecordInfo_descriptor_;
}

const TPlunderRecordInfo& TPlunderRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderRecordInfo* TPlunderRecordInfo::default_instance_ = NULL;

TPlunderRecordInfo* TPlunderRecordInfo::New() const {
  return new TPlunderRecordInfo;
}

void TPlunderRecordInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderRecordInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(recordid_, recordtime_);
    ZR_(starlevel_, atkrewardscore_);
    if (has_minepos()) {
      if (minepos_ != NULL) minepos_->::pb::TPlunderMinePos::Clear();
    }
    if (has_atkuserinfo()) {
      if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfoWithAlly::Clear();
    }
    if (has_defuserinfo()) {
      if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfoWithAlly::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    defrewardscore_ = 0u;
    sysrewardscore_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  atkseniorrewardarr_.Clear();
  defseniorrewardarr_.Clear();
  sysseniorrewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderRecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RecordId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RecordTime;
        break;
      }

      // optional int64 RecordTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MinePos;
        break;
      }

      // optional .pb.TPlunderMinePos MinePos = 3;
      case 3: {
        if (tag == 26) {
         parse_MinePos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minepos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AtkUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfoWithAlly AtkUserInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_AtkUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DefUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfoWithAlly DefUserInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_DefUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_StarLevel;
        break;
      }

      // optional uint32 StarLevel = 6;
      case 6: {
        if (tag == 48) {
         parse_StarLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlevel_)));
          set_has_starlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_NoRewardScore;
        break;
      }

      // optional bool NoRewardScore = 9;
      case 9: {
        if (tag == 72) {
         parse_NoRewardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &norewardscore_)));
          set_has_norewardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_AtkRewardScore;
        break;
      }

      // optional uint32 AtkRewardScore = 10;
      case 10: {
        if (tag == 80) {
         parse_AtkRewardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkrewardscore_)));
          set_has_atkrewardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_DefRewardScore;
        break;
      }

      // optional uint32 DefRewardScore = 11;
      case 11: {
        if (tag == 88) {
         parse_DefRewardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defrewardscore_)));
          set_has_defrewardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_SysRewardScore;
        break;
      }

      // optional uint32 SysRewardScore = 12;
      case 12: {
        if (tag == 96) {
         parse_SysRewardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sysrewardscore_)));
          set_has_sysrewardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_AtkSeniorRewardArr;
        break;
      }

      // repeated .pb.TCommonReward AtkSeniorRewardArr = 13;
      case 13: {
        if (tag == 106) {
         parse_AtkSeniorRewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atkseniorrewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_AtkSeniorRewardArr;
        if (input->ExpectTag(114)) goto parse_DefSeniorRewardArr;
        break;
      }

      // repeated .pb.TCommonReward DefSeniorRewardArr = 14;
      case 14: {
        if (tag == 114) {
         parse_DefSeniorRewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defseniorrewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_DefSeniorRewardArr;
        if (input->ExpectTag(122)) goto parse_SysSeniorRewardArr;
        break;
      }

      // repeated .pb.TCommonReward SysSeniorRewardArr = 15;
      case 15: {
        if (tag == 122) {
         parse_SysSeniorRewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sysseniorrewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_SysSeniorRewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderRecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderRecordInfo)
  return false;
#undef DO_
}

void TPlunderRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderRecordInfo)
  // optional uint64 RecordId = 1;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->recordid(), output);
  }

  // optional int64 RecordTime = 2;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->recordtime(), output);
  }

  // optional .pb.TPlunderMinePos MinePos = 3;
  if (has_minepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->minepos(), output);
  }

  // optional .pb.TUserSimpleInfoWithAlly AtkUserInfo = 4;
  if (has_atkuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->atkuserinfo(), output);
  }

  // optional .pb.TUserSimpleInfoWithAlly DefUserInfo = 5;
  if (has_defuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->defuserinfo(), output);
  }

  // optional uint32 StarLevel = 6;
  if (has_starlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->starlevel(), output);
  }

  // optional bool NoRewardScore = 9;
  if (has_norewardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->norewardscore(), output);
  }

  // optional uint32 AtkRewardScore = 10;
  if (has_atkrewardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->atkrewardscore(), output);
  }

  // optional uint32 DefRewardScore = 11;
  if (has_defrewardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->defrewardscore(), output);
  }

  // optional uint32 SysRewardScore = 12;
  if (has_sysrewardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sysrewardscore(), output);
  }

  // repeated .pb.TCommonReward AtkSeniorRewardArr = 13;
  for (int i = 0; i < this->atkseniorrewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->atkseniorrewardarr(i), output);
  }

  // repeated .pb.TCommonReward DefSeniorRewardArr = 14;
  for (int i = 0; i < this->defseniorrewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->defseniorrewardarr(i), output);
  }

  // repeated .pb.TCommonReward SysSeniorRewardArr = 15;
  for (int i = 0; i < this->sysseniorrewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->sysseniorrewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderRecordInfo)
}

::google::protobuf::uint8* TPlunderRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderRecordInfo)
  // optional uint64 RecordId = 1;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->recordid(), target);
  }

  // optional int64 RecordTime = 2;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->recordtime(), target);
  }

  // optional .pb.TPlunderMinePos MinePos = 3;
  if (has_minepos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->minepos(), target);
  }

  // optional .pb.TUserSimpleInfoWithAlly AtkUserInfo = 4;
  if (has_atkuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->atkuserinfo(), target);
  }

  // optional .pb.TUserSimpleInfoWithAlly DefUserInfo = 5;
  if (has_defuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->defuserinfo(), target);
  }

  // optional uint32 StarLevel = 6;
  if (has_starlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->starlevel(), target);
  }

  // optional bool NoRewardScore = 9;
  if (has_norewardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->norewardscore(), target);
  }

  // optional uint32 AtkRewardScore = 10;
  if (has_atkrewardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->atkrewardscore(), target);
  }

  // optional uint32 DefRewardScore = 11;
  if (has_defrewardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->defrewardscore(), target);
  }

  // optional uint32 SysRewardScore = 12;
  if (has_sysrewardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sysrewardscore(), target);
  }

  // repeated .pb.TCommonReward AtkSeniorRewardArr = 13;
  for (int i = 0; i < this->atkseniorrewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->atkseniorrewardarr(i), target);
  }

  // repeated .pb.TCommonReward DefSeniorRewardArr = 14;
  for (int i = 0; i < this->defseniorrewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->defseniorrewardarr(i), target);
  }

  // repeated .pb.TCommonReward SysSeniorRewardArr = 15;
  for (int i = 0; i < this->sysseniorrewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->sysseniorrewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderRecordInfo)
  return target;
}

int TPlunderRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RecordId = 1;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordid());
    }

    // optional int64 RecordTime = 2;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recordtime());
    }

    // optional .pb.TPlunderMinePos MinePos = 3;
    if (has_minepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->minepos());
    }

    // optional .pb.TUserSimpleInfoWithAlly AtkUserInfo = 4;
    if (has_atkuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkuserinfo());
    }

    // optional .pb.TUserSimpleInfoWithAlly DefUserInfo = 5;
    if (has_defuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defuserinfo());
    }

    // optional uint32 StarLevel = 6;
    if (has_starlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlevel());
    }

    // optional bool NoRewardScore = 9;
    if (has_norewardscore()) {
      total_size += 1 + 1;
    }

    // optional uint32 AtkRewardScore = 10;
    if (has_atkrewardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkrewardscore());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 DefRewardScore = 11;
    if (has_defrewardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defrewardscore());
    }

    // optional uint32 SysRewardScore = 12;
    if (has_sysrewardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sysrewardscore());
    }

  }
  // repeated .pb.TCommonReward AtkSeniorRewardArr = 13;
  total_size += 1 * this->atkseniorrewardarr_size();
  for (int i = 0; i < this->atkseniorrewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atkseniorrewardarr(i));
  }

  // repeated .pb.TCommonReward DefSeniorRewardArr = 14;
  total_size += 1 * this->defseniorrewardarr_size();
  for (int i = 0; i < this->defseniorrewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defseniorrewardarr(i));
  }

  // repeated .pb.TCommonReward SysSeniorRewardArr = 15;
  total_size += 1 * this->sysseniorrewardarr_size();
  for (int i = 0; i < this->sysseniorrewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sysseniorrewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderRecordInfo::MergeFrom(const TPlunderRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  atkseniorrewardarr_.MergeFrom(from.atkseniorrewardarr_);
  defseniorrewardarr_.MergeFrom(from.defseniorrewardarr_);
  sysseniorrewardarr_.MergeFrom(from.sysseniorrewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_minepos()) {
      mutable_minepos()->::pb::TPlunderMinePos::MergeFrom(from.minepos());
    }
    if (from.has_atkuserinfo()) {
      mutable_atkuserinfo()->::pb::TUserSimpleInfoWithAlly::MergeFrom(from.atkuserinfo());
    }
    if (from.has_defuserinfo()) {
      mutable_defuserinfo()->::pb::TUserSimpleInfoWithAlly::MergeFrom(from.defuserinfo());
    }
    if (from.has_starlevel()) {
      set_starlevel(from.starlevel());
    }
    if (from.has_norewardscore()) {
      set_norewardscore(from.norewardscore());
    }
    if (from.has_atkrewardscore()) {
      set_atkrewardscore(from.atkrewardscore());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_defrewardscore()) {
      set_defrewardscore(from.defrewardscore());
    }
    if (from.has_sysrewardscore()) {
      set_sysrewardscore(from.sysrewardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderRecordInfo::CopyFrom(const TPlunderRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderRecordInfo::IsInitialized() const {

  return true;
}

void TPlunderRecordInfo::Swap(TPlunderRecordInfo* other) {
  if (other != this) {
    std::swap(recordid_, other->recordid_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(minepos_, other->minepos_);
    std::swap(atkuserinfo_, other->atkuserinfo_);
    std::swap(defuserinfo_, other->defuserinfo_);
    std::swap(starlevel_, other->starlevel_);
    std::swap(norewardscore_, other->norewardscore_);
    std::swap(atkrewardscore_, other->atkrewardscore_);
    std::swap(defrewardscore_, other->defrewardscore_);
    std::swap(sysrewardscore_, other->sysrewardscore_);
    atkseniorrewardarr_.Swap(&other->atkseniorrewardarr_);
    defseniorrewardarr_.Swap(&other->defseniorrewardarr_);
    sysseniorrewardarr_.Swap(&other->sysseniorrewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderRecordInfo_descriptor_;
  metadata.reflection = TPlunderRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderRevengeRecordInfo::kRecordIdFieldNumber;
const int TPlunderRevengeRecordInfo::kRecordTimeFieldNumber;
const int TPlunderRevengeRecordInfo::kStarLevelFieldNumber;
const int TPlunderRevengeRecordInfo::kScoreFieldNumber;
const int TPlunderRevengeRecordInfo::kUserInfoFieldNumber;
const int TPlunderRevengeRecordInfo::kSeniorRewardArrFieldNumber;
#endif  // !_MSC_VER

TPlunderRevengeRecordInfo::TPlunderRevengeRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderRevengeRecordInfo)
}

void TPlunderRevengeRecordInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfoWithAlly*>(&::pb::TUserSimpleInfoWithAlly::default_instance());
}

TPlunderRevengeRecordInfo::TPlunderRevengeRecordInfo(const TPlunderRevengeRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderRevengeRecordInfo)
}

void TPlunderRevengeRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  recordid_ = GOOGLE_ULONGLONG(0);
  recordtime_ = GOOGLE_LONGLONG(0);
  starlevel_ = 0u;
  score_ = 0u;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderRevengeRecordInfo::~TPlunderRevengeRecordInfo() {
  // @@protoc_insertion_point(destructor:pb.TPlunderRevengeRecordInfo)
  SharedDtor();
}

void TPlunderRevengeRecordInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TPlunderRevengeRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderRevengeRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderRevengeRecordInfo_descriptor_;
}

const TPlunderRevengeRecordInfo& TPlunderRevengeRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderRevengeRecordInfo* TPlunderRevengeRecordInfo::default_instance_ = NULL;

TPlunderRevengeRecordInfo* TPlunderRevengeRecordInfo::New() const {
  return new TPlunderRevengeRecordInfo;
}

void TPlunderRevengeRecordInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderRevengeRecordInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(recordid_, score_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfoWithAlly::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  seniorrewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderRevengeRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderRevengeRecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RecordId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RecordTime;
        break;
      }

      // optional int64 RecordTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_StarLevel;
        break;
      }

      // optional uint32 StarLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_StarLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlevel_)));
          set_has_starlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 4;
      case 4: {
        if (tag == 32) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfoWithAlly UserInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SeniorRewardArr;
        break;
      }

      // repeated .pb.TCommonReward SeniorRewardArr = 6;
      case 6: {
        if (tag == 50) {
         parse_SeniorRewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seniorrewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SeniorRewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderRevengeRecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderRevengeRecordInfo)
  return false;
#undef DO_
}

void TPlunderRevengeRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderRevengeRecordInfo)
  // optional uint64 RecordId = 1;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->recordid(), output);
  }

  // optional int64 RecordTime = 2;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->recordtime(), output);
  }

  // optional uint32 StarLevel = 3;
  if (has_starlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->starlevel(), output);
  }

  // optional uint32 Score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }

  // optional .pb.TUserSimpleInfoWithAlly UserInfo = 5;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userinfo(), output);
  }

  // repeated .pb.TCommonReward SeniorRewardArr = 6;
  for (int i = 0; i < this->seniorrewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->seniorrewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderRevengeRecordInfo)
}

::google::protobuf::uint8* TPlunderRevengeRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderRevengeRecordInfo)
  // optional uint64 RecordId = 1;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->recordid(), target);
  }

  // optional int64 RecordTime = 2;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->recordtime(), target);
  }

  // optional uint32 StarLevel = 3;
  if (has_starlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->starlevel(), target);
  }

  // optional uint32 Score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score(), target);
  }

  // optional .pb.TUserSimpleInfoWithAlly UserInfo = 5;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->userinfo(), target);
  }

  // repeated .pb.TCommonReward SeniorRewardArr = 6;
  for (int i = 0; i < this->seniorrewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->seniorrewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderRevengeRecordInfo)
  return target;
}

int TPlunderRevengeRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RecordId = 1;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordid());
    }

    // optional int64 RecordTime = 2;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recordtime());
    }

    // optional uint32 StarLevel = 3;
    if (has_starlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlevel());
    }

    // optional uint32 Score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional .pb.TUserSimpleInfoWithAlly UserInfo = 5;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  // repeated .pb.TCommonReward SeniorRewardArr = 6;
  total_size += 1 * this->seniorrewardarr_size();
  for (int i = 0; i < this->seniorrewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seniorrewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderRevengeRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderRevengeRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderRevengeRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderRevengeRecordInfo::MergeFrom(const TPlunderRevengeRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  seniorrewardarr_.MergeFrom(from.seniorrewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_starlevel()) {
      set_starlevel(from.starlevel());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfoWithAlly::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderRevengeRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderRevengeRecordInfo::CopyFrom(const TPlunderRevengeRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderRevengeRecordInfo::IsInitialized() const {

  return true;
}

void TPlunderRevengeRecordInfo::Swap(TPlunderRevengeRecordInfo* other) {
  if (other != this) {
    std::swap(recordid_, other->recordid_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(starlevel_, other->starlevel_);
    std::swap(score_, other->score_);
    std::swap(userinfo_, other->userinfo_);
    seniorrewardarr_.Swap(&other->seniorrewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderRevengeRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderRevengeRecordInfo_descriptor_;
  metadata.reflection = TPlunderRevengeRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderMineInfo::kMinePosFieldNumber;
const int TPlunderMineInfo::kOccupyUidFieldNumber;
const int TPlunderMineInfo::kOccupyTimeFieldNumber;
const int TPlunderMineInfo::kReceiveTimeFieldNumber;
const int TPlunderMineInfo::kUserInfoFieldNumber;
const int TPlunderMineInfo::kIsSeniorFieldNumber;
#endif  // !_MSC_VER

TPlunderMineInfo::TPlunderMineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderMineInfo)
}

void TPlunderMineInfo::InitAsDefaultInstance() {
  minepos_ = const_cast< ::pb::TPlunderMinePos*>(&::pb::TPlunderMinePos::default_instance());
  userinfo_ = const_cast< ::pb::TUserSimpleInfoWithAlly*>(&::pb::TUserSimpleInfoWithAlly::default_instance());
}

TPlunderMineInfo::TPlunderMineInfo(const TPlunderMineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderMineInfo)
}

void TPlunderMineInfo::SharedCtor() {
  _cached_size_ = 0;
  minepos_ = NULL;
  occupyuid_ = GOOGLE_ULONGLONG(0);
  occupytime_ = GOOGLE_LONGLONG(0);
  receivetime_ = GOOGLE_LONGLONG(0);
  userinfo_ = NULL;
  issenior_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderMineInfo::~TPlunderMineInfo() {
  // @@protoc_insertion_point(destructor:pb.TPlunderMineInfo)
  SharedDtor();
}

void TPlunderMineInfo::SharedDtor() {
  if (this != default_instance_) {
    delete minepos_;
    delete userinfo_;
  }
}

void TPlunderMineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderMineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderMineInfo_descriptor_;
}

const TPlunderMineInfo& TPlunderMineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderMineInfo* TPlunderMineInfo::default_instance_ = NULL;

TPlunderMineInfo* TPlunderMineInfo::New() const {
  return new TPlunderMineInfo;
}

void TPlunderMineInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderMineInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(occupyuid_, receivetime_);
    if (has_minepos()) {
      if (minepos_ != NULL) minepos_->::pb::TPlunderMinePos::Clear();
    }
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfoWithAlly::Clear();
    }
    issenior_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderMineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderMineInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPlunderMinePos MinePos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minepos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OccupyUid;
        break;
      }

      // optional uint64 OccupyUid = 2;
      case 2: {
        if (tag == 16) {
         parse_OccupyUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &occupyuid_)));
          set_has_occupyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_OccupyTime;
        break;
      }

      // optional int64 OccupyTime = 3;
      case 3: {
        if (tag == 24) {
         parse_OccupyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &occupytime_)));
          set_has_occupytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ReceiveTime;
        break;
      }

      // optional int64 ReceiveTime = 4;
      case 4: {
        if (tag == 32) {
         parse_ReceiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receivetime_)));
          set_has_receivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfoWithAlly UserInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_IsSenior;
        break;
      }

      // optional bool IsSenior = 6;
      case 6: {
        if (tag == 48) {
         parse_IsSenior:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issenior_)));
          set_has_issenior();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderMineInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderMineInfo)
  return false;
#undef DO_
}

void TPlunderMineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderMineInfo)
  // optional .pb.TPlunderMinePos MinePos = 1;
  if (has_minepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->minepos(), output);
  }

  // optional uint64 OccupyUid = 2;
  if (has_occupyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->occupyuid(), output);
  }

  // optional int64 OccupyTime = 3;
  if (has_occupytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->occupytime(), output);
  }

  // optional int64 ReceiveTime = 4;
  if (has_receivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->receivetime(), output);
  }

  // optional .pb.TUserSimpleInfoWithAlly UserInfo = 5;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userinfo(), output);
  }

  // optional bool IsSenior = 6;
  if (has_issenior()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->issenior(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderMineInfo)
}

::google::protobuf::uint8* TPlunderMineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderMineInfo)
  // optional .pb.TPlunderMinePos MinePos = 1;
  if (has_minepos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->minepos(), target);
  }

  // optional uint64 OccupyUid = 2;
  if (has_occupyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->occupyuid(), target);
  }

  // optional int64 OccupyTime = 3;
  if (has_occupytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->occupytime(), target);
  }

  // optional int64 ReceiveTime = 4;
  if (has_receivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->receivetime(), target);
  }

  // optional .pb.TUserSimpleInfoWithAlly UserInfo = 5;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->userinfo(), target);
  }

  // optional bool IsSenior = 6;
  if (has_issenior()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->issenior(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderMineInfo)
  return target;
}

int TPlunderMineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPlunderMinePos MinePos = 1;
    if (has_minepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->minepos());
    }

    // optional uint64 OccupyUid = 2;
    if (has_occupyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->occupyuid());
    }

    // optional int64 OccupyTime = 3;
    if (has_occupytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->occupytime());
    }

    // optional int64 ReceiveTime = 4;
    if (has_receivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receivetime());
    }

    // optional .pb.TUserSimpleInfoWithAlly UserInfo = 5;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional bool IsSenior = 6;
    if (has_issenior()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderMineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderMineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderMineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderMineInfo::MergeFrom(const TPlunderMineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minepos()) {
      mutable_minepos()->::pb::TPlunderMinePos::MergeFrom(from.minepos());
    }
    if (from.has_occupyuid()) {
      set_occupyuid(from.occupyuid());
    }
    if (from.has_occupytime()) {
      set_occupytime(from.occupytime());
    }
    if (from.has_receivetime()) {
      set_receivetime(from.receivetime());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfoWithAlly::MergeFrom(from.userinfo());
    }
    if (from.has_issenior()) {
      set_issenior(from.issenior());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderMineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderMineInfo::CopyFrom(const TPlunderMineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderMineInfo::IsInitialized() const {

  return true;
}

void TPlunderMineInfo::Swap(TPlunderMineInfo* other) {
  if (other != this) {
    std::swap(minepos_, other->minepos_);
    std::swap(occupyuid_, other->occupyuid_);
    std::swap(occupytime_, other->occupytime_);
    std::swap(receivetime_, other->receivetime_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(issenior_, other->issenior_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderMineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderMineInfo_descriptor_;
  metadata.reflection = TPlunderMineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGetServerTeamInfoRsp::kServerTeamIdFieldNumber;
#endif  // !_MSC_VER

TPlunderGetServerTeamInfoRsp::TPlunderGetServerTeamInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGetServerTeamInfoRsp)
}

void TPlunderGetServerTeamInfoRsp::InitAsDefaultInstance() {
}

TPlunderGetServerTeamInfoRsp::TPlunderGetServerTeamInfoRsp(const TPlunderGetServerTeamInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGetServerTeamInfoRsp)
}

void TPlunderGetServerTeamInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  serverteamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGetServerTeamInfoRsp::~TPlunderGetServerTeamInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGetServerTeamInfoRsp)
  SharedDtor();
}

void TPlunderGetServerTeamInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderGetServerTeamInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGetServerTeamInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGetServerTeamInfoRsp_descriptor_;
}

const TPlunderGetServerTeamInfoRsp& TPlunderGetServerTeamInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGetServerTeamInfoRsp* TPlunderGetServerTeamInfoRsp::default_instance_ = NULL;

TPlunderGetServerTeamInfoRsp* TPlunderGetServerTeamInfoRsp::New() const {
  return new TPlunderGetServerTeamInfoRsp;
}

void TPlunderGetServerTeamInfoRsp::Clear() {
  serverteamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGetServerTeamInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGetServerTeamInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ServerTeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverteamid_)));
          set_has_serverteamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGetServerTeamInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGetServerTeamInfoRsp)
  return false;
#undef DO_
}

void TPlunderGetServerTeamInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGetServerTeamInfoRsp)
  // optional uint32 ServerTeamId = 1;
  if (has_serverteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverteamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGetServerTeamInfoRsp)
}

::google::protobuf::uint8* TPlunderGetServerTeamInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGetServerTeamInfoRsp)
  // optional uint32 ServerTeamId = 1;
  if (has_serverteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serverteamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGetServerTeamInfoRsp)
  return target;
}

int TPlunderGetServerTeamInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ServerTeamId = 1;
    if (has_serverteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverteamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGetServerTeamInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGetServerTeamInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGetServerTeamInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGetServerTeamInfoRsp::MergeFrom(const TPlunderGetServerTeamInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverteamid()) {
      set_serverteamid(from.serverteamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGetServerTeamInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGetServerTeamInfoRsp::CopyFrom(const TPlunderGetServerTeamInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGetServerTeamInfoRsp::IsInitialized() const {

  return true;
}

void TPlunderGetServerTeamInfoRsp::Swap(TPlunderGetServerTeamInfoRsp* other) {
  if (other != this) {
    std::swap(serverteamid_, other->serverteamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGetServerTeamInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGetServerTeamInfoRsp_descriptor_;
  metadata.reflection = TPlunderGetServerTeamInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGetBaseInfoRsp::kBaseInfoFieldNumber;
#endif  // !_MSC_VER

TPlunderGetBaseInfoRsp::TPlunderGetBaseInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGetBaseInfoRsp)
}

void TPlunderGetBaseInfoRsp::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::pb::TPlunderBaseInfo*>(&::pb::TPlunderBaseInfo::default_instance());
}

TPlunderGetBaseInfoRsp::TPlunderGetBaseInfoRsp(const TPlunderGetBaseInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGetBaseInfoRsp)
}

void TPlunderGetBaseInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGetBaseInfoRsp::~TPlunderGetBaseInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGetBaseInfoRsp)
  SharedDtor();
}

void TPlunderGetBaseInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void TPlunderGetBaseInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGetBaseInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGetBaseInfoRsp_descriptor_;
}

const TPlunderGetBaseInfoRsp& TPlunderGetBaseInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGetBaseInfoRsp* TPlunderGetBaseInfoRsp::default_instance_ = NULL;

TPlunderGetBaseInfoRsp* TPlunderGetBaseInfoRsp::New() const {
  return new TPlunderGetBaseInfoRsp;
}

void TPlunderGetBaseInfoRsp::Clear() {
  if (has_baseinfo()) {
    if (baseinfo_ != NULL) baseinfo_->::pb::TPlunderBaseInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGetBaseInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGetBaseInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPlunderBaseInfo BaseInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGetBaseInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGetBaseInfoRsp)
  return false;
#undef DO_
}

void TPlunderGetBaseInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGetBaseInfoRsp)
  // optional .pb.TPlunderBaseInfo BaseInfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGetBaseInfoRsp)
}

::google::protobuf::uint8* TPlunderGetBaseInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGetBaseInfoRsp)
  // optional .pb.TPlunderBaseInfo BaseInfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGetBaseInfoRsp)
  return target;
}

int TPlunderGetBaseInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPlunderBaseInfo BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGetBaseInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGetBaseInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGetBaseInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGetBaseInfoRsp::MergeFrom(const TPlunderGetBaseInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::pb::TPlunderBaseInfo::MergeFrom(from.baseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGetBaseInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGetBaseInfoRsp::CopyFrom(const TPlunderGetBaseInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGetBaseInfoRsp::IsInitialized() const {

  return true;
}

void TPlunderGetBaseInfoRsp::Swap(TPlunderGetBaseInfoRsp* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGetBaseInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGetBaseInfoRsp_descriptor_;
  metadata.reflection = TPlunderGetBaseInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderChallengeGuardStartBattleReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TPlunderChallengeGuardStartBattleReq::TPlunderChallengeGuardStartBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderChallengeGuardStartBattleReq)
}

void TPlunderChallengeGuardStartBattleReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TPlunderChallengeGuardStartBattleReq::TPlunderChallengeGuardStartBattleReq(const TPlunderChallengeGuardStartBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderChallengeGuardStartBattleReq)
}

void TPlunderChallengeGuardStartBattleReq::SharedCtor() {
  _cached_size_ = 0;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderChallengeGuardStartBattleReq::~TPlunderChallengeGuardStartBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TPlunderChallengeGuardStartBattleReq)
  SharedDtor();
}

void TPlunderChallengeGuardStartBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TPlunderChallengeGuardStartBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderChallengeGuardStartBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderChallengeGuardStartBattleReq_descriptor_;
}

const TPlunderChallengeGuardStartBattleReq& TPlunderChallengeGuardStartBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderChallengeGuardStartBattleReq* TPlunderChallengeGuardStartBattleReq::default_instance_ = NULL;

TPlunderChallengeGuardStartBattleReq* TPlunderChallengeGuardStartBattleReq::New() const {
  return new TPlunderChallengeGuardStartBattleReq;
}

void TPlunderChallengeGuardStartBattleReq::Clear() {
  if (has_battlecheckparam()) {
    if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderChallengeGuardStartBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderChallengeGuardStartBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleCheckParam BattleCheckParam = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderChallengeGuardStartBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderChallengeGuardStartBattleReq)
  return false;
#undef DO_
}

void TPlunderChallengeGuardStartBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderChallengeGuardStartBattleReq)
  // optional .pb.TBattleCheckParam BattleCheckParam = 1;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderChallengeGuardStartBattleReq)
}

::google::protobuf::uint8* TPlunderChallengeGuardStartBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderChallengeGuardStartBattleReq)
  // optional .pb.TBattleCheckParam BattleCheckParam = 1;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderChallengeGuardStartBattleReq)
  return target;
}

int TPlunderChallengeGuardStartBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleCheckParam BattleCheckParam = 1;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderChallengeGuardStartBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderChallengeGuardStartBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderChallengeGuardStartBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderChallengeGuardStartBattleReq::MergeFrom(const TPlunderChallengeGuardStartBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderChallengeGuardStartBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderChallengeGuardStartBattleReq::CopyFrom(const TPlunderChallengeGuardStartBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderChallengeGuardStartBattleReq::IsInitialized() const {

  return true;
}

void TPlunderChallengeGuardStartBattleReq::Swap(TPlunderChallengeGuardStartBattleReq* other) {
  if (other != this) {
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderChallengeGuardStartBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderChallengeGuardStartBattleReq_descriptor_;
  metadata.reflection = TPlunderChallengeGuardStartBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderChallengeGuardStartBattleRsp::kBattleArgsFieldNumber;
#endif  // !_MSC_VER

TPlunderChallengeGuardStartBattleRsp::TPlunderChallengeGuardStartBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderChallengeGuardStartBattleRsp)
}

void TPlunderChallengeGuardStartBattleRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TPlunderChallengeGuardStartBattleRsp::TPlunderChallengeGuardStartBattleRsp(const TPlunderChallengeGuardStartBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderChallengeGuardStartBattleRsp)
}

void TPlunderChallengeGuardStartBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderChallengeGuardStartBattleRsp::~TPlunderChallengeGuardStartBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderChallengeGuardStartBattleRsp)
  SharedDtor();
}

void TPlunderChallengeGuardStartBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TPlunderChallengeGuardStartBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderChallengeGuardStartBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderChallengeGuardStartBattleRsp_descriptor_;
}

const TPlunderChallengeGuardStartBattleRsp& TPlunderChallengeGuardStartBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderChallengeGuardStartBattleRsp* TPlunderChallengeGuardStartBattleRsp::default_instance_ = NULL;

TPlunderChallengeGuardStartBattleRsp* TPlunderChallengeGuardStartBattleRsp::New() const {
  return new TPlunderChallengeGuardStartBattleRsp;
}

void TPlunderChallengeGuardStartBattleRsp::Clear() {
  if (has_battleargs()) {
    if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderChallengeGuardStartBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderChallengeGuardStartBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleArgs BattleArgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderChallengeGuardStartBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderChallengeGuardStartBattleRsp)
  return false;
#undef DO_
}

void TPlunderChallengeGuardStartBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderChallengeGuardStartBattleRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderChallengeGuardStartBattleRsp)
}

::google::protobuf::uint8* TPlunderChallengeGuardStartBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderChallengeGuardStartBattleRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderChallengeGuardStartBattleRsp)
  return target;
}

int TPlunderChallengeGuardStartBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleArgs BattleArgs = 1;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderChallengeGuardStartBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderChallengeGuardStartBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderChallengeGuardStartBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderChallengeGuardStartBattleRsp::MergeFrom(const TPlunderChallengeGuardStartBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderChallengeGuardStartBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderChallengeGuardStartBattleRsp::CopyFrom(const TPlunderChallengeGuardStartBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderChallengeGuardStartBattleRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TPlunderChallengeGuardStartBattleRsp::Swap(TPlunderChallengeGuardStartBattleRsp* other) {
  if (other != this) {
    std::swap(battleargs_, other->battleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderChallengeGuardStartBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderChallengeGuardStartBattleRsp_descriptor_;
  metadata.reflection = TPlunderChallengeGuardStartBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderChallengeGuardReportBattleReq::kBattleRetFieldNumber;
#endif  // !_MSC_VER

TPlunderChallengeGuardReportBattleReq::TPlunderChallengeGuardReportBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderChallengeGuardReportBattleReq)
}

void TPlunderChallengeGuardReportBattleReq::InitAsDefaultInstance() {
}

TPlunderChallengeGuardReportBattleReq::TPlunderChallengeGuardReportBattleReq(const TPlunderChallengeGuardReportBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderChallengeGuardReportBattleReq)
}

void TPlunderChallengeGuardReportBattleReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderChallengeGuardReportBattleReq::~TPlunderChallengeGuardReportBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TPlunderChallengeGuardReportBattleReq)
  SharedDtor();
}

void TPlunderChallengeGuardReportBattleReq::SharedDtor() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (this != default_instance_) {
  }
}

void TPlunderChallengeGuardReportBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderChallengeGuardReportBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderChallengeGuardReportBattleReq_descriptor_;
}

const TPlunderChallengeGuardReportBattleReq& TPlunderChallengeGuardReportBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderChallengeGuardReportBattleReq* TPlunderChallengeGuardReportBattleReq::default_instance_ = NULL;

TPlunderChallengeGuardReportBattleReq* TPlunderChallengeGuardReportBattleReq::New() const {
  return new TPlunderChallengeGuardReportBattleReq;
}

void TPlunderChallengeGuardReportBattleReq::Clear() {
  if (has_battleret()) {
    if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      battleret_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderChallengeGuardReportBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderChallengeGuardReportBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes BattleRet = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderChallengeGuardReportBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderChallengeGuardReportBattleReq)
  return false;
#undef DO_
}

void TPlunderChallengeGuardReportBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderChallengeGuardReportBattleReq)
  // optional bytes BattleRet = 1;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->battleret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderChallengeGuardReportBattleReq)
}

::google::protobuf::uint8* TPlunderChallengeGuardReportBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderChallengeGuardReportBattleReq)
  // optional bytes BattleRet = 1;
  if (has_battleret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->battleret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderChallengeGuardReportBattleReq)
  return target;
}

int TPlunderChallengeGuardReportBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes BattleRet = 1;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderChallengeGuardReportBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderChallengeGuardReportBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderChallengeGuardReportBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderChallengeGuardReportBattleReq::MergeFrom(const TPlunderChallengeGuardReportBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleret()) {
      set_battleret(from.battleret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderChallengeGuardReportBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderChallengeGuardReportBattleReq::CopyFrom(const TPlunderChallengeGuardReportBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderChallengeGuardReportBattleReq::IsInitialized() const {

  return true;
}

void TPlunderChallengeGuardReportBattleReq::Swap(TPlunderChallengeGuardReportBattleReq* other) {
  if (other != this) {
    std::swap(battleret_, other->battleret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderChallengeGuardReportBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderChallengeGuardReportBattleReq_descriptor_;
  metadata.reflection = TPlunderChallengeGuardReportBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderChallengeGuardReportBattleRsp::kResultCodeFieldNumber;
const int TPlunderChallengeGuardReportBattleRsp::kMaxAreaLevelFieldNumber;
#endif  // !_MSC_VER

TPlunderChallengeGuardReportBattleRsp::TPlunderChallengeGuardReportBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderChallengeGuardReportBattleRsp)
}

void TPlunderChallengeGuardReportBattleRsp::InitAsDefaultInstance() {
}

TPlunderChallengeGuardReportBattleRsp::TPlunderChallengeGuardReportBattleRsp(const TPlunderChallengeGuardReportBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderChallengeGuardReportBattleRsp)
}

void TPlunderChallengeGuardReportBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  resultcode_ = 0;
  maxarealevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderChallengeGuardReportBattleRsp::~TPlunderChallengeGuardReportBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderChallengeGuardReportBattleRsp)
  SharedDtor();
}

void TPlunderChallengeGuardReportBattleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderChallengeGuardReportBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderChallengeGuardReportBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderChallengeGuardReportBattleRsp_descriptor_;
}

const TPlunderChallengeGuardReportBattleRsp& TPlunderChallengeGuardReportBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderChallengeGuardReportBattleRsp* TPlunderChallengeGuardReportBattleRsp::default_instance_ = NULL;

TPlunderChallengeGuardReportBattleRsp* TPlunderChallengeGuardReportBattleRsp::New() const {
  return new TPlunderChallengeGuardReportBattleRsp;
}

void TPlunderChallengeGuardReportBattleRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderChallengeGuardReportBattleRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(resultcode_, maxarealevel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderChallengeGuardReportBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderChallengeGuardReportBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ResultCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));
          set_has_resultcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MaxAreaLevel;
        break;
      }

      // optional uint32 MaxAreaLevel = 2;
      case 2: {
        if (tag == 16) {
         parse_MaxAreaLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxarealevel_)));
          set_has_maxarealevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderChallengeGuardReportBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderChallengeGuardReportBattleRsp)
  return false;
#undef DO_
}

void TPlunderChallengeGuardReportBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderChallengeGuardReportBattleRsp)
  // optional int32 ResultCode = 1;
  if (has_resultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resultcode(), output);
  }

  // optional uint32 MaxAreaLevel = 2;
  if (has_maxarealevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxarealevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderChallengeGuardReportBattleRsp)
}

::google::protobuf::uint8* TPlunderChallengeGuardReportBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderChallengeGuardReportBattleRsp)
  // optional int32 ResultCode = 1;
  if (has_resultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resultcode(), target);
  }

  // optional uint32 MaxAreaLevel = 2;
  if (has_maxarealevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxarealevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderChallengeGuardReportBattleRsp)
  return target;
}

int TPlunderChallengeGuardReportBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ResultCode = 1;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resultcode());
    }

    // optional uint32 MaxAreaLevel = 2;
    if (has_maxarealevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxarealevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderChallengeGuardReportBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderChallengeGuardReportBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderChallengeGuardReportBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderChallengeGuardReportBattleRsp::MergeFrom(const TPlunderChallengeGuardReportBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resultcode()) {
      set_resultcode(from.resultcode());
    }
    if (from.has_maxarealevel()) {
      set_maxarealevel(from.maxarealevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderChallengeGuardReportBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderChallengeGuardReportBattleRsp::CopyFrom(const TPlunderChallengeGuardReportBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderChallengeGuardReportBattleRsp::IsInitialized() const {

  return true;
}

void TPlunderChallengeGuardReportBattleRsp::Swap(TPlunderChallengeGuardReportBattleRsp* other) {
  if (other != this) {
    std::swap(resultcode_, other->resultcode_);
    std::swap(maxarealevel_, other->maxarealevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderChallengeGuardReportBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderChallengeGuardReportBattleRsp_descriptor_;
  metadata.reflection = TPlunderChallengeGuardReportBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderEnterReq::kAreaLevelFieldNumber;
#endif  // !_MSC_VER

TPlunderEnterReq::TPlunderEnterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderEnterReq)
}

void TPlunderEnterReq::InitAsDefaultInstance() {
}

TPlunderEnterReq::TPlunderEnterReq(const TPlunderEnterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderEnterReq)
}

void TPlunderEnterReq::SharedCtor() {
  _cached_size_ = 0;
  arealevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderEnterReq::~TPlunderEnterReq() {
  // @@protoc_insertion_point(destructor:pb.TPlunderEnterReq)
  SharedDtor();
}

void TPlunderEnterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderEnterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderEnterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderEnterReq_descriptor_;
}

const TPlunderEnterReq& TPlunderEnterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderEnterReq* TPlunderEnterReq::default_instance_ = NULL;

TPlunderEnterReq* TPlunderEnterReq::New() const {
  return new TPlunderEnterReq;
}

void TPlunderEnterReq::Clear() {
  arealevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderEnterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderEnterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AreaLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arealevel_)));
          set_has_arealevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderEnterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderEnterReq)
  return false;
#undef DO_
}

void TPlunderEnterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderEnterReq)
  // optional uint32 AreaLevel = 1;
  if (has_arealevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->arealevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderEnterReq)
}

::google::protobuf::uint8* TPlunderEnterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderEnterReq)
  // optional uint32 AreaLevel = 1;
  if (has_arealevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->arealevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderEnterReq)
  return target;
}

int TPlunderEnterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AreaLevel = 1;
    if (has_arealevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arealevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderEnterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderEnterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderEnterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderEnterReq::MergeFrom(const TPlunderEnterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arealevel()) {
      set_arealevel(from.arealevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderEnterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderEnterReq::CopyFrom(const TPlunderEnterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderEnterReq::IsInitialized() const {

  return true;
}

void TPlunderEnterReq::Swap(TPlunderEnterReq* other) {
  if (other != this) {
    std::swap(arealevel_, other->arealevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderEnterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderEnterReq_descriptor_;
  metadata.reflection = TPlunderEnterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderEnterRsp::kMapInfoFieldNumber;
const int TPlunderEnterRsp::kRecordInfoArrFieldNumber;
const int TPlunderEnterRsp::kPageInfoFieldNumber;
#endif  // !_MSC_VER

TPlunderEnterRsp::TPlunderEnterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderEnterRsp)
}

void TPlunderEnterRsp::InitAsDefaultInstance() {
  mapinfo_ = const_cast< ::pb::TPlunderMapInfo*>(&::pb::TPlunderMapInfo::default_instance());
  pageinfo_ = const_cast< ::pb::TPlunderPageInfo*>(&::pb::TPlunderPageInfo::default_instance());
}

TPlunderEnterRsp::TPlunderEnterRsp(const TPlunderEnterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderEnterRsp)
}

void TPlunderEnterRsp::SharedCtor() {
  _cached_size_ = 0;
  mapinfo_ = NULL;
  pageinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderEnterRsp::~TPlunderEnterRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderEnterRsp)
  SharedDtor();
}

void TPlunderEnterRsp::SharedDtor() {
  if (this != default_instance_) {
    delete mapinfo_;
    delete pageinfo_;
  }
}

void TPlunderEnterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderEnterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderEnterRsp_descriptor_;
}

const TPlunderEnterRsp& TPlunderEnterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderEnterRsp* TPlunderEnterRsp::default_instance_ = NULL;

TPlunderEnterRsp* TPlunderEnterRsp::New() const {
  return new TPlunderEnterRsp;
}

void TPlunderEnterRsp::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_mapinfo()) {
      if (mapinfo_ != NULL) mapinfo_->::pb::TPlunderMapInfo::Clear();
    }
    if (has_pageinfo()) {
      if (pageinfo_ != NULL) pageinfo_->::pb::TPlunderPageInfo::Clear();
    }
  }
  recordinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderEnterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderEnterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPlunderMapInfo MapInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RecordInfoArr;
        break;
      }

      // repeated .pb.TPlunderRecordInfo RecordInfoArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RecordInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RecordInfoArr;
        if (input->ExpectTag(26)) goto parse_PageInfo;
        break;
      }

      // optional .pb.TPlunderPageInfo PageInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_PageInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pageinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderEnterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderEnterRsp)
  return false;
#undef DO_
}

void TPlunderEnterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderEnterRsp)
  // optional .pb.TPlunderMapInfo MapInfo = 1;
  if (has_mapinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapinfo(), output);
  }

  // repeated .pb.TPlunderRecordInfo RecordInfoArr = 2;
  for (int i = 0; i < this->recordinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recordinfoarr(i), output);
  }

  // optional .pb.TPlunderPageInfo PageInfo = 3;
  if (has_pageinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pageinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderEnterRsp)
}

::google::protobuf::uint8* TPlunderEnterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderEnterRsp)
  // optional .pb.TPlunderMapInfo MapInfo = 1;
  if (has_mapinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapinfo(), target);
  }

  // repeated .pb.TPlunderRecordInfo RecordInfoArr = 2;
  for (int i = 0; i < this->recordinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recordinfoarr(i), target);
  }

  // optional .pb.TPlunderPageInfo PageInfo = 3;
  if (has_pageinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pageinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderEnterRsp)
  return target;
}

int TPlunderEnterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPlunderMapInfo MapInfo = 1;
    if (has_mapinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapinfo());
    }

    // optional .pb.TPlunderPageInfo PageInfo = 3;
    if (has_pageinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pageinfo());
    }

  }
  // repeated .pb.TPlunderRecordInfo RecordInfoArr = 2;
  total_size += 1 * this->recordinfoarr_size();
  for (int i = 0; i < this->recordinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderEnterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderEnterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderEnterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderEnterRsp::MergeFrom(const TPlunderEnterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordinfoarr_.MergeFrom(from.recordinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapinfo()) {
      mutable_mapinfo()->::pb::TPlunderMapInfo::MergeFrom(from.mapinfo());
    }
    if (from.has_pageinfo()) {
      mutable_pageinfo()->::pb::TPlunderPageInfo::MergeFrom(from.pageinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderEnterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderEnterRsp::CopyFrom(const TPlunderEnterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderEnterRsp::IsInitialized() const {

  return true;
}

void TPlunderEnterRsp::Swap(TPlunderEnterRsp* other) {
  if (other != this) {
    std::swap(mapinfo_, other->mapinfo_);
    recordinfoarr_.Swap(&other->recordinfoarr_);
    std::swap(pageinfo_, other->pageinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderEnterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderEnterRsp_descriptor_;
  metadata.reflection = TPlunderEnterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGetPageInfoReq::kAreaLevelFieldNumber;
const int TPlunderGetPageInfoReq::kPageFieldNumber;
#endif  // !_MSC_VER

TPlunderGetPageInfoReq::TPlunderGetPageInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGetPageInfoReq)
}

void TPlunderGetPageInfoReq::InitAsDefaultInstance() {
}

TPlunderGetPageInfoReq::TPlunderGetPageInfoReq(const TPlunderGetPageInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGetPageInfoReq)
}

void TPlunderGetPageInfoReq::SharedCtor() {
  _cached_size_ = 0;
  arealevel_ = 0u;
  page_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGetPageInfoReq::~TPlunderGetPageInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGetPageInfoReq)
  SharedDtor();
}

void TPlunderGetPageInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderGetPageInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGetPageInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGetPageInfoReq_descriptor_;
}

const TPlunderGetPageInfoReq& TPlunderGetPageInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGetPageInfoReq* TPlunderGetPageInfoReq::default_instance_ = NULL;

TPlunderGetPageInfoReq* TPlunderGetPageInfoReq::New() const {
  return new TPlunderGetPageInfoReq;
}

void TPlunderGetPageInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderGetPageInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(arealevel_, page_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGetPageInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGetPageInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AreaLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arealevel_)));
          set_has_arealevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Page;
        break;
      }

      // optional uint32 Page = 2;
      case 2: {
        if (tag == 16) {
         parse_Page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGetPageInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGetPageInfoReq)
  return false;
#undef DO_
}

void TPlunderGetPageInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGetPageInfoReq)
  // optional uint32 AreaLevel = 1;
  if (has_arealevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->arealevel(), output);
  }

  // optional uint32 Page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGetPageInfoReq)
}

::google::protobuf::uint8* TPlunderGetPageInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGetPageInfoReq)
  // optional uint32 AreaLevel = 1;
  if (has_arealevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->arealevel(), target);
  }

  // optional uint32 Page = 2;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGetPageInfoReq)
  return target;
}

int TPlunderGetPageInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AreaLevel = 1;
    if (has_arealevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arealevel());
    }

    // optional uint32 Page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGetPageInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGetPageInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGetPageInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGetPageInfoReq::MergeFrom(const TPlunderGetPageInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arealevel()) {
      set_arealevel(from.arealevel());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGetPageInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGetPageInfoReq::CopyFrom(const TPlunderGetPageInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGetPageInfoReq::IsInitialized() const {

  return true;
}

void TPlunderGetPageInfoReq::Swap(TPlunderGetPageInfoReq* other) {
  if (other != this) {
    std::swap(arealevel_, other->arealevel_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGetPageInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGetPageInfoReq_descriptor_;
  metadata.reflection = TPlunderGetPageInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGetPageInfoRsp::kPageInfoFieldNumber;
#endif  // !_MSC_VER

TPlunderGetPageInfoRsp::TPlunderGetPageInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGetPageInfoRsp)
}

void TPlunderGetPageInfoRsp::InitAsDefaultInstance() {
  pageinfo_ = const_cast< ::pb::TPlunderPageInfo*>(&::pb::TPlunderPageInfo::default_instance());
}

TPlunderGetPageInfoRsp::TPlunderGetPageInfoRsp(const TPlunderGetPageInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGetPageInfoRsp)
}

void TPlunderGetPageInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  pageinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGetPageInfoRsp::~TPlunderGetPageInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGetPageInfoRsp)
  SharedDtor();
}

void TPlunderGetPageInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete pageinfo_;
  }
}

void TPlunderGetPageInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGetPageInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGetPageInfoRsp_descriptor_;
}

const TPlunderGetPageInfoRsp& TPlunderGetPageInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGetPageInfoRsp* TPlunderGetPageInfoRsp::default_instance_ = NULL;

TPlunderGetPageInfoRsp* TPlunderGetPageInfoRsp::New() const {
  return new TPlunderGetPageInfoRsp;
}

void TPlunderGetPageInfoRsp::Clear() {
  if (has_pageinfo()) {
    if (pageinfo_ != NULL) pageinfo_->::pb::TPlunderPageInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGetPageInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGetPageInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPlunderPageInfo PageInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pageinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGetPageInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGetPageInfoRsp)
  return false;
#undef DO_
}

void TPlunderGetPageInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGetPageInfoRsp)
  // optional .pb.TPlunderPageInfo PageInfo = 1;
  if (has_pageinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pageinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGetPageInfoRsp)
}

::google::protobuf::uint8* TPlunderGetPageInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGetPageInfoRsp)
  // optional .pb.TPlunderPageInfo PageInfo = 1;
  if (has_pageinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pageinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGetPageInfoRsp)
  return target;
}

int TPlunderGetPageInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPlunderPageInfo PageInfo = 1;
    if (has_pageinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pageinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGetPageInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGetPageInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGetPageInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGetPageInfoRsp::MergeFrom(const TPlunderGetPageInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pageinfo()) {
      mutable_pageinfo()->::pb::TPlunderPageInfo::MergeFrom(from.pageinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGetPageInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGetPageInfoRsp::CopyFrom(const TPlunderGetPageInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGetPageInfoRsp::IsInitialized() const {

  return true;
}

void TPlunderGetPageInfoRsp::Swap(TPlunderGetPageInfoRsp* other) {
  if (other != this) {
    std::swap(pageinfo_, other->pageinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGetPageInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGetPageInfoRsp_descriptor_;
  metadata.reflection = TPlunderGetPageInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGetRivalFormationReq::kUidFieldNumber;
#endif  // !_MSC_VER

TPlunderGetRivalFormationReq::TPlunderGetRivalFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGetRivalFormationReq)
}

void TPlunderGetRivalFormationReq::InitAsDefaultInstance() {
}

TPlunderGetRivalFormationReq::TPlunderGetRivalFormationReq(const TPlunderGetRivalFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGetRivalFormationReq)
}

void TPlunderGetRivalFormationReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGetRivalFormationReq::~TPlunderGetRivalFormationReq() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGetRivalFormationReq)
  SharedDtor();
}

void TPlunderGetRivalFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderGetRivalFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGetRivalFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGetRivalFormationReq_descriptor_;
}

const TPlunderGetRivalFormationReq& TPlunderGetRivalFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGetRivalFormationReq* TPlunderGetRivalFormationReq::default_instance_ = NULL;

TPlunderGetRivalFormationReq* TPlunderGetRivalFormationReq::New() const {
  return new TPlunderGetRivalFormationReq;
}

void TPlunderGetRivalFormationReq::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGetRivalFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGetRivalFormationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGetRivalFormationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGetRivalFormationReq)
  return false;
#undef DO_
}

void TPlunderGetRivalFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGetRivalFormationReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGetRivalFormationReq)
}

::google::protobuf::uint8* TPlunderGetRivalFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGetRivalFormationReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGetRivalFormationReq)
  return target;
}

int TPlunderGetRivalFormationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGetRivalFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGetRivalFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGetRivalFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGetRivalFormationReq::MergeFrom(const TPlunderGetRivalFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGetRivalFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGetRivalFormationReq::CopyFrom(const TPlunderGetRivalFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGetRivalFormationReq::IsInitialized() const {

  return true;
}

void TPlunderGetRivalFormationReq::Swap(TPlunderGetRivalFormationReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGetRivalFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGetRivalFormationReq_descriptor_;
  metadata.reflection = TPlunderGetRivalFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGetRivalFormationRsp::kUidFieldNumber;
const int TPlunderGetRivalFormationRsp::kUnitArrFieldNumber;
const int TPlunderGetRivalFormationRsp::kFightForceFieldNumber;
#endif  // !_MSC_VER

TPlunderGetRivalFormationRsp::TPlunderGetRivalFormationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGetRivalFormationRsp)
}

void TPlunderGetRivalFormationRsp::InitAsDefaultInstance() {
}

TPlunderGetRivalFormationRsp::TPlunderGetRivalFormationRsp(const TPlunderGetRivalFormationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGetRivalFormationRsp)
}

void TPlunderGetRivalFormationRsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGetRivalFormationRsp::~TPlunderGetRivalFormationRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGetRivalFormationRsp)
  SharedDtor();
}

void TPlunderGetRivalFormationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderGetRivalFormationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGetRivalFormationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGetRivalFormationRsp_descriptor_;
}

const TPlunderGetRivalFormationRsp& TPlunderGetRivalFormationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGetRivalFormationRsp* TPlunderGetRivalFormationRsp::default_instance_ = NULL;

TPlunderGetRivalFormationRsp* TPlunderGetRivalFormationRsp::New() const {
  return new TPlunderGetRivalFormationRsp;
}

void TPlunderGetRivalFormationRsp::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    uid_ = GOOGLE_ULONGLONG(0);
    fightforce_ = GOOGLE_ULONGLONG(0);
  }
  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGetRivalFormationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGetRivalFormationRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitArr;
        break;
      }

      // repeated .pb.TUnitInfo UnitArr = 2;
      case 2: {
        if (tag == 18) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitArr;
        if (input->ExpectTag(24)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGetRivalFormationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGetRivalFormationRsp)
  return false;
#undef DO_
}

void TPlunderGetRivalFormationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGetRivalFormationRsp)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // repeated .pb.TUnitInfo UnitArr = 2;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unitarr(i), output);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGetRivalFormationRsp)
}

::google::protobuf::uint8* TPlunderGetRivalFormationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGetRivalFormationRsp)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // repeated .pb.TUnitInfo UnitArr = 2;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unitarr(i), target);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGetRivalFormationRsp)
  return target;
}

int TPlunderGetRivalFormationRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 FightForce = 3;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  // repeated .pb.TUnitInfo UnitArr = 2;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGetRivalFormationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGetRivalFormationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGetRivalFormationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGetRivalFormationRsp::MergeFrom(const TPlunderGetRivalFormationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGetRivalFormationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGetRivalFormationRsp::CopyFrom(const TPlunderGetRivalFormationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGetRivalFormationRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->unitarr())) return false;
  return true;
}

void TPlunderGetRivalFormationRsp::Swap(TPlunderGetRivalFormationRsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    unitarr_.Swap(&other->unitarr_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGetRivalFormationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGetRivalFormationRsp_descriptor_;
  metadata.reflection = TPlunderGetRivalFormationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGatherRsp::kResultCodeFieldNumber;
const int TPlunderGatherRsp::kRewardScoreFieldNumber;
const int TPlunderGatherRsp::kSeniorRewardArrFieldNumber;
#endif  // !_MSC_VER

TPlunderGatherRsp::TPlunderGatherRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGatherRsp)
}

void TPlunderGatherRsp::InitAsDefaultInstance() {
}

TPlunderGatherRsp::TPlunderGatherRsp(const TPlunderGatherRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGatherRsp)
}

void TPlunderGatherRsp::SharedCtor() {
  _cached_size_ = 0;
  resultcode_ = 0;
  rewardscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGatherRsp::~TPlunderGatherRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGatherRsp)
  SharedDtor();
}

void TPlunderGatherRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderGatherRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGatherRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGatherRsp_descriptor_;
}

const TPlunderGatherRsp& TPlunderGatherRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGatherRsp* TPlunderGatherRsp::default_instance_ = NULL;

TPlunderGatherRsp* TPlunderGatherRsp::New() const {
  return new TPlunderGatherRsp;
}

void TPlunderGatherRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderGatherRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(resultcode_, rewardscore_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  seniorrewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGatherRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGatherRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EPlunderGatherResult ResultCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EPlunderGatherResult_IsValid(value)) {
            set_resultcode(static_cast< ::pb::EPlunderGatherResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RewardScore;
        break;
      }

      // optional uint32 RewardScore = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardscore_)));
          set_has_rewardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SeniorRewardArr;
        break;
      }

      // repeated .pb.TCommonReward SeniorRewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_SeniorRewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seniorrewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SeniorRewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGatherRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGatherRsp)
  return false;
#undef DO_
}

void TPlunderGatherRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGatherRsp)
  // optional .pb.EPlunderGatherResult ResultCode = 1;
  if (has_resultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->resultcode(), output);
  }

  // optional uint32 RewardScore = 2;
  if (has_rewardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rewardscore(), output);
  }

  // repeated .pb.TCommonReward SeniorRewardArr = 3;
  for (int i = 0; i < this->seniorrewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->seniorrewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGatherRsp)
}

::google::protobuf::uint8* TPlunderGatherRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGatherRsp)
  // optional .pb.EPlunderGatherResult ResultCode = 1;
  if (has_resultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->resultcode(), target);
  }

  // optional uint32 RewardScore = 2;
  if (has_rewardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rewardscore(), target);
  }

  // repeated .pb.TCommonReward SeniorRewardArr = 3;
  for (int i = 0; i < this->seniorrewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->seniorrewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGatherRsp)
  return target;
}

int TPlunderGatherRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EPlunderGatherResult ResultCode = 1;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->resultcode());
    }

    // optional uint32 RewardScore = 2;
    if (has_rewardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardscore());
    }

  }
  // repeated .pb.TCommonReward SeniorRewardArr = 3;
  total_size += 1 * this->seniorrewardarr_size();
  for (int i = 0; i < this->seniorrewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seniorrewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGatherRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGatherRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGatherRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGatherRsp::MergeFrom(const TPlunderGatherRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  seniorrewardarr_.MergeFrom(from.seniorrewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resultcode()) {
      set_resultcode(from.resultcode());
    }
    if (from.has_rewardscore()) {
      set_rewardscore(from.rewardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGatherRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGatherRsp::CopyFrom(const TPlunderGatherRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGatherRsp::IsInitialized() const {

  return true;
}

void TPlunderGatherRsp::Swap(TPlunderGatherRsp* other) {
  if (other != this) {
    std::swap(resultcode_, other->resultcode_);
    std::swap(rewardscore_, other->rewardscore_);
    seniorrewardarr_.Swap(&other->seniorrewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGatherRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGatherRsp_descriptor_;
  metadata.reflection = TPlunderGatherRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderAttackReq::kMinePosFieldNumber;
const int TPlunderAttackReq::kEnemyUidFieldNumber;
const int TPlunderAttackReq::kSkipBattleResultFieldNumber;
#endif  // !_MSC_VER

TPlunderAttackReq::TPlunderAttackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderAttackReq)
}

void TPlunderAttackReq::InitAsDefaultInstance() {
  minepos_ = const_cast< ::pb::TPlunderMinePos*>(&::pb::TPlunderMinePos::default_instance());
}

TPlunderAttackReq::TPlunderAttackReq(const TPlunderAttackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderAttackReq)
}

void TPlunderAttackReq::SharedCtor() {
  _cached_size_ = 0;
  minepos_ = NULL;
  enemyuid_ = GOOGLE_ULONGLONG(0);
  skipbattleresult_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderAttackReq::~TPlunderAttackReq() {
  // @@protoc_insertion_point(destructor:pb.TPlunderAttackReq)
  SharedDtor();
}

void TPlunderAttackReq::SharedDtor() {
  if (this != default_instance_) {
    delete minepos_;
  }
}

void TPlunderAttackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderAttackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderAttackReq_descriptor_;
}

const TPlunderAttackReq& TPlunderAttackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderAttackReq* TPlunderAttackReq::default_instance_ = NULL;

TPlunderAttackReq* TPlunderAttackReq::New() const {
  return new TPlunderAttackReq;
}

void TPlunderAttackReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderAttackReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(enemyuid_, skipbattleresult_);
    if (has_minepos()) {
      if (minepos_ != NULL) minepos_->::pb::TPlunderMinePos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderAttackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderAttackReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPlunderMinePos MinePos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minepos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EnemyUid;
        break;
      }

      // optional uint64 EnemyUid = 2;
      case 2: {
        if (tag == 16) {
         parse_EnemyUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enemyuid_)));
          set_has_enemyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SkipBattleResult;
        break;
      }

      // optional bool SkipBattleResult = 3;
      case 3: {
        if (tag == 24) {
         parse_SkipBattleResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skipbattleresult_)));
          set_has_skipbattleresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderAttackReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderAttackReq)
  return false;
#undef DO_
}

void TPlunderAttackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderAttackReq)
  // optional .pb.TPlunderMinePos MinePos = 1;
  if (has_minepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->minepos(), output);
  }

  // optional uint64 EnemyUid = 2;
  if (has_enemyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->enemyuid(), output);
  }

  // optional bool SkipBattleResult = 3;
  if (has_skipbattleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->skipbattleresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderAttackReq)
}

::google::protobuf::uint8* TPlunderAttackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderAttackReq)
  // optional .pb.TPlunderMinePos MinePos = 1;
  if (has_minepos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->minepos(), target);
  }

  // optional uint64 EnemyUid = 2;
  if (has_enemyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->enemyuid(), target);
  }

  // optional bool SkipBattleResult = 3;
  if (has_skipbattleresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->skipbattleresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderAttackReq)
  return target;
}

int TPlunderAttackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPlunderMinePos MinePos = 1;
    if (has_minepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->minepos());
    }

    // optional uint64 EnemyUid = 2;
    if (has_enemyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enemyuid());
    }

    // optional bool SkipBattleResult = 3;
    if (has_skipbattleresult()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderAttackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderAttackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderAttackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderAttackReq::MergeFrom(const TPlunderAttackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minepos()) {
      mutable_minepos()->::pb::TPlunderMinePos::MergeFrom(from.minepos());
    }
    if (from.has_enemyuid()) {
      set_enemyuid(from.enemyuid());
    }
    if (from.has_skipbattleresult()) {
      set_skipbattleresult(from.skipbattleresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderAttackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderAttackReq::CopyFrom(const TPlunderAttackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderAttackReq::IsInitialized() const {

  return true;
}

void TPlunderAttackReq::Swap(TPlunderAttackReq* other) {
  if (other != this) {
    std::swap(minepos_, other->minepos_);
    std::swap(enemyuid_, other->enemyuid_);
    std::swap(skipbattleresult_, other->skipbattleresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderAttackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderAttackReq_descriptor_;
  metadata.reflection = TPlunderAttackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderAttackRsp::kResultFieldNumber;
const int TPlunderAttackRsp::kMineInfoFieldNumber;
const int TPlunderAttackRsp::kBattleInfoFieldNumber;
const int TPlunderAttackRsp::kBattleResultFieldNumber;
#endif  // !_MSC_VER

TPlunderAttackRsp::TPlunderAttackRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderAttackRsp)
}

void TPlunderAttackRsp::InitAsDefaultInstance() {
  mineinfo_ = const_cast< ::pb::TPlunderMineInfo*>(&::pb::TPlunderMineInfo::default_instance());
  battleinfo_ = const_cast< ::pb::TPlunderRecordInfo*>(&::pb::TPlunderRecordInfo::default_instance());
}

TPlunderAttackRsp::TPlunderAttackRsp(const TPlunderAttackRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderAttackRsp)
}

void TPlunderAttackRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  mineinfo_ = NULL;
  battleinfo_ = NULL;
  battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderAttackRsp::~TPlunderAttackRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderAttackRsp)
  SharedDtor();
}

void TPlunderAttackRsp::SharedDtor() {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresult_;
  }
  if (this != default_instance_) {
    delete mineinfo_;
    delete battleinfo_;
  }
}

void TPlunderAttackRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderAttackRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderAttackRsp_descriptor_;
}

const TPlunderAttackRsp& TPlunderAttackRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderAttackRsp* TPlunderAttackRsp::default_instance_ = NULL;

TPlunderAttackRsp* TPlunderAttackRsp::New() const {
  return new TPlunderAttackRsp;
}

void TPlunderAttackRsp::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    result_ = 0;
    if (has_mineinfo()) {
      if (mineinfo_ != NULL) mineinfo_->::pb::TPlunderMineInfo::Clear();
    }
    if (has_battleinfo()) {
      if (battleinfo_ != NULL) battleinfo_->::pb::TPlunderRecordInfo::Clear();
    }
    if (has_battleresult()) {
      if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleresult_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderAttackRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderAttackRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EPlunderAttackResult Result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EPlunderAttackResult_IsValid(value)) {
            set_result(static_cast< ::pb::EPlunderAttackResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MineInfo;
        break;
      }

      // optional .pb.TPlunderMineInfo MineInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_MineInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mineinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleInfo;
        break;
      }

      // optional .pb.TPlunderRecordInfo BattleInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BattleResult;
        break;
      }

      // optional bytes BattleResult = 4;
      case 4: {
        if (tag == 34) {
         parse_BattleResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderAttackRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderAttackRsp)
  return false;
#undef DO_
}

void TPlunderAttackRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderAttackRsp)
  // optional .pb.EPlunderAttackResult Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .pb.TPlunderMineInfo MineInfo = 2;
  if (has_mineinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mineinfo(), output);
  }

  // optional .pb.TPlunderRecordInfo BattleInfo = 3;
  if (has_battleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battleinfo(), output);
  }

  // optional bytes BattleResult = 4;
  if (has_battleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->battleresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderAttackRsp)
}

::google::protobuf::uint8* TPlunderAttackRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderAttackRsp)
  // optional .pb.EPlunderAttackResult Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .pb.TPlunderMineInfo MineInfo = 2;
  if (has_mineinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mineinfo(), target);
  }

  // optional .pb.TPlunderRecordInfo BattleInfo = 3;
  if (has_battleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battleinfo(), target);
  }

  // optional bytes BattleResult = 4;
  if (has_battleresult()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->battleresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderAttackRsp)
  return target;
}

int TPlunderAttackRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EPlunderAttackResult Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .pb.TPlunderMineInfo MineInfo = 2;
    if (has_mineinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mineinfo());
    }

    // optional .pb.TPlunderRecordInfo BattleInfo = 3;
    if (has_battleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleinfo());
    }

    // optional bytes BattleResult = 4;
    if (has_battleresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderAttackRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderAttackRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderAttackRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderAttackRsp::MergeFrom(const TPlunderAttackRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_mineinfo()) {
      mutable_mineinfo()->::pb::TPlunderMineInfo::MergeFrom(from.mineinfo());
    }
    if (from.has_battleinfo()) {
      mutable_battleinfo()->::pb::TPlunderRecordInfo::MergeFrom(from.battleinfo());
    }
    if (from.has_battleresult()) {
      set_battleresult(from.battleresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderAttackRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderAttackRsp::CopyFrom(const TPlunderAttackRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderAttackRsp::IsInitialized() const {

  return true;
}

void TPlunderAttackRsp::Swap(TPlunderAttackRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(mineinfo_, other->mineinfo_);
    std::swap(battleinfo_, other->battleinfo_);
    std::swap(battleresult_, other->battleresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderAttackRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderAttackRsp_descriptor_;
  metadata.reflection = TPlunderAttackRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGiveupRsp::kResultCodeFieldNumber;
const int TPlunderGiveupRsp::kRewardScoreFieldNumber;
const int TPlunderGiveupRsp::kSeniorRewardArrFieldNumber;
#endif  // !_MSC_VER

TPlunderGiveupRsp::TPlunderGiveupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGiveupRsp)
}

void TPlunderGiveupRsp::InitAsDefaultInstance() {
}

TPlunderGiveupRsp::TPlunderGiveupRsp(const TPlunderGiveupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGiveupRsp)
}

void TPlunderGiveupRsp::SharedCtor() {
  _cached_size_ = 0;
  resultcode_ = 0;
  rewardscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGiveupRsp::~TPlunderGiveupRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGiveupRsp)
  SharedDtor();
}

void TPlunderGiveupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderGiveupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGiveupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGiveupRsp_descriptor_;
}

const TPlunderGiveupRsp& TPlunderGiveupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGiveupRsp* TPlunderGiveupRsp::default_instance_ = NULL;

TPlunderGiveupRsp* TPlunderGiveupRsp::New() const {
  return new TPlunderGiveupRsp;
}

void TPlunderGiveupRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderGiveupRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(resultcode_, rewardscore_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  seniorrewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGiveupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGiveupRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EPlunderGatherResult ResultCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EPlunderGatherResult_IsValid(value)) {
            set_resultcode(static_cast< ::pb::EPlunderGatherResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RewardScore;
        break;
      }

      // optional uint32 RewardScore = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardscore_)));
          set_has_rewardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SeniorRewardArr;
        break;
      }

      // repeated .pb.TCommonReward SeniorRewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_SeniorRewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seniorrewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SeniorRewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGiveupRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGiveupRsp)
  return false;
#undef DO_
}

void TPlunderGiveupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGiveupRsp)
  // optional .pb.EPlunderGatherResult ResultCode = 1;
  if (has_resultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->resultcode(), output);
  }

  // optional uint32 RewardScore = 2;
  if (has_rewardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rewardscore(), output);
  }

  // repeated .pb.TCommonReward SeniorRewardArr = 3;
  for (int i = 0; i < this->seniorrewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->seniorrewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGiveupRsp)
}

::google::protobuf::uint8* TPlunderGiveupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGiveupRsp)
  // optional .pb.EPlunderGatherResult ResultCode = 1;
  if (has_resultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->resultcode(), target);
  }

  // optional uint32 RewardScore = 2;
  if (has_rewardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rewardscore(), target);
  }

  // repeated .pb.TCommonReward SeniorRewardArr = 3;
  for (int i = 0; i < this->seniorrewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->seniorrewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGiveupRsp)
  return target;
}

int TPlunderGiveupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EPlunderGatherResult ResultCode = 1;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->resultcode());
    }

    // optional uint32 RewardScore = 2;
    if (has_rewardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardscore());
    }

  }
  // repeated .pb.TCommonReward SeniorRewardArr = 3;
  total_size += 1 * this->seniorrewardarr_size();
  for (int i = 0; i < this->seniorrewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seniorrewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGiveupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGiveupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGiveupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGiveupRsp::MergeFrom(const TPlunderGiveupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  seniorrewardarr_.MergeFrom(from.seniorrewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resultcode()) {
      set_resultcode(from.resultcode());
    }
    if (from.has_rewardscore()) {
      set_rewardscore(from.rewardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGiveupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGiveupRsp::CopyFrom(const TPlunderGiveupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGiveupRsp::IsInitialized() const {

  return true;
}

void TPlunderGiveupRsp::Swap(TPlunderGiveupRsp* other) {
  if (other != this) {
    std::swap(resultcode_, other->resultcode_);
    std::swap(rewardscore_, other->rewardscore_);
    seniorrewardarr_.Swap(&other->seniorrewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGiveupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGiveupRsp_descriptor_;
  metadata.reflection = TPlunderGiveupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderAutoSetMineReq::kAreaLevelFieldNumber;
#endif  // !_MSC_VER

TPlunderAutoSetMineReq::TPlunderAutoSetMineReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderAutoSetMineReq)
}

void TPlunderAutoSetMineReq::InitAsDefaultInstance() {
}

TPlunderAutoSetMineReq::TPlunderAutoSetMineReq(const TPlunderAutoSetMineReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderAutoSetMineReq)
}

void TPlunderAutoSetMineReq::SharedCtor() {
  _cached_size_ = 0;
  arealevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderAutoSetMineReq::~TPlunderAutoSetMineReq() {
  // @@protoc_insertion_point(destructor:pb.TPlunderAutoSetMineReq)
  SharedDtor();
}

void TPlunderAutoSetMineReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderAutoSetMineReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderAutoSetMineReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderAutoSetMineReq_descriptor_;
}

const TPlunderAutoSetMineReq& TPlunderAutoSetMineReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderAutoSetMineReq* TPlunderAutoSetMineReq::default_instance_ = NULL;

TPlunderAutoSetMineReq* TPlunderAutoSetMineReq::New() const {
  return new TPlunderAutoSetMineReq;
}

void TPlunderAutoSetMineReq::Clear() {
  arealevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderAutoSetMineReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderAutoSetMineReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AreaLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arealevel_)));
          set_has_arealevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderAutoSetMineReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderAutoSetMineReq)
  return false;
#undef DO_
}

void TPlunderAutoSetMineReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderAutoSetMineReq)
  // optional uint32 AreaLevel = 1;
  if (has_arealevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->arealevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderAutoSetMineReq)
}

::google::protobuf::uint8* TPlunderAutoSetMineReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderAutoSetMineReq)
  // optional uint32 AreaLevel = 1;
  if (has_arealevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->arealevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderAutoSetMineReq)
  return target;
}

int TPlunderAutoSetMineReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AreaLevel = 1;
    if (has_arealevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arealevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderAutoSetMineReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderAutoSetMineReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderAutoSetMineReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderAutoSetMineReq::MergeFrom(const TPlunderAutoSetMineReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arealevel()) {
      set_arealevel(from.arealevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderAutoSetMineReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderAutoSetMineReq::CopyFrom(const TPlunderAutoSetMineReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderAutoSetMineReq::IsInitialized() const {

  return true;
}

void TPlunderAutoSetMineReq::Swap(TPlunderAutoSetMineReq* other) {
  if (other != this) {
    std::swap(arealevel_, other->arealevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderAutoSetMineReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderAutoSetMineReq_descriptor_;
  metadata.reflection = TPlunderAutoSetMineReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderAutoSetMineRsp::kResultFieldNumber;
const int TPlunderAutoSetMineRsp::kMineInfoFieldNumber;
const int TPlunderAutoSetMineRsp::kGiveupRspFieldNumber;
#endif  // !_MSC_VER

TPlunderAutoSetMineRsp::TPlunderAutoSetMineRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderAutoSetMineRsp)
}

void TPlunderAutoSetMineRsp::InitAsDefaultInstance() {
  mineinfo_ = const_cast< ::pb::TPlunderMineInfo*>(&::pb::TPlunderMineInfo::default_instance());
  giveuprsp_ = const_cast< ::pb::TPlunderGiveupRsp*>(&::pb::TPlunderGiveupRsp::default_instance());
}

TPlunderAutoSetMineRsp::TPlunderAutoSetMineRsp(const TPlunderAutoSetMineRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderAutoSetMineRsp)
}

void TPlunderAutoSetMineRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  mineinfo_ = NULL;
  giveuprsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderAutoSetMineRsp::~TPlunderAutoSetMineRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderAutoSetMineRsp)
  SharedDtor();
}

void TPlunderAutoSetMineRsp::SharedDtor() {
  if (this != default_instance_) {
    delete mineinfo_;
    delete giveuprsp_;
  }
}

void TPlunderAutoSetMineRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderAutoSetMineRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderAutoSetMineRsp_descriptor_;
}

const TPlunderAutoSetMineRsp& TPlunderAutoSetMineRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderAutoSetMineRsp* TPlunderAutoSetMineRsp::default_instance_ = NULL;

TPlunderAutoSetMineRsp* TPlunderAutoSetMineRsp::New() const {
  return new TPlunderAutoSetMineRsp;
}

void TPlunderAutoSetMineRsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 0;
    if (has_mineinfo()) {
      if (mineinfo_ != NULL) mineinfo_->::pb::TPlunderMineInfo::Clear();
    }
    if (has_giveuprsp()) {
      if (giveuprsp_ != NULL) giveuprsp_->::pb::TPlunderGiveupRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderAutoSetMineRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderAutoSetMineRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EPlunderAttackResult Result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EPlunderAttackResult_IsValid(value)) {
            set_result(static_cast< ::pb::EPlunderAttackResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MineInfo;
        break;
      }

      // optional .pb.TPlunderMineInfo MineInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_MineInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mineinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GiveupRsp;
        break;
      }

      // optional .pb.TPlunderGiveupRsp GiveupRsp = 3;
      case 3: {
        if (tag == 26) {
         parse_GiveupRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_giveuprsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderAutoSetMineRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderAutoSetMineRsp)
  return false;
#undef DO_
}

void TPlunderAutoSetMineRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderAutoSetMineRsp)
  // optional .pb.EPlunderAttackResult Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .pb.TPlunderMineInfo MineInfo = 2;
  if (has_mineinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mineinfo(), output);
  }

  // optional .pb.TPlunderGiveupRsp GiveupRsp = 3;
  if (has_giveuprsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->giveuprsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderAutoSetMineRsp)
}

::google::protobuf::uint8* TPlunderAutoSetMineRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderAutoSetMineRsp)
  // optional .pb.EPlunderAttackResult Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .pb.TPlunderMineInfo MineInfo = 2;
  if (has_mineinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mineinfo(), target);
  }

  // optional .pb.TPlunderGiveupRsp GiveupRsp = 3;
  if (has_giveuprsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->giveuprsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderAutoSetMineRsp)
  return target;
}

int TPlunderAutoSetMineRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EPlunderAttackResult Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .pb.TPlunderMineInfo MineInfo = 2;
    if (has_mineinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mineinfo());
    }

    // optional .pb.TPlunderGiveupRsp GiveupRsp = 3;
    if (has_giveuprsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->giveuprsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderAutoSetMineRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderAutoSetMineRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderAutoSetMineRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderAutoSetMineRsp::MergeFrom(const TPlunderAutoSetMineRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_mineinfo()) {
      mutable_mineinfo()->::pb::TPlunderMineInfo::MergeFrom(from.mineinfo());
    }
    if (from.has_giveuprsp()) {
      mutable_giveuprsp()->::pb::TPlunderGiveupRsp::MergeFrom(from.giveuprsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderAutoSetMineRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderAutoSetMineRsp::CopyFrom(const TPlunderAutoSetMineRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderAutoSetMineRsp::IsInitialized() const {

  return true;
}

void TPlunderAutoSetMineRsp::Swap(TPlunderAutoSetMineRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(mineinfo_, other->mineinfo_);
    std::swap(giveuprsp_, other->giveuprsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderAutoSetMineRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderAutoSetMineRsp_descriptor_;
  metadata.reflection = TPlunderAutoSetMineRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGetSelfRecordListRsp::kRecordArrFieldNumber;
#endif  // !_MSC_VER

TPlunderGetSelfRecordListRsp::TPlunderGetSelfRecordListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGetSelfRecordListRsp)
}

void TPlunderGetSelfRecordListRsp::InitAsDefaultInstance() {
}

TPlunderGetSelfRecordListRsp::TPlunderGetSelfRecordListRsp(const TPlunderGetSelfRecordListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGetSelfRecordListRsp)
}

void TPlunderGetSelfRecordListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGetSelfRecordListRsp::~TPlunderGetSelfRecordListRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGetSelfRecordListRsp)
  SharedDtor();
}

void TPlunderGetSelfRecordListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderGetSelfRecordListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGetSelfRecordListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGetSelfRecordListRsp_descriptor_;
}

const TPlunderGetSelfRecordListRsp& TPlunderGetSelfRecordListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGetSelfRecordListRsp* TPlunderGetSelfRecordListRsp::default_instance_ = NULL;

TPlunderGetSelfRecordListRsp* TPlunderGetSelfRecordListRsp::New() const {
  return new TPlunderGetSelfRecordListRsp;
}

void TPlunderGetSelfRecordListRsp::Clear() {
  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGetSelfRecordListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGetSelfRecordListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPlunderRecordInfo RecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGetSelfRecordListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGetSelfRecordListRsp)
  return false;
#undef DO_
}

void TPlunderGetSelfRecordListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGetSelfRecordListRsp)
  // repeated .pb.TPlunderRecordInfo RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGetSelfRecordListRsp)
}

::google::protobuf::uint8* TPlunderGetSelfRecordListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGetSelfRecordListRsp)
  // repeated .pb.TPlunderRecordInfo RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGetSelfRecordListRsp)
  return target;
}

int TPlunderGetSelfRecordListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPlunderRecordInfo RecordArr = 1;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGetSelfRecordListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGetSelfRecordListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGetSelfRecordListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGetSelfRecordListRsp::MergeFrom(const TPlunderGetSelfRecordListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGetSelfRecordListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGetSelfRecordListRsp::CopyFrom(const TPlunderGetSelfRecordListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGetSelfRecordListRsp::IsInitialized() const {

  return true;
}

void TPlunderGetSelfRecordListRsp::Swap(TPlunderGetSelfRecordListRsp* other) {
  if (other != this) {
    recordarr_.Swap(&other->recordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGetSelfRecordListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGetSelfRecordListRsp_descriptor_;
  metadata.reflection = TPlunderGetSelfRecordListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGetSelfRecordInfoReq::kRecordIdFieldNumber;
#endif  // !_MSC_VER

TPlunderGetSelfRecordInfoReq::TPlunderGetSelfRecordInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGetSelfRecordInfoReq)
}

void TPlunderGetSelfRecordInfoReq::InitAsDefaultInstance() {
}

TPlunderGetSelfRecordInfoReq::TPlunderGetSelfRecordInfoReq(const TPlunderGetSelfRecordInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGetSelfRecordInfoReq)
}

void TPlunderGetSelfRecordInfoReq::SharedCtor() {
  _cached_size_ = 0;
  recordid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGetSelfRecordInfoReq::~TPlunderGetSelfRecordInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGetSelfRecordInfoReq)
  SharedDtor();
}

void TPlunderGetSelfRecordInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderGetSelfRecordInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGetSelfRecordInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGetSelfRecordInfoReq_descriptor_;
}

const TPlunderGetSelfRecordInfoReq& TPlunderGetSelfRecordInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGetSelfRecordInfoReq* TPlunderGetSelfRecordInfoReq::default_instance_ = NULL;

TPlunderGetSelfRecordInfoReq* TPlunderGetSelfRecordInfoReq::New() const {
  return new TPlunderGetSelfRecordInfoReq;
}

void TPlunderGetSelfRecordInfoReq::Clear() {
  recordid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGetSelfRecordInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGetSelfRecordInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RecordId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGetSelfRecordInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGetSelfRecordInfoReq)
  return false;
#undef DO_
}

void TPlunderGetSelfRecordInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGetSelfRecordInfoReq)
  // optional uint64 RecordId = 1;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->recordid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGetSelfRecordInfoReq)
}

::google::protobuf::uint8* TPlunderGetSelfRecordInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGetSelfRecordInfoReq)
  // optional uint64 RecordId = 1;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->recordid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGetSelfRecordInfoReq)
  return target;
}

int TPlunderGetSelfRecordInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RecordId = 1;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGetSelfRecordInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGetSelfRecordInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGetSelfRecordInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGetSelfRecordInfoReq::MergeFrom(const TPlunderGetSelfRecordInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGetSelfRecordInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGetSelfRecordInfoReq::CopyFrom(const TPlunderGetSelfRecordInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGetSelfRecordInfoReq::IsInitialized() const {

  return true;
}

void TPlunderGetSelfRecordInfoReq::Swap(TPlunderGetSelfRecordInfoReq* other) {
  if (other != this) {
    std::swap(recordid_, other->recordid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGetSelfRecordInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGetSelfRecordInfoReq_descriptor_;
  metadata.reflection = TPlunderGetSelfRecordInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGetSelfRecordInfoRsp::kRecordInfoFieldNumber;
const int TPlunderGetSelfRecordInfoRsp::kBattleResultFieldNumber;
#endif  // !_MSC_VER

TPlunderGetSelfRecordInfoRsp::TPlunderGetSelfRecordInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGetSelfRecordInfoRsp)
}

void TPlunderGetSelfRecordInfoRsp::InitAsDefaultInstance() {
  recordinfo_ = const_cast< ::pb::TPlunderRecordInfo*>(&::pb::TPlunderRecordInfo::default_instance());
}

TPlunderGetSelfRecordInfoRsp::TPlunderGetSelfRecordInfoRsp(const TPlunderGetSelfRecordInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGetSelfRecordInfoRsp)
}

void TPlunderGetSelfRecordInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  recordinfo_ = NULL;
  battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGetSelfRecordInfoRsp::~TPlunderGetSelfRecordInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGetSelfRecordInfoRsp)
  SharedDtor();
}

void TPlunderGetSelfRecordInfoRsp::SharedDtor() {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresult_;
  }
  if (this != default_instance_) {
    delete recordinfo_;
  }
}

void TPlunderGetSelfRecordInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGetSelfRecordInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGetSelfRecordInfoRsp_descriptor_;
}

const TPlunderGetSelfRecordInfoRsp& TPlunderGetSelfRecordInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGetSelfRecordInfoRsp* TPlunderGetSelfRecordInfoRsp::default_instance_ = NULL;

TPlunderGetSelfRecordInfoRsp* TPlunderGetSelfRecordInfoRsp::New() const {
  return new TPlunderGetSelfRecordInfoRsp;
}

void TPlunderGetSelfRecordInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_recordinfo()) {
      if (recordinfo_ != NULL) recordinfo_->::pb::TPlunderRecordInfo::Clear();
    }
    if (has_battleresult()) {
      if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleresult_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGetSelfRecordInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGetSelfRecordInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPlunderRecordInfo RecordInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recordinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleResult;
        break;
      }

      // optional bytes BattleResult = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGetSelfRecordInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGetSelfRecordInfoRsp)
  return false;
#undef DO_
}

void TPlunderGetSelfRecordInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGetSelfRecordInfoRsp)
  // optional .pb.TPlunderRecordInfo RecordInfo = 1;
  if (has_recordinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordinfo(), output);
  }

  // optional bytes BattleResult = 2;
  if (has_battleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->battleresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGetSelfRecordInfoRsp)
}

::google::protobuf::uint8* TPlunderGetSelfRecordInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGetSelfRecordInfoRsp)
  // optional .pb.TPlunderRecordInfo RecordInfo = 1;
  if (has_recordinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordinfo(), target);
  }

  // optional bytes BattleResult = 2;
  if (has_battleresult()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->battleresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGetSelfRecordInfoRsp)
  return target;
}

int TPlunderGetSelfRecordInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPlunderRecordInfo RecordInfo = 1;
    if (has_recordinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recordinfo());
    }

    // optional bytes BattleResult = 2;
    if (has_battleresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGetSelfRecordInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGetSelfRecordInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGetSelfRecordInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGetSelfRecordInfoRsp::MergeFrom(const TPlunderGetSelfRecordInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordinfo()) {
      mutable_recordinfo()->::pb::TPlunderRecordInfo::MergeFrom(from.recordinfo());
    }
    if (from.has_battleresult()) {
      set_battleresult(from.battleresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGetSelfRecordInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGetSelfRecordInfoRsp::CopyFrom(const TPlunderGetSelfRecordInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGetSelfRecordInfoRsp::IsInitialized() const {

  return true;
}

void TPlunderGetSelfRecordInfoRsp::Swap(TPlunderGetSelfRecordInfoRsp* other) {
  if (other != this) {
    std::swap(recordinfo_, other->recordinfo_);
    std::swap(battleresult_, other->battleresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGetSelfRecordInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGetSelfRecordInfoRsp_descriptor_;
  metadata.reflection = TPlunderGetSelfRecordInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGetEnemyListRsp::kEnemyListFieldNumber;
#endif  // !_MSC_VER

TPlunderGetEnemyListRsp::TPlunderGetEnemyListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGetEnemyListRsp)
}

void TPlunderGetEnemyListRsp::InitAsDefaultInstance() {
}

TPlunderGetEnemyListRsp::TPlunderGetEnemyListRsp(const TPlunderGetEnemyListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGetEnemyListRsp)
}

void TPlunderGetEnemyListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGetEnemyListRsp::~TPlunderGetEnemyListRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGetEnemyListRsp)
  SharedDtor();
}

void TPlunderGetEnemyListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderGetEnemyListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGetEnemyListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGetEnemyListRsp_descriptor_;
}

const TPlunderGetEnemyListRsp& TPlunderGetEnemyListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGetEnemyListRsp* TPlunderGetEnemyListRsp::default_instance_ = NULL;

TPlunderGetEnemyListRsp* TPlunderGetEnemyListRsp::New() const {
  return new TPlunderGetEnemyListRsp;
}

void TPlunderGetEnemyListRsp::Clear() {
  enemylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGetEnemyListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGetEnemyListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPlunderEnemyInfo EnemyList = 1;
      case 1: {
        if (tag == 10) {
         parse_EnemyList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemylist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_EnemyList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGetEnemyListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGetEnemyListRsp)
  return false;
#undef DO_
}

void TPlunderGetEnemyListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGetEnemyListRsp)
  // repeated .pb.TPlunderEnemyInfo EnemyList = 1;
  for (int i = 0; i < this->enemylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->enemylist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGetEnemyListRsp)
}

::google::protobuf::uint8* TPlunderGetEnemyListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGetEnemyListRsp)
  // repeated .pb.TPlunderEnemyInfo EnemyList = 1;
  for (int i = 0; i < this->enemylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->enemylist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGetEnemyListRsp)
  return target;
}

int TPlunderGetEnemyListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPlunderEnemyInfo EnemyList = 1;
  total_size += 1 * this->enemylist_size();
  for (int i = 0; i < this->enemylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGetEnemyListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGetEnemyListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGetEnemyListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGetEnemyListRsp::MergeFrom(const TPlunderGetEnemyListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemylist_.MergeFrom(from.enemylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGetEnemyListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGetEnemyListRsp::CopyFrom(const TPlunderGetEnemyListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGetEnemyListRsp::IsInitialized() const {

  return true;
}

void TPlunderGetEnemyListRsp::Swap(TPlunderGetEnemyListRsp* other) {
  if (other != this) {
    enemylist_.Swap(&other->enemylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGetEnemyListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGetEnemyListRsp_descriptor_;
  metadata.reflection = TPlunderGetEnemyListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderRemoveEnemyReq::kUidFieldNumber;
#endif  // !_MSC_VER

TPlunderRemoveEnemyReq::TPlunderRemoveEnemyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderRemoveEnemyReq)
}

void TPlunderRemoveEnemyReq::InitAsDefaultInstance() {
}

TPlunderRemoveEnemyReq::TPlunderRemoveEnemyReq(const TPlunderRemoveEnemyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderRemoveEnemyReq)
}

void TPlunderRemoveEnemyReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderRemoveEnemyReq::~TPlunderRemoveEnemyReq() {
  // @@protoc_insertion_point(destructor:pb.TPlunderRemoveEnemyReq)
  SharedDtor();
}

void TPlunderRemoveEnemyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderRemoveEnemyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderRemoveEnemyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderRemoveEnemyReq_descriptor_;
}

const TPlunderRemoveEnemyReq& TPlunderRemoveEnemyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderRemoveEnemyReq* TPlunderRemoveEnemyReq::default_instance_ = NULL;

TPlunderRemoveEnemyReq* TPlunderRemoveEnemyReq::New() const {
  return new TPlunderRemoveEnemyReq;
}

void TPlunderRemoveEnemyReq::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderRemoveEnemyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderRemoveEnemyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderRemoveEnemyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderRemoveEnemyReq)
  return false;
#undef DO_
}

void TPlunderRemoveEnemyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderRemoveEnemyReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderRemoveEnemyReq)
}

::google::protobuf::uint8* TPlunderRemoveEnemyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderRemoveEnemyReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderRemoveEnemyReq)
  return target;
}

int TPlunderRemoveEnemyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderRemoveEnemyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderRemoveEnemyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderRemoveEnemyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderRemoveEnemyReq::MergeFrom(const TPlunderRemoveEnemyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderRemoveEnemyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderRemoveEnemyReq::CopyFrom(const TPlunderRemoveEnemyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderRemoveEnemyReq::IsInitialized() const {

  return true;
}

void TPlunderRemoveEnemyReq::Swap(TPlunderRemoveEnemyReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderRemoveEnemyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderRemoveEnemyReq_descriptor_;
  metadata.reflection = TPlunderRemoveEnemyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGetEnemyMineListReq::kUidFieldNumber;
#endif  // !_MSC_VER

TPlunderGetEnemyMineListReq::TPlunderGetEnemyMineListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGetEnemyMineListReq)
}

void TPlunderGetEnemyMineListReq::InitAsDefaultInstance() {
}

TPlunderGetEnemyMineListReq::TPlunderGetEnemyMineListReq(const TPlunderGetEnemyMineListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGetEnemyMineListReq)
}

void TPlunderGetEnemyMineListReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGetEnemyMineListReq::~TPlunderGetEnemyMineListReq() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGetEnemyMineListReq)
  SharedDtor();
}

void TPlunderGetEnemyMineListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderGetEnemyMineListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGetEnemyMineListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGetEnemyMineListReq_descriptor_;
}

const TPlunderGetEnemyMineListReq& TPlunderGetEnemyMineListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGetEnemyMineListReq* TPlunderGetEnemyMineListReq::default_instance_ = NULL;

TPlunderGetEnemyMineListReq* TPlunderGetEnemyMineListReq::New() const {
  return new TPlunderGetEnemyMineListReq;
}

void TPlunderGetEnemyMineListReq::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGetEnemyMineListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGetEnemyMineListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGetEnemyMineListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGetEnemyMineListReq)
  return false;
#undef DO_
}

void TPlunderGetEnemyMineListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGetEnemyMineListReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGetEnemyMineListReq)
}

::google::protobuf::uint8* TPlunderGetEnemyMineListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGetEnemyMineListReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGetEnemyMineListReq)
  return target;
}

int TPlunderGetEnemyMineListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGetEnemyMineListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGetEnemyMineListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGetEnemyMineListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGetEnemyMineListReq::MergeFrom(const TPlunderGetEnemyMineListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGetEnemyMineListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGetEnemyMineListReq::CopyFrom(const TPlunderGetEnemyMineListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGetEnemyMineListReq::IsInitialized() const {

  return true;
}

void TPlunderGetEnemyMineListReq::Swap(TPlunderGetEnemyMineListReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGetEnemyMineListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGetEnemyMineListReq_descriptor_;
  metadata.reflection = TPlunderGetEnemyMineListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGetEnemyMineListRsp::kMinePosFieldNumber;
#endif  // !_MSC_VER

TPlunderGetEnemyMineListRsp::TPlunderGetEnemyMineListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGetEnemyMineListRsp)
}

void TPlunderGetEnemyMineListRsp::InitAsDefaultInstance() {
  minepos_ = const_cast< ::pb::TPlunderMinePos*>(&::pb::TPlunderMinePos::default_instance());
}

TPlunderGetEnemyMineListRsp::TPlunderGetEnemyMineListRsp(const TPlunderGetEnemyMineListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGetEnemyMineListRsp)
}

void TPlunderGetEnemyMineListRsp::SharedCtor() {
  _cached_size_ = 0;
  minepos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGetEnemyMineListRsp::~TPlunderGetEnemyMineListRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGetEnemyMineListRsp)
  SharedDtor();
}

void TPlunderGetEnemyMineListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete minepos_;
  }
}

void TPlunderGetEnemyMineListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGetEnemyMineListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGetEnemyMineListRsp_descriptor_;
}

const TPlunderGetEnemyMineListRsp& TPlunderGetEnemyMineListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGetEnemyMineListRsp* TPlunderGetEnemyMineListRsp::default_instance_ = NULL;

TPlunderGetEnemyMineListRsp* TPlunderGetEnemyMineListRsp::New() const {
  return new TPlunderGetEnemyMineListRsp;
}

void TPlunderGetEnemyMineListRsp::Clear() {
  if (has_minepos()) {
    if (minepos_ != NULL) minepos_->::pb::TPlunderMinePos::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGetEnemyMineListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGetEnemyMineListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPlunderMinePos MinePos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minepos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGetEnemyMineListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGetEnemyMineListRsp)
  return false;
#undef DO_
}

void TPlunderGetEnemyMineListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGetEnemyMineListRsp)
  // optional .pb.TPlunderMinePos MinePos = 1;
  if (has_minepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->minepos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGetEnemyMineListRsp)
}

::google::protobuf::uint8* TPlunderGetEnemyMineListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGetEnemyMineListRsp)
  // optional .pb.TPlunderMinePos MinePos = 1;
  if (has_minepos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->minepos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGetEnemyMineListRsp)
  return target;
}

int TPlunderGetEnemyMineListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPlunderMinePos MinePos = 1;
    if (has_minepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->minepos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGetEnemyMineListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGetEnemyMineListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGetEnemyMineListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGetEnemyMineListRsp::MergeFrom(const TPlunderGetEnemyMineListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minepos()) {
      mutable_minepos()->::pb::TPlunderMinePos::MergeFrom(from.minepos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGetEnemyMineListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGetEnemyMineListRsp::CopyFrom(const TPlunderGetEnemyMineListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGetEnemyMineListRsp::IsInitialized() const {

  return true;
}

void TPlunderGetEnemyMineListRsp::Swap(TPlunderGetEnemyMineListRsp* other) {
  if (other != this) {
    std::swap(minepos_, other->minepos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGetEnemyMineListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGetEnemyMineListRsp_descriptor_;
  metadata.reflection = TPlunderGetEnemyMineListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderRevengeReq::kUidFieldNumber;
const int TPlunderRevengeReq::kSkipBattleResultFieldNumber;
#endif  // !_MSC_VER

TPlunderRevengeReq::TPlunderRevengeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderRevengeReq)
}

void TPlunderRevengeReq::InitAsDefaultInstance() {
}

TPlunderRevengeReq::TPlunderRevengeReq(const TPlunderRevengeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderRevengeReq)
}

void TPlunderRevengeReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  skipbattleresult_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderRevengeReq::~TPlunderRevengeReq() {
  // @@protoc_insertion_point(destructor:pb.TPlunderRevengeReq)
  SharedDtor();
}

void TPlunderRevengeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderRevengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderRevengeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderRevengeReq_descriptor_;
}

const TPlunderRevengeReq& TPlunderRevengeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderRevengeReq* TPlunderRevengeReq::default_instance_ = NULL;

TPlunderRevengeReq* TPlunderRevengeReq::New() const {
  return new TPlunderRevengeReq;
}

void TPlunderRevengeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderRevengeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, skipbattleresult_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderRevengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderRevengeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SkipBattleResult;
        break;
      }

      // optional bool SkipBattleResult = 2;
      case 2: {
        if (tag == 16) {
         parse_SkipBattleResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skipbattleresult_)));
          set_has_skipbattleresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderRevengeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderRevengeReq)
  return false;
#undef DO_
}

void TPlunderRevengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderRevengeReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional bool SkipBattleResult = 2;
  if (has_skipbattleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->skipbattleresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderRevengeReq)
}

::google::protobuf::uint8* TPlunderRevengeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderRevengeReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional bool SkipBattleResult = 2;
  if (has_skipbattleresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->skipbattleresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderRevengeReq)
  return target;
}

int TPlunderRevengeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional bool SkipBattleResult = 2;
    if (has_skipbattleresult()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderRevengeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderRevengeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderRevengeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderRevengeReq::MergeFrom(const TPlunderRevengeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_skipbattleresult()) {
      set_skipbattleresult(from.skipbattleresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderRevengeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderRevengeReq::CopyFrom(const TPlunderRevengeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderRevengeReq::IsInitialized() const {

  return true;
}

void TPlunderRevengeReq::Swap(TPlunderRevengeReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(skipbattleresult_, other->skipbattleresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderRevengeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderRevengeReq_descriptor_;
  metadata.reflection = TPlunderRevengeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderRevengeRsp::kBattleInfoFieldNumber;
const int TPlunderRevengeRsp::kBattleResultFieldNumber;
#endif  // !_MSC_VER

TPlunderRevengeRsp::TPlunderRevengeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderRevengeRsp)
}

void TPlunderRevengeRsp::InitAsDefaultInstance() {
  battleinfo_ = const_cast< ::pb::TPlunderRevengeRecordInfo*>(&::pb::TPlunderRevengeRecordInfo::default_instance());
}

TPlunderRevengeRsp::TPlunderRevengeRsp(const TPlunderRevengeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderRevengeRsp)
}

void TPlunderRevengeRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  battleinfo_ = NULL;
  battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderRevengeRsp::~TPlunderRevengeRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderRevengeRsp)
  SharedDtor();
}

void TPlunderRevengeRsp::SharedDtor() {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresult_;
  }
  if (this != default_instance_) {
    delete battleinfo_;
  }
}

void TPlunderRevengeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderRevengeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderRevengeRsp_descriptor_;
}

const TPlunderRevengeRsp& TPlunderRevengeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderRevengeRsp* TPlunderRevengeRsp::default_instance_ = NULL;

TPlunderRevengeRsp* TPlunderRevengeRsp::New() const {
  return new TPlunderRevengeRsp;
}

void TPlunderRevengeRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_battleinfo()) {
      if (battleinfo_ != NULL) battleinfo_->::pb::TPlunderRevengeRecordInfo::Clear();
    }
    if (has_battleresult()) {
      if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleresult_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderRevengeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderRevengeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPlunderRevengeRecordInfo BattleInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleResult;
        break;
      }

      // optional bytes BattleResult = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderRevengeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderRevengeRsp)
  return false;
#undef DO_
}

void TPlunderRevengeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderRevengeRsp)
  // optional .pb.TPlunderRevengeRecordInfo BattleInfo = 1;
  if (has_battleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleinfo(), output);
  }

  // optional bytes BattleResult = 2;
  if (has_battleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->battleresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderRevengeRsp)
}

::google::protobuf::uint8* TPlunderRevengeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderRevengeRsp)
  // optional .pb.TPlunderRevengeRecordInfo BattleInfo = 1;
  if (has_battleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleinfo(), target);
  }

  // optional bytes BattleResult = 2;
  if (has_battleresult()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->battleresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderRevengeRsp)
  return target;
}

int TPlunderRevengeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPlunderRevengeRecordInfo BattleInfo = 1;
    if (has_battleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleinfo());
    }

    // optional bytes BattleResult = 2;
    if (has_battleresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderRevengeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderRevengeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderRevengeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderRevengeRsp::MergeFrom(const TPlunderRevengeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleinfo()) {
      mutable_battleinfo()->::pb::TPlunderRevengeRecordInfo::MergeFrom(from.battleinfo());
    }
    if (from.has_battleresult()) {
      set_battleresult(from.battleresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderRevengeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderRevengeRsp::CopyFrom(const TPlunderRevengeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderRevengeRsp::IsInitialized() const {

  return true;
}

void TPlunderRevengeRsp::Swap(TPlunderRevengeRsp* other) {
  if (other != this) {
    std::swap(battleinfo_, other->battleinfo_);
    std::swap(battleresult_, other->battleresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderRevengeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderRevengeRsp_descriptor_;
  metadata.reflection = TPlunderRevengeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderRankInfo::kUidFieldNumber;
const int TPlunderRankInfo::kUserInfoFieldNumber;
const int TPlunderRankInfo::kScoreFieldNumber;
const int TPlunderRankInfo::kTimeFieldNumber;
const int TPlunderRankInfo::kRankFieldNumber;
#endif  // !_MSC_VER

TPlunderRankInfo::TPlunderRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderRankInfo)
}

void TPlunderRankInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfoWithAlly*>(&::pb::TUserSimpleInfoWithAlly::default_instance());
}

TPlunderRankInfo::TPlunderRankInfo(const TPlunderRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderRankInfo)
}

void TPlunderRankInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  userinfo_ = NULL;
  score_ = 0u;
  time_ = GOOGLE_LONGLONG(0);
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderRankInfo::~TPlunderRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TPlunderRankInfo)
  SharedDtor();
}

void TPlunderRankInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TPlunderRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderRankInfo_descriptor_;
}

const TPlunderRankInfo& TPlunderRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderRankInfo* TPlunderRankInfo::default_instance_ = NULL;

TPlunderRankInfo* TPlunderRankInfo::New() const {
  return new TPlunderRankInfo;
}

void TPlunderRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(time_, rank_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfoWithAlly::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfoWithAlly UserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 10;
      case 10: {
        if (tag == 80) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Time;
        break;
      }

      // optional int64 Time = 11;
      case 11: {
        if (tag == 88) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_Rank;
        break;
      }

      // optional int32 Rank = 12;
      case 12: {
        if (tag == 96) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderRankInfo)
  return false;
#undef DO_
}

void TPlunderRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderRankInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional .pb.TUserSimpleInfoWithAlly UserInfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  // optional uint32 Score = 10;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->score(), output);
  }

  // optional int64 Time = 11;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->time(), output);
  }

  // optional int32 Rank = 12;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderRankInfo)
}

::google::protobuf::uint8* TPlunderRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderRankInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional .pb.TUserSimpleInfoWithAlly UserInfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  // optional uint32 Score = 10;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->score(), target);
  }

  // optional int64 Time = 11;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->time(), target);
  }

  // optional int32 Rank = 12;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderRankInfo)
  return target;
}

int TPlunderRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional .pb.TUserSimpleInfoWithAlly UserInfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 Score = 10;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional int64 Time = 11;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 Rank = 12;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderRankInfo::MergeFrom(const TPlunderRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfoWithAlly::MergeFrom(from.userinfo());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderRankInfo::CopyFrom(const TPlunderRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderRankInfo::IsInitialized() const {

  return true;
}

void TPlunderRankInfo::Swap(TPlunderRankInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(score_, other->score_);
    std::swap(time_, other->time_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderRankInfo_descriptor_;
  metadata.reflection = TPlunderRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGetRevengeRecordListRsp::kRecordArrFieldNumber;
#endif  // !_MSC_VER

TPlunderGetRevengeRecordListRsp::TPlunderGetRevengeRecordListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGetRevengeRecordListRsp)
}

void TPlunderGetRevengeRecordListRsp::InitAsDefaultInstance() {
}

TPlunderGetRevengeRecordListRsp::TPlunderGetRevengeRecordListRsp(const TPlunderGetRevengeRecordListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGetRevengeRecordListRsp)
}

void TPlunderGetRevengeRecordListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGetRevengeRecordListRsp::~TPlunderGetRevengeRecordListRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGetRevengeRecordListRsp)
  SharedDtor();
}

void TPlunderGetRevengeRecordListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderGetRevengeRecordListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGetRevengeRecordListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGetRevengeRecordListRsp_descriptor_;
}

const TPlunderGetRevengeRecordListRsp& TPlunderGetRevengeRecordListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGetRevengeRecordListRsp* TPlunderGetRevengeRecordListRsp::default_instance_ = NULL;

TPlunderGetRevengeRecordListRsp* TPlunderGetRevengeRecordListRsp::New() const {
  return new TPlunderGetRevengeRecordListRsp;
}

void TPlunderGetRevengeRecordListRsp::Clear() {
  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGetRevengeRecordListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGetRevengeRecordListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPlunderRevengeRecordInfo RecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGetRevengeRecordListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGetRevengeRecordListRsp)
  return false;
#undef DO_
}

void TPlunderGetRevengeRecordListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGetRevengeRecordListRsp)
  // repeated .pb.TPlunderRevengeRecordInfo RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGetRevengeRecordListRsp)
}

::google::protobuf::uint8* TPlunderGetRevengeRecordListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGetRevengeRecordListRsp)
  // repeated .pb.TPlunderRevengeRecordInfo RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGetRevengeRecordListRsp)
  return target;
}

int TPlunderGetRevengeRecordListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPlunderRevengeRecordInfo RecordArr = 1;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGetRevengeRecordListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGetRevengeRecordListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGetRevengeRecordListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGetRevengeRecordListRsp::MergeFrom(const TPlunderGetRevengeRecordListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGetRevengeRecordListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGetRevengeRecordListRsp::CopyFrom(const TPlunderGetRevengeRecordListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGetRevengeRecordListRsp::IsInitialized() const {

  return true;
}

void TPlunderGetRevengeRecordListRsp::Swap(TPlunderGetRevengeRecordListRsp* other) {
  if (other != this) {
    recordarr_.Swap(&other->recordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGetRevengeRecordListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGetRevengeRecordListRsp_descriptor_;
  metadata.reflection = TPlunderGetRevengeRecordListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGetRevengeRecordInfoReq::kRecordIdFieldNumber;
#endif  // !_MSC_VER

TPlunderGetRevengeRecordInfoReq::TPlunderGetRevengeRecordInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGetRevengeRecordInfoReq)
}

void TPlunderGetRevengeRecordInfoReq::InitAsDefaultInstance() {
}

TPlunderGetRevengeRecordInfoReq::TPlunderGetRevengeRecordInfoReq(const TPlunderGetRevengeRecordInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGetRevengeRecordInfoReq)
}

void TPlunderGetRevengeRecordInfoReq::SharedCtor() {
  _cached_size_ = 0;
  recordid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGetRevengeRecordInfoReq::~TPlunderGetRevengeRecordInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGetRevengeRecordInfoReq)
  SharedDtor();
}

void TPlunderGetRevengeRecordInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderGetRevengeRecordInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGetRevengeRecordInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGetRevengeRecordInfoReq_descriptor_;
}

const TPlunderGetRevengeRecordInfoReq& TPlunderGetRevengeRecordInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGetRevengeRecordInfoReq* TPlunderGetRevengeRecordInfoReq::default_instance_ = NULL;

TPlunderGetRevengeRecordInfoReq* TPlunderGetRevengeRecordInfoReq::New() const {
  return new TPlunderGetRevengeRecordInfoReq;
}

void TPlunderGetRevengeRecordInfoReq::Clear() {
  recordid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGetRevengeRecordInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGetRevengeRecordInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RecordId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGetRevengeRecordInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGetRevengeRecordInfoReq)
  return false;
#undef DO_
}

void TPlunderGetRevengeRecordInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGetRevengeRecordInfoReq)
  // optional uint64 RecordId = 1;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->recordid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGetRevengeRecordInfoReq)
}

::google::protobuf::uint8* TPlunderGetRevengeRecordInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGetRevengeRecordInfoReq)
  // optional uint64 RecordId = 1;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->recordid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGetRevengeRecordInfoReq)
  return target;
}

int TPlunderGetRevengeRecordInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RecordId = 1;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGetRevengeRecordInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGetRevengeRecordInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGetRevengeRecordInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGetRevengeRecordInfoReq::MergeFrom(const TPlunderGetRevengeRecordInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGetRevengeRecordInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGetRevengeRecordInfoReq::CopyFrom(const TPlunderGetRevengeRecordInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGetRevengeRecordInfoReq::IsInitialized() const {

  return true;
}

void TPlunderGetRevengeRecordInfoReq::Swap(TPlunderGetRevengeRecordInfoReq* other) {
  if (other != this) {
    std::swap(recordid_, other->recordid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGetRevengeRecordInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGetRevengeRecordInfoReq_descriptor_;
  metadata.reflection = TPlunderGetRevengeRecordInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGetRevengeRecordInfoRsp::kRecordInfoFieldNumber;
const int TPlunderGetRevengeRecordInfoRsp::kBattleResultFieldNumber;
#endif  // !_MSC_VER

TPlunderGetRevengeRecordInfoRsp::TPlunderGetRevengeRecordInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGetRevengeRecordInfoRsp)
}

void TPlunderGetRevengeRecordInfoRsp::InitAsDefaultInstance() {
  recordinfo_ = const_cast< ::pb::TPlunderRevengeRecordInfo*>(&::pb::TPlunderRevengeRecordInfo::default_instance());
}

TPlunderGetRevengeRecordInfoRsp::TPlunderGetRevengeRecordInfoRsp(const TPlunderGetRevengeRecordInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGetRevengeRecordInfoRsp)
}

void TPlunderGetRevengeRecordInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  recordinfo_ = NULL;
  battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGetRevengeRecordInfoRsp::~TPlunderGetRevengeRecordInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGetRevengeRecordInfoRsp)
  SharedDtor();
}

void TPlunderGetRevengeRecordInfoRsp::SharedDtor() {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresult_;
  }
  if (this != default_instance_) {
    delete recordinfo_;
  }
}

void TPlunderGetRevengeRecordInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGetRevengeRecordInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGetRevengeRecordInfoRsp_descriptor_;
}

const TPlunderGetRevengeRecordInfoRsp& TPlunderGetRevengeRecordInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGetRevengeRecordInfoRsp* TPlunderGetRevengeRecordInfoRsp::default_instance_ = NULL;

TPlunderGetRevengeRecordInfoRsp* TPlunderGetRevengeRecordInfoRsp::New() const {
  return new TPlunderGetRevengeRecordInfoRsp;
}

void TPlunderGetRevengeRecordInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_recordinfo()) {
      if (recordinfo_ != NULL) recordinfo_->::pb::TPlunderRevengeRecordInfo::Clear();
    }
    if (has_battleresult()) {
      if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleresult_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGetRevengeRecordInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGetRevengeRecordInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPlunderRevengeRecordInfo RecordInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recordinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleResult;
        break;
      }

      // optional bytes BattleResult = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGetRevengeRecordInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGetRevengeRecordInfoRsp)
  return false;
#undef DO_
}

void TPlunderGetRevengeRecordInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGetRevengeRecordInfoRsp)
  // optional .pb.TPlunderRevengeRecordInfo RecordInfo = 1;
  if (has_recordinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordinfo(), output);
  }

  // optional bytes BattleResult = 2;
  if (has_battleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->battleresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGetRevengeRecordInfoRsp)
}

::google::protobuf::uint8* TPlunderGetRevengeRecordInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGetRevengeRecordInfoRsp)
  // optional .pb.TPlunderRevengeRecordInfo RecordInfo = 1;
  if (has_recordinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordinfo(), target);
  }

  // optional bytes BattleResult = 2;
  if (has_battleresult()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->battleresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGetRevengeRecordInfoRsp)
  return target;
}

int TPlunderGetRevengeRecordInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPlunderRevengeRecordInfo RecordInfo = 1;
    if (has_recordinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recordinfo());
    }

    // optional bytes BattleResult = 2;
    if (has_battleresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGetRevengeRecordInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGetRevengeRecordInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGetRevengeRecordInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGetRevengeRecordInfoRsp::MergeFrom(const TPlunderGetRevengeRecordInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordinfo()) {
      mutable_recordinfo()->::pb::TPlunderRevengeRecordInfo::MergeFrom(from.recordinfo());
    }
    if (from.has_battleresult()) {
      set_battleresult(from.battleresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGetRevengeRecordInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGetRevengeRecordInfoRsp::CopyFrom(const TPlunderGetRevengeRecordInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGetRevengeRecordInfoRsp::IsInitialized() const {

  return true;
}

void TPlunderGetRevengeRecordInfoRsp::Swap(TPlunderGetRevengeRecordInfoRsp* other) {
  if (other != this) {
    std::swap(recordinfo_, other->recordinfo_);
    std::swap(battleresult_, other->battleresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGetRevengeRecordInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGetRevengeRecordInfoRsp_descriptor_;
  metadata.reflection = TPlunderGetRevengeRecordInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderRankReq::kOffsetFieldNumber;
const int TPlunderRankReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TPlunderRankReq::TPlunderRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderRankReq)
}

void TPlunderRankReq::InitAsDefaultInstance() {
}

TPlunderRankReq::TPlunderRankReq(const TPlunderRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderRankReq)
}

void TPlunderRankReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderRankReq::~TPlunderRankReq() {
  // @@protoc_insertion_point(destructor:pb.TPlunderRankReq)
  SharedDtor();
}

void TPlunderRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderRankReq_descriptor_;
}

const TPlunderRankReq& TPlunderRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderRankReq* TPlunderRankReq::default_instance_ = NULL;

TPlunderRankReq* TPlunderRankReq::New() const {
  return new TPlunderRankReq;
}

void TPlunderRankReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderRankReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderRankReq)
  return false;
#undef DO_
}

void TPlunderRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderRankReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderRankReq)
}

::google::protobuf::uint8* TPlunderRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderRankReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderRankReq)
  return target;
}

int TPlunderRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderRankReq::MergeFrom(const TPlunderRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderRankReq::CopyFrom(const TPlunderRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderRankReq::IsInitialized() const {

  return true;
}

void TPlunderRankReq::Swap(TPlunderRankReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderRankReq_descriptor_;
  metadata.reflection = TPlunderRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderRankRsp::kRankArrFieldNumber;
const int TPlunderRankRsp::kMyRankFieldNumber;
const int TPlunderRankRsp::kMyScoreFieldNumber;
#endif  // !_MSC_VER

TPlunderRankRsp::TPlunderRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderRankRsp)
}

void TPlunderRankRsp::InitAsDefaultInstance() {
}

TPlunderRankRsp::TPlunderRankRsp(const TPlunderRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderRankRsp)
}

void TPlunderRankRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  myscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderRankRsp::~TPlunderRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderRankRsp)
  SharedDtor();
}

void TPlunderRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderRankRsp_descriptor_;
}

const TPlunderRankRsp& TPlunderRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderRankRsp* TPlunderRankRsp::default_instance_ = NULL;

TPlunderRankRsp* TPlunderRankRsp::New() const {
  return new TPlunderRankRsp;
}

void TPlunderRankRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlunderRankRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(myrank_, myscore_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPlunderRankInfo RankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankArr;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional int32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MyScore;
        break;
      }

      // optional uint32 MyScore = 3;
      case 3: {
        if (tag == 24) {
         parse_MyScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myscore_)));
          set_has_myscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderRankRsp)
  return false;
#undef DO_
}

void TPlunderRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderRankRsp)
  // repeated .pb.TPlunderRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankarr(i), output);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }

  // optional uint32 MyScore = 3;
  if (has_myscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->myscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderRankRsp)
}

::google::protobuf::uint8* TPlunderRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderRankRsp)
  // repeated .pb.TPlunderRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankarr(i), target);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }

  // optional uint32 MyScore = 3;
  if (has_myscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->myscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderRankRsp)
  return target;
}

int TPlunderRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

    // optional uint32 MyScore = 3;
    if (has_myscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myscore());
    }

  }
  // repeated .pb.TPlunderRankInfo RankArr = 1;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderRankRsp::MergeFrom(const TPlunderRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_myscore()) {
      set_myscore(from.myscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderRankRsp::CopyFrom(const TPlunderRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderRankRsp::IsInitialized() const {

  return true;
}

void TPlunderRankRsp::Swap(TPlunderRankRsp* other) {
  if (other != this) {
    rankarr_.Swap(&other->rankarr_);
    std::swap(myrank_, other->myrank_);
    std::swap(myscore_, other->myscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderRankRsp_descriptor_;
  metadata.reflection = TPlunderRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderGetPalaceCDNumRsp::kFreeCDNumFieldNumber;
#endif  // !_MSC_VER

TPlunderGetPalaceCDNumRsp::TPlunderGetPalaceCDNumRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderGetPalaceCDNumRsp)
}

void TPlunderGetPalaceCDNumRsp::InitAsDefaultInstance() {
}

TPlunderGetPalaceCDNumRsp::TPlunderGetPalaceCDNumRsp(const TPlunderGetPalaceCDNumRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderGetPalaceCDNumRsp)
}

void TPlunderGetPalaceCDNumRsp::SharedCtor() {
  _cached_size_ = 0;
  freecdnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderGetPalaceCDNumRsp::~TPlunderGetPalaceCDNumRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlunderGetPalaceCDNumRsp)
  SharedDtor();
}

void TPlunderGetPalaceCDNumRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderGetPalaceCDNumRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderGetPalaceCDNumRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderGetPalaceCDNumRsp_descriptor_;
}

const TPlunderGetPalaceCDNumRsp& TPlunderGetPalaceCDNumRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderGetPalaceCDNumRsp* TPlunderGetPalaceCDNumRsp::default_instance_ = NULL;

TPlunderGetPalaceCDNumRsp* TPlunderGetPalaceCDNumRsp::New() const {
  return new TPlunderGetPalaceCDNumRsp;
}

void TPlunderGetPalaceCDNumRsp::Clear() {
  freecdnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderGetPalaceCDNumRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderGetPalaceCDNumRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FreeCDNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freecdnum_)));
          set_has_freecdnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderGetPalaceCDNumRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderGetPalaceCDNumRsp)
  return false;
#undef DO_
}

void TPlunderGetPalaceCDNumRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderGetPalaceCDNumRsp)
  // optional uint32 FreeCDNum = 1;
  if (has_freecdnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->freecdnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderGetPalaceCDNumRsp)
}

::google::protobuf::uint8* TPlunderGetPalaceCDNumRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderGetPalaceCDNumRsp)
  // optional uint32 FreeCDNum = 1;
  if (has_freecdnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->freecdnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderGetPalaceCDNumRsp)
  return target;
}

int TPlunderGetPalaceCDNumRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FreeCDNum = 1;
    if (has_freecdnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freecdnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderGetPalaceCDNumRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderGetPalaceCDNumRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderGetPalaceCDNumRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderGetPalaceCDNumRsp::MergeFrom(const TPlunderGetPalaceCDNumRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freecdnum()) {
      set_freecdnum(from.freecdnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderGetPalaceCDNumRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderGetPalaceCDNumRsp::CopyFrom(const TPlunderGetPalaceCDNumRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderGetPalaceCDNumRsp::IsInitialized() const {

  return true;
}

void TPlunderGetPalaceCDNumRsp::Swap(TPlunderGetPalaceCDNumRsp* other) {
  if (other != this) {
    std::swap(freecdnum_, other->freecdnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderGetPalaceCDNumRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderGetPalaceCDNumRsp_descriptor_;
  metadata.reflection = TPlunderGetPalaceCDNumRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderBaseInfoNotify::kBaseInfoFieldNumber;
const int TPlunderBaseInfoNotify::kEventFieldNumber;
#endif  // !_MSC_VER

TPlunderBaseInfoNotify::TPlunderBaseInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderBaseInfoNotify)
}

void TPlunderBaseInfoNotify::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::pb::TPlunderBaseInfo*>(&::pb::TPlunderBaseInfo::default_instance());
}

TPlunderBaseInfoNotify::TPlunderBaseInfoNotify(const TPlunderBaseInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderBaseInfoNotify)
}

void TPlunderBaseInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  event_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderBaseInfoNotify::~TPlunderBaseInfoNotify() {
  // @@protoc_insertion_point(destructor:pb.TPlunderBaseInfoNotify)
  SharedDtor();
}

void TPlunderBaseInfoNotify::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void TPlunderBaseInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderBaseInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderBaseInfoNotify_descriptor_;
}

const TPlunderBaseInfoNotify& TPlunderBaseInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderBaseInfoNotify* TPlunderBaseInfoNotify::default_instance_ = NULL;

TPlunderBaseInfoNotify* TPlunderBaseInfoNotify::New() const {
  return new TPlunderBaseInfoNotify;
}

void TPlunderBaseInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::pb::TPlunderBaseInfo::Clear();
    }
    event_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderBaseInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderBaseInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPlunderBaseInfo BaseInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Event;
        break;
      }

      // optional .pb.EPlunderEvent Event = 2;
      case 2: {
        if (tag == 16) {
         parse_Event:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EPlunderEvent_IsValid(value)) {
            set_event(static_cast< ::pb::EPlunderEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderBaseInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderBaseInfoNotify)
  return false;
#undef DO_
}

void TPlunderBaseInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderBaseInfoNotify)
  // optional .pb.TPlunderBaseInfo BaseInfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional .pb.EPlunderEvent Event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderBaseInfoNotify)
}

::google::protobuf::uint8* TPlunderBaseInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderBaseInfoNotify)
  // optional .pb.TPlunderBaseInfo BaseInfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional .pb.EPlunderEvent Event = 2;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderBaseInfoNotify)
  return target;
}

int TPlunderBaseInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPlunderBaseInfo BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .pb.EPlunderEvent Event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderBaseInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderBaseInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderBaseInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderBaseInfoNotify::MergeFrom(const TPlunderBaseInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::pb::TPlunderBaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderBaseInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderBaseInfoNotify::CopyFrom(const TPlunderBaseInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderBaseInfoNotify::IsInitialized() const {

  return true;
}

void TPlunderBaseInfoNotify::Swap(TPlunderBaseInfoNotify* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderBaseInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderBaseInfoNotify_descriptor_;
  metadata.reflection = TPlunderBaseInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderMapInfoNotify::kMapInfoFieldNumber;
#endif  // !_MSC_VER

TPlunderMapInfoNotify::TPlunderMapInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderMapInfoNotify)
}

void TPlunderMapInfoNotify::InitAsDefaultInstance() {
  mapinfo_ = const_cast< ::pb::TPlunderMapInfo*>(&::pb::TPlunderMapInfo::default_instance());
}

TPlunderMapInfoNotify::TPlunderMapInfoNotify(const TPlunderMapInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderMapInfoNotify)
}

void TPlunderMapInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  mapinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderMapInfoNotify::~TPlunderMapInfoNotify() {
  // @@protoc_insertion_point(destructor:pb.TPlunderMapInfoNotify)
  SharedDtor();
}

void TPlunderMapInfoNotify::SharedDtor() {
  if (this != default_instance_) {
    delete mapinfo_;
  }
}

void TPlunderMapInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderMapInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderMapInfoNotify_descriptor_;
}

const TPlunderMapInfoNotify& TPlunderMapInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderMapInfoNotify* TPlunderMapInfoNotify::default_instance_ = NULL;

TPlunderMapInfoNotify* TPlunderMapInfoNotify::New() const {
  return new TPlunderMapInfoNotify;
}

void TPlunderMapInfoNotify::Clear() {
  if (has_mapinfo()) {
    if (mapinfo_ != NULL) mapinfo_->::pb::TPlunderMapInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderMapInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderMapInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPlunderMapInfo MapInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderMapInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderMapInfoNotify)
  return false;
#undef DO_
}

void TPlunderMapInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderMapInfoNotify)
  // optional .pb.TPlunderMapInfo MapInfo = 1;
  if (has_mapinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderMapInfoNotify)
}

::google::protobuf::uint8* TPlunderMapInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderMapInfoNotify)
  // optional .pb.TPlunderMapInfo MapInfo = 1;
  if (has_mapinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderMapInfoNotify)
  return target;
}

int TPlunderMapInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPlunderMapInfo MapInfo = 1;
    if (has_mapinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderMapInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderMapInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderMapInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderMapInfoNotify::MergeFrom(const TPlunderMapInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapinfo()) {
      mutable_mapinfo()->::pb::TPlunderMapInfo::MergeFrom(from.mapinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderMapInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderMapInfoNotify::CopyFrom(const TPlunderMapInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderMapInfoNotify::IsInitialized() const {

  return true;
}

void TPlunderMapInfoNotify::Swap(TPlunderMapInfoNotify* other) {
  if (other != this) {
    std::swap(mapinfo_, other->mapinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderMapInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderMapInfoNotify_descriptor_;
  metadata.reflection = TPlunderMapInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderMineInfoNotify::kChangedInfoFieldNumber;
#endif  // !_MSC_VER

TPlunderMineInfoNotify::TPlunderMineInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderMineInfoNotify)
}

void TPlunderMineInfoNotify::InitAsDefaultInstance() {
}

TPlunderMineInfoNotify::TPlunderMineInfoNotify(const TPlunderMineInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderMineInfoNotify)
}

void TPlunderMineInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderMineInfoNotify::~TPlunderMineInfoNotify() {
  // @@protoc_insertion_point(destructor:pb.TPlunderMineInfoNotify)
  SharedDtor();
}

void TPlunderMineInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderMineInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderMineInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderMineInfoNotify_descriptor_;
}

const TPlunderMineInfoNotify& TPlunderMineInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderMineInfoNotify* TPlunderMineInfoNotify::default_instance_ = NULL;

TPlunderMineInfoNotify* TPlunderMineInfoNotify::New() const {
  return new TPlunderMineInfoNotify;
}

void TPlunderMineInfoNotify::Clear() {
  changedinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderMineInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderMineInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPlunderMineInfo ChangedInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ChangedInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_changedinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ChangedInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderMineInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderMineInfoNotify)
  return false;
#undef DO_
}

void TPlunderMineInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderMineInfoNotify)
  // repeated .pb.TPlunderMineInfo ChangedInfo = 1;
  for (int i = 0; i < this->changedinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->changedinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderMineInfoNotify)
}

::google::protobuf::uint8* TPlunderMineInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderMineInfoNotify)
  // repeated .pb.TPlunderMineInfo ChangedInfo = 1;
  for (int i = 0; i < this->changedinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->changedinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderMineInfoNotify)
  return target;
}

int TPlunderMineInfoNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPlunderMineInfo ChangedInfo = 1;
  total_size += 1 * this->changedinfo_size();
  for (int i = 0; i < this->changedinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->changedinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderMineInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderMineInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderMineInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderMineInfoNotify::MergeFrom(const TPlunderMineInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  changedinfo_.MergeFrom(from.changedinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderMineInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderMineInfoNotify::CopyFrom(const TPlunderMineInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderMineInfoNotify::IsInitialized() const {

  return true;
}

void TPlunderMineInfoNotify::Swap(TPlunderMineInfoNotify* other) {
  if (other != this) {
    changedinfo_.Swap(&other->changedinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderMineInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderMineInfoNotify_descriptor_;
  metadata.reflection = TPlunderMineInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlunderRecordNotify::kRecordArrFieldNumber;
#endif  // !_MSC_VER

TPlunderRecordNotify::TPlunderRecordNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlunderRecordNotify)
}

void TPlunderRecordNotify::InitAsDefaultInstance() {
}

TPlunderRecordNotify::TPlunderRecordNotify(const TPlunderRecordNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlunderRecordNotify)
}

void TPlunderRecordNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlunderRecordNotify::~TPlunderRecordNotify() {
  // @@protoc_insertion_point(destructor:pb.TPlunderRecordNotify)
  SharedDtor();
}

void TPlunderRecordNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlunderRecordNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlunderRecordNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlunderRecordNotify_descriptor_;
}

const TPlunderRecordNotify& TPlunderRecordNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlunder_2eproto();
  return *default_instance_;
}

TPlunderRecordNotify* TPlunderRecordNotify::default_instance_ = NULL;

TPlunderRecordNotify* TPlunderRecordNotify::New() const {
  return new TPlunderRecordNotify;
}

void TPlunderRecordNotify::Clear() {
  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlunderRecordNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlunderRecordNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPlunderRecordInfo RecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlunderRecordNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlunderRecordNotify)
  return false;
#undef DO_
}

void TPlunderRecordNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlunderRecordNotify)
  // repeated .pb.TPlunderRecordInfo RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlunderRecordNotify)
}

::google::protobuf::uint8* TPlunderRecordNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlunderRecordNotify)
  // repeated .pb.TPlunderRecordInfo RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlunderRecordNotify)
  return target;
}

int TPlunderRecordNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPlunderRecordInfo RecordArr = 1;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlunderRecordNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlunderRecordNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlunderRecordNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlunderRecordNotify::MergeFrom(const TPlunderRecordNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlunderRecordNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlunderRecordNotify::CopyFrom(const TPlunderRecordNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlunderRecordNotify::IsInitialized() const {

  return true;
}

void TPlunderRecordNotify::Swap(TPlunderRecordNotify* other) {
  if (other != this) {
    recordarr_.Swap(&other->recordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlunderRecordNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlunderRecordNotify_descriptor_;
  metadata.reflection = TPlunderRecordNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
