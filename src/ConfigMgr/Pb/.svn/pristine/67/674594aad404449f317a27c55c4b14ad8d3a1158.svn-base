// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActLimitedChallenge.proto

#ifndef PROTOBUF_net_2fActLimitedChallenge_2eproto__INCLUDED
#define PROTOBUF_net_2fActLimitedChallenge_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Battle.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

class TActLimitedChallengeBattleArmyInfo;
class TActLimitedChallengeStrongholdInfo;
class TActLimitedChallengeShopInfo;
class TActLimitedChallengeSquadInfo;
class TActLimitedChallengeGetInfoRsp;
class TActLimitedChallengeBuyItemReq;
class TActLimitedChallengeBuyGoldItemReq;
class TActLimitedChallengeEnterBattleReq;
class TActLimitedChallengeEnterBattleRsp;
class TActLimitedChallengeReportBattleReq;
class TActLimitedChallengeReportBattleRsp;
class TActLimitedChallengeReceiveAchievementReq;
class TActLimitedChallengeAutoReceiveAchievementRsp;
class TActLimitedChallengeNotify;
class TActLimitedChallengeSetSquadReq;
class TActLimitedChallengeSetSquadRsp;
class TActLimitedChallengeSweepReq;
class TActLimitedChallengeSweepRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeBattleArmyInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeBattleArmyInfo : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeBattleArmyInfo();
  virtual ~TActLimitedChallengeBattleArmyInfo();

  TActLimitedChallengeBattleArmyInfo(const TActLimitedChallengeBattleArmyInfo& from);

  inline TActLimitedChallengeBattleArmyInfo& operator=(const TActLimitedChallengeBattleArmyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeBattleArmyInfo& default_instance();

  void Swap(TActLimitedChallengeBattleArmyInfo* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeBattleArmyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeBattleArmyInfo& from);
  void MergeFrom(const TActLimitedChallengeBattleArmyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Fid = 1;
  inline bool has_fid() const;
  inline void clear_fid();
  static const int kFidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeBattleArmyInfo</name>
  	<Function>
  		<name>fid</name>
  		<replaceName>Fid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fid</name>
  		<replaceName>Fid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fid</name>
  		<replaceName>Fid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fid() const;
  inline void set_fid(::google::protobuf::uint32 value);

  // repeated .pb.TArmyInfo ArmyArr = 2;
  inline int armyarr_size() const;
  inline void clear_armyarr();
  static const int kArmyArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeBattleArmyInfo</name>
  	<Function>
  		<name>armyarr</name>
  		<replaceName>ArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_armyarr</name>
  		<replaceName>ArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_armyarr</name>
  		<replaceName>ArmyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyarr</name>
  		<replaceName>ArmyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>armyarr_size</name>
  		<replaceName>ArmyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyInfo& armyarr(int index) const;
  inline ::pb::TArmyInfo* mutable_armyarr(int index);
  inline ::pb::TArmyInfo* add_armyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >&
      armyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >*
      mutable_armyarr();

  // optional uint64 FightForce = 3;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeBattleArmyInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeBattleArmyInfo)
 private:
  inline void set_has_fid();
  inline void clear_has_fid();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo > armyarr_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 fid_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeBattleArmyInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeStrongholdInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeStrongholdInfo : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeStrongholdInfo();
  virtual ~TActLimitedChallengeStrongholdInfo();

  TActLimitedChallengeStrongholdInfo(const TActLimitedChallengeStrongholdInfo& from);

  inline TActLimitedChallengeStrongholdInfo& operator=(const TActLimitedChallengeStrongholdInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeStrongholdInfo& default_instance();

  void Swap(TActLimitedChallengeStrongholdInfo* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeStrongholdInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeStrongholdInfo& from);
  void MergeFrom(const TActLimitedChallengeStrongholdInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeStrongholdInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated .pb.TActLimitedChallengeBattleArmyInfo BattleArmyArr = 2;
  inline int battlearmyarr_size() const;
  inline void clear_battlearmyarr();
  static const int kBattleArmyArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeStrongholdInfo</name>
  	<Function>
  		<name>battlearmyarr</name>
  		<replaceName>BattleArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_battlearmyarr</name>
  		<replaceName>BattleArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_battlearmyarr</name>
  		<replaceName>BattleArmyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlearmyarr</name>
  		<replaceName>BattleArmyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>battlearmyarr_size</name>
  		<replaceName>BattleArmyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLimitedChallengeBattleArmyInfo& battlearmyarr(int index) const;
  inline ::pb::TActLimitedChallengeBattleArmyInfo* mutable_battlearmyarr(int index);
  inline ::pb::TActLimitedChallengeBattleArmyInfo* add_battlearmyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeBattleArmyInfo >&
      battlearmyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeBattleArmyInfo >*
      mutable_battlearmyarr();

  // optional uint32 PassLv = 3;
  inline bool has_passlv() const;
  inline void clear_passlv();
  static const int kPassLvFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeStrongholdInfo</name>
  	<Function>
  		<name>passlv</name>
  		<replaceName>PassLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_passlv</name>
  		<replaceName>PassLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_passlv</name>
  		<replaceName>PassLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 passlv() const;
  inline void set_passlv(::google::protobuf::uint32 value);

  // optional uint32 AtkWinNum = 4;
  inline bool has_atkwinnum() const;
  inline void clear_atkwinnum();
  static const int kAtkWinNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeStrongholdInfo</name>
  	<Function>
  		<name>atkwinnum</name>
  		<replaceName>AtkWinNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkwinnum</name>
  		<replaceName>AtkWinNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkwinnum</name>
  		<replaceName>AtkWinNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 atkwinnum() const;
  inline void set_atkwinnum(::google::protobuf::uint32 value);

  // repeated uint32 SelectDebuffArr = 5;
  inline int selectdebuffarr_size() const;
  inline void clear_selectdebuffarr();
  static const int kSelectDebuffArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeStrongholdInfo</name>
  	<Function>
  		<name>selectdebuffarr</name>
  		<replaceName>SelectDebuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_selectdebuffarr</name>
  		<replaceName>SelectDebuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_selectdebuffarr</name>
  		<replaceName>SelectDebuffArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selectdebuffarr</name>
  		<replaceName>SelectDebuffArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>selectdebuffarr_size</name>
  		<replaceName>SelectDebuffArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 selectdebuffarr(int index) const;
  inline void set_selectdebuffarr(int index, ::google::protobuf::uint32 value);
  inline void add_selectdebuffarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      selectdebuffarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_selectdebuffarr();

  // repeated .pb.TCommonReward SweepDropArr = 6;
  inline int sweepdroparr_size() const;
  inline void clear_sweepdroparr();
  static const int kSweepDropArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeStrongholdInfo</name>
  	<Function>
  		<name>sweepdroparr</name>
  		<replaceName>SweepDropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_sweepdroparr</name>
  		<replaceName>SweepDropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_sweepdroparr</name>
  		<replaceName>SweepDropArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sweepdroparr</name>
  		<replaceName>SweepDropArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>sweepdroparr_size</name>
  		<replaceName>SweepDropArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& sweepdroparr(int index) const;
  inline ::pb::TCommonReward* mutable_sweepdroparr(int index);
  inline ::pb::TCommonReward* add_sweepdroparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      sweepdroparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_sweepdroparr();

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeStrongholdInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_passlv();
  inline void clear_has_passlv();
  inline void set_has_atkwinnum();
  inline void clear_has_atkwinnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeBattleArmyInfo > battlearmyarr_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 passlv_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > selectdebuffarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > sweepdroparr_;
  ::google::protobuf::uint32 atkwinnum_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeStrongholdInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeShopInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeShopInfo : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeShopInfo();
  virtual ~TActLimitedChallengeShopInfo();

  TActLimitedChallengeShopInfo(const TActLimitedChallengeShopInfo& from);

  inline TActLimitedChallengeShopInfo& operator=(const TActLimitedChallengeShopInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeShopInfo& default_instance();

  void Swap(TActLimitedChallengeShopInfo* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeShopInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeShopInfo& from);
  void MergeFrom(const TActLimitedChallengeShopInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeShopInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 2;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeShopInfo</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeShopInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeShopInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeSquadInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeSquadInfo : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeSquadInfo();
  virtual ~TActLimitedChallengeSquadInfo();

  TActLimitedChallengeSquadInfo(const TActLimitedChallengeSquadInfo& from);

  inline TActLimitedChallengeSquadInfo& operator=(const TActLimitedChallengeSquadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeSquadInfo& default_instance();

  void Swap(TActLimitedChallengeSquadInfo* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeSquadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeSquadInfo& from);
  void MergeFrom(const TActLimitedChallengeSquadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Fid = 1;
  inline bool has_fid() const;
  inline void clear_fid();
  static const int kFidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeSquadInfo</name>
  	<Function>
  		<name>fid</name>
  		<replaceName>Fid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fid</name>
  		<replaceName>Fid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fid</name>
  		<replaceName>Fid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fid() const;
  inline void set_fid(::google::protobuf::uint32 value);

  // repeated uint32 Squad = 2;
  inline int squad_size() const;
  inline void clear_squad();
  static const int kSquadFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeSquadInfo</name>
  	<Function>
  		<name>squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squad_size</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squad(int index) const;
  inline void set_squad(int index, ::google::protobuf::uint32 value);
  inline void add_squad(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      squad() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_squad();

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeSquadInfo)
 private:
  inline void set_has_fid();
  inline void clear_has_fid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > squad_;
  ::google::protobuf::uint32 fid_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeSquadInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeGetInfoRsp();
  virtual ~TActLimitedChallengeGetInfoRsp();

  TActLimitedChallengeGetInfoRsp(const TActLimitedChallengeGetInfoRsp& from);

  inline TActLimitedChallengeGetInfoRsp& operator=(const TActLimitedChallengeGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeGetInfoRsp& default_instance();

  void Swap(TActLimitedChallengeGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeGetInfoRsp& from);
  void MergeFrom(const TActLimitedChallengeGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActLimitedChallengeStrongholdInfo StrongholdArr = 1;
  inline int strongholdarr_size() const;
  inline void clear_strongholdarr();
  static const int kStrongholdArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeGetInfoRsp</name>
  	<Function>
  		<name>strongholdarr</name>
  		<replaceName>StrongholdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_strongholdarr</name>
  		<replaceName>StrongholdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_strongholdarr</name>
  		<replaceName>StrongholdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdarr</name>
  		<replaceName>StrongholdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>strongholdarr_size</name>
  		<replaceName>StrongholdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLimitedChallengeStrongholdInfo& strongholdarr(int index) const;
  inline ::pb::TActLimitedChallengeStrongholdInfo* mutable_strongholdarr(int index);
  inline ::pb::TActLimitedChallengeStrongholdInfo* add_strongholdarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeStrongholdInfo >&
      strongholdarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeStrongholdInfo >*
      mutable_strongholdarr();

  // repeated .pb.TActLimitedChallengeShopInfo ShopArr = 2;
  inline int shoparr_size() const;
  inline void clear_shoparr();
  static const int kShopArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeGetInfoRsp</name>
  	<Function>
  		<name>shoparr</name>
  		<replaceName>ShopArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_shoparr</name>
  		<replaceName>ShopArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_shoparr</name>
  		<replaceName>ShopArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_shoparr</name>
  		<replaceName>ShopArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>shoparr_size</name>
  		<replaceName>ShopArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLimitedChallengeShopInfo& shoparr(int index) const;
  inline ::pb::TActLimitedChallengeShopInfo* mutable_shoparr(int index);
  inline ::pb::TActLimitedChallengeShopInfo* add_shoparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeShopInfo >&
      shoparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeShopInfo >*
      mutable_shoparr();

  // repeated .pb.TActLimitedChallengeShopInfo GoldShopArr = 3;
  inline int goldshoparr_size() const;
  inline void clear_goldshoparr();
  static const int kGoldShopArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeGetInfoRsp</name>
  	<Function>
  		<name>goldshoparr</name>
  		<replaceName>GoldShopArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_goldshoparr</name>
  		<replaceName>GoldShopArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_goldshoparr</name>
  		<replaceName>GoldShopArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goldshoparr</name>
  		<replaceName>GoldShopArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>goldshoparr_size</name>
  		<replaceName>GoldShopArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLimitedChallengeShopInfo& goldshoparr(int index) const;
  inline ::pb::TActLimitedChallengeShopInfo* mutable_goldshoparr(int index);
  inline ::pb::TActLimitedChallengeShopInfo* add_goldshoparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeShopInfo >&
      goldshoparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeShopInfo >*
      mutable_goldshoparr();

  // repeated .pb.TActLimitedChallengeShopInfo RmbShopArr = 4;
  inline int rmbshoparr_size() const;
  inline void clear_rmbshoparr();
  static const int kRmbShopArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeGetInfoRsp</name>
  	<Function>
  		<name>rmbshoparr</name>
  		<replaceName>RmbShopArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rmbshoparr</name>
  		<replaceName>RmbShopArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rmbshoparr</name>
  		<replaceName>RmbShopArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rmbshoparr</name>
  		<replaceName>RmbShopArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rmbshoparr_size</name>
  		<replaceName>RmbShopArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLimitedChallengeShopInfo& rmbshoparr(int index) const;
  inline ::pb::TActLimitedChallengeShopInfo* mutable_rmbshoparr(int index);
  inline ::pb::TActLimitedChallengeShopInfo* add_rmbshoparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeShopInfo >&
      rmbshoparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeShopInfo >*
      mutable_rmbshoparr();

  // optional uint32 ChallengeNum = 5;
  inline bool has_challengenum() const;
  inline void clear_challengenum();
  static const int kChallengeNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeGetInfoRsp</name>
  	<Function>
  		<name>challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 challengenum() const;
  inline void set_challengenum(::google::protobuf::uint32 value);

  // optional uint32 LoseNum = 6;
  inline bool has_losenum() const;
  inline void clear_losenum();
  static const int kLoseNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeGetInfoRsp</name>
  	<Function>
  		<name>losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 losenum() const;
  inline void set_losenum(::google::protobuf::uint32 value);

  // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 7;
  inline int squadarr_size() const;
  inline void clear_squadarr();
  static const int kSquadArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeGetInfoRsp</name>
  	<Function>
  		<name>squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squadarr_size</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLimitedChallengeSquadInfo& squadarr(int index) const;
  inline ::pb::TActLimitedChallengeSquadInfo* mutable_squadarr(int index);
  inline ::pb::TActLimitedChallengeSquadInfo* add_squadarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo >&
      squadarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo >*
      mutable_squadarr();

  // repeated uint32 RewardedTidArr = 8;
  inline int rewardedtidarr_size() const;
  inline void clear_rewardedtidarr();
  static const int kRewardedTidArrFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeGetInfoRsp</name>
  	<Function>
  		<name>rewardedtidarr</name>
  		<replaceName>RewardedTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardedtidarr</name>
  		<replaceName>RewardedTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardedtidarr</name>
  		<replaceName>RewardedTidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardedtidarr</name>
  		<replaceName>RewardedTidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardedtidarr_size</name>
  		<replaceName>RewardedTidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardedtidarr(int index) const;
  inline void set_rewardedtidarr(int index, ::google::protobuf::uint32 value);
  inline void add_rewardedtidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rewardedtidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rewardedtidarr();

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeGetInfoRsp)
 private:
  inline void set_has_challengenum();
  inline void clear_has_challengenum();
  inline void set_has_losenum();
  inline void clear_has_losenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeStrongholdInfo > strongholdarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeShopInfo > shoparr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeShopInfo > goldshoparr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeShopInfo > rmbshoparr_;
  ::google::protobuf::uint32 challengenum_;
  ::google::protobuf::uint32 losenum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo > squadarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rewardedtidarr_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeBuyItemReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeBuyItemReq : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeBuyItemReq();
  virtual ~TActLimitedChallengeBuyItemReq();

  TActLimitedChallengeBuyItemReq(const TActLimitedChallengeBuyItemReq& from);

  inline TActLimitedChallengeBuyItemReq& operator=(const TActLimitedChallengeBuyItemReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeBuyItemReq& default_instance();

  void Swap(TActLimitedChallengeBuyItemReq* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeBuyItemReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeBuyItemReq& from);
  void MergeFrom(const TActLimitedChallengeBuyItemReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeBuyItemReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeBuyItemReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeBuyItemReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeBuyItemReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeBuyGoldItemReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeBuyGoldItemReq : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeBuyGoldItemReq();
  virtual ~TActLimitedChallengeBuyGoldItemReq();

  TActLimitedChallengeBuyGoldItemReq(const TActLimitedChallengeBuyGoldItemReq& from);

  inline TActLimitedChallengeBuyGoldItemReq& operator=(const TActLimitedChallengeBuyGoldItemReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeBuyGoldItemReq& default_instance();

  void Swap(TActLimitedChallengeBuyGoldItemReq* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeBuyGoldItemReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeBuyGoldItemReq& from);
  void MergeFrom(const TActLimitedChallengeBuyGoldItemReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeBuyGoldItemReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeBuyGoldItemReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeBuyGoldItemReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeBuyGoldItemReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeEnterBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeEnterBattleReq : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeEnterBattleReq();
  virtual ~TActLimitedChallengeEnterBattleReq();

  TActLimitedChallengeEnterBattleReq(const TActLimitedChallengeEnterBattleReq& from);

  inline TActLimitedChallengeEnterBattleReq& operator=(const TActLimitedChallengeEnterBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeEnterBattleReq& default_instance();

  void Swap(TActLimitedChallengeEnterBattleReq* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeEnterBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeEnterBattleReq& from);
  void MergeFrom(const TActLimitedChallengeEnterBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeEnterBattleReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeEnterBattleReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // repeated uint32 DebuffArr = 3;
  inline int debuffarr_size() const;
  inline void clear_debuffarr();
  static const int kDebuffArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeEnterBattleReq</name>
  	<Function>
  		<name>debuffarr</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_debuffarr</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_debuffarr</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_debuffarr</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>debuffarr_size</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 debuffarr(int index) const;
  inline void set_debuffarr(int index, ::google::protobuf::uint32 value);
  inline void add_debuffarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      debuffarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_debuffarr();

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeEnterBattleReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > debuffarr_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeEnterBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeEnterBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeEnterBattleRsp : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeEnterBattleRsp();
  virtual ~TActLimitedChallengeEnterBattleRsp();

  TActLimitedChallengeEnterBattleRsp(const TActLimitedChallengeEnterBattleRsp& from);

  inline TActLimitedChallengeEnterBattleRsp& operator=(const TActLimitedChallengeEnterBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeEnterBattleRsp& default_instance();

  void Swap(TActLimitedChallengeEnterBattleRsp* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeEnterBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeEnterBattleRsp& from);
  void MergeFrom(const TActLimitedChallengeEnterBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBattleArgs BattleArgs = 1;
  inline int battleargs_size() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeEnterBattleRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>battleargs_size</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs(int index) const;
  inline ::pb::TBattleArgs* mutable_battleargs(int index);
  inline ::pb::TBattleArgs* add_battleargs();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBattleArgs >&
      battleargs() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBattleArgs >*
      mutable_battleargs();

  // optional uint32 ChallengeNum = 2;
  inline bool has_challengenum() const;
  inline void clear_challengenum();
  static const int kChallengeNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeEnterBattleRsp</name>
  	<Function>
  		<name>challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 challengenum() const;
  inline void set_challengenum(::google::protobuf::uint32 value);

  // optional uint32 LoseNum = 3;
  inline bool has_losenum() const;
  inline void clear_losenum();
  static const int kLoseNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeEnterBattleRsp</name>
  	<Function>
  		<name>losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 losenum() const;
  inline void set_losenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeEnterBattleRsp)
 private:
  inline void set_has_challengenum();
  inline void clear_has_challengenum();
  inline void set_has_losenum();
  inline void clear_has_losenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBattleArgs > battleargs_;
  ::google::protobuf::uint32 challengenum_;
  ::google::protobuf::uint32 losenum_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeEnterBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeReportBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeReportBattleReq : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeReportBattleReq();
  virtual ~TActLimitedChallengeReportBattleReq();

  TActLimitedChallengeReportBattleReq(const TActLimitedChallengeReportBattleReq& from);

  inline TActLimitedChallengeReportBattleReq& operator=(const TActLimitedChallengeReportBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeReportBattleReq& default_instance();

  void Swap(TActLimitedChallengeReportBattleReq* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeReportBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeReportBattleReq& from);
  void MergeFrom(const TActLimitedChallengeReportBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeReportBattleReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated bytes BattleResult = 2;
  inline int battleresult_size() const;
  inline void clear_battleresult();
  static const int kBattleResultFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeReportBattleReq</name>
  	<Function>
  		<name>battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>battleresult_size</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleresult(int index) const;
  inline ::std::string* mutable_battleresult(int index);
  inline void set_battleresult(int index, const ::std::string& value);
  inline void set_battleresult(int index, const char* value);
  inline void set_battleresult(int index, const void* value, size_t size);
  inline ::std::string* add_battleresult();
  inline void add_battleresult(const ::std::string& value);
  inline void add_battleresult(const char* value);
  inline void add_battleresult(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& battleresult() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_battleresult();

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeReportBattleReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> battleresult_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeReportBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeReportBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeReportBattleRsp : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeReportBattleRsp();
  virtual ~TActLimitedChallengeReportBattleRsp();

  TActLimitedChallengeReportBattleRsp(const TActLimitedChallengeReportBattleRsp& from);

  inline TActLimitedChallengeReportBattleRsp& operator=(const TActLimitedChallengeReportBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeReportBattleRsp& default_instance();

  void Swap(TActLimitedChallengeReportBattleRsp* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeReportBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeReportBattleRsp& from);
  void MergeFrom(const TActLimitedChallengeReportBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArr = 1;
  inline int droparr_size() const;
  inline void clear_droparr();
  static const int kDropArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeReportBattleRsp</name>
  	<Function>
  		<name>droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparr_size</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparr(int index) const;
  inline ::pb::TCommonReward* mutable_droparr(int index);
  inline ::pb::TCommonReward* add_droparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparr();

  // repeated .pb.TActLimitedChallengeStrongholdInfo StrongholdArr = 2;
  inline int strongholdarr_size() const;
  inline void clear_strongholdarr();
  static const int kStrongholdArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeReportBattleRsp</name>
  	<Function>
  		<name>strongholdarr</name>
  		<replaceName>StrongholdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_strongholdarr</name>
  		<replaceName>StrongholdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_strongholdarr</name>
  		<replaceName>StrongholdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdarr</name>
  		<replaceName>StrongholdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>strongholdarr_size</name>
  		<replaceName>StrongholdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLimitedChallengeStrongholdInfo& strongholdarr(int index) const;
  inline ::pb::TActLimitedChallengeStrongholdInfo* mutable_strongholdarr(int index);
  inline ::pb::TActLimitedChallengeStrongholdInfo* add_strongholdarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeStrongholdInfo >&
      strongholdarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeStrongholdInfo >*
      mutable_strongholdarr();

  // optional uint32 ChallengeNum = 3;
  inline bool has_challengenum() const;
  inline void clear_challengenum();
  static const int kChallengeNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeReportBattleRsp</name>
  	<Function>
  		<name>challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 challengenum() const;
  inline void set_challengenum(::google::protobuf::uint32 value);

  // optional uint32 StrongholdWinNum = 4;
  inline bool has_strongholdwinnum() const;
  inline void clear_strongholdwinnum();
  static const int kStrongholdWinNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeReportBattleRsp</name>
  	<Function>
  		<name>strongholdwinnum</name>
  		<replaceName>StrongholdWinNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdwinnum</name>
  		<replaceName>StrongholdWinNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdwinnum</name>
  		<replaceName>StrongholdWinNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdwinnum() const;
  inline void set_strongholdwinnum(::google::protobuf::uint32 value);

  // optional uint32 LoseNum = 5;
  inline bool has_losenum() const;
  inline void clear_losenum();
  static const int kLoseNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeReportBattleRsp</name>
  	<Function>
  		<name>losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 losenum() const;
  inline void set_losenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeReportBattleRsp)
 private:
  inline void set_has_challengenum();
  inline void clear_has_challengenum();
  inline void set_has_strongholdwinnum();
  inline void clear_has_strongholdwinnum();
  inline void set_has_losenum();
  inline void clear_has_losenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeStrongholdInfo > strongholdarr_;
  ::google::protobuf::uint32 challengenum_;
  ::google::protobuf::uint32 strongholdwinnum_;
  ::google::protobuf::uint32 losenum_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeReportBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeReceiveAchievementReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeReceiveAchievementReq : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeReceiveAchievementReq();
  virtual ~TActLimitedChallengeReceiveAchievementReq();

  TActLimitedChallengeReceiveAchievementReq(const TActLimitedChallengeReceiveAchievementReq& from);

  inline TActLimitedChallengeReceiveAchievementReq& operator=(const TActLimitedChallengeReceiveAchievementReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeReceiveAchievementReq& default_instance();

  void Swap(TActLimitedChallengeReceiveAchievementReq* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeReceiveAchievementReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeReceiveAchievementReq& from);
  void MergeFrom(const TActLimitedChallengeReceiveAchievementReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeReceiveAchievementReq</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeReceiveAchievementReq)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tid_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeReceiveAchievementReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeAutoReceiveAchievementRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeAutoReceiveAchievementRsp : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeAutoReceiveAchievementRsp();
  virtual ~TActLimitedChallengeAutoReceiveAchievementRsp();

  TActLimitedChallengeAutoReceiveAchievementRsp(const TActLimitedChallengeAutoReceiveAchievementRsp& from);

  inline TActLimitedChallengeAutoReceiveAchievementRsp& operator=(const TActLimitedChallengeAutoReceiveAchievementRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeAutoReceiveAchievementRsp& default_instance();

  void Swap(TActLimitedChallengeAutoReceiveAchievementRsp* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeAutoReceiveAchievementRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeAutoReceiveAchievementRsp& from);
  void MergeFrom(const TActLimitedChallengeAutoReceiveAchievementRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 RewardedTidArr = 1;
  inline int rewardedtidarr_size() const;
  inline void clear_rewardedtidarr();
  static const int kRewardedTidArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeAutoReceiveAchievementRsp</name>
  	<Function>
  		<name>rewardedtidarr</name>
  		<replaceName>RewardedTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardedtidarr</name>
  		<replaceName>RewardedTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardedtidarr</name>
  		<replaceName>RewardedTidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardedtidarr</name>
  		<replaceName>RewardedTidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardedtidarr_size</name>
  		<replaceName>RewardedTidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardedtidarr(int index) const;
  inline void set_rewardedtidarr(int index, ::google::protobuf::uint32 value);
  inline void add_rewardedtidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rewardedtidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rewardedtidarr();

  // repeated .pb.TCommonReward RewardArr = 2;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeAutoReceiveAchievementRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeAutoReceiveAchievementRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rewardedtidarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeAutoReceiveAchievementRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeNotify : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeNotify();
  virtual ~TActLimitedChallengeNotify();

  TActLimitedChallengeNotify(const TActLimitedChallengeNotify& from);

  inline TActLimitedChallengeNotify& operator=(const TActLimitedChallengeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeNotify& default_instance();

  void Swap(TActLimitedChallengeNotify* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeNotify& from);
  void MergeFrom(const TActLimitedChallengeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeNotify</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward DropArr = 2;
  inline int droparr_size() const;
  inline void clear_droparr();
  static const int kDropArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeNotify</name>
  	<Function>
  		<name>droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparr_size</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparr(int index) const;
  inline ::pb::TCommonReward* mutable_droparr(int index);
  inline ::pb::TCommonReward* add_droparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparr();

  // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 3;
  inline int squadarr_size() const;
  inline void clear_squadarr();
  static const int kSquadArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeNotify</name>
  	<Function>
  		<name>squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squadarr_size</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLimitedChallengeSquadInfo& squadarr(int index) const;
  inline ::pb::TActLimitedChallengeSquadInfo* mutable_squadarr(int index);
  inline ::pb::TActLimitedChallengeSquadInfo* add_squadarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo >&
      squadarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo >*
      mutable_squadarr();

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeNotify)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo > squadarr_;
  ::google::protobuf::uint32 itemid_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeSetSquadReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeSetSquadReq : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeSetSquadReq();
  virtual ~TActLimitedChallengeSetSquadReq();

  TActLimitedChallengeSetSquadReq(const TActLimitedChallengeSetSquadReq& from);

  inline TActLimitedChallengeSetSquadReq& operator=(const TActLimitedChallengeSetSquadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeSetSquadReq& default_instance();

  void Swap(TActLimitedChallengeSetSquadReq* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeSetSquadReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeSetSquadReq& from);
  void MergeFrom(const TActLimitedChallengeSetSquadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 1;
  inline int squadarr_size() const;
  inline void clear_squadarr();
  static const int kSquadArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeSetSquadReq</name>
  	<Function>
  		<name>squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squadarr_size</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLimitedChallengeSquadInfo& squadarr(int index) const;
  inline ::pb::TActLimitedChallengeSquadInfo* mutable_squadarr(int index);
  inline ::pb::TActLimitedChallengeSquadInfo* add_squadarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo >&
      squadarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo >*
      mutable_squadarr();

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeSetSquadReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo > squadarr_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeSetSquadReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeSetSquadRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeSetSquadRsp : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeSetSquadRsp();
  virtual ~TActLimitedChallengeSetSquadRsp();

  TActLimitedChallengeSetSquadRsp(const TActLimitedChallengeSetSquadRsp& from);

  inline TActLimitedChallengeSetSquadRsp& operator=(const TActLimitedChallengeSetSquadRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeSetSquadRsp& default_instance();

  void Swap(TActLimitedChallengeSetSquadRsp* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeSetSquadRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeSetSquadRsp& from);
  void MergeFrom(const TActLimitedChallengeSetSquadRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 1;
  inline int squadarr_size() const;
  inline void clear_squadarr();
  static const int kSquadArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeSetSquadRsp</name>
  	<Function>
  		<name>squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squadarr_size</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLimitedChallengeSquadInfo& squadarr(int index) const;
  inline ::pb::TActLimitedChallengeSquadInfo* mutable_squadarr(int index);
  inline ::pb::TActLimitedChallengeSquadInfo* add_squadarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo >&
      squadarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo >*
      mutable_squadarr();

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeSetSquadRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo > squadarr_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeSetSquadRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeSweepReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeSweepReq : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeSweepReq();
  virtual ~TActLimitedChallengeSweepReq();

  TActLimitedChallengeSweepReq(const TActLimitedChallengeSweepReq& from);

  inline TActLimitedChallengeSweepReq& operator=(const TActLimitedChallengeSweepReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeSweepReq& default_instance();

  void Swap(TActLimitedChallengeSweepReq* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeSweepReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeSweepReq& from);
  void MergeFrom(const TActLimitedChallengeSweepReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeSweepReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeSweepReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeSweepReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLimitedChallengeSweepRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLimitedChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLimitedChallengeSweepRsp : public ::google::protobuf::Message {
 public:
  TActLimitedChallengeSweepRsp();
  virtual ~TActLimitedChallengeSweepRsp();

  TActLimitedChallengeSweepRsp(const TActLimitedChallengeSweepRsp& from);

  inline TActLimitedChallengeSweepRsp& operator=(const TActLimitedChallengeSweepRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLimitedChallengeSweepRsp& default_instance();

  void Swap(TActLimitedChallengeSweepRsp* other);

  // implements Message ----------------------------------------------

  TActLimitedChallengeSweepRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLimitedChallengeSweepRsp& from);
  void MergeFrom(const TActLimitedChallengeSweepRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArr = 1;
  inline int droparr_size() const;
  inline void clear_droparr();
  static const int kDropArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeSweepRsp</name>
  	<Function>
  		<name>droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparr_size</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparr(int index) const;
  inline ::pb::TCommonReward* mutable_droparr(int index);
  inline ::pb::TCommonReward* add_droparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparr();

  // optional uint32 ChallengeNum = 3;
  inline bool has_challengenum() const;
  inline void clear_challengenum();
  static const int kChallengeNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeSweepRsp</name>
  	<Function>
  		<name>challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 challengenum() const;
  inline void set_challengenum(::google::protobuf::uint32 value);

  // optional uint32 StrongholdWinNum = 4;
  inline bool has_strongholdwinnum() const;
  inline void clear_strongholdwinnum();
  static const int kStrongholdWinNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeSweepRsp</name>
  	<Function>
  		<name>strongholdwinnum</name>
  		<replaceName>StrongholdWinNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdwinnum</name>
  		<replaceName>StrongholdWinNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdwinnum</name>
  		<replaceName>StrongholdWinNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdwinnum() const;
  inline void set_strongholdwinnum(::google::protobuf::uint32 value);

  // optional uint32 LoseNum = 5;
  inline bool has_losenum() const;
  inline void clear_losenum();
  static const int kLoseNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActLimitedChallengeSweepRsp</name>
  	<Function>
  		<name>losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 losenum() const;
  inline void set_losenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActLimitedChallengeSweepRsp)
 private:
  inline void set_has_challengenum();
  inline void clear_has_challengenum();
  inline void set_has_strongholdwinnum();
  inline void clear_has_strongholdwinnum();
  inline void set_has_losenum();
  inline void clear_has_losenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparr_;
  ::google::protobuf::uint32 challengenum_;
  ::google::protobuf::uint32 strongholdwinnum_;
  ::google::protobuf::uint32 losenum_;
  friend void  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto();

  void InitAsDefaultInstance();
  static TActLimitedChallengeSweepRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TActLimitedChallengeBattleArmyInfo

// optional uint32 Fid = 1;
inline bool TActLimitedChallengeBattleArmyInfo::has_fid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLimitedChallengeBattleArmyInfo::set_has_fid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLimitedChallengeBattleArmyInfo::clear_has_fid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLimitedChallengeBattleArmyInfo::clear_fid() {
  fid_ = 0u;
  clear_has_fid();
}
inline ::google::protobuf::uint32 TActLimitedChallengeBattleArmyInfo::fid() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeBattleArmyInfo.Fid)
  return fid_;
}
inline void TActLimitedChallengeBattleArmyInfo::set_fid(::google::protobuf::uint32 value) {
  set_has_fid();
  fid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeBattleArmyInfo.Fid)
}

// repeated .pb.TArmyInfo ArmyArr = 2;
inline int TActLimitedChallengeBattleArmyInfo::armyarr_size() const {
  return armyarr_.size();
}
inline void TActLimitedChallengeBattleArmyInfo::clear_armyarr() {
  armyarr_.Clear();
}
inline const ::pb::TArmyInfo& TActLimitedChallengeBattleArmyInfo::armyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeBattleArmyInfo.ArmyArr)
  return armyarr_.Get(index);
}
inline ::pb::TArmyInfo* TActLimitedChallengeBattleArmyInfo::mutable_armyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeBattleArmyInfo.ArmyArr)
  return armyarr_.Mutable(index);
}
inline ::pb::TArmyInfo* TActLimitedChallengeBattleArmyInfo::add_armyarr() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeBattleArmyInfo.ArmyArr)
  return armyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >&
TActLimitedChallengeBattleArmyInfo::armyarr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeBattleArmyInfo.ArmyArr)
  return armyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >*
TActLimitedChallengeBattleArmyInfo::mutable_armyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeBattleArmyInfo.ArmyArr)
  return &armyarr_;
}

// optional uint64 FightForce = 3;
inline bool TActLimitedChallengeBattleArmyInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActLimitedChallengeBattleArmyInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActLimitedChallengeBattleArmyInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActLimitedChallengeBattleArmyInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TActLimitedChallengeBattleArmyInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeBattleArmyInfo.FightForce)
  return fightforce_;
}
inline void TActLimitedChallengeBattleArmyInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeBattleArmyInfo.FightForce)
}

// -------------------------------------------------------------------

// TActLimitedChallengeStrongholdInfo

// optional uint32 Id = 1;
inline bool TActLimitedChallengeStrongholdInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLimitedChallengeStrongholdInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLimitedChallengeStrongholdInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLimitedChallengeStrongholdInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActLimitedChallengeStrongholdInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeStrongholdInfo.Id)
  return id_;
}
inline void TActLimitedChallengeStrongholdInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeStrongholdInfo.Id)
}

// repeated .pb.TActLimitedChallengeBattleArmyInfo BattleArmyArr = 2;
inline int TActLimitedChallengeStrongholdInfo::battlearmyarr_size() const {
  return battlearmyarr_.size();
}
inline void TActLimitedChallengeStrongholdInfo::clear_battlearmyarr() {
  battlearmyarr_.Clear();
}
inline const ::pb::TActLimitedChallengeBattleArmyInfo& TActLimitedChallengeStrongholdInfo::battlearmyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeStrongholdInfo.BattleArmyArr)
  return battlearmyarr_.Get(index);
}
inline ::pb::TActLimitedChallengeBattleArmyInfo* TActLimitedChallengeStrongholdInfo::mutable_battlearmyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeStrongholdInfo.BattleArmyArr)
  return battlearmyarr_.Mutable(index);
}
inline ::pb::TActLimitedChallengeBattleArmyInfo* TActLimitedChallengeStrongholdInfo::add_battlearmyarr() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeStrongholdInfo.BattleArmyArr)
  return battlearmyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeBattleArmyInfo >&
TActLimitedChallengeStrongholdInfo::battlearmyarr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeStrongholdInfo.BattleArmyArr)
  return battlearmyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeBattleArmyInfo >*
TActLimitedChallengeStrongholdInfo::mutable_battlearmyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeStrongholdInfo.BattleArmyArr)
  return &battlearmyarr_;
}

// optional uint32 PassLv = 3;
inline bool TActLimitedChallengeStrongholdInfo::has_passlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActLimitedChallengeStrongholdInfo::set_has_passlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActLimitedChallengeStrongholdInfo::clear_has_passlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActLimitedChallengeStrongholdInfo::clear_passlv() {
  passlv_ = 0u;
  clear_has_passlv();
}
inline ::google::protobuf::uint32 TActLimitedChallengeStrongholdInfo::passlv() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeStrongholdInfo.PassLv)
  return passlv_;
}
inline void TActLimitedChallengeStrongholdInfo::set_passlv(::google::protobuf::uint32 value) {
  set_has_passlv();
  passlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeStrongholdInfo.PassLv)
}

// optional uint32 AtkWinNum = 4;
inline bool TActLimitedChallengeStrongholdInfo::has_atkwinnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TActLimitedChallengeStrongholdInfo::set_has_atkwinnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TActLimitedChallengeStrongholdInfo::clear_has_atkwinnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TActLimitedChallengeStrongholdInfo::clear_atkwinnum() {
  atkwinnum_ = 0u;
  clear_has_atkwinnum();
}
inline ::google::protobuf::uint32 TActLimitedChallengeStrongholdInfo::atkwinnum() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeStrongholdInfo.AtkWinNum)
  return atkwinnum_;
}
inline void TActLimitedChallengeStrongholdInfo::set_atkwinnum(::google::protobuf::uint32 value) {
  set_has_atkwinnum();
  atkwinnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeStrongholdInfo.AtkWinNum)
}

// repeated uint32 SelectDebuffArr = 5;
inline int TActLimitedChallengeStrongholdInfo::selectdebuffarr_size() const {
  return selectdebuffarr_.size();
}
inline void TActLimitedChallengeStrongholdInfo::clear_selectdebuffarr() {
  selectdebuffarr_.Clear();
}
inline ::google::protobuf::uint32 TActLimitedChallengeStrongholdInfo::selectdebuffarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeStrongholdInfo.SelectDebuffArr)
  return selectdebuffarr_.Get(index);
}
inline void TActLimitedChallengeStrongholdInfo::set_selectdebuffarr(int index, ::google::protobuf::uint32 value) {
  selectdebuffarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeStrongholdInfo.SelectDebuffArr)
}
inline void TActLimitedChallengeStrongholdInfo::add_selectdebuffarr(::google::protobuf::uint32 value) {
  selectdebuffarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeStrongholdInfo.SelectDebuffArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActLimitedChallengeStrongholdInfo::selectdebuffarr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeStrongholdInfo.SelectDebuffArr)
  return selectdebuffarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActLimitedChallengeStrongholdInfo::mutable_selectdebuffarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeStrongholdInfo.SelectDebuffArr)
  return &selectdebuffarr_;
}

// repeated .pb.TCommonReward SweepDropArr = 6;
inline int TActLimitedChallengeStrongholdInfo::sweepdroparr_size() const {
  return sweepdroparr_.size();
}
inline void TActLimitedChallengeStrongholdInfo::clear_sweepdroparr() {
  sweepdroparr_.Clear();
}
inline const ::pb::TCommonReward& TActLimitedChallengeStrongholdInfo::sweepdroparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeStrongholdInfo.SweepDropArr)
  return sweepdroparr_.Get(index);
}
inline ::pb::TCommonReward* TActLimitedChallengeStrongholdInfo::mutable_sweepdroparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeStrongholdInfo.SweepDropArr)
  return sweepdroparr_.Mutable(index);
}
inline ::pb::TCommonReward* TActLimitedChallengeStrongholdInfo::add_sweepdroparr() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeStrongholdInfo.SweepDropArr)
  return sweepdroparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActLimitedChallengeStrongholdInfo::sweepdroparr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeStrongholdInfo.SweepDropArr)
  return sweepdroparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActLimitedChallengeStrongholdInfo::mutable_sweepdroparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeStrongholdInfo.SweepDropArr)
  return &sweepdroparr_;
}

// -------------------------------------------------------------------

// TActLimitedChallengeShopInfo

// optional uint32 Id = 1;
inline bool TActLimitedChallengeShopInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLimitedChallengeShopInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLimitedChallengeShopInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLimitedChallengeShopInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActLimitedChallengeShopInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeShopInfo.Id)
  return id_;
}
inline void TActLimitedChallengeShopInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeShopInfo.Id)
}

// optional uint32 BuyNum = 2;
inline bool TActLimitedChallengeShopInfo::has_buynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActLimitedChallengeShopInfo::set_has_buynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActLimitedChallengeShopInfo::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActLimitedChallengeShopInfo::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TActLimitedChallengeShopInfo::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeShopInfo.BuyNum)
  return buynum_;
}
inline void TActLimitedChallengeShopInfo::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeShopInfo.BuyNum)
}

// -------------------------------------------------------------------

// TActLimitedChallengeSquadInfo

// optional uint32 Fid = 1;
inline bool TActLimitedChallengeSquadInfo::has_fid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLimitedChallengeSquadInfo::set_has_fid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLimitedChallengeSquadInfo::clear_has_fid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLimitedChallengeSquadInfo::clear_fid() {
  fid_ = 0u;
  clear_has_fid();
}
inline ::google::protobuf::uint32 TActLimitedChallengeSquadInfo::fid() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeSquadInfo.Fid)
  return fid_;
}
inline void TActLimitedChallengeSquadInfo::set_fid(::google::protobuf::uint32 value) {
  set_has_fid();
  fid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeSquadInfo.Fid)
}

// repeated uint32 Squad = 2;
inline int TActLimitedChallengeSquadInfo::squad_size() const {
  return squad_.size();
}
inline void TActLimitedChallengeSquadInfo::clear_squad() {
  squad_.Clear();
}
inline ::google::protobuf::uint32 TActLimitedChallengeSquadInfo::squad(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeSquadInfo.Squad)
  return squad_.Get(index);
}
inline void TActLimitedChallengeSquadInfo::set_squad(int index, ::google::protobuf::uint32 value) {
  squad_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeSquadInfo.Squad)
}
inline void TActLimitedChallengeSquadInfo::add_squad(::google::protobuf::uint32 value) {
  squad_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeSquadInfo.Squad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActLimitedChallengeSquadInfo::squad() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeSquadInfo.Squad)
  return squad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActLimitedChallengeSquadInfo::mutable_squad() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeSquadInfo.Squad)
  return &squad_;
}

// -------------------------------------------------------------------

// TActLimitedChallengeGetInfoRsp

// repeated .pb.TActLimitedChallengeStrongholdInfo StrongholdArr = 1;
inline int TActLimitedChallengeGetInfoRsp::strongholdarr_size() const {
  return strongholdarr_.size();
}
inline void TActLimitedChallengeGetInfoRsp::clear_strongholdarr() {
  strongholdarr_.Clear();
}
inline const ::pb::TActLimitedChallengeStrongholdInfo& TActLimitedChallengeGetInfoRsp::strongholdarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeGetInfoRsp.StrongholdArr)
  return strongholdarr_.Get(index);
}
inline ::pb::TActLimitedChallengeStrongholdInfo* TActLimitedChallengeGetInfoRsp::mutable_strongholdarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeGetInfoRsp.StrongholdArr)
  return strongholdarr_.Mutable(index);
}
inline ::pb::TActLimitedChallengeStrongholdInfo* TActLimitedChallengeGetInfoRsp::add_strongholdarr() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeGetInfoRsp.StrongholdArr)
  return strongholdarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeStrongholdInfo >&
TActLimitedChallengeGetInfoRsp::strongholdarr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeGetInfoRsp.StrongholdArr)
  return strongholdarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeStrongholdInfo >*
TActLimitedChallengeGetInfoRsp::mutable_strongholdarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeGetInfoRsp.StrongholdArr)
  return &strongholdarr_;
}

// repeated .pb.TActLimitedChallengeShopInfo ShopArr = 2;
inline int TActLimitedChallengeGetInfoRsp::shoparr_size() const {
  return shoparr_.size();
}
inline void TActLimitedChallengeGetInfoRsp::clear_shoparr() {
  shoparr_.Clear();
}
inline const ::pb::TActLimitedChallengeShopInfo& TActLimitedChallengeGetInfoRsp::shoparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeGetInfoRsp.ShopArr)
  return shoparr_.Get(index);
}
inline ::pb::TActLimitedChallengeShopInfo* TActLimitedChallengeGetInfoRsp::mutable_shoparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeGetInfoRsp.ShopArr)
  return shoparr_.Mutable(index);
}
inline ::pb::TActLimitedChallengeShopInfo* TActLimitedChallengeGetInfoRsp::add_shoparr() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeGetInfoRsp.ShopArr)
  return shoparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeShopInfo >&
TActLimitedChallengeGetInfoRsp::shoparr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeGetInfoRsp.ShopArr)
  return shoparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeShopInfo >*
TActLimitedChallengeGetInfoRsp::mutable_shoparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeGetInfoRsp.ShopArr)
  return &shoparr_;
}

// repeated .pb.TActLimitedChallengeShopInfo GoldShopArr = 3;
inline int TActLimitedChallengeGetInfoRsp::goldshoparr_size() const {
  return goldshoparr_.size();
}
inline void TActLimitedChallengeGetInfoRsp::clear_goldshoparr() {
  goldshoparr_.Clear();
}
inline const ::pb::TActLimitedChallengeShopInfo& TActLimitedChallengeGetInfoRsp::goldshoparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeGetInfoRsp.GoldShopArr)
  return goldshoparr_.Get(index);
}
inline ::pb::TActLimitedChallengeShopInfo* TActLimitedChallengeGetInfoRsp::mutable_goldshoparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeGetInfoRsp.GoldShopArr)
  return goldshoparr_.Mutable(index);
}
inline ::pb::TActLimitedChallengeShopInfo* TActLimitedChallengeGetInfoRsp::add_goldshoparr() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeGetInfoRsp.GoldShopArr)
  return goldshoparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeShopInfo >&
TActLimitedChallengeGetInfoRsp::goldshoparr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeGetInfoRsp.GoldShopArr)
  return goldshoparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeShopInfo >*
TActLimitedChallengeGetInfoRsp::mutable_goldshoparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeGetInfoRsp.GoldShopArr)
  return &goldshoparr_;
}

// repeated .pb.TActLimitedChallengeShopInfo RmbShopArr = 4;
inline int TActLimitedChallengeGetInfoRsp::rmbshoparr_size() const {
  return rmbshoparr_.size();
}
inline void TActLimitedChallengeGetInfoRsp::clear_rmbshoparr() {
  rmbshoparr_.Clear();
}
inline const ::pb::TActLimitedChallengeShopInfo& TActLimitedChallengeGetInfoRsp::rmbshoparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeGetInfoRsp.RmbShopArr)
  return rmbshoparr_.Get(index);
}
inline ::pb::TActLimitedChallengeShopInfo* TActLimitedChallengeGetInfoRsp::mutable_rmbshoparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeGetInfoRsp.RmbShopArr)
  return rmbshoparr_.Mutable(index);
}
inline ::pb::TActLimitedChallengeShopInfo* TActLimitedChallengeGetInfoRsp::add_rmbshoparr() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeGetInfoRsp.RmbShopArr)
  return rmbshoparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeShopInfo >&
TActLimitedChallengeGetInfoRsp::rmbshoparr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeGetInfoRsp.RmbShopArr)
  return rmbshoparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeShopInfo >*
TActLimitedChallengeGetInfoRsp::mutable_rmbshoparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeGetInfoRsp.RmbShopArr)
  return &rmbshoparr_;
}

// optional uint32 ChallengeNum = 5;
inline bool TActLimitedChallengeGetInfoRsp::has_challengenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TActLimitedChallengeGetInfoRsp::set_has_challengenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TActLimitedChallengeGetInfoRsp::clear_has_challengenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TActLimitedChallengeGetInfoRsp::clear_challengenum() {
  challengenum_ = 0u;
  clear_has_challengenum();
}
inline ::google::protobuf::uint32 TActLimitedChallengeGetInfoRsp::challengenum() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeGetInfoRsp.ChallengeNum)
  return challengenum_;
}
inline void TActLimitedChallengeGetInfoRsp::set_challengenum(::google::protobuf::uint32 value) {
  set_has_challengenum();
  challengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeGetInfoRsp.ChallengeNum)
}

// optional uint32 LoseNum = 6;
inline bool TActLimitedChallengeGetInfoRsp::has_losenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TActLimitedChallengeGetInfoRsp::set_has_losenum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TActLimitedChallengeGetInfoRsp::clear_has_losenum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TActLimitedChallengeGetInfoRsp::clear_losenum() {
  losenum_ = 0u;
  clear_has_losenum();
}
inline ::google::protobuf::uint32 TActLimitedChallengeGetInfoRsp::losenum() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeGetInfoRsp.LoseNum)
  return losenum_;
}
inline void TActLimitedChallengeGetInfoRsp::set_losenum(::google::protobuf::uint32 value) {
  set_has_losenum();
  losenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeGetInfoRsp.LoseNum)
}

// repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 7;
inline int TActLimitedChallengeGetInfoRsp::squadarr_size() const {
  return squadarr_.size();
}
inline void TActLimitedChallengeGetInfoRsp::clear_squadarr() {
  squadarr_.Clear();
}
inline const ::pb::TActLimitedChallengeSquadInfo& TActLimitedChallengeGetInfoRsp::squadarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeGetInfoRsp.SquadArr)
  return squadarr_.Get(index);
}
inline ::pb::TActLimitedChallengeSquadInfo* TActLimitedChallengeGetInfoRsp::mutable_squadarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeGetInfoRsp.SquadArr)
  return squadarr_.Mutable(index);
}
inline ::pb::TActLimitedChallengeSquadInfo* TActLimitedChallengeGetInfoRsp::add_squadarr() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeGetInfoRsp.SquadArr)
  return squadarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo >&
TActLimitedChallengeGetInfoRsp::squadarr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeGetInfoRsp.SquadArr)
  return squadarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo >*
TActLimitedChallengeGetInfoRsp::mutable_squadarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeGetInfoRsp.SquadArr)
  return &squadarr_;
}

// repeated uint32 RewardedTidArr = 8;
inline int TActLimitedChallengeGetInfoRsp::rewardedtidarr_size() const {
  return rewardedtidarr_.size();
}
inline void TActLimitedChallengeGetInfoRsp::clear_rewardedtidarr() {
  rewardedtidarr_.Clear();
}
inline ::google::protobuf::uint32 TActLimitedChallengeGetInfoRsp::rewardedtidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeGetInfoRsp.RewardedTidArr)
  return rewardedtidarr_.Get(index);
}
inline void TActLimitedChallengeGetInfoRsp::set_rewardedtidarr(int index, ::google::protobuf::uint32 value) {
  rewardedtidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeGetInfoRsp.RewardedTidArr)
}
inline void TActLimitedChallengeGetInfoRsp::add_rewardedtidarr(::google::protobuf::uint32 value) {
  rewardedtidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeGetInfoRsp.RewardedTidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActLimitedChallengeGetInfoRsp::rewardedtidarr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeGetInfoRsp.RewardedTidArr)
  return rewardedtidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActLimitedChallengeGetInfoRsp::mutable_rewardedtidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeGetInfoRsp.RewardedTidArr)
  return &rewardedtidarr_;
}

// -------------------------------------------------------------------

// TActLimitedChallengeBuyItemReq

// optional uint32 Id = 2;
inline bool TActLimitedChallengeBuyItemReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLimitedChallengeBuyItemReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLimitedChallengeBuyItemReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLimitedChallengeBuyItemReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActLimitedChallengeBuyItemReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeBuyItemReq.Id)
  return id_;
}
inline void TActLimitedChallengeBuyItemReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeBuyItemReq.Id)
}

// optional uint32 Num = 3;
inline bool TActLimitedChallengeBuyItemReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActLimitedChallengeBuyItemReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActLimitedChallengeBuyItemReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActLimitedChallengeBuyItemReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActLimitedChallengeBuyItemReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeBuyItemReq.Num)
  return num_;
}
inline void TActLimitedChallengeBuyItemReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeBuyItemReq.Num)
}

// -------------------------------------------------------------------

// TActLimitedChallengeBuyGoldItemReq

// optional uint32 Id = 2;
inline bool TActLimitedChallengeBuyGoldItemReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLimitedChallengeBuyGoldItemReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLimitedChallengeBuyGoldItemReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLimitedChallengeBuyGoldItemReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActLimitedChallengeBuyGoldItemReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeBuyGoldItemReq.Id)
  return id_;
}
inline void TActLimitedChallengeBuyGoldItemReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeBuyGoldItemReq.Id)
}

// optional uint32 Num = 3;
inline bool TActLimitedChallengeBuyGoldItemReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActLimitedChallengeBuyGoldItemReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActLimitedChallengeBuyGoldItemReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActLimitedChallengeBuyGoldItemReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActLimitedChallengeBuyGoldItemReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeBuyGoldItemReq.Num)
  return num_;
}
inline void TActLimitedChallengeBuyGoldItemReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeBuyGoldItemReq.Num)
}

// -------------------------------------------------------------------

// TActLimitedChallengeEnterBattleReq

// optional uint32 ID = 1;
inline bool TActLimitedChallengeEnterBattleReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLimitedChallengeEnterBattleReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLimitedChallengeEnterBattleReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLimitedChallengeEnterBattleReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActLimitedChallengeEnterBattleReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeEnterBattleReq.ID)
  return id_;
}
inline void TActLimitedChallengeEnterBattleReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeEnterBattleReq.ID)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 2;
inline bool TActLimitedChallengeEnterBattleReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActLimitedChallengeEnterBattleReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActLimitedChallengeEnterBattleReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActLimitedChallengeEnterBattleReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TActLimitedChallengeEnterBattleReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeEnterBattleReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TActLimitedChallengeEnterBattleReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeEnterBattleReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TActLimitedChallengeEnterBattleReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TActLimitedChallengeEnterBattleReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActLimitedChallengeEnterBattleReq.BattleCheckParam)
}

// repeated uint32 DebuffArr = 3;
inline int TActLimitedChallengeEnterBattleReq::debuffarr_size() const {
  return debuffarr_.size();
}
inline void TActLimitedChallengeEnterBattleReq::clear_debuffarr() {
  debuffarr_.Clear();
}
inline ::google::protobuf::uint32 TActLimitedChallengeEnterBattleReq::debuffarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeEnterBattleReq.DebuffArr)
  return debuffarr_.Get(index);
}
inline void TActLimitedChallengeEnterBattleReq::set_debuffarr(int index, ::google::protobuf::uint32 value) {
  debuffarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeEnterBattleReq.DebuffArr)
}
inline void TActLimitedChallengeEnterBattleReq::add_debuffarr(::google::protobuf::uint32 value) {
  debuffarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeEnterBattleReq.DebuffArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActLimitedChallengeEnterBattleReq::debuffarr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeEnterBattleReq.DebuffArr)
  return debuffarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActLimitedChallengeEnterBattleReq::mutable_debuffarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeEnterBattleReq.DebuffArr)
  return &debuffarr_;
}

// -------------------------------------------------------------------

// TActLimitedChallengeEnterBattleRsp

// repeated .pb.TBattleArgs BattleArgs = 1;
inline int TActLimitedChallengeEnterBattleRsp::battleargs_size() const {
  return battleargs_.size();
}
inline void TActLimitedChallengeEnterBattleRsp::clear_battleargs() {
  battleargs_.Clear();
}
inline const ::pb::TBattleArgs& TActLimitedChallengeEnterBattleRsp::battleargs(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeEnterBattleRsp.BattleArgs)
  return battleargs_.Get(index);
}
inline ::pb::TBattleArgs* TActLimitedChallengeEnterBattleRsp::mutable_battleargs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeEnterBattleRsp.BattleArgs)
  return battleargs_.Mutable(index);
}
inline ::pb::TBattleArgs* TActLimitedChallengeEnterBattleRsp::add_battleargs() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeEnterBattleRsp.BattleArgs)
  return battleargs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBattleArgs >&
TActLimitedChallengeEnterBattleRsp::battleargs() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeEnterBattleRsp.BattleArgs)
  return battleargs_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBattleArgs >*
TActLimitedChallengeEnterBattleRsp::mutable_battleargs() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeEnterBattleRsp.BattleArgs)
  return &battleargs_;
}

// optional uint32 ChallengeNum = 2;
inline bool TActLimitedChallengeEnterBattleRsp::has_challengenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActLimitedChallengeEnterBattleRsp::set_has_challengenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActLimitedChallengeEnterBattleRsp::clear_has_challengenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActLimitedChallengeEnterBattleRsp::clear_challengenum() {
  challengenum_ = 0u;
  clear_has_challengenum();
}
inline ::google::protobuf::uint32 TActLimitedChallengeEnterBattleRsp::challengenum() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeEnterBattleRsp.ChallengeNum)
  return challengenum_;
}
inline void TActLimitedChallengeEnterBattleRsp::set_challengenum(::google::protobuf::uint32 value) {
  set_has_challengenum();
  challengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeEnterBattleRsp.ChallengeNum)
}

// optional uint32 LoseNum = 3;
inline bool TActLimitedChallengeEnterBattleRsp::has_losenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActLimitedChallengeEnterBattleRsp::set_has_losenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActLimitedChallengeEnterBattleRsp::clear_has_losenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActLimitedChallengeEnterBattleRsp::clear_losenum() {
  losenum_ = 0u;
  clear_has_losenum();
}
inline ::google::protobuf::uint32 TActLimitedChallengeEnterBattleRsp::losenum() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeEnterBattleRsp.LoseNum)
  return losenum_;
}
inline void TActLimitedChallengeEnterBattleRsp::set_losenum(::google::protobuf::uint32 value) {
  set_has_losenum();
  losenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeEnterBattleRsp.LoseNum)
}

// -------------------------------------------------------------------

// TActLimitedChallengeReportBattleReq

// optional uint32 ID = 1;
inline bool TActLimitedChallengeReportBattleReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLimitedChallengeReportBattleReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLimitedChallengeReportBattleReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLimitedChallengeReportBattleReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActLimitedChallengeReportBattleReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeReportBattleReq.ID)
  return id_;
}
inline void TActLimitedChallengeReportBattleReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeReportBattleReq.ID)
}

// repeated bytes BattleResult = 2;
inline int TActLimitedChallengeReportBattleReq::battleresult_size() const {
  return battleresult_.size();
}
inline void TActLimitedChallengeReportBattleReq::clear_battleresult() {
  battleresult_.Clear();
}
inline const ::std::string& TActLimitedChallengeReportBattleReq::battleresult(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeReportBattleReq.BattleResult)
  return battleresult_.Get(index);
}
inline ::std::string* TActLimitedChallengeReportBattleReq::mutable_battleresult(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeReportBattleReq.BattleResult)
  return battleresult_.Mutable(index);
}
inline void TActLimitedChallengeReportBattleReq::set_battleresult(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeReportBattleReq.BattleResult)
  battleresult_.Mutable(index)->assign(value);
}
inline void TActLimitedChallengeReportBattleReq::set_battleresult(int index, const char* value) {
  battleresult_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActLimitedChallengeReportBattleReq.BattleResult)
}
inline void TActLimitedChallengeReportBattleReq::set_battleresult(int index, const void* value, size_t size) {
  battleresult_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActLimitedChallengeReportBattleReq.BattleResult)
}
inline ::std::string* TActLimitedChallengeReportBattleReq::add_battleresult() {
  return battleresult_.Add();
}
inline void TActLimitedChallengeReportBattleReq::add_battleresult(const ::std::string& value) {
  battleresult_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeReportBattleReq.BattleResult)
}
inline void TActLimitedChallengeReportBattleReq::add_battleresult(const char* value) {
  battleresult_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TActLimitedChallengeReportBattleReq.BattleResult)
}
inline void TActLimitedChallengeReportBattleReq::add_battleresult(const void* value, size_t size) {
  battleresult_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TActLimitedChallengeReportBattleReq.BattleResult)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TActLimitedChallengeReportBattleReq::battleresult() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeReportBattleReq.BattleResult)
  return battleresult_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TActLimitedChallengeReportBattleReq::mutable_battleresult() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeReportBattleReq.BattleResult)
  return &battleresult_;
}

// -------------------------------------------------------------------

// TActLimitedChallengeReportBattleRsp

// repeated .pb.TCommonReward DropArr = 1;
inline int TActLimitedChallengeReportBattleRsp::droparr_size() const {
  return droparr_.size();
}
inline void TActLimitedChallengeReportBattleRsp::clear_droparr() {
  droparr_.Clear();
}
inline const ::pb::TCommonReward& TActLimitedChallengeReportBattleRsp::droparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeReportBattleRsp.DropArr)
  return droparr_.Get(index);
}
inline ::pb::TCommonReward* TActLimitedChallengeReportBattleRsp::mutable_droparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeReportBattleRsp.DropArr)
  return droparr_.Mutable(index);
}
inline ::pb::TCommonReward* TActLimitedChallengeReportBattleRsp::add_droparr() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeReportBattleRsp.DropArr)
  return droparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActLimitedChallengeReportBattleRsp::droparr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeReportBattleRsp.DropArr)
  return droparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActLimitedChallengeReportBattleRsp::mutable_droparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeReportBattleRsp.DropArr)
  return &droparr_;
}

// repeated .pb.TActLimitedChallengeStrongholdInfo StrongholdArr = 2;
inline int TActLimitedChallengeReportBattleRsp::strongholdarr_size() const {
  return strongholdarr_.size();
}
inline void TActLimitedChallengeReportBattleRsp::clear_strongholdarr() {
  strongholdarr_.Clear();
}
inline const ::pb::TActLimitedChallengeStrongholdInfo& TActLimitedChallengeReportBattleRsp::strongholdarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeReportBattleRsp.StrongholdArr)
  return strongholdarr_.Get(index);
}
inline ::pb::TActLimitedChallengeStrongholdInfo* TActLimitedChallengeReportBattleRsp::mutable_strongholdarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeReportBattleRsp.StrongholdArr)
  return strongholdarr_.Mutable(index);
}
inline ::pb::TActLimitedChallengeStrongholdInfo* TActLimitedChallengeReportBattleRsp::add_strongholdarr() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeReportBattleRsp.StrongholdArr)
  return strongholdarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeStrongholdInfo >&
TActLimitedChallengeReportBattleRsp::strongholdarr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeReportBattleRsp.StrongholdArr)
  return strongholdarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeStrongholdInfo >*
TActLimitedChallengeReportBattleRsp::mutable_strongholdarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeReportBattleRsp.StrongholdArr)
  return &strongholdarr_;
}

// optional uint32 ChallengeNum = 3;
inline bool TActLimitedChallengeReportBattleRsp::has_challengenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActLimitedChallengeReportBattleRsp::set_has_challengenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActLimitedChallengeReportBattleRsp::clear_has_challengenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActLimitedChallengeReportBattleRsp::clear_challengenum() {
  challengenum_ = 0u;
  clear_has_challengenum();
}
inline ::google::protobuf::uint32 TActLimitedChallengeReportBattleRsp::challengenum() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeReportBattleRsp.ChallengeNum)
  return challengenum_;
}
inline void TActLimitedChallengeReportBattleRsp::set_challengenum(::google::protobuf::uint32 value) {
  set_has_challengenum();
  challengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeReportBattleRsp.ChallengeNum)
}

// optional uint32 StrongholdWinNum = 4;
inline bool TActLimitedChallengeReportBattleRsp::has_strongholdwinnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TActLimitedChallengeReportBattleRsp::set_has_strongholdwinnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TActLimitedChallengeReportBattleRsp::clear_has_strongholdwinnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TActLimitedChallengeReportBattleRsp::clear_strongholdwinnum() {
  strongholdwinnum_ = 0u;
  clear_has_strongholdwinnum();
}
inline ::google::protobuf::uint32 TActLimitedChallengeReportBattleRsp::strongholdwinnum() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeReportBattleRsp.StrongholdWinNum)
  return strongholdwinnum_;
}
inline void TActLimitedChallengeReportBattleRsp::set_strongholdwinnum(::google::protobuf::uint32 value) {
  set_has_strongholdwinnum();
  strongholdwinnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeReportBattleRsp.StrongholdWinNum)
}

// optional uint32 LoseNum = 5;
inline bool TActLimitedChallengeReportBattleRsp::has_losenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TActLimitedChallengeReportBattleRsp::set_has_losenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TActLimitedChallengeReportBattleRsp::clear_has_losenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TActLimitedChallengeReportBattleRsp::clear_losenum() {
  losenum_ = 0u;
  clear_has_losenum();
}
inline ::google::protobuf::uint32 TActLimitedChallengeReportBattleRsp::losenum() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeReportBattleRsp.LoseNum)
  return losenum_;
}
inline void TActLimitedChallengeReportBattleRsp::set_losenum(::google::protobuf::uint32 value) {
  set_has_losenum();
  losenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeReportBattleRsp.LoseNum)
}

// -------------------------------------------------------------------

// TActLimitedChallengeReceiveAchievementReq

// optional uint32 Tid = 1;
inline bool TActLimitedChallengeReceiveAchievementReq::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLimitedChallengeReceiveAchievementReq::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLimitedChallengeReceiveAchievementReq::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLimitedChallengeReceiveAchievementReq::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TActLimitedChallengeReceiveAchievementReq::tid() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeReceiveAchievementReq.Tid)
  return tid_;
}
inline void TActLimitedChallengeReceiveAchievementReq::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeReceiveAchievementReq.Tid)
}

// -------------------------------------------------------------------

// TActLimitedChallengeAutoReceiveAchievementRsp

// repeated uint32 RewardedTidArr = 1;
inline int TActLimitedChallengeAutoReceiveAchievementRsp::rewardedtidarr_size() const {
  return rewardedtidarr_.size();
}
inline void TActLimitedChallengeAutoReceiveAchievementRsp::clear_rewardedtidarr() {
  rewardedtidarr_.Clear();
}
inline ::google::protobuf::uint32 TActLimitedChallengeAutoReceiveAchievementRsp::rewardedtidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeAutoReceiveAchievementRsp.RewardedTidArr)
  return rewardedtidarr_.Get(index);
}
inline void TActLimitedChallengeAutoReceiveAchievementRsp::set_rewardedtidarr(int index, ::google::protobuf::uint32 value) {
  rewardedtidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeAutoReceiveAchievementRsp.RewardedTidArr)
}
inline void TActLimitedChallengeAutoReceiveAchievementRsp::add_rewardedtidarr(::google::protobuf::uint32 value) {
  rewardedtidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeAutoReceiveAchievementRsp.RewardedTidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActLimitedChallengeAutoReceiveAchievementRsp::rewardedtidarr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeAutoReceiveAchievementRsp.RewardedTidArr)
  return rewardedtidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActLimitedChallengeAutoReceiveAchievementRsp::mutable_rewardedtidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeAutoReceiveAchievementRsp.RewardedTidArr)
  return &rewardedtidarr_;
}

// repeated .pb.TCommonReward RewardArr = 2;
inline int TActLimitedChallengeAutoReceiveAchievementRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TActLimitedChallengeAutoReceiveAchievementRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TActLimitedChallengeAutoReceiveAchievementRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeAutoReceiveAchievementRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TActLimitedChallengeAutoReceiveAchievementRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeAutoReceiveAchievementRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TActLimitedChallengeAutoReceiveAchievementRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeAutoReceiveAchievementRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActLimitedChallengeAutoReceiveAchievementRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeAutoReceiveAchievementRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActLimitedChallengeAutoReceiveAchievementRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeAutoReceiveAchievementRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TActLimitedChallengeNotify

// optional uint32 ItemId = 1;
inline bool TActLimitedChallengeNotify::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLimitedChallengeNotify::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLimitedChallengeNotify::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLimitedChallengeNotify::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TActLimitedChallengeNotify::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeNotify.ItemId)
  return itemid_;
}
inline void TActLimitedChallengeNotify::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeNotify.ItemId)
}

// repeated .pb.TCommonReward DropArr = 2;
inline int TActLimitedChallengeNotify::droparr_size() const {
  return droparr_.size();
}
inline void TActLimitedChallengeNotify::clear_droparr() {
  droparr_.Clear();
}
inline const ::pb::TCommonReward& TActLimitedChallengeNotify::droparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeNotify.DropArr)
  return droparr_.Get(index);
}
inline ::pb::TCommonReward* TActLimitedChallengeNotify::mutable_droparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeNotify.DropArr)
  return droparr_.Mutable(index);
}
inline ::pb::TCommonReward* TActLimitedChallengeNotify::add_droparr() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeNotify.DropArr)
  return droparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActLimitedChallengeNotify::droparr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeNotify.DropArr)
  return droparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActLimitedChallengeNotify::mutable_droparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeNotify.DropArr)
  return &droparr_;
}

// repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 3;
inline int TActLimitedChallengeNotify::squadarr_size() const {
  return squadarr_.size();
}
inline void TActLimitedChallengeNotify::clear_squadarr() {
  squadarr_.Clear();
}
inline const ::pb::TActLimitedChallengeSquadInfo& TActLimitedChallengeNotify::squadarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeNotify.SquadArr)
  return squadarr_.Get(index);
}
inline ::pb::TActLimitedChallengeSquadInfo* TActLimitedChallengeNotify::mutable_squadarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeNotify.SquadArr)
  return squadarr_.Mutable(index);
}
inline ::pb::TActLimitedChallengeSquadInfo* TActLimitedChallengeNotify::add_squadarr() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeNotify.SquadArr)
  return squadarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo >&
TActLimitedChallengeNotify::squadarr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeNotify.SquadArr)
  return squadarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo >*
TActLimitedChallengeNotify::mutable_squadarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeNotify.SquadArr)
  return &squadarr_;
}

// -------------------------------------------------------------------

// TActLimitedChallengeSetSquadReq

// repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 1;
inline int TActLimitedChallengeSetSquadReq::squadarr_size() const {
  return squadarr_.size();
}
inline void TActLimitedChallengeSetSquadReq::clear_squadarr() {
  squadarr_.Clear();
}
inline const ::pb::TActLimitedChallengeSquadInfo& TActLimitedChallengeSetSquadReq::squadarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeSetSquadReq.SquadArr)
  return squadarr_.Get(index);
}
inline ::pb::TActLimitedChallengeSquadInfo* TActLimitedChallengeSetSquadReq::mutable_squadarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeSetSquadReq.SquadArr)
  return squadarr_.Mutable(index);
}
inline ::pb::TActLimitedChallengeSquadInfo* TActLimitedChallengeSetSquadReq::add_squadarr() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeSetSquadReq.SquadArr)
  return squadarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo >&
TActLimitedChallengeSetSquadReq::squadarr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeSetSquadReq.SquadArr)
  return squadarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo >*
TActLimitedChallengeSetSquadReq::mutable_squadarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeSetSquadReq.SquadArr)
  return &squadarr_;
}

// -------------------------------------------------------------------

// TActLimitedChallengeSetSquadRsp

// repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 1;
inline int TActLimitedChallengeSetSquadRsp::squadarr_size() const {
  return squadarr_.size();
}
inline void TActLimitedChallengeSetSquadRsp::clear_squadarr() {
  squadarr_.Clear();
}
inline const ::pb::TActLimitedChallengeSquadInfo& TActLimitedChallengeSetSquadRsp::squadarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeSetSquadRsp.SquadArr)
  return squadarr_.Get(index);
}
inline ::pb::TActLimitedChallengeSquadInfo* TActLimitedChallengeSetSquadRsp::mutable_squadarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeSetSquadRsp.SquadArr)
  return squadarr_.Mutable(index);
}
inline ::pb::TActLimitedChallengeSquadInfo* TActLimitedChallengeSetSquadRsp::add_squadarr() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeSetSquadRsp.SquadArr)
  return squadarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo >&
TActLimitedChallengeSetSquadRsp::squadarr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeSetSquadRsp.SquadArr)
  return squadarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLimitedChallengeSquadInfo >*
TActLimitedChallengeSetSquadRsp::mutable_squadarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeSetSquadRsp.SquadArr)
  return &squadarr_;
}

// -------------------------------------------------------------------

// TActLimitedChallengeSweepReq

// optional uint32 ID = 1;
inline bool TActLimitedChallengeSweepReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLimitedChallengeSweepReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLimitedChallengeSweepReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLimitedChallengeSweepReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActLimitedChallengeSweepReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeSweepReq.ID)
  return id_;
}
inline void TActLimitedChallengeSweepReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeSweepReq.ID)
}

// -------------------------------------------------------------------

// TActLimitedChallengeSweepRsp

// repeated .pb.TCommonReward DropArr = 1;
inline int TActLimitedChallengeSweepRsp::droparr_size() const {
  return droparr_.size();
}
inline void TActLimitedChallengeSweepRsp::clear_droparr() {
  droparr_.Clear();
}
inline const ::pb::TCommonReward& TActLimitedChallengeSweepRsp::droparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeSweepRsp.DropArr)
  return droparr_.Get(index);
}
inline ::pb::TCommonReward* TActLimitedChallengeSweepRsp::mutable_droparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLimitedChallengeSweepRsp.DropArr)
  return droparr_.Mutable(index);
}
inline ::pb::TCommonReward* TActLimitedChallengeSweepRsp::add_droparr() {
  // @@protoc_insertion_point(field_add:pb.TActLimitedChallengeSweepRsp.DropArr)
  return droparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActLimitedChallengeSweepRsp::droparr() const {
  // @@protoc_insertion_point(field_list:pb.TActLimitedChallengeSweepRsp.DropArr)
  return droparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActLimitedChallengeSweepRsp::mutable_droparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLimitedChallengeSweepRsp.DropArr)
  return &droparr_;
}

// optional uint32 ChallengeNum = 3;
inline bool TActLimitedChallengeSweepRsp::has_challengenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActLimitedChallengeSweepRsp::set_has_challengenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActLimitedChallengeSweepRsp::clear_has_challengenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActLimitedChallengeSweepRsp::clear_challengenum() {
  challengenum_ = 0u;
  clear_has_challengenum();
}
inline ::google::protobuf::uint32 TActLimitedChallengeSweepRsp::challengenum() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeSweepRsp.ChallengeNum)
  return challengenum_;
}
inline void TActLimitedChallengeSweepRsp::set_challengenum(::google::protobuf::uint32 value) {
  set_has_challengenum();
  challengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeSweepRsp.ChallengeNum)
}

// optional uint32 StrongholdWinNum = 4;
inline bool TActLimitedChallengeSweepRsp::has_strongholdwinnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActLimitedChallengeSweepRsp::set_has_strongholdwinnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActLimitedChallengeSweepRsp::clear_has_strongholdwinnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActLimitedChallengeSweepRsp::clear_strongholdwinnum() {
  strongholdwinnum_ = 0u;
  clear_has_strongholdwinnum();
}
inline ::google::protobuf::uint32 TActLimitedChallengeSweepRsp::strongholdwinnum() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeSweepRsp.StrongholdWinNum)
  return strongholdwinnum_;
}
inline void TActLimitedChallengeSweepRsp::set_strongholdwinnum(::google::protobuf::uint32 value) {
  set_has_strongholdwinnum();
  strongholdwinnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeSweepRsp.StrongholdWinNum)
}

// optional uint32 LoseNum = 5;
inline bool TActLimitedChallengeSweepRsp::has_losenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TActLimitedChallengeSweepRsp::set_has_losenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TActLimitedChallengeSweepRsp::clear_has_losenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TActLimitedChallengeSweepRsp::clear_losenum() {
  losenum_ = 0u;
  clear_has_losenum();
}
inline ::google::protobuf::uint32 TActLimitedChallengeSweepRsp::losenum() const {
  // @@protoc_insertion_point(field_get:pb.TActLimitedChallengeSweepRsp.LoseNum)
  return losenum_;
}
inline void TActLimitedChallengeSweepRsp::set_losenum(::google::protobuf::uint32 value) {
  set_has_losenum();
  losenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLimitedChallengeSweepRsp.LoseNum)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActLimitedChallenge_2eproto__INCLUDED
