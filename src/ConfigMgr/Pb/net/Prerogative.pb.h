// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Prerogative.proto

#ifndef PROTOBUF_net_2fPrerogative_2eproto__INCLUDED
#define PROTOBUF_net_2fPrerogative_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fPrerogative_2eproto();
void protobuf_AssignDesc_net_2fPrerogative_2eproto();
void protobuf_ShutdownFile_net_2fPrerogative_2eproto();

class TPrerogativeGainData;
class TPrerogativeBuffData;
class TPrerogativeRankData;
class TPrerogativeGetInfoRsp;
class TPrerogativeInfoNotify;
class TPrerogativeGainLevelUpReq;
class TPrerogativeGainLevelUpRsp;
class TPrerogativePrerogativeLevelUpRsp;
class TPrerogativePrerogativeBuyBuffReq;
class TPrerogativePrerogativeBuyBuffRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TPrerogativeGainData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Prerogative.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPrerogativeGainData : public ::google::protobuf::Message {
 public:
  TPrerogativeGainData();
  virtual ~TPrerogativeGainData();

  TPrerogativeGainData(const TPrerogativeGainData& from);

  inline TPrerogativeGainData& operator=(const TPrerogativeGainData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPrerogativeGainData& default_instance();

  void Swap(TPrerogativeGainData* other);

  // implements Message ----------------------------------------------

  TPrerogativeGainData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPrerogativeGainData& from);
  void MergeFrom(const TPrerogativeGainData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativeGainData</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativeGainData</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPrerogativeGainData)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_net_2fPrerogative_2eproto();
  friend void protobuf_AssignDesc_net_2fPrerogative_2eproto();
  friend void protobuf_ShutdownFile_net_2fPrerogative_2eproto();

  void InitAsDefaultInstance();
  static TPrerogativeGainData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPrerogativeBuffData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Prerogative.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPrerogativeBuffData : public ::google::protobuf::Message {
 public:
  TPrerogativeBuffData();
  virtual ~TPrerogativeBuffData();

  TPrerogativeBuffData(const TPrerogativeBuffData& from);

  inline TPrerogativeBuffData& operator=(const TPrerogativeBuffData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPrerogativeBuffData& default_instance();

  void Swap(TPrerogativeBuffData* other);

  // implements Message ----------------------------------------------

  TPrerogativeBuffData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPrerogativeBuffData& from);
  void MergeFrom(const TPrerogativeBuffData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativeBuffData</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional int64 ResetTime = 2;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResetTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativeBuffData</name>
  	<Function>
  		<name>resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 resettime() const;
  inline void set_resettime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TPrerogativeBuffData)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_resettime();
  inline void clear_has_resettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 resettime_;
  ::google::protobuf::uint32 tid_;
  friend void  protobuf_AddDesc_net_2fPrerogative_2eproto();
  friend void protobuf_AssignDesc_net_2fPrerogative_2eproto();
  friend void protobuf_ShutdownFile_net_2fPrerogative_2eproto();

  void InitAsDefaultInstance();
  static TPrerogativeBuffData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPrerogativeRankData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Prerogative.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPrerogativeRankData : public ::google::protobuf::Message {
 public:
  TPrerogativeRankData();
  virtual ~TPrerogativeRankData();

  TPrerogativeRankData(const TPrerogativeRankData& from);

  inline TPrerogativeRankData& operator=(const TPrerogativeRankData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPrerogativeRankData& default_instance();

  void Swap(TPrerogativeRankData* other);

  // implements Message ----------------------------------------------

  TPrerogativeRankData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPrerogativeRankData& from);
  void MergeFrom(const TPrerogativeRankData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RankLv = 1;
  inline bool has_ranklv() const;
  inline void clear_ranklv();
  static const int kRankLvFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativeRankData</name>
  	<Function>
  		<name>ranklv</name>
  		<replaceName>RankLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ranklv</name>
  		<replaceName>RankLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ranklv</name>
  		<replaceName>RankLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 ranklv() const;
  inline void set_ranklv(::google::protobuf::uint32 value);

  // repeated .pb.TPrerogativeGainData GainArr = 2;
  inline int gainarr_size() const;
  inline void clear_gainarr();
  static const int kGainArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativeRankData</name>
  	<Function>
  		<name>gainarr</name>
  		<replaceName>GainArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_gainarr</name>
  		<replaceName>GainArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_gainarr</name>
  		<replaceName>GainArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gainarr</name>
  		<replaceName>GainArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>gainarr_size</name>
  		<replaceName>GainArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPrerogativeGainData& gainarr(int index) const;
  inline ::pb::TPrerogativeGainData* mutable_gainarr(int index);
  inline ::pb::TPrerogativeGainData* add_gainarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPrerogativeGainData >&
      gainarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPrerogativeGainData >*
      mutable_gainarr();

  // @@protoc_insertion_point(class_scope:pb.TPrerogativeRankData)
 private:
  inline void set_has_ranklv();
  inline void clear_has_ranklv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPrerogativeGainData > gainarr_;
  ::google::protobuf::uint32 ranklv_;
  friend void  protobuf_AddDesc_net_2fPrerogative_2eproto();
  friend void protobuf_AssignDesc_net_2fPrerogative_2eproto();
  friend void protobuf_ShutdownFile_net_2fPrerogative_2eproto();

  void InitAsDefaultInstance();
  static TPrerogativeRankData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPrerogativeGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Prerogative.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPrerogativeGetInfoRsp : public ::google::protobuf::Message {
 public:
  TPrerogativeGetInfoRsp();
  virtual ~TPrerogativeGetInfoRsp();

  TPrerogativeGetInfoRsp(const TPrerogativeGetInfoRsp& from);

  inline TPrerogativeGetInfoRsp& operator=(const TPrerogativeGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPrerogativeGetInfoRsp& default_instance();

  void Swap(TPrerogativeGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TPrerogativeGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPrerogativeGetInfoRsp& from);
  void MergeFrom(const TPrerogativeGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 PrerogativeLv = 1;
  inline bool has_prerogativelv() const;
  inline void clear_prerogativelv();
  static const int kPrerogativeLvFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativeGetInfoRsp</name>
  	<Function>
  		<name>prerogativelv</name>
  		<replaceName>PrerogativeLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_prerogativelv</name>
  		<replaceName>PrerogativeLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_prerogativelv</name>
  		<replaceName>PrerogativeLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 prerogativelv() const;
  inline void set_prerogativelv(::google::protobuf::uint32 value);

  // optional uint32 ExploitNum = 2;
  inline bool has_exploitnum() const;
  inline void clear_exploitnum();
  static const int kExploitNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativeGetInfoRsp</name>
  	<Function>
  		<name>exploitnum</name>
  		<replaceName>ExploitNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exploitnum</name>
  		<replaceName>ExploitNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exploitnum</name>
  		<replaceName>ExploitNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 exploitnum() const;
  inline void set_exploitnum(::google::protobuf::uint32 value);

  // optional uint32 ExploitConsum = 3;
  inline bool has_exploitconsum() const;
  inline void clear_exploitconsum();
  static const int kExploitConsumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativeGetInfoRsp</name>
  	<Function>
  		<name>exploitconsum</name>
  		<replaceName>ExploitConsum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exploitconsum</name>
  		<replaceName>ExploitConsum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exploitconsum</name>
  		<replaceName>ExploitConsum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 exploitconsum() const;
  inline void set_exploitconsum(::google::protobuf::uint32 value);

  // repeated .pb.TPrerogativeRankData RankArr = 4;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativeGetInfoRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPrerogativeRankData& rankarr(int index) const;
  inline ::pb::TPrerogativeRankData* mutable_rankarr(int index);
  inline ::pb::TPrerogativeRankData* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPrerogativeRankData >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPrerogativeRankData >*
      mutable_rankarr();

  // repeated .pb.TPrerogativeBuffData BuffArr = 5;
  inline int buffarr_size() const;
  inline void clear_buffarr();
  static const int kBuffArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativeGetInfoRsp</name>
  	<Function>
  		<name>buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffarr_size</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPrerogativeBuffData& buffarr(int index) const;
  inline ::pb::TPrerogativeBuffData* mutable_buffarr(int index);
  inline ::pb::TPrerogativeBuffData* add_buffarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPrerogativeBuffData >&
      buffarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPrerogativeBuffData >*
      mutable_buffarr();

  // @@protoc_insertion_point(class_scope:pb.TPrerogativeGetInfoRsp)
 private:
  inline void set_has_prerogativelv();
  inline void clear_has_prerogativelv();
  inline void set_has_exploitnum();
  inline void clear_has_exploitnum();
  inline void set_has_exploitconsum();
  inline void clear_has_exploitconsum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 prerogativelv_;
  ::google::protobuf::uint32 exploitnum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPrerogativeRankData > rankarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPrerogativeBuffData > buffarr_;
  ::google::protobuf::uint32 exploitconsum_;
  friend void  protobuf_AddDesc_net_2fPrerogative_2eproto();
  friend void protobuf_AssignDesc_net_2fPrerogative_2eproto();
  friend void protobuf_ShutdownFile_net_2fPrerogative_2eproto();

  void InitAsDefaultInstance();
  static TPrerogativeGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPrerogativeInfoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Prerogative.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPrerogativeInfoNotify : public ::google::protobuf::Message {
 public:
  TPrerogativeInfoNotify();
  virtual ~TPrerogativeInfoNotify();

  TPrerogativeInfoNotify(const TPrerogativeInfoNotify& from);

  inline TPrerogativeInfoNotify& operator=(const TPrerogativeInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPrerogativeInfoNotify& default_instance();

  void Swap(TPrerogativeInfoNotify* other);

  // implements Message ----------------------------------------------

  TPrerogativeInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPrerogativeInfoNotify& from);
  void MergeFrom(const TPrerogativeInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ExploitNum = 1;
  inline bool has_exploitnum() const;
  inline void clear_exploitnum();
  static const int kExploitNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativeInfoNotify</name>
  	<Function>
  		<name>exploitnum</name>
  		<replaceName>ExploitNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exploitnum</name>
  		<replaceName>ExploitNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exploitnum</name>
  		<replaceName>ExploitNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 exploitnum() const;
  inline void set_exploitnum(::google::protobuf::uint32 value);

  // optional uint32 ExploitConsum = 2;
  inline bool has_exploitconsum() const;
  inline void clear_exploitconsum();
  static const int kExploitConsumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativeInfoNotify</name>
  	<Function>
  		<name>exploitconsum</name>
  		<replaceName>ExploitConsum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exploitconsum</name>
  		<replaceName>ExploitConsum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exploitconsum</name>
  		<replaceName>ExploitConsum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 exploitconsum() const;
  inline void set_exploitconsum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPrerogativeInfoNotify)
 private:
  inline void set_has_exploitnum();
  inline void clear_has_exploitnum();
  inline void set_has_exploitconsum();
  inline void clear_has_exploitconsum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 exploitnum_;
  ::google::protobuf::uint32 exploitconsum_;
  friend void  protobuf_AddDesc_net_2fPrerogative_2eproto();
  friend void protobuf_AssignDesc_net_2fPrerogative_2eproto();
  friend void protobuf_ShutdownFile_net_2fPrerogative_2eproto();

  void InitAsDefaultInstance();
  static TPrerogativeInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPrerogativeGainLevelUpReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Prerogative.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPrerogativeGainLevelUpReq : public ::google::protobuf::Message {
 public:
  TPrerogativeGainLevelUpReq();
  virtual ~TPrerogativeGainLevelUpReq();

  TPrerogativeGainLevelUpReq(const TPrerogativeGainLevelUpReq& from);

  inline TPrerogativeGainLevelUpReq& operator=(const TPrerogativeGainLevelUpReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPrerogativeGainLevelUpReq& default_instance();

  void Swap(TPrerogativeGainLevelUpReq* other);

  // implements Message ----------------------------------------------

  TPrerogativeGainLevelUpReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPrerogativeGainLevelUpReq& from);
  void MergeFrom(const TPrerogativeGainLevelUpReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 PrerogativeLv = 1;
  inline bool has_prerogativelv() const;
  inline void clear_prerogativelv();
  static const int kPrerogativeLvFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativeGainLevelUpReq</name>
  	<Function>
  		<name>prerogativelv</name>
  		<replaceName>PrerogativeLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_prerogativelv</name>
  		<replaceName>PrerogativeLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_prerogativelv</name>
  		<replaceName>PrerogativeLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 prerogativelv() const;
  inline void set_prerogativelv(::google::protobuf::uint32 value);

  // optional uint32 GainTid = 2;
  inline bool has_gaintid() const;
  inline void clear_gaintid();
  static const int kGainTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativeGainLevelUpReq</name>
  	<Function>
  		<name>gaintid</name>
  		<replaceName>GainTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gaintid</name>
  		<replaceName>GainTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gaintid</name>
  		<replaceName>GainTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 gaintid() const;
  inline void set_gaintid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPrerogativeGainLevelUpReq)
 private:
  inline void set_has_prerogativelv();
  inline void clear_has_prerogativelv();
  inline void set_has_gaintid();
  inline void clear_has_gaintid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 prerogativelv_;
  ::google::protobuf::uint32 gaintid_;
  friend void  protobuf_AddDesc_net_2fPrerogative_2eproto();
  friend void protobuf_AssignDesc_net_2fPrerogative_2eproto();
  friend void protobuf_ShutdownFile_net_2fPrerogative_2eproto();

  void InitAsDefaultInstance();
  static TPrerogativeGainLevelUpReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPrerogativeGainLevelUpRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Prerogative.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPrerogativeGainLevelUpRsp : public ::google::protobuf::Message {
 public:
  TPrerogativeGainLevelUpRsp();
  virtual ~TPrerogativeGainLevelUpRsp();

  TPrerogativeGainLevelUpRsp(const TPrerogativeGainLevelUpRsp& from);

  inline TPrerogativeGainLevelUpRsp& operator=(const TPrerogativeGainLevelUpRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPrerogativeGainLevelUpRsp& default_instance();

  void Swap(TPrerogativeGainLevelUpRsp* other);

  // implements Message ----------------------------------------------

  TPrerogativeGainLevelUpRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPrerogativeGainLevelUpRsp& from);
  void MergeFrom(const TPrerogativeGainLevelUpRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativeGainLevelUpRsp</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPrerogativeGainLevelUpRsp)
 private:
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_net_2fPrerogative_2eproto();
  friend void protobuf_AssignDesc_net_2fPrerogative_2eproto();
  friend void protobuf_ShutdownFile_net_2fPrerogative_2eproto();

  void InitAsDefaultInstance();
  static TPrerogativeGainLevelUpRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPrerogativePrerogativeLevelUpRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Prerogative.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPrerogativePrerogativeLevelUpRsp : public ::google::protobuf::Message {
 public:
  TPrerogativePrerogativeLevelUpRsp();
  virtual ~TPrerogativePrerogativeLevelUpRsp();

  TPrerogativePrerogativeLevelUpRsp(const TPrerogativePrerogativeLevelUpRsp& from);

  inline TPrerogativePrerogativeLevelUpRsp& operator=(const TPrerogativePrerogativeLevelUpRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPrerogativePrerogativeLevelUpRsp& default_instance();

  void Swap(TPrerogativePrerogativeLevelUpRsp* other);

  // implements Message ----------------------------------------------

  TPrerogativePrerogativeLevelUpRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPrerogativePrerogativeLevelUpRsp& from);
  void MergeFrom(const TPrerogativePrerogativeLevelUpRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativePrerogativeLevelUpRsp</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPrerogativePrerogativeLevelUpRsp)
 private:
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_net_2fPrerogative_2eproto();
  friend void protobuf_AssignDesc_net_2fPrerogative_2eproto();
  friend void protobuf_ShutdownFile_net_2fPrerogative_2eproto();

  void InitAsDefaultInstance();
  static TPrerogativePrerogativeLevelUpRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPrerogativePrerogativeBuyBuffReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Prerogative.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPrerogativePrerogativeBuyBuffReq : public ::google::protobuf::Message {
 public:
  TPrerogativePrerogativeBuyBuffReq();
  virtual ~TPrerogativePrerogativeBuyBuffReq();

  TPrerogativePrerogativeBuyBuffReq(const TPrerogativePrerogativeBuyBuffReq& from);

  inline TPrerogativePrerogativeBuyBuffReq& operator=(const TPrerogativePrerogativeBuyBuffReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPrerogativePrerogativeBuyBuffReq& default_instance();

  void Swap(TPrerogativePrerogativeBuyBuffReq* other);

  // implements Message ----------------------------------------------

  TPrerogativePrerogativeBuyBuffReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPrerogativePrerogativeBuyBuffReq& from);
  void MergeFrom(const TPrerogativePrerogativeBuyBuffReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuffTid = 1;
  inline bool has_bufftid() const;
  inline void clear_bufftid();
  static const int kBuffTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativePrerogativeBuyBuffReq</name>
  	<Function>
  		<name>bufftid</name>
  		<replaceName>BuffTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bufftid</name>
  		<replaceName>BuffTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bufftid</name>
  		<replaceName>BuffTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bufftid() const;
  inline void set_bufftid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPrerogativePrerogativeBuyBuffReq)
 private:
  inline void set_has_bufftid();
  inline void clear_has_bufftid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bufftid_;
  friend void  protobuf_AddDesc_net_2fPrerogative_2eproto();
  friend void protobuf_AssignDesc_net_2fPrerogative_2eproto();
  friend void protobuf_ShutdownFile_net_2fPrerogative_2eproto();

  void InitAsDefaultInstance();
  static TPrerogativePrerogativeBuyBuffReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPrerogativePrerogativeBuyBuffRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Prerogative.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPrerogativePrerogativeBuyBuffRsp : public ::google::protobuf::Message {
 public:
  TPrerogativePrerogativeBuyBuffRsp();
  virtual ~TPrerogativePrerogativeBuyBuffRsp();

  TPrerogativePrerogativeBuyBuffRsp(const TPrerogativePrerogativeBuyBuffRsp& from);

  inline TPrerogativePrerogativeBuyBuffRsp& operator=(const TPrerogativePrerogativeBuyBuffRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPrerogativePrerogativeBuyBuffRsp& default_instance();

  void Swap(TPrerogativePrerogativeBuyBuffRsp* other);

  // implements Message ----------------------------------------------

  TPrerogativePrerogativeBuyBuffRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPrerogativePrerogativeBuyBuffRsp& from);
  void MergeFrom(const TPrerogativePrerogativeBuyBuffRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 ResetTime = 2;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResetTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPrerogativePrerogativeBuyBuffRsp</name>
  	<Function>
  		<name>resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 resettime() const;
  inline void set_resettime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TPrerogativePrerogativeBuyBuffRsp)
 private:
  inline void set_has_resettime();
  inline void clear_has_resettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 resettime_;
  friend void  protobuf_AddDesc_net_2fPrerogative_2eproto();
  friend void protobuf_AssignDesc_net_2fPrerogative_2eproto();
  friend void protobuf_ShutdownFile_net_2fPrerogative_2eproto();

  void InitAsDefaultInstance();
  static TPrerogativePrerogativeBuyBuffRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TPrerogativeGainData

// optional uint32 Tid = 1;
inline bool TPrerogativeGainData::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPrerogativeGainData::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPrerogativeGainData::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPrerogativeGainData::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TPrerogativeGainData::tid() const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativeGainData.Tid)
  return tid_;
}
inline void TPrerogativeGainData::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPrerogativeGainData.Tid)
}

// optional uint32 Level = 2;
inline bool TPrerogativeGainData::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPrerogativeGainData::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPrerogativeGainData::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPrerogativeGainData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TPrerogativeGainData::level() const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativeGainData.Level)
  return level_;
}
inline void TPrerogativeGainData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TPrerogativeGainData.Level)
}

// -------------------------------------------------------------------

// TPrerogativeBuffData

// optional uint32 Tid = 1;
inline bool TPrerogativeBuffData::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPrerogativeBuffData::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPrerogativeBuffData::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPrerogativeBuffData::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TPrerogativeBuffData::tid() const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativeBuffData.Tid)
  return tid_;
}
inline void TPrerogativeBuffData::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPrerogativeBuffData.Tid)
}

// optional int64 ResetTime = 2;
inline bool TPrerogativeBuffData::has_resettime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPrerogativeBuffData::set_has_resettime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPrerogativeBuffData::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPrerogativeBuffData::clear_resettime() {
  resettime_ = GOOGLE_LONGLONG(0);
  clear_has_resettime();
}
inline ::google::protobuf::int64 TPrerogativeBuffData::resettime() const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativeBuffData.ResetTime)
  return resettime_;
}
inline void TPrerogativeBuffData::set_resettime(::google::protobuf::int64 value) {
  set_has_resettime();
  resettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPrerogativeBuffData.ResetTime)
}

// -------------------------------------------------------------------

// TPrerogativeRankData

// optional uint32 RankLv = 1;
inline bool TPrerogativeRankData::has_ranklv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPrerogativeRankData::set_has_ranklv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPrerogativeRankData::clear_has_ranklv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPrerogativeRankData::clear_ranklv() {
  ranklv_ = 0u;
  clear_has_ranklv();
}
inline ::google::protobuf::uint32 TPrerogativeRankData::ranklv() const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativeRankData.RankLv)
  return ranklv_;
}
inline void TPrerogativeRankData::set_ranklv(::google::protobuf::uint32 value) {
  set_has_ranklv();
  ranklv_ = value;
  // @@protoc_insertion_point(field_set:pb.TPrerogativeRankData.RankLv)
}

// repeated .pb.TPrerogativeGainData GainArr = 2;
inline int TPrerogativeRankData::gainarr_size() const {
  return gainarr_.size();
}
inline void TPrerogativeRankData::clear_gainarr() {
  gainarr_.Clear();
}
inline const ::pb::TPrerogativeGainData& TPrerogativeRankData::gainarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativeRankData.GainArr)
  return gainarr_.Get(index);
}
inline ::pb::TPrerogativeGainData* TPrerogativeRankData::mutable_gainarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPrerogativeRankData.GainArr)
  return gainarr_.Mutable(index);
}
inline ::pb::TPrerogativeGainData* TPrerogativeRankData::add_gainarr() {
  // @@protoc_insertion_point(field_add:pb.TPrerogativeRankData.GainArr)
  return gainarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPrerogativeGainData >&
TPrerogativeRankData::gainarr() const {
  // @@protoc_insertion_point(field_list:pb.TPrerogativeRankData.GainArr)
  return gainarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPrerogativeGainData >*
TPrerogativeRankData::mutable_gainarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPrerogativeRankData.GainArr)
  return &gainarr_;
}

// -------------------------------------------------------------------

// TPrerogativeGetInfoRsp

// optional uint32 PrerogativeLv = 1;
inline bool TPrerogativeGetInfoRsp::has_prerogativelv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPrerogativeGetInfoRsp::set_has_prerogativelv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPrerogativeGetInfoRsp::clear_has_prerogativelv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPrerogativeGetInfoRsp::clear_prerogativelv() {
  prerogativelv_ = 0u;
  clear_has_prerogativelv();
}
inline ::google::protobuf::uint32 TPrerogativeGetInfoRsp::prerogativelv() const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativeGetInfoRsp.PrerogativeLv)
  return prerogativelv_;
}
inline void TPrerogativeGetInfoRsp::set_prerogativelv(::google::protobuf::uint32 value) {
  set_has_prerogativelv();
  prerogativelv_ = value;
  // @@protoc_insertion_point(field_set:pb.TPrerogativeGetInfoRsp.PrerogativeLv)
}

// optional uint32 ExploitNum = 2;
inline bool TPrerogativeGetInfoRsp::has_exploitnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPrerogativeGetInfoRsp::set_has_exploitnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPrerogativeGetInfoRsp::clear_has_exploitnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPrerogativeGetInfoRsp::clear_exploitnum() {
  exploitnum_ = 0u;
  clear_has_exploitnum();
}
inline ::google::protobuf::uint32 TPrerogativeGetInfoRsp::exploitnum() const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativeGetInfoRsp.ExploitNum)
  return exploitnum_;
}
inline void TPrerogativeGetInfoRsp::set_exploitnum(::google::protobuf::uint32 value) {
  set_has_exploitnum();
  exploitnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPrerogativeGetInfoRsp.ExploitNum)
}

// optional uint32 ExploitConsum = 3;
inline bool TPrerogativeGetInfoRsp::has_exploitconsum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPrerogativeGetInfoRsp::set_has_exploitconsum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPrerogativeGetInfoRsp::clear_has_exploitconsum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPrerogativeGetInfoRsp::clear_exploitconsum() {
  exploitconsum_ = 0u;
  clear_has_exploitconsum();
}
inline ::google::protobuf::uint32 TPrerogativeGetInfoRsp::exploitconsum() const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativeGetInfoRsp.ExploitConsum)
  return exploitconsum_;
}
inline void TPrerogativeGetInfoRsp::set_exploitconsum(::google::protobuf::uint32 value) {
  set_has_exploitconsum();
  exploitconsum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPrerogativeGetInfoRsp.ExploitConsum)
}

// repeated .pb.TPrerogativeRankData RankArr = 4;
inline int TPrerogativeGetInfoRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TPrerogativeGetInfoRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TPrerogativeRankData& TPrerogativeGetInfoRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativeGetInfoRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TPrerogativeRankData* TPrerogativeGetInfoRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPrerogativeGetInfoRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TPrerogativeRankData* TPrerogativeGetInfoRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TPrerogativeGetInfoRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPrerogativeRankData >&
TPrerogativeGetInfoRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TPrerogativeGetInfoRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPrerogativeRankData >*
TPrerogativeGetInfoRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPrerogativeGetInfoRsp.RankArr)
  return &rankarr_;
}

// repeated .pb.TPrerogativeBuffData BuffArr = 5;
inline int TPrerogativeGetInfoRsp::buffarr_size() const {
  return buffarr_.size();
}
inline void TPrerogativeGetInfoRsp::clear_buffarr() {
  buffarr_.Clear();
}
inline const ::pb::TPrerogativeBuffData& TPrerogativeGetInfoRsp::buffarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativeGetInfoRsp.BuffArr)
  return buffarr_.Get(index);
}
inline ::pb::TPrerogativeBuffData* TPrerogativeGetInfoRsp::mutable_buffarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPrerogativeGetInfoRsp.BuffArr)
  return buffarr_.Mutable(index);
}
inline ::pb::TPrerogativeBuffData* TPrerogativeGetInfoRsp::add_buffarr() {
  // @@protoc_insertion_point(field_add:pb.TPrerogativeGetInfoRsp.BuffArr)
  return buffarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPrerogativeBuffData >&
TPrerogativeGetInfoRsp::buffarr() const {
  // @@protoc_insertion_point(field_list:pb.TPrerogativeGetInfoRsp.BuffArr)
  return buffarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPrerogativeBuffData >*
TPrerogativeGetInfoRsp::mutable_buffarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPrerogativeGetInfoRsp.BuffArr)
  return &buffarr_;
}

// -------------------------------------------------------------------

// TPrerogativeInfoNotify

// optional uint32 ExploitNum = 1;
inline bool TPrerogativeInfoNotify::has_exploitnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPrerogativeInfoNotify::set_has_exploitnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPrerogativeInfoNotify::clear_has_exploitnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPrerogativeInfoNotify::clear_exploitnum() {
  exploitnum_ = 0u;
  clear_has_exploitnum();
}
inline ::google::protobuf::uint32 TPrerogativeInfoNotify::exploitnum() const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativeInfoNotify.ExploitNum)
  return exploitnum_;
}
inline void TPrerogativeInfoNotify::set_exploitnum(::google::protobuf::uint32 value) {
  set_has_exploitnum();
  exploitnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPrerogativeInfoNotify.ExploitNum)
}

// optional uint32 ExploitConsum = 2;
inline bool TPrerogativeInfoNotify::has_exploitconsum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPrerogativeInfoNotify::set_has_exploitconsum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPrerogativeInfoNotify::clear_has_exploitconsum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPrerogativeInfoNotify::clear_exploitconsum() {
  exploitconsum_ = 0u;
  clear_has_exploitconsum();
}
inline ::google::protobuf::uint32 TPrerogativeInfoNotify::exploitconsum() const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativeInfoNotify.ExploitConsum)
  return exploitconsum_;
}
inline void TPrerogativeInfoNotify::set_exploitconsum(::google::protobuf::uint32 value) {
  set_has_exploitconsum();
  exploitconsum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPrerogativeInfoNotify.ExploitConsum)
}

// -------------------------------------------------------------------

// TPrerogativeGainLevelUpReq

// optional uint32 PrerogativeLv = 1;
inline bool TPrerogativeGainLevelUpReq::has_prerogativelv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPrerogativeGainLevelUpReq::set_has_prerogativelv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPrerogativeGainLevelUpReq::clear_has_prerogativelv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPrerogativeGainLevelUpReq::clear_prerogativelv() {
  prerogativelv_ = 0u;
  clear_has_prerogativelv();
}
inline ::google::protobuf::uint32 TPrerogativeGainLevelUpReq::prerogativelv() const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativeGainLevelUpReq.PrerogativeLv)
  return prerogativelv_;
}
inline void TPrerogativeGainLevelUpReq::set_prerogativelv(::google::protobuf::uint32 value) {
  set_has_prerogativelv();
  prerogativelv_ = value;
  // @@protoc_insertion_point(field_set:pb.TPrerogativeGainLevelUpReq.PrerogativeLv)
}

// optional uint32 GainTid = 2;
inline bool TPrerogativeGainLevelUpReq::has_gaintid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPrerogativeGainLevelUpReq::set_has_gaintid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPrerogativeGainLevelUpReq::clear_has_gaintid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPrerogativeGainLevelUpReq::clear_gaintid() {
  gaintid_ = 0u;
  clear_has_gaintid();
}
inline ::google::protobuf::uint32 TPrerogativeGainLevelUpReq::gaintid() const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativeGainLevelUpReq.GainTid)
  return gaintid_;
}
inline void TPrerogativeGainLevelUpReq::set_gaintid(::google::protobuf::uint32 value) {
  set_has_gaintid();
  gaintid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPrerogativeGainLevelUpReq.GainTid)
}

// -------------------------------------------------------------------

// TPrerogativeGainLevelUpRsp

// optional uint32 Level = 3;
inline bool TPrerogativeGainLevelUpRsp::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPrerogativeGainLevelUpRsp::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPrerogativeGainLevelUpRsp::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPrerogativeGainLevelUpRsp::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TPrerogativeGainLevelUpRsp::level() const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativeGainLevelUpRsp.Level)
  return level_;
}
inline void TPrerogativeGainLevelUpRsp::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TPrerogativeGainLevelUpRsp.Level)
}

// -------------------------------------------------------------------

// TPrerogativePrerogativeLevelUpRsp

// optional uint32 Level = 1;
inline bool TPrerogativePrerogativeLevelUpRsp::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPrerogativePrerogativeLevelUpRsp::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPrerogativePrerogativeLevelUpRsp::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPrerogativePrerogativeLevelUpRsp::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TPrerogativePrerogativeLevelUpRsp::level() const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativePrerogativeLevelUpRsp.Level)
  return level_;
}
inline void TPrerogativePrerogativeLevelUpRsp::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TPrerogativePrerogativeLevelUpRsp.Level)
}

// -------------------------------------------------------------------

// TPrerogativePrerogativeBuyBuffReq

// optional uint32 BuffTid = 1;
inline bool TPrerogativePrerogativeBuyBuffReq::has_bufftid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPrerogativePrerogativeBuyBuffReq::set_has_bufftid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPrerogativePrerogativeBuyBuffReq::clear_has_bufftid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPrerogativePrerogativeBuyBuffReq::clear_bufftid() {
  bufftid_ = 0u;
  clear_has_bufftid();
}
inline ::google::protobuf::uint32 TPrerogativePrerogativeBuyBuffReq::bufftid() const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativePrerogativeBuyBuffReq.BuffTid)
  return bufftid_;
}
inline void TPrerogativePrerogativeBuyBuffReq::set_bufftid(::google::protobuf::uint32 value) {
  set_has_bufftid();
  bufftid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPrerogativePrerogativeBuyBuffReq.BuffTid)
}

// -------------------------------------------------------------------

// TPrerogativePrerogativeBuyBuffRsp

// optional int64 ResetTime = 2;
inline bool TPrerogativePrerogativeBuyBuffRsp::has_resettime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPrerogativePrerogativeBuyBuffRsp::set_has_resettime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPrerogativePrerogativeBuyBuffRsp::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPrerogativePrerogativeBuyBuffRsp::clear_resettime() {
  resettime_ = GOOGLE_LONGLONG(0);
  clear_has_resettime();
}
inline ::google::protobuf::int64 TPrerogativePrerogativeBuyBuffRsp::resettime() const {
  // @@protoc_insertion_point(field_get:pb.TPrerogativePrerogativeBuyBuffRsp.ResetTime)
  return resettime_;
}
inline void TPrerogativePrerogativeBuyBuffRsp::set_resettime(::google::protobuf::int64 value) {
  set_has_resettime();
  resettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPrerogativePrerogativeBuyBuffRsp.ResetTime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fPrerogative_2eproto__INCLUDED
