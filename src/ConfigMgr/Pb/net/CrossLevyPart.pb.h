// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossLevyPart.proto

#ifndef PROTOBUF_net_2fCrossLevyPart_2eproto__INCLUDED
#define PROTOBUF_net_2fCrossLevyPart_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
#include "net/CommonReward.pb.h"
#include "net/CrossLevy.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

class TCrossLevyScoreRankListInTopRank;
class TCrossLevyAtkNumRankListInTopRank;
class TCrossLevyBossGuildDamageList;
class TCrossLevyGetBossGuildDamageListReq;
class TCrossLevyGetBossGuildDamageListRsp;
class TcrossLevyScoreRankList;
class TCrossLevyGetScoreRankListRsp;
class TcrossLevyAtkNumRankList;
class TCrossLevyGetAtkNumRankListRsp;
class TCrossLevyPlunderPreviewReq;
class TCrossLevyPlunderPreviewRsp;
class TCrossLevyExpelPreviewReq;
class TCrossLevyExpelPreviewRsp;
class TCrossLevyAttackMonsterReq;
class TCrossLevyAttackMonsterRsp;
class TCrossLevyFastMoveReq;
class TCrossLevyFastMoveRsp;
class TCrossLevyReceiveAllSettleRewardRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TCrossLevyScoreRankListInTopRank</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyScoreRankListInTopRank : public ::google::protobuf::Message {
 public:
  TCrossLevyScoreRankListInTopRank();
  virtual ~TCrossLevyScoreRankListInTopRank();

  TCrossLevyScoreRankListInTopRank(const TCrossLevyScoreRankListInTopRank& from);

  inline TCrossLevyScoreRankListInTopRank& operator=(const TCrossLevyScoreRankListInTopRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyScoreRankListInTopRank& default_instance();

  void Swap(TCrossLevyScoreRankListInTopRank* other);

  // implements Message ----------------------------------------------

  TCrossLevyScoreRankListInTopRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyScoreRankListInTopRank& from);
  void MergeFrom(const TCrossLevyScoreRankListInTopRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyScoreRankListInTopRank</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyScoreRankListInTopRank</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional uint32 Score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyScoreRankListInTopRank</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint64 ScoreTime = 4;
  inline bool has_scoretime() const;
  inline void clear_scoretime();
  static const int kScoreTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyScoreRankListInTopRank</name>
  	<Function>
  		<name>scoretime</name>
  		<replaceName>ScoreTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scoretime</name>
  		<replaceName>ScoreTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scoretime</name>
  		<replaceName>ScoreTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 scoretime() const;
  inline void set_scoretime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyScoreRankListInTopRank)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_scoretime();
  inline void clear_has_scoretime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* serverid_;
  ::google::protobuf::uint64 scoretime_;
  ::google::protobuf::uint32 score_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyScoreRankListInTopRank* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyAtkNumRankListInTopRank</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyAtkNumRankListInTopRank : public ::google::protobuf::Message {
 public:
  TCrossLevyAtkNumRankListInTopRank();
  virtual ~TCrossLevyAtkNumRankListInTopRank();

  TCrossLevyAtkNumRankListInTopRank(const TCrossLevyAtkNumRankListInTopRank& from);

  inline TCrossLevyAtkNumRankListInTopRank& operator=(const TCrossLevyAtkNumRankListInTopRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyAtkNumRankListInTopRank& default_instance();

  void Swap(TCrossLevyAtkNumRankListInTopRank* other);

  // implements Message ----------------------------------------------

  TCrossLevyAtkNumRankListInTopRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyAtkNumRankListInTopRank& from);
  void MergeFrom(const TCrossLevyAtkNumRankListInTopRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyAtkNumRankListInTopRank</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyAtkNumRankListInTopRank</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional uint32 AtkNum = 3;
  inline bool has_atknum() const;
  inline void clear_atknum();
  static const int kAtkNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyAtkNumRankListInTopRank</name>
  	<Function>
  		<name>atknum</name>
  		<replaceName>AtkNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atknum</name>
  		<replaceName>AtkNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atknum</name>
  		<replaceName>AtkNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 atknum() const;
  inline void set_atknum(::google::protobuf::uint32 value);

  // optional uint64 AtkNumTime = 4;
  inline bool has_atknumtime() const;
  inline void clear_atknumtime();
  static const int kAtkNumTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyAtkNumRankListInTopRank</name>
  	<Function>
  		<name>atknumtime</name>
  		<replaceName>AtkNumTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atknumtime</name>
  		<replaceName>AtkNumTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atknumtime</name>
  		<replaceName>AtkNumTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 atknumtime() const;
  inline void set_atknumtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyAtkNumRankListInTopRank)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_atknum();
  inline void clear_has_atknum();
  inline void set_has_atknumtime();
  inline void clear_has_atknumtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* serverid_;
  ::google::protobuf::uint64 atknumtime_;
  ::google::protobuf::uint32 atknum_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyAtkNumRankListInTopRank* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyBossGuildDamageList</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyBossGuildDamageList : public ::google::protobuf::Message {
 public:
  TCrossLevyBossGuildDamageList();
  virtual ~TCrossLevyBossGuildDamageList();

  TCrossLevyBossGuildDamageList(const TCrossLevyBossGuildDamageList& from);

  inline TCrossLevyBossGuildDamageList& operator=(const TCrossLevyBossGuildDamageList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyBossGuildDamageList& default_instance();

  void Swap(TCrossLevyBossGuildDamageList* other);

  // implements Message ----------------------------------------------

  TCrossLevyBossGuildDamageList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyBossGuildDamageList& from);
  void MergeFrom(const TCrossLevyBossGuildDamageList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyBossGuildDamageList</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string GuildName = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyBossGuildDamageList</name>
  	<Function>
  		<name>guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional string BannerName = 3;
  inline bool has_bannername() const;
  inline void clear_bannername();
  static const int kBannerNameFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyBossGuildDamageList</name>
  	<Function>
  		<name>bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bannername() const;
  inline void set_bannername(const ::std::string& value);
  inline void set_bannername(const char* value);
  inline void set_bannername(const char* value, size_t size);
  inline ::std::string* mutable_bannername();
  inline ::std::string* release_bannername();
  inline void set_allocated_bannername(::std::string* bannername);

  // optional uint32 BannerBase = 4;
  inline bool has_bannerbase() const;
  inline void clear_bannerbase();
  static const int kBannerBaseFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyBossGuildDamageList</name>
  	<Function>
  		<name>bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerbase() const;
  inline void set_bannerbase(::google::protobuf::uint32 value);

  // optional uint64 FightForce = 5;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyBossGuildDamageList</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint64 Damage = 6;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyBossGuildDamageList</name>
  	<Function>
  		<name>damage</name>
  		<replaceName>Damage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damage</name>
  		<replaceName>Damage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damage</name>
  		<replaceName>Damage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damage() const;
  inline void set_damage(::google::protobuf::uint64 value);

  // optional uint32 Rank = 7;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyBossGuildDamageList</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyBossGuildDamageList)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_bannername();
  inline void clear_has_bannername();
  inline void set_has_bannerbase();
  inline void clear_has_bannerbase();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  ::std::string* bannername_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 bannerbase_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint64 damage_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyBossGuildDamageList* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetBossGuildDamageListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetBossGuildDamageListReq : public ::google::protobuf::Message {
 public:
  TCrossLevyGetBossGuildDamageListReq();
  virtual ~TCrossLevyGetBossGuildDamageListReq();

  TCrossLevyGetBossGuildDamageListReq(const TCrossLevyGetBossGuildDamageListReq& from);

  inline TCrossLevyGetBossGuildDamageListReq& operator=(const TCrossLevyGetBossGuildDamageListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetBossGuildDamageListReq& default_instance();

  void Swap(TCrossLevyGetBossGuildDamageListReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetBossGuildDamageListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetBossGuildDamageListReq& from);
  void MergeFrom(const TCrossLevyGetBossGuildDamageListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetBossGuildDamageListReq</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetBossGuildDamageListReq)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetBossGuildDamageListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetBossGuildDamageListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetBossGuildDamageListRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyGetBossGuildDamageListRsp();
  virtual ~TCrossLevyGetBossGuildDamageListRsp();

  TCrossLevyGetBossGuildDamageListRsp(const TCrossLevyGetBossGuildDamageListRsp& from);

  inline TCrossLevyGetBossGuildDamageListRsp& operator=(const TCrossLevyGetBossGuildDamageListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetBossGuildDamageListRsp& default_instance();

  void Swap(TCrossLevyGetBossGuildDamageListRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetBossGuildDamageListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetBossGuildDamageListRsp& from);
  void MergeFrom(const TCrossLevyGetBossGuildDamageListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TCrossLevyBossGuildDamageList SelfGuildInfo = 1;
  inline bool has_selfguildinfo() const;
  inline void clear_selfguildinfo();
  static const int kSelfGuildInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetBossGuildDamageListRsp</name>
  	<Function>
  		<name>selfguildinfo</name>
  		<replaceName>SelfGuildInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_selfguildinfo</name>
  		<replaceName>SelfGuildInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_selfguildinfo</name>
  		<replaceName>SelfGuildInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfguildinfo</name>
  		<replaceName>SelfGuildInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyBossGuildDamageList& selfguildinfo() const;
  inline ::pb::TCrossLevyBossGuildDamageList* mutable_selfguildinfo();
  inline ::pb::TCrossLevyBossGuildDamageList* release_selfguildinfo();
  inline void set_allocated_selfguildinfo(::pb::TCrossLevyBossGuildDamageList* selfguildinfo);

  // repeated .pb.TCrossLevyBossGuildDamageList GuildListArr = 2;
  inline int guildlistarr_size() const;
  inline void clear_guildlistarr();
  static const int kGuildListArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetBossGuildDamageListRsp</name>
  	<Function>
  		<name>guildlistarr</name>
  		<replaceName>GuildListArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_guildlistarr</name>
  		<replaceName>GuildListArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_guildlistarr</name>
  		<replaceName>GuildListArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildlistarr</name>
  		<replaceName>GuildListArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>guildlistarr_size</name>
  		<replaceName>GuildListArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyBossGuildDamageList& guildlistarr(int index) const;
  inline ::pb::TCrossLevyBossGuildDamageList* mutable_guildlistarr(int index);
  inline ::pb::TCrossLevyBossGuildDamageList* add_guildlistarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyBossGuildDamageList >&
      guildlistarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyBossGuildDamageList >*
      mutable_guildlistarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetBossGuildDamageListRsp)
 private:
  inline void set_has_selfguildinfo();
  inline void clear_has_selfguildinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TCrossLevyBossGuildDamageList* selfguildinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyBossGuildDamageList > guildlistarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetBossGuildDamageListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TcrossLevyScoreRankList</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TcrossLevyScoreRankList : public ::google::protobuf::Message {
 public:
  TcrossLevyScoreRankList();
  virtual ~TcrossLevyScoreRankList();

  TcrossLevyScoreRankList(const TcrossLevyScoreRankList& from);

  inline TcrossLevyScoreRankList& operator=(const TcrossLevyScoreRankList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TcrossLevyScoreRankList& default_instance();

  void Swap(TcrossLevyScoreRankList* other);

  // implements Message ----------------------------------------------

  TcrossLevyScoreRankList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TcrossLevyScoreRankList& from);
  void MergeFrom(const TcrossLevyScoreRankList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TcrossLevyScoreRankList</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 Score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TcrossLevyScoreRankList</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TcrossLevyScoreRankList</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // @@protoc_insertion_point(class_scope:pb.TcrossLevyScoreRankList)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 score_;
  ::pb::TUserSimpleInfo* userinfo_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TcrossLevyScoreRankList* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetScoreRankListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetScoreRankListRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyGetScoreRankListRsp();
  virtual ~TCrossLevyGetScoreRankListRsp();

  TCrossLevyGetScoreRankListRsp(const TCrossLevyGetScoreRankListRsp& from);

  inline TCrossLevyGetScoreRankListRsp& operator=(const TCrossLevyGetScoreRankListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetScoreRankListRsp& default_instance();

  void Swap(TCrossLevyGetScoreRankListRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetScoreRankListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetScoreRankListRsp& from);
  void MergeFrom(const TCrossLevyGetScoreRankListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TcrossLevyScoreRankList SelfInfo = 1;
  inline bool has_selfinfo() const;
  inline void clear_selfinfo();
  static const int kSelfInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetScoreRankListRsp</name>
  	<Function>
  		<name>selfinfo</name>
  		<replaceName>SelfInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_selfinfo</name>
  		<replaceName>SelfInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_selfinfo</name>
  		<replaceName>SelfInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfinfo</name>
  		<replaceName>SelfInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TcrossLevyScoreRankList& selfinfo() const;
  inline ::pb::TcrossLevyScoreRankList* mutable_selfinfo();
  inline ::pb::TcrossLevyScoreRankList* release_selfinfo();
  inline void set_allocated_selfinfo(::pb::TcrossLevyScoreRankList* selfinfo);

  // repeated .pb.TcrossLevyScoreRankList RankListArr = 2;
  inline int ranklistarr_size() const;
  inline void clear_ranklistarr();
  static const int kRankListArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetScoreRankListRsp</name>
  	<Function>
  		<name>ranklistarr</name>
  		<replaceName>RankListArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ranklistarr</name>
  		<replaceName>RankListArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ranklistarr</name>
  		<replaceName>RankListArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ranklistarr</name>
  		<replaceName>RankListArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ranklistarr_size</name>
  		<replaceName>RankListArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TcrossLevyScoreRankList& ranklistarr(int index) const;
  inline ::pb::TcrossLevyScoreRankList* mutable_ranklistarr(int index);
  inline ::pb::TcrossLevyScoreRankList* add_ranklistarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TcrossLevyScoreRankList >&
      ranklistarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TcrossLevyScoreRankList >*
      mutable_ranklistarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetScoreRankListRsp)
 private:
  inline void set_has_selfinfo();
  inline void clear_has_selfinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TcrossLevyScoreRankList* selfinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TcrossLevyScoreRankList > ranklistarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetScoreRankListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TcrossLevyAtkNumRankList</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TcrossLevyAtkNumRankList : public ::google::protobuf::Message {
 public:
  TcrossLevyAtkNumRankList();
  virtual ~TcrossLevyAtkNumRankList();

  TcrossLevyAtkNumRankList(const TcrossLevyAtkNumRankList& from);

  inline TcrossLevyAtkNumRankList& operator=(const TcrossLevyAtkNumRankList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TcrossLevyAtkNumRankList& default_instance();

  void Swap(TcrossLevyAtkNumRankList* other);

  // implements Message ----------------------------------------------

  TcrossLevyAtkNumRankList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TcrossLevyAtkNumRankList& from);
  void MergeFrom(const TcrossLevyAtkNumRankList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TcrossLevyAtkNumRankList</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 AtkNum = 2;
  inline bool has_atknum() const;
  inline void clear_atknum();
  static const int kAtkNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TcrossLevyAtkNumRankList</name>
  	<Function>
  		<name>atknum</name>
  		<replaceName>AtkNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atknum</name>
  		<replaceName>AtkNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atknum</name>
  		<replaceName>AtkNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 atknum() const;
  inline void set_atknum(::google::protobuf::uint32 value);

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TcrossLevyAtkNumRankList</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // @@protoc_insertion_point(class_scope:pb.TcrossLevyAtkNumRankList)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_atknum();
  inline void clear_has_atknum();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 atknum_;
  ::pb::TUserSimpleInfo* userinfo_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TcrossLevyAtkNumRankList* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetAtkNumRankListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetAtkNumRankListRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyGetAtkNumRankListRsp();
  virtual ~TCrossLevyGetAtkNumRankListRsp();

  TCrossLevyGetAtkNumRankListRsp(const TCrossLevyGetAtkNumRankListRsp& from);

  inline TCrossLevyGetAtkNumRankListRsp& operator=(const TCrossLevyGetAtkNumRankListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetAtkNumRankListRsp& default_instance();

  void Swap(TCrossLevyGetAtkNumRankListRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetAtkNumRankListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetAtkNumRankListRsp& from);
  void MergeFrom(const TCrossLevyGetAtkNumRankListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TcrossLevyAtkNumRankList SelfInfo = 1;
  inline bool has_selfinfo() const;
  inline void clear_selfinfo();
  static const int kSelfInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetAtkNumRankListRsp</name>
  	<Function>
  		<name>selfinfo</name>
  		<replaceName>SelfInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_selfinfo</name>
  		<replaceName>SelfInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_selfinfo</name>
  		<replaceName>SelfInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfinfo</name>
  		<replaceName>SelfInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TcrossLevyAtkNumRankList& selfinfo() const;
  inline ::pb::TcrossLevyAtkNumRankList* mutable_selfinfo();
  inline ::pb::TcrossLevyAtkNumRankList* release_selfinfo();
  inline void set_allocated_selfinfo(::pb::TcrossLevyAtkNumRankList* selfinfo);

  // repeated .pb.TcrossLevyAtkNumRankList RankListArr = 2;
  inline int ranklistarr_size() const;
  inline void clear_ranklistarr();
  static const int kRankListArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetAtkNumRankListRsp</name>
  	<Function>
  		<name>ranklistarr</name>
  		<replaceName>RankListArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ranklistarr</name>
  		<replaceName>RankListArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ranklistarr</name>
  		<replaceName>RankListArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ranklistarr</name>
  		<replaceName>RankListArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ranklistarr_size</name>
  		<replaceName>RankListArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TcrossLevyAtkNumRankList& ranklistarr(int index) const;
  inline ::pb::TcrossLevyAtkNumRankList* mutable_ranklistarr(int index);
  inline ::pb::TcrossLevyAtkNumRankList* add_ranklistarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TcrossLevyAtkNumRankList >&
      ranklistarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TcrossLevyAtkNumRankList >*
      mutable_ranklistarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetAtkNumRankListRsp)
 private:
  inline void set_has_selfinfo();
  inline void clear_has_selfinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TcrossLevyAtkNumRankList* selfinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TcrossLevyAtkNumRankList > ranklistarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetAtkNumRankListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyPlunderPreviewReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyPlunderPreviewReq : public ::google::protobuf::Message {
 public:
  TCrossLevyPlunderPreviewReq();
  virtual ~TCrossLevyPlunderPreviewReq();

  TCrossLevyPlunderPreviewReq(const TCrossLevyPlunderPreviewReq& from);

  inline TCrossLevyPlunderPreviewReq& operator=(const TCrossLevyPlunderPreviewReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyPlunderPreviewReq& default_instance();

  void Swap(TCrossLevyPlunderPreviewReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyPlunderPreviewReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyPlunderPreviewReq& from);
  void MergeFrom(const TCrossLevyPlunderPreviewReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyPlunderPreviewReq</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampId = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyPlunderPreviewReq</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint64 EnemyUid = 3;
  inline bool has_enemyuid() const;
  inline void clear_enemyuid();
  static const int kEnemyUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyPlunderPreviewReq</name>
  	<Function>
  		<name>enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 enemyuid() const;
  inline void set_enemyuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyPlunderPreviewReq)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_enemyuid();
  inline void clear_has_enemyuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint64 enemyuid_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyPlunderPreviewReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyPlunderPreviewRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyPlunderPreviewRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyPlunderPreviewRsp();
  virtual ~TCrossLevyPlunderPreviewRsp();

  TCrossLevyPlunderPreviewRsp(const TCrossLevyPlunderPreviewRsp& from);

  inline TCrossLevyPlunderPreviewRsp& operator=(const TCrossLevyPlunderPreviewRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyPlunderPreviewRsp& default_instance();

  void Swap(TCrossLevyPlunderPreviewRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyPlunderPreviewRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyPlunderPreviewRsp& from);
  void MergeFrom(const TCrossLevyPlunderPreviewRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyPlunderPreviewRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint32 RewardScore = 2;
  inline bool has_rewardscore() const;
  inline void clear_rewardscore();
  static const int kRewardScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyPlunderPreviewRsp</name>
  	<Function>
  		<name>rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardscore() const;
  inline void set_rewardscore(::google::protobuf::uint32 value);

  // optional uint32 Ratio = 3;
  inline bool has_ratio() const;
  inline void clear_ratio();
  static const int kRatioFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyPlunderPreviewRsp</name>
  	<Function>
  		<name>ratio</name>
  		<replaceName>Ratio</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ratio</name>
  		<replaceName>Ratio</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ratio</name>
  		<replaceName>Ratio</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 ratio() const;
  inline void set_ratio(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyPlunderPreviewRsp)
 private:
  inline void set_has_rewardscore();
  inline void clear_has_rewardscore();
  inline void set_has_ratio();
  inline void clear_has_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 rewardscore_;
  ::google::protobuf::uint32 ratio_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyPlunderPreviewRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyExpelPreviewReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyExpelPreviewReq : public ::google::protobuf::Message {
 public:
  TCrossLevyExpelPreviewReq();
  virtual ~TCrossLevyExpelPreviewReq();

  TCrossLevyExpelPreviewReq(const TCrossLevyExpelPreviewReq& from);

  inline TCrossLevyExpelPreviewReq& operator=(const TCrossLevyExpelPreviewReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyExpelPreviewReq& default_instance();

  void Swap(TCrossLevyExpelPreviewReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyExpelPreviewReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyExpelPreviewReq& from);
  void MergeFrom(const TCrossLevyExpelPreviewReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyExpelPreviewReq</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampId = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyExpelPreviewReq</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint64 EnemyUid = 3;
  inline bool has_enemyuid() const;
  inline void clear_enemyuid();
  static const int kEnemyUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyExpelPreviewReq</name>
  	<Function>
  		<name>enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 enemyuid() const;
  inline void set_enemyuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyExpelPreviewReq)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_enemyuid();
  inline void clear_has_enemyuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint64 enemyuid_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyExpelPreviewReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyExpelPreviewRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyExpelPreviewRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyExpelPreviewRsp();
  virtual ~TCrossLevyExpelPreviewRsp();

  TCrossLevyExpelPreviewRsp(const TCrossLevyExpelPreviewRsp& from);

  inline TCrossLevyExpelPreviewRsp& operator=(const TCrossLevyExpelPreviewRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyExpelPreviewRsp& default_instance();

  void Swap(TCrossLevyExpelPreviewRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyExpelPreviewRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyExpelPreviewRsp& from);
  void MergeFrom(const TCrossLevyExpelPreviewRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyExpelPreviewRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint32 RewardScore = 2;
  inline bool has_rewardscore() const;
  inline void clear_rewardscore();
  static const int kRewardScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyExpelPreviewRsp</name>
  	<Function>
  		<name>rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardscore() const;
  inline void set_rewardscore(::google::protobuf::uint32 value);

  // optional uint32 Ratio = 3;
  inline bool has_ratio() const;
  inline void clear_ratio();
  static const int kRatioFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyExpelPreviewRsp</name>
  	<Function>
  		<name>ratio</name>
  		<replaceName>Ratio</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ratio</name>
  		<replaceName>Ratio</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ratio</name>
  		<replaceName>Ratio</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 ratio() const;
  inline void set_ratio(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyExpelPreviewRsp)
 private:
  inline void set_has_rewardscore();
  inline void clear_has_rewardscore();
  inline void set_has_ratio();
  inline void clear_has_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 rewardscore_;
  ::google::protobuf::uint32 ratio_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyExpelPreviewRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyAttackMonsterReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyAttackMonsterReq : public ::google::protobuf::Message {
 public:
  TCrossLevyAttackMonsterReq();
  virtual ~TCrossLevyAttackMonsterReq();

  TCrossLevyAttackMonsterReq(const TCrossLevyAttackMonsterReq& from);

  inline TCrossLevyAttackMonsterReq& operator=(const TCrossLevyAttackMonsterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyAttackMonsterReq& default_instance();

  void Swap(TCrossLevyAttackMonsterReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyAttackMonsterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyAttackMonsterReq& from);
  void MergeFrom(const TCrossLevyAttackMonsterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MonsterId = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyAttackMonsterReq</name>
  	<Function>
  		<name>monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // optional uint64 MonsterRfrTime = 2;
  inline bool has_monsterrfrtime() const;
  inline void clear_monsterrfrtime();
  static const int kMonsterRfrTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyAttackMonsterReq</name>
  	<Function>
  		<name>monsterrfrtime</name>
  		<replaceName>MonsterRfrTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterrfrtime</name>
  		<replaceName>MonsterRfrTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterrfrtime</name>
  		<replaceName>MonsterRfrTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 monsterrfrtime() const;
  inline void set_monsterrfrtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyAttackMonsterReq)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_monsterrfrtime();
  inline void clear_has_monsterrfrtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 monsterrfrtime_;
  ::google::protobuf::uint32 monsterid_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyAttackMonsterReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyAttackMonsterRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyAttackMonsterRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyAttackMonsterRsp();
  virtual ~TCrossLevyAttackMonsterRsp();

  TCrossLevyAttackMonsterRsp(const TCrossLevyAttackMonsterRsp& from);

  inline TCrossLevyAttackMonsterRsp& operator=(const TCrossLevyAttackMonsterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyAttackMonsterRsp& default_instance();

  void Swap(TCrossLevyAttackMonsterRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyAttackMonsterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyAttackMonsterRsp& from);
  void MergeFrom(const TCrossLevyAttackMonsterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RewardScore = 1;
  inline bool has_rewardscore() const;
  inline void clear_rewardscore();
  static const int kRewardScoreFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyAttackMonsterRsp</name>
  	<Function>
  		<name>rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardscore() const;
  inline void set_rewardscore(::google::protobuf::uint32 value);

  // repeated bytes MonsterBattleResultArr = 2;
  inline int monsterbattleresultarr_size() const;
  inline void clear_monsterbattleresultarr();
  static const int kMonsterBattleResultArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyAttackMonsterRsp</name>
  	<Function>
  		<name>monsterbattleresultarr</name>
  		<replaceName>MonsterBattleResultArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterbattleresultarr</name>
  		<replaceName>MonsterBattleResultArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterbattleresultarr</name>
  		<replaceName>MonsterBattleResultArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterbattleresultarr</name>
  		<replaceName>MonsterBattleResultArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterbattleresultarr_size</name>
  		<replaceName>MonsterBattleResultArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& monsterbattleresultarr(int index) const;
  inline ::std::string* mutable_monsterbattleresultarr(int index);
  inline void set_monsterbattleresultarr(int index, const ::std::string& value);
  inline void set_monsterbattleresultarr(int index, const char* value);
  inline void set_monsterbattleresultarr(int index, const void* value, size_t size);
  inline ::std::string* add_monsterbattleresultarr();
  inline void add_monsterbattleresultarr(const ::std::string& value);
  inline void add_monsterbattleresultarr(const char* value);
  inline void add_monsterbattleresultarr(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& monsterbattleresultarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_monsterbattleresultarr();

  // repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 3;
  inline int monsterarmyhpinfoarr_size() const;
  inline void clear_monsterarmyhpinfoarr();
  static const int kMonsterArmyHpInfoArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyAttackMonsterRsp</name>
  	<Function>
  		<name>monsterarmyhpinfoarr</name>
  		<replaceName>MonsterArmyHpInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterarmyhpinfoarr</name>
  		<replaceName>MonsterArmyHpInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterarmyhpinfoarr</name>
  		<replaceName>MonsterArmyHpInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterarmyhpinfoarr</name>
  		<replaceName>MonsterArmyHpInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterarmyhpinfoarr_size</name>
  		<replaceName>MonsterArmyHpInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyMonsterArmyHpInfo& monsterarmyhpinfoarr(int index) const;
  inline ::pb::TCrossLevyMonsterArmyHpInfo* mutable_monsterarmyhpinfoarr(int index);
  inline ::pb::TCrossLevyMonsterArmyHpInfo* add_monsterarmyhpinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterArmyHpInfo >&
      monsterarmyhpinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterArmyHpInfo >*
      mutable_monsterarmyhpinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyAttackMonsterRsp)
 private:
  inline void set_has_rewardscore();
  inline void clear_has_rewardscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> monsterbattleresultarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterArmyHpInfo > monsterarmyhpinfoarr_;
  ::google::protobuf::uint32 rewardscore_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyAttackMonsterRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyFastMoveReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyFastMoveReq : public ::google::protobuf::Message {
 public:
  TCrossLevyFastMoveReq();
  virtual ~TCrossLevyFastMoveReq();

  TCrossLevyFastMoveReq(const TCrossLevyFastMoveReq& from);

  inline TCrossLevyFastMoveReq& operator=(const TCrossLevyFastMoveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyFastMoveReq& default_instance();

  void Swap(TCrossLevyFastMoveReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyFastMoveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyFastMoveReq& from);
  void MergeFrom(const TCrossLevyFastMoveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyFastMoveReq</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyFastMoveReq)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyFastMoveReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyFastMoveRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyFastMoveRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyFastMoveRsp();
  virtual ~TCrossLevyFastMoveRsp();

  TCrossLevyFastMoveRsp(const TCrossLevyFastMoveRsp& from);

  inline TCrossLevyFastMoveRsp& operator=(const TCrossLevyFastMoveRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyFastMoveRsp& default_instance();

  void Swap(TCrossLevyFastMoveRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyFastMoveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyFastMoveRsp& from);
  void MergeFrom(const TCrossLevyFastMoveRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CampId = 1;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyFastMoveRsp</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyFastMoveRsp)
 private:
  inline void set_has_campid();
  inline void clear_has_campid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 campid_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyFastMoveRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyReceiveAllSettleRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyPart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyReceiveAllSettleRewardRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyReceiveAllSettleRewardRsp();
  virtual ~TCrossLevyReceiveAllSettleRewardRsp();

  TCrossLevyReceiveAllSettleRewardRsp(const TCrossLevyReceiveAllSettleRewardRsp& from);

  inline TCrossLevyReceiveAllSettleRewardRsp& operator=(const TCrossLevyReceiveAllSettleRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyReceiveAllSettleRewardRsp& default_instance();

  void Swap(TCrossLevyReceiveAllSettleRewardRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyReceiveAllSettleRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyReceiveAllSettleRewardRsp& from);
  void MergeFrom(const TCrossLevyReceiveAllSettleRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReceiveAllSettleRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint32 SettleScore = 2;
  inline bool has_settlescore() const;
  inline void clear_settlescore();
  static const int kSettleScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReceiveAllSettleRewardRsp</name>
  	<Function>
  		<name>settlescore</name>
  		<replaceName>SettleScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_settlescore</name>
  		<replaceName>SettleScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_settlescore</name>
  		<replaceName>SettleScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 settlescore() const;
  inline void set_settlescore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyReceiveAllSettleRewardRsp)
 private:
  inline void set_has_settlescore();
  inline void clear_has_settlescore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 settlescore_;
  friend void  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyReceiveAllSettleRewardRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TCrossLevyScoreRankListInTopRank

// optional uint64 Uid = 1;
inline bool TCrossLevyScoreRankListInTopRank::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyScoreRankListInTopRank::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyScoreRankListInTopRank::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyScoreRankListInTopRank::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossLevyScoreRankListInTopRank::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyScoreRankListInTopRank.Uid)
  return uid_;
}
inline void TCrossLevyScoreRankListInTopRank::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyScoreRankListInTopRank.Uid)
}

// optional string ServerId = 2;
inline bool TCrossLevyScoreRankListInTopRank::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyScoreRankListInTopRank::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyScoreRankListInTopRank::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyScoreRankListInTopRank::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TCrossLevyScoreRankListInTopRank::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyScoreRankListInTopRank.ServerId)
  return *serverid_;
}
inline void TCrossLevyScoreRankListInTopRank::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossLevyScoreRankListInTopRank.ServerId)
}
inline void TCrossLevyScoreRankListInTopRank::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossLevyScoreRankListInTopRank.ServerId)
}
inline void TCrossLevyScoreRankListInTopRank::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossLevyScoreRankListInTopRank.ServerId)
}
inline ::std::string* TCrossLevyScoreRankListInTopRank::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyScoreRankListInTopRank.ServerId)
  return serverid_;
}
inline ::std::string* TCrossLevyScoreRankListInTopRank::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossLevyScoreRankListInTopRank::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyScoreRankListInTopRank.ServerId)
}

// optional uint32 Score = 3;
inline bool TCrossLevyScoreRankListInTopRank::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyScoreRankListInTopRank::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyScoreRankListInTopRank::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyScoreRankListInTopRank::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TCrossLevyScoreRankListInTopRank::score() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyScoreRankListInTopRank.Score)
  return score_;
}
inline void TCrossLevyScoreRankListInTopRank::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyScoreRankListInTopRank.Score)
}

// optional uint64 ScoreTime = 4;
inline bool TCrossLevyScoreRankListInTopRank::has_scoretime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossLevyScoreRankListInTopRank::set_has_scoretime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossLevyScoreRankListInTopRank::clear_has_scoretime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossLevyScoreRankListInTopRank::clear_scoretime() {
  scoretime_ = GOOGLE_ULONGLONG(0);
  clear_has_scoretime();
}
inline ::google::protobuf::uint64 TCrossLevyScoreRankListInTopRank::scoretime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyScoreRankListInTopRank.ScoreTime)
  return scoretime_;
}
inline void TCrossLevyScoreRankListInTopRank::set_scoretime(::google::protobuf::uint64 value) {
  set_has_scoretime();
  scoretime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyScoreRankListInTopRank.ScoreTime)
}

// -------------------------------------------------------------------

// TCrossLevyAtkNumRankListInTopRank

// optional uint64 Uid = 1;
inline bool TCrossLevyAtkNumRankListInTopRank::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyAtkNumRankListInTopRank::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyAtkNumRankListInTopRank::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyAtkNumRankListInTopRank::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossLevyAtkNumRankListInTopRank::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyAtkNumRankListInTopRank.Uid)
  return uid_;
}
inline void TCrossLevyAtkNumRankListInTopRank::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyAtkNumRankListInTopRank.Uid)
}

// optional string ServerId = 2;
inline bool TCrossLevyAtkNumRankListInTopRank::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyAtkNumRankListInTopRank::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyAtkNumRankListInTopRank::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyAtkNumRankListInTopRank::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TCrossLevyAtkNumRankListInTopRank::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyAtkNumRankListInTopRank.ServerId)
  return *serverid_;
}
inline void TCrossLevyAtkNumRankListInTopRank::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossLevyAtkNumRankListInTopRank.ServerId)
}
inline void TCrossLevyAtkNumRankListInTopRank::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossLevyAtkNumRankListInTopRank.ServerId)
}
inline void TCrossLevyAtkNumRankListInTopRank::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossLevyAtkNumRankListInTopRank.ServerId)
}
inline ::std::string* TCrossLevyAtkNumRankListInTopRank::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyAtkNumRankListInTopRank.ServerId)
  return serverid_;
}
inline ::std::string* TCrossLevyAtkNumRankListInTopRank::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossLevyAtkNumRankListInTopRank::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyAtkNumRankListInTopRank.ServerId)
}

// optional uint32 AtkNum = 3;
inline bool TCrossLevyAtkNumRankListInTopRank::has_atknum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyAtkNumRankListInTopRank::set_has_atknum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyAtkNumRankListInTopRank::clear_has_atknum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyAtkNumRankListInTopRank::clear_atknum() {
  atknum_ = 0u;
  clear_has_atknum();
}
inline ::google::protobuf::uint32 TCrossLevyAtkNumRankListInTopRank::atknum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyAtkNumRankListInTopRank.AtkNum)
  return atknum_;
}
inline void TCrossLevyAtkNumRankListInTopRank::set_atknum(::google::protobuf::uint32 value) {
  set_has_atknum();
  atknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyAtkNumRankListInTopRank.AtkNum)
}

// optional uint64 AtkNumTime = 4;
inline bool TCrossLevyAtkNumRankListInTopRank::has_atknumtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossLevyAtkNumRankListInTopRank::set_has_atknumtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossLevyAtkNumRankListInTopRank::clear_has_atknumtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossLevyAtkNumRankListInTopRank::clear_atknumtime() {
  atknumtime_ = GOOGLE_ULONGLONG(0);
  clear_has_atknumtime();
}
inline ::google::protobuf::uint64 TCrossLevyAtkNumRankListInTopRank::atknumtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyAtkNumRankListInTopRank.AtkNumTime)
  return atknumtime_;
}
inline void TCrossLevyAtkNumRankListInTopRank::set_atknumtime(::google::protobuf::uint64 value) {
  set_has_atknumtime();
  atknumtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyAtkNumRankListInTopRank.AtkNumTime)
}

// -------------------------------------------------------------------

// TCrossLevyBossGuildDamageList

// optional uint64 GuildId = 1;
inline bool TCrossLevyBossGuildDamageList::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyBossGuildDamageList::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyBossGuildDamageList::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyBossGuildDamageList::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TCrossLevyBossGuildDamageList::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyBossGuildDamageList.GuildId)
  return guildid_;
}
inline void TCrossLevyBossGuildDamageList::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyBossGuildDamageList.GuildId)
}

// optional string GuildName = 2;
inline bool TCrossLevyBossGuildDamageList::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyBossGuildDamageList::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyBossGuildDamageList::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyBossGuildDamageList::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& TCrossLevyBossGuildDamageList::guildname() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyBossGuildDamageList.GuildName)
  return *guildname_;
}
inline void TCrossLevyBossGuildDamageList::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossLevyBossGuildDamageList.GuildName)
}
inline void TCrossLevyBossGuildDamageList::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossLevyBossGuildDamageList.GuildName)
}
inline void TCrossLevyBossGuildDamageList::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossLevyBossGuildDamageList.GuildName)
}
inline ::std::string* TCrossLevyBossGuildDamageList::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyBossGuildDamageList.GuildName)
  return guildname_;
}
inline ::std::string* TCrossLevyBossGuildDamageList::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossLevyBossGuildDamageList::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyBossGuildDamageList.GuildName)
}

// optional string BannerName = 3;
inline bool TCrossLevyBossGuildDamageList::has_bannername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyBossGuildDamageList::set_has_bannername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyBossGuildDamageList::clear_has_bannername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyBossGuildDamageList::clear_bannername() {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_->clear();
  }
  clear_has_bannername();
}
inline const ::std::string& TCrossLevyBossGuildDamageList::bannername() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyBossGuildDamageList.BannerName)
  return *bannername_;
}
inline void TCrossLevyBossGuildDamageList::set_bannername(const ::std::string& value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossLevyBossGuildDamageList.BannerName)
}
inline void TCrossLevyBossGuildDamageList::set_bannername(const char* value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossLevyBossGuildDamageList.BannerName)
}
inline void TCrossLevyBossGuildDamageList::set_bannername(const char* value, size_t size) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossLevyBossGuildDamageList.BannerName)
}
inline ::std::string* TCrossLevyBossGuildDamageList::mutable_bannername() {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyBossGuildDamageList.BannerName)
  return bannername_;
}
inline ::std::string* TCrossLevyBossGuildDamageList::release_bannername() {
  clear_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bannername_;
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossLevyBossGuildDamageList::set_allocated_bannername(::std::string* bannername) {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (bannername) {
    set_has_bannername();
    bannername_ = bannername;
  } else {
    clear_has_bannername();
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyBossGuildDamageList.BannerName)
}

// optional uint32 BannerBase = 4;
inline bool TCrossLevyBossGuildDamageList::has_bannerbase() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossLevyBossGuildDamageList::set_has_bannerbase() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossLevyBossGuildDamageList::clear_has_bannerbase() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossLevyBossGuildDamageList::clear_bannerbase() {
  bannerbase_ = 0u;
  clear_has_bannerbase();
}
inline ::google::protobuf::uint32 TCrossLevyBossGuildDamageList::bannerbase() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyBossGuildDamageList.BannerBase)
  return bannerbase_;
}
inline void TCrossLevyBossGuildDamageList::set_bannerbase(::google::protobuf::uint32 value) {
  set_has_bannerbase();
  bannerbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyBossGuildDamageList.BannerBase)
}

// optional uint64 FightForce = 5;
inline bool TCrossLevyBossGuildDamageList::has_fightforce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossLevyBossGuildDamageList::set_has_fightforce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossLevyBossGuildDamageList::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossLevyBossGuildDamageList::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TCrossLevyBossGuildDamageList::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyBossGuildDamageList.FightForce)
  return fightforce_;
}
inline void TCrossLevyBossGuildDamageList::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyBossGuildDamageList.FightForce)
}

// optional uint64 Damage = 6;
inline bool TCrossLevyBossGuildDamageList::has_damage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossLevyBossGuildDamageList::set_has_damage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossLevyBossGuildDamageList::clear_has_damage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossLevyBossGuildDamageList::clear_damage() {
  damage_ = GOOGLE_ULONGLONG(0);
  clear_has_damage();
}
inline ::google::protobuf::uint64 TCrossLevyBossGuildDamageList::damage() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyBossGuildDamageList.Damage)
  return damage_;
}
inline void TCrossLevyBossGuildDamageList::set_damage(::google::protobuf::uint64 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyBossGuildDamageList.Damage)
}

// optional uint32 Rank = 7;
inline bool TCrossLevyBossGuildDamageList::has_rank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCrossLevyBossGuildDamageList::set_has_rank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCrossLevyBossGuildDamageList::clear_has_rank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCrossLevyBossGuildDamageList::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TCrossLevyBossGuildDamageList::rank() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyBossGuildDamageList.Rank)
  return rank_;
}
inline void TCrossLevyBossGuildDamageList::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyBossGuildDamageList.Rank)
}

// -------------------------------------------------------------------

// TCrossLevyGetBossGuildDamageListReq

// optional uint32 BossId = 1;
inline bool TCrossLevyGetBossGuildDamageListReq::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetBossGuildDamageListReq::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetBossGuildDamageListReq::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetBossGuildDamageListReq::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TCrossLevyGetBossGuildDamageListReq::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetBossGuildDamageListReq.BossId)
  return bossid_;
}
inline void TCrossLevyGetBossGuildDamageListReq::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetBossGuildDamageListReq.BossId)
}

// -------------------------------------------------------------------

// TCrossLevyGetBossGuildDamageListRsp

// optional .pb.TCrossLevyBossGuildDamageList SelfGuildInfo = 1;
inline bool TCrossLevyGetBossGuildDamageListRsp::has_selfguildinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetBossGuildDamageListRsp::set_has_selfguildinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetBossGuildDamageListRsp::clear_has_selfguildinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetBossGuildDamageListRsp::clear_selfguildinfo() {
  if (selfguildinfo_ != NULL) selfguildinfo_->::pb::TCrossLevyBossGuildDamageList::Clear();
  clear_has_selfguildinfo();
}
inline const ::pb::TCrossLevyBossGuildDamageList& TCrossLevyGetBossGuildDamageListRsp::selfguildinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetBossGuildDamageListRsp.SelfGuildInfo)
  return selfguildinfo_ != NULL ? *selfguildinfo_ : *default_instance_->selfguildinfo_;
}
inline ::pb::TCrossLevyBossGuildDamageList* TCrossLevyGetBossGuildDamageListRsp::mutable_selfguildinfo() {
  set_has_selfguildinfo();
  if (selfguildinfo_ == NULL) selfguildinfo_ = new ::pb::TCrossLevyBossGuildDamageList;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetBossGuildDamageListRsp.SelfGuildInfo)
  return selfguildinfo_;
}
inline ::pb::TCrossLevyBossGuildDamageList* TCrossLevyGetBossGuildDamageListRsp::release_selfguildinfo() {
  clear_has_selfguildinfo();
  ::pb::TCrossLevyBossGuildDamageList* temp = selfguildinfo_;
  selfguildinfo_ = NULL;
  return temp;
}
inline void TCrossLevyGetBossGuildDamageListRsp::set_allocated_selfguildinfo(::pb::TCrossLevyBossGuildDamageList* selfguildinfo) {
  delete selfguildinfo_;
  selfguildinfo_ = selfguildinfo;
  if (selfguildinfo) {
    set_has_selfguildinfo();
  } else {
    clear_has_selfguildinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyGetBossGuildDamageListRsp.SelfGuildInfo)
}

// repeated .pb.TCrossLevyBossGuildDamageList GuildListArr = 2;
inline int TCrossLevyGetBossGuildDamageListRsp::guildlistarr_size() const {
  return guildlistarr_.size();
}
inline void TCrossLevyGetBossGuildDamageListRsp::clear_guildlistarr() {
  guildlistarr_.Clear();
}
inline const ::pb::TCrossLevyBossGuildDamageList& TCrossLevyGetBossGuildDamageListRsp::guildlistarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetBossGuildDamageListRsp.GuildListArr)
  return guildlistarr_.Get(index);
}
inline ::pb::TCrossLevyBossGuildDamageList* TCrossLevyGetBossGuildDamageListRsp::mutable_guildlistarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetBossGuildDamageListRsp.GuildListArr)
  return guildlistarr_.Mutable(index);
}
inline ::pb::TCrossLevyBossGuildDamageList* TCrossLevyGetBossGuildDamageListRsp::add_guildlistarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetBossGuildDamageListRsp.GuildListArr)
  return guildlistarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyBossGuildDamageList >&
TCrossLevyGetBossGuildDamageListRsp::guildlistarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetBossGuildDamageListRsp.GuildListArr)
  return guildlistarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyBossGuildDamageList >*
TCrossLevyGetBossGuildDamageListRsp::mutable_guildlistarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetBossGuildDamageListRsp.GuildListArr)
  return &guildlistarr_;
}

// -------------------------------------------------------------------

// TcrossLevyScoreRankList

// optional uint32 Rank = 1;
inline bool TcrossLevyScoreRankList::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TcrossLevyScoreRankList::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TcrossLevyScoreRankList::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TcrossLevyScoreRankList::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TcrossLevyScoreRankList::rank() const {
  // @@protoc_insertion_point(field_get:pb.TcrossLevyScoreRankList.Rank)
  return rank_;
}
inline void TcrossLevyScoreRankList::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TcrossLevyScoreRankList.Rank)
}

// optional uint32 Score = 2;
inline bool TcrossLevyScoreRankList::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TcrossLevyScoreRankList::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TcrossLevyScoreRankList::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TcrossLevyScoreRankList::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TcrossLevyScoreRankList::score() const {
  // @@protoc_insertion_point(field_get:pb.TcrossLevyScoreRankList.Score)
  return score_;
}
inline void TcrossLevyScoreRankList::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TcrossLevyScoreRankList.Score)
}

// optional .pb.TUserSimpleInfo UserInfo = 3;
inline bool TcrossLevyScoreRankList::has_userinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TcrossLevyScoreRankList::set_has_userinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TcrossLevyScoreRankList::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TcrossLevyScoreRankList::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TcrossLevyScoreRankList::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TcrossLevyScoreRankList.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TcrossLevyScoreRankList::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TcrossLevyScoreRankList.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TcrossLevyScoreRankList::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TcrossLevyScoreRankList::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TcrossLevyScoreRankList.UserInfo)
}

// -------------------------------------------------------------------

// TCrossLevyGetScoreRankListRsp

// optional .pb.TcrossLevyScoreRankList SelfInfo = 1;
inline bool TCrossLevyGetScoreRankListRsp::has_selfinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetScoreRankListRsp::set_has_selfinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetScoreRankListRsp::clear_has_selfinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetScoreRankListRsp::clear_selfinfo() {
  if (selfinfo_ != NULL) selfinfo_->::pb::TcrossLevyScoreRankList::Clear();
  clear_has_selfinfo();
}
inline const ::pb::TcrossLevyScoreRankList& TCrossLevyGetScoreRankListRsp::selfinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetScoreRankListRsp.SelfInfo)
  return selfinfo_ != NULL ? *selfinfo_ : *default_instance_->selfinfo_;
}
inline ::pb::TcrossLevyScoreRankList* TCrossLevyGetScoreRankListRsp::mutable_selfinfo() {
  set_has_selfinfo();
  if (selfinfo_ == NULL) selfinfo_ = new ::pb::TcrossLevyScoreRankList;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetScoreRankListRsp.SelfInfo)
  return selfinfo_;
}
inline ::pb::TcrossLevyScoreRankList* TCrossLevyGetScoreRankListRsp::release_selfinfo() {
  clear_has_selfinfo();
  ::pb::TcrossLevyScoreRankList* temp = selfinfo_;
  selfinfo_ = NULL;
  return temp;
}
inline void TCrossLevyGetScoreRankListRsp::set_allocated_selfinfo(::pb::TcrossLevyScoreRankList* selfinfo) {
  delete selfinfo_;
  selfinfo_ = selfinfo;
  if (selfinfo) {
    set_has_selfinfo();
  } else {
    clear_has_selfinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyGetScoreRankListRsp.SelfInfo)
}

// repeated .pb.TcrossLevyScoreRankList RankListArr = 2;
inline int TCrossLevyGetScoreRankListRsp::ranklistarr_size() const {
  return ranklistarr_.size();
}
inline void TCrossLevyGetScoreRankListRsp::clear_ranklistarr() {
  ranklistarr_.Clear();
}
inline const ::pb::TcrossLevyScoreRankList& TCrossLevyGetScoreRankListRsp::ranklistarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetScoreRankListRsp.RankListArr)
  return ranklistarr_.Get(index);
}
inline ::pb::TcrossLevyScoreRankList* TCrossLevyGetScoreRankListRsp::mutable_ranklistarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetScoreRankListRsp.RankListArr)
  return ranklistarr_.Mutable(index);
}
inline ::pb::TcrossLevyScoreRankList* TCrossLevyGetScoreRankListRsp::add_ranklistarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetScoreRankListRsp.RankListArr)
  return ranklistarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TcrossLevyScoreRankList >&
TCrossLevyGetScoreRankListRsp::ranklistarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetScoreRankListRsp.RankListArr)
  return ranklistarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TcrossLevyScoreRankList >*
TCrossLevyGetScoreRankListRsp::mutable_ranklistarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetScoreRankListRsp.RankListArr)
  return &ranklistarr_;
}

// -------------------------------------------------------------------

// TcrossLevyAtkNumRankList

// optional uint32 Rank = 1;
inline bool TcrossLevyAtkNumRankList::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TcrossLevyAtkNumRankList::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TcrossLevyAtkNumRankList::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TcrossLevyAtkNumRankList::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TcrossLevyAtkNumRankList::rank() const {
  // @@protoc_insertion_point(field_get:pb.TcrossLevyAtkNumRankList.Rank)
  return rank_;
}
inline void TcrossLevyAtkNumRankList::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TcrossLevyAtkNumRankList.Rank)
}

// optional uint32 AtkNum = 2;
inline bool TcrossLevyAtkNumRankList::has_atknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TcrossLevyAtkNumRankList::set_has_atknum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TcrossLevyAtkNumRankList::clear_has_atknum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TcrossLevyAtkNumRankList::clear_atknum() {
  atknum_ = 0u;
  clear_has_atknum();
}
inline ::google::protobuf::uint32 TcrossLevyAtkNumRankList::atknum() const {
  // @@protoc_insertion_point(field_get:pb.TcrossLevyAtkNumRankList.AtkNum)
  return atknum_;
}
inline void TcrossLevyAtkNumRankList::set_atknum(::google::protobuf::uint32 value) {
  set_has_atknum();
  atknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TcrossLevyAtkNumRankList.AtkNum)
}

// optional .pb.TUserSimpleInfo UserInfo = 3;
inline bool TcrossLevyAtkNumRankList::has_userinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TcrossLevyAtkNumRankList::set_has_userinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TcrossLevyAtkNumRankList::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TcrossLevyAtkNumRankList::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TcrossLevyAtkNumRankList::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TcrossLevyAtkNumRankList.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TcrossLevyAtkNumRankList::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TcrossLevyAtkNumRankList.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TcrossLevyAtkNumRankList::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TcrossLevyAtkNumRankList::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TcrossLevyAtkNumRankList.UserInfo)
}

// -------------------------------------------------------------------

// TCrossLevyGetAtkNumRankListRsp

// optional .pb.TcrossLevyAtkNumRankList SelfInfo = 1;
inline bool TCrossLevyGetAtkNumRankListRsp::has_selfinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetAtkNumRankListRsp::set_has_selfinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetAtkNumRankListRsp::clear_has_selfinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetAtkNumRankListRsp::clear_selfinfo() {
  if (selfinfo_ != NULL) selfinfo_->::pb::TcrossLevyAtkNumRankList::Clear();
  clear_has_selfinfo();
}
inline const ::pb::TcrossLevyAtkNumRankList& TCrossLevyGetAtkNumRankListRsp::selfinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetAtkNumRankListRsp.SelfInfo)
  return selfinfo_ != NULL ? *selfinfo_ : *default_instance_->selfinfo_;
}
inline ::pb::TcrossLevyAtkNumRankList* TCrossLevyGetAtkNumRankListRsp::mutable_selfinfo() {
  set_has_selfinfo();
  if (selfinfo_ == NULL) selfinfo_ = new ::pb::TcrossLevyAtkNumRankList;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetAtkNumRankListRsp.SelfInfo)
  return selfinfo_;
}
inline ::pb::TcrossLevyAtkNumRankList* TCrossLevyGetAtkNumRankListRsp::release_selfinfo() {
  clear_has_selfinfo();
  ::pb::TcrossLevyAtkNumRankList* temp = selfinfo_;
  selfinfo_ = NULL;
  return temp;
}
inline void TCrossLevyGetAtkNumRankListRsp::set_allocated_selfinfo(::pb::TcrossLevyAtkNumRankList* selfinfo) {
  delete selfinfo_;
  selfinfo_ = selfinfo;
  if (selfinfo) {
    set_has_selfinfo();
  } else {
    clear_has_selfinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyGetAtkNumRankListRsp.SelfInfo)
}

// repeated .pb.TcrossLevyAtkNumRankList RankListArr = 2;
inline int TCrossLevyGetAtkNumRankListRsp::ranklistarr_size() const {
  return ranklistarr_.size();
}
inline void TCrossLevyGetAtkNumRankListRsp::clear_ranklistarr() {
  ranklistarr_.Clear();
}
inline const ::pb::TcrossLevyAtkNumRankList& TCrossLevyGetAtkNumRankListRsp::ranklistarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetAtkNumRankListRsp.RankListArr)
  return ranklistarr_.Get(index);
}
inline ::pb::TcrossLevyAtkNumRankList* TCrossLevyGetAtkNumRankListRsp::mutable_ranklistarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetAtkNumRankListRsp.RankListArr)
  return ranklistarr_.Mutable(index);
}
inline ::pb::TcrossLevyAtkNumRankList* TCrossLevyGetAtkNumRankListRsp::add_ranklistarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetAtkNumRankListRsp.RankListArr)
  return ranklistarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TcrossLevyAtkNumRankList >&
TCrossLevyGetAtkNumRankListRsp::ranklistarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetAtkNumRankListRsp.RankListArr)
  return ranklistarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TcrossLevyAtkNumRankList >*
TCrossLevyGetAtkNumRankListRsp::mutable_ranklistarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetAtkNumRankListRsp.RankListArr)
  return &ranklistarr_;
}

// -------------------------------------------------------------------

// TCrossLevyPlunderPreviewReq

// optional uint32 CityId = 1;
inline bool TCrossLevyPlunderPreviewReq::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyPlunderPreviewReq::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyPlunderPreviewReq::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyPlunderPreviewReq::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyPlunderPreviewReq::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyPlunderPreviewReq.CityId)
  return cityid_;
}
inline void TCrossLevyPlunderPreviewReq::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyPlunderPreviewReq.CityId)
}

// optional uint32 CampId = 2;
inline bool TCrossLevyPlunderPreviewReq::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyPlunderPreviewReq::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyPlunderPreviewReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyPlunderPreviewReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCrossLevyPlunderPreviewReq::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyPlunderPreviewReq.CampId)
  return campid_;
}
inline void TCrossLevyPlunderPreviewReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyPlunderPreviewReq.CampId)
}

// optional uint64 EnemyUid = 3;
inline bool TCrossLevyPlunderPreviewReq::has_enemyuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyPlunderPreviewReq::set_has_enemyuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyPlunderPreviewReq::clear_has_enemyuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyPlunderPreviewReq::clear_enemyuid() {
  enemyuid_ = GOOGLE_ULONGLONG(0);
  clear_has_enemyuid();
}
inline ::google::protobuf::uint64 TCrossLevyPlunderPreviewReq::enemyuid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyPlunderPreviewReq.EnemyUid)
  return enemyuid_;
}
inline void TCrossLevyPlunderPreviewReq::set_enemyuid(::google::protobuf::uint64 value) {
  set_has_enemyuid();
  enemyuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyPlunderPreviewReq.EnemyUid)
}

// -------------------------------------------------------------------

// TCrossLevyPlunderPreviewRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TCrossLevyPlunderPreviewRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCrossLevyPlunderPreviewRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossLevyPlunderPreviewRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyPlunderPreviewRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossLevyPlunderPreviewRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyPlunderPreviewRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossLevyPlunderPreviewRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyPlunderPreviewRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossLevyPlunderPreviewRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyPlunderPreviewRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossLevyPlunderPreviewRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyPlunderPreviewRsp.RewardArr)
  return &rewardarr_;
}

// optional uint32 RewardScore = 2;
inline bool TCrossLevyPlunderPreviewRsp::has_rewardscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyPlunderPreviewRsp::set_has_rewardscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyPlunderPreviewRsp::clear_has_rewardscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyPlunderPreviewRsp::clear_rewardscore() {
  rewardscore_ = 0u;
  clear_has_rewardscore();
}
inline ::google::protobuf::uint32 TCrossLevyPlunderPreviewRsp::rewardscore() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyPlunderPreviewRsp.RewardScore)
  return rewardscore_;
}
inline void TCrossLevyPlunderPreviewRsp::set_rewardscore(::google::protobuf::uint32 value) {
  set_has_rewardscore();
  rewardscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyPlunderPreviewRsp.RewardScore)
}

// optional uint32 Ratio = 3;
inline bool TCrossLevyPlunderPreviewRsp::has_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyPlunderPreviewRsp::set_has_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyPlunderPreviewRsp::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyPlunderPreviewRsp::clear_ratio() {
  ratio_ = 0u;
  clear_has_ratio();
}
inline ::google::protobuf::uint32 TCrossLevyPlunderPreviewRsp::ratio() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyPlunderPreviewRsp.Ratio)
  return ratio_;
}
inline void TCrossLevyPlunderPreviewRsp::set_ratio(::google::protobuf::uint32 value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyPlunderPreviewRsp.Ratio)
}

// -------------------------------------------------------------------

// TCrossLevyExpelPreviewReq

// optional uint32 CityId = 1;
inline bool TCrossLevyExpelPreviewReq::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyExpelPreviewReq::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyExpelPreviewReq::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyExpelPreviewReq::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyExpelPreviewReq::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyExpelPreviewReq.CityId)
  return cityid_;
}
inline void TCrossLevyExpelPreviewReq::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyExpelPreviewReq.CityId)
}

// optional uint32 CampId = 2;
inline bool TCrossLevyExpelPreviewReq::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyExpelPreviewReq::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyExpelPreviewReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyExpelPreviewReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCrossLevyExpelPreviewReq::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyExpelPreviewReq.CampId)
  return campid_;
}
inline void TCrossLevyExpelPreviewReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyExpelPreviewReq.CampId)
}

// optional uint64 EnemyUid = 3;
inline bool TCrossLevyExpelPreviewReq::has_enemyuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyExpelPreviewReq::set_has_enemyuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyExpelPreviewReq::clear_has_enemyuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyExpelPreviewReq::clear_enemyuid() {
  enemyuid_ = GOOGLE_ULONGLONG(0);
  clear_has_enemyuid();
}
inline ::google::protobuf::uint64 TCrossLevyExpelPreviewReq::enemyuid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyExpelPreviewReq.EnemyUid)
  return enemyuid_;
}
inline void TCrossLevyExpelPreviewReq::set_enemyuid(::google::protobuf::uint64 value) {
  set_has_enemyuid();
  enemyuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyExpelPreviewReq.EnemyUid)
}

// -------------------------------------------------------------------

// TCrossLevyExpelPreviewRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TCrossLevyExpelPreviewRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCrossLevyExpelPreviewRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossLevyExpelPreviewRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyExpelPreviewRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossLevyExpelPreviewRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyExpelPreviewRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossLevyExpelPreviewRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyExpelPreviewRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossLevyExpelPreviewRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyExpelPreviewRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossLevyExpelPreviewRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyExpelPreviewRsp.RewardArr)
  return &rewardarr_;
}

// optional uint32 RewardScore = 2;
inline bool TCrossLevyExpelPreviewRsp::has_rewardscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyExpelPreviewRsp::set_has_rewardscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyExpelPreviewRsp::clear_has_rewardscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyExpelPreviewRsp::clear_rewardscore() {
  rewardscore_ = 0u;
  clear_has_rewardscore();
}
inline ::google::protobuf::uint32 TCrossLevyExpelPreviewRsp::rewardscore() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyExpelPreviewRsp.RewardScore)
  return rewardscore_;
}
inline void TCrossLevyExpelPreviewRsp::set_rewardscore(::google::protobuf::uint32 value) {
  set_has_rewardscore();
  rewardscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyExpelPreviewRsp.RewardScore)
}

// optional uint32 Ratio = 3;
inline bool TCrossLevyExpelPreviewRsp::has_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyExpelPreviewRsp::set_has_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyExpelPreviewRsp::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyExpelPreviewRsp::clear_ratio() {
  ratio_ = 0u;
  clear_has_ratio();
}
inline ::google::protobuf::uint32 TCrossLevyExpelPreviewRsp::ratio() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyExpelPreviewRsp.Ratio)
  return ratio_;
}
inline void TCrossLevyExpelPreviewRsp::set_ratio(::google::protobuf::uint32 value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyExpelPreviewRsp.Ratio)
}

// -------------------------------------------------------------------

// TCrossLevyAttackMonsterReq

// optional uint32 MonsterId = 1;
inline bool TCrossLevyAttackMonsterReq::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyAttackMonsterReq::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyAttackMonsterReq::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyAttackMonsterReq::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 TCrossLevyAttackMonsterReq::monsterid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyAttackMonsterReq.MonsterId)
  return monsterid_;
}
inline void TCrossLevyAttackMonsterReq::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyAttackMonsterReq.MonsterId)
}

// optional uint64 MonsterRfrTime = 2;
inline bool TCrossLevyAttackMonsterReq::has_monsterrfrtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyAttackMonsterReq::set_has_monsterrfrtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyAttackMonsterReq::clear_has_monsterrfrtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyAttackMonsterReq::clear_monsterrfrtime() {
  monsterrfrtime_ = GOOGLE_ULONGLONG(0);
  clear_has_monsterrfrtime();
}
inline ::google::protobuf::uint64 TCrossLevyAttackMonsterReq::monsterrfrtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyAttackMonsterReq.MonsterRfrTime)
  return monsterrfrtime_;
}
inline void TCrossLevyAttackMonsterReq::set_monsterrfrtime(::google::protobuf::uint64 value) {
  set_has_monsterrfrtime();
  monsterrfrtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyAttackMonsterReq.MonsterRfrTime)
}

// -------------------------------------------------------------------

// TCrossLevyAttackMonsterRsp

// optional uint32 RewardScore = 1;
inline bool TCrossLevyAttackMonsterRsp::has_rewardscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyAttackMonsterRsp::set_has_rewardscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyAttackMonsterRsp::clear_has_rewardscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyAttackMonsterRsp::clear_rewardscore() {
  rewardscore_ = 0u;
  clear_has_rewardscore();
}
inline ::google::protobuf::uint32 TCrossLevyAttackMonsterRsp::rewardscore() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyAttackMonsterRsp.RewardScore)
  return rewardscore_;
}
inline void TCrossLevyAttackMonsterRsp::set_rewardscore(::google::protobuf::uint32 value) {
  set_has_rewardscore();
  rewardscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyAttackMonsterRsp.RewardScore)
}

// repeated bytes MonsterBattleResultArr = 2;
inline int TCrossLevyAttackMonsterRsp::monsterbattleresultarr_size() const {
  return monsterbattleresultarr_.size();
}
inline void TCrossLevyAttackMonsterRsp::clear_monsterbattleresultarr() {
  monsterbattleresultarr_.Clear();
}
inline const ::std::string& TCrossLevyAttackMonsterRsp::monsterbattleresultarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyAttackMonsterRsp.MonsterBattleResultArr)
  return monsterbattleresultarr_.Get(index);
}
inline ::std::string* TCrossLevyAttackMonsterRsp::mutable_monsterbattleresultarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyAttackMonsterRsp.MonsterBattleResultArr)
  return monsterbattleresultarr_.Mutable(index);
}
inline void TCrossLevyAttackMonsterRsp::set_monsterbattleresultarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TCrossLevyAttackMonsterRsp.MonsterBattleResultArr)
  monsterbattleresultarr_.Mutable(index)->assign(value);
}
inline void TCrossLevyAttackMonsterRsp::set_monsterbattleresultarr(int index, const char* value) {
  monsterbattleresultarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossLevyAttackMonsterRsp.MonsterBattleResultArr)
}
inline void TCrossLevyAttackMonsterRsp::set_monsterbattleresultarr(int index, const void* value, size_t size) {
  monsterbattleresultarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossLevyAttackMonsterRsp.MonsterBattleResultArr)
}
inline ::std::string* TCrossLevyAttackMonsterRsp::add_monsterbattleresultarr() {
  return monsterbattleresultarr_.Add();
}
inline void TCrossLevyAttackMonsterRsp::add_monsterbattleresultarr(const ::std::string& value) {
  monsterbattleresultarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TCrossLevyAttackMonsterRsp.MonsterBattleResultArr)
}
inline void TCrossLevyAttackMonsterRsp::add_monsterbattleresultarr(const char* value) {
  monsterbattleresultarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TCrossLevyAttackMonsterRsp.MonsterBattleResultArr)
}
inline void TCrossLevyAttackMonsterRsp::add_monsterbattleresultarr(const void* value, size_t size) {
  monsterbattleresultarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TCrossLevyAttackMonsterRsp.MonsterBattleResultArr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TCrossLevyAttackMonsterRsp::monsterbattleresultarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyAttackMonsterRsp.MonsterBattleResultArr)
  return monsterbattleresultarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TCrossLevyAttackMonsterRsp::mutable_monsterbattleresultarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyAttackMonsterRsp.MonsterBattleResultArr)
  return &monsterbattleresultarr_;
}

// repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 3;
inline int TCrossLevyAttackMonsterRsp::monsterarmyhpinfoarr_size() const {
  return monsterarmyhpinfoarr_.size();
}
inline void TCrossLevyAttackMonsterRsp::clear_monsterarmyhpinfoarr() {
  monsterarmyhpinfoarr_.Clear();
}
inline const ::pb::TCrossLevyMonsterArmyHpInfo& TCrossLevyAttackMonsterRsp::monsterarmyhpinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyAttackMonsterRsp.MonsterArmyHpInfoArr)
  return monsterarmyhpinfoarr_.Get(index);
}
inline ::pb::TCrossLevyMonsterArmyHpInfo* TCrossLevyAttackMonsterRsp::mutable_monsterarmyhpinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyAttackMonsterRsp.MonsterArmyHpInfoArr)
  return monsterarmyhpinfoarr_.Mutable(index);
}
inline ::pb::TCrossLevyMonsterArmyHpInfo* TCrossLevyAttackMonsterRsp::add_monsterarmyhpinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyAttackMonsterRsp.MonsterArmyHpInfoArr)
  return monsterarmyhpinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterArmyHpInfo >&
TCrossLevyAttackMonsterRsp::monsterarmyhpinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyAttackMonsterRsp.MonsterArmyHpInfoArr)
  return monsterarmyhpinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterArmyHpInfo >*
TCrossLevyAttackMonsterRsp::mutable_monsterarmyhpinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyAttackMonsterRsp.MonsterArmyHpInfoArr)
  return &monsterarmyhpinfoarr_;
}

// -------------------------------------------------------------------

// TCrossLevyFastMoveReq

// optional uint32 CityId = 1;
inline bool TCrossLevyFastMoveReq::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyFastMoveReq::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyFastMoveReq::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyFastMoveReq::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyFastMoveReq::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyFastMoveReq.CityId)
  return cityid_;
}
inline void TCrossLevyFastMoveReq::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyFastMoveReq.CityId)
}

// -------------------------------------------------------------------

// TCrossLevyFastMoveRsp

// optional uint32 CampId = 1;
inline bool TCrossLevyFastMoveRsp::has_campid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyFastMoveRsp::set_has_campid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyFastMoveRsp::clear_has_campid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyFastMoveRsp::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCrossLevyFastMoveRsp::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyFastMoveRsp.CampId)
  return campid_;
}
inline void TCrossLevyFastMoveRsp::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyFastMoveRsp.CampId)
}

// -------------------------------------------------------------------

// TCrossLevyReceiveAllSettleRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TCrossLevyReceiveAllSettleRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCrossLevyReceiveAllSettleRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossLevyReceiveAllSettleRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReceiveAllSettleRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossLevyReceiveAllSettleRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyReceiveAllSettleRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossLevyReceiveAllSettleRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyReceiveAllSettleRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossLevyReceiveAllSettleRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyReceiveAllSettleRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossLevyReceiveAllSettleRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyReceiveAllSettleRewardRsp.RewardArr)
  return &rewardarr_;
}

// optional uint32 SettleScore = 2;
inline bool TCrossLevyReceiveAllSettleRewardRsp::has_settlescore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyReceiveAllSettleRewardRsp::set_has_settlescore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyReceiveAllSettleRewardRsp::clear_has_settlescore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyReceiveAllSettleRewardRsp::clear_settlescore() {
  settlescore_ = 0u;
  clear_has_settlescore();
}
inline ::google::protobuf::uint32 TCrossLevyReceiveAllSettleRewardRsp::settlescore() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReceiveAllSettleRewardRsp.SettleScore)
  return settlescore_;
}
inline void TCrossLevyReceiveAllSettleRewardRsp::set_settlescore(::google::protobuf::uint32 value) {
  set_has_settlescore();
  settlescore_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReceiveAllSettleRewardRsp.SettleScore)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fCrossLevyPart_2eproto__INCLUDED
