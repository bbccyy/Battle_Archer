// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/EffectSpecialEvent.proto

#ifndef PROTOBUF_module_2fEffectSpecialEvent_2eproto__INCLUDED
#define PROTOBUF_module_2fEffectSpecialEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/AvatarData.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fEffectSpecialEvent_2eproto();
void protobuf_AssignDesc_module_2fEffectSpecialEvent_2eproto();
void protobuf_ShutdownFile_module_2fEffectSpecialEvent_2eproto();

class EffectSpecialEvent;

// ===================================================================

/*FOR2LUA
<Record>
	<name>EffectSpecialEvent</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/EffectSpecialEvent.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class EffectSpecialEvent : public ::google::protobuf::Message {
 public:
  EffectSpecialEvent();
  virtual ~EffectSpecialEvent();

  EffectSpecialEvent(const EffectSpecialEvent& from);

  inline EffectSpecialEvent& operator=(const EffectSpecialEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectSpecialEvent& default_instance();

  void Swap(EffectSpecialEvent* other);

  // implements Message ----------------------------------------------

  EffectSpecialEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EffectSpecialEvent& from);
  void MergeFrom(const EffectSpecialEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>EffectSpecialEvent</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string EffectName = 2;
  inline bool has_effectname() const;
  inline void clear_effectname();
  static const int kEffectNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>EffectSpecialEvent</name>
  	<Function>
  		<name>effectname</name>
  		<replaceName>EffectName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effectname</name>
  		<replaceName>EffectName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effectname</name>
  		<replaceName>EffectName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& effectname() const;
  inline void set_effectname(const ::std::string& value);
  inline void set_effectname(const char* value);
  inline void set_effectname(const char* value, size_t size);
  inline ::std::string* mutable_effectname();
  inline ::std::string* release_effectname();
  inline void set_allocated_effectname(::std::string* effectname);

  // repeated .pb.TriggerEvent TriggerEvents = 3;
  inline int triggerevents_size() const;
  inline void clear_triggerevents();
  static const int kTriggerEventsFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>EffectSpecialEvent</name>
  	<Function>
  		<name>triggerevents</name>
  		<replaceName>TriggerEvents</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_triggerevents</name>
  		<replaceName>TriggerEvents</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_triggerevents</name>
  		<replaceName>TriggerEvents</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggerevents</name>
  		<replaceName>TriggerEvents</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>triggerevents_size</name>
  		<replaceName>TriggerEvents</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TriggerEvent& triggerevents(int index) const;
  inline ::pb::TriggerEvent* mutable_triggerevents(int index);
  inline ::pb::TriggerEvent* add_triggerevents();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TriggerEvent >&
      triggerevents() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TriggerEvent >*
      mutable_triggerevents();

  // @@protoc_insertion_point(class_scope:pb.EffectSpecialEvent)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_effectname();
  inline void clear_has_effectname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* effectname_;
  ::google::protobuf::RepeatedPtrField< ::pb::TriggerEvent > triggerevents_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_module_2fEffectSpecialEvent_2eproto();
  friend void protobuf_AssignDesc_module_2fEffectSpecialEvent_2eproto();
  friend void protobuf_ShutdownFile_module_2fEffectSpecialEvent_2eproto();

  void InitAsDefaultInstance();
  static EffectSpecialEvent* default_instance_;
};
// ===================================================================


// ===================================================================

// EffectSpecialEvent

// optional int32 Id = 1;
inline bool EffectSpecialEvent::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EffectSpecialEvent::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EffectSpecialEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EffectSpecialEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 EffectSpecialEvent::id() const {
  // @@protoc_insertion_point(field_get:pb.EffectSpecialEvent.Id)
  return id_;
}
inline void EffectSpecialEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.EffectSpecialEvent.Id)
}

// optional string EffectName = 2;
inline bool EffectSpecialEvent::has_effectname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EffectSpecialEvent::set_has_effectname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EffectSpecialEvent::clear_has_effectname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EffectSpecialEvent::clear_effectname() {
  if (effectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effectname_->clear();
  }
  clear_has_effectname();
}
inline const ::std::string& EffectSpecialEvent::effectname() const {
  // @@protoc_insertion_point(field_get:pb.EffectSpecialEvent.EffectName)
  return *effectname_;
}
inline void EffectSpecialEvent::set_effectname(const ::std::string& value) {
  set_has_effectname();
  if (effectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effectname_ = new ::std::string;
  }
  effectname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.EffectSpecialEvent.EffectName)
}
inline void EffectSpecialEvent::set_effectname(const char* value) {
  set_has_effectname();
  if (effectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effectname_ = new ::std::string;
  }
  effectname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.EffectSpecialEvent.EffectName)
}
inline void EffectSpecialEvent::set_effectname(const char* value, size_t size) {
  set_has_effectname();
  if (effectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effectname_ = new ::std::string;
  }
  effectname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.EffectSpecialEvent.EffectName)
}
inline ::std::string* EffectSpecialEvent::mutable_effectname() {
  set_has_effectname();
  if (effectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effectname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.EffectSpecialEvent.EffectName)
  return effectname_;
}
inline ::std::string* EffectSpecialEvent::release_effectname() {
  clear_has_effectname();
  if (effectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = effectname_;
    effectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EffectSpecialEvent::set_allocated_effectname(::std::string* effectname) {
  if (effectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete effectname_;
  }
  if (effectname) {
    set_has_effectname();
    effectname_ = effectname;
  } else {
    clear_has_effectname();
    effectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.EffectSpecialEvent.EffectName)
}

// repeated .pb.TriggerEvent TriggerEvents = 3;
inline int EffectSpecialEvent::triggerevents_size() const {
  return triggerevents_.size();
}
inline void EffectSpecialEvent::clear_triggerevents() {
  triggerevents_.Clear();
}
inline const ::pb::TriggerEvent& EffectSpecialEvent::triggerevents(int index) const {
  // @@protoc_insertion_point(field_get:pb.EffectSpecialEvent.TriggerEvents)
  return triggerevents_.Get(index);
}
inline ::pb::TriggerEvent* EffectSpecialEvent::mutable_triggerevents(int index) {
  // @@protoc_insertion_point(field_mutable:pb.EffectSpecialEvent.TriggerEvents)
  return triggerevents_.Mutable(index);
}
inline ::pb::TriggerEvent* EffectSpecialEvent::add_triggerevents() {
  // @@protoc_insertion_point(field_add:pb.EffectSpecialEvent.TriggerEvents)
  return triggerevents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TriggerEvent >&
EffectSpecialEvent::triggerevents() const {
  // @@protoc_insertion_point(field_list:pb.EffectSpecialEvent.TriggerEvents)
  return triggerevents_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TriggerEvent >*
EffectSpecialEvent::mutable_triggerevents() {
  // @@protoc_insertion_point(field_mutable_list:pb.EffectSpecialEvent.TriggerEvents)
  return &triggerevents_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fEffectSpecialEvent_2eproto__INCLUDED
