// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SceneUIAudio.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/SceneUIAudio.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* ButtonClickAudioInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ButtonClickAudioInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneUIAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneUIAudio_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fSceneUIAudio_2eproto() {
  protobuf_AddDesc_module_2fSceneUIAudio_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/SceneUIAudio.proto");
  GOOGLE_CHECK(file != NULL);
  ButtonClickAudioInfo_descriptor_ = file->message_type(0);
  static const int ButtonClickAudioInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonClickAudioInfo, componentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonClickAudioInfo, downaduioinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonClickAudioInfo, upaudioinfo_),
  };
  ButtonClickAudioInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ButtonClickAudioInfo_descriptor_,
      ButtonClickAudioInfo::default_instance_,
      ButtonClickAudioInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonClickAudioInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonClickAudioInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ButtonClickAudioInfo));
  SceneUIAudio_descriptor_ = file->message_type(1);
  static const int SceneUIAudio_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneUIAudio, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneUIAudio, sceneuiname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneUIAudio, buttonclickaudioinfo_),
  };
  SceneUIAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneUIAudio_descriptor_,
      SceneUIAudio::default_instance_,
      SceneUIAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneUIAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneUIAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneUIAudio));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fSceneUIAudio_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ButtonClickAudioInfo_descriptor_, &ButtonClickAudioInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneUIAudio_descriptor_, &SceneUIAudio::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fSceneUIAudio_2eproto() {
  delete ButtonClickAudioInfo::default_instance_;
  delete ButtonClickAudioInfo_reflection_;
  delete SceneUIAudio::default_instance_;
  delete SceneUIAudio_reflection_;
}

void protobuf_AddDesc_module_2fSceneUIAudio_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fAudioDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031module/SceneUIAudio.proto\022\002pb\032\030module/"
    "AudioDefine.proto\"w\n\024ButtonClickAudioInf"
    "o\022\025\n\rComponentName\030\001 \001(\t\022$\n\rDownAduioInf"
    "o\030\002 \001(\0132\r.pb.AudioInfo\022\"\n\013UpAudioInfo\030\003 "
    "\001(\0132\r.pb.AudioInfo\"g\n\014SceneUIAudio\022\n\n\002Id"
    "\030\001 \001(\005\022\023\n\013SceneUIName\030\002 \001(\t\0226\n\024ButtonCli"
    "ckAudioInfo\030\007 \003(\0132\030.pb.ButtonClickAudioI"
    "nfo", 283);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/SceneUIAudio.proto", &protobuf_RegisterTypes);
  ButtonClickAudioInfo::default_instance_ = new ButtonClickAudioInfo();
  SceneUIAudio::default_instance_ = new SceneUIAudio();
  ButtonClickAudioInfo::default_instance_->InitAsDefaultInstance();
  SceneUIAudio::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fSceneUIAudio_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fSceneUIAudio_2eproto {
  StaticDescriptorInitializer_module_2fSceneUIAudio_2eproto() {
    protobuf_AddDesc_module_2fSceneUIAudio_2eproto();
  }
} static_descriptor_initializer_module_2fSceneUIAudio_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ButtonClickAudioInfo::kComponentNameFieldNumber;
const int ButtonClickAudioInfo::kDownAduioInfoFieldNumber;
const int ButtonClickAudioInfo::kUpAudioInfoFieldNumber;
#endif  // !_MSC_VER

ButtonClickAudioInfo::ButtonClickAudioInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ButtonClickAudioInfo)
}

void ButtonClickAudioInfo::InitAsDefaultInstance() {
  downaduioinfo_ = const_cast< ::pb::AudioInfo*>(&::pb::AudioInfo::default_instance());
  upaudioinfo_ = const_cast< ::pb::AudioInfo*>(&::pb::AudioInfo::default_instance());
}

ButtonClickAudioInfo::ButtonClickAudioInfo(const ButtonClickAudioInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.ButtonClickAudioInfo)
}

void ButtonClickAudioInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  componentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downaduioinfo_ = NULL;
  upaudioinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ButtonClickAudioInfo::~ButtonClickAudioInfo() {
  // @@protoc_insertion_point(destructor:pb.ButtonClickAudioInfo)
  SharedDtor();
}

void ButtonClickAudioInfo::SharedDtor() {
  if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentname_;
  }
  if (this != default_instance_) {
    delete downaduioinfo_;
    delete upaudioinfo_;
  }
}

void ButtonClickAudioInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ButtonClickAudioInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ButtonClickAudioInfo_descriptor_;
}

const ButtonClickAudioInfo& ButtonClickAudioInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneUIAudio_2eproto();
  return *default_instance_;
}

ButtonClickAudioInfo* ButtonClickAudioInfo::default_instance_ = NULL;

ButtonClickAudioInfo* ButtonClickAudioInfo::New() const {
  return new ButtonClickAudioInfo;
}

void ButtonClickAudioInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_componentname()) {
      if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        componentname_->clear();
      }
    }
    if (has_downaduioinfo()) {
      if (downaduioinfo_ != NULL) downaduioinfo_->::pb::AudioInfo::Clear();
    }
    if (has_upaudioinfo()) {
      if (upaudioinfo_ != NULL) upaudioinfo_->::pb::AudioInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ButtonClickAudioInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ButtonClickAudioInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ComponentName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->componentname().data(), this->componentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "componentname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DownAduioInfo;
        break;
      }

      // optional .pb.AudioInfo DownAduioInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_DownAduioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_downaduioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UpAudioInfo;
        break;
      }

      // optional .pb.AudioInfo UpAudioInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_UpAudioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upaudioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ButtonClickAudioInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ButtonClickAudioInfo)
  return false;
#undef DO_
}

void ButtonClickAudioInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ButtonClickAudioInfo)
  // optional string ComponentName = 1;
  if (has_componentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->componentname().data(), this->componentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "componentname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->componentname(), output);
  }

  // optional .pb.AudioInfo DownAduioInfo = 2;
  if (has_downaduioinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->downaduioinfo(), output);
  }

  // optional .pb.AudioInfo UpAudioInfo = 3;
  if (has_upaudioinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->upaudioinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ButtonClickAudioInfo)
}

::google::protobuf::uint8* ButtonClickAudioInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ButtonClickAudioInfo)
  // optional string ComponentName = 1;
  if (has_componentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->componentname().data(), this->componentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "componentname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->componentname(), target);
  }

  // optional .pb.AudioInfo DownAduioInfo = 2;
  if (has_downaduioinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->downaduioinfo(), target);
  }

  // optional .pb.AudioInfo UpAudioInfo = 3;
  if (has_upaudioinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->upaudioinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ButtonClickAudioInfo)
  return target;
}

int ButtonClickAudioInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ComponentName = 1;
    if (has_componentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentname());
    }

    // optional .pb.AudioInfo DownAduioInfo = 2;
    if (has_downaduioinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->downaduioinfo());
    }

    // optional .pb.AudioInfo UpAudioInfo = 3;
    if (has_upaudioinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upaudioinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ButtonClickAudioInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ButtonClickAudioInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ButtonClickAudioInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ButtonClickAudioInfo::MergeFrom(const ButtonClickAudioInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componentname()) {
      set_componentname(from.componentname());
    }
    if (from.has_downaduioinfo()) {
      mutable_downaduioinfo()->::pb::AudioInfo::MergeFrom(from.downaduioinfo());
    }
    if (from.has_upaudioinfo()) {
      mutable_upaudioinfo()->::pb::AudioInfo::MergeFrom(from.upaudioinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ButtonClickAudioInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonClickAudioInfo::CopyFrom(const ButtonClickAudioInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonClickAudioInfo::IsInitialized() const {

  return true;
}

void ButtonClickAudioInfo::Swap(ButtonClickAudioInfo* other) {
  if (other != this) {
    std::swap(componentname_, other->componentname_);
    std::swap(downaduioinfo_, other->downaduioinfo_);
    std::swap(upaudioinfo_, other->upaudioinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ButtonClickAudioInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ButtonClickAudioInfo_descriptor_;
  metadata.reflection = ButtonClickAudioInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneUIAudio::kIdFieldNumber;
const int SceneUIAudio::kSceneUINameFieldNumber;
const int SceneUIAudio::kButtonClickAudioInfoFieldNumber;
#endif  // !_MSC_VER

SceneUIAudio::SceneUIAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SceneUIAudio)
}

void SceneUIAudio::InitAsDefaultInstance() {
}

SceneUIAudio::SceneUIAudio(const SceneUIAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SceneUIAudio)
}

void SceneUIAudio::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  sceneuiname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneUIAudio::~SceneUIAudio() {
  // @@protoc_insertion_point(destructor:pb.SceneUIAudio)
  SharedDtor();
}

void SceneUIAudio::SharedDtor() {
  if (sceneuiname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneuiname_;
  }
  if (this != default_instance_) {
  }
}

void SceneUIAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneUIAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneUIAudio_descriptor_;
}

const SceneUIAudio& SceneUIAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneUIAudio_2eproto();
  return *default_instance_;
}

SceneUIAudio* SceneUIAudio::default_instance_ = NULL;

SceneUIAudio* SceneUIAudio::New() const {
  return new SceneUIAudio;
}

void SceneUIAudio::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_sceneuiname()) {
      if (sceneuiname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sceneuiname_->clear();
      }
    }
  }
  buttonclickaudioinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneUIAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SceneUIAudio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SceneUIName;
        break;
      }

      // optional string SceneUIName = 2;
      case 2: {
        if (tag == 18) {
         parse_SceneUIName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneuiname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sceneuiname().data(), this->sceneuiname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sceneuiname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ButtonClickAudioInfo;
        break;
      }

      // repeated .pb.ButtonClickAudioInfo ButtonClickAudioInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_ButtonClickAudioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buttonclickaudioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ButtonClickAudioInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SceneUIAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SceneUIAudio)
  return false;
#undef DO_
}

void SceneUIAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SceneUIAudio)
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string SceneUIName = 2;
  if (has_sceneuiname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneuiname().data(), this->sceneuiname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneuiname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sceneuiname(), output);
  }

  // repeated .pb.ButtonClickAudioInfo ButtonClickAudioInfo = 7;
  for (int i = 0; i < this->buttonclickaudioinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->buttonclickaudioinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SceneUIAudio)
}

::google::protobuf::uint8* SceneUIAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SceneUIAudio)
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string SceneUIName = 2;
  if (has_sceneuiname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneuiname().data(), this->sceneuiname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneuiname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sceneuiname(), target);
  }

  // repeated .pb.ButtonClickAudioInfo ButtonClickAudioInfo = 7;
  for (int i = 0; i < this->buttonclickaudioinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->buttonclickaudioinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SceneUIAudio)
  return target;
}

int SceneUIAudio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string SceneUIName = 2;
    if (has_sceneuiname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sceneuiname());
    }

  }
  // repeated .pb.ButtonClickAudioInfo ButtonClickAudioInfo = 7;
  total_size += 1 * this->buttonclickaudioinfo_size();
  for (int i = 0; i < this->buttonclickaudioinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buttonclickaudioinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneUIAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneUIAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneUIAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneUIAudio::MergeFrom(const SceneUIAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  buttonclickaudioinfo_.MergeFrom(from.buttonclickaudioinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sceneuiname()) {
      set_sceneuiname(from.sceneuiname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneUIAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneUIAudio::CopyFrom(const SceneUIAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneUIAudio::IsInitialized() const {

  return true;
}

void SceneUIAudio::Swap(SceneUIAudio* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(sceneuiname_, other->sceneuiname_);
    buttonclickaudioinfo_.Swap(&other->buttonclickaudioinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneUIAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneUIAudio_descriptor_;
  metadata.reflection = SceneUIAudio_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
