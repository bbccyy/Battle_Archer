// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/HeroTitle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/HeroTitle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* THeroTitleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroTitleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroTitleGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroTitleGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroTitleActiveTitleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroTitleActiveTitleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroTitleEquipTitleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroTitleEquipTitleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroTitleChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroTitleChangeNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fHeroTitle_2eproto() {
  protobuf_AddDesc_net_2fHeroTitle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/HeroTitle.proto");
  GOOGLE_CHECK(file != NULL);
  THeroTitleInfo_descriptor_ = file->message_type(0);
  static const int THeroTitleInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleInfo, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleInfo, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleInfo, arractivetitleid_),
  };
  THeroTitleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroTitleInfo_descriptor_,
      THeroTitleInfo::default_instance_,
      THeroTitleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroTitleInfo));
  THeroTitleGetInfoRsp_descriptor_ = file->message_type(1);
  static const int THeroTitleGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleGetInfoRsp, arrherotitleinfo_),
  };
  THeroTitleGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroTitleGetInfoRsp_descriptor_,
      THeroTitleGetInfoRsp::default_instance_,
      THeroTitleGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroTitleGetInfoRsp));
  THeroTitleActiveTitleReq_descriptor_ = file->message_type(2);
  static const int THeroTitleActiveTitleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleActiveTitleReq, titleid_),
  };
  THeroTitleActiveTitleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroTitleActiveTitleReq_descriptor_,
      THeroTitleActiveTitleReq::default_instance_,
      THeroTitleActiveTitleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleActiveTitleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleActiveTitleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroTitleActiveTitleReq));
  THeroTitleEquipTitleReq_descriptor_ = file->message_type(3);
  static const int THeroTitleEquipTitleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleEquipTitleReq, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleEquipTitleReq, titleid_),
  };
  THeroTitleEquipTitleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroTitleEquipTitleReq_descriptor_,
      THeroTitleEquipTitleReq::default_instance_,
      THeroTitleEquipTitleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleEquipTitleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleEquipTitleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroTitleEquipTitleReq));
  THeroTitleChangeNotify_descriptor_ = file->message_type(4);
  static const int THeroTitleChangeNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleChangeNotify, arrherotitleinfo_),
  };
  THeroTitleChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroTitleChangeNotify_descriptor_,
      THeroTitleChangeNotify::default_instance_,
      THeroTitleChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroTitleChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroTitleChangeNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fHeroTitle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroTitleInfo_descriptor_, &THeroTitleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroTitleGetInfoRsp_descriptor_, &THeroTitleGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroTitleActiveTitleReq_descriptor_, &THeroTitleActiveTitleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroTitleEquipTitleReq_descriptor_, &THeroTitleEquipTitleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroTitleChangeNotify_descriptor_, &THeroTitleChangeNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fHeroTitle_2eproto() {
  delete THeroTitleInfo::default_instance_;
  delete THeroTitleInfo_reflection_;
  delete THeroTitleGetInfoRsp::default_instance_;
  delete THeroTitleGetInfoRsp_reflection_;
  delete THeroTitleActiveTitleReq::default_instance_;
  delete THeroTitleActiveTitleReq_reflection_;
  delete THeroTitleEquipTitleReq::default_instance_;
  delete THeroTitleEquipTitleReq_reflection_;
  delete THeroTitleChangeNotify::default_instance_;
  delete THeroTitleChangeNotify_reflection_;
}

void protobuf_AddDesc_net_2fHeroTitle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/HeroTitle.proto\022\002pb\"L\n\016THeroTitleI"
    "nfo\022\017\n\007ModelId\030\001 \001(\r\022\017\n\007TitleId\030\002 \001(\r\022\030\n"
    "\020ArrActiveTitleId\030\003 \003(\r\"D\n\024THeroTitleGet"
    "InfoRsp\022,\n\020ArrHeroTitleInfo\030\001 \003(\0132\022.pb.T"
    "HeroTitleInfo\"+\n\030THeroTitleActiveTitleRe"
    "q\022\017\n\007TitleId\030\001 \001(\r\"7\n\027THeroTitleEquipTit"
    "leReq\022\013\n\003Hid\030\001 \001(\r\022\017\n\007TitleId\030\002 \001(\r\"F\n\026T"
    "HeroTitleChangeNotify\022,\n\020ArrHeroTitleInf"
    "o\030\001 \003(\0132\022.pb.THeroTitleInfo", 347);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/HeroTitle.proto", &protobuf_RegisterTypes);
  THeroTitleInfo::default_instance_ = new THeroTitleInfo();
  THeroTitleGetInfoRsp::default_instance_ = new THeroTitleGetInfoRsp();
  THeroTitleActiveTitleReq::default_instance_ = new THeroTitleActiveTitleReq();
  THeroTitleEquipTitleReq::default_instance_ = new THeroTitleEquipTitleReq();
  THeroTitleChangeNotify::default_instance_ = new THeroTitleChangeNotify();
  THeroTitleInfo::default_instance_->InitAsDefaultInstance();
  THeroTitleGetInfoRsp::default_instance_->InitAsDefaultInstance();
  THeroTitleActiveTitleReq::default_instance_->InitAsDefaultInstance();
  THeroTitleEquipTitleReq::default_instance_->InitAsDefaultInstance();
  THeroTitleChangeNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fHeroTitle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fHeroTitle_2eproto {
  StaticDescriptorInitializer_net_2fHeroTitle_2eproto() {
    protobuf_AddDesc_net_2fHeroTitle_2eproto();
  }
} static_descriptor_initializer_net_2fHeroTitle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int THeroTitleInfo::kModelIdFieldNumber;
const int THeroTitleInfo::kTitleIdFieldNumber;
const int THeroTitleInfo::kArrActiveTitleIdFieldNumber;
#endif  // !_MSC_VER

THeroTitleInfo::THeroTitleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroTitleInfo)
}

void THeroTitleInfo::InitAsDefaultInstance() {
}

THeroTitleInfo::THeroTitleInfo(const THeroTitleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroTitleInfo)
}

void THeroTitleInfo::SharedCtor() {
  _cached_size_ = 0;
  modelid_ = 0u;
  titleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroTitleInfo::~THeroTitleInfo() {
  // @@protoc_insertion_point(destructor:pb.THeroTitleInfo)
  SharedDtor();
}

void THeroTitleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroTitleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroTitleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroTitleInfo_descriptor_;
}

const THeroTitleInfo& THeroTitleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroTitle_2eproto();
  return *default_instance_;
}

THeroTitleInfo* THeroTitleInfo::default_instance_ = NULL;

THeroTitleInfo* THeroTitleInfo::New() const {
  return new THeroTitleInfo;
}

void THeroTitleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<THeroTitleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(modelid_, titleid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  arractivetitleid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroTitleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroTitleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ModelId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TitleId;
        break;
      }

      // optional uint32 TitleId = 2;
      case 2: {
        if (tag == 16) {
         parse_TitleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ArrActiveTitleId;
        break;
      }

      // repeated uint32 ArrActiveTitleId = 3;
      case 3: {
        if (tag == 24) {
         parse_ArrActiveTitleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_arractivetitleid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arractivetitleid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ArrActiveTitleId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroTitleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroTitleInfo)
  return false;
#undef DO_
}

void THeroTitleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroTitleInfo)
  // optional uint32 ModelId = 1;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->modelid(), output);
  }

  // optional uint32 TitleId = 2;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->titleid(), output);
  }

  // repeated uint32 ArrActiveTitleId = 3;
  for (int i = 0; i < this->arractivetitleid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->arractivetitleid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroTitleInfo)
}

::google::protobuf::uint8* THeroTitleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroTitleInfo)
  // optional uint32 ModelId = 1;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->modelid(), target);
  }

  // optional uint32 TitleId = 2;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->titleid(), target);
  }

  // repeated uint32 ArrActiveTitleId = 3;
  for (int i = 0; i < this->arractivetitleid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->arractivetitleid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroTitleInfo)
  return target;
}

int THeroTitleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ModelId = 1;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modelid());
    }

    // optional uint32 TitleId = 2;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->titleid());
    }

  }
  // repeated uint32 ArrActiveTitleId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->arractivetitleid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arractivetitleid(i));
    }
    total_size += 1 * this->arractivetitleid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroTitleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroTitleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroTitleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroTitleInfo::MergeFrom(const THeroTitleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arractivetitleid_.MergeFrom(from.arractivetitleid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroTitleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroTitleInfo::CopyFrom(const THeroTitleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroTitleInfo::IsInitialized() const {

  return true;
}

void THeroTitleInfo::Swap(THeroTitleInfo* other) {
  if (other != this) {
    std::swap(modelid_, other->modelid_);
    std::swap(titleid_, other->titleid_);
    arractivetitleid_.Swap(&other->arractivetitleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroTitleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroTitleInfo_descriptor_;
  metadata.reflection = THeroTitleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroTitleGetInfoRsp::kArrHeroTitleInfoFieldNumber;
#endif  // !_MSC_VER

THeroTitleGetInfoRsp::THeroTitleGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroTitleGetInfoRsp)
}

void THeroTitleGetInfoRsp::InitAsDefaultInstance() {
}

THeroTitleGetInfoRsp::THeroTitleGetInfoRsp(const THeroTitleGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroTitleGetInfoRsp)
}

void THeroTitleGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroTitleGetInfoRsp::~THeroTitleGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.THeroTitleGetInfoRsp)
  SharedDtor();
}

void THeroTitleGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroTitleGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroTitleGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroTitleGetInfoRsp_descriptor_;
}

const THeroTitleGetInfoRsp& THeroTitleGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroTitle_2eproto();
  return *default_instance_;
}

THeroTitleGetInfoRsp* THeroTitleGetInfoRsp::default_instance_ = NULL;

THeroTitleGetInfoRsp* THeroTitleGetInfoRsp::New() const {
  return new THeroTitleGetInfoRsp;
}

void THeroTitleGetInfoRsp::Clear() {
  arrherotitleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroTitleGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroTitleGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.THeroTitleInfo ArrHeroTitleInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrHeroTitleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrherotitleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrHeroTitleInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroTitleGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroTitleGetInfoRsp)
  return false;
#undef DO_
}

void THeroTitleGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroTitleGetInfoRsp)
  // repeated .pb.THeroTitleInfo ArrHeroTitleInfo = 1;
  for (int i = 0; i < this->arrherotitleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrherotitleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroTitleGetInfoRsp)
}

::google::protobuf::uint8* THeroTitleGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroTitleGetInfoRsp)
  // repeated .pb.THeroTitleInfo ArrHeroTitleInfo = 1;
  for (int i = 0; i < this->arrherotitleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrherotitleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroTitleGetInfoRsp)
  return target;
}

int THeroTitleGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.THeroTitleInfo ArrHeroTitleInfo = 1;
  total_size += 1 * this->arrherotitleinfo_size();
  for (int i = 0; i < this->arrherotitleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrherotitleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroTitleGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroTitleGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroTitleGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroTitleGetInfoRsp::MergeFrom(const THeroTitleGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrherotitleinfo_.MergeFrom(from.arrherotitleinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroTitleGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroTitleGetInfoRsp::CopyFrom(const THeroTitleGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroTitleGetInfoRsp::IsInitialized() const {

  return true;
}

void THeroTitleGetInfoRsp::Swap(THeroTitleGetInfoRsp* other) {
  if (other != this) {
    arrherotitleinfo_.Swap(&other->arrherotitleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroTitleGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroTitleGetInfoRsp_descriptor_;
  metadata.reflection = THeroTitleGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroTitleActiveTitleReq::kTitleIdFieldNumber;
#endif  // !_MSC_VER

THeroTitleActiveTitleReq::THeroTitleActiveTitleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroTitleActiveTitleReq)
}

void THeroTitleActiveTitleReq::InitAsDefaultInstance() {
}

THeroTitleActiveTitleReq::THeroTitleActiveTitleReq(const THeroTitleActiveTitleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroTitleActiveTitleReq)
}

void THeroTitleActiveTitleReq::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroTitleActiveTitleReq::~THeroTitleActiveTitleReq() {
  // @@protoc_insertion_point(destructor:pb.THeroTitleActiveTitleReq)
  SharedDtor();
}

void THeroTitleActiveTitleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroTitleActiveTitleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroTitleActiveTitleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroTitleActiveTitleReq_descriptor_;
}

const THeroTitleActiveTitleReq& THeroTitleActiveTitleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroTitle_2eproto();
  return *default_instance_;
}

THeroTitleActiveTitleReq* THeroTitleActiveTitleReq::default_instance_ = NULL;

THeroTitleActiveTitleReq* THeroTitleActiveTitleReq::New() const {
  return new THeroTitleActiveTitleReq;
}

void THeroTitleActiveTitleReq::Clear() {
  titleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroTitleActiveTitleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroTitleActiveTitleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TitleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroTitleActiveTitleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroTitleActiveTitleReq)
  return false;
#undef DO_
}

void THeroTitleActiveTitleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroTitleActiveTitleReq)
  // optional uint32 TitleId = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->titleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroTitleActiveTitleReq)
}

::google::protobuf::uint8* THeroTitleActiveTitleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroTitleActiveTitleReq)
  // optional uint32 TitleId = 1;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->titleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroTitleActiveTitleReq)
  return target;
}

int THeroTitleActiveTitleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TitleId = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->titleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroTitleActiveTitleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroTitleActiveTitleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroTitleActiveTitleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroTitleActiveTitleReq::MergeFrom(const THeroTitleActiveTitleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroTitleActiveTitleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroTitleActiveTitleReq::CopyFrom(const THeroTitleActiveTitleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroTitleActiveTitleReq::IsInitialized() const {

  return true;
}

void THeroTitleActiveTitleReq::Swap(THeroTitleActiveTitleReq* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroTitleActiveTitleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroTitleActiveTitleReq_descriptor_;
  metadata.reflection = THeroTitleActiveTitleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroTitleEquipTitleReq::kHidFieldNumber;
const int THeroTitleEquipTitleReq::kTitleIdFieldNumber;
#endif  // !_MSC_VER

THeroTitleEquipTitleReq::THeroTitleEquipTitleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroTitleEquipTitleReq)
}

void THeroTitleEquipTitleReq::InitAsDefaultInstance() {
}

THeroTitleEquipTitleReq::THeroTitleEquipTitleReq(const THeroTitleEquipTitleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroTitleEquipTitleReq)
}

void THeroTitleEquipTitleReq::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  titleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroTitleEquipTitleReq::~THeroTitleEquipTitleReq() {
  // @@protoc_insertion_point(destructor:pb.THeroTitleEquipTitleReq)
  SharedDtor();
}

void THeroTitleEquipTitleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroTitleEquipTitleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroTitleEquipTitleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroTitleEquipTitleReq_descriptor_;
}

const THeroTitleEquipTitleReq& THeroTitleEquipTitleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroTitle_2eproto();
  return *default_instance_;
}

THeroTitleEquipTitleReq* THeroTitleEquipTitleReq::default_instance_ = NULL;

THeroTitleEquipTitleReq* THeroTitleEquipTitleReq::New() const {
  return new THeroTitleEquipTitleReq;
}

void THeroTitleEquipTitleReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<THeroTitleEquipTitleReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hid_, titleid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroTitleEquipTitleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroTitleEquipTitleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TitleId;
        break;
      }

      // optional uint32 TitleId = 2;
      case 2: {
        if (tag == 16) {
         parse_TitleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroTitleEquipTitleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroTitleEquipTitleReq)
  return false;
#undef DO_
}

void THeroTitleEquipTitleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroTitleEquipTitleReq)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 TitleId = 2;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->titleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroTitleEquipTitleReq)
}

::google::protobuf::uint8* THeroTitleEquipTitleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroTitleEquipTitleReq)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 TitleId = 2;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->titleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroTitleEquipTitleReq)
  return target;
}

int THeroTitleEquipTitleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 TitleId = 2;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->titleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroTitleEquipTitleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroTitleEquipTitleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroTitleEquipTitleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroTitleEquipTitleReq::MergeFrom(const THeroTitleEquipTitleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroTitleEquipTitleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroTitleEquipTitleReq::CopyFrom(const THeroTitleEquipTitleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroTitleEquipTitleReq::IsInitialized() const {

  return true;
}

void THeroTitleEquipTitleReq::Swap(THeroTitleEquipTitleReq* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(titleid_, other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroTitleEquipTitleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroTitleEquipTitleReq_descriptor_;
  metadata.reflection = THeroTitleEquipTitleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroTitleChangeNotify::kArrHeroTitleInfoFieldNumber;
#endif  // !_MSC_VER

THeroTitleChangeNotify::THeroTitleChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroTitleChangeNotify)
}

void THeroTitleChangeNotify::InitAsDefaultInstance() {
}

THeroTitleChangeNotify::THeroTitleChangeNotify(const THeroTitleChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroTitleChangeNotify)
}

void THeroTitleChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroTitleChangeNotify::~THeroTitleChangeNotify() {
  // @@protoc_insertion_point(destructor:pb.THeroTitleChangeNotify)
  SharedDtor();
}

void THeroTitleChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroTitleChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroTitleChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroTitleChangeNotify_descriptor_;
}

const THeroTitleChangeNotify& THeroTitleChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroTitle_2eproto();
  return *default_instance_;
}

THeroTitleChangeNotify* THeroTitleChangeNotify::default_instance_ = NULL;

THeroTitleChangeNotify* THeroTitleChangeNotify::New() const {
  return new THeroTitleChangeNotify;
}

void THeroTitleChangeNotify::Clear() {
  arrherotitleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroTitleChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroTitleChangeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.THeroTitleInfo ArrHeroTitleInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrHeroTitleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrherotitleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrHeroTitleInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroTitleChangeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroTitleChangeNotify)
  return false;
#undef DO_
}

void THeroTitleChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroTitleChangeNotify)
  // repeated .pb.THeroTitleInfo ArrHeroTitleInfo = 1;
  for (int i = 0; i < this->arrherotitleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrherotitleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroTitleChangeNotify)
}

::google::protobuf::uint8* THeroTitleChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroTitleChangeNotify)
  // repeated .pb.THeroTitleInfo ArrHeroTitleInfo = 1;
  for (int i = 0; i < this->arrherotitleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrherotitleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroTitleChangeNotify)
  return target;
}

int THeroTitleChangeNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.THeroTitleInfo ArrHeroTitleInfo = 1;
  total_size += 1 * this->arrherotitleinfo_size();
  for (int i = 0; i < this->arrherotitleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrherotitleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroTitleChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroTitleChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroTitleChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroTitleChangeNotify::MergeFrom(const THeroTitleChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrherotitleinfo_.MergeFrom(from.arrherotitleinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroTitleChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroTitleChangeNotify::CopyFrom(const THeroTitleChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroTitleChangeNotify::IsInitialized() const {

  return true;
}

void THeroTitleChangeNotify::Swap(THeroTitleChangeNotify* other) {
  if (other != this) {
    arrherotitleinfo_.Swap(&other->arrherotitleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroTitleChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroTitleChangeNotify_descriptor_;
  metadata.reflection = THeroTitleChangeNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
