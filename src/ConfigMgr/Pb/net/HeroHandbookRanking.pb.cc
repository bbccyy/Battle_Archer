// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/HeroHandbookRanking.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/HeroHandbookRanking.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* THeroHandbookRankingRankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroHandbookRankingRankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroHandbookRankingTakeRewardRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroHandbookRankingTakeRewardRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroHandbookRankingTakeRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroHandbookRankingTakeRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroHandbookRankingRankRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroHandbookRankingRankRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroHandbookRankingGetRankRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroHandbookRankingGetRankRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroHandbookRankingEntranceCloseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroHandbookRankingEntranceCloseReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fHeroHandbookRanking_2eproto() {
  protobuf_AddDesc_net_2fHeroHandbookRanking_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/HeroHandbookRanking.proto");
  GOOGLE_CHECK(file != NULL);
  THeroHandbookRankingRankItem_descriptor_ = file->message_type(0);
  static const int THeroHandbookRankingRankItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingRankItem, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingRankItem, handbooknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingRankItem, changetime_),
  };
  THeroHandbookRankingRankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroHandbookRankingRankItem_descriptor_,
      THeroHandbookRankingRankItem::default_instance_,
      THeroHandbookRankingRankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingRankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingRankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroHandbookRankingRankItem));
  THeroHandbookRankingTakeRewardRecordRsp_descriptor_ = file->message_type(1);
  static const int THeroHandbookRankingTakeRewardRecordRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingTakeRewardRecordRsp, takearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingTakeRewardRecordRsp, handbooknum_),
  };
  THeroHandbookRankingTakeRewardRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroHandbookRankingTakeRewardRecordRsp_descriptor_,
      THeroHandbookRankingTakeRewardRecordRsp::default_instance_,
      THeroHandbookRankingTakeRewardRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingTakeRewardRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingTakeRewardRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroHandbookRankingTakeRewardRecordRsp));
  THeroHandbookRankingTakeRewardReq_descriptor_ = file->message_type(2);
  static const int THeroHandbookRankingTakeRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingTakeRewardReq, rewardid_),
  };
  THeroHandbookRankingTakeRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroHandbookRankingTakeRewardReq_descriptor_,
      THeroHandbookRankingTakeRewardReq::default_instance_,
      THeroHandbookRankingTakeRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingTakeRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingTakeRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroHandbookRankingTakeRewardReq));
  THeroHandbookRankingRankRewardInfo_descriptor_ = file->message_type(3);
  static const int THeroHandbookRankingRankRewardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingRankRewardInfo, rankinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingRankRewardInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingRankRewardInfo, count_),
  };
  THeroHandbookRankingRankRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroHandbookRankingRankRewardInfo_descriptor_,
      THeroHandbookRankingRankRewardInfo::default_instance_,
      THeroHandbookRankingRankRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingRankRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingRankRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroHandbookRankingRankRewardInfo));
  THeroHandbookRankingGetRankRewardRsp_descriptor_ = file->message_type(4);
  static const int THeroHandbookRankingGetRankRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingGetRankRewardRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingGetRankRewardRsp, rankrewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingGetRankRewardRsp, herohandbooknum_),
  };
  THeroHandbookRankingGetRankRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroHandbookRankingGetRankRewardRsp_descriptor_,
      THeroHandbookRankingGetRankRewardRsp::default_instance_,
      THeroHandbookRankingGetRankRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingGetRankRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingGetRankRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroHandbookRankingGetRankRewardRsp));
  THeroHandbookRankingEntranceCloseReq_descriptor_ = file->message_type(5);
  static const int THeroHandbookRankingEntranceCloseReq_offsets_[1] = {
  };
  THeroHandbookRankingEntranceCloseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroHandbookRankingEntranceCloseReq_descriptor_,
      THeroHandbookRankingEntranceCloseReq::default_instance_,
      THeroHandbookRankingEntranceCloseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingEntranceCloseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroHandbookRankingEntranceCloseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroHandbookRankingEntranceCloseReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fHeroHandbookRanking_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroHandbookRankingRankItem_descriptor_, &THeroHandbookRankingRankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroHandbookRankingTakeRewardRecordRsp_descriptor_, &THeroHandbookRankingTakeRewardRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroHandbookRankingTakeRewardReq_descriptor_, &THeroHandbookRankingTakeRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroHandbookRankingRankRewardInfo_descriptor_, &THeroHandbookRankingRankRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroHandbookRankingGetRankRewardRsp_descriptor_, &THeroHandbookRankingGetRankRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroHandbookRankingEntranceCloseReq_descriptor_, &THeroHandbookRankingEntranceCloseReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fHeroHandbookRanking_2eproto() {
  delete THeroHandbookRankingRankItem::default_instance_;
  delete THeroHandbookRankingRankItem_reflection_;
  delete THeroHandbookRankingTakeRewardRecordRsp::default_instance_;
  delete THeroHandbookRankingTakeRewardRecordRsp_reflection_;
  delete THeroHandbookRankingTakeRewardReq::default_instance_;
  delete THeroHandbookRankingTakeRewardReq_reflection_;
  delete THeroHandbookRankingRankRewardInfo::default_instance_;
  delete THeroHandbookRankingRankRewardInfo_reflection_;
  delete THeroHandbookRankingGetRankRewardRsp::default_instance_;
  delete THeroHandbookRankingGetRankRewardRsp_reflection_;
  delete THeroHandbookRankingEntranceCloseReq::default_instance_;
  delete THeroHandbookRankingEntranceCloseReq_reflection_;
}

void protobuf_AddDesc_net_2fHeroHandbookRanking_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035net/HeroHandbookRanking.proto\022\002pb\032\016net"
    "/User.proto\"n\n\034THeroHandbookRankingRankI"
    "tem\022%\n\010UserInfo\030\001 \001(\0132\023.pb.TUserSimpleIn"
    "fo\022\023\n\013HandbookNum\030\002 \001(\r\022\022\n\nChangeTime\030\003 "
    "\001(\004\"O\n\'THeroHandbookRankingTakeRewardRec"
    "ordRsp\022\017\n\007TakeArr\030\001 \003(\005\022\023\n\013HandbookNum\030\002"
    " \001(\r\"5\n!THeroHandbookRankingTakeRewardRe"
    "q\022\020\n\010RewardId\030\001 \001(\005\"u\n\"THeroHandbookRank"
    "ingRankRewardInfo\0222\n\010RankInfo\030\001 \001(\0132 .pb"
    ".THeroHandbookRankingRankItem\022\014\n\004Rank\030\002 "
    "\001(\005\022\r\n\005Count\030\003 \001(\005\"\214\001\n$THeroHandbookRank"
    "ingGetRankRewardRsp\022\014\n\004Rank\030\001 \001(\005\022=\n\rRan"
    "kRewardArr\030\002 \003(\0132&.pb.THeroHandbookRanki"
    "ngRankRewardInfo\022\027\n\017HeroHandbookNum\030\003 \001("
    "\r\"&\n$THeroHandbookRankingEntranceCloseRe"
    "q", 601);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/HeroHandbookRanking.proto", &protobuf_RegisterTypes);
  THeroHandbookRankingRankItem::default_instance_ = new THeroHandbookRankingRankItem();
  THeroHandbookRankingTakeRewardRecordRsp::default_instance_ = new THeroHandbookRankingTakeRewardRecordRsp();
  THeroHandbookRankingTakeRewardReq::default_instance_ = new THeroHandbookRankingTakeRewardReq();
  THeroHandbookRankingRankRewardInfo::default_instance_ = new THeroHandbookRankingRankRewardInfo();
  THeroHandbookRankingGetRankRewardRsp::default_instance_ = new THeroHandbookRankingGetRankRewardRsp();
  THeroHandbookRankingEntranceCloseReq::default_instance_ = new THeroHandbookRankingEntranceCloseReq();
  THeroHandbookRankingRankItem::default_instance_->InitAsDefaultInstance();
  THeroHandbookRankingTakeRewardRecordRsp::default_instance_->InitAsDefaultInstance();
  THeroHandbookRankingTakeRewardReq::default_instance_->InitAsDefaultInstance();
  THeroHandbookRankingRankRewardInfo::default_instance_->InitAsDefaultInstance();
  THeroHandbookRankingGetRankRewardRsp::default_instance_->InitAsDefaultInstance();
  THeroHandbookRankingEntranceCloseReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fHeroHandbookRanking_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fHeroHandbookRanking_2eproto {
  StaticDescriptorInitializer_net_2fHeroHandbookRanking_2eproto() {
    protobuf_AddDesc_net_2fHeroHandbookRanking_2eproto();
  }
} static_descriptor_initializer_net_2fHeroHandbookRanking_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int THeroHandbookRankingRankItem::kUserInfoFieldNumber;
const int THeroHandbookRankingRankItem::kHandbookNumFieldNumber;
const int THeroHandbookRankingRankItem::kChangeTimeFieldNumber;
#endif  // !_MSC_VER

THeroHandbookRankingRankItem::THeroHandbookRankingRankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroHandbookRankingRankItem)
}

void THeroHandbookRankingRankItem::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

THeroHandbookRankingRankItem::THeroHandbookRankingRankItem(const THeroHandbookRankingRankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroHandbookRankingRankItem)
}

void THeroHandbookRankingRankItem::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  handbooknum_ = 0u;
  changetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroHandbookRankingRankItem::~THeroHandbookRankingRankItem() {
  // @@protoc_insertion_point(destructor:pb.THeroHandbookRankingRankItem)
  SharedDtor();
}

void THeroHandbookRankingRankItem::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void THeroHandbookRankingRankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroHandbookRankingRankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroHandbookRankingRankItem_descriptor_;
}

const THeroHandbookRankingRankItem& THeroHandbookRankingRankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroHandbookRanking_2eproto();
  return *default_instance_;
}

THeroHandbookRankingRankItem* THeroHandbookRankingRankItem::default_instance_ = NULL;

THeroHandbookRankingRankItem* THeroHandbookRankingRankItem::New() const {
  return new THeroHandbookRankingRankItem;
}

void THeroHandbookRankingRankItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<THeroHandbookRankingRankItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(changetime_, handbooknum_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroHandbookRankingRankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroHandbookRankingRankItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HandbookNum;
        break;
      }

      // optional uint32 HandbookNum = 2;
      case 2: {
        if (tag == 16) {
         parse_HandbookNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handbooknum_)));
          set_has_handbooknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ChangeTime;
        break;
      }

      // optional uint64 ChangeTime = 3;
      case 3: {
        if (tag == 24) {
         parse_ChangeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &changetime_)));
          set_has_changetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroHandbookRankingRankItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroHandbookRankingRankItem)
  return false;
#undef DO_
}

void THeroHandbookRankingRankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroHandbookRankingRankItem)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 HandbookNum = 2;
  if (has_handbooknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->handbooknum(), output);
  }

  // optional uint64 ChangeTime = 3;
  if (has_changetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->changetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroHandbookRankingRankItem)
}

::google::protobuf::uint8* THeroHandbookRankingRankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroHandbookRankingRankItem)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 HandbookNum = 2;
  if (has_handbooknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->handbooknum(), target);
  }

  // optional uint64 ChangeTime = 3;
  if (has_changetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->changetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroHandbookRankingRankItem)
  return target;
}

int THeroHandbookRankingRankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 HandbookNum = 2;
    if (has_handbooknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handbooknum());
    }

    // optional uint64 ChangeTime = 3;
    if (has_changetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->changetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroHandbookRankingRankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroHandbookRankingRankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroHandbookRankingRankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroHandbookRankingRankItem::MergeFrom(const THeroHandbookRankingRankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_handbooknum()) {
      set_handbooknum(from.handbooknum());
    }
    if (from.has_changetime()) {
      set_changetime(from.changetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroHandbookRankingRankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroHandbookRankingRankItem::CopyFrom(const THeroHandbookRankingRankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroHandbookRankingRankItem::IsInitialized() const {

  return true;
}

void THeroHandbookRankingRankItem::Swap(THeroHandbookRankingRankItem* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(handbooknum_, other->handbooknum_);
    std::swap(changetime_, other->changetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroHandbookRankingRankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroHandbookRankingRankItem_descriptor_;
  metadata.reflection = THeroHandbookRankingRankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroHandbookRankingTakeRewardRecordRsp::kTakeArrFieldNumber;
const int THeroHandbookRankingTakeRewardRecordRsp::kHandbookNumFieldNumber;
#endif  // !_MSC_VER

THeroHandbookRankingTakeRewardRecordRsp::THeroHandbookRankingTakeRewardRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroHandbookRankingTakeRewardRecordRsp)
}

void THeroHandbookRankingTakeRewardRecordRsp::InitAsDefaultInstance() {
}

THeroHandbookRankingTakeRewardRecordRsp::THeroHandbookRankingTakeRewardRecordRsp(const THeroHandbookRankingTakeRewardRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroHandbookRankingTakeRewardRecordRsp)
}

void THeroHandbookRankingTakeRewardRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  handbooknum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroHandbookRankingTakeRewardRecordRsp::~THeroHandbookRankingTakeRewardRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.THeroHandbookRankingTakeRewardRecordRsp)
  SharedDtor();
}

void THeroHandbookRankingTakeRewardRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroHandbookRankingTakeRewardRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroHandbookRankingTakeRewardRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroHandbookRankingTakeRewardRecordRsp_descriptor_;
}

const THeroHandbookRankingTakeRewardRecordRsp& THeroHandbookRankingTakeRewardRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroHandbookRanking_2eproto();
  return *default_instance_;
}

THeroHandbookRankingTakeRewardRecordRsp* THeroHandbookRankingTakeRewardRecordRsp::default_instance_ = NULL;

THeroHandbookRankingTakeRewardRecordRsp* THeroHandbookRankingTakeRewardRecordRsp::New() const {
  return new THeroHandbookRankingTakeRewardRecordRsp;
}

void THeroHandbookRankingTakeRewardRecordRsp::Clear() {
  handbooknum_ = 0u;
  takearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroHandbookRankingTakeRewardRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroHandbookRankingTakeRewardRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 TakeArr = 1;
      case 1: {
        if (tag == 8) {
         parse_TakeArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_takearr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_takearr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_TakeArr;
        if (input->ExpectTag(16)) goto parse_HandbookNum;
        break;
      }

      // optional uint32 HandbookNum = 2;
      case 2: {
        if (tag == 16) {
         parse_HandbookNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handbooknum_)));
          set_has_handbooknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroHandbookRankingTakeRewardRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroHandbookRankingTakeRewardRecordRsp)
  return false;
#undef DO_
}

void THeroHandbookRankingTakeRewardRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroHandbookRankingTakeRewardRecordRsp)
  // repeated int32 TakeArr = 1;
  for (int i = 0; i < this->takearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->takearr(i), output);
  }

  // optional uint32 HandbookNum = 2;
  if (has_handbooknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->handbooknum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroHandbookRankingTakeRewardRecordRsp)
}

::google::protobuf::uint8* THeroHandbookRankingTakeRewardRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroHandbookRankingTakeRewardRecordRsp)
  // repeated int32 TakeArr = 1;
  for (int i = 0; i < this->takearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->takearr(i), target);
  }

  // optional uint32 HandbookNum = 2;
  if (has_handbooknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->handbooknum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroHandbookRankingTakeRewardRecordRsp)
  return target;
}

int THeroHandbookRankingTakeRewardRecordRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 HandbookNum = 2;
    if (has_handbooknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handbooknum());
    }

  }
  // repeated int32 TakeArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->takearr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->takearr(i));
    }
    total_size += 1 * this->takearr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroHandbookRankingTakeRewardRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroHandbookRankingTakeRewardRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroHandbookRankingTakeRewardRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroHandbookRankingTakeRewardRecordRsp::MergeFrom(const THeroHandbookRankingTakeRewardRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  takearr_.MergeFrom(from.takearr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_handbooknum()) {
      set_handbooknum(from.handbooknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroHandbookRankingTakeRewardRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroHandbookRankingTakeRewardRecordRsp::CopyFrom(const THeroHandbookRankingTakeRewardRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroHandbookRankingTakeRewardRecordRsp::IsInitialized() const {

  return true;
}

void THeroHandbookRankingTakeRewardRecordRsp::Swap(THeroHandbookRankingTakeRewardRecordRsp* other) {
  if (other != this) {
    takearr_.Swap(&other->takearr_);
    std::swap(handbooknum_, other->handbooknum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroHandbookRankingTakeRewardRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroHandbookRankingTakeRewardRecordRsp_descriptor_;
  metadata.reflection = THeroHandbookRankingTakeRewardRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroHandbookRankingTakeRewardReq::kRewardIdFieldNumber;
#endif  // !_MSC_VER

THeroHandbookRankingTakeRewardReq::THeroHandbookRankingTakeRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroHandbookRankingTakeRewardReq)
}

void THeroHandbookRankingTakeRewardReq::InitAsDefaultInstance() {
}

THeroHandbookRankingTakeRewardReq::THeroHandbookRankingTakeRewardReq(const THeroHandbookRankingTakeRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroHandbookRankingTakeRewardReq)
}

void THeroHandbookRankingTakeRewardReq::SharedCtor() {
  _cached_size_ = 0;
  rewardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroHandbookRankingTakeRewardReq::~THeroHandbookRankingTakeRewardReq() {
  // @@protoc_insertion_point(destructor:pb.THeroHandbookRankingTakeRewardReq)
  SharedDtor();
}

void THeroHandbookRankingTakeRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroHandbookRankingTakeRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroHandbookRankingTakeRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroHandbookRankingTakeRewardReq_descriptor_;
}

const THeroHandbookRankingTakeRewardReq& THeroHandbookRankingTakeRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroHandbookRanking_2eproto();
  return *default_instance_;
}

THeroHandbookRankingTakeRewardReq* THeroHandbookRankingTakeRewardReq::default_instance_ = NULL;

THeroHandbookRankingTakeRewardReq* THeroHandbookRankingTakeRewardReq::New() const {
  return new THeroHandbookRankingTakeRewardReq;
}

void THeroHandbookRankingTakeRewardReq::Clear() {
  rewardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroHandbookRankingTakeRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroHandbookRankingTakeRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RewardId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroHandbookRankingTakeRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroHandbookRankingTakeRewardReq)
  return false;
#undef DO_
}

void THeroHandbookRankingTakeRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroHandbookRankingTakeRewardReq)
  // optional int32 RewardId = 1;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroHandbookRankingTakeRewardReq)
}

::google::protobuf::uint8* THeroHandbookRankingTakeRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroHandbookRankingTakeRewardReq)
  // optional int32 RewardId = 1;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroHandbookRankingTakeRewardReq)
  return target;
}

int THeroHandbookRankingTakeRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RewardId = 1;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroHandbookRankingTakeRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroHandbookRankingTakeRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroHandbookRankingTakeRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroHandbookRankingTakeRewardReq::MergeFrom(const THeroHandbookRankingTakeRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroHandbookRankingTakeRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroHandbookRankingTakeRewardReq::CopyFrom(const THeroHandbookRankingTakeRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroHandbookRankingTakeRewardReq::IsInitialized() const {

  return true;
}

void THeroHandbookRankingTakeRewardReq::Swap(THeroHandbookRankingTakeRewardReq* other) {
  if (other != this) {
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroHandbookRankingTakeRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroHandbookRankingTakeRewardReq_descriptor_;
  metadata.reflection = THeroHandbookRankingTakeRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroHandbookRankingRankRewardInfo::kRankInfoFieldNumber;
const int THeroHandbookRankingRankRewardInfo::kRankFieldNumber;
const int THeroHandbookRankingRankRewardInfo::kCountFieldNumber;
#endif  // !_MSC_VER

THeroHandbookRankingRankRewardInfo::THeroHandbookRankingRankRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroHandbookRankingRankRewardInfo)
}

void THeroHandbookRankingRankRewardInfo::InitAsDefaultInstance() {
  rankinfo_ = const_cast< ::pb::THeroHandbookRankingRankItem*>(&::pb::THeroHandbookRankingRankItem::default_instance());
}

THeroHandbookRankingRankRewardInfo::THeroHandbookRankingRankRewardInfo(const THeroHandbookRankingRankRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroHandbookRankingRankRewardInfo)
}

void THeroHandbookRankingRankRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  rankinfo_ = NULL;
  rank_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroHandbookRankingRankRewardInfo::~THeroHandbookRankingRankRewardInfo() {
  // @@protoc_insertion_point(destructor:pb.THeroHandbookRankingRankRewardInfo)
  SharedDtor();
}

void THeroHandbookRankingRankRewardInfo::SharedDtor() {
  if (this != default_instance_) {
    delete rankinfo_;
  }
}

void THeroHandbookRankingRankRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroHandbookRankingRankRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroHandbookRankingRankRewardInfo_descriptor_;
}

const THeroHandbookRankingRankRewardInfo& THeroHandbookRankingRankRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroHandbookRanking_2eproto();
  return *default_instance_;
}

THeroHandbookRankingRankRewardInfo* THeroHandbookRankingRankRewardInfo::default_instance_ = NULL;

THeroHandbookRankingRankRewardInfo* THeroHandbookRankingRankRewardInfo::New() const {
  return new THeroHandbookRankingRankRewardInfo;
}

void THeroHandbookRankingRankRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<THeroHandbookRankingRankRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(rank_, count_);
    if (has_rankinfo()) {
      if (rankinfo_ != NULL) rankinfo_->::pb::THeroHandbookRankingRankItem::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroHandbookRankingRankRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroHandbookRankingRankRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.THeroHandbookRankingRankItem RankInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }

      // optional int32 Rank = 2;
      case 2: {
        if (tag == 16) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Count;
        break;
      }

      // optional int32 Count = 3;
      case 3: {
        if (tag == 24) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroHandbookRankingRankRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroHandbookRankingRankRewardInfo)
  return false;
#undef DO_
}

void THeroHandbookRankingRankRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroHandbookRankingRankRewardInfo)
  // optional .pb.THeroHandbookRankingRankItem RankInfo = 1;
  if (has_rankinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankinfo(), output);
  }

  // optional int32 Rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // optional int32 Count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroHandbookRankingRankRewardInfo)
}

::google::protobuf::uint8* THeroHandbookRankingRankRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroHandbookRankingRankRewardInfo)
  // optional .pb.THeroHandbookRankingRankItem RankInfo = 1;
  if (has_rankinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankinfo(), target);
  }

  // optional int32 Rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // optional int32 Count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroHandbookRankingRankRewardInfo)
  return target;
}

int THeroHandbookRankingRankRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.THeroHandbookRankingRankItem RankInfo = 1;
    if (has_rankinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankinfo());
    }

    // optional int32 Rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 Count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroHandbookRankingRankRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroHandbookRankingRankRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroHandbookRankingRankRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroHandbookRankingRankRewardInfo::MergeFrom(const THeroHandbookRankingRankRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankinfo()) {
      mutable_rankinfo()->::pb::THeroHandbookRankingRankItem::MergeFrom(from.rankinfo());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroHandbookRankingRankRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroHandbookRankingRankRewardInfo::CopyFrom(const THeroHandbookRankingRankRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroHandbookRankingRankRewardInfo::IsInitialized() const {

  return true;
}

void THeroHandbookRankingRankRewardInfo::Swap(THeroHandbookRankingRankRewardInfo* other) {
  if (other != this) {
    std::swap(rankinfo_, other->rankinfo_);
    std::swap(rank_, other->rank_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroHandbookRankingRankRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroHandbookRankingRankRewardInfo_descriptor_;
  metadata.reflection = THeroHandbookRankingRankRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroHandbookRankingGetRankRewardRsp::kRankFieldNumber;
const int THeroHandbookRankingGetRankRewardRsp::kRankRewardArrFieldNumber;
const int THeroHandbookRankingGetRankRewardRsp::kHeroHandbookNumFieldNumber;
#endif  // !_MSC_VER

THeroHandbookRankingGetRankRewardRsp::THeroHandbookRankingGetRankRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroHandbookRankingGetRankRewardRsp)
}

void THeroHandbookRankingGetRankRewardRsp::InitAsDefaultInstance() {
}

THeroHandbookRankingGetRankRewardRsp::THeroHandbookRankingGetRankRewardRsp(const THeroHandbookRankingGetRankRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroHandbookRankingGetRankRewardRsp)
}

void THeroHandbookRankingGetRankRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  herohandbooknum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroHandbookRankingGetRankRewardRsp::~THeroHandbookRankingGetRankRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.THeroHandbookRankingGetRankRewardRsp)
  SharedDtor();
}

void THeroHandbookRankingGetRankRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroHandbookRankingGetRankRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroHandbookRankingGetRankRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroHandbookRankingGetRankRewardRsp_descriptor_;
}

const THeroHandbookRankingGetRankRewardRsp& THeroHandbookRankingGetRankRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroHandbookRanking_2eproto();
  return *default_instance_;
}

THeroHandbookRankingGetRankRewardRsp* THeroHandbookRankingGetRankRewardRsp::default_instance_ = NULL;

THeroHandbookRankingGetRankRewardRsp* THeroHandbookRankingGetRankRewardRsp::New() const {
  return new THeroHandbookRankingGetRankRewardRsp;
}

void THeroHandbookRankingGetRankRewardRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<THeroHandbookRankingGetRankRewardRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rank_, herohandbooknum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rankrewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroHandbookRankingGetRankRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroHandbookRankingGetRankRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankRewardArr;
        break;
      }

      // repeated .pb.THeroHandbookRankingRankRewardInfo RankRewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RankRewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankrewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankRewardArr;
        if (input->ExpectTag(24)) goto parse_HeroHandbookNum;
        break;
      }

      // optional uint32 HeroHandbookNum = 3;
      case 3: {
        if (tag == 24) {
         parse_HeroHandbookNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herohandbooknum_)));
          set_has_herohandbooknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroHandbookRankingGetRankRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroHandbookRankingGetRankRewardRsp)
  return false;
#undef DO_
}

void THeroHandbookRankingGetRankRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroHandbookRankingGetRankRewardRsp)
  // optional int32 Rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // repeated .pb.THeroHandbookRankingRankRewardInfo RankRewardArr = 2;
  for (int i = 0; i < this->rankrewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rankrewardarr(i), output);
  }

  // optional uint32 HeroHandbookNum = 3;
  if (has_herohandbooknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->herohandbooknum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroHandbookRankingGetRankRewardRsp)
}

::google::protobuf::uint8* THeroHandbookRankingGetRankRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroHandbookRankingGetRankRewardRsp)
  // optional int32 Rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // repeated .pb.THeroHandbookRankingRankRewardInfo RankRewardArr = 2;
  for (int i = 0; i < this->rankrewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rankrewardarr(i), target);
  }

  // optional uint32 HeroHandbookNum = 3;
  if (has_herohandbooknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->herohandbooknum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroHandbookRankingGetRankRewardRsp)
  return target;
}

int THeroHandbookRankingGetRankRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint32 HeroHandbookNum = 3;
    if (has_herohandbooknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herohandbooknum());
    }

  }
  // repeated .pb.THeroHandbookRankingRankRewardInfo RankRewardArr = 2;
  total_size += 1 * this->rankrewardarr_size();
  for (int i = 0; i < this->rankrewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankrewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroHandbookRankingGetRankRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroHandbookRankingGetRankRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroHandbookRankingGetRankRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroHandbookRankingGetRankRewardRsp::MergeFrom(const THeroHandbookRankingGetRankRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankrewardarr_.MergeFrom(from.rankrewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_herohandbooknum()) {
      set_herohandbooknum(from.herohandbooknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroHandbookRankingGetRankRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroHandbookRankingGetRankRewardRsp::CopyFrom(const THeroHandbookRankingGetRankRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroHandbookRankingGetRankRewardRsp::IsInitialized() const {

  return true;
}

void THeroHandbookRankingGetRankRewardRsp::Swap(THeroHandbookRankingGetRankRewardRsp* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    rankrewardarr_.Swap(&other->rankrewardarr_);
    std::swap(herohandbooknum_, other->herohandbooknum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroHandbookRankingGetRankRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroHandbookRankingGetRankRewardRsp_descriptor_;
  metadata.reflection = THeroHandbookRankingGetRankRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

THeroHandbookRankingEntranceCloseReq::THeroHandbookRankingEntranceCloseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroHandbookRankingEntranceCloseReq)
}

void THeroHandbookRankingEntranceCloseReq::InitAsDefaultInstance() {
}

THeroHandbookRankingEntranceCloseReq::THeroHandbookRankingEntranceCloseReq(const THeroHandbookRankingEntranceCloseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroHandbookRankingEntranceCloseReq)
}

void THeroHandbookRankingEntranceCloseReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroHandbookRankingEntranceCloseReq::~THeroHandbookRankingEntranceCloseReq() {
  // @@protoc_insertion_point(destructor:pb.THeroHandbookRankingEntranceCloseReq)
  SharedDtor();
}

void THeroHandbookRankingEntranceCloseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroHandbookRankingEntranceCloseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroHandbookRankingEntranceCloseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroHandbookRankingEntranceCloseReq_descriptor_;
}

const THeroHandbookRankingEntranceCloseReq& THeroHandbookRankingEntranceCloseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroHandbookRanking_2eproto();
  return *default_instance_;
}

THeroHandbookRankingEntranceCloseReq* THeroHandbookRankingEntranceCloseReq::default_instance_ = NULL;

THeroHandbookRankingEntranceCloseReq* THeroHandbookRankingEntranceCloseReq::New() const {
  return new THeroHandbookRankingEntranceCloseReq;
}

void THeroHandbookRankingEntranceCloseReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroHandbookRankingEntranceCloseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroHandbookRankingEntranceCloseReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroHandbookRankingEntranceCloseReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroHandbookRankingEntranceCloseReq)
  return false;
#undef DO_
}

void THeroHandbookRankingEntranceCloseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroHandbookRankingEntranceCloseReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroHandbookRankingEntranceCloseReq)
}

::google::protobuf::uint8* THeroHandbookRankingEntranceCloseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroHandbookRankingEntranceCloseReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroHandbookRankingEntranceCloseReq)
  return target;
}

int THeroHandbookRankingEntranceCloseReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroHandbookRankingEntranceCloseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroHandbookRankingEntranceCloseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroHandbookRankingEntranceCloseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroHandbookRankingEntranceCloseReq::MergeFrom(const THeroHandbookRankingEntranceCloseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroHandbookRankingEntranceCloseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroHandbookRankingEntranceCloseReq::CopyFrom(const THeroHandbookRankingEntranceCloseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroHandbookRankingEntranceCloseReq::IsInitialized() const {

  return true;
}

void THeroHandbookRankingEntranceCloseReq::Swap(THeroHandbookRankingEntranceCloseReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroHandbookRankingEntranceCloseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroHandbookRankingEntranceCloseReq_descriptor_;
  metadata.reflection = THeroHandbookRankingEntranceCloseReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
