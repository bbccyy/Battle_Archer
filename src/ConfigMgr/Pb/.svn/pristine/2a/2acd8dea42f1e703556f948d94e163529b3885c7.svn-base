// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActDoubleCourtesy.proto

#ifndef PROTOBUF_net_2fActDoubleCourtesy_2eproto__INCLUDED
#define PROTOBUF_net_2fActDoubleCourtesy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActDoubleCourtesy_2eproto();
void protobuf_AssignDesc_net_2fActDoubleCourtesy_2eproto();
void protobuf_ShutdownFile_net_2fActDoubleCourtesy_2eproto();

class TActDoubleCourtesyInfo;
class TActDoubleCourtesyGetInfoRsp;
class TActDoubleCourtesyExchangeGiftReq;
class TActDoubleCourtesyNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActDoubleCourtesyInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActDoubleCourtesy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActDoubleCourtesyInfo : public ::google::protobuf::Message {
 public:
  TActDoubleCourtesyInfo();
  virtual ~TActDoubleCourtesyInfo();

  TActDoubleCourtesyInfo(const TActDoubleCourtesyInfo& from);

  inline TActDoubleCourtesyInfo& operator=(const TActDoubleCourtesyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActDoubleCourtesyInfo& default_instance();

  void Swap(TActDoubleCourtesyInfo* other);

  // implements Message ----------------------------------------------

  TActDoubleCourtesyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActDoubleCourtesyInfo& from);
  void MergeFrom(const TActDoubleCourtesyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActDoubleCourtesyInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 PurchaseNum = 2;
  inline bool has_purchasenum() const;
  inline void clear_purchasenum();
  static const int kPurchaseNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActDoubleCourtesyInfo</name>
  	<Function>
  		<name>purchasenum</name>
  		<replaceName>PurchaseNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_purchasenum</name>
  		<replaceName>PurchaseNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_purchasenum</name>
  		<replaceName>PurchaseNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 purchasenum() const;
  inline void set_purchasenum(::google::protobuf::uint32 value);

  // optional uint32 ExchangeNum = 3;
  inline bool has_exchangenum() const;
  inline void clear_exchangenum();
  static const int kExchangeNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActDoubleCourtesyInfo</name>
  	<Function>
  		<name>exchangenum</name>
  		<replaceName>ExchangeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exchangenum</name>
  		<replaceName>ExchangeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exchangenum</name>
  		<replaceName>ExchangeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 exchangenum() const;
  inline void set_exchangenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActDoubleCourtesyInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_purchasenum();
  inline void clear_has_purchasenum();
  inline void set_has_exchangenum();
  inline void clear_has_exchangenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 purchasenum_;
  ::google::protobuf::uint32 exchangenum_;
  friend void  protobuf_AddDesc_net_2fActDoubleCourtesy_2eproto();
  friend void protobuf_AssignDesc_net_2fActDoubleCourtesy_2eproto();
  friend void protobuf_ShutdownFile_net_2fActDoubleCourtesy_2eproto();

  void InitAsDefaultInstance();
  static TActDoubleCourtesyInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActDoubleCourtesyGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActDoubleCourtesy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActDoubleCourtesyGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActDoubleCourtesyGetInfoRsp();
  virtual ~TActDoubleCourtesyGetInfoRsp();

  TActDoubleCourtesyGetInfoRsp(const TActDoubleCourtesyGetInfoRsp& from);

  inline TActDoubleCourtesyGetInfoRsp& operator=(const TActDoubleCourtesyGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActDoubleCourtesyGetInfoRsp& default_instance();

  void Swap(TActDoubleCourtesyGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActDoubleCourtesyGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActDoubleCourtesyGetInfoRsp& from);
  void MergeFrom(const TActDoubleCourtesyGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActDoubleCourtesyInfo ArrInfo = 1;
  inline int arrinfo_size() const;
  inline void clear_arrinfo();
  static const int kArrInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActDoubleCourtesyGetInfoRsp</name>
  	<Function>
  		<name>arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrinfo_size</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActDoubleCourtesyInfo& arrinfo(int index) const;
  inline ::pb::TActDoubleCourtesyInfo* mutable_arrinfo(int index);
  inline ::pb::TActDoubleCourtesyInfo* add_arrinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActDoubleCourtesyInfo >&
      arrinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActDoubleCourtesyInfo >*
      mutable_arrinfo();

  // optional uint32 Score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActDoubleCourtesyGetInfoRsp</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 RechargeNum = 3;
  inline bool has_rechargenum() const;
  inline void clear_rechargenum();
  static const int kRechargeNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActDoubleCourtesyGetInfoRsp</name>
  	<Function>
  		<name>rechargenum</name>
  		<replaceName>RechargeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rechargenum</name>
  		<replaceName>RechargeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rechargenum</name>
  		<replaceName>RechargeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rechargenum() const;
  inline void set_rechargenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActDoubleCourtesyGetInfoRsp)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_rechargenum();
  inline void clear_has_rechargenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActDoubleCourtesyInfo > arrinfo_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 rechargenum_;
  friend void  protobuf_AddDesc_net_2fActDoubleCourtesy_2eproto();
  friend void protobuf_AssignDesc_net_2fActDoubleCourtesy_2eproto();
  friend void protobuf_ShutdownFile_net_2fActDoubleCourtesy_2eproto();

  void InitAsDefaultInstance();
  static TActDoubleCourtesyGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActDoubleCourtesyExchangeGiftReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActDoubleCourtesy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActDoubleCourtesyExchangeGiftReq : public ::google::protobuf::Message {
 public:
  TActDoubleCourtesyExchangeGiftReq();
  virtual ~TActDoubleCourtesyExchangeGiftReq();

  TActDoubleCourtesyExchangeGiftReq(const TActDoubleCourtesyExchangeGiftReq& from);

  inline TActDoubleCourtesyExchangeGiftReq& operator=(const TActDoubleCourtesyExchangeGiftReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActDoubleCourtesyExchangeGiftReq& default_instance();

  void Swap(TActDoubleCourtesyExchangeGiftReq* other);

  // implements Message ----------------------------------------------

  TActDoubleCourtesyExchangeGiftReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActDoubleCourtesyExchangeGiftReq& from);
  void MergeFrom(const TActDoubleCourtesyExchangeGiftReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActDoubleCourtesyExchangeGiftReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActDoubleCourtesyExchangeGiftReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActDoubleCourtesy_2eproto();
  friend void protobuf_AssignDesc_net_2fActDoubleCourtesy_2eproto();
  friend void protobuf_ShutdownFile_net_2fActDoubleCourtesy_2eproto();

  void InitAsDefaultInstance();
  static TActDoubleCourtesyExchangeGiftReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActDoubleCourtesyNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActDoubleCourtesy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActDoubleCourtesyNotify : public ::google::protobuf::Message {
 public:
  TActDoubleCourtesyNotify();
  virtual ~TActDoubleCourtesyNotify();

  TActDoubleCourtesyNotify(const TActDoubleCourtesyNotify& from);

  inline TActDoubleCourtesyNotify& operator=(const TActDoubleCourtesyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActDoubleCourtesyNotify& default_instance();

  void Swap(TActDoubleCourtesyNotify* other);

  // implements Message ----------------------------------------------

  TActDoubleCourtesyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActDoubleCourtesyNotify& from);
  void MergeFrom(const TActDoubleCourtesyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActDoubleCourtesyInfo ArrInfo = 1;
  inline int arrinfo_size() const;
  inline void clear_arrinfo();
  static const int kArrInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActDoubleCourtesyNotify</name>
  	<Function>
  		<name>arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrinfo_size</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActDoubleCourtesyInfo& arrinfo(int index) const;
  inline ::pb::TActDoubleCourtesyInfo* mutable_arrinfo(int index);
  inline ::pb::TActDoubleCourtesyInfo* add_arrinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActDoubleCourtesyInfo >&
      arrinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActDoubleCourtesyInfo >*
      mutable_arrinfo();

  // optional uint32 Score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActDoubleCourtesyNotify</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 RechargeNum = 3;
  inline bool has_rechargenum() const;
  inline void clear_rechargenum();
  static const int kRechargeNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActDoubleCourtesyNotify</name>
  	<Function>
  		<name>rechargenum</name>
  		<replaceName>RechargeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rechargenum</name>
  		<replaceName>RechargeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rechargenum</name>
  		<replaceName>RechargeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rechargenum() const;
  inline void set_rechargenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActDoubleCourtesyNotify)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_rechargenum();
  inline void clear_has_rechargenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActDoubleCourtesyInfo > arrinfo_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 rechargenum_;
  friend void  protobuf_AddDesc_net_2fActDoubleCourtesy_2eproto();
  friend void protobuf_AssignDesc_net_2fActDoubleCourtesy_2eproto();
  friend void protobuf_ShutdownFile_net_2fActDoubleCourtesy_2eproto();

  void InitAsDefaultInstance();
  static TActDoubleCourtesyNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActDoubleCourtesyInfo

// optional uint32 Id = 1;
inline bool TActDoubleCourtesyInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActDoubleCourtesyInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActDoubleCourtesyInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActDoubleCourtesyInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActDoubleCourtesyInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TActDoubleCourtesyInfo.Id)
  return id_;
}
inline void TActDoubleCourtesyInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActDoubleCourtesyInfo.Id)
}

// optional uint32 PurchaseNum = 2;
inline bool TActDoubleCourtesyInfo::has_purchasenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActDoubleCourtesyInfo::set_has_purchasenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActDoubleCourtesyInfo::clear_has_purchasenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActDoubleCourtesyInfo::clear_purchasenum() {
  purchasenum_ = 0u;
  clear_has_purchasenum();
}
inline ::google::protobuf::uint32 TActDoubleCourtesyInfo::purchasenum() const {
  // @@protoc_insertion_point(field_get:pb.TActDoubleCourtesyInfo.PurchaseNum)
  return purchasenum_;
}
inline void TActDoubleCourtesyInfo::set_purchasenum(::google::protobuf::uint32 value) {
  set_has_purchasenum();
  purchasenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActDoubleCourtesyInfo.PurchaseNum)
}

// optional uint32 ExchangeNum = 3;
inline bool TActDoubleCourtesyInfo::has_exchangenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActDoubleCourtesyInfo::set_has_exchangenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActDoubleCourtesyInfo::clear_has_exchangenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActDoubleCourtesyInfo::clear_exchangenum() {
  exchangenum_ = 0u;
  clear_has_exchangenum();
}
inline ::google::protobuf::uint32 TActDoubleCourtesyInfo::exchangenum() const {
  // @@protoc_insertion_point(field_get:pb.TActDoubleCourtesyInfo.ExchangeNum)
  return exchangenum_;
}
inline void TActDoubleCourtesyInfo::set_exchangenum(::google::protobuf::uint32 value) {
  set_has_exchangenum();
  exchangenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActDoubleCourtesyInfo.ExchangeNum)
}

// -------------------------------------------------------------------

// TActDoubleCourtesyGetInfoRsp

// repeated .pb.TActDoubleCourtesyInfo ArrInfo = 1;
inline int TActDoubleCourtesyGetInfoRsp::arrinfo_size() const {
  return arrinfo_.size();
}
inline void TActDoubleCourtesyGetInfoRsp::clear_arrinfo() {
  arrinfo_.Clear();
}
inline const ::pb::TActDoubleCourtesyInfo& TActDoubleCourtesyGetInfoRsp::arrinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActDoubleCourtesyGetInfoRsp.ArrInfo)
  return arrinfo_.Get(index);
}
inline ::pb::TActDoubleCourtesyInfo* TActDoubleCourtesyGetInfoRsp::mutable_arrinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActDoubleCourtesyGetInfoRsp.ArrInfo)
  return arrinfo_.Mutable(index);
}
inline ::pb::TActDoubleCourtesyInfo* TActDoubleCourtesyGetInfoRsp::add_arrinfo() {
  // @@protoc_insertion_point(field_add:pb.TActDoubleCourtesyGetInfoRsp.ArrInfo)
  return arrinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActDoubleCourtesyInfo >&
TActDoubleCourtesyGetInfoRsp::arrinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActDoubleCourtesyGetInfoRsp.ArrInfo)
  return arrinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActDoubleCourtesyInfo >*
TActDoubleCourtesyGetInfoRsp::mutable_arrinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActDoubleCourtesyGetInfoRsp.ArrInfo)
  return &arrinfo_;
}

// optional uint32 Score = 2;
inline bool TActDoubleCourtesyGetInfoRsp::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActDoubleCourtesyGetInfoRsp::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActDoubleCourtesyGetInfoRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActDoubleCourtesyGetInfoRsp::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TActDoubleCourtesyGetInfoRsp::score() const {
  // @@protoc_insertion_point(field_get:pb.TActDoubleCourtesyGetInfoRsp.Score)
  return score_;
}
inline void TActDoubleCourtesyGetInfoRsp::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TActDoubleCourtesyGetInfoRsp.Score)
}

// optional uint32 RechargeNum = 3;
inline bool TActDoubleCourtesyGetInfoRsp::has_rechargenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActDoubleCourtesyGetInfoRsp::set_has_rechargenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActDoubleCourtesyGetInfoRsp::clear_has_rechargenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActDoubleCourtesyGetInfoRsp::clear_rechargenum() {
  rechargenum_ = 0u;
  clear_has_rechargenum();
}
inline ::google::protobuf::uint32 TActDoubleCourtesyGetInfoRsp::rechargenum() const {
  // @@protoc_insertion_point(field_get:pb.TActDoubleCourtesyGetInfoRsp.RechargeNum)
  return rechargenum_;
}
inline void TActDoubleCourtesyGetInfoRsp::set_rechargenum(::google::protobuf::uint32 value) {
  set_has_rechargenum();
  rechargenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActDoubleCourtesyGetInfoRsp.RechargeNum)
}

// -------------------------------------------------------------------

// TActDoubleCourtesyExchangeGiftReq

// optional uint32 Id = 1;
inline bool TActDoubleCourtesyExchangeGiftReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActDoubleCourtesyExchangeGiftReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActDoubleCourtesyExchangeGiftReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActDoubleCourtesyExchangeGiftReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActDoubleCourtesyExchangeGiftReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActDoubleCourtesyExchangeGiftReq.Id)
  return id_;
}
inline void TActDoubleCourtesyExchangeGiftReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActDoubleCourtesyExchangeGiftReq.Id)
}

// -------------------------------------------------------------------

// TActDoubleCourtesyNotify

// repeated .pb.TActDoubleCourtesyInfo ArrInfo = 1;
inline int TActDoubleCourtesyNotify::arrinfo_size() const {
  return arrinfo_.size();
}
inline void TActDoubleCourtesyNotify::clear_arrinfo() {
  arrinfo_.Clear();
}
inline const ::pb::TActDoubleCourtesyInfo& TActDoubleCourtesyNotify::arrinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActDoubleCourtesyNotify.ArrInfo)
  return arrinfo_.Get(index);
}
inline ::pb::TActDoubleCourtesyInfo* TActDoubleCourtesyNotify::mutable_arrinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActDoubleCourtesyNotify.ArrInfo)
  return arrinfo_.Mutable(index);
}
inline ::pb::TActDoubleCourtesyInfo* TActDoubleCourtesyNotify::add_arrinfo() {
  // @@protoc_insertion_point(field_add:pb.TActDoubleCourtesyNotify.ArrInfo)
  return arrinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActDoubleCourtesyInfo >&
TActDoubleCourtesyNotify::arrinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActDoubleCourtesyNotify.ArrInfo)
  return arrinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActDoubleCourtesyInfo >*
TActDoubleCourtesyNotify::mutable_arrinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActDoubleCourtesyNotify.ArrInfo)
  return &arrinfo_;
}

// optional uint32 Score = 2;
inline bool TActDoubleCourtesyNotify::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActDoubleCourtesyNotify::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActDoubleCourtesyNotify::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActDoubleCourtesyNotify::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TActDoubleCourtesyNotify::score() const {
  // @@protoc_insertion_point(field_get:pb.TActDoubleCourtesyNotify.Score)
  return score_;
}
inline void TActDoubleCourtesyNotify::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TActDoubleCourtesyNotify.Score)
}

// optional uint32 RechargeNum = 3;
inline bool TActDoubleCourtesyNotify::has_rechargenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActDoubleCourtesyNotify::set_has_rechargenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActDoubleCourtesyNotify::clear_has_rechargenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActDoubleCourtesyNotify::clear_rechargenum() {
  rechargenum_ = 0u;
  clear_has_rechargenum();
}
inline ::google::protobuf::uint32 TActDoubleCourtesyNotify::rechargenum() const {
  // @@protoc_insertion_point(field_get:pb.TActDoubleCourtesyNotify.RechargeNum)
  return rechargenum_;
}
inline void TActDoubleCourtesyNotify::set_rechargenum(::google::protobuf::uint32 value) {
  set_has_rechargenum();
  rechargenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActDoubleCourtesyNotify.RechargeNum)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActDoubleCourtesy_2eproto__INCLUDED
