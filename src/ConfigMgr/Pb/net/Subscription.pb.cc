// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Subscription.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Subscription.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TSubscriptionGetSubscriptionInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSubscriptionGetSubscriptionInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSubscriptionReceiveRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSubscriptionReceiveRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSubscriptionPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSubscriptionPush_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fSubscription_2eproto() {
  protobuf_AddDesc_net_2fSubscription_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Subscription.proto");
  GOOGLE_CHECK(file != NULL);
  TSubscriptionGetSubscriptionInfoRsp_descriptor_ = file->message_type(0);
  static const int TSubscriptionGetSubscriptionInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSubscriptionGetSubscriptionInfoRsp, paytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSubscriptionGetSubscriptionInfoRsp, rewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSubscriptionGetSubscriptionInfoRsp, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSubscriptionGetSubscriptionInfoRsp, subscriptid_),
  };
  TSubscriptionGetSubscriptionInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSubscriptionGetSubscriptionInfoRsp_descriptor_,
      TSubscriptionGetSubscriptionInfoRsp::default_instance_,
      TSubscriptionGetSubscriptionInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSubscriptionGetSubscriptionInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSubscriptionGetSubscriptionInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSubscriptionGetSubscriptionInfoRsp));
  TSubscriptionReceiveRewardRsp_descriptor_ = file->message_type(1);
  static const int TSubscriptionReceiveRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSubscriptionReceiveRewardRsp, rewardarr_),
  };
  TSubscriptionReceiveRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSubscriptionReceiveRewardRsp_descriptor_,
      TSubscriptionReceiveRewardRsp::default_instance_,
      TSubscriptionReceiveRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSubscriptionReceiveRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSubscriptionReceiveRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSubscriptionReceiveRewardRsp));
  TSubscriptionPush_descriptor_ = file->message_type(2);
  static const int TSubscriptionPush_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSubscriptionPush, paytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSubscriptionPush, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSubscriptionPush, subscriptid_),
  };
  TSubscriptionPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSubscriptionPush_descriptor_,
      TSubscriptionPush::default_instance_,
      TSubscriptionPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSubscriptionPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSubscriptionPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSubscriptionPush));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fSubscription_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSubscriptionGetSubscriptionInfoRsp_descriptor_, &TSubscriptionGetSubscriptionInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSubscriptionReceiveRewardRsp_descriptor_, &TSubscriptionReceiveRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSubscriptionPush_descriptor_, &TSubscriptionPush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fSubscription_2eproto() {
  delete TSubscriptionGetSubscriptionInfoRsp::default_instance_;
  delete TSubscriptionGetSubscriptionInfoRsp_reflection_;
  delete TSubscriptionReceiveRewardRsp::default_instance_;
  delete TSubscriptionReceiveRewardRsp_reflection_;
  delete TSubscriptionPush::default_instance_;
  delete TSubscriptionPush_reflection_;
}

void protobuf_AddDesc_net_2fSubscription_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026net/Subscription.proto\022\002pb\032\026net/Common"
    "Reward.proto\"p\n#TSubscriptionGetSubscrip"
    "tionInfoRsp\022\017\n\007PayTime\030\001 \001(\004\022\022\n\nRewardTi"
    "me\030\002 \001(\004\022\017\n\007EndTime\030\003 \001(\004\022\023\n\013SubscriptId"
    "\030\004 \001(\r\"E\n\035TSubscriptionReceiveRewardRsp\022"
    "$\n\tRewardArr\030\001 \003(\0132\021.pb.TCommonReward\"J\n"
    "\021TSubscriptionPush\022\017\n\007PayTime\030\001 \001(\004\022\017\n\007E"
    "ndTime\030\003 \001(\004\022\023\n\013SubscriptId\030\004 \001(\r", 313);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Subscription.proto", &protobuf_RegisterTypes);
  TSubscriptionGetSubscriptionInfoRsp::default_instance_ = new TSubscriptionGetSubscriptionInfoRsp();
  TSubscriptionReceiveRewardRsp::default_instance_ = new TSubscriptionReceiveRewardRsp();
  TSubscriptionPush::default_instance_ = new TSubscriptionPush();
  TSubscriptionGetSubscriptionInfoRsp::default_instance_->InitAsDefaultInstance();
  TSubscriptionReceiveRewardRsp::default_instance_->InitAsDefaultInstance();
  TSubscriptionPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fSubscription_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fSubscription_2eproto {
  StaticDescriptorInitializer_net_2fSubscription_2eproto() {
    protobuf_AddDesc_net_2fSubscription_2eproto();
  }
} static_descriptor_initializer_net_2fSubscription_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TSubscriptionGetSubscriptionInfoRsp::kPayTimeFieldNumber;
const int TSubscriptionGetSubscriptionInfoRsp::kRewardTimeFieldNumber;
const int TSubscriptionGetSubscriptionInfoRsp::kEndTimeFieldNumber;
const int TSubscriptionGetSubscriptionInfoRsp::kSubscriptIdFieldNumber;
#endif  // !_MSC_VER

TSubscriptionGetSubscriptionInfoRsp::TSubscriptionGetSubscriptionInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSubscriptionGetSubscriptionInfoRsp)
}

void TSubscriptionGetSubscriptionInfoRsp::InitAsDefaultInstance() {
}

TSubscriptionGetSubscriptionInfoRsp::TSubscriptionGetSubscriptionInfoRsp(const TSubscriptionGetSubscriptionInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSubscriptionGetSubscriptionInfoRsp)
}

void TSubscriptionGetSubscriptionInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  paytime_ = GOOGLE_ULONGLONG(0);
  rewardtime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  subscriptid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSubscriptionGetSubscriptionInfoRsp::~TSubscriptionGetSubscriptionInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TSubscriptionGetSubscriptionInfoRsp)
  SharedDtor();
}

void TSubscriptionGetSubscriptionInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSubscriptionGetSubscriptionInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSubscriptionGetSubscriptionInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSubscriptionGetSubscriptionInfoRsp_descriptor_;
}

const TSubscriptionGetSubscriptionInfoRsp& TSubscriptionGetSubscriptionInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSubscription_2eproto();
  return *default_instance_;
}

TSubscriptionGetSubscriptionInfoRsp* TSubscriptionGetSubscriptionInfoRsp::default_instance_ = NULL;

TSubscriptionGetSubscriptionInfoRsp* TSubscriptionGetSubscriptionInfoRsp::New() const {
  return new TSubscriptionGetSubscriptionInfoRsp;
}

void TSubscriptionGetSubscriptionInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSubscriptionGetSubscriptionInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(paytime_, subscriptid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSubscriptionGetSubscriptionInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSubscriptionGetSubscriptionInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 PayTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &paytime_)));
          set_has_paytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RewardTime;
        break;
      }

      // optional uint64 RewardTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 3;
      case 3: {
        if (tag == 24) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SubscriptId;
        break;
      }

      // optional uint32 SubscriptId = 4;
      case 4: {
        if (tag == 32) {
         parse_SubscriptId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subscriptid_)));
          set_has_subscriptid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSubscriptionGetSubscriptionInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSubscriptionGetSubscriptionInfoRsp)
  return false;
#undef DO_
}

void TSubscriptionGetSubscriptionInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSubscriptionGetSubscriptionInfoRsp)
  // optional uint64 PayTime = 1;
  if (has_paytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->paytime(), output);
  }

  // optional uint64 RewardTime = 2;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rewardtime(), output);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  // optional uint32 SubscriptId = 4;
  if (has_subscriptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->subscriptid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSubscriptionGetSubscriptionInfoRsp)
}

::google::protobuf::uint8* TSubscriptionGetSubscriptionInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSubscriptionGetSubscriptionInfoRsp)
  // optional uint64 PayTime = 1;
  if (has_paytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->paytime(), target);
  }

  // optional uint64 RewardTime = 2;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rewardtime(), target);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  // optional uint32 SubscriptId = 4;
  if (has_subscriptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->subscriptid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSubscriptionGetSubscriptionInfoRsp)
  return target;
}

int TSubscriptionGetSubscriptionInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 PayTime = 1;
    if (has_paytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->paytime());
    }

    // optional uint64 RewardTime = 2;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewardtime());
    }

    // optional uint64 EndTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint32 SubscriptId = 4;
    if (has_subscriptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subscriptid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSubscriptionGetSubscriptionInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSubscriptionGetSubscriptionInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSubscriptionGetSubscriptionInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSubscriptionGetSubscriptionInfoRsp::MergeFrom(const TSubscriptionGetSubscriptionInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paytime()) {
      set_paytime(from.paytime());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_subscriptid()) {
      set_subscriptid(from.subscriptid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSubscriptionGetSubscriptionInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSubscriptionGetSubscriptionInfoRsp::CopyFrom(const TSubscriptionGetSubscriptionInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSubscriptionGetSubscriptionInfoRsp::IsInitialized() const {

  return true;
}

void TSubscriptionGetSubscriptionInfoRsp::Swap(TSubscriptionGetSubscriptionInfoRsp* other) {
  if (other != this) {
    std::swap(paytime_, other->paytime_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(endtime_, other->endtime_);
    std::swap(subscriptid_, other->subscriptid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSubscriptionGetSubscriptionInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSubscriptionGetSubscriptionInfoRsp_descriptor_;
  metadata.reflection = TSubscriptionGetSubscriptionInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSubscriptionReceiveRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TSubscriptionReceiveRewardRsp::TSubscriptionReceiveRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSubscriptionReceiveRewardRsp)
}

void TSubscriptionReceiveRewardRsp::InitAsDefaultInstance() {
}

TSubscriptionReceiveRewardRsp::TSubscriptionReceiveRewardRsp(const TSubscriptionReceiveRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSubscriptionReceiveRewardRsp)
}

void TSubscriptionReceiveRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSubscriptionReceiveRewardRsp::~TSubscriptionReceiveRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TSubscriptionReceiveRewardRsp)
  SharedDtor();
}

void TSubscriptionReceiveRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSubscriptionReceiveRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSubscriptionReceiveRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSubscriptionReceiveRewardRsp_descriptor_;
}

const TSubscriptionReceiveRewardRsp& TSubscriptionReceiveRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSubscription_2eproto();
  return *default_instance_;
}

TSubscriptionReceiveRewardRsp* TSubscriptionReceiveRewardRsp::default_instance_ = NULL;

TSubscriptionReceiveRewardRsp* TSubscriptionReceiveRewardRsp::New() const {
  return new TSubscriptionReceiveRewardRsp;
}

void TSubscriptionReceiveRewardRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSubscriptionReceiveRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSubscriptionReceiveRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSubscriptionReceiveRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSubscriptionReceiveRewardRsp)
  return false;
#undef DO_
}

void TSubscriptionReceiveRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSubscriptionReceiveRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSubscriptionReceiveRewardRsp)
}

::google::protobuf::uint8* TSubscriptionReceiveRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSubscriptionReceiveRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSubscriptionReceiveRewardRsp)
  return target;
}

int TSubscriptionReceiveRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSubscriptionReceiveRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSubscriptionReceiveRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSubscriptionReceiveRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSubscriptionReceiveRewardRsp::MergeFrom(const TSubscriptionReceiveRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSubscriptionReceiveRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSubscriptionReceiveRewardRsp::CopyFrom(const TSubscriptionReceiveRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSubscriptionReceiveRewardRsp::IsInitialized() const {

  return true;
}

void TSubscriptionReceiveRewardRsp::Swap(TSubscriptionReceiveRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSubscriptionReceiveRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSubscriptionReceiveRewardRsp_descriptor_;
  metadata.reflection = TSubscriptionReceiveRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSubscriptionPush::kPayTimeFieldNumber;
const int TSubscriptionPush::kEndTimeFieldNumber;
const int TSubscriptionPush::kSubscriptIdFieldNumber;
#endif  // !_MSC_VER

TSubscriptionPush::TSubscriptionPush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSubscriptionPush)
}

void TSubscriptionPush::InitAsDefaultInstance() {
}

TSubscriptionPush::TSubscriptionPush(const TSubscriptionPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSubscriptionPush)
}

void TSubscriptionPush::SharedCtor() {
  _cached_size_ = 0;
  paytime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  subscriptid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSubscriptionPush::~TSubscriptionPush() {
  // @@protoc_insertion_point(destructor:pb.TSubscriptionPush)
  SharedDtor();
}

void TSubscriptionPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSubscriptionPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSubscriptionPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSubscriptionPush_descriptor_;
}

const TSubscriptionPush& TSubscriptionPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSubscription_2eproto();
  return *default_instance_;
}

TSubscriptionPush* TSubscriptionPush::default_instance_ = NULL;

TSubscriptionPush* TSubscriptionPush::New() const {
  return new TSubscriptionPush;
}

void TSubscriptionPush::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSubscriptionPush*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(paytime_, subscriptid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSubscriptionPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSubscriptionPush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 PayTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &paytime_)));
          set_has_paytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 3;
      case 3: {
        if (tag == 24) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SubscriptId;
        break;
      }

      // optional uint32 SubscriptId = 4;
      case 4: {
        if (tag == 32) {
         parse_SubscriptId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subscriptid_)));
          set_has_subscriptid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSubscriptionPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSubscriptionPush)
  return false;
#undef DO_
}

void TSubscriptionPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSubscriptionPush)
  // optional uint64 PayTime = 1;
  if (has_paytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->paytime(), output);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  // optional uint32 SubscriptId = 4;
  if (has_subscriptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->subscriptid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSubscriptionPush)
}

::google::protobuf::uint8* TSubscriptionPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSubscriptionPush)
  // optional uint64 PayTime = 1;
  if (has_paytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->paytime(), target);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  // optional uint32 SubscriptId = 4;
  if (has_subscriptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->subscriptid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSubscriptionPush)
  return target;
}

int TSubscriptionPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 PayTime = 1;
    if (has_paytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->paytime());
    }

    // optional uint64 EndTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint32 SubscriptId = 4;
    if (has_subscriptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subscriptid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSubscriptionPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSubscriptionPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSubscriptionPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSubscriptionPush::MergeFrom(const TSubscriptionPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paytime()) {
      set_paytime(from.paytime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_subscriptid()) {
      set_subscriptid(from.subscriptid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSubscriptionPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSubscriptionPush::CopyFrom(const TSubscriptionPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSubscriptionPush::IsInitialized() const {

  return true;
}

void TSubscriptionPush::Swap(TSubscriptionPush* other) {
  if (other != this) {
    std::swap(paytime_, other->paytime_);
    std::swap(endtime_, other->endtime_);
    std::swap(subscriptid_, other->subscriptid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSubscriptionPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSubscriptionPush_descriptor_;
  metadata.reflection = TSubscriptionPush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
