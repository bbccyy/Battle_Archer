// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/Mp4Audio.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/Mp4Audio.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Mp4Audio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mp4Audio_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mp4AudioInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mp4AudioInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fMp4Audio_2eproto() {
  protobuf_AddDesc_module_2fMp4Audio_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/Mp4Audio.proto");
  GOOGLE_CHECK(file != NULL);
  Mp4Audio_descriptor_ = file->message_type(0);
  static const int Mp4Audio_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mp4Audio, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mp4Audio, mp4name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mp4Audio, mp4startaudioinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mp4Audio, mp4endaudioinfoarr_),
  };
  Mp4Audio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mp4Audio_descriptor_,
      Mp4Audio::default_instance_,
      Mp4Audio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mp4Audio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mp4Audio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mp4Audio));
  Mp4AudioInfo_descriptor_ = file->message_type(1);
  static const int Mp4AudioInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mp4AudioInfo, audioinfo_),
  };
  Mp4AudioInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mp4AudioInfo_descriptor_,
      Mp4AudioInfo::default_instance_,
      Mp4AudioInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mp4AudioInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mp4AudioInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mp4AudioInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fMp4Audio_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mp4Audio_descriptor_, &Mp4Audio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mp4AudioInfo_descriptor_, &Mp4AudioInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fMp4Audio_2eproto() {
  delete Mp4Audio::default_instance_;
  delete Mp4Audio_reflection_;
  delete Mp4AudioInfo::default_instance_;
  delete Mp4AudioInfo_reflection_;
}

void protobuf_AddDesc_module_2fMp4Audio_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fAudioDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025module/Mp4Audio.proto\022\002pb\032\030module/Audi"
    "oDefine.proto\"\205\001\n\010Mp4Audio\022\n\n\002Id\030\001 \001(\005\022\017"
    "\n\007Mp4Name\030\002 \001(\t\022.\n\024Mp4StartAudioInfoArr\030"
    "\003 \003(\0132\020.pb.Mp4AudioInfo\022,\n\022Mp4EndAudioIn"
    "foArr\030\004 \003(\0132\020.pb.Mp4AudioInfo\"0\n\014Mp4Audi"
    "oInfo\022 \n\tAudioInfo\030\001 \001(\0132\r.pb.AudioInfo", 239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/Mp4Audio.proto", &protobuf_RegisterTypes);
  Mp4Audio::default_instance_ = new Mp4Audio();
  Mp4AudioInfo::default_instance_ = new Mp4AudioInfo();
  Mp4Audio::default_instance_->InitAsDefaultInstance();
  Mp4AudioInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fMp4Audio_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fMp4Audio_2eproto {
  StaticDescriptorInitializer_module_2fMp4Audio_2eproto() {
    protobuf_AddDesc_module_2fMp4Audio_2eproto();
  }
} static_descriptor_initializer_module_2fMp4Audio_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Mp4Audio::kIdFieldNumber;
const int Mp4Audio::kMp4NameFieldNumber;
const int Mp4Audio::kMp4StartAudioInfoArrFieldNumber;
const int Mp4Audio::kMp4EndAudioInfoArrFieldNumber;
#endif  // !_MSC_VER

Mp4Audio::Mp4Audio()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Mp4Audio)
}

void Mp4Audio::InitAsDefaultInstance() {
}

Mp4Audio::Mp4Audio(const Mp4Audio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Mp4Audio)
}

void Mp4Audio::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  mp4name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mp4Audio::~Mp4Audio() {
  // @@protoc_insertion_point(destructor:pb.Mp4Audio)
  SharedDtor();
}

void Mp4Audio::SharedDtor() {
  if (mp4name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mp4name_;
  }
  if (this != default_instance_) {
  }
}

void Mp4Audio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mp4Audio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mp4Audio_descriptor_;
}

const Mp4Audio& Mp4Audio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fMp4Audio_2eproto();
  return *default_instance_;
}

Mp4Audio* Mp4Audio::default_instance_ = NULL;

Mp4Audio* Mp4Audio::New() const {
  return new Mp4Audio;
}

void Mp4Audio::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_mp4name()) {
      if (mp4name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mp4name_->clear();
      }
    }
  }
  mp4startaudioinfoarr_.Clear();
  mp4endaudioinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mp4Audio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Mp4Audio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Mp4Name;
        break;
      }

      // optional string Mp4Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Mp4Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mp4name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mp4name().data(), this->mp4name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mp4name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Mp4StartAudioInfoArr;
        break;
      }

      // repeated .pb.Mp4AudioInfo Mp4StartAudioInfoArr = 3;
      case 3: {
        if (tag == 26) {
         parse_Mp4StartAudioInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mp4startaudioinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Mp4StartAudioInfoArr;
        if (input->ExpectTag(34)) goto parse_Mp4EndAudioInfoArr;
        break;
      }

      // repeated .pb.Mp4AudioInfo Mp4EndAudioInfoArr = 4;
      case 4: {
        if (tag == 34) {
         parse_Mp4EndAudioInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mp4endaudioinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Mp4EndAudioInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Mp4Audio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Mp4Audio)
  return false;
#undef DO_
}

void Mp4Audio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Mp4Audio)
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string Mp4Name = 2;
  if (has_mp4name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mp4name().data(), this->mp4name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mp4name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mp4name(), output);
  }

  // repeated .pb.Mp4AudioInfo Mp4StartAudioInfoArr = 3;
  for (int i = 0; i < this->mp4startaudioinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mp4startaudioinfoarr(i), output);
  }

  // repeated .pb.Mp4AudioInfo Mp4EndAudioInfoArr = 4;
  for (int i = 0; i < this->mp4endaudioinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mp4endaudioinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Mp4Audio)
}

::google::protobuf::uint8* Mp4Audio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Mp4Audio)
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string Mp4Name = 2;
  if (has_mp4name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mp4name().data(), this->mp4name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mp4name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mp4name(), target);
  }

  // repeated .pb.Mp4AudioInfo Mp4StartAudioInfoArr = 3;
  for (int i = 0; i < this->mp4startaudioinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mp4startaudioinfoarr(i), target);
  }

  // repeated .pb.Mp4AudioInfo Mp4EndAudioInfoArr = 4;
  for (int i = 0; i < this->mp4endaudioinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mp4endaudioinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Mp4Audio)
  return target;
}

int Mp4Audio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string Mp4Name = 2;
    if (has_mp4name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mp4name());
    }

  }
  // repeated .pb.Mp4AudioInfo Mp4StartAudioInfoArr = 3;
  total_size += 1 * this->mp4startaudioinfoarr_size();
  for (int i = 0; i < this->mp4startaudioinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mp4startaudioinfoarr(i));
  }

  // repeated .pb.Mp4AudioInfo Mp4EndAudioInfoArr = 4;
  total_size += 1 * this->mp4endaudioinfoarr_size();
  for (int i = 0; i < this->mp4endaudioinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mp4endaudioinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mp4Audio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mp4Audio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mp4Audio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mp4Audio::MergeFrom(const Mp4Audio& from) {
  GOOGLE_CHECK_NE(&from, this);
  mp4startaudioinfoarr_.MergeFrom(from.mp4startaudioinfoarr_);
  mp4endaudioinfoarr_.MergeFrom(from.mp4endaudioinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mp4name()) {
      set_mp4name(from.mp4name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mp4Audio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mp4Audio::CopyFrom(const Mp4Audio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mp4Audio::IsInitialized() const {

  return true;
}

void Mp4Audio::Swap(Mp4Audio* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mp4name_, other->mp4name_);
    mp4startaudioinfoarr_.Swap(&other->mp4startaudioinfoarr_);
    mp4endaudioinfoarr_.Swap(&other->mp4endaudioinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mp4Audio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mp4Audio_descriptor_;
  metadata.reflection = Mp4Audio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mp4AudioInfo::kAudioInfoFieldNumber;
#endif  // !_MSC_VER

Mp4AudioInfo::Mp4AudioInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Mp4AudioInfo)
}

void Mp4AudioInfo::InitAsDefaultInstance() {
  audioinfo_ = const_cast< ::pb::AudioInfo*>(&::pb::AudioInfo::default_instance());
}

Mp4AudioInfo::Mp4AudioInfo(const Mp4AudioInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Mp4AudioInfo)
}

void Mp4AudioInfo::SharedCtor() {
  _cached_size_ = 0;
  audioinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mp4AudioInfo::~Mp4AudioInfo() {
  // @@protoc_insertion_point(destructor:pb.Mp4AudioInfo)
  SharedDtor();
}

void Mp4AudioInfo::SharedDtor() {
  if (this != default_instance_) {
    delete audioinfo_;
  }
}

void Mp4AudioInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mp4AudioInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mp4AudioInfo_descriptor_;
}

const Mp4AudioInfo& Mp4AudioInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fMp4Audio_2eproto();
  return *default_instance_;
}

Mp4AudioInfo* Mp4AudioInfo::default_instance_ = NULL;

Mp4AudioInfo* Mp4AudioInfo::New() const {
  return new Mp4AudioInfo;
}

void Mp4AudioInfo::Clear() {
  if (has_audioinfo()) {
    if (audioinfo_ != NULL) audioinfo_->::pb::AudioInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mp4AudioInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Mp4AudioInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.AudioInfo AudioInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Mp4AudioInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Mp4AudioInfo)
  return false;
#undef DO_
}

void Mp4AudioInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Mp4AudioInfo)
  // optional .pb.AudioInfo AudioInfo = 1;
  if (has_audioinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->audioinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Mp4AudioInfo)
}

::google::protobuf::uint8* Mp4AudioInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Mp4AudioInfo)
  // optional .pb.AudioInfo AudioInfo = 1;
  if (has_audioinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->audioinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Mp4AudioInfo)
  return target;
}

int Mp4AudioInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.AudioInfo AudioInfo = 1;
    if (has_audioinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audioinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mp4AudioInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mp4AudioInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mp4AudioInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mp4AudioInfo::MergeFrom(const Mp4AudioInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audioinfo()) {
      mutable_audioinfo()->::pb::AudioInfo::MergeFrom(from.audioinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mp4AudioInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mp4AudioInfo::CopyFrom(const Mp4AudioInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mp4AudioInfo::IsInitialized() const {

  return true;
}

void Mp4AudioInfo::Swap(Mp4AudioInfo* other) {
  if (other != this) {
    std::swap(audioinfo_, other->audioinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mp4AudioInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mp4AudioInfo_descriptor_;
  metadata.reflection = Mp4AudioInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
