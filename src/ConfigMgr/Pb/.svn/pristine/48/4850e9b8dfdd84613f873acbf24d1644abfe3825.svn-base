// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/User.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/User.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TModuleTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TModuleTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* TModuleInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TModuleInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserGetUserDataRpgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserGetUserDataRpgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserGetUserDataSlgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserGetUserDataSlgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBaseUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBaseUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserGetUserDataRpgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserGetUserDataRpgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserUpdateUserDataRpgNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserUpdateUserDataRpgNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserRecoverDataRpg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserRecoverDataRpg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserCurrencyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserCurrencyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserResourceData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserResourceData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserResourceCalculateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserResourceCalculateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserSubGoldByInnerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserSubGoldByInnerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserSimpleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserSimpleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserSimpleInfoWithStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserSimpleInfoWithStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserSimpleInfoWithAlly_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserSimpleInfoWithAlly_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserGetArrUserDataRpgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserGetArrUserDataRpgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserGetArrUserDataRpgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserGetArrUserDataRpgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserFightForceRankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserFightForceRankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserFightForceRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserFightForceRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserFightForceRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserFightForceRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserLevelRankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserLevelRankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserLevelRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserLevelRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserLevelRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserLevelRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserSetPlayerImageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserSetPlayerImageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserSetSignWordsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserSetSignWordsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserSetModelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserSetModelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserChangeUnameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserChangeUnameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserBuySilverCoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserBuySilverCoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserBuySilverCoinSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserBuySilverCoinSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserBuySilverCoinRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserBuySilverCoinRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserBuyExecuteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserBuyExecuteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserGetRandomNameArrReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserGetRandomNameArrReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserGetRandomNameArrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserGetRandomNameArrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserGetGuildWarUserSyncInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserGetGuildWarUserSyncInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserExchangeGenderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserExchangeGenderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserUgcMessageBeLiked_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserUgcMessageBeLiked_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserFightForceChangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserFightForceChangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserUgcGetArrUserDataRpgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserUgcGetArrUserDataRpgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserUgcSimpleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserUgcSimpleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserUgcGetArrUserDataRpgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserUgcGetArrUserDataRpgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserSetShowVipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserSetShowVipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserGetSelfRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserGetSelfRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserPlayerImageFrameArrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserPlayerImageFrameArrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserPlayerImageFrameArrPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserPlayerImageFrameArrPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserSetCanStrangerChatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserSetCanStrangerChatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserSetRefuseLowAdventureReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserSetRefuseLowAdventureReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserGetAndRefreshFightForceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserGetAndRefreshFightForceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserGetAndRefreshFightForceRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserGetAndRefreshFightForceRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserSendChannelEmailRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserSendChannelEmailRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EModuleId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fUser_2eproto() {
  protobuf_AddDesc_net_2fUser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/User.proto");
  GOOGLE_CHECK(file != NULL);
  TModuleTime_descriptor_ = file->message_type(0);
  static const int TModuleTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TModuleTime, moduleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TModuleTime, updatetime_),
  };
  TModuleTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TModuleTime_descriptor_,
      TModuleTime::default_instance_,
      TModuleTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TModuleTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TModuleTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TModuleTime));
  TModuleInfos_descriptor_ = file->message_type(1);
  static const int TModuleInfos_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TModuleInfos, getuserdatarpgrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TModuleInfos, getherodataarrayrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TModuleInfos, getbagdatarsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TModuleInfos, arrfrontstoreinfo_),
  };
  TModuleInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TModuleInfos_descriptor_,
      TModuleInfos::default_instance_,
      TModuleInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TModuleInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TModuleInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TModuleInfos));
  TUserLoginReq_descriptor_ = file->message_type(2);
  static const int TUserLoginReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLoginReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLoginReq, moduletimes_),
  };
  TUserLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserLoginReq_descriptor_,
      TUserLoginReq::default_instance_,
      TUserLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserLoginReq));
  TUserLoginRsp_descriptor_ = file->message_type(3);
  static const int TUserLoginRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLoginRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLoginRsp, banmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLoginRsp, bantime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLoginRsp, moduleinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLoginRsp, os_),
  };
  TUserLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserLoginRsp_descriptor_,
      TUserLoginRsp::default_instance_,
      TUserLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserLoginRsp));
  TUserGetUserDataRpgReq_descriptor_ = file->message_type(4);
  static const int TUserGetUserDataRpgReq_offsets_[1] = {
  };
  TUserGetUserDataRpgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserGetUserDataRpgReq_descriptor_,
      TUserGetUserDataRpgReq::default_instance_,
      TUserGetUserDataRpgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetUserDataRpgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetUserDataRpgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserGetUserDataRpgReq));
  TUserGetUserDataSlgReq_descriptor_ = file->message_type(5);
  static const int TUserGetUserDataSlgReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetUserDataSlgReq, uid_),
  };
  TUserGetUserDataSlgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserGetUserDataSlgReq_descriptor_,
      TUserGetUserDataSlgReq::default_instance_,
      TUserGetUserDataSlgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetUserDataSlgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetUserDataSlgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserGetUserDataSlgReq));
  TBaseUserData_descriptor_ = file->message_type(6);
  static const int TBaseUserData_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, recoverdataarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, currencydataarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, resourcedataarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, resourceupdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, playerimageframetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, signwords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, playermodelhtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, silvercoinfreenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, silvercoinbuynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, executebuynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, maxfightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, shopcoinfreereceivenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, isshowvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, canstrangerchat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, isrefuselowadventure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, cashcoupon_),
  };
  TBaseUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBaseUserData_descriptor_,
      TBaseUserData::default_instance_,
      TBaseUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBaseUserData));
  TUserGetUserDataRpgRsp_descriptor_ = file->message_type(7);
  static const int TUserGetUserDataRpgRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetUserDataRpgRsp, userdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetUserDataRpgRsp, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetUserDataRpgRsp, channelemailnum_),
  };
  TUserGetUserDataRpgRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserGetUserDataRpgRsp_descriptor_,
      TUserGetUserDataRpgRsp::default_instance_,
      TUserGetUserDataRpgRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetUserDataRpgRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetUserDataRpgRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserGetUserDataRpgRsp));
  TUserUpdateUserDataRpgNotify_descriptor_ = file->message_type(8);
  static const int TUserUpdateUserDataRpgNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserUpdateUserDataRpgNotify, userdata_),
  };
  TUserUpdateUserDataRpgNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserUpdateUserDataRpgNotify_descriptor_,
      TUserUpdateUserDataRpgNotify::default_instance_,
      TUserUpdateUserDataRpgNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserUpdateUserDataRpgNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserUpdateUserDataRpgNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserUpdateUserDataRpgNotify));
  TUserRecoverDataRpg_descriptor_ = file->message_type(9);
  static const int TUserRecoverDataRpg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserRecoverDataRpg, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserRecoverDataRpg, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserRecoverDataRpg, recovertime_),
  };
  TUserRecoverDataRpg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserRecoverDataRpg_descriptor_,
      TUserRecoverDataRpg::default_instance_,
      TUserRecoverDataRpg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserRecoverDataRpg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserRecoverDataRpg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserRecoverDataRpg));
  TUserCurrencyData_descriptor_ = file->message_type(10);
  static const int TUserCurrencyData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserCurrencyData, currencytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserCurrencyData, currencynum_),
  };
  TUserCurrencyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserCurrencyData_descriptor_,
      TUserCurrencyData::default_instance_,
      TUserCurrencyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserCurrencyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserCurrencyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserCurrencyData));
  TUserResourceData_descriptor_ = file->message_type(11);
  static const int TUserResourceData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserResourceData, resourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserResourceData, resourcenum_),
  };
  TUserResourceData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserResourceData_descriptor_,
      TUserResourceData::default_instance_,
      TUserResourceData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserResourceData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserResourceData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserResourceData));
  TUserResourceCalculateRsp_descriptor_ = file->message_type(12);
  static const int TUserResourceCalculateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserResourceCalculateRsp, resourcearray_),
  };
  TUserResourceCalculateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserResourceCalculateRsp_descriptor_,
      TUserResourceCalculateRsp::default_instance_,
      TUserResourceCalculateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserResourceCalculateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserResourceCalculateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserResourceCalculateRsp));
  TUserSubGoldByInnerReq_descriptor_ = file->message_type(13);
  static const int TUserSubGoldByInnerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSubGoldByInnerReq, subnum_),
  };
  TUserSubGoldByInnerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserSubGoldByInnerReq_descriptor_,
      TUserSubGoldByInnerReq::default_instance_,
      TUserSubGoldByInnerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSubGoldByInnerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSubGoldByInnerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserSubGoldByInnerReq));
  TUserSimpleInfo_descriptor_ = file->message_type(14);
  static const int TUserSimpleInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, playerimageframetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, curmount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, masterhtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, playermodelherostar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, bannername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, bannerbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, isshowvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, canstrangerchat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, isrefuselowadventure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, chatframetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, maxfightforce_),
  };
  TUserSimpleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserSimpleInfo_descriptor_,
      TUserSimpleInfo::default_instance_,
      TUserSimpleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserSimpleInfo));
  TUserSimpleInfoWithStatus_descriptor_ = file->message_type(15);
  static const int TUserSimpleInfoWithStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfoWithStatus, simpleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfoWithStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfoWithStatus, logofftime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfoWithStatus, signwords_),
  };
  TUserSimpleInfoWithStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserSimpleInfoWithStatus_descriptor_,
      TUserSimpleInfoWithStatus::default_instance_,
      TUserSimpleInfoWithStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfoWithStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfoWithStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserSimpleInfoWithStatus));
  TUserSimpleInfoWithAlly_descriptor_ = file->message_type(16);
  static const int TUserSimpleInfoWithAlly_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfoWithAlly, simpleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfoWithAlly, allyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfoWithAlly, allyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfoWithAlly, bannername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfoWithAlly, bannerbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfoWithAlly, bannerfigure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfoWithAlly, fightforce_),
  };
  TUserSimpleInfoWithAlly_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserSimpleInfoWithAlly_descriptor_,
      TUserSimpleInfoWithAlly::default_instance_,
      TUserSimpleInfoWithAlly_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfoWithAlly, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSimpleInfoWithAlly, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserSimpleInfoWithAlly));
  TUserGetArrUserDataRpgReq_descriptor_ = file->message_type(17);
  static const int TUserGetArrUserDataRpgReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetArrUserDataRpgReq, uidarray_),
  };
  TUserGetArrUserDataRpgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserGetArrUserDataRpgReq_descriptor_,
      TUserGetArrUserDataRpgReq::default_instance_,
      TUserGetArrUserDataRpgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetArrUserDataRpgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetArrUserDataRpgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserGetArrUserDataRpgReq));
  TUserGetArrUserDataRpgRsp_descriptor_ = file->message_type(18);
  static const int TUserGetArrUserDataRpgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetArrUserDataRpgRsp, userdataarray_),
  };
  TUserGetArrUserDataRpgRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserGetArrUserDataRpgRsp_descriptor_,
      TUserGetArrUserDataRpgRsp::default_instance_,
      TUserGetArrUserDataRpgRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetArrUserDataRpgRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetArrUserDataRpgRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserGetArrUserDataRpgRsp));
  TUserFightForceRankItem_descriptor_ = file->message_type(19);
  static const int TUserFightForceRankItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserFightForceRankItem, userinfo_),
  };
  TUserFightForceRankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserFightForceRankItem_descriptor_,
      TUserFightForceRankItem::default_instance_,
      TUserFightForceRankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserFightForceRankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserFightForceRankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserFightForceRankItem));
  TUserFightForceRankReq_descriptor_ = file->message_type(20);
  static const int TUserFightForceRankReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserFightForceRankReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserFightForceRankReq, limit_),
  };
  TUserFightForceRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserFightForceRankReq_descriptor_,
      TUserFightForceRankReq::default_instance_,
      TUserFightForceRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserFightForceRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserFightForceRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserFightForceRankReq));
  TUserFightForceRankRsp_descriptor_ = file->message_type(21);
  static const int TUserFightForceRankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserFightForceRankRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserFightForceRankRsp, myrank_),
  };
  TUserFightForceRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserFightForceRankRsp_descriptor_,
      TUserFightForceRankRsp::default_instance_,
      TUserFightForceRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserFightForceRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserFightForceRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserFightForceRankRsp));
  TUserLevelRankItem_descriptor_ = file->message_type(22);
  static const int TUserLevelRankItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLevelRankItem, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLevelRankItem, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLevelRankItem, expchangetime_),
  };
  TUserLevelRankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserLevelRankItem_descriptor_,
      TUserLevelRankItem::default_instance_,
      TUserLevelRankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLevelRankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLevelRankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserLevelRankItem));
  TUserLevelRankReq_descriptor_ = file->message_type(23);
  static const int TUserLevelRankReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLevelRankReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLevelRankReq, limit_),
  };
  TUserLevelRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserLevelRankReq_descriptor_,
      TUserLevelRankReq::default_instance_,
      TUserLevelRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLevelRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLevelRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserLevelRankReq));
  TUserLevelRankRsp_descriptor_ = file->message_type(24);
  static const int TUserLevelRankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLevelRankRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLevelRankRsp, myrank_),
  };
  TUserLevelRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserLevelRankRsp_descriptor_,
      TUserLevelRankRsp::default_instance_,
      TUserLevelRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLevelRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserLevelRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserLevelRankRsp));
  TUserSetPlayerImageReq_descriptor_ = file->message_type(25);
  static const int TUserSetPlayerImageReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetPlayerImageReq, playerimageframetid_),
  };
  TUserSetPlayerImageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserSetPlayerImageReq_descriptor_,
      TUserSetPlayerImageReq::default_instance_,
      TUserSetPlayerImageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetPlayerImageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetPlayerImageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserSetPlayerImageReq));
  TUserSetSignWordsReq_descriptor_ = file->message_type(26);
  static const int TUserSetSignWordsReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetSignWordsReq, signwords_),
  };
  TUserSetSignWordsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserSetSignWordsReq_descriptor_,
      TUserSetSignWordsReq::default_instance_,
      TUserSetSignWordsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetSignWordsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetSignWordsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserSetSignWordsReq));
  TUserSetModelReq_descriptor_ = file->message_type(27);
  static const int TUserSetModelReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetModelReq, htid_),
  };
  TUserSetModelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserSetModelReq_descriptor_,
      TUserSetModelReq::default_instance_,
      TUserSetModelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetModelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetModelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserSetModelReq));
  TUserChangeUnameReq_descriptor_ = file->message_type(28);
  static const int TUserChangeUnameReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserChangeUnameReq, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserChangeUnameReq, nametype_),
  };
  TUserChangeUnameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserChangeUnameReq_descriptor_,
      TUserChangeUnameReq::default_instance_,
      TUserChangeUnameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserChangeUnameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserChangeUnameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserChangeUnameReq));
  TUserBuySilverCoinReq_descriptor_ = file->message_type(29);
  static const int TUserBuySilverCoinReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuySilverCoinReq, hasbuynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuySilverCoinReq, hasfreenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuySilverCoinReq, wantbuynum_),
  };
  TUserBuySilverCoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserBuySilverCoinReq_descriptor_,
      TUserBuySilverCoinReq::default_instance_,
      TUserBuySilverCoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuySilverCoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuySilverCoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserBuySilverCoinReq));
  TUserBuySilverCoinSingle_descriptor_ = file->message_type(30);
  static const int TUserBuySilverCoinSingle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuySilverCoinSingle, costgoldnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuySilverCoinSingle, buysilvercoinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuySilverCoinSingle, multiple_),
  };
  TUserBuySilverCoinSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserBuySilverCoinSingle_descriptor_,
      TUserBuySilverCoinSingle::default_instance_,
      TUserBuySilverCoinSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuySilverCoinSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuySilverCoinSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserBuySilverCoinSingle));
  TUserBuySilverCoinRsp_descriptor_ = file->message_type(31);
  static const int TUserBuySilverCoinRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuySilverCoinRsp, hasbuynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuySilverCoinRsp, hasfreenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuySilverCoinRsp, buyinfoarr_),
  };
  TUserBuySilverCoinRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserBuySilverCoinRsp_descriptor_,
      TUserBuySilverCoinRsp::default_instance_,
      TUserBuySilverCoinRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuySilverCoinRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuySilverCoinRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserBuySilverCoinRsp));
  TUserBuyExecuteReq_descriptor_ = file->message_type(32);
  static const int TUserBuyExecuteReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuyExecuteReq, hasbuynum_),
  };
  TUserBuyExecuteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserBuyExecuteReq_descriptor_,
      TUserBuyExecuteReq::default_instance_,
      TUserBuyExecuteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuyExecuteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserBuyExecuteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserBuyExecuteReq));
  TUserGetRandomNameArrReq_descriptor_ = file->message_type(33);
  static const int TUserGetRandomNameArrReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetRandomNameArrReq, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetRandomNameArrReq, csvtype_),
  };
  TUserGetRandomNameArrReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserGetRandomNameArrReq_descriptor_,
      TUserGetRandomNameArrReq::default_instance_,
      TUserGetRandomNameArrReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetRandomNameArrReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetRandomNameArrReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserGetRandomNameArrReq));
  TUserGetRandomNameArrRsp_descriptor_ = file->message_type(34);
  static const int TUserGetRandomNameArrRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetRandomNameArrRsp, randomnamearr_),
  };
  TUserGetRandomNameArrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserGetRandomNameArrRsp_descriptor_,
      TUserGetRandomNameArrRsp::default_instance_,
      TUserGetRandomNameArrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetRandomNameArrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetRandomNameArrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserGetRandomNameArrRsp));
  TUserGetGuildWarUserSyncInfoRsp_descriptor_ = file->message_type(35);
  static const int TUserGetGuildWarUserSyncInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetGuildWarUserSyncInfoRsp, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetGuildWarUserSyncInfoRsp, armyinfo_),
  };
  TUserGetGuildWarUserSyncInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserGetGuildWarUserSyncInfoRsp_descriptor_,
      TUserGetGuildWarUserSyncInfoRsp::default_instance_,
      TUserGetGuildWarUserSyncInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetGuildWarUserSyncInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetGuildWarUserSyncInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserGetGuildWarUserSyncInfoRsp));
  TUserExchangeGenderReq_descriptor_ = file->message_type(36);
  static const int TUserExchangeGenderReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserExchangeGenderReq, gender_),
  };
  TUserExchangeGenderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserExchangeGenderReq_descriptor_,
      TUserExchangeGenderReq::default_instance_,
      TUserExchangeGenderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserExchangeGenderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserExchangeGenderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserExchangeGenderReq));
  TUserUgcMessageBeLiked_descriptor_ = file->message_type(37);
  static const int TUserUgcMessageBeLiked_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserUgcMessageBeLiked, likeduid_),
  };
  TUserUgcMessageBeLiked_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserUgcMessageBeLiked_descriptor_,
      TUserUgcMessageBeLiked::default_instance_,
      TUserUgcMessageBeLiked_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserUgcMessageBeLiked, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserUgcMessageBeLiked, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserUgcMessageBeLiked));
  TUserFightForceChangeReq_descriptor_ = file->message_type(38);
  static const int TUserFightForceChangeReq_offsets_[1] = {
  };
  TUserFightForceChangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserFightForceChangeReq_descriptor_,
      TUserFightForceChangeReq::default_instance_,
      TUserFightForceChangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserFightForceChangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserFightForceChangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserFightForceChangeReq));
  TUserUgcGetArrUserDataRpgReq_descriptor_ = file->message_type(39);
  static const int TUserUgcGetArrUserDataRpgReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserUgcGetArrUserDataRpgReq, uidarray_),
  };
  TUserUgcGetArrUserDataRpgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserUgcGetArrUserDataRpgReq_descriptor_,
      TUserUgcGetArrUserDataRpgReq::default_instance_,
      TUserUgcGetArrUserDataRpgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserUgcGetArrUserDataRpgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserUgcGetArrUserDataRpgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserUgcGetArrUserDataRpgReq));
  TUserUgcSimpleInfo_descriptor_ = file->message_type(40);
  static const int TUserUgcSimpleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserUgcSimpleInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserUgcSimpleInfo, maxpassedchapter_),
  };
  TUserUgcSimpleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserUgcSimpleInfo_descriptor_,
      TUserUgcSimpleInfo::default_instance_,
      TUserUgcSimpleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserUgcSimpleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserUgcSimpleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserUgcSimpleInfo));
  TUserUgcGetArrUserDataRpgRsp_descriptor_ = file->message_type(41);
  static const int TUserUgcGetArrUserDataRpgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserUgcGetArrUserDataRpgRsp, userdataarray_),
  };
  TUserUgcGetArrUserDataRpgRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserUgcGetArrUserDataRpgRsp_descriptor_,
      TUserUgcGetArrUserDataRpgRsp::default_instance_,
      TUserUgcGetArrUserDataRpgRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserUgcGetArrUserDataRpgRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserUgcGetArrUserDataRpgRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserUgcGetArrUserDataRpgRsp));
  TUserSetShowVipReq_descriptor_ = file->message_type(42);
  static const int TUserSetShowVipReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetShowVipReq, isshowvip_),
  };
  TUserSetShowVipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserSetShowVipReq_descriptor_,
      TUserSetShowVipReq::default_instance_,
      TUserSetShowVipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetShowVipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetShowVipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserSetShowVipReq));
  TUserGetSelfRankRsp_descriptor_ = file->message_type(43);
  static const int TUserGetSelfRankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetSelfRankRsp, fightforcerankidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetSelfRankRsp, levelrankidx_),
  };
  TUserGetSelfRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserGetSelfRankRsp_descriptor_,
      TUserGetSelfRankRsp::default_instance_,
      TUserGetSelfRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetSelfRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetSelfRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserGetSelfRankRsp));
  TUserPlayerImageFrameArrRsp_descriptor_ = file->message_type(44);
  static const int TUserPlayerImageFrameArrRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserPlayerImageFrameArrRsp, framearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserPlayerImageFrameArrRsp, endtimearr_),
  };
  TUserPlayerImageFrameArrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserPlayerImageFrameArrRsp_descriptor_,
      TUserPlayerImageFrameArrRsp::default_instance_,
      TUserPlayerImageFrameArrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserPlayerImageFrameArrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserPlayerImageFrameArrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserPlayerImageFrameArrRsp));
  TUserPlayerImageFrameArrPush_descriptor_ = file->message_type(45);
  static const int TUserPlayerImageFrameArrPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserPlayerImageFrameArrPush, frametid_),
  };
  TUserPlayerImageFrameArrPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserPlayerImageFrameArrPush_descriptor_,
      TUserPlayerImageFrameArrPush::default_instance_,
      TUserPlayerImageFrameArrPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserPlayerImageFrameArrPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserPlayerImageFrameArrPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserPlayerImageFrameArrPush));
  TUserSetCanStrangerChatReq_descriptor_ = file->message_type(46);
  static const int TUserSetCanStrangerChatReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetCanStrangerChatReq, isallow_),
  };
  TUserSetCanStrangerChatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserSetCanStrangerChatReq_descriptor_,
      TUserSetCanStrangerChatReq::default_instance_,
      TUserSetCanStrangerChatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetCanStrangerChatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetCanStrangerChatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserSetCanStrangerChatReq));
  TUserSetRefuseLowAdventureReq_descriptor_ = file->message_type(47);
  static const int TUserSetRefuseLowAdventureReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetRefuseLowAdventureReq, isrefuse_),
  };
  TUserSetRefuseLowAdventureReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserSetRefuseLowAdventureReq_descriptor_,
      TUserSetRefuseLowAdventureReq::default_instance_,
      TUserSetRefuseLowAdventureReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetRefuseLowAdventureReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSetRefuseLowAdventureReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserSetRefuseLowAdventureReq));
  TUserGetAndRefreshFightForceReq_descriptor_ = file->message_type(48);
  static const int TUserGetAndRefreshFightForceReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetAndRefreshFightForceReq, uid_),
  };
  TUserGetAndRefreshFightForceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserGetAndRefreshFightForceReq_descriptor_,
      TUserGetAndRefreshFightForceReq::default_instance_,
      TUserGetAndRefreshFightForceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetAndRefreshFightForceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetAndRefreshFightForceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserGetAndRefreshFightForceReq));
  TUserGetAndRefreshFightForceRsp_descriptor_ = file->message_type(49);
  static const int TUserGetAndRefreshFightForceRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetAndRefreshFightForceRsp, fightforce_),
  };
  TUserGetAndRefreshFightForceRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserGetAndRefreshFightForceRsp_descriptor_,
      TUserGetAndRefreshFightForceRsp::default_instance_,
      TUserGetAndRefreshFightForceRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetAndRefreshFightForceRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserGetAndRefreshFightForceRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserGetAndRefreshFightForceRsp));
  TUserSendChannelEmailRsp_descriptor_ = file->message_type(50);
  static const int TUserSendChannelEmailRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSendChannelEmailRsp, emailnum_),
  };
  TUserSendChannelEmailRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserSendChannelEmailRsp_descriptor_,
      TUserSendChannelEmailRsp::default_instance_,
      TUserSendChannelEmailRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSendChannelEmailRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserSendChannelEmailRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserSendChannelEmailRsp));
  EModuleId_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fUser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TModuleTime_descriptor_, &TModuleTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TModuleInfos_descriptor_, &TModuleInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserLoginReq_descriptor_, &TUserLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserLoginRsp_descriptor_, &TUserLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserGetUserDataRpgReq_descriptor_, &TUserGetUserDataRpgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserGetUserDataSlgReq_descriptor_, &TUserGetUserDataSlgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBaseUserData_descriptor_, &TBaseUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserGetUserDataRpgRsp_descriptor_, &TUserGetUserDataRpgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserUpdateUserDataRpgNotify_descriptor_, &TUserUpdateUserDataRpgNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserRecoverDataRpg_descriptor_, &TUserRecoverDataRpg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserCurrencyData_descriptor_, &TUserCurrencyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserResourceData_descriptor_, &TUserResourceData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserResourceCalculateRsp_descriptor_, &TUserResourceCalculateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserSubGoldByInnerReq_descriptor_, &TUserSubGoldByInnerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserSimpleInfo_descriptor_, &TUserSimpleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserSimpleInfoWithStatus_descriptor_, &TUserSimpleInfoWithStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserSimpleInfoWithAlly_descriptor_, &TUserSimpleInfoWithAlly::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserGetArrUserDataRpgReq_descriptor_, &TUserGetArrUserDataRpgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserGetArrUserDataRpgRsp_descriptor_, &TUserGetArrUserDataRpgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserFightForceRankItem_descriptor_, &TUserFightForceRankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserFightForceRankReq_descriptor_, &TUserFightForceRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserFightForceRankRsp_descriptor_, &TUserFightForceRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserLevelRankItem_descriptor_, &TUserLevelRankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserLevelRankReq_descriptor_, &TUserLevelRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserLevelRankRsp_descriptor_, &TUserLevelRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserSetPlayerImageReq_descriptor_, &TUserSetPlayerImageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserSetSignWordsReq_descriptor_, &TUserSetSignWordsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserSetModelReq_descriptor_, &TUserSetModelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserChangeUnameReq_descriptor_, &TUserChangeUnameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserBuySilverCoinReq_descriptor_, &TUserBuySilverCoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserBuySilverCoinSingle_descriptor_, &TUserBuySilverCoinSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserBuySilverCoinRsp_descriptor_, &TUserBuySilverCoinRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserBuyExecuteReq_descriptor_, &TUserBuyExecuteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserGetRandomNameArrReq_descriptor_, &TUserGetRandomNameArrReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserGetRandomNameArrRsp_descriptor_, &TUserGetRandomNameArrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserGetGuildWarUserSyncInfoRsp_descriptor_, &TUserGetGuildWarUserSyncInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserExchangeGenderReq_descriptor_, &TUserExchangeGenderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserUgcMessageBeLiked_descriptor_, &TUserUgcMessageBeLiked::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserFightForceChangeReq_descriptor_, &TUserFightForceChangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserUgcGetArrUserDataRpgReq_descriptor_, &TUserUgcGetArrUserDataRpgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserUgcSimpleInfo_descriptor_, &TUserUgcSimpleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserUgcGetArrUserDataRpgRsp_descriptor_, &TUserUgcGetArrUserDataRpgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserSetShowVipReq_descriptor_, &TUserSetShowVipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserGetSelfRankRsp_descriptor_, &TUserGetSelfRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserPlayerImageFrameArrRsp_descriptor_, &TUserPlayerImageFrameArrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserPlayerImageFrameArrPush_descriptor_, &TUserPlayerImageFrameArrPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserSetCanStrangerChatReq_descriptor_, &TUserSetCanStrangerChatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserSetRefuseLowAdventureReq_descriptor_, &TUserSetRefuseLowAdventureReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserGetAndRefreshFightForceReq_descriptor_, &TUserGetAndRefreshFightForceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserGetAndRefreshFightForceRsp_descriptor_, &TUserGetAndRefreshFightForceRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserSendChannelEmailRsp_descriptor_, &TUserSendChannelEmailRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fUser_2eproto() {
  delete TModuleTime::default_instance_;
  delete TModuleTime_reflection_;
  delete TModuleInfos::default_instance_;
  delete TModuleInfos_reflection_;
  delete TUserLoginReq::default_instance_;
  delete TUserLoginReq_reflection_;
  delete TUserLoginRsp::default_instance_;
  delete TUserLoginRsp_reflection_;
  delete TUserGetUserDataRpgReq::default_instance_;
  delete TUserGetUserDataRpgReq_reflection_;
  delete TUserGetUserDataSlgReq::default_instance_;
  delete TUserGetUserDataSlgReq_reflection_;
  delete TBaseUserData::default_instance_;
  delete TBaseUserData_reflection_;
  delete TUserGetUserDataRpgRsp::default_instance_;
  delete TUserGetUserDataRpgRsp_reflection_;
  delete TUserUpdateUserDataRpgNotify::default_instance_;
  delete TUserUpdateUserDataRpgNotify_reflection_;
  delete TUserRecoverDataRpg::default_instance_;
  delete TUserRecoverDataRpg_reflection_;
  delete TUserCurrencyData::default_instance_;
  delete TUserCurrencyData_reflection_;
  delete TUserResourceData::default_instance_;
  delete TUserResourceData_reflection_;
  delete TUserResourceCalculateRsp::default_instance_;
  delete TUserResourceCalculateRsp_reflection_;
  delete TUserSubGoldByInnerReq::default_instance_;
  delete TUserSubGoldByInnerReq_reflection_;
  delete TUserSimpleInfo::default_instance_;
  delete TUserSimpleInfo_reflection_;
  delete TUserSimpleInfoWithStatus::default_instance_;
  delete TUserSimpleInfoWithStatus_reflection_;
  delete TUserSimpleInfoWithAlly::default_instance_;
  delete TUserSimpleInfoWithAlly_reflection_;
  delete TUserGetArrUserDataRpgReq::default_instance_;
  delete TUserGetArrUserDataRpgReq_reflection_;
  delete TUserGetArrUserDataRpgRsp::default_instance_;
  delete TUserGetArrUserDataRpgRsp_reflection_;
  delete TUserFightForceRankItem::default_instance_;
  delete TUserFightForceRankItem_reflection_;
  delete TUserFightForceRankReq::default_instance_;
  delete TUserFightForceRankReq_reflection_;
  delete TUserFightForceRankRsp::default_instance_;
  delete TUserFightForceRankRsp_reflection_;
  delete TUserLevelRankItem::default_instance_;
  delete TUserLevelRankItem_reflection_;
  delete TUserLevelRankReq::default_instance_;
  delete TUserLevelRankReq_reflection_;
  delete TUserLevelRankRsp::default_instance_;
  delete TUserLevelRankRsp_reflection_;
  delete TUserSetPlayerImageReq::default_instance_;
  delete TUserSetPlayerImageReq_reflection_;
  delete TUserSetSignWordsReq::default_instance_;
  delete TUserSetSignWordsReq_reflection_;
  delete TUserSetModelReq::default_instance_;
  delete TUserSetModelReq_reflection_;
  delete TUserChangeUnameReq::default_instance_;
  delete TUserChangeUnameReq_reflection_;
  delete TUserBuySilverCoinReq::default_instance_;
  delete TUserBuySilverCoinReq_reflection_;
  delete TUserBuySilverCoinSingle::default_instance_;
  delete TUserBuySilverCoinSingle_reflection_;
  delete TUserBuySilverCoinRsp::default_instance_;
  delete TUserBuySilverCoinRsp_reflection_;
  delete TUserBuyExecuteReq::default_instance_;
  delete TUserBuyExecuteReq_reflection_;
  delete TUserGetRandomNameArrReq::default_instance_;
  delete TUserGetRandomNameArrReq_reflection_;
  delete TUserGetRandomNameArrRsp::default_instance_;
  delete TUserGetRandomNameArrRsp_reflection_;
  delete TUserGetGuildWarUserSyncInfoRsp::default_instance_;
  delete TUserGetGuildWarUserSyncInfoRsp_reflection_;
  delete TUserExchangeGenderReq::default_instance_;
  delete TUserExchangeGenderReq_reflection_;
  delete TUserUgcMessageBeLiked::default_instance_;
  delete TUserUgcMessageBeLiked_reflection_;
  delete TUserFightForceChangeReq::default_instance_;
  delete TUserFightForceChangeReq_reflection_;
  delete TUserUgcGetArrUserDataRpgReq::default_instance_;
  delete TUserUgcGetArrUserDataRpgReq_reflection_;
  delete TUserUgcSimpleInfo::default_instance_;
  delete TUserUgcSimpleInfo_reflection_;
  delete TUserUgcGetArrUserDataRpgRsp::default_instance_;
  delete TUserUgcGetArrUserDataRpgRsp_reflection_;
  delete TUserSetShowVipReq::default_instance_;
  delete TUserSetShowVipReq_reflection_;
  delete TUserGetSelfRankRsp::default_instance_;
  delete TUserGetSelfRankRsp_reflection_;
  delete TUserPlayerImageFrameArrRsp::default_instance_;
  delete TUserPlayerImageFrameArrRsp_reflection_;
  delete TUserPlayerImageFrameArrPush::default_instance_;
  delete TUserPlayerImageFrameArrPush_reflection_;
  delete TUserSetCanStrangerChatReq::default_instance_;
  delete TUserSetCanStrangerChatReq_reflection_;
  delete TUserSetRefuseLowAdventureReq::default_instance_;
  delete TUserSetRefuseLowAdventureReq_reflection_;
  delete TUserGetAndRefreshFightForceReq::default_instance_;
  delete TUserGetAndRefreshFightForceReq_reflection_;
  delete TUserGetAndRefreshFightForceRsp::default_instance_;
  delete TUserGetAndRefreshFightForceRsp_reflection_;
  delete TUserSendChannelEmailRsp::default_instance_;
  delete TUserSendChannelEmailRsp_reflection_;
}

void protobuf_AddDesc_net_2fUser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fHero_2eproto();
  ::pb::protobuf_AddDesc_net_2fBag_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fFrontStore_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016net/User.proto\022\002pb\032\016net/Hero.proto\032\rne"
    "t/Bag.proto\032\020net/Battle.proto\032\024net/Front"
    "Store.proto\"B\n\013TModuleTime\022\037\n\010ModuleId\030\001"
    " \001(\0162\r.pb.EModuleId\022\022\n\nUpdateTime\030\002 \001(\004\""
    "\321\001\n\014TModuleInfos\0225\n\021GetUserDataRpgRsp\030\001 "
    "\001(\0132\032.pb.TUserGetUserDataRpgRsp\0229\n\023GetHe"
    "roDataArrayRsp\030\002 \001(\0132\034.pb.THeroGetHeroDa"
    "taArrayRsp\022#\n\rGetBagDataRsp\030\003 \001(\0132\014.pb.T"
    "BagData\022*\n\021ArrFrontStoreInfo\030\004 \003(\0132\017.pb."
    "TFrontStore\"B\n\rTUserLoginReq\022\013\n\003Uid\030\001 \001("
    "\004\022$\n\013ModuleTimes\030\002 \003(\0132\017.pb.TModuleTime\""
    "p\n\rTUserLoginRsp\022\013\n\003Ret\030\001 \001(\t\022\016\n\006BanMsg\030"
    "\002 \001(\t\022\017\n\007BanTime\030\003 \001(\004\022%\n\013ModuleInfos\030\004 "
    "\001(\0132\020.pb.TModuleInfos\022\n\n\002OS\030\005 \001(\005\"\030\n\026TUs"
    "erGetUserDataRpgReq\"%\n\026TUserGetUserDataS"
    "lgReq\022\013\n\003Uid\030\001 \001(\004\"\370\004\n\rTBaseUserData\022\r\n\005"
    "Uname\030\001 \001(\t\022\013\n\003Exp\030\003 \001(\005\022\r\n\005Level\030\004 \001(\005\022"
    "\014\n\004Gold\030\005 \001(\005\022\016\n\006VipExp\030\006 \001(\005\022\014\n\004Coin\030\007 "
    "\001(\003\0221\n\020RecoverDataArray\030\t \003(\0132\027.pb.TUser"
    "RecoverDataRpg\022\020\n\010VipLevel\030\n \001(\005\0220\n\021Curr"
    "encyDataArray\030\013 \003(\0132\025.pb.TUserCurrencyDa"
    "ta\0220\n\021ResourceDataArray\030\014 \003(\0132\025.pb.TUser"
    "ResourceData\022\032\n\022ResourceUpdateTime\030\r \001(\003"
    "\022\022\n\nCreateTime\030\016 \001(\003\022\033\n\023PlayerImageFrame"
    "Tid\030\020 \001(\005\022\021\n\tSignWords\030\021 \001(\t\022\027\n\017PlayerMo"
    "delHtid\030\022 \001(\005\022\031\n\021SilverCoinFreeNum\030\024 \001(\005"
    "\022\030\n\020SilverCoinBuyNum\030\025 \001(\005\022\025\n\rExecuteBuy"
    "Num\030\026 \001(\005\022\r\n\005Title\030\027 \001(\005\022\025\n\rMaxFightForc"
    "e\030\030 \001(\004\022\036\n\026ShopCoinFreeReceiveNum\030\031 \001(\r\022"
    "\021\n\tIsShowVip\030\032 \001(\r\022\027\n\017CanStrangerChat\030\033 "
    "\001(\r\022\034\n\024IsRefuseLowAdventure\030\034 \001(\r\022\022\n\nCas"
    "hCoupon\030\035 \001(\r\"j\n\026TUserGetUserDataRpgRsp\022"
    "#\n\010UserData\030\001 \001(\0132\021.pb.TBaseUserData\022\022\n\n"
    "ServerTime\030\002 \001(\003\022\027\n\017ChannelEmailNum\030\003 \001("
    "\r\"C\n\034TUserUpdateUserDataRpgNotify\022#\n\010Use"
    "rData\030\001 \001(\0132\021.pb.TBaseUserData\"F\n\023TUserR"
    "ecoverDataRpg\022\013\n\003Tid\030\001 \001(\005\022\r\n\005Value\030\002 \001("
    "\003\022\023\n\013RecoverTime\030\003 \001(\003\">\n\021TUserCurrencyD"
    "ata\022\024\n\014CurrencyType\030\001 \001(\r\022\023\n\013CurrencyNum"
    "\030\002 \001(\004\">\n\021TUserResourceData\022\024\n\014ResourceT"
    "ype\030\001 \001(\r\022\023\n\013ResourceNum\030\002 \001(\004\"I\n\031TUserR"
    "esourceCalculateRsp\022,\n\rResourceArray\030\001 \003"
    "(\0132\025.pb.TUserResourceData\"(\n\026TUserSubGol"
    "dByInnerReq\022\016\n\006SubNum\030\001 \001(\r\"\264\003\n\017TUserSim"
    "pleInfo\022\013\n\003Uid\030\001 \001(\004\022\r\n\005Uname\030\002 \001(\t\022\014\n\004H"
    "tid\030\003 \001(\r\022\r\n\005Level\030\004 \001(\r\022\020\n\010VipLevel\030\005 \001"
    "(\r\022\022\n\nFightForce\030\006 \001(\004\022\017\n\007GuildId\030\007 \001(\004\022"
    "\021\n\tGuildName\030\010 \001(\t\022\033\n\023PlayerImageFrameTi"
    "d\030\t \001(\r\022\020\n\010CurMount\030\n \001(\r\022\022\n\nMasterHtid\030"
    "\013 \001(\r\022\r\n\005Title\030\014 \001(\r\022\033\n\023PlayerModelHeroS"
    "tar\030\r \001(\r\022\022\n\nBannerName\030\016 \001(\t\022\022\n\nBannerB"
    "ase\030\017 \001(\r\022\021\n\tIsShowVip\030\020 \001(\r\022\027\n\017CanStran"
    "gerChat\030\021 \001(\r\022\034\n\024IsRefuseLowAdventure\030\022 "
    "\001(\r\022\020\n\010ServerId\030\023 \001(\t\022\024\n\014ChatFrameTid\030\024 "
    "\001(\r\022\025\n\rMaxFightForce\030\025 \001(\004\"{\n\031TUserSimpl"
    "eInfoWithStatus\022\'\n\nSimpleInfo\030\001 \001(\0132\023.pb"
    ".TUserSimpleInfo\022\016\n\006Status\030\002 \001(\r\022\022\n\nLogo"
    "ffTime\030\003 \001(\004\022\021\n\tSignWords\030\004 \001(\t\"\266\001\n\027TUse"
    "rSimpleInfoWithAlly\022\'\n\nSimpleInfo\030\001 \001(\0132"
    "\023.pb.TUserSimpleInfo\022\020\n\010AllyName\030\002 \001(\t\022\016"
    "\n\006AllyId\030\003 \001(\004\022\022\n\nBannerName\030\004 \001(\t\022\022\n\nBa"
    "nnerBase\030\005 \001(\r\022\024\n\014BannerFigure\030\006 \001(\r\022\022\n\n"
    "FightForce\030\007 \001(\004\"-\n\031TUserGetArrUserDataR"
    "pgReq\022\020\n\010UidArray\030\001 \003(\004\"G\n\031TUserGetArrUs"
    "erDataRpgRsp\022*\n\rUserDataArray\030\001 \003(\0132\023.pb"
    ".TUserSimpleInfo\"@\n\027TUserFightForceRankI"
    "tem\022%\n\010UserInfo\030\001 \001(\0132\023.pb.TUserSimpleIn"
    "fo\"7\n\026TUserFightForceRankReq\022\016\n\006Offset\030\001"
    " \001(\005\022\r\n\005Limit\030\002 \001(\005\"V\n\026TUserFightForceRa"
    "nkRsp\022,\n\007RankArr\030\001 \003(\0132\033.pb.TUserFightFo"
    "rceRankItem\022\016\n\006MyRank\030\002 \001(\005\"_\n\022TUserLeve"
    "lRankItem\022%\n\010UserInfo\030\001 \001(\0132\023.pb.TUserSi"
    "mpleInfo\022\013\n\003Exp\030\002 \001(\r\022\025\n\rExpChangeTime\030\003"
    " \001(\004\"2\n\021TUserLevelRankReq\022\016\n\006Offset\030\001 \001("
    "\005\022\r\n\005Limit\030\002 \001(\005\"L\n\021TUserLevelRankRsp\022\'\n"
    "\007RankArr\030\001 \003(\0132\026.pb.TUserLevelRankItem\022\016"
    "\n\006MyRank\030\002 \001(\005\"5\n\026TUserSetPlayerImageReq"
    "\022\033\n\023PlayerImageFrameTid\030\001 \001(\005\")\n\024TUserSe"
    "tSignWordsReq\022\021\n\tSignWords\030\001 \001(\t\" \n\020TUse"
    "rSetModelReq\022\014\n\004Htid\030\001 \001(\005\"6\n\023TUserChang"
    "eUnameReq\022\r\n\005Uname\030\001 \001(\t\022\020\n\010NameType\030\002 \001"
    "(\r\"R\n\025TUserBuySilverCoinReq\022\021\n\tHasBuyNum"
    "\030\001 \001(\005\022\022\n\nHasFreeNum\030\002 \001(\005\022\022\n\nWantBuyNum"
    "\030\003 \001(\005\"[\n\030TUserBuySilverCoinSingle\022\023\n\013Co"
    "stGoldNum\030\001 \001(\005\022\030\n\020BuySilverCoinNum\030\002 \001("
    "\005\022\020\n\010Multiple\030\003 \001(\005\"p\n\025TUserBuySilverCoi"
    "nRsp\022\021\n\tHasBuyNum\030\001 \001(\005\022\022\n\nHasFreeNum\030\002 "
    "\001(\005\0220\n\nBuyInfoArr\030\003 \003(\0132\034.pb.TUserBuySil"
    "verCoinSingle\"\'\n\022TUserBuyExecuteReq\022\021\n\tH"
    "asBuyNum\030\001 \001(\005\";\n\030TUserGetRandomNameArrR"
    "eq\022\016\n\006Gender\030\001 \001(\r\022\017\n\007CsvType\030\002 \001(\r\"1\n\030T"
    "UserGetRandomNameArrRsp\022\025\n\rRandomNameArr"
    "\030\001 \003(\t\"i\n\037TUserGetGuildWarUserSyncInfoRs"
    "p\022%\n\010UserInfo\030\001 \001(\0132\023.pb.TUserSimpleInfo"
    "\022\037\n\010ArmyInfo\030\002 \001(\0132\r.pb.TArmyInfo\"(\n\026TUs"
    "erExchangeGenderReq\022\016\n\006Gender\030\001 \001(\r\"*\n\026T"
    "UserUgcMessageBeLiked\022\020\n\010LikedUid\030\001 \001(\004\""
    "\032\n\030TUserFightForceChangeReq\"0\n\034TUserUgcG"
    "etArrUserDataRpgReq\022\020\n\010UidArray\030\001 \003(\004\"U\n"
    "\022TUserUgcSimpleInfo\022%\n\010UserInfo\030\001 \001(\0132\023."
    "pb.TUserSimpleInfo\022\030\n\020MaxPassedChapter\030\002"
    " \001(\r\"M\n\034TUserUgcGetArrUserDataRpgRsp\022-\n\r"
    "UserDataArray\030\001 \003(\0132\026.pb.TUserUgcSimpleI"
    "nfo\"\'\n\022TUserSetShowVipReq\022\021\n\tIsShowVip\030\001"
    " \001(\r\"F\n\023TUserGetSelfRankRsp\022\031\n\021FightForc"
    "eRankIdx\030\001 \001(\005\022\024\n\014LevelRankIdx\030\002 \001(\005\"C\n\033"
    "TUserPlayerImageFrameArrRsp\022\020\n\010FrameArr\030"
    "\001 \003(\005\022\022\n\nEndTimeArr\030\002 \003(\004\"0\n\034TUserPlayer"
    "ImageFrameArrPush\022\020\n\010FrameTid\030\001 \001(\005\"-\n\032T"
    "UserSetCanStrangerChatReq\022\017\n\007IsAllow\030\001 \001"
    "(\r\"1\n\035TUserSetRefuseLowAdventureReq\022\020\n\010I"
    "sRefuse\030\001 \001(\r\".\n\037TUserGetAndRefreshFight"
    "ForceReq\022\013\n\003Uid\030\001 \001(\004\"5\n\037TUserGetAndRefr"
    "eshFightForceRsp\022\022\n\nFightForce\030\001 \001(\004\",\n\030"
    "TUserSendChannelEmailRsp\022\020\n\010EmailNum\030\001 \001"
    "(\r*(\n\tEModuleId\022\010\n\004USER\020\001\022\010\n\004HERO\020\002\022\007\n\003B"
    "AG\020\003", 4644);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/User.proto", &protobuf_RegisterTypes);
  TModuleTime::default_instance_ = new TModuleTime();
  TModuleInfos::default_instance_ = new TModuleInfos();
  TUserLoginReq::default_instance_ = new TUserLoginReq();
  TUserLoginRsp::default_instance_ = new TUserLoginRsp();
  TUserGetUserDataRpgReq::default_instance_ = new TUserGetUserDataRpgReq();
  TUserGetUserDataSlgReq::default_instance_ = new TUserGetUserDataSlgReq();
  TBaseUserData::default_instance_ = new TBaseUserData();
  TUserGetUserDataRpgRsp::default_instance_ = new TUserGetUserDataRpgRsp();
  TUserUpdateUserDataRpgNotify::default_instance_ = new TUserUpdateUserDataRpgNotify();
  TUserRecoverDataRpg::default_instance_ = new TUserRecoverDataRpg();
  TUserCurrencyData::default_instance_ = new TUserCurrencyData();
  TUserResourceData::default_instance_ = new TUserResourceData();
  TUserResourceCalculateRsp::default_instance_ = new TUserResourceCalculateRsp();
  TUserSubGoldByInnerReq::default_instance_ = new TUserSubGoldByInnerReq();
  TUserSimpleInfo::default_instance_ = new TUserSimpleInfo();
  TUserSimpleInfoWithStatus::default_instance_ = new TUserSimpleInfoWithStatus();
  TUserSimpleInfoWithAlly::default_instance_ = new TUserSimpleInfoWithAlly();
  TUserGetArrUserDataRpgReq::default_instance_ = new TUserGetArrUserDataRpgReq();
  TUserGetArrUserDataRpgRsp::default_instance_ = new TUserGetArrUserDataRpgRsp();
  TUserFightForceRankItem::default_instance_ = new TUserFightForceRankItem();
  TUserFightForceRankReq::default_instance_ = new TUserFightForceRankReq();
  TUserFightForceRankRsp::default_instance_ = new TUserFightForceRankRsp();
  TUserLevelRankItem::default_instance_ = new TUserLevelRankItem();
  TUserLevelRankReq::default_instance_ = new TUserLevelRankReq();
  TUserLevelRankRsp::default_instance_ = new TUserLevelRankRsp();
  TUserSetPlayerImageReq::default_instance_ = new TUserSetPlayerImageReq();
  TUserSetSignWordsReq::default_instance_ = new TUserSetSignWordsReq();
  TUserSetModelReq::default_instance_ = new TUserSetModelReq();
  TUserChangeUnameReq::default_instance_ = new TUserChangeUnameReq();
  TUserBuySilverCoinReq::default_instance_ = new TUserBuySilverCoinReq();
  TUserBuySilverCoinSingle::default_instance_ = new TUserBuySilverCoinSingle();
  TUserBuySilverCoinRsp::default_instance_ = new TUserBuySilverCoinRsp();
  TUserBuyExecuteReq::default_instance_ = new TUserBuyExecuteReq();
  TUserGetRandomNameArrReq::default_instance_ = new TUserGetRandomNameArrReq();
  TUserGetRandomNameArrRsp::default_instance_ = new TUserGetRandomNameArrRsp();
  TUserGetGuildWarUserSyncInfoRsp::default_instance_ = new TUserGetGuildWarUserSyncInfoRsp();
  TUserExchangeGenderReq::default_instance_ = new TUserExchangeGenderReq();
  TUserUgcMessageBeLiked::default_instance_ = new TUserUgcMessageBeLiked();
  TUserFightForceChangeReq::default_instance_ = new TUserFightForceChangeReq();
  TUserUgcGetArrUserDataRpgReq::default_instance_ = new TUserUgcGetArrUserDataRpgReq();
  TUserUgcSimpleInfo::default_instance_ = new TUserUgcSimpleInfo();
  TUserUgcGetArrUserDataRpgRsp::default_instance_ = new TUserUgcGetArrUserDataRpgRsp();
  TUserSetShowVipReq::default_instance_ = new TUserSetShowVipReq();
  TUserGetSelfRankRsp::default_instance_ = new TUserGetSelfRankRsp();
  TUserPlayerImageFrameArrRsp::default_instance_ = new TUserPlayerImageFrameArrRsp();
  TUserPlayerImageFrameArrPush::default_instance_ = new TUserPlayerImageFrameArrPush();
  TUserSetCanStrangerChatReq::default_instance_ = new TUserSetCanStrangerChatReq();
  TUserSetRefuseLowAdventureReq::default_instance_ = new TUserSetRefuseLowAdventureReq();
  TUserGetAndRefreshFightForceReq::default_instance_ = new TUserGetAndRefreshFightForceReq();
  TUserGetAndRefreshFightForceRsp::default_instance_ = new TUserGetAndRefreshFightForceRsp();
  TUserSendChannelEmailRsp::default_instance_ = new TUserSendChannelEmailRsp();
  TModuleTime::default_instance_->InitAsDefaultInstance();
  TModuleInfos::default_instance_->InitAsDefaultInstance();
  TUserLoginReq::default_instance_->InitAsDefaultInstance();
  TUserLoginRsp::default_instance_->InitAsDefaultInstance();
  TUserGetUserDataRpgReq::default_instance_->InitAsDefaultInstance();
  TUserGetUserDataSlgReq::default_instance_->InitAsDefaultInstance();
  TBaseUserData::default_instance_->InitAsDefaultInstance();
  TUserGetUserDataRpgRsp::default_instance_->InitAsDefaultInstance();
  TUserUpdateUserDataRpgNotify::default_instance_->InitAsDefaultInstance();
  TUserRecoverDataRpg::default_instance_->InitAsDefaultInstance();
  TUserCurrencyData::default_instance_->InitAsDefaultInstance();
  TUserResourceData::default_instance_->InitAsDefaultInstance();
  TUserResourceCalculateRsp::default_instance_->InitAsDefaultInstance();
  TUserSubGoldByInnerReq::default_instance_->InitAsDefaultInstance();
  TUserSimpleInfo::default_instance_->InitAsDefaultInstance();
  TUserSimpleInfoWithStatus::default_instance_->InitAsDefaultInstance();
  TUserSimpleInfoWithAlly::default_instance_->InitAsDefaultInstance();
  TUserGetArrUserDataRpgReq::default_instance_->InitAsDefaultInstance();
  TUserGetArrUserDataRpgRsp::default_instance_->InitAsDefaultInstance();
  TUserFightForceRankItem::default_instance_->InitAsDefaultInstance();
  TUserFightForceRankReq::default_instance_->InitAsDefaultInstance();
  TUserFightForceRankRsp::default_instance_->InitAsDefaultInstance();
  TUserLevelRankItem::default_instance_->InitAsDefaultInstance();
  TUserLevelRankReq::default_instance_->InitAsDefaultInstance();
  TUserLevelRankRsp::default_instance_->InitAsDefaultInstance();
  TUserSetPlayerImageReq::default_instance_->InitAsDefaultInstance();
  TUserSetSignWordsReq::default_instance_->InitAsDefaultInstance();
  TUserSetModelReq::default_instance_->InitAsDefaultInstance();
  TUserChangeUnameReq::default_instance_->InitAsDefaultInstance();
  TUserBuySilverCoinReq::default_instance_->InitAsDefaultInstance();
  TUserBuySilverCoinSingle::default_instance_->InitAsDefaultInstance();
  TUserBuySilverCoinRsp::default_instance_->InitAsDefaultInstance();
  TUserBuyExecuteReq::default_instance_->InitAsDefaultInstance();
  TUserGetRandomNameArrReq::default_instance_->InitAsDefaultInstance();
  TUserGetRandomNameArrRsp::default_instance_->InitAsDefaultInstance();
  TUserGetGuildWarUserSyncInfoRsp::default_instance_->InitAsDefaultInstance();
  TUserExchangeGenderReq::default_instance_->InitAsDefaultInstance();
  TUserUgcMessageBeLiked::default_instance_->InitAsDefaultInstance();
  TUserFightForceChangeReq::default_instance_->InitAsDefaultInstance();
  TUserUgcGetArrUserDataRpgReq::default_instance_->InitAsDefaultInstance();
  TUserUgcSimpleInfo::default_instance_->InitAsDefaultInstance();
  TUserUgcGetArrUserDataRpgRsp::default_instance_->InitAsDefaultInstance();
  TUserSetShowVipReq::default_instance_->InitAsDefaultInstance();
  TUserGetSelfRankRsp::default_instance_->InitAsDefaultInstance();
  TUserPlayerImageFrameArrRsp::default_instance_->InitAsDefaultInstance();
  TUserPlayerImageFrameArrPush::default_instance_->InitAsDefaultInstance();
  TUserSetCanStrangerChatReq::default_instance_->InitAsDefaultInstance();
  TUserSetRefuseLowAdventureReq::default_instance_->InitAsDefaultInstance();
  TUserGetAndRefreshFightForceReq::default_instance_->InitAsDefaultInstance();
  TUserGetAndRefreshFightForceRsp::default_instance_->InitAsDefaultInstance();
  TUserSendChannelEmailRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fUser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fUser_2eproto {
  StaticDescriptorInitializer_net_2fUser_2eproto() {
    protobuf_AddDesc_net_2fUser_2eproto();
  }
} static_descriptor_initializer_net_2fUser_2eproto_;
const ::google::protobuf::EnumDescriptor* EModuleId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EModuleId_descriptor_;
}
bool EModuleId_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TModuleTime::kModuleIdFieldNumber;
const int TModuleTime::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

TModuleTime::TModuleTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TModuleTime)
}

void TModuleTime::InitAsDefaultInstance() {
}

TModuleTime::TModuleTime(const TModuleTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TModuleTime)
}

void TModuleTime::SharedCtor() {
  _cached_size_ = 0;
  moduleid_ = 1;
  updatetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TModuleTime::~TModuleTime() {
  // @@protoc_insertion_point(destructor:pb.TModuleTime)
  SharedDtor();
}

void TModuleTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TModuleTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TModuleTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TModuleTime_descriptor_;
}

const TModuleTime& TModuleTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TModuleTime* TModuleTime::default_instance_ = NULL;

TModuleTime* TModuleTime::New() const {
  return new TModuleTime;
}

void TModuleTime::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    moduleid_ = 1;
    updatetime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TModuleTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TModuleTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EModuleId ModuleId = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EModuleId_IsValid(value)) {
            set_moduleid(static_cast< ::pb::EModuleId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UpdateTime;
        break;
      }

      // optional uint64 UpdateTime = 2;
      case 2: {
        if (tag == 16) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TModuleTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TModuleTime)
  return false;
#undef DO_
}

void TModuleTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TModuleTime)
  // optional .pb.EModuleId ModuleId = 1;
  if (has_moduleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->moduleid(), output);
  }

  // optional uint64 UpdateTime = 2;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TModuleTime)
}

::google::protobuf::uint8* TModuleTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TModuleTime)
  // optional .pb.EModuleId ModuleId = 1;
  if (has_moduleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->moduleid(), target);
  }

  // optional uint64 UpdateTime = 2;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TModuleTime)
  return target;
}

int TModuleTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EModuleId ModuleId = 1;
    if (has_moduleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->moduleid());
    }

    // optional uint64 UpdateTime = 2;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TModuleTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TModuleTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TModuleTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TModuleTime::MergeFrom(const TModuleTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moduleid()) {
      set_moduleid(from.moduleid());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TModuleTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TModuleTime::CopyFrom(const TModuleTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TModuleTime::IsInitialized() const {

  return true;
}

void TModuleTime::Swap(TModuleTime* other) {
  if (other != this) {
    std::swap(moduleid_, other->moduleid_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TModuleTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TModuleTime_descriptor_;
  metadata.reflection = TModuleTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TModuleInfos::kGetUserDataRpgRspFieldNumber;
const int TModuleInfos::kGetHeroDataArrayRspFieldNumber;
const int TModuleInfos::kGetBagDataRspFieldNumber;
const int TModuleInfos::kArrFrontStoreInfoFieldNumber;
#endif  // !_MSC_VER

TModuleInfos::TModuleInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TModuleInfos)
}

void TModuleInfos::InitAsDefaultInstance() {
  getuserdatarpgrsp_ = const_cast< ::pb::TUserGetUserDataRpgRsp*>(&::pb::TUserGetUserDataRpgRsp::default_instance());
  getherodataarrayrsp_ = const_cast< ::pb::THeroGetHeroDataArrayRsp*>(&::pb::THeroGetHeroDataArrayRsp::default_instance());
  getbagdatarsp_ = const_cast< ::pb::TBagData*>(&::pb::TBagData::default_instance());
}

TModuleInfos::TModuleInfos(const TModuleInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TModuleInfos)
}

void TModuleInfos::SharedCtor() {
  _cached_size_ = 0;
  getuserdatarpgrsp_ = NULL;
  getherodataarrayrsp_ = NULL;
  getbagdatarsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TModuleInfos::~TModuleInfos() {
  // @@protoc_insertion_point(destructor:pb.TModuleInfos)
  SharedDtor();
}

void TModuleInfos::SharedDtor() {
  if (this != default_instance_) {
    delete getuserdatarpgrsp_;
    delete getherodataarrayrsp_;
    delete getbagdatarsp_;
  }
}

void TModuleInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TModuleInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TModuleInfos_descriptor_;
}

const TModuleInfos& TModuleInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TModuleInfos* TModuleInfos::default_instance_ = NULL;

TModuleInfos* TModuleInfos::New() const {
  return new TModuleInfos;
}

void TModuleInfos::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_getuserdatarpgrsp()) {
      if (getuserdatarpgrsp_ != NULL) getuserdatarpgrsp_->::pb::TUserGetUserDataRpgRsp::Clear();
    }
    if (has_getherodataarrayrsp()) {
      if (getherodataarrayrsp_ != NULL) getherodataarrayrsp_->::pb::THeroGetHeroDataArrayRsp::Clear();
    }
    if (has_getbagdatarsp()) {
      if (getbagdatarsp_ != NULL) getbagdatarsp_->::pb::TBagData::Clear();
    }
  }
  arrfrontstoreinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TModuleInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TModuleInfos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserGetUserDataRpgRsp GetUserDataRpgRsp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getuserdatarpgrsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GetHeroDataArrayRsp;
        break;
      }

      // optional .pb.THeroGetHeroDataArrayRsp GetHeroDataArrayRsp = 2;
      case 2: {
        if (tag == 18) {
         parse_GetHeroDataArrayRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getherodataarrayrsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GetBagDataRsp;
        break;
      }

      // optional .pb.TBagData GetBagDataRsp = 3;
      case 3: {
        if (tag == 26) {
         parse_GetBagDataRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getbagdatarsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrFrontStoreInfo;
        break;
      }

      // repeated .pb.TFrontStore ArrFrontStoreInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_ArrFrontStoreInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrfrontstoreinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrFrontStoreInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TModuleInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TModuleInfos)
  return false;
#undef DO_
}

void TModuleInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TModuleInfos)
  // optional .pb.TUserGetUserDataRpgRsp GetUserDataRpgRsp = 1;
  if (has_getuserdatarpgrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->getuserdatarpgrsp(), output);
  }

  // optional .pb.THeroGetHeroDataArrayRsp GetHeroDataArrayRsp = 2;
  if (has_getherodataarrayrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->getherodataarrayrsp(), output);
  }

  // optional .pb.TBagData GetBagDataRsp = 3;
  if (has_getbagdatarsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->getbagdatarsp(), output);
  }

  // repeated .pb.TFrontStore ArrFrontStoreInfo = 4;
  for (int i = 0; i < this->arrfrontstoreinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arrfrontstoreinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TModuleInfos)
}

::google::protobuf::uint8* TModuleInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TModuleInfos)
  // optional .pb.TUserGetUserDataRpgRsp GetUserDataRpgRsp = 1;
  if (has_getuserdatarpgrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->getuserdatarpgrsp(), target);
  }

  // optional .pb.THeroGetHeroDataArrayRsp GetHeroDataArrayRsp = 2;
  if (has_getherodataarrayrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->getherodataarrayrsp(), target);
  }

  // optional .pb.TBagData GetBagDataRsp = 3;
  if (has_getbagdatarsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->getbagdatarsp(), target);
  }

  // repeated .pb.TFrontStore ArrFrontStoreInfo = 4;
  for (int i = 0; i < this->arrfrontstoreinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arrfrontstoreinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TModuleInfos)
  return target;
}

int TModuleInfos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserGetUserDataRpgRsp GetUserDataRpgRsp = 1;
    if (has_getuserdatarpgrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getuserdatarpgrsp());
    }

    // optional .pb.THeroGetHeroDataArrayRsp GetHeroDataArrayRsp = 2;
    if (has_getherodataarrayrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getherodataarrayrsp());
    }

    // optional .pb.TBagData GetBagDataRsp = 3;
    if (has_getbagdatarsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getbagdatarsp());
    }

  }
  // repeated .pb.TFrontStore ArrFrontStoreInfo = 4;
  total_size += 1 * this->arrfrontstoreinfo_size();
  for (int i = 0; i < this->arrfrontstoreinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrfrontstoreinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TModuleInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TModuleInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TModuleInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TModuleInfos::MergeFrom(const TModuleInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrfrontstoreinfo_.MergeFrom(from.arrfrontstoreinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_getuserdatarpgrsp()) {
      mutable_getuserdatarpgrsp()->::pb::TUserGetUserDataRpgRsp::MergeFrom(from.getuserdatarpgrsp());
    }
    if (from.has_getherodataarrayrsp()) {
      mutable_getherodataarrayrsp()->::pb::THeroGetHeroDataArrayRsp::MergeFrom(from.getherodataarrayrsp());
    }
    if (from.has_getbagdatarsp()) {
      mutable_getbagdatarsp()->::pb::TBagData::MergeFrom(from.getbagdatarsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TModuleInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TModuleInfos::CopyFrom(const TModuleInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TModuleInfos::IsInitialized() const {

  if (has_getbagdatarsp()) {
    if (!this->getbagdatarsp().IsInitialized()) return false;
  }
  return true;
}

void TModuleInfos::Swap(TModuleInfos* other) {
  if (other != this) {
    std::swap(getuserdatarpgrsp_, other->getuserdatarpgrsp_);
    std::swap(getherodataarrayrsp_, other->getherodataarrayrsp_);
    std::swap(getbagdatarsp_, other->getbagdatarsp_);
    arrfrontstoreinfo_.Swap(&other->arrfrontstoreinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TModuleInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TModuleInfos_descriptor_;
  metadata.reflection = TModuleInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserLoginReq::kUidFieldNumber;
const int TUserLoginReq::kModuleTimesFieldNumber;
#endif  // !_MSC_VER

TUserLoginReq::TUserLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserLoginReq)
}

void TUserLoginReq::InitAsDefaultInstance() {
}

TUserLoginReq::TUserLoginReq(const TUserLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserLoginReq)
}

void TUserLoginReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserLoginReq::~TUserLoginReq() {
  // @@protoc_insertion_point(destructor:pb.TUserLoginReq)
  SharedDtor();
}

void TUserLoginReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserLoginReq_descriptor_;
}

const TUserLoginReq& TUserLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserLoginReq* TUserLoginReq::default_instance_ = NULL;

TUserLoginReq* TUserLoginReq::New() const {
  return new TUserLoginReq;
}

void TUserLoginReq::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  moduletimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ModuleTimes;
        break;
      }

      // repeated .pb.TModuleTime ModuleTimes = 2;
      case 2: {
        if (tag == 18) {
         parse_ModuleTimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moduletimes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ModuleTimes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserLoginReq)
  return false;
#undef DO_
}

void TUserLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserLoginReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // repeated .pb.TModuleTime ModuleTimes = 2;
  for (int i = 0; i < this->moduletimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->moduletimes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserLoginReq)
}

::google::protobuf::uint8* TUserLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserLoginReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // repeated .pb.TModuleTime ModuleTimes = 2;
  for (int i = 0; i < this->moduletimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->moduletimes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserLoginReq)
  return target;
}

int TUserLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  // repeated .pb.TModuleTime ModuleTimes = 2;
  total_size += 1 * this->moduletimes_size();
  for (int i = 0; i < this->moduletimes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moduletimes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserLoginReq::MergeFrom(const TUserLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  moduletimes_.MergeFrom(from.moduletimes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserLoginReq::CopyFrom(const TUserLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserLoginReq::IsInitialized() const {

  return true;
}

void TUserLoginReq::Swap(TUserLoginReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    moduletimes_.Swap(&other->moduletimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserLoginReq_descriptor_;
  metadata.reflection = TUserLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserLoginRsp::kRetFieldNumber;
const int TUserLoginRsp::kBanMsgFieldNumber;
const int TUserLoginRsp::kBanTimeFieldNumber;
const int TUserLoginRsp::kModuleInfosFieldNumber;
const int TUserLoginRsp::kOSFieldNumber;
#endif  // !_MSC_VER

TUserLoginRsp::TUserLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserLoginRsp)
}

void TUserLoginRsp::InitAsDefaultInstance() {
  moduleinfos_ = const_cast< ::pb::TModuleInfos*>(&::pb::TModuleInfos::default_instance());
}

TUserLoginRsp::TUserLoginRsp(const TUserLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserLoginRsp)
}

void TUserLoginRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  banmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bantime_ = GOOGLE_ULONGLONG(0);
  moduleinfos_ = NULL;
  os_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserLoginRsp::~TUserLoginRsp() {
  // @@protoc_insertion_point(destructor:pb.TUserLoginRsp)
  SharedDtor();
}

void TUserLoginRsp::SharedDtor() {
  if (ret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ret_;
  }
  if (banmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete banmsg_;
  }
  if (this != default_instance_) {
    delete moduleinfos_;
  }
}

void TUserLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserLoginRsp_descriptor_;
}

const TUserLoginRsp& TUserLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserLoginRsp* TUserLoginRsp::default_instance_ = NULL;

TUserLoginRsp* TUserLoginRsp::New() const {
  return new TUserLoginRsp;
}

void TUserLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_ret()) {
      if (ret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ret_->clear();
      }
    }
    if (has_banmsg()) {
      if (banmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        banmsg_->clear();
      }
    }
    bantime_ = GOOGLE_ULONGLONG(0);
    if (has_moduleinfos()) {
      if (moduleinfos_ != NULL) moduleinfos_->::pb::TModuleInfos::Clear();
    }
    os_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserLoginRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Ret = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret().data(), this->ret().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ret");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BanMsg;
        break;
      }

      // optional string BanMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_BanMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_banmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->banmsg().data(), this->banmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "banmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BanTime;
        break;
      }

      // optional uint64 BanTime = 3;
      case 3: {
        if (tag == 24) {
         parse_BanTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bantime_)));
          set_has_bantime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ModuleInfos;
        break;
      }

      // optional .pb.TModuleInfos ModuleInfos = 4;
      case 4: {
        if (tag == 34) {
         parse_ModuleInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moduleinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_OS;
        break;
      }

      // optional int32 OS = 5;
      case 5: {
        if (tag == 40) {
         parse_OS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_)));
          set_has_os();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserLoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserLoginRsp)
  return false;
#undef DO_
}

void TUserLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserLoginRsp)
  // optional string Ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ret(), output);
  }

  // optional string BanMsg = 2;
  if (has_banmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->banmsg().data(), this->banmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "banmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->banmsg(), output);
  }

  // optional uint64 BanTime = 3;
  if (has_bantime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bantime(), output);
  }

  // optional .pb.TModuleInfos ModuleInfos = 4;
  if (has_moduleinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->moduleinfos(), output);
  }

  // optional int32 OS = 5;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->os(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserLoginRsp)
}

::google::protobuf::uint8* TUserLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserLoginRsp)
  // optional string Ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ret(), target);
  }

  // optional string BanMsg = 2;
  if (has_banmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->banmsg().data(), this->banmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "banmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->banmsg(), target);
  }

  // optional uint64 BanTime = 3;
  if (has_bantime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->bantime(), target);
  }

  // optional .pb.TModuleInfos ModuleInfos = 4;
  if (has_moduleinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->moduleinfos(), target);
  }

  // optional int32 OS = 5;
  if (has_os()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->os(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserLoginRsp)
  return target;
}

int TUserLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret());
    }

    // optional string BanMsg = 2;
    if (has_banmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->banmsg());
    }

    // optional uint64 BanTime = 3;
    if (has_bantime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bantime());
    }

    // optional .pb.TModuleInfos ModuleInfos = 4;
    if (has_moduleinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moduleinfos());
    }

    // optional int32 OS = 5;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserLoginRsp::MergeFrom(const TUserLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_banmsg()) {
      set_banmsg(from.banmsg());
    }
    if (from.has_bantime()) {
      set_bantime(from.bantime());
    }
    if (from.has_moduleinfos()) {
      mutable_moduleinfos()->::pb::TModuleInfos::MergeFrom(from.moduleinfos());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserLoginRsp::CopyFrom(const TUserLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserLoginRsp::IsInitialized() const {

  if (has_moduleinfos()) {
    if (!this->moduleinfos().IsInitialized()) return false;
  }
  return true;
}

void TUserLoginRsp::Swap(TUserLoginRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(banmsg_, other->banmsg_);
    std::swap(bantime_, other->bantime_);
    std::swap(moduleinfos_, other->moduleinfos_);
    std::swap(os_, other->os_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserLoginRsp_descriptor_;
  metadata.reflection = TUserLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TUserGetUserDataRpgReq::TUserGetUserDataRpgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserGetUserDataRpgReq)
}

void TUserGetUserDataRpgReq::InitAsDefaultInstance() {
}

TUserGetUserDataRpgReq::TUserGetUserDataRpgReq(const TUserGetUserDataRpgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserGetUserDataRpgReq)
}

void TUserGetUserDataRpgReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserGetUserDataRpgReq::~TUserGetUserDataRpgReq() {
  // @@protoc_insertion_point(destructor:pb.TUserGetUserDataRpgReq)
  SharedDtor();
}

void TUserGetUserDataRpgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserGetUserDataRpgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserGetUserDataRpgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserGetUserDataRpgReq_descriptor_;
}

const TUserGetUserDataRpgReq& TUserGetUserDataRpgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserGetUserDataRpgReq* TUserGetUserDataRpgReq::default_instance_ = NULL;

TUserGetUserDataRpgReq* TUserGetUserDataRpgReq::New() const {
  return new TUserGetUserDataRpgReq;
}

void TUserGetUserDataRpgReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserGetUserDataRpgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserGetUserDataRpgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserGetUserDataRpgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserGetUserDataRpgReq)
  return false;
#undef DO_
}

void TUserGetUserDataRpgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserGetUserDataRpgReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserGetUserDataRpgReq)
}

::google::protobuf::uint8* TUserGetUserDataRpgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserGetUserDataRpgReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserGetUserDataRpgReq)
  return target;
}

int TUserGetUserDataRpgReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserGetUserDataRpgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserGetUserDataRpgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserGetUserDataRpgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserGetUserDataRpgReq::MergeFrom(const TUserGetUserDataRpgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserGetUserDataRpgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserGetUserDataRpgReq::CopyFrom(const TUserGetUserDataRpgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserGetUserDataRpgReq::IsInitialized() const {

  return true;
}

void TUserGetUserDataRpgReq::Swap(TUserGetUserDataRpgReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserGetUserDataRpgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserGetUserDataRpgReq_descriptor_;
  metadata.reflection = TUserGetUserDataRpgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserGetUserDataSlgReq::kUidFieldNumber;
#endif  // !_MSC_VER

TUserGetUserDataSlgReq::TUserGetUserDataSlgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserGetUserDataSlgReq)
}

void TUserGetUserDataSlgReq::InitAsDefaultInstance() {
}

TUserGetUserDataSlgReq::TUserGetUserDataSlgReq(const TUserGetUserDataSlgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserGetUserDataSlgReq)
}

void TUserGetUserDataSlgReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserGetUserDataSlgReq::~TUserGetUserDataSlgReq() {
  // @@protoc_insertion_point(destructor:pb.TUserGetUserDataSlgReq)
  SharedDtor();
}

void TUserGetUserDataSlgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserGetUserDataSlgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserGetUserDataSlgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserGetUserDataSlgReq_descriptor_;
}

const TUserGetUserDataSlgReq& TUserGetUserDataSlgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserGetUserDataSlgReq* TUserGetUserDataSlgReq::default_instance_ = NULL;

TUserGetUserDataSlgReq* TUserGetUserDataSlgReq::New() const {
  return new TUserGetUserDataSlgReq;
}

void TUserGetUserDataSlgReq::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserGetUserDataSlgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserGetUserDataSlgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserGetUserDataSlgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserGetUserDataSlgReq)
  return false;
#undef DO_
}

void TUserGetUserDataSlgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserGetUserDataSlgReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserGetUserDataSlgReq)
}

::google::protobuf::uint8* TUserGetUserDataSlgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserGetUserDataSlgReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserGetUserDataSlgReq)
  return target;
}

int TUserGetUserDataSlgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserGetUserDataSlgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserGetUserDataSlgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserGetUserDataSlgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserGetUserDataSlgReq::MergeFrom(const TUserGetUserDataSlgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserGetUserDataSlgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserGetUserDataSlgReq::CopyFrom(const TUserGetUserDataSlgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserGetUserDataSlgReq::IsInitialized() const {

  return true;
}

void TUserGetUserDataSlgReq::Swap(TUserGetUserDataSlgReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserGetUserDataSlgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserGetUserDataSlgReq_descriptor_;
  metadata.reflection = TUserGetUserDataSlgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBaseUserData::kUnameFieldNumber;
const int TBaseUserData::kExpFieldNumber;
const int TBaseUserData::kLevelFieldNumber;
const int TBaseUserData::kGoldFieldNumber;
const int TBaseUserData::kVipExpFieldNumber;
const int TBaseUserData::kCoinFieldNumber;
const int TBaseUserData::kRecoverDataArrayFieldNumber;
const int TBaseUserData::kVipLevelFieldNumber;
const int TBaseUserData::kCurrencyDataArrayFieldNumber;
const int TBaseUserData::kResourceDataArrayFieldNumber;
const int TBaseUserData::kResourceUpdateTimeFieldNumber;
const int TBaseUserData::kCreateTimeFieldNumber;
const int TBaseUserData::kPlayerImageFrameTidFieldNumber;
const int TBaseUserData::kSignWordsFieldNumber;
const int TBaseUserData::kPlayerModelHtidFieldNumber;
const int TBaseUserData::kSilverCoinFreeNumFieldNumber;
const int TBaseUserData::kSilverCoinBuyNumFieldNumber;
const int TBaseUserData::kExecuteBuyNumFieldNumber;
const int TBaseUserData::kTitleFieldNumber;
const int TBaseUserData::kMaxFightForceFieldNumber;
const int TBaseUserData::kShopCoinFreeReceiveNumFieldNumber;
const int TBaseUserData::kIsShowVipFieldNumber;
const int TBaseUserData::kCanStrangerChatFieldNumber;
const int TBaseUserData::kIsRefuseLowAdventureFieldNumber;
const int TBaseUserData::kCashCouponFieldNumber;
#endif  // !_MSC_VER

TBaseUserData::TBaseUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBaseUserData)
}

void TBaseUserData::InitAsDefaultInstance() {
}

TBaseUserData::TBaseUserData(const TBaseUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBaseUserData)
}

void TBaseUserData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_ = 0;
  level_ = 0;
  gold_ = 0;
  vipexp_ = 0;
  coin_ = GOOGLE_LONGLONG(0);
  viplevel_ = 0;
  resourceupdatetime_ = GOOGLE_LONGLONG(0);
  createtime_ = GOOGLE_LONGLONG(0);
  playerimageframetid_ = 0;
  signwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playermodelhtid_ = 0;
  silvercoinfreenum_ = 0;
  silvercoinbuynum_ = 0;
  executebuynum_ = 0;
  title_ = 0;
  maxfightforce_ = GOOGLE_ULONGLONG(0);
  shopcoinfreereceivenum_ = 0u;
  isshowvip_ = 0u;
  canstrangerchat_ = 0u;
  isrefuselowadventure_ = 0u;
  cashcoupon_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBaseUserData::~TBaseUserData() {
  // @@protoc_insertion_point(destructor:pb.TBaseUserData)
  SharedDtor();
}

void TBaseUserData::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (signwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signwords_;
  }
  if (this != default_instance_) {
  }
}

void TBaseUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBaseUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBaseUserData_descriptor_;
}

const TBaseUserData& TBaseUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TBaseUserData* TBaseUserData::default_instance_ = NULL;

TBaseUserData* TBaseUserData::New() const {
  return new TBaseUserData;
}

void TBaseUserData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBaseUserData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(exp_, coin_);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
    viplevel_ = 0;
  }
  if (_has_bits_[8 / 32] & 64512) {
    ZR_(playerimageframetid_, createtime_);
    ZR_(playermodelhtid_, silvercoinfreenum_);
    if (has_signwords()) {
      if (signwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signwords_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(silvercoinbuynum_, isrefuselowadventure_);
  }
  cashcoupon_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  recoverdataarray_.Clear();
  currencydataarray_.Clear();
  resourcedataarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBaseUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBaseUserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Uname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Exp;
        break;
      }

      // optional int32 Exp = 3;
      case 3: {
        if (tag == 24) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }

      // optional int32 Level = 4;
      case 4: {
        if (tag == 32) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Gold;
        break;
      }

      // optional int32 Gold = 5;
      case 5: {
        if (tag == 40) {
         parse_Gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_VipExp;
        break;
      }

      // optional int32 VipExp = 6;
      case 6: {
        if (tag == 48) {
         parse_VipExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Coin;
        break;
      }

      // optional int64 Coin = 7;
      case 7: {
        if (tag == 56) {
         parse_Coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_RecoverDataArray;
        break;
      }

      // repeated .pb.TUserRecoverDataRpg RecoverDataArray = 9;
      case 9: {
        if (tag == 74) {
         parse_RecoverDataArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recoverdataarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_RecoverDataArray;
        if (input->ExpectTag(80)) goto parse_VipLevel;
        break;
      }

      // optional int32 VipLevel = 10;
      case 10: {
        if (tag == 80) {
         parse_VipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_CurrencyDataArray;
        break;
      }

      // repeated .pb.TUserCurrencyData CurrencyDataArray = 11;
      case 11: {
        if (tag == 90) {
         parse_CurrencyDataArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_currencydataarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_CurrencyDataArray;
        if (input->ExpectTag(98)) goto parse_ResourceDataArray;
        break;
      }

      // repeated .pb.TUserResourceData ResourceDataArray = 12;
      case 12: {
        if (tag == 98) {
         parse_ResourceDataArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resourcedataarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ResourceDataArray;
        if (input->ExpectTag(104)) goto parse_ResourceUpdateTime;
        break;
      }

      // optional int64 ResourceUpdateTime = 13;
      case 13: {
        if (tag == 104) {
         parse_ResourceUpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &resourceupdatetime_)));
          set_has_resourceupdatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_CreateTime;
        break;
      }

      // optional int64 CreateTime = 14;
      case 14: {
        if (tag == 112) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_PlayerImageFrameTid;
        break;
      }

      // optional int32 PlayerImageFrameTid = 16;
      case 16: {
        if (tag == 128) {
         parse_PlayerImageFrameTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerimageframetid_)));
          set_has_playerimageframetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_SignWords;
        break;
      }

      // optional string SignWords = 17;
      case 17: {
        if (tag == 138) {
         parse_SignWords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signwords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signwords().data(), this->signwords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signwords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_PlayerModelHtid;
        break;
      }

      // optional int32 PlayerModelHtid = 18;
      case 18: {
        if (tag == 144) {
         parse_PlayerModelHtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playermodelhtid_)));
          set_has_playermodelhtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_SilverCoinFreeNum;
        break;
      }

      // optional int32 SilverCoinFreeNum = 20;
      case 20: {
        if (tag == 160) {
         parse_SilverCoinFreeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &silvercoinfreenum_)));
          set_has_silvercoinfreenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_SilverCoinBuyNum;
        break;
      }

      // optional int32 SilverCoinBuyNum = 21;
      case 21: {
        if (tag == 168) {
         parse_SilverCoinBuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &silvercoinbuynum_)));
          set_has_silvercoinbuynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_ExecuteBuyNum;
        break;
      }

      // optional int32 ExecuteBuyNum = 22;
      case 22: {
        if (tag == 176) {
         parse_ExecuteBuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &executebuynum_)));
          set_has_executebuynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_Title;
        break;
      }

      // optional int32 Title = 23;
      case 23: {
        if (tag == 184) {
         parse_Title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_MaxFightForce;
        break;
      }

      // optional uint64 MaxFightForce = 24;
      case 24: {
        if (tag == 192) {
         parse_MaxFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxfightforce_)));
          set_has_maxfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_ShopCoinFreeReceiveNum;
        break;
      }

      // optional uint32 ShopCoinFreeReceiveNum = 25;
      case 25: {
        if (tag == 200) {
         parse_ShopCoinFreeReceiveNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopcoinfreereceivenum_)));
          set_has_shopcoinfreereceivenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_IsShowVip;
        break;
      }

      // optional uint32 IsShowVip = 26;
      case 26: {
        if (tag == 208) {
         parse_IsShowVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isshowvip_)));
          set_has_isshowvip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_CanStrangerChat;
        break;
      }

      // optional uint32 CanStrangerChat = 27;
      case 27: {
        if (tag == 216) {
         parse_CanStrangerChat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &canstrangerchat_)));
          set_has_canstrangerchat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_IsRefuseLowAdventure;
        break;
      }

      // optional uint32 IsRefuseLowAdventure = 28;
      case 28: {
        if (tag == 224) {
         parse_IsRefuseLowAdventure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isrefuselowadventure_)));
          set_has_isrefuselowadventure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_CashCoupon;
        break;
      }

      // optional uint32 CashCoupon = 29;
      case 29: {
        if (tag == 232) {
         parse_CashCoupon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cashcoupon_)));
          set_has_cashcoupon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBaseUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBaseUserData)
  return false;
#undef DO_
}

void TBaseUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBaseUserData)
  // optional string Uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uname(), output);
  }

  // optional int32 Exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional int32 Level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 Gold = 5;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gold(), output);
  }

  // optional int32 VipExp = 6;
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vipexp(), output);
  }

  // optional int64 Coin = 7;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->coin(), output);
  }

  // repeated .pb.TUserRecoverDataRpg RecoverDataArray = 9;
  for (int i = 0; i < this->recoverdataarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->recoverdataarray(i), output);
  }

  // optional int32 VipLevel = 10;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->viplevel(), output);
  }

  // repeated .pb.TUserCurrencyData CurrencyDataArray = 11;
  for (int i = 0; i < this->currencydataarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->currencydataarray(i), output);
  }

  // repeated .pb.TUserResourceData ResourceDataArray = 12;
  for (int i = 0; i < this->resourcedataarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->resourcedataarray(i), output);
  }

  // optional int64 ResourceUpdateTime = 13;
  if (has_resourceupdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->resourceupdatetime(), output);
  }

  // optional int64 CreateTime = 14;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->createtime(), output);
  }

  // optional int32 PlayerImageFrameTid = 16;
  if (has_playerimageframetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->playerimageframetid(), output);
  }

  // optional string SignWords = 17;
  if (has_signwords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signwords().data(), this->signwords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signwords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->signwords(), output);
  }

  // optional int32 PlayerModelHtid = 18;
  if (has_playermodelhtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->playermodelhtid(), output);
  }

  // optional int32 SilverCoinFreeNum = 20;
  if (has_silvercoinfreenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->silvercoinfreenum(), output);
  }

  // optional int32 SilverCoinBuyNum = 21;
  if (has_silvercoinbuynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->silvercoinbuynum(), output);
  }

  // optional int32 ExecuteBuyNum = 22;
  if (has_executebuynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->executebuynum(), output);
  }

  // optional int32 Title = 23;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->title(), output);
  }

  // optional uint64 MaxFightForce = 24;
  if (has_maxfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->maxfightforce(), output);
  }

  // optional uint32 ShopCoinFreeReceiveNum = 25;
  if (has_shopcoinfreereceivenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->shopcoinfreereceivenum(), output);
  }

  // optional uint32 IsShowVip = 26;
  if (has_isshowvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->isshowvip(), output);
  }

  // optional uint32 CanStrangerChat = 27;
  if (has_canstrangerchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->canstrangerchat(), output);
  }

  // optional uint32 IsRefuseLowAdventure = 28;
  if (has_isrefuselowadventure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->isrefuselowadventure(), output);
  }

  // optional uint32 CashCoupon = 29;
  if (has_cashcoupon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->cashcoupon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBaseUserData)
}

::google::protobuf::uint8* TBaseUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBaseUserData)
  // optional string Uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uname(), target);
  }

  // optional int32 Exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // optional int32 Level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 Gold = 5;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gold(), target);
  }

  // optional int32 VipExp = 6;
  if (has_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vipexp(), target);
  }

  // optional int64 Coin = 7;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->coin(), target);
  }

  // repeated .pb.TUserRecoverDataRpg RecoverDataArray = 9;
  for (int i = 0; i < this->recoverdataarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->recoverdataarray(i), target);
  }

  // optional int32 VipLevel = 10;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->viplevel(), target);
  }

  // repeated .pb.TUserCurrencyData CurrencyDataArray = 11;
  for (int i = 0; i < this->currencydataarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->currencydataarray(i), target);
  }

  // repeated .pb.TUserResourceData ResourceDataArray = 12;
  for (int i = 0; i < this->resourcedataarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->resourcedataarray(i), target);
  }

  // optional int64 ResourceUpdateTime = 13;
  if (has_resourceupdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->resourceupdatetime(), target);
  }

  // optional int64 CreateTime = 14;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->createtime(), target);
  }

  // optional int32 PlayerImageFrameTid = 16;
  if (has_playerimageframetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->playerimageframetid(), target);
  }

  // optional string SignWords = 17;
  if (has_signwords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signwords().data(), this->signwords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signwords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->signwords(), target);
  }

  // optional int32 PlayerModelHtid = 18;
  if (has_playermodelhtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->playermodelhtid(), target);
  }

  // optional int32 SilverCoinFreeNum = 20;
  if (has_silvercoinfreenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->silvercoinfreenum(), target);
  }

  // optional int32 SilverCoinBuyNum = 21;
  if (has_silvercoinbuynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->silvercoinbuynum(), target);
  }

  // optional int32 ExecuteBuyNum = 22;
  if (has_executebuynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->executebuynum(), target);
  }

  // optional int32 Title = 23;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->title(), target);
  }

  // optional uint64 MaxFightForce = 24;
  if (has_maxfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->maxfightforce(), target);
  }

  // optional uint32 ShopCoinFreeReceiveNum = 25;
  if (has_shopcoinfreereceivenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->shopcoinfreereceivenum(), target);
  }

  // optional uint32 IsShowVip = 26;
  if (has_isshowvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->isshowvip(), target);
  }

  // optional uint32 CanStrangerChat = 27;
  if (has_canstrangerchat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->canstrangerchat(), target);
  }

  // optional uint32 IsRefuseLowAdventure = 28;
  if (has_isrefuselowadventure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->isrefuselowadventure(), target);
  }

  // optional uint32 CashCoupon = 29;
  if (has_cashcoupon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->cashcoupon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBaseUserData)
  return target;
}

int TBaseUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Uname = 1;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional int32 Exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 Gold = 5;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 VipExp = 6;
    if (has_vipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipexp());
    }

    // optional int64 Coin = 7;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coin());
    }

    // optional int32 VipLevel = 10;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int64 ResourceUpdateTime = 13;
    if (has_resourceupdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->resourceupdatetime());
    }

    // optional int64 CreateTime = 14;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional int32 PlayerImageFrameTid = 16;
    if (has_playerimageframetid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerimageframetid());
    }

    // optional string SignWords = 17;
    if (has_signwords()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signwords());
    }

    // optional int32 PlayerModelHtid = 18;
    if (has_playermodelhtid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playermodelhtid());
    }

    // optional int32 SilverCoinFreeNum = 20;
    if (has_silvercoinfreenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silvercoinfreenum());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 SilverCoinBuyNum = 21;
    if (has_silvercoinbuynum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silvercoinbuynum());
    }

    // optional int32 ExecuteBuyNum = 22;
    if (has_executebuynum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->executebuynum());
    }

    // optional int32 Title = 23;
    if (has_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title());
    }

    // optional uint64 MaxFightForce = 24;
    if (has_maxfightforce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxfightforce());
    }

    // optional uint32 ShopCoinFreeReceiveNum = 25;
    if (has_shopcoinfreereceivenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopcoinfreereceivenum());
    }

    // optional uint32 IsShowVip = 26;
    if (has_isshowvip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isshowvip());
    }

    // optional uint32 CanStrangerChat = 27;
    if (has_canstrangerchat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->canstrangerchat());
    }

    // optional uint32 IsRefuseLowAdventure = 28;
    if (has_isrefuselowadventure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isrefuselowadventure());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 CashCoupon = 29;
    if (has_cashcoupon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cashcoupon());
    }

  }
  // repeated .pb.TUserRecoverDataRpg RecoverDataArray = 9;
  total_size += 1 * this->recoverdataarray_size();
  for (int i = 0; i < this->recoverdataarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recoverdataarray(i));
  }

  // repeated .pb.TUserCurrencyData CurrencyDataArray = 11;
  total_size += 1 * this->currencydataarray_size();
  for (int i = 0; i < this->currencydataarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->currencydataarray(i));
  }

  // repeated .pb.TUserResourceData ResourceDataArray = 12;
  total_size += 1 * this->resourcedataarray_size();
  for (int i = 0; i < this->resourcedataarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resourcedataarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBaseUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBaseUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBaseUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBaseUserData::MergeFrom(const TBaseUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  recoverdataarray_.MergeFrom(from.recoverdataarray_);
  currencydataarray_.MergeFrom(from.currencydataarray_);
  resourcedataarray_.MergeFrom(from.resourcedataarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_resourceupdatetime()) {
      set_resourceupdatetime(from.resourceupdatetime());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_playerimageframetid()) {
      set_playerimageframetid(from.playerimageframetid());
    }
    if (from.has_signwords()) {
      set_signwords(from.signwords());
    }
    if (from.has_playermodelhtid()) {
      set_playermodelhtid(from.playermodelhtid());
    }
    if (from.has_silvercoinfreenum()) {
      set_silvercoinfreenum(from.silvercoinfreenum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_silvercoinbuynum()) {
      set_silvercoinbuynum(from.silvercoinbuynum());
    }
    if (from.has_executebuynum()) {
      set_executebuynum(from.executebuynum());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_maxfightforce()) {
      set_maxfightforce(from.maxfightforce());
    }
    if (from.has_shopcoinfreereceivenum()) {
      set_shopcoinfreereceivenum(from.shopcoinfreereceivenum());
    }
    if (from.has_isshowvip()) {
      set_isshowvip(from.isshowvip());
    }
    if (from.has_canstrangerchat()) {
      set_canstrangerchat(from.canstrangerchat());
    }
    if (from.has_isrefuselowadventure()) {
      set_isrefuselowadventure(from.isrefuselowadventure());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_cashcoupon()) {
      set_cashcoupon(from.cashcoupon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBaseUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBaseUserData::CopyFrom(const TBaseUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBaseUserData::IsInitialized() const {

  return true;
}

void TBaseUserData::Swap(TBaseUserData* other) {
  if (other != this) {
    std::swap(uname_, other->uname_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(gold_, other->gold_);
    std::swap(vipexp_, other->vipexp_);
    std::swap(coin_, other->coin_);
    recoverdataarray_.Swap(&other->recoverdataarray_);
    std::swap(viplevel_, other->viplevel_);
    currencydataarray_.Swap(&other->currencydataarray_);
    resourcedataarray_.Swap(&other->resourcedataarray_);
    std::swap(resourceupdatetime_, other->resourceupdatetime_);
    std::swap(createtime_, other->createtime_);
    std::swap(playerimageframetid_, other->playerimageframetid_);
    std::swap(signwords_, other->signwords_);
    std::swap(playermodelhtid_, other->playermodelhtid_);
    std::swap(silvercoinfreenum_, other->silvercoinfreenum_);
    std::swap(silvercoinbuynum_, other->silvercoinbuynum_);
    std::swap(executebuynum_, other->executebuynum_);
    std::swap(title_, other->title_);
    std::swap(maxfightforce_, other->maxfightforce_);
    std::swap(shopcoinfreereceivenum_, other->shopcoinfreereceivenum_);
    std::swap(isshowvip_, other->isshowvip_);
    std::swap(canstrangerchat_, other->canstrangerchat_);
    std::swap(isrefuselowadventure_, other->isrefuselowadventure_);
    std::swap(cashcoupon_, other->cashcoupon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBaseUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBaseUserData_descriptor_;
  metadata.reflection = TBaseUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserGetUserDataRpgRsp::kUserDataFieldNumber;
const int TUserGetUserDataRpgRsp::kServerTimeFieldNumber;
const int TUserGetUserDataRpgRsp::kChannelEmailNumFieldNumber;
#endif  // !_MSC_VER

TUserGetUserDataRpgRsp::TUserGetUserDataRpgRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserGetUserDataRpgRsp)
}

void TUserGetUserDataRpgRsp::InitAsDefaultInstance() {
  userdata_ = const_cast< ::pb::TBaseUserData*>(&::pb::TBaseUserData::default_instance());
}

TUserGetUserDataRpgRsp::TUserGetUserDataRpgRsp(const TUserGetUserDataRpgRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserGetUserDataRpgRsp)
}

void TUserGetUserDataRpgRsp::SharedCtor() {
  _cached_size_ = 0;
  userdata_ = NULL;
  servertime_ = GOOGLE_LONGLONG(0);
  channelemailnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserGetUserDataRpgRsp::~TUserGetUserDataRpgRsp() {
  // @@protoc_insertion_point(destructor:pb.TUserGetUserDataRpgRsp)
  SharedDtor();
}

void TUserGetUserDataRpgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete userdata_;
  }
}

void TUserGetUserDataRpgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserGetUserDataRpgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserGetUserDataRpgRsp_descriptor_;
}

const TUserGetUserDataRpgRsp& TUserGetUserDataRpgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserGetUserDataRpgRsp* TUserGetUserDataRpgRsp::default_instance_ = NULL;

TUserGetUserDataRpgRsp* TUserGetUserDataRpgRsp::New() const {
  return new TUserGetUserDataRpgRsp;
}

void TUserGetUserDataRpgRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserGetUserDataRpgRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(servertime_, channelemailnum_);
    if (has_userdata()) {
      if (userdata_ != NULL) userdata_->::pb::TBaseUserData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserGetUserDataRpgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserGetUserDataRpgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBaseUserData UserData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ServerTime;
        break;
      }

      // optional int64 ServerTime = 2;
      case 2: {
        if (tag == 16) {
         parse_ServerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ChannelEmailNum;
        break;
      }

      // optional uint32 ChannelEmailNum = 3;
      case 3: {
        if (tag == 24) {
         parse_ChannelEmailNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelemailnum_)));
          set_has_channelemailnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserGetUserDataRpgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserGetUserDataRpgRsp)
  return false;
#undef DO_
}

void TUserGetUserDataRpgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserGetUserDataRpgRsp)
  // optional .pb.TBaseUserData UserData = 1;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdata(), output);
  }

  // optional int64 ServerTime = 2;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->servertime(), output);
  }

  // optional uint32 ChannelEmailNum = 3;
  if (has_channelemailnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channelemailnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserGetUserDataRpgRsp)
}

::google::protobuf::uint8* TUserGetUserDataRpgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserGetUserDataRpgRsp)
  // optional .pb.TBaseUserData UserData = 1;
  if (has_userdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdata(), target);
  }

  // optional int64 ServerTime = 2;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->servertime(), target);
  }

  // optional uint32 ChannelEmailNum = 3;
  if (has_channelemailnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channelemailnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserGetUserDataRpgRsp)
  return target;
}

int TUserGetUserDataRpgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBaseUserData UserData = 1;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdata());
    }

    // optional int64 ServerTime = 2;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertime());
    }

    // optional uint32 ChannelEmailNum = 3;
    if (has_channelemailnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelemailnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserGetUserDataRpgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserGetUserDataRpgRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserGetUserDataRpgRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserGetUserDataRpgRsp::MergeFrom(const TUserGetUserDataRpgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdata()) {
      mutable_userdata()->::pb::TBaseUserData::MergeFrom(from.userdata());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_channelemailnum()) {
      set_channelemailnum(from.channelemailnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserGetUserDataRpgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserGetUserDataRpgRsp::CopyFrom(const TUserGetUserDataRpgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserGetUserDataRpgRsp::IsInitialized() const {

  return true;
}

void TUserGetUserDataRpgRsp::Swap(TUserGetUserDataRpgRsp* other) {
  if (other != this) {
    std::swap(userdata_, other->userdata_);
    std::swap(servertime_, other->servertime_);
    std::swap(channelemailnum_, other->channelemailnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserGetUserDataRpgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserGetUserDataRpgRsp_descriptor_;
  metadata.reflection = TUserGetUserDataRpgRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserUpdateUserDataRpgNotify::kUserDataFieldNumber;
#endif  // !_MSC_VER

TUserUpdateUserDataRpgNotify::TUserUpdateUserDataRpgNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserUpdateUserDataRpgNotify)
}

void TUserUpdateUserDataRpgNotify::InitAsDefaultInstance() {
  userdata_ = const_cast< ::pb::TBaseUserData*>(&::pb::TBaseUserData::default_instance());
}

TUserUpdateUserDataRpgNotify::TUserUpdateUserDataRpgNotify(const TUserUpdateUserDataRpgNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserUpdateUserDataRpgNotify)
}

void TUserUpdateUserDataRpgNotify::SharedCtor() {
  _cached_size_ = 0;
  userdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserUpdateUserDataRpgNotify::~TUserUpdateUserDataRpgNotify() {
  // @@protoc_insertion_point(destructor:pb.TUserUpdateUserDataRpgNotify)
  SharedDtor();
}

void TUserUpdateUserDataRpgNotify::SharedDtor() {
  if (this != default_instance_) {
    delete userdata_;
  }
}

void TUserUpdateUserDataRpgNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserUpdateUserDataRpgNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserUpdateUserDataRpgNotify_descriptor_;
}

const TUserUpdateUserDataRpgNotify& TUserUpdateUserDataRpgNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserUpdateUserDataRpgNotify* TUserUpdateUserDataRpgNotify::default_instance_ = NULL;

TUserUpdateUserDataRpgNotify* TUserUpdateUserDataRpgNotify::New() const {
  return new TUserUpdateUserDataRpgNotify;
}

void TUserUpdateUserDataRpgNotify::Clear() {
  if (has_userdata()) {
    if (userdata_ != NULL) userdata_->::pb::TBaseUserData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserUpdateUserDataRpgNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserUpdateUserDataRpgNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBaseUserData UserData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserUpdateUserDataRpgNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserUpdateUserDataRpgNotify)
  return false;
#undef DO_
}

void TUserUpdateUserDataRpgNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserUpdateUserDataRpgNotify)
  // optional .pb.TBaseUserData UserData = 1;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserUpdateUserDataRpgNotify)
}

::google::protobuf::uint8* TUserUpdateUserDataRpgNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserUpdateUserDataRpgNotify)
  // optional .pb.TBaseUserData UserData = 1;
  if (has_userdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserUpdateUserDataRpgNotify)
  return target;
}

int TUserUpdateUserDataRpgNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBaseUserData UserData = 1;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserUpdateUserDataRpgNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserUpdateUserDataRpgNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserUpdateUserDataRpgNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserUpdateUserDataRpgNotify::MergeFrom(const TUserUpdateUserDataRpgNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdata()) {
      mutable_userdata()->::pb::TBaseUserData::MergeFrom(from.userdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserUpdateUserDataRpgNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserUpdateUserDataRpgNotify::CopyFrom(const TUserUpdateUserDataRpgNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserUpdateUserDataRpgNotify::IsInitialized() const {

  return true;
}

void TUserUpdateUserDataRpgNotify::Swap(TUserUpdateUserDataRpgNotify* other) {
  if (other != this) {
    std::swap(userdata_, other->userdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserUpdateUserDataRpgNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserUpdateUserDataRpgNotify_descriptor_;
  metadata.reflection = TUserUpdateUserDataRpgNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserRecoverDataRpg::kTidFieldNumber;
const int TUserRecoverDataRpg::kValueFieldNumber;
const int TUserRecoverDataRpg::kRecoverTimeFieldNumber;
#endif  // !_MSC_VER

TUserRecoverDataRpg::TUserRecoverDataRpg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserRecoverDataRpg)
}

void TUserRecoverDataRpg::InitAsDefaultInstance() {
}

TUserRecoverDataRpg::TUserRecoverDataRpg(const TUserRecoverDataRpg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserRecoverDataRpg)
}

void TUserRecoverDataRpg::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  recovertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserRecoverDataRpg::~TUserRecoverDataRpg() {
  // @@protoc_insertion_point(destructor:pb.TUserRecoverDataRpg)
  SharedDtor();
}

void TUserRecoverDataRpg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserRecoverDataRpg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserRecoverDataRpg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserRecoverDataRpg_descriptor_;
}

const TUserRecoverDataRpg& TUserRecoverDataRpg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserRecoverDataRpg* TUserRecoverDataRpg::default_instance_ = NULL;

TUserRecoverDataRpg* TUserRecoverDataRpg::New() const {
  return new TUserRecoverDataRpg;
}

void TUserRecoverDataRpg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserRecoverDataRpg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(value_, tid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserRecoverDataRpg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserRecoverDataRpg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int64 Value = 2;
      case 2: {
        if (tag == 16) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RecoverTime;
        break;
      }

      // optional int64 RecoverTime = 3;
      case 3: {
        if (tag == 24) {
         parse_RecoverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recovertime_)));
          set_has_recovertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserRecoverDataRpg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserRecoverDataRpg)
  return false;
#undef DO_
}

void TUserRecoverDataRpg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserRecoverDataRpg)
  // optional int32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }

  // optional int64 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  // optional int64 RecoverTime = 3;
  if (has_recovertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->recovertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserRecoverDataRpg)
}

::google::protobuf::uint8* TUserRecoverDataRpg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserRecoverDataRpg)
  // optional int32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }

  // optional int64 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  // optional int64 RecoverTime = 3;
  if (has_recovertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->recovertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserRecoverDataRpg)
  return target;
}

int TUserRecoverDataRpg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int64 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

    // optional int64 RecoverTime = 3;
    if (has_recovertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recovertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserRecoverDataRpg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserRecoverDataRpg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserRecoverDataRpg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserRecoverDataRpg::MergeFrom(const TUserRecoverDataRpg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_recovertime()) {
      set_recovertime(from.recovertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserRecoverDataRpg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserRecoverDataRpg::CopyFrom(const TUserRecoverDataRpg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserRecoverDataRpg::IsInitialized() const {

  return true;
}

void TUserRecoverDataRpg::Swap(TUserRecoverDataRpg* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(value_, other->value_);
    std::swap(recovertime_, other->recovertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserRecoverDataRpg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserRecoverDataRpg_descriptor_;
  metadata.reflection = TUserRecoverDataRpg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserCurrencyData::kCurrencyTypeFieldNumber;
const int TUserCurrencyData::kCurrencyNumFieldNumber;
#endif  // !_MSC_VER

TUserCurrencyData::TUserCurrencyData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserCurrencyData)
}

void TUserCurrencyData::InitAsDefaultInstance() {
}

TUserCurrencyData::TUserCurrencyData(const TUserCurrencyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserCurrencyData)
}

void TUserCurrencyData::SharedCtor() {
  _cached_size_ = 0;
  currencytype_ = 0u;
  currencynum_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserCurrencyData::~TUserCurrencyData() {
  // @@protoc_insertion_point(destructor:pb.TUserCurrencyData)
  SharedDtor();
}

void TUserCurrencyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserCurrencyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserCurrencyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserCurrencyData_descriptor_;
}

const TUserCurrencyData& TUserCurrencyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserCurrencyData* TUserCurrencyData::default_instance_ = NULL;

TUserCurrencyData* TUserCurrencyData::New() const {
  return new TUserCurrencyData;
}

void TUserCurrencyData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserCurrencyData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(currencynum_, currencytype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserCurrencyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserCurrencyData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CurrencyType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currencytype_)));
          set_has_currencytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurrencyNum;
        break;
      }

      // optional uint64 CurrencyNum = 2;
      case 2: {
        if (tag == 16) {
         parse_CurrencyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currencynum_)));
          set_has_currencynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserCurrencyData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserCurrencyData)
  return false;
#undef DO_
}

void TUserCurrencyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserCurrencyData)
  // optional uint32 CurrencyType = 1;
  if (has_currencytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->currencytype(), output);
  }

  // optional uint64 CurrencyNum = 2;
  if (has_currencynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->currencynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserCurrencyData)
}

::google::protobuf::uint8* TUserCurrencyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserCurrencyData)
  // optional uint32 CurrencyType = 1;
  if (has_currencytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->currencytype(), target);
  }

  // optional uint64 CurrencyNum = 2;
  if (has_currencynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->currencynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserCurrencyData)
  return target;
}

int TUserCurrencyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CurrencyType = 1;
    if (has_currencytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currencytype());
    }

    // optional uint64 CurrencyNum = 2;
    if (has_currencynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->currencynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserCurrencyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserCurrencyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserCurrencyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserCurrencyData::MergeFrom(const TUserCurrencyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currencytype()) {
      set_currencytype(from.currencytype());
    }
    if (from.has_currencynum()) {
      set_currencynum(from.currencynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserCurrencyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserCurrencyData::CopyFrom(const TUserCurrencyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserCurrencyData::IsInitialized() const {

  return true;
}

void TUserCurrencyData::Swap(TUserCurrencyData* other) {
  if (other != this) {
    std::swap(currencytype_, other->currencytype_);
    std::swap(currencynum_, other->currencynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserCurrencyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserCurrencyData_descriptor_;
  metadata.reflection = TUserCurrencyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserResourceData::kResourceTypeFieldNumber;
const int TUserResourceData::kResourceNumFieldNumber;
#endif  // !_MSC_VER

TUserResourceData::TUserResourceData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserResourceData)
}

void TUserResourceData::InitAsDefaultInstance() {
}

TUserResourceData::TUserResourceData(const TUserResourceData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserResourceData)
}

void TUserResourceData::SharedCtor() {
  _cached_size_ = 0;
  resourcetype_ = 0u;
  resourcenum_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserResourceData::~TUserResourceData() {
  // @@protoc_insertion_point(destructor:pb.TUserResourceData)
  SharedDtor();
}

void TUserResourceData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserResourceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserResourceData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserResourceData_descriptor_;
}

const TUserResourceData& TUserResourceData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserResourceData* TUserResourceData::default_instance_ = NULL;

TUserResourceData* TUserResourceData::New() const {
  return new TUserResourceData;
}

void TUserResourceData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserResourceData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(resourcenum_, resourcetype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserResourceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserResourceData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ResourceType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resourcetype_)));
          set_has_resourcetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ResourceNum;
        break;
      }

      // optional uint64 ResourceNum = 2;
      case 2: {
        if (tag == 16) {
         parse_ResourceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resourcenum_)));
          set_has_resourcenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserResourceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserResourceData)
  return false;
#undef DO_
}

void TUserResourceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserResourceData)
  // optional uint32 ResourceType = 1;
  if (has_resourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resourcetype(), output);
  }

  // optional uint64 ResourceNum = 2;
  if (has_resourcenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->resourcenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserResourceData)
}

::google::protobuf::uint8* TUserResourceData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserResourceData)
  // optional uint32 ResourceType = 1;
  if (has_resourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resourcetype(), target);
  }

  // optional uint64 ResourceNum = 2;
  if (has_resourcenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->resourcenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserResourceData)
  return target;
}

int TUserResourceData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ResourceType = 1;
    if (has_resourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resourcetype());
    }

    // optional uint64 ResourceNum = 2;
    if (has_resourcenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resourcenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserResourceData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserResourceData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserResourceData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserResourceData::MergeFrom(const TUserResourceData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resourcetype()) {
      set_resourcetype(from.resourcetype());
    }
    if (from.has_resourcenum()) {
      set_resourcenum(from.resourcenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserResourceData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserResourceData::CopyFrom(const TUserResourceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserResourceData::IsInitialized() const {

  return true;
}

void TUserResourceData::Swap(TUserResourceData* other) {
  if (other != this) {
    std::swap(resourcetype_, other->resourcetype_);
    std::swap(resourcenum_, other->resourcenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserResourceData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserResourceData_descriptor_;
  metadata.reflection = TUserResourceData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserResourceCalculateRsp::kResourceArrayFieldNumber;
#endif  // !_MSC_VER

TUserResourceCalculateRsp::TUserResourceCalculateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserResourceCalculateRsp)
}

void TUserResourceCalculateRsp::InitAsDefaultInstance() {
}

TUserResourceCalculateRsp::TUserResourceCalculateRsp(const TUserResourceCalculateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserResourceCalculateRsp)
}

void TUserResourceCalculateRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserResourceCalculateRsp::~TUserResourceCalculateRsp() {
  // @@protoc_insertion_point(destructor:pb.TUserResourceCalculateRsp)
  SharedDtor();
}

void TUserResourceCalculateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserResourceCalculateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserResourceCalculateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserResourceCalculateRsp_descriptor_;
}

const TUserResourceCalculateRsp& TUserResourceCalculateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserResourceCalculateRsp* TUserResourceCalculateRsp::default_instance_ = NULL;

TUserResourceCalculateRsp* TUserResourceCalculateRsp::New() const {
  return new TUserResourceCalculateRsp;
}

void TUserResourceCalculateRsp::Clear() {
  resourcearray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserResourceCalculateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserResourceCalculateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUserResourceData ResourceArray = 1;
      case 1: {
        if (tag == 10) {
         parse_ResourceArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resourcearray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ResourceArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserResourceCalculateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserResourceCalculateRsp)
  return false;
#undef DO_
}

void TUserResourceCalculateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserResourceCalculateRsp)
  // repeated .pb.TUserResourceData ResourceArray = 1;
  for (int i = 0; i < this->resourcearray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resourcearray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserResourceCalculateRsp)
}

::google::protobuf::uint8* TUserResourceCalculateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserResourceCalculateRsp)
  // repeated .pb.TUserResourceData ResourceArray = 1;
  for (int i = 0; i < this->resourcearray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resourcearray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserResourceCalculateRsp)
  return target;
}

int TUserResourceCalculateRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUserResourceData ResourceArray = 1;
  total_size += 1 * this->resourcearray_size();
  for (int i = 0; i < this->resourcearray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resourcearray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserResourceCalculateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserResourceCalculateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserResourceCalculateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserResourceCalculateRsp::MergeFrom(const TUserResourceCalculateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  resourcearray_.MergeFrom(from.resourcearray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserResourceCalculateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserResourceCalculateRsp::CopyFrom(const TUserResourceCalculateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserResourceCalculateRsp::IsInitialized() const {

  return true;
}

void TUserResourceCalculateRsp::Swap(TUserResourceCalculateRsp* other) {
  if (other != this) {
    resourcearray_.Swap(&other->resourcearray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserResourceCalculateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserResourceCalculateRsp_descriptor_;
  metadata.reflection = TUserResourceCalculateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserSubGoldByInnerReq::kSubNumFieldNumber;
#endif  // !_MSC_VER

TUserSubGoldByInnerReq::TUserSubGoldByInnerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserSubGoldByInnerReq)
}

void TUserSubGoldByInnerReq::InitAsDefaultInstance() {
}

TUserSubGoldByInnerReq::TUserSubGoldByInnerReq(const TUserSubGoldByInnerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserSubGoldByInnerReq)
}

void TUserSubGoldByInnerReq::SharedCtor() {
  _cached_size_ = 0;
  subnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserSubGoldByInnerReq::~TUserSubGoldByInnerReq() {
  // @@protoc_insertion_point(destructor:pb.TUserSubGoldByInnerReq)
  SharedDtor();
}

void TUserSubGoldByInnerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserSubGoldByInnerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserSubGoldByInnerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserSubGoldByInnerReq_descriptor_;
}

const TUserSubGoldByInnerReq& TUserSubGoldByInnerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserSubGoldByInnerReq* TUserSubGoldByInnerReq::default_instance_ = NULL;

TUserSubGoldByInnerReq* TUserSubGoldByInnerReq::New() const {
  return new TUserSubGoldByInnerReq;
}

void TUserSubGoldByInnerReq::Clear() {
  subnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserSubGoldByInnerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserSubGoldByInnerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SubNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subnum_)));
          set_has_subnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserSubGoldByInnerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserSubGoldByInnerReq)
  return false;
#undef DO_
}

void TUserSubGoldByInnerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserSubGoldByInnerReq)
  // optional uint32 SubNum = 1;
  if (has_subnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->subnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserSubGoldByInnerReq)
}

::google::protobuf::uint8* TUserSubGoldByInnerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserSubGoldByInnerReq)
  // optional uint32 SubNum = 1;
  if (has_subnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->subnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserSubGoldByInnerReq)
  return target;
}

int TUserSubGoldByInnerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SubNum = 1;
    if (has_subnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserSubGoldByInnerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserSubGoldByInnerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserSubGoldByInnerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserSubGoldByInnerReq::MergeFrom(const TUserSubGoldByInnerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subnum()) {
      set_subnum(from.subnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserSubGoldByInnerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserSubGoldByInnerReq::CopyFrom(const TUserSubGoldByInnerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserSubGoldByInnerReq::IsInitialized() const {

  return true;
}

void TUserSubGoldByInnerReq::Swap(TUserSubGoldByInnerReq* other) {
  if (other != this) {
    std::swap(subnum_, other->subnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserSubGoldByInnerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserSubGoldByInnerReq_descriptor_;
  metadata.reflection = TUserSubGoldByInnerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserSimpleInfo::kUidFieldNumber;
const int TUserSimpleInfo::kUnameFieldNumber;
const int TUserSimpleInfo::kHtidFieldNumber;
const int TUserSimpleInfo::kLevelFieldNumber;
const int TUserSimpleInfo::kVipLevelFieldNumber;
const int TUserSimpleInfo::kFightForceFieldNumber;
const int TUserSimpleInfo::kGuildIdFieldNumber;
const int TUserSimpleInfo::kGuildNameFieldNumber;
const int TUserSimpleInfo::kPlayerImageFrameTidFieldNumber;
const int TUserSimpleInfo::kCurMountFieldNumber;
const int TUserSimpleInfo::kMasterHtidFieldNumber;
const int TUserSimpleInfo::kTitleFieldNumber;
const int TUserSimpleInfo::kPlayerModelHeroStarFieldNumber;
const int TUserSimpleInfo::kBannerNameFieldNumber;
const int TUserSimpleInfo::kBannerBaseFieldNumber;
const int TUserSimpleInfo::kIsShowVipFieldNumber;
const int TUserSimpleInfo::kCanStrangerChatFieldNumber;
const int TUserSimpleInfo::kIsRefuseLowAdventureFieldNumber;
const int TUserSimpleInfo::kServerIdFieldNumber;
const int TUserSimpleInfo::kChatFrameTidFieldNumber;
const int TUserSimpleInfo::kMaxFightForceFieldNumber;
#endif  // !_MSC_VER

TUserSimpleInfo::TUserSimpleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserSimpleInfo)
}

void TUserSimpleInfo::InitAsDefaultInstance() {
}

TUserSimpleInfo::TUserSimpleInfo(const TUserSimpleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserSimpleInfo)
}

void TUserSimpleInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  htid_ = 0u;
  level_ = 0u;
  viplevel_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerimageframetid_ = 0u;
  curmount_ = 0u;
  masterhtid_ = 0u;
  title_ = 0u;
  playermodelherostar_ = 0u;
  bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannerbase_ = 0u;
  isshowvip_ = 0u;
  canstrangerchat_ = 0u;
  isrefuselowadventure_ = 0u;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatframetid_ = 0u;
  maxfightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserSimpleInfo::~TUserSimpleInfo() {
  // @@protoc_insertion_point(destructor:pb.TUserSimpleInfo)
  SharedDtor();
}

void TUserSimpleInfo::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TUserSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserSimpleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserSimpleInfo_descriptor_;
}

const TUserSimpleInfo& TUserSimpleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserSimpleInfo* TUserSimpleInfo::default_instance_ = NULL;

TUserSimpleInfo* TUserSimpleInfo::New() const {
  return new TUserSimpleInfo;
}

void TUserSimpleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserSimpleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(htid_, viplevel_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(curmount_, playermodelherostar_);
    ZR_(bannerbase_, isshowvip_);
    playerimageframetid_ = 0u;
    if (has_bannername()) {
      if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bannername_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 2031616) {
    ZR_(canstrangerchat_, isrefuselowadventure_);
    ZR_(maxfightforce_, chatframetid_);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserSimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserSimpleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Uname;
        break;
      }

      // optional string Uname = 2;
      case 2: {
        if (tag == 18) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 3;
      case 3: {
        if (tag == 24) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 4;
      case 4: {
        if (tag == 32) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_VipLevel;
        break;
      }

      // optional uint32 VipLevel = 5;
      case 5: {
        if (tag == 40) {
         parse_VipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 6;
      case 6: {
        if (tag == 48) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_GuildId;
        break;
      }

      // optional uint64 GuildId = 7;
      case 7: {
        if (tag == 56) {
         parse_GuildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_GuildName;
        break;
      }

      // optional string GuildName = 8;
      case 8: {
        if (tag == 66) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_PlayerImageFrameTid;
        break;
      }

      // optional uint32 PlayerImageFrameTid = 9;
      case 9: {
        if (tag == 72) {
         parse_PlayerImageFrameTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerimageframetid_)));
          set_has_playerimageframetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_CurMount;
        break;
      }

      // optional uint32 CurMount = 10;
      case 10: {
        if (tag == 80) {
         parse_CurMount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curmount_)));
          set_has_curmount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_MasterHtid;
        break;
      }

      // optional uint32 MasterHtid = 11;
      case 11: {
        if (tag == 88) {
         parse_MasterHtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &masterhtid_)));
          set_has_masterhtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_Title;
        break;
      }

      // optional uint32 Title = 12;
      case 12: {
        if (tag == 96) {
         parse_Title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_PlayerModelHeroStar;
        break;
      }

      // optional uint32 PlayerModelHeroStar = 13;
      case 13: {
        if (tag == 104) {
         parse_PlayerModelHeroStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playermodelherostar_)));
          set_has_playermodelherostar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_BannerName;
        break;
      }

      // optional string BannerName = 14;
      case 14: {
        if (tag == 114) {
         parse_BannerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bannername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bannername().data(), this->bannername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bannername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_BannerBase;
        break;
      }

      // optional uint32 BannerBase = 15;
      case 15: {
        if (tag == 120) {
         parse_BannerBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerbase_)));
          set_has_bannerbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_IsShowVip;
        break;
      }

      // optional uint32 IsShowVip = 16;
      case 16: {
        if (tag == 128) {
         parse_IsShowVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isshowvip_)));
          set_has_isshowvip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_CanStrangerChat;
        break;
      }

      // optional uint32 CanStrangerChat = 17;
      case 17: {
        if (tag == 136) {
         parse_CanStrangerChat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &canstrangerchat_)));
          set_has_canstrangerchat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_IsRefuseLowAdventure;
        break;
      }

      // optional uint32 IsRefuseLowAdventure = 18;
      case 18: {
        if (tag == 144) {
         parse_IsRefuseLowAdventure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isrefuselowadventure_)));
          set_has_isrefuselowadventure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 19;
      case 19: {
        if (tag == 154) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_ChatFrameTid;
        break;
      }

      // optional uint32 ChatFrameTid = 20;
      case 20: {
        if (tag == 160) {
         parse_ChatFrameTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatframetid_)));
          set_has_chatframetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_MaxFightForce;
        break;
      }

      // optional uint64 MaxFightForce = 21;
      case 21: {
        if (tag == 168) {
         parse_MaxFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxfightforce_)));
          set_has_maxfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserSimpleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserSimpleInfo)
  return false;
#undef DO_
}

void TUserSimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserSimpleInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 Htid = 3;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->htid(), output);
  }

  // optional uint32 Level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 VipLevel = 5;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->viplevel(), output);
  }

  // optional uint64 FightForce = 6;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->fightforce(), output);
  }

  // optional uint64 GuildId = 7;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->guildid(), output);
  }

  // optional string GuildName = 8;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->guildname(), output);
  }

  // optional uint32 PlayerImageFrameTid = 9;
  if (has_playerimageframetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->playerimageframetid(), output);
  }

  // optional uint32 CurMount = 10;
  if (has_curmount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->curmount(), output);
  }

  // optional uint32 MasterHtid = 11;
  if (has_masterhtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->masterhtid(), output);
  }

  // optional uint32 Title = 12;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->title(), output);
  }

  // optional uint32 PlayerModelHeroStar = 13;
  if (has_playermodelherostar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->playermodelherostar(), output);
  }

  // optional string BannerName = 14;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->bannername(), output);
  }

  // optional uint32 BannerBase = 15;
  if (has_bannerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bannerbase(), output);
  }

  // optional uint32 IsShowVip = 16;
  if (has_isshowvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->isshowvip(), output);
  }

  // optional uint32 CanStrangerChat = 17;
  if (has_canstrangerchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->canstrangerchat(), output);
  }

  // optional uint32 IsRefuseLowAdventure = 18;
  if (has_isrefuselowadventure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->isrefuselowadventure(), output);
  }

  // optional string ServerId = 19;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->serverid(), output);
  }

  // optional uint32 ChatFrameTid = 20;
  if (has_chatframetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->chatframetid(), output);
  }

  // optional uint64 MaxFightForce = 21;
  if (has_maxfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->maxfightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserSimpleInfo)
}

::google::protobuf::uint8* TUserSimpleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserSimpleInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uname(), target);
  }

  // optional uint32 Htid = 3;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->htid(), target);
  }

  // optional uint32 Level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 VipLevel = 5;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->viplevel(), target);
  }

  // optional uint64 FightForce = 6;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->fightforce(), target);
  }

  // optional uint64 GuildId = 7;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->guildid(), target);
  }

  // optional string GuildName = 8;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->guildname(), target);
  }

  // optional uint32 PlayerImageFrameTid = 9;
  if (has_playerimageframetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->playerimageframetid(), target);
  }

  // optional uint32 CurMount = 10;
  if (has_curmount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->curmount(), target);
  }

  // optional uint32 MasterHtid = 11;
  if (has_masterhtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->masterhtid(), target);
  }

  // optional uint32 Title = 12;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->title(), target);
  }

  // optional uint32 PlayerModelHeroStar = 13;
  if (has_playermodelherostar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->playermodelherostar(), target);
  }

  // optional string BannerName = 14;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->bannername(), target);
  }

  // optional uint32 BannerBase = 15;
  if (has_bannerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->bannerbase(), target);
  }

  // optional uint32 IsShowVip = 16;
  if (has_isshowvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->isshowvip(), target);
  }

  // optional uint32 CanStrangerChat = 17;
  if (has_canstrangerchat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->canstrangerchat(), target);
  }

  // optional uint32 IsRefuseLowAdventure = 18;
  if (has_isrefuselowadventure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->isrefuselowadventure(), target);
  }

  // optional string ServerId = 19;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->serverid(), target);
  }

  // optional uint32 ChatFrameTid = 20;
  if (has_chatframetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->chatframetid(), target);
  }

  // optional uint64 MaxFightForce = 21;
  if (has_maxfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->maxfightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserSimpleInfo)
  return target;
}

int TUserSimpleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Uname = 2;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint32 Htid = 3;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional uint32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 VipLevel = 5;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // optional uint64 FightForce = 6;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint64 GuildId = 7;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string GuildName = 8;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 PlayerImageFrameTid = 9;
    if (has_playerimageframetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerimageframetid());
    }

    // optional uint32 CurMount = 10;
    if (has_curmount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curmount());
    }

    // optional uint32 MasterHtid = 11;
    if (has_masterhtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->masterhtid());
    }

    // optional uint32 Title = 12;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }

    // optional uint32 PlayerModelHeroStar = 13;
    if (has_playermodelherostar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playermodelherostar());
    }

    // optional string BannerName = 14;
    if (has_bannername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bannername());
    }

    // optional uint32 BannerBase = 15;
    if (has_bannerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerbase());
    }

    // optional uint32 IsShowVip = 16;
    if (has_isshowvip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isshowvip());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 CanStrangerChat = 17;
    if (has_canstrangerchat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->canstrangerchat());
    }

    // optional uint32 IsRefuseLowAdventure = 18;
    if (has_isrefuselowadventure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isrefuselowadventure());
    }

    // optional string ServerId = 19;
    if (has_serverid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional uint32 ChatFrameTid = 20;
    if (has_chatframetid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chatframetid());
    }

    // optional uint64 MaxFightForce = 21;
    if (has_maxfightforce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxfightforce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserSimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserSimpleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserSimpleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserSimpleInfo::MergeFrom(const TUserSimpleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playerimageframetid()) {
      set_playerimageframetid(from.playerimageframetid());
    }
    if (from.has_curmount()) {
      set_curmount(from.curmount());
    }
    if (from.has_masterhtid()) {
      set_masterhtid(from.masterhtid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_playermodelherostar()) {
      set_playermodelherostar(from.playermodelherostar());
    }
    if (from.has_bannername()) {
      set_bannername(from.bannername());
    }
    if (from.has_bannerbase()) {
      set_bannerbase(from.bannerbase());
    }
    if (from.has_isshowvip()) {
      set_isshowvip(from.isshowvip());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_canstrangerchat()) {
      set_canstrangerchat(from.canstrangerchat());
    }
    if (from.has_isrefuselowadventure()) {
      set_isrefuselowadventure(from.isrefuselowadventure());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_chatframetid()) {
      set_chatframetid(from.chatframetid());
    }
    if (from.has_maxfightforce()) {
      set_maxfightforce(from.maxfightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserSimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserSimpleInfo::CopyFrom(const TUserSimpleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserSimpleInfo::IsInitialized() const {

  return true;
}

void TUserSimpleInfo::Swap(TUserSimpleInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(uname_, other->uname_);
    std::swap(htid_, other->htid_);
    std::swap(level_, other->level_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(playerimageframetid_, other->playerimageframetid_);
    std::swap(curmount_, other->curmount_);
    std::swap(masterhtid_, other->masterhtid_);
    std::swap(title_, other->title_);
    std::swap(playermodelherostar_, other->playermodelherostar_);
    std::swap(bannername_, other->bannername_);
    std::swap(bannerbase_, other->bannerbase_);
    std::swap(isshowvip_, other->isshowvip_);
    std::swap(canstrangerchat_, other->canstrangerchat_);
    std::swap(isrefuselowadventure_, other->isrefuselowadventure_);
    std::swap(serverid_, other->serverid_);
    std::swap(chatframetid_, other->chatframetid_);
    std::swap(maxfightforce_, other->maxfightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserSimpleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserSimpleInfo_descriptor_;
  metadata.reflection = TUserSimpleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserSimpleInfoWithStatus::kSimpleInfoFieldNumber;
const int TUserSimpleInfoWithStatus::kStatusFieldNumber;
const int TUserSimpleInfoWithStatus::kLogoffTimeFieldNumber;
const int TUserSimpleInfoWithStatus::kSignWordsFieldNumber;
#endif  // !_MSC_VER

TUserSimpleInfoWithStatus::TUserSimpleInfoWithStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserSimpleInfoWithStatus)
}

void TUserSimpleInfoWithStatus::InitAsDefaultInstance() {
  simpleinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TUserSimpleInfoWithStatus::TUserSimpleInfoWithStatus(const TUserSimpleInfoWithStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserSimpleInfoWithStatus)
}

void TUserSimpleInfoWithStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  simpleinfo_ = NULL;
  status_ = 0u;
  logofftime_ = GOOGLE_ULONGLONG(0);
  signwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserSimpleInfoWithStatus::~TUserSimpleInfoWithStatus() {
  // @@protoc_insertion_point(destructor:pb.TUserSimpleInfoWithStatus)
  SharedDtor();
}

void TUserSimpleInfoWithStatus::SharedDtor() {
  if (signwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signwords_;
  }
  if (this != default_instance_) {
    delete simpleinfo_;
  }
}

void TUserSimpleInfoWithStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserSimpleInfoWithStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserSimpleInfoWithStatus_descriptor_;
}

const TUserSimpleInfoWithStatus& TUserSimpleInfoWithStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserSimpleInfoWithStatus* TUserSimpleInfoWithStatus::default_instance_ = NULL;

TUserSimpleInfoWithStatus* TUserSimpleInfoWithStatus::New() const {
  return new TUserSimpleInfoWithStatus;
}

void TUserSimpleInfoWithStatus::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_simpleinfo()) {
      if (simpleinfo_ != NULL) simpleinfo_->::pb::TUserSimpleInfo::Clear();
    }
    status_ = 0u;
    logofftime_ = GOOGLE_ULONGLONG(0);
    if (has_signwords()) {
      if (signwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signwords_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserSimpleInfoWithStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserSimpleInfoWithStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo SimpleInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional uint32 Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LogoffTime;
        break;
      }

      // optional uint64 LogoffTime = 3;
      case 3: {
        if (tag == 24) {
         parse_LogoffTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logofftime_)));
          set_has_logofftime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SignWords;
        break;
      }

      // optional string SignWords = 4;
      case 4: {
        if (tag == 34) {
         parse_SignWords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signwords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signwords().data(), this->signwords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signwords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserSimpleInfoWithStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserSimpleInfoWithStatus)
  return false;
#undef DO_
}

void TUserSimpleInfoWithStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserSimpleInfoWithStatus)
  // optional .pb.TUserSimpleInfo SimpleInfo = 1;
  if (has_simpleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->simpleinfo(), output);
  }

  // optional uint32 Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional uint64 LogoffTime = 3;
  if (has_logofftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->logofftime(), output);
  }

  // optional string SignWords = 4;
  if (has_signwords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signwords().data(), this->signwords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signwords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->signwords(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserSimpleInfoWithStatus)
}

::google::protobuf::uint8* TUserSimpleInfoWithStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserSimpleInfoWithStatus)
  // optional .pb.TUserSimpleInfo SimpleInfo = 1;
  if (has_simpleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->simpleinfo(), target);
  }

  // optional uint32 Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional uint64 LogoffTime = 3;
  if (has_logofftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->logofftime(), target);
  }

  // optional string SignWords = 4;
  if (has_signwords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signwords().data(), this->signwords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signwords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->signwords(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserSimpleInfoWithStatus)
  return target;
}

int TUserSimpleInfoWithStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo SimpleInfo = 1;
    if (has_simpleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simpleinfo());
    }

    // optional uint32 Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint64 LogoffTime = 3;
    if (has_logofftime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logofftime());
    }

    // optional string SignWords = 4;
    if (has_signwords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signwords());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserSimpleInfoWithStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserSimpleInfoWithStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserSimpleInfoWithStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserSimpleInfoWithStatus::MergeFrom(const TUserSimpleInfoWithStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simpleinfo()) {
      mutable_simpleinfo()->::pb::TUserSimpleInfo::MergeFrom(from.simpleinfo());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_logofftime()) {
      set_logofftime(from.logofftime());
    }
    if (from.has_signwords()) {
      set_signwords(from.signwords());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserSimpleInfoWithStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserSimpleInfoWithStatus::CopyFrom(const TUserSimpleInfoWithStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserSimpleInfoWithStatus::IsInitialized() const {

  return true;
}

void TUserSimpleInfoWithStatus::Swap(TUserSimpleInfoWithStatus* other) {
  if (other != this) {
    std::swap(simpleinfo_, other->simpleinfo_);
    std::swap(status_, other->status_);
    std::swap(logofftime_, other->logofftime_);
    std::swap(signwords_, other->signwords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserSimpleInfoWithStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserSimpleInfoWithStatus_descriptor_;
  metadata.reflection = TUserSimpleInfoWithStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserSimpleInfoWithAlly::kSimpleInfoFieldNumber;
const int TUserSimpleInfoWithAlly::kAllyNameFieldNumber;
const int TUserSimpleInfoWithAlly::kAllyIdFieldNumber;
const int TUserSimpleInfoWithAlly::kBannerNameFieldNumber;
const int TUserSimpleInfoWithAlly::kBannerBaseFieldNumber;
const int TUserSimpleInfoWithAlly::kBannerFigureFieldNumber;
const int TUserSimpleInfoWithAlly::kFightForceFieldNumber;
#endif  // !_MSC_VER

TUserSimpleInfoWithAlly::TUserSimpleInfoWithAlly()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserSimpleInfoWithAlly)
}

void TUserSimpleInfoWithAlly::InitAsDefaultInstance() {
  simpleinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TUserSimpleInfoWithAlly::TUserSimpleInfoWithAlly(const TUserSimpleInfoWithAlly& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserSimpleInfoWithAlly)
}

void TUserSimpleInfoWithAlly::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  simpleinfo_ = NULL;
  allyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allyid_ = GOOGLE_ULONGLONG(0);
  bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannerbase_ = 0u;
  bannerfigure_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserSimpleInfoWithAlly::~TUserSimpleInfoWithAlly() {
  // @@protoc_insertion_point(destructor:pb.TUserSimpleInfoWithAlly)
  SharedDtor();
}

void TUserSimpleInfoWithAlly::SharedDtor() {
  if (allyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete allyname_;
  }
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (this != default_instance_) {
    delete simpleinfo_;
  }
}

void TUserSimpleInfoWithAlly::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserSimpleInfoWithAlly::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserSimpleInfoWithAlly_descriptor_;
}

const TUserSimpleInfoWithAlly& TUserSimpleInfoWithAlly::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserSimpleInfoWithAlly* TUserSimpleInfoWithAlly::default_instance_ = NULL;

TUserSimpleInfoWithAlly* TUserSimpleInfoWithAlly::New() const {
  return new TUserSimpleInfoWithAlly;
}

void TUserSimpleInfoWithAlly::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserSimpleInfoWithAlly*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(bannerbase_, fightforce_);
    if (has_simpleinfo()) {
      if (simpleinfo_ != NULL) simpleinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_allyname()) {
      if (allyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        allyname_->clear();
      }
    }
    allyid_ = GOOGLE_ULONGLONG(0);
    if (has_bannername()) {
      if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bannername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserSimpleInfoWithAlly::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserSimpleInfoWithAlly)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo SimpleInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AllyName;
        break;
      }

      // optional string AllyName = 2;
      case 2: {
        if (tag == 18) {
         parse_AllyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->allyname().data(), this->allyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "allyname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AllyId;
        break;
      }

      // optional uint64 AllyId = 3;
      case 3: {
        if (tag == 24) {
         parse_AllyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allyid_)));
          set_has_allyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BannerName;
        break;
      }

      // optional string BannerName = 4;
      case 4: {
        if (tag == 34) {
         parse_BannerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bannername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bannername().data(), this->bannername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bannername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BannerBase;
        break;
      }

      // optional uint32 BannerBase = 5;
      case 5: {
        if (tag == 40) {
         parse_BannerBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerbase_)));
          set_has_bannerbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_BannerFigure;
        break;
      }

      // optional uint32 BannerFigure = 6;
      case 6: {
        if (tag == 48) {
         parse_BannerFigure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerfigure_)));
          set_has_bannerfigure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 7;
      case 7: {
        if (tag == 56) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserSimpleInfoWithAlly)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserSimpleInfoWithAlly)
  return false;
#undef DO_
}

void TUserSimpleInfoWithAlly::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserSimpleInfoWithAlly)
  // optional .pb.TUserSimpleInfo SimpleInfo = 1;
  if (has_simpleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->simpleinfo(), output);
  }

  // optional string AllyName = 2;
  if (has_allyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->allyname().data(), this->allyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "allyname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->allyname(), output);
  }

  // optional uint64 AllyId = 3;
  if (has_allyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->allyid(), output);
  }

  // optional string BannerName = 4;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bannername(), output);
  }

  // optional uint32 BannerBase = 5;
  if (has_bannerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bannerbase(), output);
  }

  // optional uint32 BannerFigure = 6;
  if (has_bannerfigure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bannerfigure(), output);
  }

  // optional uint64 FightForce = 7;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserSimpleInfoWithAlly)
}

::google::protobuf::uint8* TUserSimpleInfoWithAlly::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserSimpleInfoWithAlly)
  // optional .pb.TUserSimpleInfo SimpleInfo = 1;
  if (has_simpleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->simpleinfo(), target);
  }

  // optional string AllyName = 2;
  if (has_allyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->allyname().data(), this->allyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "allyname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->allyname(), target);
  }

  // optional uint64 AllyId = 3;
  if (has_allyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->allyid(), target);
  }

  // optional string BannerName = 4;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bannername(), target);
  }

  // optional uint32 BannerBase = 5;
  if (has_bannerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bannerbase(), target);
  }

  // optional uint32 BannerFigure = 6;
  if (has_bannerfigure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bannerfigure(), target);
  }

  // optional uint64 FightForce = 7;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserSimpleInfoWithAlly)
  return target;
}

int TUserSimpleInfoWithAlly::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo SimpleInfo = 1;
    if (has_simpleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simpleinfo());
    }

    // optional string AllyName = 2;
    if (has_allyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->allyname());
    }

    // optional uint64 AllyId = 3;
    if (has_allyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->allyid());
    }

    // optional string BannerName = 4;
    if (has_bannername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bannername());
    }

    // optional uint32 BannerBase = 5;
    if (has_bannerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerbase());
    }

    // optional uint32 BannerFigure = 6;
    if (has_bannerfigure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerfigure());
    }

    // optional uint64 FightForce = 7;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserSimpleInfoWithAlly::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserSimpleInfoWithAlly* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserSimpleInfoWithAlly*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserSimpleInfoWithAlly::MergeFrom(const TUserSimpleInfoWithAlly& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simpleinfo()) {
      mutable_simpleinfo()->::pb::TUserSimpleInfo::MergeFrom(from.simpleinfo());
    }
    if (from.has_allyname()) {
      set_allyname(from.allyname());
    }
    if (from.has_allyid()) {
      set_allyid(from.allyid());
    }
    if (from.has_bannername()) {
      set_bannername(from.bannername());
    }
    if (from.has_bannerbase()) {
      set_bannerbase(from.bannerbase());
    }
    if (from.has_bannerfigure()) {
      set_bannerfigure(from.bannerfigure());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserSimpleInfoWithAlly::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserSimpleInfoWithAlly::CopyFrom(const TUserSimpleInfoWithAlly& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserSimpleInfoWithAlly::IsInitialized() const {

  return true;
}

void TUserSimpleInfoWithAlly::Swap(TUserSimpleInfoWithAlly* other) {
  if (other != this) {
    std::swap(simpleinfo_, other->simpleinfo_);
    std::swap(allyname_, other->allyname_);
    std::swap(allyid_, other->allyid_);
    std::swap(bannername_, other->bannername_);
    std::swap(bannerbase_, other->bannerbase_);
    std::swap(bannerfigure_, other->bannerfigure_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserSimpleInfoWithAlly::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserSimpleInfoWithAlly_descriptor_;
  metadata.reflection = TUserSimpleInfoWithAlly_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserGetArrUserDataRpgReq::kUidArrayFieldNumber;
#endif  // !_MSC_VER

TUserGetArrUserDataRpgReq::TUserGetArrUserDataRpgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserGetArrUserDataRpgReq)
}

void TUserGetArrUserDataRpgReq::InitAsDefaultInstance() {
}

TUserGetArrUserDataRpgReq::TUserGetArrUserDataRpgReq(const TUserGetArrUserDataRpgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserGetArrUserDataRpgReq)
}

void TUserGetArrUserDataRpgReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserGetArrUserDataRpgReq::~TUserGetArrUserDataRpgReq() {
  // @@protoc_insertion_point(destructor:pb.TUserGetArrUserDataRpgReq)
  SharedDtor();
}

void TUserGetArrUserDataRpgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserGetArrUserDataRpgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserGetArrUserDataRpgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserGetArrUserDataRpgReq_descriptor_;
}

const TUserGetArrUserDataRpgReq& TUserGetArrUserDataRpgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserGetArrUserDataRpgReq* TUserGetArrUserDataRpgReq::default_instance_ = NULL;

TUserGetArrUserDataRpgReq* TUserGetArrUserDataRpgReq::New() const {
  return new TUserGetArrUserDataRpgReq;
}

void TUserGetArrUserDataRpgReq::Clear() {
  uidarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserGetArrUserDataRpgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserGetArrUserDataRpgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 UidArray = 1;
      case 1: {
        if (tag == 8) {
         parse_UidArray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_uidarray())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uidarray())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_UidArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserGetArrUserDataRpgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserGetArrUserDataRpgReq)
  return false;
#undef DO_
}

void TUserGetArrUserDataRpgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserGetArrUserDataRpgReq)
  // repeated uint64 UidArray = 1;
  for (int i = 0; i < this->uidarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->uidarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserGetArrUserDataRpgReq)
}

::google::protobuf::uint8* TUserGetArrUserDataRpgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserGetArrUserDataRpgReq)
  // repeated uint64 UidArray = 1;
  for (int i = 0; i < this->uidarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->uidarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserGetArrUserDataRpgReq)
  return target;
}

int TUserGetArrUserDataRpgReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 UidArray = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uidarray_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uidarray(i));
    }
    total_size += 1 * this->uidarray_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserGetArrUserDataRpgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserGetArrUserDataRpgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserGetArrUserDataRpgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserGetArrUserDataRpgReq::MergeFrom(const TUserGetArrUserDataRpgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  uidarray_.MergeFrom(from.uidarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserGetArrUserDataRpgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserGetArrUserDataRpgReq::CopyFrom(const TUserGetArrUserDataRpgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserGetArrUserDataRpgReq::IsInitialized() const {

  return true;
}

void TUserGetArrUserDataRpgReq::Swap(TUserGetArrUserDataRpgReq* other) {
  if (other != this) {
    uidarray_.Swap(&other->uidarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserGetArrUserDataRpgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserGetArrUserDataRpgReq_descriptor_;
  metadata.reflection = TUserGetArrUserDataRpgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserGetArrUserDataRpgRsp::kUserDataArrayFieldNumber;
#endif  // !_MSC_VER

TUserGetArrUserDataRpgRsp::TUserGetArrUserDataRpgRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserGetArrUserDataRpgRsp)
}

void TUserGetArrUserDataRpgRsp::InitAsDefaultInstance() {
}

TUserGetArrUserDataRpgRsp::TUserGetArrUserDataRpgRsp(const TUserGetArrUserDataRpgRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserGetArrUserDataRpgRsp)
}

void TUserGetArrUserDataRpgRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserGetArrUserDataRpgRsp::~TUserGetArrUserDataRpgRsp() {
  // @@protoc_insertion_point(destructor:pb.TUserGetArrUserDataRpgRsp)
  SharedDtor();
}

void TUserGetArrUserDataRpgRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserGetArrUserDataRpgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserGetArrUserDataRpgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserGetArrUserDataRpgRsp_descriptor_;
}

const TUserGetArrUserDataRpgRsp& TUserGetArrUserDataRpgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserGetArrUserDataRpgRsp* TUserGetArrUserDataRpgRsp::default_instance_ = NULL;

TUserGetArrUserDataRpgRsp* TUserGetArrUserDataRpgRsp::New() const {
  return new TUserGetArrUserDataRpgRsp;
}

void TUserGetArrUserDataRpgRsp::Clear() {
  userdataarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserGetArrUserDataRpgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserGetArrUserDataRpgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUserSimpleInfo UserDataArray = 1;
      case 1: {
        if (tag == 10) {
         parse_UserDataArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userdataarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UserDataArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserGetArrUserDataRpgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserGetArrUserDataRpgRsp)
  return false;
#undef DO_
}

void TUserGetArrUserDataRpgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserGetArrUserDataRpgRsp)
  // repeated .pb.TUserSimpleInfo UserDataArray = 1;
  for (int i = 0; i < this->userdataarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdataarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserGetArrUserDataRpgRsp)
}

::google::protobuf::uint8* TUserGetArrUserDataRpgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserGetArrUserDataRpgRsp)
  // repeated .pb.TUserSimpleInfo UserDataArray = 1;
  for (int i = 0; i < this->userdataarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdataarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserGetArrUserDataRpgRsp)
  return target;
}

int TUserGetArrUserDataRpgRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUserSimpleInfo UserDataArray = 1;
  total_size += 1 * this->userdataarray_size();
  for (int i = 0; i < this->userdataarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userdataarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserGetArrUserDataRpgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserGetArrUserDataRpgRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserGetArrUserDataRpgRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserGetArrUserDataRpgRsp::MergeFrom(const TUserGetArrUserDataRpgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userdataarray_.MergeFrom(from.userdataarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserGetArrUserDataRpgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserGetArrUserDataRpgRsp::CopyFrom(const TUserGetArrUserDataRpgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserGetArrUserDataRpgRsp::IsInitialized() const {

  return true;
}

void TUserGetArrUserDataRpgRsp::Swap(TUserGetArrUserDataRpgRsp* other) {
  if (other != this) {
    userdataarray_.Swap(&other->userdataarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserGetArrUserDataRpgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserGetArrUserDataRpgRsp_descriptor_;
  metadata.reflection = TUserGetArrUserDataRpgRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserFightForceRankItem::kUserInfoFieldNumber;
#endif  // !_MSC_VER

TUserFightForceRankItem::TUserFightForceRankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserFightForceRankItem)
}

void TUserFightForceRankItem::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TUserFightForceRankItem::TUserFightForceRankItem(const TUserFightForceRankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserFightForceRankItem)
}

void TUserFightForceRankItem::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserFightForceRankItem::~TUserFightForceRankItem() {
  // @@protoc_insertion_point(destructor:pb.TUserFightForceRankItem)
  SharedDtor();
}

void TUserFightForceRankItem::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TUserFightForceRankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserFightForceRankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserFightForceRankItem_descriptor_;
}

const TUserFightForceRankItem& TUserFightForceRankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserFightForceRankItem* TUserFightForceRankItem::default_instance_ = NULL;

TUserFightForceRankItem* TUserFightForceRankItem::New() const {
  return new TUserFightForceRankItem;
}

void TUserFightForceRankItem::Clear() {
  if (has_userinfo()) {
    if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserFightForceRankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserFightForceRankItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserFightForceRankItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserFightForceRankItem)
  return false;
#undef DO_
}

void TUserFightForceRankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserFightForceRankItem)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserFightForceRankItem)
}

::google::protobuf::uint8* TUserFightForceRankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserFightForceRankItem)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserFightForceRankItem)
  return target;
}

int TUserFightForceRankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserFightForceRankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserFightForceRankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserFightForceRankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserFightForceRankItem::MergeFrom(const TUserFightForceRankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserFightForceRankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserFightForceRankItem::CopyFrom(const TUserFightForceRankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserFightForceRankItem::IsInitialized() const {

  return true;
}

void TUserFightForceRankItem::Swap(TUserFightForceRankItem* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserFightForceRankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserFightForceRankItem_descriptor_;
  metadata.reflection = TUserFightForceRankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserFightForceRankReq::kOffsetFieldNumber;
const int TUserFightForceRankReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TUserFightForceRankReq::TUserFightForceRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserFightForceRankReq)
}

void TUserFightForceRankReq::InitAsDefaultInstance() {
}

TUserFightForceRankReq::TUserFightForceRankReq(const TUserFightForceRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserFightForceRankReq)
}

void TUserFightForceRankReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserFightForceRankReq::~TUserFightForceRankReq() {
  // @@protoc_insertion_point(destructor:pb.TUserFightForceRankReq)
  SharedDtor();
}

void TUserFightForceRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserFightForceRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserFightForceRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserFightForceRankReq_descriptor_;
}

const TUserFightForceRankReq& TUserFightForceRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserFightForceRankReq* TUserFightForceRankReq::default_instance_ = NULL;

TUserFightForceRankReq* TUserFightForceRankReq::New() const {
  return new TUserFightForceRankReq;
}

void TUserFightForceRankReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserFightForceRankReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserFightForceRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserFightForceRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional int32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserFightForceRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserFightForceRankReq)
  return false;
#undef DO_
}

void TUserFightForceRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserFightForceRankReq)
  // optional int32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // optional int32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserFightForceRankReq)
}

::google::protobuf::uint8* TUserFightForceRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserFightForceRankReq)
  // optional int32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // optional int32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserFightForceRankReq)
  return target;
}

int TUserFightForceRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional int32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserFightForceRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserFightForceRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserFightForceRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserFightForceRankReq::MergeFrom(const TUserFightForceRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserFightForceRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserFightForceRankReq::CopyFrom(const TUserFightForceRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserFightForceRankReq::IsInitialized() const {

  return true;
}

void TUserFightForceRankReq::Swap(TUserFightForceRankReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserFightForceRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserFightForceRankReq_descriptor_;
  metadata.reflection = TUserFightForceRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserFightForceRankRsp::kRankArrFieldNumber;
const int TUserFightForceRankRsp::kMyRankFieldNumber;
#endif  // !_MSC_VER

TUserFightForceRankRsp::TUserFightForceRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserFightForceRankRsp)
}

void TUserFightForceRankRsp::InitAsDefaultInstance() {
}

TUserFightForceRankRsp::TUserFightForceRankRsp(const TUserFightForceRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserFightForceRankRsp)
}

void TUserFightForceRankRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserFightForceRankRsp::~TUserFightForceRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TUserFightForceRankRsp)
  SharedDtor();
}

void TUserFightForceRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserFightForceRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserFightForceRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserFightForceRankRsp_descriptor_;
}

const TUserFightForceRankRsp& TUserFightForceRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserFightForceRankRsp* TUserFightForceRankRsp::default_instance_ = NULL;

TUserFightForceRankRsp* TUserFightForceRankRsp::New() const {
  return new TUserFightForceRankRsp;
}

void TUserFightForceRankRsp::Clear() {
  myrank_ = 0;
  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserFightForceRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserFightForceRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUserFightForceRankItem RankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankArr;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional int32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserFightForceRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserFightForceRankRsp)
  return false;
#undef DO_
}

void TUserFightForceRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserFightForceRankRsp)
  // repeated .pb.TUserFightForceRankItem RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankarr(i), output);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserFightForceRankRsp)
}

::google::protobuf::uint8* TUserFightForceRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserFightForceRankRsp)
  // repeated .pb.TUserFightForceRankItem RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankarr(i), target);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserFightForceRankRsp)
  return target;
}

int TUserFightForceRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

  }
  // repeated .pb.TUserFightForceRankItem RankArr = 1;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserFightForceRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserFightForceRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserFightForceRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserFightForceRankRsp::MergeFrom(const TUserFightForceRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserFightForceRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserFightForceRankRsp::CopyFrom(const TUserFightForceRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserFightForceRankRsp::IsInitialized() const {

  return true;
}

void TUserFightForceRankRsp::Swap(TUserFightForceRankRsp* other) {
  if (other != this) {
    rankarr_.Swap(&other->rankarr_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserFightForceRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserFightForceRankRsp_descriptor_;
  metadata.reflection = TUserFightForceRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserLevelRankItem::kUserInfoFieldNumber;
const int TUserLevelRankItem::kExpFieldNumber;
const int TUserLevelRankItem::kExpChangeTimeFieldNumber;
#endif  // !_MSC_VER

TUserLevelRankItem::TUserLevelRankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserLevelRankItem)
}

void TUserLevelRankItem::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TUserLevelRankItem::TUserLevelRankItem(const TUserLevelRankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserLevelRankItem)
}

void TUserLevelRankItem::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  exp_ = 0u;
  expchangetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserLevelRankItem::~TUserLevelRankItem() {
  // @@protoc_insertion_point(destructor:pb.TUserLevelRankItem)
  SharedDtor();
}

void TUserLevelRankItem::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TUserLevelRankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserLevelRankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserLevelRankItem_descriptor_;
}

const TUserLevelRankItem& TUserLevelRankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserLevelRankItem* TUserLevelRankItem::default_instance_ = NULL;

TUserLevelRankItem* TUserLevelRankItem::New() const {
  return new TUserLevelRankItem;
}

void TUserLevelRankItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserLevelRankItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(expchangetime_, exp_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserLevelRankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserLevelRankItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }

      // optional uint32 Exp = 2;
      case 2: {
        if (tag == 16) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ExpChangeTime;
        break;
      }

      // optional uint64 ExpChangeTime = 3;
      case 3: {
        if (tag == 24) {
         parse_ExpChangeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expchangetime_)));
          set_has_expchangetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserLevelRankItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserLevelRankItem)
  return false;
#undef DO_
}

void TUserLevelRankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserLevelRankItem)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 Exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  // optional uint64 ExpChangeTime = 3;
  if (has_expchangetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->expchangetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserLevelRankItem)
}

::google::protobuf::uint8* TUserLevelRankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserLevelRankItem)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 Exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }

  // optional uint64 ExpChangeTime = 3;
  if (has_expchangetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->expchangetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserLevelRankItem)
  return target;
}

int TUserLevelRankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 Exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint64 ExpChangeTime = 3;
    if (has_expchangetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expchangetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserLevelRankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserLevelRankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserLevelRankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserLevelRankItem::MergeFrom(const TUserLevelRankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_expchangetime()) {
      set_expchangetime(from.expchangetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserLevelRankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserLevelRankItem::CopyFrom(const TUserLevelRankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserLevelRankItem::IsInitialized() const {

  return true;
}

void TUserLevelRankItem::Swap(TUserLevelRankItem* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(exp_, other->exp_);
    std::swap(expchangetime_, other->expchangetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserLevelRankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserLevelRankItem_descriptor_;
  metadata.reflection = TUserLevelRankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserLevelRankReq::kOffsetFieldNumber;
const int TUserLevelRankReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TUserLevelRankReq::TUserLevelRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserLevelRankReq)
}

void TUserLevelRankReq::InitAsDefaultInstance() {
}

TUserLevelRankReq::TUserLevelRankReq(const TUserLevelRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserLevelRankReq)
}

void TUserLevelRankReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserLevelRankReq::~TUserLevelRankReq() {
  // @@protoc_insertion_point(destructor:pb.TUserLevelRankReq)
  SharedDtor();
}

void TUserLevelRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserLevelRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserLevelRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserLevelRankReq_descriptor_;
}

const TUserLevelRankReq& TUserLevelRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserLevelRankReq* TUserLevelRankReq::default_instance_ = NULL;

TUserLevelRankReq* TUserLevelRankReq::New() const {
  return new TUserLevelRankReq;
}

void TUserLevelRankReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserLevelRankReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserLevelRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserLevelRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional int32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserLevelRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserLevelRankReq)
  return false;
#undef DO_
}

void TUserLevelRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserLevelRankReq)
  // optional int32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // optional int32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserLevelRankReq)
}

::google::protobuf::uint8* TUserLevelRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserLevelRankReq)
  // optional int32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // optional int32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserLevelRankReq)
  return target;
}

int TUserLevelRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional int32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserLevelRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserLevelRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserLevelRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserLevelRankReq::MergeFrom(const TUserLevelRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserLevelRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserLevelRankReq::CopyFrom(const TUserLevelRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserLevelRankReq::IsInitialized() const {

  return true;
}

void TUserLevelRankReq::Swap(TUserLevelRankReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserLevelRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserLevelRankReq_descriptor_;
  metadata.reflection = TUserLevelRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserLevelRankRsp::kRankArrFieldNumber;
const int TUserLevelRankRsp::kMyRankFieldNumber;
#endif  // !_MSC_VER

TUserLevelRankRsp::TUserLevelRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserLevelRankRsp)
}

void TUserLevelRankRsp::InitAsDefaultInstance() {
}

TUserLevelRankRsp::TUserLevelRankRsp(const TUserLevelRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserLevelRankRsp)
}

void TUserLevelRankRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserLevelRankRsp::~TUserLevelRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TUserLevelRankRsp)
  SharedDtor();
}

void TUserLevelRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserLevelRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserLevelRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserLevelRankRsp_descriptor_;
}

const TUserLevelRankRsp& TUserLevelRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserLevelRankRsp* TUserLevelRankRsp::default_instance_ = NULL;

TUserLevelRankRsp* TUserLevelRankRsp::New() const {
  return new TUserLevelRankRsp;
}

void TUserLevelRankRsp::Clear() {
  myrank_ = 0;
  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserLevelRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserLevelRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUserLevelRankItem RankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankArr;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional int32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserLevelRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserLevelRankRsp)
  return false;
#undef DO_
}

void TUserLevelRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserLevelRankRsp)
  // repeated .pb.TUserLevelRankItem RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankarr(i), output);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserLevelRankRsp)
}

::google::protobuf::uint8* TUserLevelRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserLevelRankRsp)
  // repeated .pb.TUserLevelRankItem RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankarr(i), target);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserLevelRankRsp)
  return target;
}

int TUserLevelRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

  }
  // repeated .pb.TUserLevelRankItem RankArr = 1;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserLevelRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserLevelRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserLevelRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserLevelRankRsp::MergeFrom(const TUserLevelRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserLevelRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserLevelRankRsp::CopyFrom(const TUserLevelRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserLevelRankRsp::IsInitialized() const {

  return true;
}

void TUserLevelRankRsp::Swap(TUserLevelRankRsp* other) {
  if (other != this) {
    rankarr_.Swap(&other->rankarr_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserLevelRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserLevelRankRsp_descriptor_;
  metadata.reflection = TUserLevelRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserSetPlayerImageReq::kPlayerImageFrameTidFieldNumber;
#endif  // !_MSC_VER

TUserSetPlayerImageReq::TUserSetPlayerImageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserSetPlayerImageReq)
}

void TUserSetPlayerImageReq::InitAsDefaultInstance() {
}

TUserSetPlayerImageReq::TUserSetPlayerImageReq(const TUserSetPlayerImageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserSetPlayerImageReq)
}

void TUserSetPlayerImageReq::SharedCtor() {
  _cached_size_ = 0;
  playerimageframetid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserSetPlayerImageReq::~TUserSetPlayerImageReq() {
  // @@protoc_insertion_point(destructor:pb.TUserSetPlayerImageReq)
  SharedDtor();
}

void TUserSetPlayerImageReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserSetPlayerImageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserSetPlayerImageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserSetPlayerImageReq_descriptor_;
}

const TUserSetPlayerImageReq& TUserSetPlayerImageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserSetPlayerImageReq* TUserSetPlayerImageReq::default_instance_ = NULL;

TUserSetPlayerImageReq* TUserSetPlayerImageReq::New() const {
  return new TUserSetPlayerImageReq;
}

void TUserSetPlayerImageReq::Clear() {
  playerimageframetid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserSetPlayerImageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserSetPlayerImageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PlayerImageFrameTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerimageframetid_)));
          set_has_playerimageframetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserSetPlayerImageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserSetPlayerImageReq)
  return false;
#undef DO_
}

void TUserSetPlayerImageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserSetPlayerImageReq)
  // optional int32 PlayerImageFrameTid = 1;
  if (has_playerimageframetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerimageframetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserSetPlayerImageReq)
}

::google::protobuf::uint8* TUserSetPlayerImageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserSetPlayerImageReq)
  // optional int32 PlayerImageFrameTid = 1;
  if (has_playerimageframetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerimageframetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserSetPlayerImageReq)
  return target;
}

int TUserSetPlayerImageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PlayerImageFrameTid = 1;
    if (has_playerimageframetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerimageframetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserSetPlayerImageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserSetPlayerImageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserSetPlayerImageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserSetPlayerImageReq::MergeFrom(const TUserSetPlayerImageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerimageframetid()) {
      set_playerimageframetid(from.playerimageframetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserSetPlayerImageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserSetPlayerImageReq::CopyFrom(const TUserSetPlayerImageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserSetPlayerImageReq::IsInitialized() const {

  return true;
}

void TUserSetPlayerImageReq::Swap(TUserSetPlayerImageReq* other) {
  if (other != this) {
    std::swap(playerimageframetid_, other->playerimageframetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserSetPlayerImageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserSetPlayerImageReq_descriptor_;
  metadata.reflection = TUserSetPlayerImageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserSetSignWordsReq::kSignWordsFieldNumber;
#endif  // !_MSC_VER

TUserSetSignWordsReq::TUserSetSignWordsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserSetSignWordsReq)
}

void TUserSetSignWordsReq::InitAsDefaultInstance() {
}

TUserSetSignWordsReq::TUserSetSignWordsReq(const TUserSetSignWordsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserSetSignWordsReq)
}

void TUserSetSignWordsReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserSetSignWordsReq::~TUserSetSignWordsReq() {
  // @@protoc_insertion_point(destructor:pb.TUserSetSignWordsReq)
  SharedDtor();
}

void TUserSetSignWordsReq::SharedDtor() {
  if (signwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signwords_;
  }
  if (this != default_instance_) {
  }
}

void TUserSetSignWordsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserSetSignWordsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserSetSignWordsReq_descriptor_;
}

const TUserSetSignWordsReq& TUserSetSignWordsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserSetSignWordsReq* TUserSetSignWordsReq::default_instance_ = NULL;

TUserSetSignWordsReq* TUserSetSignWordsReq::New() const {
  return new TUserSetSignWordsReq;
}

void TUserSetSignWordsReq::Clear() {
  if (has_signwords()) {
    if (signwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      signwords_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserSetSignWordsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserSetSignWordsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SignWords = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signwords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signwords().data(), this->signwords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signwords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserSetSignWordsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserSetSignWordsReq)
  return false;
#undef DO_
}

void TUserSetSignWordsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserSetSignWordsReq)
  // optional string SignWords = 1;
  if (has_signwords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signwords().data(), this->signwords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signwords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signwords(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserSetSignWordsReq)
}

::google::protobuf::uint8* TUserSetSignWordsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserSetSignWordsReq)
  // optional string SignWords = 1;
  if (has_signwords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signwords().data(), this->signwords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signwords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signwords(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserSetSignWordsReq)
  return target;
}

int TUserSetSignWordsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SignWords = 1;
    if (has_signwords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signwords());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserSetSignWordsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserSetSignWordsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserSetSignWordsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserSetSignWordsReq::MergeFrom(const TUserSetSignWordsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signwords()) {
      set_signwords(from.signwords());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserSetSignWordsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserSetSignWordsReq::CopyFrom(const TUserSetSignWordsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserSetSignWordsReq::IsInitialized() const {

  return true;
}

void TUserSetSignWordsReq::Swap(TUserSetSignWordsReq* other) {
  if (other != this) {
    std::swap(signwords_, other->signwords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserSetSignWordsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserSetSignWordsReq_descriptor_;
  metadata.reflection = TUserSetSignWordsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserSetModelReq::kHtidFieldNumber;
#endif  // !_MSC_VER

TUserSetModelReq::TUserSetModelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserSetModelReq)
}

void TUserSetModelReq::InitAsDefaultInstance() {
}

TUserSetModelReq::TUserSetModelReq(const TUserSetModelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserSetModelReq)
}

void TUserSetModelReq::SharedCtor() {
  _cached_size_ = 0;
  htid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserSetModelReq::~TUserSetModelReq() {
  // @@protoc_insertion_point(destructor:pb.TUserSetModelReq)
  SharedDtor();
}

void TUserSetModelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserSetModelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserSetModelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserSetModelReq_descriptor_;
}

const TUserSetModelReq& TUserSetModelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserSetModelReq* TUserSetModelReq::default_instance_ = NULL;

TUserSetModelReq* TUserSetModelReq::New() const {
  return new TUserSetModelReq;
}

void TUserSetModelReq::Clear() {
  htid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserSetModelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserSetModelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Htid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserSetModelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserSetModelReq)
  return false;
#undef DO_
}

void TUserSetModelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserSetModelReq)
  // optional int32 Htid = 1;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->htid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserSetModelReq)
}

::google::protobuf::uint8* TUserSetModelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserSetModelReq)
  // optional int32 Htid = 1;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->htid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserSetModelReq)
  return target;
}

int TUserSetModelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Htid = 1;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->htid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserSetModelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserSetModelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserSetModelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserSetModelReq::MergeFrom(const TUserSetModelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_htid()) {
      set_htid(from.htid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserSetModelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserSetModelReq::CopyFrom(const TUserSetModelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserSetModelReq::IsInitialized() const {

  return true;
}

void TUserSetModelReq::Swap(TUserSetModelReq* other) {
  if (other != this) {
    std::swap(htid_, other->htid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserSetModelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserSetModelReq_descriptor_;
  metadata.reflection = TUserSetModelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserChangeUnameReq::kUnameFieldNumber;
const int TUserChangeUnameReq::kNameTypeFieldNumber;
#endif  // !_MSC_VER

TUserChangeUnameReq::TUserChangeUnameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserChangeUnameReq)
}

void TUserChangeUnameReq::InitAsDefaultInstance() {
}

TUserChangeUnameReq::TUserChangeUnameReq(const TUserChangeUnameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserChangeUnameReq)
}

void TUserChangeUnameReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nametype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserChangeUnameReq::~TUserChangeUnameReq() {
  // @@protoc_insertion_point(destructor:pb.TUserChangeUnameReq)
  SharedDtor();
}

void TUserChangeUnameReq::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void TUserChangeUnameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserChangeUnameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserChangeUnameReq_descriptor_;
}

const TUserChangeUnameReq& TUserChangeUnameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserChangeUnameReq* TUserChangeUnameReq::default_instance_ = NULL;

TUserChangeUnameReq* TUserChangeUnameReq::New() const {
  return new TUserChangeUnameReq;
}

void TUserChangeUnameReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
    nametype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserChangeUnameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserChangeUnameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Uname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NameType;
        break;
      }

      // optional uint32 NameType = 2;
      case 2: {
        if (tag == 16) {
         parse_NameType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nametype_)));
          set_has_nametype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserChangeUnameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserChangeUnameReq)
  return false;
#undef DO_
}

void TUserChangeUnameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserChangeUnameReq)
  // optional string Uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uname(), output);
  }

  // optional uint32 NameType = 2;
  if (has_nametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nametype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserChangeUnameReq)
}

::google::protobuf::uint8* TUserChangeUnameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserChangeUnameReq)
  // optional string Uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uname(), target);
  }

  // optional uint32 NameType = 2;
  if (has_nametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nametype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserChangeUnameReq)
  return target;
}

int TUserChangeUnameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Uname = 1;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint32 NameType = 2;
    if (has_nametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nametype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserChangeUnameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserChangeUnameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserChangeUnameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserChangeUnameReq::MergeFrom(const TUserChangeUnameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_nametype()) {
      set_nametype(from.nametype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserChangeUnameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserChangeUnameReq::CopyFrom(const TUserChangeUnameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserChangeUnameReq::IsInitialized() const {

  return true;
}

void TUserChangeUnameReq::Swap(TUserChangeUnameReq* other) {
  if (other != this) {
    std::swap(uname_, other->uname_);
    std::swap(nametype_, other->nametype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserChangeUnameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserChangeUnameReq_descriptor_;
  metadata.reflection = TUserChangeUnameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserBuySilverCoinReq::kHasBuyNumFieldNumber;
const int TUserBuySilverCoinReq::kHasFreeNumFieldNumber;
const int TUserBuySilverCoinReq::kWantBuyNumFieldNumber;
#endif  // !_MSC_VER

TUserBuySilverCoinReq::TUserBuySilverCoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserBuySilverCoinReq)
}

void TUserBuySilverCoinReq::InitAsDefaultInstance() {
}

TUserBuySilverCoinReq::TUserBuySilverCoinReq(const TUserBuySilverCoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserBuySilverCoinReq)
}

void TUserBuySilverCoinReq::SharedCtor() {
  _cached_size_ = 0;
  hasbuynum_ = 0;
  hasfreenum_ = 0;
  wantbuynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserBuySilverCoinReq::~TUserBuySilverCoinReq() {
  // @@protoc_insertion_point(destructor:pb.TUserBuySilverCoinReq)
  SharedDtor();
}

void TUserBuySilverCoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserBuySilverCoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserBuySilverCoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserBuySilverCoinReq_descriptor_;
}

const TUserBuySilverCoinReq& TUserBuySilverCoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserBuySilverCoinReq* TUserBuySilverCoinReq::default_instance_ = NULL;

TUserBuySilverCoinReq* TUserBuySilverCoinReq::New() const {
  return new TUserBuySilverCoinReq;
}

void TUserBuySilverCoinReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserBuySilverCoinReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hasbuynum_, wantbuynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserBuySilverCoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserBuySilverCoinReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HasBuyNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasbuynum_)));
          set_has_hasbuynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HasFreeNum;
        break;
      }

      // optional int32 HasFreeNum = 2;
      case 2: {
        if (tag == 16) {
         parse_HasFreeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasfreenum_)));
          set_has_hasfreenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_WantBuyNum;
        break;
      }

      // optional int32 WantBuyNum = 3;
      case 3: {
        if (tag == 24) {
         parse_WantBuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wantbuynum_)));
          set_has_wantbuynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserBuySilverCoinReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserBuySilverCoinReq)
  return false;
#undef DO_
}

void TUserBuySilverCoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserBuySilverCoinReq)
  // optional int32 HasBuyNum = 1;
  if (has_hasbuynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hasbuynum(), output);
  }

  // optional int32 HasFreeNum = 2;
  if (has_hasfreenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hasfreenum(), output);
  }

  // optional int32 WantBuyNum = 3;
  if (has_wantbuynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wantbuynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserBuySilverCoinReq)
}

::google::protobuf::uint8* TUserBuySilverCoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserBuySilverCoinReq)
  // optional int32 HasBuyNum = 1;
  if (has_hasbuynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hasbuynum(), target);
  }

  // optional int32 HasFreeNum = 2;
  if (has_hasfreenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hasfreenum(), target);
  }

  // optional int32 WantBuyNum = 3;
  if (has_wantbuynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wantbuynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserBuySilverCoinReq)
  return target;
}

int TUserBuySilverCoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HasBuyNum = 1;
    if (has_hasbuynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasbuynum());
    }

    // optional int32 HasFreeNum = 2;
    if (has_hasfreenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasfreenum());
    }

    // optional int32 WantBuyNum = 3;
    if (has_wantbuynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wantbuynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserBuySilverCoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserBuySilverCoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserBuySilverCoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserBuySilverCoinReq::MergeFrom(const TUserBuySilverCoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasbuynum()) {
      set_hasbuynum(from.hasbuynum());
    }
    if (from.has_hasfreenum()) {
      set_hasfreenum(from.hasfreenum());
    }
    if (from.has_wantbuynum()) {
      set_wantbuynum(from.wantbuynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserBuySilverCoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserBuySilverCoinReq::CopyFrom(const TUserBuySilverCoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserBuySilverCoinReq::IsInitialized() const {

  return true;
}

void TUserBuySilverCoinReq::Swap(TUserBuySilverCoinReq* other) {
  if (other != this) {
    std::swap(hasbuynum_, other->hasbuynum_);
    std::swap(hasfreenum_, other->hasfreenum_);
    std::swap(wantbuynum_, other->wantbuynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserBuySilverCoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserBuySilverCoinReq_descriptor_;
  metadata.reflection = TUserBuySilverCoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserBuySilverCoinSingle::kCostGoldNumFieldNumber;
const int TUserBuySilverCoinSingle::kBuySilverCoinNumFieldNumber;
const int TUserBuySilverCoinSingle::kMultipleFieldNumber;
#endif  // !_MSC_VER

TUserBuySilverCoinSingle::TUserBuySilverCoinSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserBuySilverCoinSingle)
}

void TUserBuySilverCoinSingle::InitAsDefaultInstance() {
}

TUserBuySilverCoinSingle::TUserBuySilverCoinSingle(const TUserBuySilverCoinSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserBuySilverCoinSingle)
}

void TUserBuySilverCoinSingle::SharedCtor() {
  _cached_size_ = 0;
  costgoldnum_ = 0;
  buysilvercoinnum_ = 0;
  multiple_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserBuySilverCoinSingle::~TUserBuySilverCoinSingle() {
  // @@protoc_insertion_point(destructor:pb.TUserBuySilverCoinSingle)
  SharedDtor();
}

void TUserBuySilverCoinSingle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserBuySilverCoinSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserBuySilverCoinSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserBuySilverCoinSingle_descriptor_;
}

const TUserBuySilverCoinSingle& TUserBuySilverCoinSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserBuySilverCoinSingle* TUserBuySilverCoinSingle::default_instance_ = NULL;

TUserBuySilverCoinSingle* TUserBuySilverCoinSingle::New() const {
  return new TUserBuySilverCoinSingle;
}

void TUserBuySilverCoinSingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserBuySilverCoinSingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(costgoldnum_, multiple_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserBuySilverCoinSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserBuySilverCoinSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CostGoldNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costgoldnum_)));
          set_has_costgoldnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuySilverCoinNum;
        break;
      }

      // optional int32 BuySilverCoinNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuySilverCoinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buysilvercoinnum_)));
          set_has_buysilvercoinnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Multiple;
        break;
      }

      // optional int32 Multiple = 3;
      case 3: {
        if (tag == 24) {
         parse_Multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserBuySilverCoinSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserBuySilverCoinSingle)
  return false;
#undef DO_
}

void TUserBuySilverCoinSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserBuySilverCoinSingle)
  // optional int32 CostGoldNum = 1;
  if (has_costgoldnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->costgoldnum(), output);
  }

  // optional int32 BuySilverCoinNum = 2;
  if (has_buysilvercoinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buysilvercoinnum(), output);
  }

  // optional int32 Multiple = 3;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->multiple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserBuySilverCoinSingle)
}

::google::protobuf::uint8* TUserBuySilverCoinSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserBuySilverCoinSingle)
  // optional int32 CostGoldNum = 1;
  if (has_costgoldnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->costgoldnum(), target);
  }

  // optional int32 BuySilverCoinNum = 2;
  if (has_buysilvercoinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buysilvercoinnum(), target);
  }

  // optional int32 Multiple = 3;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->multiple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserBuySilverCoinSingle)
  return target;
}

int TUserBuySilverCoinSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CostGoldNum = 1;
    if (has_costgoldnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costgoldnum());
    }

    // optional int32 BuySilverCoinNum = 2;
    if (has_buysilvercoinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buysilvercoinnum());
    }

    // optional int32 Multiple = 3;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multiple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserBuySilverCoinSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserBuySilverCoinSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserBuySilverCoinSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserBuySilverCoinSingle::MergeFrom(const TUserBuySilverCoinSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_costgoldnum()) {
      set_costgoldnum(from.costgoldnum());
    }
    if (from.has_buysilvercoinnum()) {
      set_buysilvercoinnum(from.buysilvercoinnum());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserBuySilverCoinSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserBuySilverCoinSingle::CopyFrom(const TUserBuySilverCoinSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserBuySilverCoinSingle::IsInitialized() const {

  return true;
}

void TUserBuySilverCoinSingle::Swap(TUserBuySilverCoinSingle* other) {
  if (other != this) {
    std::swap(costgoldnum_, other->costgoldnum_);
    std::swap(buysilvercoinnum_, other->buysilvercoinnum_);
    std::swap(multiple_, other->multiple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserBuySilverCoinSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserBuySilverCoinSingle_descriptor_;
  metadata.reflection = TUserBuySilverCoinSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserBuySilverCoinRsp::kHasBuyNumFieldNumber;
const int TUserBuySilverCoinRsp::kHasFreeNumFieldNumber;
const int TUserBuySilverCoinRsp::kBuyInfoArrFieldNumber;
#endif  // !_MSC_VER

TUserBuySilverCoinRsp::TUserBuySilverCoinRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserBuySilverCoinRsp)
}

void TUserBuySilverCoinRsp::InitAsDefaultInstance() {
}

TUserBuySilverCoinRsp::TUserBuySilverCoinRsp(const TUserBuySilverCoinRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserBuySilverCoinRsp)
}

void TUserBuySilverCoinRsp::SharedCtor() {
  _cached_size_ = 0;
  hasbuynum_ = 0;
  hasfreenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserBuySilverCoinRsp::~TUserBuySilverCoinRsp() {
  // @@protoc_insertion_point(destructor:pb.TUserBuySilverCoinRsp)
  SharedDtor();
}

void TUserBuySilverCoinRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserBuySilverCoinRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserBuySilverCoinRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserBuySilverCoinRsp_descriptor_;
}

const TUserBuySilverCoinRsp& TUserBuySilverCoinRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserBuySilverCoinRsp* TUserBuySilverCoinRsp::default_instance_ = NULL;

TUserBuySilverCoinRsp* TUserBuySilverCoinRsp::New() const {
  return new TUserBuySilverCoinRsp;
}

void TUserBuySilverCoinRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserBuySilverCoinRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hasbuynum_, hasfreenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  buyinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserBuySilverCoinRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserBuySilverCoinRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HasBuyNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasbuynum_)));
          set_has_hasbuynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HasFreeNum;
        break;
      }

      // optional int32 HasFreeNum = 2;
      case 2: {
        if (tag == 16) {
         parse_HasFreeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasfreenum_)));
          set_has_hasfreenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BuyInfoArr;
        break;
      }

      // repeated .pb.TUserBuySilverCoinSingle BuyInfoArr = 3;
      case 3: {
        if (tag == 26) {
         parse_BuyInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buyinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BuyInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserBuySilverCoinRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserBuySilverCoinRsp)
  return false;
#undef DO_
}

void TUserBuySilverCoinRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserBuySilverCoinRsp)
  // optional int32 HasBuyNum = 1;
  if (has_hasbuynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hasbuynum(), output);
  }

  // optional int32 HasFreeNum = 2;
  if (has_hasfreenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hasfreenum(), output);
  }

  // repeated .pb.TUserBuySilverCoinSingle BuyInfoArr = 3;
  for (int i = 0; i < this->buyinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buyinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserBuySilverCoinRsp)
}

::google::protobuf::uint8* TUserBuySilverCoinRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserBuySilverCoinRsp)
  // optional int32 HasBuyNum = 1;
  if (has_hasbuynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hasbuynum(), target);
  }

  // optional int32 HasFreeNum = 2;
  if (has_hasfreenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hasfreenum(), target);
  }

  // repeated .pb.TUserBuySilverCoinSingle BuyInfoArr = 3;
  for (int i = 0; i < this->buyinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buyinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserBuySilverCoinRsp)
  return target;
}

int TUserBuySilverCoinRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HasBuyNum = 1;
    if (has_hasbuynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasbuynum());
    }

    // optional int32 HasFreeNum = 2;
    if (has_hasfreenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasfreenum());
    }

  }
  // repeated .pb.TUserBuySilverCoinSingle BuyInfoArr = 3;
  total_size += 1 * this->buyinfoarr_size();
  for (int i = 0; i < this->buyinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buyinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserBuySilverCoinRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserBuySilverCoinRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserBuySilverCoinRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserBuySilverCoinRsp::MergeFrom(const TUserBuySilverCoinRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  buyinfoarr_.MergeFrom(from.buyinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasbuynum()) {
      set_hasbuynum(from.hasbuynum());
    }
    if (from.has_hasfreenum()) {
      set_hasfreenum(from.hasfreenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserBuySilverCoinRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserBuySilverCoinRsp::CopyFrom(const TUserBuySilverCoinRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserBuySilverCoinRsp::IsInitialized() const {

  return true;
}

void TUserBuySilverCoinRsp::Swap(TUserBuySilverCoinRsp* other) {
  if (other != this) {
    std::swap(hasbuynum_, other->hasbuynum_);
    std::swap(hasfreenum_, other->hasfreenum_);
    buyinfoarr_.Swap(&other->buyinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserBuySilverCoinRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserBuySilverCoinRsp_descriptor_;
  metadata.reflection = TUserBuySilverCoinRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserBuyExecuteReq::kHasBuyNumFieldNumber;
#endif  // !_MSC_VER

TUserBuyExecuteReq::TUserBuyExecuteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserBuyExecuteReq)
}

void TUserBuyExecuteReq::InitAsDefaultInstance() {
}

TUserBuyExecuteReq::TUserBuyExecuteReq(const TUserBuyExecuteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserBuyExecuteReq)
}

void TUserBuyExecuteReq::SharedCtor() {
  _cached_size_ = 0;
  hasbuynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserBuyExecuteReq::~TUserBuyExecuteReq() {
  // @@protoc_insertion_point(destructor:pb.TUserBuyExecuteReq)
  SharedDtor();
}

void TUserBuyExecuteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserBuyExecuteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserBuyExecuteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserBuyExecuteReq_descriptor_;
}

const TUserBuyExecuteReq& TUserBuyExecuteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserBuyExecuteReq* TUserBuyExecuteReq::default_instance_ = NULL;

TUserBuyExecuteReq* TUserBuyExecuteReq::New() const {
  return new TUserBuyExecuteReq;
}

void TUserBuyExecuteReq::Clear() {
  hasbuynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserBuyExecuteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserBuyExecuteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HasBuyNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasbuynum_)));
          set_has_hasbuynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserBuyExecuteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserBuyExecuteReq)
  return false;
#undef DO_
}

void TUserBuyExecuteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserBuyExecuteReq)
  // optional int32 HasBuyNum = 1;
  if (has_hasbuynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hasbuynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserBuyExecuteReq)
}

::google::protobuf::uint8* TUserBuyExecuteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserBuyExecuteReq)
  // optional int32 HasBuyNum = 1;
  if (has_hasbuynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hasbuynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserBuyExecuteReq)
  return target;
}

int TUserBuyExecuteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HasBuyNum = 1;
    if (has_hasbuynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasbuynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserBuyExecuteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserBuyExecuteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserBuyExecuteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserBuyExecuteReq::MergeFrom(const TUserBuyExecuteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasbuynum()) {
      set_hasbuynum(from.hasbuynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserBuyExecuteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserBuyExecuteReq::CopyFrom(const TUserBuyExecuteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserBuyExecuteReq::IsInitialized() const {

  return true;
}

void TUserBuyExecuteReq::Swap(TUserBuyExecuteReq* other) {
  if (other != this) {
    std::swap(hasbuynum_, other->hasbuynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserBuyExecuteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserBuyExecuteReq_descriptor_;
  metadata.reflection = TUserBuyExecuteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserGetRandomNameArrReq::kGenderFieldNumber;
const int TUserGetRandomNameArrReq::kCsvTypeFieldNumber;
#endif  // !_MSC_VER

TUserGetRandomNameArrReq::TUserGetRandomNameArrReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserGetRandomNameArrReq)
}

void TUserGetRandomNameArrReq::InitAsDefaultInstance() {
}

TUserGetRandomNameArrReq::TUserGetRandomNameArrReq(const TUserGetRandomNameArrReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserGetRandomNameArrReq)
}

void TUserGetRandomNameArrReq::SharedCtor() {
  _cached_size_ = 0;
  gender_ = 0u;
  csvtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserGetRandomNameArrReq::~TUserGetRandomNameArrReq() {
  // @@protoc_insertion_point(destructor:pb.TUserGetRandomNameArrReq)
  SharedDtor();
}

void TUserGetRandomNameArrReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserGetRandomNameArrReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserGetRandomNameArrReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserGetRandomNameArrReq_descriptor_;
}

const TUserGetRandomNameArrReq& TUserGetRandomNameArrReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserGetRandomNameArrReq* TUserGetRandomNameArrReq::default_instance_ = NULL;

TUserGetRandomNameArrReq* TUserGetRandomNameArrReq::New() const {
  return new TUserGetRandomNameArrReq;
}

void TUserGetRandomNameArrReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserGetRandomNameArrReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gender_, csvtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserGetRandomNameArrReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserGetRandomNameArrReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Gender = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CsvType;
        break;
      }

      // optional uint32 CsvType = 2;
      case 2: {
        if (tag == 16) {
         parse_CsvType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &csvtype_)));
          set_has_csvtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserGetRandomNameArrReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserGetRandomNameArrReq)
  return false;
#undef DO_
}

void TUserGetRandomNameArrReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserGetRandomNameArrReq)
  // optional uint32 Gender = 1;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gender(), output);
  }

  // optional uint32 CsvType = 2;
  if (has_csvtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->csvtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserGetRandomNameArrReq)
}

::google::protobuf::uint8* TUserGetRandomNameArrReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserGetRandomNameArrReq)
  // optional uint32 Gender = 1;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gender(), target);
  }

  // optional uint32 CsvType = 2;
  if (has_csvtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->csvtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserGetRandomNameArrReq)
  return target;
}

int TUserGetRandomNameArrReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Gender = 1;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint32 CsvType = 2;
    if (has_csvtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->csvtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserGetRandomNameArrReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserGetRandomNameArrReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserGetRandomNameArrReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserGetRandomNameArrReq::MergeFrom(const TUserGetRandomNameArrReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_csvtype()) {
      set_csvtype(from.csvtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserGetRandomNameArrReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserGetRandomNameArrReq::CopyFrom(const TUserGetRandomNameArrReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserGetRandomNameArrReq::IsInitialized() const {

  return true;
}

void TUserGetRandomNameArrReq::Swap(TUserGetRandomNameArrReq* other) {
  if (other != this) {
    std::swap(gender_, other->gender_);
    std::swap(csvtype_, other->csvtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserGetRandomNameArrReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserGetRandomNameArrReq_descriptor_;
  metadata.reflection = TUserGetRandomNameArrReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserGetRandomNameArrRsp::kRandomNameArrFieldNumber;
#endif  // !_MSC_VER

TUserGetRandomNameArrRsp::TUserGetRandomNameArrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserGetRandomNameArrRsp)
}

void TUserGetRandomNameArrRsp::InitAsDefaultInstance() {
}

TUserGetRandomNameArrRsp::TUserGetRandomNameArrRsp(const TUserGetRandomNameArrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserGetRandomNameArrRsp)
}

void TUserGetRandomNameArrRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserGetRandomNameArrRsp::~TUserGetRandomNameArrRsp() {
  // @@protoc_insertion_point(destructor:pb.TUserGetRandomNameArrRsp)
  SharedDtor();
}

void TUserGetRandomNameArrRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserGetRandomNameArrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserGetRandomNameArrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserGetRandomNameArrRsp_descriptor_;
}

const TUserGetRandomNameArrRsp& TUserGetRandomNameArrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserGetRandomNameArrRsp* TUserGetRandomNameArrRsp::default_instance_ = NULL;

TUserGetRandomNameArrRsp* TUserGetRandomNameArrRsp::New() const {
  return new TUserGetRandomNameArrRsp;
}

void TUserGetRandomNameArrRsp::Clear() {
  randomnamearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserGetRandomNameArrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserGetRandomNameArrRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string RandomNameArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RandomNameArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_randomnamearr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->randomnamearr(this->randomnamearr_size() - 1).data(),
            this->randomnamearr(this->randomnamearr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "randomnamearr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RandomNameArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserGetRandomNameArrRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserGetRandomNameArrRsp)
  return false;
#undef DO_
}

void TUserGetRandomNameArrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserGetRandomNameArrRsp)
  // repeated string RandomNameArr = 1;
  for (int i = 0; i < this->randomnamearr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->randomnamearr(i).data(), this->randomnamearr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "randomnamearr");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->randomnamearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserGetRandomNameArrRsp)
}

::google::protobuf::uint8* TUserGetRandomNameArrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserGetRandomNameArrRsp)
  // repeated string RandomNameArr = 1;
  for (int i = 0; i < this->randomnamearr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->randomnamearr(i).data(), this->randomnamearr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "randomnamearr");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->randomnamearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserGetRandomNameArrRsp)
  return target;
}

int TUserGetRandomNameArrRsp::ByteSize() const {
  int total_size = 0;

  // repeated string RandomNameArr = 1;
  total_size += 1 * this->randomnamearr_size();
  for (int i = 0; i < this->randomnamearr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->randomnamearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserGetRandomNameArrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserGetRandomNameArrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserGetRandomNameArrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserGetRandomNameArrRsp::MergeFrom(const TUserGetRandomNameArrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  randomnamearr_.MergeFrom(from.randomnamearr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserGetRandomNameArrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserGetRandomNameArrRsp::CopyFrom(const TUserGetRandomNameArrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserGetRandomNameArrRsp::IsInitialized() const {

  return true;
}

void TUserGetRandomNameArrRsp::Swap(TUserGetRandomNameArrRsp* other) {
  if (other != this) {
    randomnamearr_.Swap(&other->randomnamearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserGetRandomNameArrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserGetRandomNameArrRsp_descriptor_;
  metadata.reflection = TUserGetRandomNameArrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserGetGuildWarUserSyncInfoRsp::kUserInfoFieldNumber;
const int TUserGetGuildWarUserSyncInfoRsp::kArmyInfoFieldNumber;
#endif  // !_MSC_VER

TUserGetGuildWarUserSyncInfoRsp::TUserGetGuildWarUserSyncInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserGetGuildWarUserSyncInfoRsp)
}

void TUserGetGuildWarUserSyncInfoRsp::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  armyinfo_ = const_cast< ::pb::TArmyInfo*>(&::pb::TArmyInfo::default_instance());
}

TUserGetGuildWarUserSyncInfoRsp::TUserGetGuildWarUserSyncInfoRsp(const TUserGetGuildWarUserSyncInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserGetGuildWarUserSyncInfoRsp)
}

void TUserGetGuildWarUserSyncInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  armyinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserGetGuildWarUserSyncInfoRsp::~TUserGetGuildWarUserSyncInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TUserGetGuildWarUserSyncInfoRsp)
  SharedDtor();
}

void TUserGetGuildWarUserSyncInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
    delete armyinfo_;
  }
}

void TUserGetGuildWarUserSyncInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserGetGuildWarUserSyncInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserGetGuildWarUserSyncInfoRsp_descriptor_;
}

const TUserGetGuildWarUserSyncInfoRsp& TUserGetGuildWarUserSyncInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserGetGuildWarUserSyncInfoRsp* TUserGetGuildWarUserSyncInfoRsp::default_instance_ = NULL;

TUserGetGuildWarUserSyncInfoRsp* TUserGetGuildWarUserSyncInfoRsp::New() const {
  return new TUserGetGuildWarUserSyncInfoRsp;
}

void TUserGetGuildWarUserSyncInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_armyinfo()) {
      if (armyinfo_ != NULL) armyinfo_->::pb::TArmyInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserGetGuildWarUserSyncInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserGetGuildWarUserSyncInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArmyInfo;
        break;
      }

      // optional .pb.TArmyInfo ArmyInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArmyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserGetGuildWarUserSyncInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserGetGuildWarUserSyncInfoRsp)
  return false;
#undef DO_
}

void TUserGetGuildWarUserSyncInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserGetGuildWarUserSyncInfoRsp)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional .pb.TArmyInfo ArmyInfo = 2;
  if (has_armyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->armyinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserGetGuildWarUserSyncInfoRsp)
}

::google::protobuf::uint8* TUserGetGuildWarUserSyncInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserGetGuildWarUserSyncInfoRsp)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional .pb.TArmyInfo ArmyInfo = 2;
  if (has_armyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->armyinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserGetGuildWarUserSyncInfoRsp)
  return target;
}

int TUserGetGuildWarUserSyncInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional .pb.TArmyInfo ArmyInfo = 2;
    if (has_armyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->armyinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserGetGuildWarUserSyncInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserGetGuildWarUserSyncInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserGetGuildWarUserSyncInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserGetGuildWarUserSyncInfoRsp::MergeFrom(const TUserGetGuildWarUserSyncInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_armyinfo()) {
      mutable_armyinfo()->::pb::TArmyInfo::MergeFrom(from.armyinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserGetGuildWarUserSyncInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserGetGuildWarUserSyncInfoRsp::CopyFrom(const TUserGetGuildWarUserSyncInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserGetGuildWarUserSyncInfoRsp::IsInitialized() const {

  if (has_armyinfo()) {
    if (!this->armyinfo().IsInitialized()) return false;
  }
  return true;
}

void TUserGetGuildWarUserSyncInfoRsp::Swap(TUserGetGuildWarUserSyncInfoRsp* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(armyinfo_, other->armyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserGetGuildWarUserSyncInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserGetGuildWarUserSyncInfoRsp_descriptor_;
  metadata.reflection = TUserGetGuildWarUserSyncInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserExchangeGenderReq::kGenderFieldNumber;
#endif  // !_MSC_VER

TUserExchangeGenderReq::TUserExchangeGenderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserExchangeGenderReq)
}

void TUserExchangeGenderReq::InitAsDefaultInstance() {
}

TUserExchangeGenderReq::TUserExchangeGenderReq(const TUserExchangeGenderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserExchangeGenderReq)
}

void TUserExchangeGenderReq::SharedCtor() {
  _cached_size_ = 0;
  gender_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserExchangeGenderReq::~TUserExchangeGenderReq() {
  // @@protoc_insertion_point(destructor:pb.TUserExchangeGenderReq)
  SharedDtor();
}

void TUserExchangeGenderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserExchangeGenderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserExchangeGenderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserExchangeGenderReq_descriptor_;
}

const TUserExchangeGenderReq& TUserExchangeGenderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserExchangeGenderReq* TUserExchangeGenderReq::default_instance_ = NULL;

TUserExchangeGenderReq* TUserExchangeGenderReq::New() const {
  return new TUserExchangeGenderReq;
}

void TUserExchangeGenderReq::Clear() {
  gender_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserExchangeGenderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserExchangeGenderReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Gender = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserExchangeGenderReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserExchangeGenderReq)
  return false;
#undef DO_
}

void TUserExchangeGenderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserExchangeGenderReq)
  // optional uint32 Gender = 1;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserExchangeGenderReq)
}

::google::protobuf::uint8* TUserExchangeGenderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserExchangeGenderReq)
  // optional uint32 Gender = 1;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserExchangeGenderReq)
  return target;
}

int TUserExchangeGenderReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Gender = 1;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserExchangeGenderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserExchangeGenderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserExchangeGenderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserExchangeGenderReq::MergeFrom(const TUserExchangeGenderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gender()) {
      set_gender(from.gender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserExchangeGenderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserExchangeGenderReq::CopyFrom(const TUserExchangeGenderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserExchangeGenderReq::IsInitialized() const {

  return true;
}

void TUserExchangeGenderReq::Swap(TUserExchangeGenderReq* other) {
  if (other != this) {
    std::swap(gender_, other->gender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserExchangeGenderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserExchangeGenderReq_descriptor_;
  metadata.reflection = TUserExchangeGenderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserUgcMessageBeLiked::kLikedUidFieldNumber;
#endif  // !_MSC_VER

TUserUgcMessageBeLiked::TUserUgcMessageBeLiked()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserUgcMessageBeLiked)
}

void TUserUgcMessageBeLiked::InitAsDefaultInstance() {
}

TUserUgcMessageBeLiked::TUserUgcMessageBeLiked(const TUserUgcMessageBeLiked& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserUgcMessageBeLiked)
}

void TUserUgcMessageBeLiked::SharedCtor() {
  _cached_size_ = 0;
  likeduid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserUgcMessageBeLiked::~TUserUgcMessageBeLiked() {
  // @@protoc_insertion_point(destructor:pb.TUserUgcMessageBeLiked)
  SharedDtor();
}

void TUserUgcMessageBeLiked::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserUgcMessageBeLiked::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserUgcMessageBeLiked::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserUgcMessageBeLiked_descriptor_;
}

const TUserUgcMessageBeLiked& TUserUgcMessageBeLiked::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserUgcMessageBeLiked* TUserUgcMessageBeLiked::default_instance_ = NULL;

TUserUgcMessageBeLiked* TUserUgcMessageBeLiked::New() const {
  return new TUserUgcMessageBeLiked;
}

void TUserUgcMessageBeLiked::Clear() {
  likeduid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserUgcMessageBeLiked::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserUgcMessageBeLiked)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 LikedUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &likeduid_)));
          set_has_likeduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserUgcMessageBeLiked)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserUgcMessageBeLiked)
  return false;
#undef DO_
}

void TUserUgcMessageBeLiked::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserUgcMessageBeLiked)
  // optional uint64 LikedUid = 1;
  if (has_likeduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->likeduid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserUgcMessageBeLiked)
}

::google::protobuf::uint8* TUserUgcMessageBeLiked::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserUgcMessageBeLiked)
  // optional uint64 LikedUid = 1;
  if (has_likeduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->likeduid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserUgcMessageBeLiked)
  return target;
}

int TUserUgcMessageBeLiked::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 LikedUid = 1;
    if (has_likeduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->likeduid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserUgcMessageBeLiked::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserUgcMessageBeLiked* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserUgcMessageBeLiked*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserUgcMessageBeLiked::MergeFrom(const TUserUgcMessageBeLiked& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_likeduid()) {
      set_likeduid(from.likeduid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserUgcMessageBeLiked::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserUgcMessageBeLiked::CopyFrom(const TUserUgcMessageBeLiked& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserUgcMessageBeLiked::IsInitialized() const {

  return true;
}

void TUserUgcMessageBeLiked::Swap(TUserUgcMessageBeLiked* other) {
  if (other != this) {
    std::swap(likeduid_, other->likeduid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserUgcMessageBeLiked::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserUgcMessageBeLiked_descriptor_;
  metadata.reflection = TUserUgcMessageBeLiked_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TUserFightForceChangeReq::TUserFightForceChangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserFightForceChangeReq)
}

void TUserFightForceChangeReq::InitAsDefaultInstance() {
}

TUserFightForceChangeReq::TUserFightForceChangeReq(const TUserFightForceChangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserFightForceChangeReq)
}

void TUserFightForceChangeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserFightForceChangeReq::~TUserFightForceChangeReq() {
  // @@protoc_insertion_point(destructor:pb.TUserFightForceChangeReq)
  SharedDtor();
}

void TUserFightForceChangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserFightForceChangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserFightForceChangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserFightForceChangeReq_descriptor_;
}

const TUserFightForceChangeReq& TUserFightForceChangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserFightForceChangeReq* TUserFightForceChangeReq::default_instance_ = NULL;

TUserFightForceChangeReq* TUserFightForceChangeReq::New() const {
  return new TUserFightForceChangeReq;
}

void TUserFightForceChangeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserFightForceChangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserFightForceChangeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserFightForceChangeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserFightForceChangeReq)
  return false;
#undef DO_
}

void TUserFightForceChangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserFightForceChangeReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserFightForceChangeReq)
}

::google::protobuf::uint8* TUserFightForceChangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserFightForceChangeReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserFightForceChangeReq)
  return target;
}

int TUserFightForceChangeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserFightForceChangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserFightForceChangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserFightForceChangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserFightForceChangeReq::MergeFrom(const TUserFightForceChangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserFightForceChangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserFightForceChangeReq::CopyFrom(const TUserFightForceChangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserFightForceChangeReq::IsInitialized() const {

  return true;
}

void TUserFightForceChangeReq::Swap(TUserFightForceChangeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserFightForceChangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserFightForceChangeReq_descriptor_;
  metadata.reflection = TUserFightForceChangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserUgcGetArrUserDataRpgReq::kUidArrayFieldNumber;
#endif  // !_MSC_VER

TUserUgcGetArrUserDataRpgReq::TUserUgcGetArrUserDataRpgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserUgcGetArrUserDataRpgReq)
}

void TUserUgcGetArrUserDataRpgReq::InitAsDefaultInstance() {
}

TUserUgcGetArrUserDataRpgReq::TUserUgcGetArrUserDataRpgReq(const TUserUgcGetArrUserDataRpgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserUgcGetArrUserDataRpgReq)
}

void TUserUgcGetArrUserDataRpgReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserUgcGetArrUserDataRpgReq::~TUserUgcGetArrUserDataRpgReq() {
  // @@protoc_insertion_point(destructor:pb.TUserUgcGetArrUserDataRpgReq)
  SharedDtor();
}

void TUserUgcGetArrUserDataRpgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserUgcGetArrUserDataRpgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserUgcGetArrUserDataRpgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserUgcGetArrUserDataRpgReq_descriptor_;
}

const TUserUgcGetArrUserDataRpgReq& TUserUgcGetArrUserDataRpgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserUgcGetArrUserDataRpgReq* TUserUgcGetArrUserDataRpgReq::default_instance_ = NULL;

TUserUgcGetArrUserDataRpgReq* TUserUgcGetArrUserDataRpgReq::New() const {
  return new TUserUgcGetArrUserDataRpgReq;
}

void TUserUgcGetArrUserDataRpgReq::Clear() {
  uidarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserUgcGetArrUserDataRpgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserUgcGetArrUserDataRpgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 UidArray = 1;
      case 1: {
        if (tag == 8) {
         parse_UidArray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_uidarray())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uidarray())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_UidArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserUgcGetArrUserDataRpgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserUgcGetArrUserDataRpgReq)
  return false;
#undef DO_
}

void TUserUgcGetArrUserDataRpgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserUgcGetArrUserDataRpgReq)
  // repeated uint64 UidArray = 1;
  for (int i = 0; i < this->uidarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->uidarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserUgcGetArrUserDataRpgReq)
}

::google::protobuf::uint8* TUserUgcGetArrUserDataRpgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserUgcGetArrUserDataRpgReq)
  // repeated uint64 UidArray = 1;
  for (int i = 0; i < this->uidarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->uidarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserUgcGetArrUserDataRpgReq)
  return target;
}

int TUserUgcGetArrUserDataRpgReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 UidArray = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uidarray_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uidarray(i));
    }
    total_size += 1 * this->uidarray_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserUgcGetArrUserDataRpgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserUgcGetArrUserDataRpgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserUgcGetArrUserDataRpgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserUgcGetArrUserDataRpgReq::MergeFrom(const TUserUgcGetArrUserDataRpgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  uidarray_.MergeFrom(from.uidarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserUgcGetArrUserDataRpgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserUgcGetArrUserDataRpgReq::CopyFrom(const TUserUgcGetArrUserDataRpgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserUgcGetArrUserDataRpgReq::IsInitialized() const {

  return true;
}

void TUserUgcGetArrUserDataRpgReq::Swap(TUserUgcGetArrUserDataRpgReq* other) {
  if (other != this) {
    uidarray_.Swap(&other->uidarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserUgcGetArrUserDataRpgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserUgcGetArrUserDataRpgReq_descriptor_;
  metadata.reflection = TUserUgcGetArrUserDataRpgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserUgcSimpleInfo::kUserInfoFieldNumber;
const int TUserUgcSimpleInfo::kMaxPassedChapterFieldNumber;
#endif  // !_MSC_VER

TUserUgcSimpleInfo::TUserUgcSimpleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserUgcSimpleInfo)
}

void TUserUgcSimpleInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TUserUgcSimpleInfo::TUserUgcSimpleInfo(const TUserUgcSimpleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserUgcSimpleInfo)
}

void TUserUgcSimpleInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  maxpassedchapter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserUgcSimpleInfo::~TUserUgcSimpleInfo() {
  // @@protoc_insertion_point(destructor:pb.TUserUgcSimpleInfo)
  SharedDtor();
}

void TUserUgcSimpleInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TUserUgcSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserUgcSimpleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserUgcSimpleInfo_descriptor_;
}

const TUserUgcSimpleInfo& TUserUgcSimpleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserUgcSimpleInfo* TUserUgcSimpleInfo::default_instance_ = NULL;

TUserUgcSimpleInfo* TUserUgcSimpleInfo::New() const {
  return new TUserUgcSimpleInfo;
}

void TUserUgcSimpleInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    maxpassedchapter_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserUgcSimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserUgcSimpleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MaxPassedChapter;
        break;
      }

      // optional uint32 MaxPassedChapter = 2;
      case 2: {
        if (tag == 16) {
         parse_MaxPassedChapter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpassedchapter_)));
          set_has_maxpassedchapter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserUgcSimpleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserUgcSimpleInfo)
  return false;
#undef DO_
}

void TUserUgcSimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserUgcSimpleInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 MaxPassedChapter = 2;
  if (has_maxpassedchapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxpassedchapter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserUgcSimpleInfo)
}

::google::protobuf::uint8* TUserUgcSimpleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserUgcSimpleInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 MaxPassedChapter = 2;
  if (has_maxpassedchapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxpassedchapter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserUgcSimpleInfo)
  return target;
}

int TUserUgcSimpleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 MaxPassedChapter = 2;
    if (has_maxpassedchapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpassedchapter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserUgcSimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserUgcSimpleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserUgcSimpleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserUgcSimpleInfo::MergeFrom(const TUserUgcSimpleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_maxpassedchapter()) {
      set_maxpassedchapter(from.maxpassedchapter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserUgcSimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserUgcSimpleInfo::CopyFrom(const TUserUgcSimpleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserUgcSimpleInfo::IsInitialized() const {

  return true;
}

void TUserUgcSimpleInfo::Swap(TUserUgcSimpleInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(maxpassedchapter_, other->maxpassedchapter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserUgcSimpleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserUgcSimpleInfo_descriptor_;
  metadata.reflection = TUserUgcSimpleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserUgcGetArrUserDataRpgRsp::kUserDataArrayFieldNumber;
#endif  // !_MSC_VER

TUserUgcGetArrUserDataRpgRsp::TUserUgcGetArrUserDataRpgRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserUgcGetArrUserDataRpgRsp)
}

void TUserUgcGetArrUserDataRpgRsp::InitAsDefaultInstance() {
}

TUserUgcGetArrUserDataRpgRsp::TUserUgcGetArrUserDataRpgRsp(const TUserUgcGetArrUserDataRpgRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserUgcGetArrUserDataRpgRsp)
}

void TUserUgcGetArrUserDataRpgRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserUgcGetArrUserDataRpgRsp::~TUserUgcGetArrUserDataRpgRsp() {
  // @@protoc_insertion_point(destructor:pb.TUserUgcGetArrUserDataRpgRsp)
  SharedDtor();
}

void TUserUgcGetArrUserDataRpgRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserUgcGetArrUserDataRpgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserUgcGetArrUserDataRpgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserUgcGetArrUserDataRpgRsp_descriptor_;
}

const TUserUgcGetArrUserDataRpgRsp& TUserUgcGetArrUserDataRpgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserUgcGetArrUserDataRpgRsp* TUserUgcGetArrUserDataRpgRsp::default_instance_ = NULL;

TUserUgcGetArrUserDataRpgRsp* TUserUgcGetArrUserDataRpgRsp::New() const {
  return new TUserUgcGetArrUserDataRpgRsp;
}

void TUserUgcGetArrUserDataRpgRsp::Clear() {
  userdataarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserUgcGetArrUserDataRpgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserUgcGetArrUserDataRpgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUserUgcSimpleInfo UserDataArray = 1;
      case 1: {
        if (tag == 10) {
         parse_UserDataArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userdataarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UserDataArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserUgcGetArrUserDataRpgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserUgcGetArrUserDataRpgRsp)
  return false;
#undef DO_
}

void TUserUgcGetArrUserDataRpgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserUgcGetArrUserDataRpgRsp)
  // repeated .pb.TUserUgcSimpleInfo UserDataArray = 1;
  for (int i = 0; i < this->userdataarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdataarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserUgcGetArrUserDataRpgRsp)
}

::google::protobuf::uint8* TUserUgcGetArrUserDataRpgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserUgcGetArrUserDataRpgRsp)
  // repeated .pb.TUserUgcSimpleInfo UserDataArray = 1;
  for (int i = 0; i < this->userdataarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdataarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserUgcGetArrUserDataRpgRsp)
  return target;
}

int TUserUgcGetArrUserDataRpgRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUserUgcSimpleInfo UserDataArray = 1;
  total_size += 1 * this->userdataarray_size();
  for (int i = 0; i < this->userdataarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userdataarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserUgcGetArrUserDataRpgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserUgcGetArrUserDataRpgRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserUgcGetArrUserDataRpgRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserUgcGetArrUserDataRpgRsp::MergeFrom(const TUserUgcGetArrUserDataRpgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userdataarray_.MergeFrom(from.userdataarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserUgcGetArrUserDataRpgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserUgcGetArrUserDataRpgRsp::CopyFrom(const TUserUgcGetArrUserDataRpgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserUgcGetArrUserDataRpgRsp::IsInitialized() const {

  return true;
}

void TUserUgcGetArrUserDataRpgRsp::Swap(TUserUgcGetArrUserDataRpgRsp* other) {
  if (other != this) {
    userdataarray_.Swap(&other->userdataarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserUgcGetArrUserDataRpgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserUgcGetArrUserDataRpgRsp_descriptor_;
  metadata.reflection = TUserUgcGetArrUserDataRpgRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserSetShowVipReq::kIsShowVipFieldNumber;
#endif  // !_MSC_VER

TUserSetShowVipReq::TUserSetShowVipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserSetShowVipReq)
}

void TUserSetShowVipReq::InitAsDefaultInstance() {
}

TUserSetShowVipReq::TUserSetShowVipReq(const TUserSetShowVipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserSetShowVipReq)
}

void TUserSetShowVipReq::SharedCtor() {
  _cached_size_ = 0;
  isshowvip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserSetShowVipReq::~TUserSetShowVipReq() {
  // @@protoc_insertion_point(destructor:pb.TUserSetShowVipReq)
  SharedDtor();
}

void TUserSetShowVipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserSetShowVipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserSetShowVipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserSetShowVipReq_descriptor_;
}

const TUserSetShowVipReq& TUserSetShowVipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserSetShowVipReq* TUserSetShowVipReq::default_instance_ = NULL;

TUserSetShowVipReq* TUserSetShowVipReq::New() const {
  return new TUserSetShowVipReq;
}

void TUserSetShowVipReq::Clear() {
  isshowvip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserSetShowVipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserSetShowVipReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IsShowVip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isshowvip_)));
          set_has_isshowvip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserSetShowVipReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserSetShowVipReq)
  return false;
#undef DO_
}

void TUserSetShowVipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserSetShowVipReq)
  // optional uint32 IsShowVip = 1;
  if (has_isshowvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->isshowvip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserSetShowVipReq)
}

::google::protobuf::uint8* TUserSetShowVipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserSetShowVipReq)
  // optional uint32 IsShowVip = 1;
  if (has_isshowvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->isshowvip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserSetShowVipReq)
  return target;
}

int TUserSetShowVipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IsShowVip = 1;
    if (has_isshowvip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isshowvip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserSetShowVipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserSetShowVipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserSetShowVipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserSetShowVipReq::MergeFrom(const TUserSetShowVipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isshowvip()) {
      set_isshowvip(from.isshowvip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserSetShowVipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserSetShowVipReq::CopyFrom(const TUserSetShowVipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserSetShowVipReq::IsInitialized() const {

  return true;
}

void TUserSetShowVipReq::Swap(TUserSetShowVipReq* other) {
  if (other != this) {
    std::swap(isshowvip_, other->isshowvip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserSetShowVipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserSetShowVipReq_descriptor_;
  metadata.reflection = TUserSetShowVipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserGetSelfRankRsp::kFightForceRankIdxFieldNumber;
const int TUserGetSelfRankRsp::kLevelRankIdxFieldNumber;
#endif  // !_MSC_VER

TUserGetSelfRankRsp::TUserGetSelfRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserGetSelfRankRsp)
}

void TUserGetSelfRankRsp::InitAsDefaultInstance() {
}

TUserGetSelfRankRsp::TUserGetSelfRankRsp(const TUserGetSelfRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserGetSelfRankRsp)
}

void TUserGetSelfRankRsp::SharedCtor() {
  _cached_size_ = 0;
  fightforcerankidx_ = 0;
  levelrankidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserGetSelfRankRsp::~TUserGetSelfRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TUserGetSelfRankRsp)
  SharedDtor();
}

void TUserGetSelfRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserGetSelfRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserGetSelfRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserGetSelfRankRsp_descriptor_;
}

const TUserGetSelfRankRsp& TUserGetSelfRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserGetSelfRankRsp* TUserGetSelfRankRsp::default_instance_ = NULL;

TUserGetSelfRankRsp* TUserGetSelfRankRsp::New() const {
  return new TUserGetSelfRankRsp;
}

void TUserGetSelfRankRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserGetSelfRankRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fightforcerankidx_, levelrankidx_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserGetSelfRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserGetSelfRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 FightForceRankIdx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightforcerankidx_)));
          set_has_fightforcerankidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LevelRankIdx;
        break;
      }

      // optional int32 LevelRankIdx = 2;
      case 2: {
        if (tag == 16) {
         parse_LevelRankIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelrankidx_)));
          set_has_levelrankidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserGetSelfRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserGetSelfRankRsp)
  return false;
#undef DO_
}

void TUserGetSelfRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserGetSelfRankRsp)
  // optional int32 FightForceRankIdx = 1;
  if (has_fightforcerankidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fightforcerankidx(), output);
  }

  // optional int32 LevelRankIdx = 2;
  if (has_levelrankidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->levelrankidx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserGetSelfRankRsp)
}

::google::protobuf::uint8* TUserGetSelfRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserGetSelfRankRsp)
  // optional int32 FightForceRankIdx = 1;
  if (has_fightforcerankidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fightforcerankidx(), target);
  }

  // optional int32 LevelRankIdx = 2;
  if (has_levelrankidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->levelrankidx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserGetSelfRankRsp)
  return target;
}

int TUserGetSelfRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 FightForceRankIdx = 1;
    if (has_fightforcerankidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightforcerankidx());
    }

    // optional int32 LevelRankIdx = 2;
    if (has_levelrankidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelrankidx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserGetSelfRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserGetSelfRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserGetSelfRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserGetSelfRankRsp::MergeFrom(const TUserGetSelfRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fightforcerankidx()) {
      set_fightforcerankidx(from.fightforcerankidx());
    }
    if (from.has_levelrankidx()) {
      set_levelrankidx(from.levelrankidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserGetSelfRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserGetSelfRankRsp::CopyFrom(const TUserGetSelfRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserGetSelfRankRsp::IsInitialized() const {

  return true;
}

void TUserGetSelfRankRsp::Swap(TUserGetSelfRankRsp* other) {
  if (other != this) {
    std::swap(fightforcerankidx_, other->fightforcerankidx_);
    std::swap(levelrankidx_, other->levelrankidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserGetSelfRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserGetSelfRankRsp_descriptor_;
  metadata.reflection = TUserGetSelfRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserPlayerImageFrameArrRsp::kFrameArrFieldNumber;
const int TUserPlayerImageFrameArrRsp::kEndTimeArrFieldNumber;
#endif  // !_MSC_VER

TUserPlayerImageFrameArrRsp::TUserPlayerImageFrameArrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserPlayerImageFrameArrRsp)
}

void TUserPlayerImageFrameArrRsp::InitAsDefaultInstance() {
}

TUserPlayerImageFrameArrRsp::TUserPlayerImageFrameArrRsp(const TUserPlayerImageFrameArrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserPlayerImageFrameArrRsp)
}

void TUserPlayerImageFrameArrRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserPlayerImageFrameArrRsp::~TUserPlayerImageFrameArrRsp() {
  // @@protoc_insertion_point(destructor:pb.TUserPlayerImageFrameArrRsp)
  SharedDtor();
}

void TUserPlayerImageFrameArrRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserPlayerImageFrameArrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserPlayerImageFrameArrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserPlayerImageFrameArrRsp_descriptor_;
}

const TUserPlayerImageFrameArrRsp& TUserPlayerImageFrameArrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserPlayerImageFrameArrRsp* TUserPlayerImageFrameArrRsp::default_instance_ = NULL;

TUserPlayerImageFrameArrRsp* TUserPlayerImageFrameArrRsp::New() const {
  return new TUserPlayerImageFrameArrRsp;
}

void TUserPlayerImageFrameArrRsp::Clear() {
  framearr_.Clear();
  endtimearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserPlayerImageFrameArrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserPlayerImageFrameArrRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 FrameArr = 1;
      case 1: {
        if (tag == 8) {
         parse_FrameArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_framearr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_framearr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_FrameArr;
        if (input->ExpectTag(16)) goto parse_EndTimeArr;
        break;
      }

      // repeated uint64 EndTimeArr = 2;
      case 2: {
        if (tag == 16) {
         parse_EndTimeArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_endtimearr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_endtimearr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EndTimeArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserPlayerImageFrameArrRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserPlayerImageFrameArrRsp)
  return false;
#undef DO_
}

void TUserPlayerImageFrameArrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserPlayerImageFrameArrRsp)
  // repeated int32 FrameArr = 1;
  for (int i = 0; i < this->framearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->framearr(i), output);
  }

  // repeated uint64 EndTimeArr = 2;
  for (int i = 0; i < this->endtimearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->endtimearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserPlayerImageFrameArrRsp)
}

::google::protobuf::uint8* TUserPlayerImageFrameArrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserPlayerImageFrameArrRsp)
  // repeated int32 FrameArr = 1;
  for (int i = 0; i < this->framearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->framearr(i), target);
  }

  // repeated uint64 EndTimeArr = 2;
  for (int i = 0; i < this->endtimearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->endtimearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserPlayerImageFrameArrRsp)
  return target;
}

int TUserPlayerImageFrameArrRsp::ByteSize() const {
  int total_size = 0;

  // repeated int32 FrameArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->framearr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->framearr(i));
    }
    total_size += 1 * this->framearr_size() + data_size;
  }

  // repeated uint64 EndTimeArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->endtimearr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->endtimearr(i));
    }
    total_size += 1 * this->endtimearr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserPlayerImageFrameArrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserPlayerImageFrameArrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserPlayerImageFrameArrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserPlayerImageFrameArrRsp::MergeFrom(const TUserPlayerImageFrameArrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  framearr_.MergeFrom(from.framearr_);
  endtimearr_.MergeFrom(from.endtimearr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserPlayerImageFrameArrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserPlayerImageFrameArrRsp::CopyFrom(const TUserPlayerImageFrameArrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserPlayerImageFrameArrRsp::IsInitialized() const {

  return true;
}

void TUserPlayerImageFrameArrRsp::Swap(TUserPlayerImageFrameArrRsp* other) {
  if (other != this) {
    framearr_.Swap(&other->framearr_);
    endtimearr_.Swap(&other->endtimearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserPlayerImageFrameArrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserPlayerImageFrameArrRsp_descriptor_;
  metadata.reflection = TUserPlayerImageFrameArrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserPlayerImageFrameArrPush::kFrameTidFieldNumber;
#endif  // !_MSC_VER

TUserPlayerImageFrameArrPush::TUserPlayerImageFrameArrPush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserPlayerImageFrameArrPush)
}

void TUserPlayerImageFrameArrPush::InitAsDefaultInstance() {
}

TUserPlayerImageFrameArrPush::TUserPlayerImageFrameArrPush(const TUserPlayerImageFrameArrPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserPlayerImageFrameArrPush)
}

void TUserPlayerImageFrameArrPush::SharedCtor() {
  _cached_size_ = 0;
  frametid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserPlayerImageFrameArrPush::~TUserPlayerImageFrameArrPush() {
  // @@protoc_insertion_point(destructor:pb.TUserPlayerImageFrameArrPush)
  SharedDtor();
}

void TUserPlayerImageFrameArrPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserPlayerImageFrameArrPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserPlayerImageFrameArrPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserPlayerImageFrameArrPush_descriptor_;
}

const TUserPlayerImageFrameArrPush& TUserPlayerImageFrameArrPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserPlayerImageFrameArrPush* TUserPlayerImageFrameArrPush::default_instance_ = NULL;

TUserPlayerImageFrameArrPush* TUserPlayerImageFrameArrPush::New() const {
  return new TUserPlayerImageFrameArrPush;
}

void TUserPlayerImageFrameArrPush::Clear() {
  frametid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserPlayerImageFrameArrPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserPlayerImageFrameArrPush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 FrameTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frametid_)));
          set_has_frametid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserPlayerImageFrameArrPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserPlayerImageFrameArrPush)
  return false;
#undef DO_
}

void TUserPlayerImageFrameArrPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserPlayerImageFrameArrPush)
  // optional int32 FrameTid = 1;
  if (has_frametid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frametid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserPlayerImageFrameArrPush)
}

::google::protobuf::uint8* TUserPlayerImageFrameArrPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserPlayerImageFrameArrPush)
  // optional int32 FrameTid = 1;
  if (has_frametid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frametid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserPlayerImageFrameArrPush)
  return target;
}

int TUserPlayerImageFrameArrPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 FrameTid = 1;
    if (has_frametid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frametid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserPlayerImageFrameArrPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserPlayerImageFrameArrPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserPlayerImageFrameArrPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserPlayerImageFrameArrPush::MergeFrom(const TUserPlayerImageFrameArrPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frametid()) {
      set_frametid(from.frametid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserPlayerImageFrameArrPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserPlayerImageFrameArrPush::CopyFrom(const TUserPlayerImageFrameArrPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserPlayerImageFrameArrPush::IsInitialized() const {

  return true;
}

void TUserPlayerImageFrameArrPush::Swap(TUserPlayerImageFrameArrPush* other) {
  if (other != this) {
    std::swap(frametid_, other->frametid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserPlayerImageFrameArrPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserPlayerImageFrameArrPush_descriptor_;
  metadata.reflection = TUserPlayerImageFrameArrPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserSetCanStrangerChatReq::kIsAllowFieldNumber;
#endif  // !_MSC_VER

TUserSetCanStrangerChatReq::TUserSetCanStrangerChatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserSetCanStrangerChatReq)
}

void TUserSetCanStrangerChatReq::InitAsDefaultInstance() {
}

TUserSetCanStrangerChatReq::TUserSetCanStrangerChatReq(const TUserSetCanStrangerChatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserSetCanStrangerChatReq)
}

void TUserSetCanStrangerChatReq::SharedCtor() {
  _cached_size_ = 0;
  isallow_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserSetCanStrangerChatReq::~TUserSetCanStrangerChatReq() {
  // @@protoc_insertion_point(destructor:pb.TUserSetCanStrangerChatReq)
  SharedDtor();
}

void TUserSetCanStrangerChatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserSetCanStrangerChatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserSetCanStrangerChatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserSetCanStrangerChatReq_descriptor_;
}

const TUserSetCanStrangerChatReq& TUserSetCanStrangerChatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserSetCanStrangerChatReq* TUserSetCanStrangerChatReq::default_instance_ = NULL;

TUserSetCanStrangerChatReq* TUserSetCanStrangerChatReq::New() const {
  return new TUserSetCanStrangerChatReq;
}

void TUserSetCanStrangerChatReq::Clear() {
  isallow_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserSetCanStrangerChatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserSetCanStrangerChatReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IsAllow = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isallow_)));
          set_has_isallow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserSetCanStrangerChatReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserSetCanStrangerChatReq)
  return false;
#undef DO_
}

void TUserSetCanStrangerChatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserSetCanStrangerChatReq)
  // optional uint32 IsAllow = 1;
  if (has_isallow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->isallow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserSetCanStrangerChatReq)
}

::google::protobuf::uint8* TUserSetCanStrangerChatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserSetCanStrangerChatReq)
  // optional uint32 IsAllow = 1;
  if (has_isallow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->isallow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserSetCanStrangerChatReq)
  return target;
}

int TUserSetCanStrangerChatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IsAllow = 1;
    if (has_isallow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isallow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserSetCanStrangerChatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserSetCanStrangerChatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserSetCanStrangerChatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserSetCanStrangerChatReq::MergeFrom(const TUserSetCanStrangerChatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isallow()) {
      set_isallow(from.isallow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserSetCanStrangerChatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserSetCanStrangerChatReq::CopyFrom(const TUserSetCanStrangerChatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserSetCanStrangerChatReq::IsInitialized() const {

  return true;
}

void TUserSetCanStrangerChatReq::Swap(TUserSetCanStrangerChatReq* other) {
  if (other != this) {
    std::swap(isallow_, other->isallow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserSetCanStrangerChatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserSetCanStrangerChatReq_descriptor_;
  metadata.reflection = TUserSetCanStrangerChatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserSetRefuseLowAdventureReq::kIsRefuseFieldNumber;
#endif  // !_MSC_VER

TUserSetRefuseLowAdventureReq::TUserSetRefuseLowAdventureReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserSetRefuseLowAdventureReq)
}

void TUserSetRefuseLowAdventureReq::InitAsDefaultInstance() {
}

TUserSetRefuseLowAdventureReq::TUserSetRefuseLowAdventureReq(const TUserSetRefuseLowAdventureReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserSetRefuseLowAdventureReq)
}

void TUserSetRefuseLowAdventureReq::SharedCtor() {
  _cached_size_ = 0;
  isrefuse_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserSetRefuseLowAdventureReq::~TUserSetRefuseLowAdventureReq() {
  // @@protoc_insertion_point(destructor:pb.TUserSetRefuseLowAdventureReq)
  SharedDtor();
}

void TUserSetRefuseLowAdventureReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserSetRefuseLowAdventureReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserSetRefuseLowAdventureReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserSetRefuseLowAdventureReq_descriptor_;
}

const TUserSetRefuseLowAdventureReq& TUserSetRefuseLowAdventureReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserSetRefuseLowAdventureReq* TUserSetRefuseLowAdventureReq::default_instance_ = NULL;

TUserSetRefuseLowAdventureReq* TUserSetRefuseLowAdventureReq::New() const {
  return new TUserSetRefuseLowAdventureReq;
}

void TUserSetRefuseLowAdventureReq::Clear() {
  isrefuse_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserSetRefuseLowAdventureReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserSetRefuseLowAdventureReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IsRefuse = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isrefuse_)));
          set_has_isrefuse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserSetRefuseLowAdventureReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserSetRefuseLowAdventureReq)
  return false;
#undef DO_
}

void TUserSetRefuseLowAdventureReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserSetRefuseLowAdventureReq)
  // optional uint32 IsRefuse = 1;
  if (has_isrefuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->isrefuse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserSetRefuseLowAdventureReq)
}

::google::protobuf::uint8* TUserSetRefuseLowAdventureReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserSetRefuseLowAdventureReq)
  // optional uint32 IsRefuse = 1;
  if (has_isrefuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->isrefuse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserSetRefuseLowAdventureReq)
  return target;
}

int TUserSetRefuseLowAdventureReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IsRefuse = 1;
    if (has_isrefuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isrefuse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserSetRefuseLowAdventureReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserSetRefuseLowAdventureReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserSetRefuseLowAdventureReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserSetRefuseLowAdventureReq::MergeFrom(const TUserSetRefuseLowAdventureReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isrefuse()) {
      set_isrefuse(from.isrefuse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserSetRefuseLowAdventureReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserSetRefuseLowAdventureReq::CopyFrom(const TUserSetRefuseLowAdventureReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserSetRefuseLowAdventureReq::IsInitialized() const {

  return true;
}

void TUserSetRefuseLowAdventureReq::Swap(TUserSetRefuseLowAdventureReq* other) {
  if (other != this) {
    std::swap(isrefuse_, other->isrefuse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserSetRefuseLowAdventureReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserSetRefuseLowAdventureReq_descriptor_;
  metadata.reflection = TUserSetRefuseLowAdventureReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserGetAndRefreshFightForceReq::kUidFieldNumber;
#endif  // !_MSC_VER

TUserGetAndRefreshFightForceReq::TUserGetAndRefreshFightForceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserGetAndRefreshFightForceReq)
}

void TUserGetAndRefreshFightForceReq::InitAsDefaultInstance() {
}

TUserGetAndRefreshFightForceReq::TUserGetAndRefreshFightForceReq(const TUserGetAndRefreshFightForceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserGetAndRefreshFightForceReq)
}

void TUserGetAndRefreshFightForceReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserGetAndRefreshFightForceReq::~TUserGetAndRefreshFightForceReq() {
  // @@protoc_insertion_point(destructor:pb.TUserGetAndRefreshFightForceReq)
  SharedDtor();
}

void TUserGetAndRefreshFightForceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserGetAndRefreshFightForceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserGetAndRefreshFightForceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserGetAndRefreshFightForceReq_descriptor_;
}

const TUserGetAndRefreshFightForceReq& TUserGetAndRefreshFightForceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserGetAndRefreshFightForceReq* TUserGetAndRefreshFightForceReq::default_instance_ = NULL;

TUserGetAndRefreshFightForceReq* TUserGetAndRefreshFightForceReq::New() const {
  return new TUserGetAndRefreshFightForceReq;
}

void TUserGetAndRefreshFightForceReq::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserGetAndRefreshFightForceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserGetAndRefreshFightForceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserGetAndRefreshFightForceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserGetAndRefreshFightForceReq)
  return false;
#undef DO_
}

void TUserGetAndRefreshFightForceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserGetAndRefreshFightForceReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserGetAndRefreshFightForceReq)
}

::google::protobuf::uint8* TUserGetAndRefreshFightForceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserGetAndRefreshFightForceReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserGetAndRefreshFightForceReq)
  return target;
}

int TUserGetAndRefreshFightForceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserGetAndRefreshFightForceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserGetAndRefreshFightForceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserGetAndRefreshFightForceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserGetAndRefreshFightForceReq::MergeFrom(const TUserGetAndRefreshFightForceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserGetAndRefreshFightForceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserGetAndRefreshFightForceReq::CopyFrom(const TUserGetAndRefreshFightForceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserGetAndRefreshFightForceReq::IsInitialized() const {

  return true;
}

void TUserGetAndRefreshFightForceReq::Swap(TUserGetAndRefreshFightForceReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserGetAndRefreshFightForceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserGetAndRefreshFightForceReq_descriptor_;
  metadata.reflection = TUserGetAndRefreshFightForceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserGetAndRefreshFightForceRsp::kFightForceFieldNumber;
#endif  // !_MSC_VER

TUserGetAndRefreshFightForceRsp::TUserGetAndRefreshFightForceRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserGetAndRefreshFightForceRsp)
}

void TUserGetAndRefreshFightForceRsp::InitAsDefaultInstance() {
}

TUserGetAndRefreshFightForceRsp::TUserGetAndRefreshFightForceRsp(const TUserGetAndRefreshFightForceRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserGetAndRefreshFightForceRsp)
}

void TUserGetAndRefreshFightForceRsp::SharedCtor() {
  _cached_size_ = 0;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserGetAndRefreshFightForceRsp::~TUserGetAndRefreshFightForceRsp() {
  // @@protoc_insertion_point(destructor:pb.TUserGetAndRefreshFightForceRsp)
  SharedDtor();
}

void TUserGetAndRefreshFightForceRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserGetAndRefreshFightForceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserGetAndRefreshFightForceRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserGetAndRefreshFightForceRsp_descriptor_;
}

const TUserGetAndRefreshFightForceRsp& TUserGetAndRefreshFightForceRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserGetAndRefreshFightForceRsp* TUserGetAndRefreshFightForceRsp::default_instance_ = NULL;

TUserGetAndRefreshFightForceRsp* TUserGetAndRefreshFightForceRsp::New() const {
  return new TUserGetAndRefreshFightForceRsp;
}

void TUserGetAndRefreshFightForceRsp::Clear() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserGetAndRefreshFightForceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserGetAndRefreshFightForceRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 FightForce = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserGetAndRefreshFightForceRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserGetAndRefreshFightForceRsp)
  return false;
#undef DO_
}

void TUserGetAndRefreshFightForceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserGetAndRefreshFightForceRsp)
  // optional uint64 FightForce = 1;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserGetAndRefreshFightForceRsp)
}

::google::protobuf::uint8* TUserGetAndRefreshFightForceRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserGetAndRefreshFightForceRsp)
  // optional uint64 FightForce = 1;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserGetAndRefreshFightForceRsp)
  return target;
}

int TUserGetAndRefreshFightForceRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 FightForce = 1;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserGetAndRefreshFightForceRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserGetAndRefreshFightForceRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserGetAndRefreshFightForceRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserGetAndRefreshFightForceRsp::MergeFrom(const TUserGetAndRefreshFightForceRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserGetAndRefreshFightForceRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserGetAndRefreshFightForceRsp::CopyFrom(const TUserGetAndRefreshFightForceRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserGetAndRefreshFightForceRsp::IsInitialized() const {

  return true;
}

void TUserGetAndRefreshFightForceRsp::Swap(TUserGetAndRefreshFightForceRsp* other) {
  if (other != this) {
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserGetAndRefreshFightForceRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserGetAndRefreshFightForceRsp_descriptor_;
  metadata.reflection = TUserGetAndRefreshFightForceRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserSendChannelEmailRsp::kEmailNumFieldNumber;
#endif  // !_MSC_VER

TUserSendChannelEmailRsp::TUserSendChannelEmailRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserSendChannelEmailRsp)
}

void TUserSendChannelEmailRsp::InitAsDefaultInstance() {
}

TUserSendChannelEmailRsp::TUserSendChannelEmailRsp(const TUserSendChannelEmailRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserSendChannelEmailRsp)
}

void TUserSendChannelEmailRsp::SharedCtor() {
  _cached_size_ = 0;
  emailnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserSendChannelEmailRsp::~TUserSendChannelEmailRsp() {
  // @@protoc_insertion_point(destructor:pb.TUserSendChannelEmailRsp)
  SharedDtor();
}

void TUserSendChannelEmailRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserSendChannelEmailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserSendChannelEmailRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserSendChannelEmailRsp_descriptor_;
}

const TUserSendChannelEmailRsp& TUserSendChannelEmailRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUser_2eproto();
  return *default_instance_;
}

TUserSendChannelEmailRsp* TUserSendChannelEmailRsp::default_instance_ = NULL;

TUserSendChannelEmailRsp* TUserSendChannelEmailRsp::New() const {
  return new TUserSendChannelEmailRsp;
}

void TUserSendChannelEmailRsp::Clear() {
  emailnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserSendChannelEmailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserSendChannelEmailRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 EmailNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &emailnum_)));
          set_has_emailnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserSendChannelEmailRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserSendChannelEmailRsp)
  return false;
#undef DO_
}

void TUserSendChannelEmailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserSendChannelEmailRsp)
  // optional uint32 EmailNum = 1;
  if (has_emailnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->emailnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserSendChannelEmailRsp)
}

::google::protobuf::uint8* TUserSendChannelEmailRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserSendChannelEmailRsp)
  // optional uint32 EmailNum = 1;
  if (has_emailnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->emailnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserSendChannelEmailRsp)
  return target;
}

int TUserSendChannelEmailRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EmailNum = 1;
    if (has_emailnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->emailnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserSendChannelEmailRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserSendChannelEmailRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserSendChannelEmailRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserSendChannelEmailRsp::MergeFrom(const TUserSendChannelEmailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_emailnum()) {
      set_emailnum(from.emailnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserSendChannelEmailRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserSendChannelEmailRsp::CopyFrom(const TUserSendChannelEmailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserSendChannelEmailRsp::IsInitialized() const {

  return true;
}

void TUserSendChannelEmailRsp::Swap(TUserSendChannelEmailRsp* other) {
  if (other != this) {
    std::swap(emailnum_, other->emailnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserSendChannelEmailRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserSendChannelEmailRsp_descriptor_;
  metadata.reflection = TUserSendChannelEmailRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
