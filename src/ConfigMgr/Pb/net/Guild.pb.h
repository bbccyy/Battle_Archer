// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Guild.proto

#ifndef PROTOBUF_net_2fGuild_2eproto__INCLUDED
#define PROTOBUF_net_2fGuild_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/User.pb.h"
#include "net/GuildUser.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fGuild_2eproto();
void protobuf_AssignDesc_net_2fGuild_2eproto();
void protobuf_ShutdownFile_net_2fGuild_2eproto();

class TGuildLimit;
class TGuildDonate;
class TGuildTip;
class TGuildApplyInfo;
class TGuildImpeachInfo;
class TGuildTreasMapFix;
class TGuildMemberInfo;
class TBaseGuildInfo;
class TGuildSalaryInfo;
class TGuildGetInfoRsp;
class TGuildUpdateOurGuildNotify;
class TGuildGetOtherInfoReq;
class TGuildGetOtherInfoRsp;
class TGuildGetListReq;
class TGuildGetListRsp;
class TGuildGetCanApplyListReq;
class TGuildGetCanApplyListRsp;
class TGuildCreateReq;
class TGuildSearchReq;
class TGuildSearchRsp;
class TGuildGetApplyListRsp;
class TGuildApplyReq;
class TGuildCancelApplyReq;
class TGuildVerifyReq;
class TGuildVerifyAllReq;
class TGuildGetMemberListRsp;
class TGuildModifyReq;
class TGuildDismissRsp;
class TGuildAppointRpgReq;
class TGuildDemiseReq;
class TGuildRemoveReq;
class TGuildDonateReq;
class TGuildLevelRankInfo;
class TGuildGetLevelRankReq;
class TGuildGetLevelRankRsp;
class TGuildFightForceRankInfo;
class TGuildGetFightForceRankReq;
class TGuildGetFightForceRankRsp;
class TGuildTreasMapFixReq;
class TGuildTreasMapFixRsp;
class TGuildTreasMapFixRewardRsp;
class TSlgGuildSyncMember;
class TGuildGetSyncInfoReq;
class TGuildGetSyncInfoRsp;
class TGuildChangeGnameReq;

enum EReviewMode {
  REVIEW_DEFAULT = 0,
  REVIEW_MAN = 1,
  REVIEW_AUTO = 2
};
bool EReviewMode_IsValid(int value);
const EReviewMode EReviewMode_MIN = REVIEW_DEFAULT;
const EReviewMode EReviewMode_MAX = REVIEW_AUTO;
const int EReviewMode_ARRAYSIZE = EReviewMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* EReviewMode_descriptor();
inline const ::std::string& EReviewMode_Name(EReviewMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EReviewMode_descriptor(), value);
}
inline bool EReviewMode_Parse(
    const ::std::string& name, EReviewMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EReviewMode>(
    EReviewMode_descriptor(), name, value);
}
enum EVerifyRet {
  VERIFY_ACCEPT = 1,
  VERIFY_REJECT = 2
};
bool EVerifyRet_IsValid(int value);
const EVerifyRet EVerifyRet_MIN = VERIFY_ACCEPT;
const EVerifyRet EVerifyRet_MAX = VERIFY_REJECT;
const int EVerifyRet_ARRAYSIZE = EVerifyRet_MAX + 1;

const ::google::protobuf::EnumDescriptor* EVerifyRet_descriptor();
inline const ::std::string& EVerifyRet_Name(EVerifyRet value) {
  return ::google::protobuf::internal::NameOfEnum(
    EVerifyRet_descriptor(), value);
}
inline bool EVerifyRet_Parse(
    const ::std::string& name, EVerifyRet* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EVerifyRet>(
    EVerifyRet_descriptor(), name, value);
}
enum ETipType {
  TIP_CREATE = 1,
  TIP_JOIN = 2,
  TIP_QUIT = 3,
  TIP_REMOVE = 4,
  TIP_APPOINT_UP = 5,
  TIP_APPOINT_DOWN = 6,
  TIP_START_IMPEACH = 7,
  TIP_END_IMPEACH = 8,
  TIP_DEMISE = 9,
  TIP_DISMISS = 10
};
bool ETipType_IsValid(int value);
const ETipType ETipType_MIN = TIP_CREATE;
const ETipType ETipType_MAX = TIP_DISMISS;
const int ETipType_ARRAYSIZE = ETipType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETipType_descriptor();
inline const ::std::string& ETipType_Name(ETipType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETipType_descriptor(), value);
}
inline bool ETipType_Parse(
    const ::std::string& name, ETipType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETipType>(
    ETipType_descriptor(), name, value);
}
enum ETMFRet {
  TMFRET_OK = 1,
  TMFRET_PRGFULL = 2
};
bool ETMFRet_IsValid(int value);
const ETMFRet ETMFRet_MIN = TMFRET_OK;
const ETMFRet ETMFRet_MAX = TMFRET_PRGFULL;
const int ETMFRet_ARRAYSIZE = ETMFRet_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETMFRet_descriptor();
inline const ::std::string& ETMFRet_Name(ETMFRet value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETMFRet_descriptor(), value);
}
inline bool ETMFRet_Parse(
    const ::std::string& name, ETMFRet* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETMFRet>(
    ETMFRet_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TGuildLimit</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildLimit : public ::google::protobuf::Message {
 public:
  TGuildLimit();
  virtual ~TGuildLimit();

  TGuildLimit(const TGuildLimit& from);

  inline TGuildLimit& operator=(const TGuildLimit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildLimit& default_instance();

  void Swap(TGuildLimit* other);

  // implements Message ----------------------------------------------

  TGuildLimit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildLimit& from);
  void MergeFrom(const TGuildLimit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 FightForce = 1;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildLimit</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildLimit)
 private:
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 fightforce_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildLimit* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildDonate</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildDonate : public ::google::protobuf::Message {
 public:
  TGuildDonate();
  virtual ~TGuildDonate();

  TGuildDonate(const TGuildDonate& from);

  inline TGuildDonate& operator=(const TGuildDonate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildDonate& default_instance();

  void Swap(TGuildDonate* other);

  // implements Message ----------------------------------------------

  TGuildDonate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildDonate& from);
  void MergeFrom(const TGuildDonate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildDonate</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 Exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildDonate</name>
  	<Function>
  		<name>exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 Level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildDonate</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildDonate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildDonate* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildTip</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildTip : public ::google::protobuf::Message {
 public:
  TGuildTip();
  virtual ~TGuildTip();

  TGuildTip(const TGuildTip& from);

  inline TGuildTip& operator=(const TGuildTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildTip& default_instance();

  void Swap(TGuildTip* other);

  // implements Message ----------------------------------------------

  TGuildTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildTip& from);
  void MergeFrom(const TGuildTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildTip</name>
  	<Function>
  		<name>time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional .pb.ETipType Type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildTip</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ETipType type() const;
  inline void set_type(::pb::ETipType value);

  // repeated string ParamArr = 3;
  inline int paramarr_size() const;
  inline void clear_paramarr();
  static const int kParamArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildTip</name>
  	<Function>
  		<name>paramarr</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_paramarr</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_paramarr</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_paramarr</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>paramarr_size</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& paramarr(int index) const;
  inline ::std::string* mutable_paramarr(int index);
  inline void set_paramarr(int index, const ::std::string& value);
  inline void set_paramarr(int index, const char* value);
  inline void set_paramarr(int index, const char* value, size_t size);
  inline ::std::string* add_paramarr();
  inline void add_paramarr(const ::std::string& value);
  inline void add_paramarr(const char* value);
  inline void add_paramarr(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& paramarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_paramarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildTip)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::RepeatedPtrField< ::std::string> paramarr_;
  int type_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildTip* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildApplyInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildApplyInfo : public ::google::protobuf::Message {
 public:
  TGuildApplyInfo();
  virtual ~TGuildApplyInfo();

  TGuildApplyInfo(const TGuildApplyInfo& from);

  inline TGuildApplyInfo& operator=(const TGuildApplyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildApplyInfo& default_instance();

  void Swap(TGuildApplyInfo* other);

  // implements Message ----------------------------------------------

  TGuildApplyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildApplyInfo& from);
  void MergeFrom(const TGuildApplyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildApplyInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfoWithStatus& userinfo() const;
  inline ::pb::TUserSimpleInfoWithStatus* mutable_userinfo();
  inline ::pb::TUserSimpleInfoWithStatus* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfoWithStatus* userinfo);

  // optional uint64 ApplyTime = 2;
  inline bool has_applytime() const;
  inline void clear_applytime();
  static const int kApplyTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildApplyInfo</name>
  	<Function>
  		<name>applytime</name>
  		<replaceName>ApplyTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_applytime</name>
  		<replaceName>ApplyTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_applytime</name>
  		<replaceName>ApplyTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 applytime() const;
  inline void set_applytime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildApplyInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_applytime();
  inline void clear_has_applytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfoWithStatus* userinfo_;
  ::google::protobuf::uint64 applytime_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildApplyInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildImpeachInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildImpeachInfo : public ::google::protobuf::Message {
 public:
  TGuildImpeachInfo();
  virtual ~TGuildImpeachInfo();

  TGuildImpeachInfo(const TGuildImpeachInfo& from);

  inline TGuildImpeachInfo& operator=(const TGuildImpeachInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildImpeachInfo& default_instance();

  void Swap(TGuildImpeachInfo* other);

  // implements Message ----------------------------------------------

  TGuildImpeachInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildImpeachInfo& from);
  void MergeFrom(const TGuildImpeachInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildImpeachInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Uname = 2;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildImpeachInfo</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint64 Time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildImpeachInfo</name>
  	<Function>
  		<name>time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildImpeachInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* uname_;
  ::google::protobuf::uint64 time_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildImpeachInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildTreasMapFix</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildTreasMapFix : public ::google::protobuf::Message {
 public:
  TGuildTreasMapFix();
  virtual ~TGuildTreasMapFix();

  TGuildTreasMapFix(const TGuildTreasMapFix& from);

  inline TGuildTreasMapFix& operator=(const TGuildTreasMapFix& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildTreasMapFix& default_instance();

  void Swap(TGuildTreasMapFix* other);

  // implements Message ----------------------------------------------

  TGuildTreasMapFix* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildTreasMapFix& from);
  void MergeFrom(const TGuildTreasMapFix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ResetTime = 1;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResetTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildTreasMapFix</name>
  	<Function>
  		<name>resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 resettime() const;
  inline void set_resettime(::google::protobuf::uint64 value);

  // optional uint32 FixProgress = 2;
  inline bool has_fixprogress() const;
  inline void clear_fixprogress();
  static const int kFixProgressFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildTreasMapFix</name>
  	<Function>
  		<name>fixprogress</name>
  		<replaceName>FixProgress</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fixprogress</name>
  		<replaceName>FixProgress</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fixprogress</name>
  		<replaceName>FixProgress</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fixprogress() const;
  inline void set_fixprogress(::google::protobuf::uint32 value);

  // optional uint32 DayFixProgress = 3;
  inline bool has_dayfixprogress() const;
  inline void clear_dayfixprogress();
  static const int kDayFixProgressFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildTreasMapFix</name>
  	<Function>
  		<name>dayfixprogress</name>
  		<replaceName>DayFixProgress</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dayfixprogress</name>
  		<replaceName>DayFixProgress</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dayfixprogress</name>
  		<replaceName>DayFixProgress</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 dayfixprogress() const;
  inline void set_dayfixprogress(::google::protobuf::uint32 value);

  // repeated uint64 HistoryResetTimeArr = 4;
  inline int historyresettimearr_size() const;
  inline void clear_historyresettimearr();
  static const int kHistoryResetTimeArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildTreasMapFix</name>
  	<Function>
  		<name>historyresettimearr</name>
  		<replaceName>HistoryResetTimeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_historyresettimearr</name>
  		<replaceName>HistoryResetTimeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_historyresettimearr</name>
  		<replaceName>HistoryResetTimeArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_historyresettimearr</name>
  		<replaceName>HistoryResetTimeArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>historyresettimearr_size</name>
  		<replaceName>HistoryResetTimeArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 historyresettimearr(int index) const;
  inline void set_historyresettimearr(int index, ::google::protobuf::uint64 value);
  inline void add_historyresettimearr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      historyresettimearr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_historyresettimearr();

  // @@protoc_insertion_point(class_scope:pb.TGuildTreasMapFix)
 private:
  inline void set_has_resettime();
  inline void clear_has_resettime();
  inline void set_has_fixprogress();
  inline void clear_has_fixprogress();
  inline void set_has_dayfixprogress();
  inline void clear_has_dayfixprogress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 resettime_;
  ::google::protobuf::uint32 fixprogress_;
  ::google::protobuf::uint32 dayfixprogress_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > historyresettimearr_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildTreasMapFix* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildMemberInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildMemberInfo : public ::google::protobuf::Message {
 public:
  TGuildMemberInfo();
  virtual ~TGuildMemberInfo();

  TGuildMemberInfo(const TGuildMemberInfo& from);

  inline TGuildMemberInfo& operator=(const TGuildMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildMemberInfo& default_instance();

  void Swap(TGuildMemberInfo* other);

  // implements Message ----------------------------------------------

  TGuildMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildMemberInfo& from);
  void MergeFrom(const TGuildMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildMemberInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfoWithStatus& userinfo() const;
  inline ::pb::TUserSimpleInfoWithStatus* mutable_userinfo();
  inline ::pb::TUserSimpleInfoWithStatus* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfoWithStatus* userinfo);

  // optional .pb.EGuildPost RpgPost = 2;
  inline bool has_rpgpost() const;
  inline void clear_rpgpost();
  static const int kRpgPostFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildMemberInfo</name>
  	<Function>
  		<name>rpgpost</name>
  		<replaceName>RpgPost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rpgpost</name>
  		<replaceName>RpgPost</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rpgpost</name>
  		<replaceName>RpgPost</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EGuildPost rpgpost() const;
  inline void set_rpgpost(::pb::EGuildPost value);

  // optional uint32 Donate = 3;
  inline bool has_donate() const;
  inline void clear_donate();
  static const int kDonateFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildMemberInfo</name>
  	<Function>
  		<name>donate</name>
  		<replaceName>Donate</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_donate</name>
  		<replaceName>Donate</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_donate</name>
  		<replaceName>Donate</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 donate() const;
  inline void set_donate(::google::protobuf::uint32 value);

  // optional uint32 WeekDonate = 4;
  inline bool has_weekdonate() const;
  inline void clear_weekdonate();
  static const int kWeekDonateFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildMemberInfo</name>
  	<Function>
  		<name>weekdonate</name>
  		<replaceName>WeekDonate</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_weekdonate</name>
  		<replaceName>WeekDonate</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_weekdonate</name>
  		<replaceName>WeekDonate</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 weekdonate() const;
  inline void set_weekdonate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildMemberInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_rpgpost();
  inline void clear_has_rpgpost();
  inline void set_has_donate();
  inline void clear_has_donate();
  inline void set_has_weekdonate();
  inline void clear_has_weekdonate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfoWithStatus* userinfo_;
  int rpgpost_;
  ::google::protobuf::uint32 donate_;
  ::google::protobuf::uint32 weekdonate_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBaseGuildInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBaseGuildInfo : public ::google::protobuf::Message {
 public:
  TBaseGuildInfo();
  virtual ~TBaseGuildInfo();

  TBaseGuildInfo(const TBaseGuildInfo& from);

  inline TBaseGuildInfo& operator=(const TBaseGuildInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBaseGuildInfo& default_instance();

  void Swap(TBaseGuildInfo* other);

  // implements Message ----------------------------------------------

  TBaseGuildInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBaseGuildInfo& from);
  void MergeFrom(const TBaseGuildInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string BannerName = 3;
  inline bool has_bannername() const;
  inline void clear_bannername();
  static const int kBannerNameFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bannername() const;
  inline void set_bannername(const ::std::string& value);
  inline void set_bannername(const char* value);
  inline void set_bannername(const char* value, size_t size);
  inline ::std::string* mutable_bannername();
  inline ::std::string* release_bannername();
  inline void set_allocated_bannername(::std::string* bannername);

  // optional uint32 BannerBase = 4;
  inline bool has_bannerbase() const;
  inline void clear_bannerbase();
  static const int kBannerBaseFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerbase() const;
  inline void set_bannerbase(::google::protobuf::uint32 value);

  // optional uint32 Level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 Exp = 6;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 MemberNum = 7;
  inline bool has_membernum() const;
  inline void clear_membernum();
  static const int kMemberNumFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>membernum</name>
  		<replaceName>MemberNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_membernum</name>
  		<replaceName>MemberNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_membernum</name>
  		<replaceName>MemberNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 membernum() const;
  inline void set_membernum(::google::protobuf::uint32 value);

  // optional uint64 FightForce = 8;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional string Summary = 9;
  inline bool has_summary() const;
  inline void clear_summary();
  static const int kSummaryFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& summary() const;
  inline void set_summary(const ::std::string& value);
  inline void set_summary(const char* value);
  inline void set_summary(const char* value, size_t size);
  inline ::std::string* mutable_summary();
  inline ::std::string* release_summary();
  inline void set_allocated_summary(::std::string* summary);

  // optional .pb.EReviewMode ReviewMode = 10;
  inline bool has_reviewmode() const;
  inline void clear_reviewmode();
  static const int kReviewModeFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>reviewmode</name>
  		<replaceName>ReviewMode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reviewmode</name>
  		<replaceName>ReviewMode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reviewmode</name>
  		<replaceName>ReviewMode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EReviewMode reviewmode() const;
  inline void set_reviewmode(::pb::EReviewMode value);

  // optional .pb.TGuildLimit Limit = 11;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildLimit& limit() const;
  inline ::pb::TGuildLimit* mutable_limit();
  inline ::pb::TGuildLimit* release_limit();
  inline void set_allocated_limit(::pb::TGuildLimit* limit);

  // optional uint64 LeaderId = 12;
  inline bool has_leaderid() const;
  inline void clear_leaderid();
  static const int kLeaderIdFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>leaderid</name>
  		<replaceName>LeaderId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leaderid</name>
  		<replaceName>LeaderId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leaderid</name>
  		<replaceName>LeaderId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 leaderid() const;
  inline void set_leaderid(::google::protobuf::uint64 value);

  // optional string LeaderName = 13;
  inline bool has_leadername() const;
  inline void clear_leadername();
  static const int kLeaderNameFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>leadername</name>
  		<replaceName>LeaderName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leadername</name>
  		<replaceName>LeaderName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leadername</name>
  		<replaceName>LeaderName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& leadername() const;
  inline void set_leadername(const ::std::string& value);
  inline void set_leadername(const char* value);
  inline void set_leadername(const char* value, size_t size);
  inline ::std::string* mutable_leadername();
  inline ::std::string* release_leadername();
  inline void set_allocated_leadername(::std::string* leadername);

  // optional uint64 QQ = 14;
  inline bool has_qq() const;
  inline void clear_qq();
  static const int kQQFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>qq</name>
  		<replaceName>QQ</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_qq</name>
  		<replaceName>QQ</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_qq</name>
  		<replaceName>QQ</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 qq() const;
  inline void set_qq(::google::protobuf::uint64 value);

  // optional uint32 SumDayDonate = 15;
  inline bool has_sumdaydonate() const;
  inline void clear_sumdaydonate();
  static const int kSumDayDonateFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>sumdaydonate</name>
  		<replaceName>SumDayDonate</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sumdaydonate</name>
  		<replaceName>SumDayDonate</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sumdaydonate</name>
  		<replaceName>SumDayDonate</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 sumdaydonate() const;
  inline void set_sumdaydonate(::google::protobuf::uint32 value);

  // optional uint32 KickOutNum = 16;
  inline bool has_kickoutnum() const;
  inline void clear_kickoutnum();
  static const int kKickOutNumFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>kickoutnum</name>
  		<replaceName>KickOutNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_kickoutnum</name>
  		<replaceName>KickOutNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_kickoutnum</name>
  		<replaceName>KickOutNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 kickoutnum() const;
  inline void set_kickoutnum(::google::protobuf::uint32 value);

  // optional uint32 LastWeekScore = 17;
  inline bool has_lastweekscore() const;
  inline void clear_lastweekscore();
  static const int kLastWeekScoreFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>lastweekscore</name>
  		<replaceName>LastWeekScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastweekscore</name>
  		<replaceName>LastWeekScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastweekscore</name>
  		<replaceName>LastWeekScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 lastweekscore() const;
  inline void set_lastweekscore(::google::protobuf::uint32 value);

  // optional uint32 Rank = 18;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional string LineGroup = 19;
  inline bool has_linegroup() const;
  inline void clear_linegroup();
  static const int kLineGroupFieldNumber = 19;
  /*FOR2LUA
  <Record>
  	<name>TBaseGuildInfo</name>
  	<Function>
  		<name>linegroup</name>
  		<replaceName>LineGroup</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_linegroup</name>
  		<replaceName>LineGroup</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_linegroup</name>
  		<replaceName>LineGroup</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& linegroup() const;
  inline void set_linegroup(const ::std::string& value);
  inline void set_linegroup(const char* value);
  inline void set_linegroup(const char* value, size_t size);
  inline ::std::string* mutable_linegroup();
  inline ::std::string* release_linegroup();
  inline void set_allocated_linegroup(::std::string* linegroup);

  // @@protoc_insertion_point(class_scope:pb.TBaseGuildInfo)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_bannername();
  inline void clear_has_bannername();
  inline void set_has_bannerbase();
  inline void clear_has_bannerbase();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_membernum();
  inline void clear_has_membernum();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_summary();
  inline void clear_has_summary();
  inline void set_has_reviewmode();
  inline void clear_has_reviewmode();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_leaderid();
  inline void clear_has_leaderid();
  inline void set_has_leadername();
  inline void clear_has_leadername();
  inline void set_has_qq();
  inline void clear_has_qq();
  inline void set_has_sumdaydonate();
  inline void clear_has_sumdaydonate();
  inline void set_has_kickoutnum();
  inline void clear_has_kickoutnum();
  inline void set_has_lastweekscore();
  inline void clear_has_lastweekscore();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_linegroup();
  inline void clear_has_linegroup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* name_;
  ::std::string* bannername_;
  ::google::protobuf::uint32 bannerbase_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 membernum_;
  ::google::protobuf::uint64 fightforce_;
  ::std::string* summary_;
  ::pb::TGuildLimit* limit_;
  ::google::protobuf::uint64 leaderid_;
  int reviewmode_;
  ::google::protobuf::uint32 sumdaydonate_;
  ::std::string* leadername_;
  ::google::protobuf::uint64 qq_;
  ::google::protobuf::uint32 kickoutnum_;
  ::google::protobuf::uint32 lastweekscore_;
  ::std::string* linegroup_;
  ::google::protobuf::uint32 rank_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TBaseGuildInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildSalaryInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildSalaryInfo : public ::google::protobuf::Message {
 public:
  TGuildSalaryInfo();
  virtual ~TGuildSalaryInfo();

  TGuildSalaryInfo(const TGuildSalaryInfo& from);

  inline TGuildSalaryInfo& operator=(const TGuildSalaryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildSalaryInfo& default_instance();

  void Swap(TGuildSalaryInfo* other);

  // implements Message ----------------------------------------------

  TGuildSalaryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildSalaryInfo& from);
  void MergeFrom(const TGuildSalaryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Post = 1;
  inline bool has_post() const;
  inline void clear_post();
  static const int kPostFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildSalaryInfo</name>
  	<Function>
  		<name>post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 post() const;
  inline void set_post(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildSalaryInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildSalaryInfo)
 private:
  inline void set_has_post();
  inline void clear_has_post();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 post_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildSalaryInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetInfoRsp : public ::google::protobuf::Message {
 public:
  TGuildGetInfoRsp();
  virtual ~TGuildGetInfoRsp();

  TGuildGetInfoRsp(const TGuildGetInfoRsp& from);

  inline TGuildGetInfoRsp& operator=(const TGuildGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetInfoRsp& default_instance();

  void Swap(TGuildGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TGuildGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetInfoRsp& from);
  void MergeFrom(const TGuildGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildMyInfo MyInfo = 1;
  inline bool has_myinfo() const;
  inline void clear_myinfo();
  static const int kMyInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetInfoRsp</name>
  	<Function>
  		<name>myinfo</name>
  		<replaceName>MyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myinfo</name>
  		<replaceName>MyInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_myinfo</name>
  		<replaceName>MyInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myinfo</name>
  		<replaceName>MyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildMyInfo& myinfo() const;
  inline ::pb::TGuildMyInfo* mutable_myinfo();
  inline ::pb::TGuildMyInfo* release_myinfo();
  inline void set_allocated_myinfo(::pb::TGuildMyInfo* myinfo);

  // optional .pb.TBaseGuildInfo GuildInfo = 2;
  inline bool has_guildinfo() const;
  inline void clear_guildinfo();
  static const int kGuildInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetInfoRsp</name>
  	<Function>
  		<name>guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBaseGuildInfo& guildinfo() const;
  inline ::pb::TBaseGuildInfo* mutable_guildinfo();
  inline ::pb::TBaseGuildInfo* release_guildinfo();
  inline void set_allocated_guildinfo(::pb::TBaseGuildInfo* guildinfo);

  // optional string Notice = 3;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetInfoRsp</name>
  	<Function>
  		<name>notice</name>
  		<replaceName>Notice</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_notice</name>
  		<replaceName>Notice</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_notice</name>
  		<replaceName>Notice</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // repeated .pb.TGuildTip TipArr = 4;
  inline int tiparr_size() const;
  inline void clear_tiparr();
  static const int kTipArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetInfoRsp</name>
  	<Function>
  		<name>tiparr</name>
  		<replaceName>TipArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_tiparr</name>
  		<replaceName>TipArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_tiparr</name>
  		<replaceName>TipArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tiparr</name>
  		<replaceName>TipArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>tiparr_size</name>
  		<replaceName>TipArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildTip& tiparr(int index) const;
  inline ::pb::TGuildTip* mutable_tiparr(int index);
  inline ::pb::TGuildTip* add_tiparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildTip >&
      tiparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildTip >*
      mutable_tiparr();

  // repeated .pb.TGuildDonate DonateArr = 5;
  inline int donatearr_size() const;
  inline void clear_donatearr();
  static const int kDonateArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetInfoRsp</name>
  	<Function>
  		<name>donatearr</name>
  		<replaceName>DonateArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_donatearr</name>
  		<replaceName>DonateArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_donatearr</name>
  		<replaceName>DonateArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_donatearr</name>
  		<replaceName>DonateArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>donatearr_size</name>
  		<replaceName>DonateArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildDonate& donatearr(int index) const;
  inline ::pb::TGuildDonate* mutable_donatearr(int index);
  inline ::pb::TGuildDonate* add_donatearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildDonate >&
      donatearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildDonate >*
      mutable_donatearr();

  // optional .pb.TGuildImpeachInfo ImpeachInfo = 6;
  inline bool has_impeachinfo() const;
  inline void clear_impeachinfo();
  static const int kImpeachInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetInfoRsp</name>
  	<Function>
  		<name>impeachinfo</name>
  		<replaceName>ImpeachInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_impeachinfo</name>
  		<replaceName>ImpeachInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_impeachinfo</name>
  		<replaceName>ImpeachInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_impeachinfo</name>
  		<replaceName>ImpeachInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildImpeachInfo& impeachinfo() const;
  inline ::pb::TGuildImpeachInfo* mutable_impeachinfo();
  inline ::pb::TGuildImpeachInfo* release_impeachinfo();
  inline void set_allocated_impeachinfo(::pb::TGuildImpeachInfo* impeachinfo);

  // optional uint64 DismissTime = 7;
  inline bool has_dismisstime() const;
  inline void clear_dismisstime();
  static const int kDismissTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetInfoRsp</name>
  	<Function>
  		<name>dismisstime</name>
  		<replaceName>DismissTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dismisstime</name>
  		<replaceName>DismissTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dismisstime</name>
  		<replaceName>DismissTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 dismisstime() const;
  inline void set_dismisstime(::google::protobuf::uint64 value);

  // optional .pb.TGuildTreasMapFix TMFInfo = 8;
  inline bool has_tmfinfo() const;
  inline void clear_tmfinfo();
  static const int kTMFInfoFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetInfoRsp</name>
  	<Function>
  		<name>tmfinfo</name>
  		<replaceName>TMFInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tmfinfo</name>
  		<replaceName>TMFInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_tmfinfo</name>
  		<replaceName>TMFInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tmfinfo</name>
  		<replaceName>TMFInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildTreasMapFix& tmfinfo() const;
  inline ::pb::TGuildTreasMapFix* mutable_tmfinfo();
  inline ::pb::TGuildTreasMapFix* release_tmfinfo();
  inline void set_allocated_tmfinfo(::pb::TGuildTreasMapFix* tmfinfo);

  // optional uint32 SendEmailNum = 9;
  inline bool has_sendemailnum() const;
  inline void clear_sendemailnum();
  static const int kSendEmailNumFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetInfoRsp</name>
  	<Function>
  		<name>sendemailnum</name>
  		<replaceName>SendEmailNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sendemailnum</name>
  		<replaceName>SendEmailNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sendemailnum</name>
  		<replaceName>SendEmailNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 sendemailnum() const;
  inline void set_sendemailnum(::google::protobuf::uint32 value);

  // repeated .pb.TGuildSalaryInfo SalaryInfoArr = 10;
  inline int salaryinfoarr_size() const;
  inline void clear_salaryinfoarr();
  static const int kSalaryInfoArrFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetInfoRsp</name>
  	<Function>
  		<name>salaryinfoarr</name>
  		<replaceName>SalaryInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_salaryinfoarr</name>
  		<replaceName>SalaryInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_salaryinfoarr</name>
  		<replaceName>SalaryInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_salaryinfoarr</name>
  		<replaceName>SalaryInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>salaryinfoarr_size</name>
  		<replaceName>SalaryInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildSalaryInfo& salaryinfoarr(int index) const;
  inline ::pb::TGuildSalaryInfo* mutable_salaryinfoarr(int index);
  inline ::pb::TGuildSalaryInfo* add_salaryinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildSalaryInfo >&
      salaryinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildSalaryInfo >*
      mutable_salaryinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildGetInfoRsp)
 private:
  inline void set_has_myinfo();
  inline void clear_has_myinfo();
  inline void set_has_guildinfo();
  inline void clear_has_guildinfo();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_impeachinfo();
  inline void clear_has_impeachinfo();
  inline void set_has_dismisstime();
  inline void clear_has_dismisstime();
  inline void set_has_tmfinfo();
  inline void clear_has_tmfinfo();
  inline void set_has_sendemailnum();
  inline void clear_has_sendemailnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildMyInfo* myinfo_;
  ::pb::TBaseGuildInfo* guildinfo_;
  ::std::string* notice_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildTip > tiparr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildDonate > donatearr_;
  ::pb::TGuildImpeachInfo* impeachinfo_;
  ::google::protobuf::uint64 dismisstime_;
  ::pb::TGuildTreasMapFix* tmfinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildSalaryInfo > salaryinfoarr_;
  ::google::protobuf::uint32 sendemailnum_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildUpdateOurGuildNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildUpdateOurGuildNotify : public ::google::protobuf::Message {
 public:
  TGuildUpdateOurGuildNotify();
  virtual ~TGuildUpdateOurGuildNotify();

  TGuildUpdateOurGuildNotify(const TGuildUpdateOurGuildNotify& from);

  inline TGuildUpdateOurGuildNotify& operator=(const TGuildUpdateOurGuildNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildUpdateOurGuildNotify& default_instance();

  void Swap(TGuildUpdateOurGuildNotify* other);

  // implements Message ----------------------------------------------

  TGuildUpdateOurGuildNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildUpdateOurGuildNotify& from);
  void MergeFrom(const TGuildUpdateOurGuildNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBaseGuildInfo GuildInfo = 1;
  inline bool has_guildinfo() const;
  inline void clear_guildinfo();
  static const int kGuildInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateOurGuildNotify</name>
  	<Function>
  		<name>guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBaseGuildInfo& guildinfo() const;
  inline ::pb::TBaseGuildInfo* mutable_guildinfo();
  inline ::pb::TBaseGuildInfo* release_guildinfo();
  inline void set_allocated_guildinfo(::pb::TBaseGuildInfo* guildinfo);

  // optional string Notice = 2;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateOurGuildNotify</name>
  	<Function>
  		<name>notice</name>
  		<replaceName>Notice</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_notice</name>
  		<replaceName>Notice</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_notice</name>
  		<replaceName>Notice</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // repeated .pb.TGuildTip TipArr = 3;
  inline int tiparr_size() const;
  inline void clear_tiparr();
  static const int kTipArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateOurGuildNotify</name>
  	<Function>
  		<name>tiparr</name>
  		<replaceName>TipArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_tiparr</name>
  		<replaceName>TipArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_tiparr</name>
  		<replaceName>TipArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tiparr</name>
  		<replaceName>TipArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>tiparr_size</name>
  		<replaceName>TipArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildTip& tiparr(int index) const;
  inline ::pb::TGuildTip* mutable_tiparr(int index);
  inline ::pb::TGuildTip* add_tiparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildTip >&
      tiparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildTip >*
      mutable_tiparr();

  // repeated .pb.TGuildDonate DonateArr = 4;
  inline int donatearr_size() const;
  inline void clear_donatearr();
  static const int kDonateArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateOurGuildNotify</name>
  	<Function>
  		<name>donatearr</name>
  		<replaceName>DonateArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_donatearr</name>
  		<replaceName>DonateArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_donatearr</name>
  		<replaceName>DonateArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_donatearr</name>
  		<replaceName>DonateArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>donatearr_size</name>
  		<replaceName>DonateArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildDonate& donatearr(int index) const;
  inline ::pb::TGuildDonate* mutable_donatearr(int index);
  inline ::pb::TGuildDonate* add_donatearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildDonate >&
      donatearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildDonate >*
      mutable_donatearr();

  // optional uint32 ApplyNum = 5;
  inline bool has_applynum() const;
  inline void clear_applynum();
  static const int kApplyNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateOurGuildNotify</name>
  	<Function>
  		<name>applynum</name>
  		<replaceName>ApplyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_applynum</name>
  		<replaceName>ApplyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_applynum</name>
  		<replaceName>ApplyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 applynum() const;
  inline void set_applynum(::google::protobuf::uint32 value);

  // optional uint64 CreateTime = 6;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateOurGuildNotify</name>
  	<Function>
  		<name>createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 createtime() const;
  inline void set_createtime(::google::protobuf::uint64 value);

  // optional .pb.TGuildImpeachInfo ImpeachInfo = 7;
  inline bool has_impeachinfo() const;
  inline void clear_impeachinfo();
  static const int kImpeachInfoFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateOurGuildNotify</name>
  	<Function>
  		<name>impeachinfo</name>
  		<replaceName>ImpeachInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_impeachinfo</name>
  		<replaceName>ImpeachInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_impeachinfo</name>
  		<replaceName>ImpeachInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_impeachinfo</name>
  		<replaceName>ImpeachInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildImpeachInfo& impeachinfo() const;
  inline ::pb::TGuildImpeachInfo* mutable_impeachinfo();
  inline ::pb::TGuildImpeachInfo* release_impeachinfo();
  inline void set_allocated_impeachinfo(::pb::TGuildImpeachInfo* impeachinfo);

  // optional uint64 DismissTime = 8;
  inline bool has_dismisstime() const;
  inline void clear_dismisstime();
  static const int kDismissTimeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateOurGuildNotify</name>
  	<Function>
  		<name>dismisstime</name>
  		<replaceName>DismissTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dismisstime</name>
  		<replaceName>DismissTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dismisstime</name>
  		<replaceName>DismissTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 dismisstime() const;
  inline void set_dismisstime(::google::protobuf::uint64 value);

  // optional .pb.TGuildTreasMapFix TMFInfo = 9;
  inline bool has_tmfinfo() const;
  inline void clear_tmfinfo();
  static const int kTMFInfoFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateOurGuildNotify</name>
  	<Function>
  		<name>tmfinfo</name>
  		<replaceName>TMFInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tmfinfo</name>
  		<replaceName>TMFInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_tmfinfo</name>
  		<replaceName>TMFInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tmfinfo</name>
  		<replaceName>TMFInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildTreasMapFix& tmfinfo() const;
  inline ::pb::TGuildTreasMapFix* mutable_tmfinfo();
  inline ::pb::TGuildTreasMapFix* release_tmfinfo();
  inline void set_allocated_tmfinfo(::pb::TGuildTreasMapFix* tmfinfo);

  // repeated .pb.TGuildSalaryInfo SalaryInfoArr = 10;
  inline int salaryinfoarr_size() const;
  inline void clear_salaryinfoarr();
  static const int kSalaryInfoArrFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateOurGuildNotify</name>
  	<Function>
  		<name>salaryinfoarr</name>
  		<replaceName>SalaryInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_salaryinfoarr</name>
  		<replaceName>SalaryInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_salaryinfoarr</name>
  		<replaceName>SalaryInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_salaryinfoarr</name>
  		<replaceName>SalaryInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>salaryinfoarr_size</name>
  		<replaceName>SalaryInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildSalaryInfo& salaryinfoarr(int index) const;
  inline ::pb::TGuildSalaryInfo* mutable_salaryinfoarr(int index);
  inline ::pb::TGuildSalaryInfo* add_salaryinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildSalaryInfo >&
      salaryinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildSalaryInfo >*
      mutable_salaryinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildUpdateOurGuildNotify)
 private:
  inline void set_has_guildinfo();
  inline void clear_has_guildinfo();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_applynum();
  inline void clear_has_applynum();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_impeachinfo();
  inline void clear_has_impeachinfo();
  inline void set_has_dismisstime();
  inline void clear_has_dismisstime();
  inline void set_has_tmfinfo();
  inline void clear_has_tmfinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBaseGuildInfo* guildinfo_;
  ::std::string* notice_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildTip > tiparr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildDonate > donatearr_;
  ::google::protobuf::uint64 createtime_;
  ::pb::TGuildImpeachInfo* impeachinfo_;
  ::google::protobuf::uint64 dismisstime_;
  ::pb::TGuildTreasMapFix* tmfinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildSalaryInfo > salaryinfoarr_;
  ::google::protobuf::uint32 applynum_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildUpdateOurGuildNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetOtherInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetOtherInfoReq : public ::google::protobuf::Message {
 public:
  TGuildGetOtherInfoReq();
  virtual ~TGuildGetOtherInfoReq();

  TGuildGetOtherInfoReq(const TGuildGetOtherInfoReq& from);

  inline TGuildGetOtherInfoReq& operator=(const TGuildGetOtherInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetOtherInfoReq& default_instance();

  void Swap(TGuildGetOtherInfoReq* other);

  // implements Message ----------------------------------------------

  TGuildGetOtherInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetOtherInfoReq& from);
  void MergeFrom(const TGuildGetOtherInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetOtherInfoReq</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildGetOtherInfoReq)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetOtherInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetOtherInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetOtherInfoRsp : public ::google::protobuf::Message {
 public:
  TGuildGetOtherInfoRsp();
  virtual ~TGuildGetOtherInfoRsp();

  TGuildGetOtherInfoRsp(const TGuildGetOtherInfoRsp& from);

  inline TGuildGetOtherInfoRsp& operator=(const TGuildGetOtherInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetOtherInfoRsp& default_instance();

  void Swap(TGuildGetOtherInfoRsp* other);

  // implements Message ----------------------------------------------

  TGuildGetOtherInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetOtherInfoRsp& from);
  void MergeFrom(const TGuildGetOtherInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBaseGuildInfo GuildInfo = 1;
  inline bool has_guildinfo() const;
  inline void clear_guildinfo();
  static const int kGuildInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetOtherInfoRsp</name>
  	<Function>
  		<name>guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBaseGuildInfo& guildinfo() const;
  inline ::pb::TBaseGuildInfo* mutable_guildinfo();
  inline ::pb::TBaseGuildInfo* release_guildinfo();
  inline void set_allocated_guildinfo(::pb::TBaseGuildInfo* guildinfo);

  // optional uint32 Rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetOtherInfoRsp</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildGetOtherInfoRsp)
 private:
  inline void set_has_guildinfo();
  inline void clear_has_guildinfo();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBaseGuildInfo* guildinfo_;
  ::google::protobuf::uint32 rank_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetOtherInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetListReq : public ::google::protobuf::Message {
 public:
  TGuildGetListReq();
  virtual ~TGuildGetListReq();

  TGuildGetListReq(const TGuildGetListReq& from);

  inline TGuildGetListReq& operator=(const TGuildGetListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetListReq& default_instance();

  void Swap(TGuildGetListReq* other);

  // implements Message ----------------------------------------------

  TGuildGetListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetListReq& from);
  void MergeFrom(const TGuildGetListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FromRank = 1;
  inline bool has_fromrank() const;
  inline void clear_fromrank();
  static const int kFromRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetListReq</name>
  	<Function>
  		<name>fromrank</name>
  		<replaceName>FromRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fromrank</name>
  		<replaceName>FromRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fromrank</name>
  		<replaceName>FromRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fromrank() const;
  inline void set_fromrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildGetListReq)
 private:
  inline void set_has_fromrank();
  inline void clear_has_fromrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 fromrank_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetListRsp : public ::google::protobuf::Message {
 public:
  TGuildGetListRsp();
  virtual ~TGuildGetListRsp();

  TGuildGetListRsp(const TGuildGetListRsp& from);

  inline TGuildGetListRsp& operator=(const TGuildGetListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetListRsp& default_instance();

  void Swap(TGuildGetListRsp* other);

  // implements Message ----------------------------------------------

  TGuildGetListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetListRsp& from);
  void MergeFrom(const TGuildGetListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TotalNum = 1;
  inline bool has_totalnum() const;
  inline void clear_totalnum();
  static const int kTotalNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetListRsp</name>
  	<Function>
  		<name>totalnum</name>
  		<replaceName>TotalNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalnum</name>
  		<replaceName>TotalNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalnum</name>
  		<replaceName>TotalNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 totalnum() const;
  inline void set_totalnum(::google::protobuf::uint32 value);

  // repeated .pb.TBaseGuildInfo GuildArr = 2;
  inline int guildarr_size() const;
  inline void clear_guildarr();
  static const int kGuildArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetListRsp</name>
  	<Function>
  		<name>guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>guildarr_size</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBaseGuildInfo& guildarr(int index) const;
  inline ::pb::TBaseGuildInfo* mutable_guildarr(int index);
  inline ::pb::TBaseGuildInfo* add_guildarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBaseGuildInfo >&
      guildarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBaseGuildInfo >*
      mutable_guildarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildGetListRsp)
 private:
  inline void set_has_totalnum();
  inline void clear_has_totalnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBaseGuildInfo > guildarr_;
  ::google::protobuf::uint32 totalnum_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetCanApplyListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetCanApplyListReq : public ::google::protobuf::Message {
 public:
  TGuildGetCanApplyListReq();
  virtual ~TGuildGetCanApplyListReq();

  TGuildGetCanApplyListReq(const TGuildGetCanApplyListReq& from);

  inline TGuildGetCanApplyListReq& operator=(const TGuildGetCanApplyListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetCanApplyListReq& default_instance();

  void Swap(TGuildGetCanApplyListReq* other);

  // implements Message ----------------------------------------------

  TGuildGetCanApplyListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetCanApplyListReq& from);
  void MergeFrom(const TGuildGetCanApplyListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetCanApplyListReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetCanApplyListReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildGetCanApplyListReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetCanApplyListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetCanApplyListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetCanApplyListRsp : public ::google::protobuf::Message {
 public:
  TGuildGetCanApplyListRsp();
  virtual ~TGuildGetCanApplyListRsp();

  TGuildGetCanApplyListRsp(const TGuildGetCanApplyListRsp& from);

  inline TGuildGetCanApplyListRsp& operator=(const TGuildGetCanApplyListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetCanApplyListRsp& default_instance();

  void Swap(TGuildGetCanApplyListRsp* other);

  // implements Message ----------------------------------------------

  TGuildGetCanApplyListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetCanApplyListRsp& from);
  void MergeFrom(const TGuildGetCanApplyListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBaseGuildInfo GuildArr = 1;
  inline int guildarr_size() const;
  inline void clear_guildarr();
  static const int kGuildArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetCanApplyListRsp</name>
  	<Function>
  		<name>guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>guildarr_size</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBaseGuildInfo& guildarr(int index) const;
  inline ::pb::TBaseGuildInfo* mutable_guildarr(int index);
  inline ::pb::TBaseGuildInfo* add_guildarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBaseGuildInfo >&
      guildarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBaseGuildInfo >*
      mutable_guildarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildGetCanApplyListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBaseGuildInfo > guildarr_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetCanApplyListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildCreateReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildCreateReq : public ::google::protobuf::Message {
 public:
  TGuildCreateReq();
  virtual ~TGuildCreateReq();

  TGuildCreateReq(const TGuildCreateReq& from);

  inline TGuildCreateReq& operator=(const TGuildCreateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildCreateReq& default_instance();

  void Swap(TGuildCreateReq* other);

  // implements Message ----------------------------------------------

  TGuildCreateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildCreateReq& from);
  void MergeFrom(const TGuildCreateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildCreateReq</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string Summary = 2;
  inline bool has_summary() const;
  inline void clear_summary();
  static const int kSummaryFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildCreateReq</name>
  	<Function>
  		<name>summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& summary() const;
  inline void set_summary(const ::std::string& value);
  inline void set_summary(const char* value);
  inline void set_summary(const char* value, size_t size);
  inline ::std::string* mutable_summary();
  inline ::std::string* release_summary();
  inline void set_allocated_summary(::std::string* summary);

  // optional string PhoneNumber = 3;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildCreateReq</name>
  	<Function>
  		<name>phonenumber</name>
  		<replaceName>PhoneNumber</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_phonenumber</name>
  		<replaceName>PhoneNumber</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_phonenumber</name>
  		<replaceName>PhoneNumber</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& phonenumber() const;
  inline void set_phonenumber(const ::std::string& value);
  inline void set_phonenumber(const char* value);
  inline void set_phonenumber(const char* value, size_t size);
  inline ::std::string* mutable_phonenumber();
  inline ::std::string* release_phonenumber();
  inline void set_allocated_phonenumber(::std::string* phonenumber);

  // optional string AuthCode = 4;
  inline bool has_authcode() const;
  inline void clear_authcode();
  static const int kAuthCodeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildCreateReq</name>
  	<Function>
  		<name>authcode</name>
  		<replaceName>AuthCode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_authcode</name>
  		<replaceName>AuthCode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_authcode</name>
  		<replaceName>AuthCode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& authcode() const;
  inline void set_authcode(const ::std::string& value);
  inline void set_authcode(const char* value);
  inline void set_authcode(const char* value, size_t size);
  inline ::std::string* mutable_authcode();
  inline ::std::string* release_authcode();
  inline void set_allocated_authcode(::std::string* authcode);

  // @@protoc_insertion_point(class_scope:pb.TGuildCreateReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_summary();
  inline void clear_has_summary();
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_authcode();
  inline void clear_has_authcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* summary_;
  ::std::string* phonenumber_;
  ::std::string* authcode_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildCreateReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildSearchReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildSearchReq : public ::google::protobuf::Message {
 public:
  TGuildSearchReq();
  virtual ~TGuildSearchReq();

  TGuildSearchReq(const TGuildSearchReq& from);

  inline TGuildSearchReq& operator=(const TGuildSearchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildSearchReq& default_instance();

  void Swap(TGuildSearchReq* other);

  // implements Message ----------------------------------------------

  TGuildSearchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildSearchReq& from);
  void MergeFrom(const TGuildSearchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildSearchReq</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pb.TGuildSearchReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildSearchReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildSearchRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildSearchRsp : public ::google::protobuf::Message {
 public:
  TGuildSearchRsp();
  virtual ~TGuildSearchRsp();

  TGuildSearchRsp(const TGuildSearchRsp& from);

  inline TGuildSearchRsp& operator=(const TGuildSearchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildSearchRsp& default_instance();

  void Swap(TGuildSearchRsp* other);

  // implements Message ----------------------------------------------

  TGuildSearchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildSearchRsp& from);
  void MergeFrom(const TGuildSearchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBaseGuildInfo GuildArr = 1;
  inline int guildarr_size() const;
  inline void clear_guildarr();
  static const int kGuildArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildSearchRsp</name>
  	<Function>
  		<name>guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>guildarr_size</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBaseGuildInfo& guildarr(int index) const;
  inline ::pb::TBaseGuildInfo* mutable_guildarr(int index);
  inline ::pb::TBaseGuildInfo* add_guildarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBaseGuildInfo >&
      guildarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBaseGuildInfo >*
      mutable_guildarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildSearchRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBaseGuildInfo > guildarr_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildSearchRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetApplyListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetApplyListRsp : public ::google::protobuf::Message {
 public:
  TGuildGetApplyListRsp();
  virtual ~TGuildGetApplyListRsp();

  TGuildGetApplyListRsp(const TGuildGetApplyListRsp& from);

  inline TGuildGetApplyListRsp& operator=(const TGuildGetApplyListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetApplyListRsp& default_instance();

  void Swap(TGuildGetApplyListRsp* other);

  // implements Message ----------------------------------------------

  TGuildGetApplyListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetApplyListRsp& from);
  void MergeFrom(const TGuildGetApplyListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildApplyInfo ApplyArr = 1;
  inline int applyarr_size() const;
  inline void clear_applyarr();
  static const int kApplyArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetApplyListRsp</name>
  	<Function>
  		<name>applyarr</name>
  		<replaceName>ApplyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_applyarr</name>
  		<replaceName>ApplyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_applyarr</name>
  		<replaceName>ApplyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_applyarr</name>
  		<replaceName>ApplyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>applyarr_size</name>
  		<replaceName>ApplyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildApplyInfo& applyarr(int index) const;
  inline ::pb::TGuildApplyInfo* mutable_applyarr(int index);
  inline ::pb::TGuildApplyInfo* add_applyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildApplyInfo >&
      applyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildApplyInfo >*
      mutable_applyarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildGetApplyListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildApplyInfo > applyarr_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetApplyListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildApplyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildApplyReq : public ::google::protobuf::Message {
 public:
  TGuildApplyReq();
  virtual ~TGuildApplyReq();

  TGuildApplyReq(const TGuildApplyReq& from);

  inline TGuildApplyReq& operator=(const TGuildApplyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildApplyReq& default_instance();

  void Swap(TGuildApplyReq* other);

  // implements Message ----------------------------------------------

  TGuildApplyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildApplyReq& from);
  void MergeFrom(const TGuildApplyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildApplyReq</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildApplyReq)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildApplyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildCancelApplyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildCancelApplyReq : public ::google::protobuf::Message {
 public:
  TGuildCancelApplyReq();
  virtual ~TGuildCancelApplyReq();

  TGuildCancelApplyReq(const TGuildCancelApplyReq& from);

  inline TGuildCancelApplyReq& operator=(const TGuildCancelApplyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildCancelApplyReq& default_instance();

  void Swap(TGuildCancelApplyReq* other);

  // implements Message ----------------------------------------------

  TGuildCancelApplyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildCancelApplyReq& from);
  void MergeFrom(const TGuildCancelApplyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildCancelApplyReq</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildCancelApplyReq)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildCancelApplyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildVerifyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildVerifyReq : public ::google::protobuf::Message {
 public:
  TGuildVerifyReq();
  virtual ~TGuildVerifyReq();

  TGuildVerifyReq(const TGuildVerifyReq& from);

  inline TGuildVerifyReq& operator=(const TGuildVerifyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildVerifyReq& default_instance();

  void Swap(TGuildVerifyReq* other);

  // implements Message ----------------------------------------------

  TGuildVerifyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildVerifyReq& from);
  void MergeFrom(const TGuildVerifyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildVerifyReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional .pb.EVerifyRet Ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildVerifyReq</name>
  	<Function>
  		<name>ret</name>
  		<replaceName>Ret</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ret</name>
  		<replaceName>Ret</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ret</name>
  		<replaceName>Ret</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EVerifyRet ret() const;
  inline void set_ret(::pb::EVerifyRet value);

  // @@protoc_insertion_point(class_scope:pb.TGuildVerifyReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  int ret_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildVerifyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildVerifyAllReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildVerifyAllReq : public ::google::protobuf::Message {
 public:
  TGuildVerifyAllReq();
  virtual ~TGuildVerifyAllReq();

  TGuildVerifyAllReq(const TGuildVerifyAllReq& from);

  inline TGuildVerifyAllReq& operator=(const TGuildVerifyAllReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildVerifyAllReq& default_instance();

  void Swap(TGuildVerifyAllReq* other);

  // implements Message ----------------------------------------------

  TGuildVerifyAllReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildVerifyAllReq& from);
  void MergeFrom(const TGuildVerifyAllReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EVerifyRet Ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildVerifyAllReq</name>
  	<Function>
  		<name>ret</name>
  		<replaceName>Ret</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ret</name>
  		<replaceName>Ret</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ret</name>
  		<replaceName>Ret</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EVerifyRet ret() const;
  inline void set_ret(::pb::EVerifyRet value);

  // @@protoc_insertion_point(class_scope:pb.TGuildVerifyAllReq)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int ret_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildVerifyAllReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetMemberListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetMemberListRsp : public ::google::protobuf::Message {
 public:
  TGuildGetMemberListRsp();
  virtual ~TGuildGetMemberListRsp();

  TGuildGetMemberListRsp(const TGuildGetMemberListRsp& from);

  inline TGuildGetMemberListRsp& operator=(const TGuildGetMemberListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetMemberListRsp& default_instance();

  void Swap(TGuildGetMemberListRsp* other);

  // implements Message ----------------------------------------------

  TGuildGetMemberListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetMemberListRsp& from);
  void MergeFrom(const TGuildGetMemberListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildMemberInfo MemberArr = 1;
  inline int memberarr_size() const;
  inline void clear_memberarr();
  static const int kMemberArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetMemberListRsp</name>
  	<Function>
  		<name>memberarr</name>
  		<replaceName>MemberArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_memberarr</name>
  		<replaceName>MemberArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_memberarr</name>
  		<replaceName>MemberArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_memberarr</name>
  		<replaceName>MemberArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>memberarr_size</name>
  		<replaceName>MemberArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildMemberInfo& memberarr(int index) const;
  inline ::pb::TGuildMemberInfo* mutable_memberarr(int index);
  inline ::pb::TGuildMemberInfo* add_memberarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildMemberInfo >&
      memberarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildMemberInfo >*
      mutable_memberarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildGetMemberListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildMemberInfo > memberarr_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetMemberListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildModifyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildModifyReq : public ::google::protobuf::Message {
 public:
  TGuildModifyReq();
  virtual ~TGuildModifyReq();

  TGuildModifyReq(const TGuildModifyReq& from);

  inline TGuildModifyReq& operator=(const TGuildModifyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildModifyReq& default_instance();

  void Swap(TGuildModifyReq* other);

  // implements Message ----------------------------------------------

  TGuildModifyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildModifyReq& from);
  void MergeFrom(const TGuildModifyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BannerName = 1;
  inline bool has_bannername() const;
  inline void clear_bannername();
  static const int kBannerNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildModifyReq</name>
  	<Function>
  		<name>bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bannername() const;
  inline void set_bannername(const ::std::string& value);
  inline void set_bannername(const char* value);
  inline void set_bannername(const char* value, size_t size);
  inline ::std::string* mutable_bannername();
  inline ::std::string* release_bannername();
  inline void set_allocated_bannername(::std::string* bannername);

  // optional uint32 BannerBase = 2;
  inline bool has_bannerbase() const;
  inline void clear_bannerbase();
  static const int kBannerBaseFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildModifyReq</name>
  	<Function>
  		<name>bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerbase() const;
  inline void set_bannerbase(::google::protobuf::uint32 value);

  // optional string Summary = 3;
  inline bool has_summary() const;
  inline void clear_summary();
  static const int kSummaryFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildModifyReq</name>
  	<Function>
  		<name>summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& summary() const;
  inline void set_summary(const ::std::string& value);
  inline void set_summary(const char* value);
  inline void set_summary(const char* value, size_t size);
  inline ::std::string* mutable_summary();
  inline ::std::string* release_summary();
  inline void set_allocated_summary(::std::string* summary);

  // optional string Notice = 4;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildModifyReq</name>
  	<Function>
  		<name>notice</name>
  		<replaceName>Notice</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_notice</name>
  		<replaceName>Notice</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_notice</name>
  		<replaceName>Notice</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional .pb.EReviewMode ReviewMode = 5;
  inline bool has_reviewmode() const;
  inline void clear_reviewmode();
  static const int kReviewModeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildModifyReq</name>
  	<Function>
  		<name>reviewmode</name>
  		<replaceName>ReviewMode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reviewmode</name>
  		<replaceName>ReviewMode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reviewmode</name>
  		<replaceName>ReviewMode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EReviewMode reviewmode() const;
  inline void set_reviewmode(::pb::EReviewMode value);

  // optional .pb.TGuildLimit Limit = 6;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildModifyReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildLimit& limit() const;
  inline ::pb::TGuildLimit* mutable_limit();
  inline ::pb::TGuildLimit* release_limit();
  inline void set_allocated_limit(::pb::TGuildLimit* limit);

  // optional uint64 QQ = 7;
  inline bool has_qq() const;
  inline void clear_qq();
  static const int kQQFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TGuildModifyReq</name>
  	<Function>
  		<name>qq</name>
  		<replaceName>QQ</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_qq</name>
  		<replaceName>QQ</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_qq</name>
  		<replaceName>QQ</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 qq() const;
  inline void set_qq(::google::protobuf::uint64 value);

  // optional string LineGroup = 8;
  inline bool has_linegroup() const;
  inline void clear_linegroup();
  static const int kLineGroupFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TGuildModifyReq</name>
  	<Function>
  		<name>linegroup</name>
  		<replaceName>LineGroup</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_linegroup</name>
  		<replaceName>LineGroup</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_linegroup</name>
  		<replaceName>LineGroup</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& linegroup() const;
  inline void set_linegroup(const ::std::string& value);
  inline void set_linegroup(const char* value);
  inline void set_linegroup(const char* value, size_t size);
  inline ::std::string* mutable_linegroup();
  inline ::std::string* release_linegroup();
  inline void set_allocated_linegroup(::std::string* linegroup);

  // @@protoc_insertion_point(class_scope:pb.TGuildModifyReq)
 private:
  inline void set_has_bannername();
  inline void clear_has_bannername();
  inline void set_has_bannerbase();
  inline void clear_has_bannerbase();
  inline void set_has_summary();
  inline void clear_has_summary();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_reviewmode();
  inline void clear_has_reviewmode();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_qq();
  inline void clear_has_qq();
  inline void set_has_linegroup();
  inline void clear_has_linegroup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* bannername_;
  ::std::string* summary_;
  ::google::protobuf::uint32 bannerbase_;
  int reviewmode_;
  ::std::string* notice_;
  ::pb::TGuildLimit* limit_;
  ::google::protobuf::uint64 qq_;
  ::std::string* linegroup_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildModifyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildDismissRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildDismissRsp : public ::google::protobuf::Message {
 public:
  TGuildDismissRsp();
  virtual ~TGuildDismissRsp();

  TGuildDismissRsp(const TGuildDismissRsp& from);

  inline TGuildDismissRsp& operator=(const TGuildDismissRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildDismissRsp& default_instance();

  void Swap(TGuildDismissRsp* other);

  // implements Message ----------------------------------------------

  TGuildDismissRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildDismissRsp& from);
  void MergeFrom(const TGuildDismissRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GuildWarSign = 1;
  inline bool has_guildwarsign() const;
  inline void clear_guildwarsign();
  static const int kGuildWarSignFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildDismissRsp</name>
  	<Function>
  		<name>guildwarsign</name>
  		<replaceName>GuildWarSign</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildwarsign</name>
  		<replaceName>GuildWarSign</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildwarsign</name>
  		<replaceName>GuildWarSign</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 guildwarsign() const;
  inline void set_guildwarsign(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildDismissRsp)
 private:
  inline void set_has_guildwarsign();
  inline void clear_has_guildwarsign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 guildwarsign_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildDismissRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildAppointRpgReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildAppointRpgReq : public ::google::protobuf::Message {
 public:
  TGuildAppointRpgReq();
  virtual ~TGuildAppointRpgReq();

  TGuildAppointRpgReq(const TGuildAppointRpgReq& from);

  inline TGuildAppointRpgReq& operator=(const TGuildAppointRpgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildAppointRpgReq& default_instance();

  void Swap(TGuildAppointRpgReq* other);

  // implements Message ----------------------------------------------

  TGuildAppointRpgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildAppointRpgReq& from);
  void MergeFrom(const TGuildAppointRpgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildAppointRpgReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional .pb.EGuildPost Post = 2;
  inline bool has_post() const;
  inline void clear_post();
  static const int kPostFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildAppointRpgReq</name>
  	<Function>
  		<name>post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EGuildPost post() const;
  inline void set_post(::pb::EGuildPost value);

  // @@protoc_insertion_point(class_scope:pb.TGuildAppointRpgReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_post();
  inline void clear_has_post();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  int post_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildAppointRpgReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildDemiseReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildDemiseReq : public ::google::protobuf::Message {
 public:
  TGuildDemiseReq();
  virtual ~TGuildDemiseReq();

  TGuildDemiseReq(const TGuildDemiseReq& from);

  inline TGuildDemiseReq& operator=(const TGuildDemiseReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildDemiseReq& default_instance();

  void Swap(TGuildDemiseReq* other);

  // implements Message ----------------------------------------------

  TGuildDemiseReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildDemiseReq& from);
  void MergeFrom(const TGuildDemiseReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildDemiseReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildDemiseReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildDemiseReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildRemoveReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildRemoveReq : public ::google::protobuf::Message {
 public:
  TGuildRemoveReq();
  virtual ~TGuildRemoveReq();

  TGuildRemoveReq(const TGuildRemoveReq& from);

  inline TGuildRemoveReq& operator=(const TGuildRemoveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildRemoveReq& default_instance();

  void Swap(TGuildRemoveReq* other);

  // implements Message ----------------------------------------------

  TGuildRemoveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildRemoveReq& from);
  void MergeFrom(const TGuildRemoveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildRemoveReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildRemoveReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildRemoveReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildDonateReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildDonateReq : public ::google::protobuf::Message {
 public:
  TGuildDonateReq();
  virtual ~TGuildDonateReq();

  TGuildDonateReq(const TGuildDonateReq& from);

  inline TGuildDonateReq& operator=(const TGuildDonateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildDonateReq& default_instance();

  void Swap(TGuildDonateReq* other);

  // implements Message ----------------------------------------------

  TGuildDonateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildDonateReq& from);
  void MergeFrom(const TGuildDonateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildDonateReq</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 Index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildDonateReq</name>
  	<Function>
  		<name>index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildDonateReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildDonateReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildLevelRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildLevelRankInfo : public ::google::protobuf::Message {
 public:
  TGuildLevelRankInfo();
  virtual ~TGuildLevelRankInfo();

  TGuildLevelRankInfo(const TGuildLevelRankInfo& from);

  inline TGuildLevelRankInfo& operator=(const TGuildLevelRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildLevelRankInfo& default_instance();

  void Swap(TGuildLevelRankInfo* other);

  // implements Message ----------------------------------------------

  TGuildLevelRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildLevelRankInfo& from);
  void MergeFrom(const TGuildLevelRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildLevelRankInfo</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string GuildName = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildLevelRankInfo</name>
  	<Function>
  		<name>guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 GuildLevel = 3;
  inline bool has_guildlevel() const;
  inline void clear_guildlevel();
  static const int kGuildLevelFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildLevelRankInfo</name>
  	<Function>
  		<name>guildlevel</name>
  		<replaceName>GuildLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildlevel</name>
  		<replaceName>GuildLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildlevel</name>
  		<replaceName>GuildLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 guildlevel() const;
  inline void set_guildlevel(::google::protobuf::uint32 value);

  // optional string BannerName = 4;
  inline bool has_bannername() const;
  inline void clear_bannername();
  static const int kBannerNameFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildLevelRankInfo</name>
  	<Function>
  		<name>bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bannername() const;
  inline void set_bannername(const ::std::string& value);
  inline void set_bannername(const char* value);
  inline void set_bannername(const char* value, size_t size);
  inline ::std::string* mutable_bannername();
  inline ::std::string* release_bannername();
  inline void set_allocated_bannername(::std::string* bannername);

  // optional uint32 BannerBase = 5;
  inline bool has_bannerbase() const;
  inline void clear_bannerbase();
  static const int kBannerBaseFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildLevelRankInfo</name>
  	<Function>
  		<name>bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerbase() const;
  inline void set_bannerbase(::google::protobuf::uint32 value);

  // optional uint32 Htid = 6;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildLevelRankInfo</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildLevelRankInfo)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_guildlevel();
  inline void clear_has_guildlevel();
  inline void set_has_bannername();
  inline void clear_has_bannername();
  inline void set_has_bannerbase();
  inline void clear_has_bannerbase();
  inline void set_has_htid();
  inline void clear_has_htid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  ::std::string* bannername_;
  ::google::protobuf::uint32 guildlevel_;
  ::google::protobuf::uint32 bannerbase_;
  ::google::protobuf::uint32 htid_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildLevelRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetLevelRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetLevelRankReq : public ::google::protobuf::Message {
 public:
  TGuildGetLevelRankReq();
  virtual ~TGuildGetLevelRankReq();

  TGuildGetLevelRankReq(const TGuildGetLevelRankReq& from);

  inline TGuildGetLevelRankReq& operator=(const TGuildGetLevelRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetLevelRankReq& default_instance();

  void Swap(TGuildGetLevelRankReq* other);

  // implements Message ----------------------------------------------

  TGuildGetLevelRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetLevelRankReq& from);
  void MergeFrom(const TGuildGetLevelRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetLevelRankReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetLevelRankReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildGetLevelRankReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetLevelRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetLevelRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetLevelRankRsp : public ::google::protobuf::Message {
 public:
  TGuildGetLevelRankRsp();
  virtual ~TGuildGetLevelRankRsp();

  TGuildGetLevelRankRsp(const TGuildGetLevelRankRsp& from);

  inline TGuildGetLevelRankRsp& operator=(const TGuildGetLevelRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetLevelRankRsp& default_instance();

  void Swap(TGuildGetLevelRankRsp* other);

  // implements Message ----------------------------------------------

  TGuildGetLevelRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetLevelRankRsp& from);
  void MergeFrom(const TGuildGetLevelRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildLevelRankInfo RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetLevelRankRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildLevelRankInfo& rankarr(int index) const;
  inline ::pb::TGuildLevelRankInfo* mutable_rankarr(int index);
  inline ::pb::TGuildLevelRankInfo* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildLevelRankInfo >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildLevelRankInfo >*
      mutable_rankarr();

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetLevelRankRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildGetLevelRankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildLevelRankInfo > rankarr_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetLevelRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildFightForceRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildFightForceRankInfo : public ::google::protobuf::Message {
 public:
  TGuildFightForceRankInfo();
  virtual ~TGuildFightForceRankInfo();

  TGuildFightForceRankInfo(const TGuildFightForceRankInfo& from);

  inline TGuildFightForceRankInfo& operator=(const TGuildFightForceRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildFightForceRankInfo& default_instance();

  void Swap(TGuildFightForceRankInfo* other);

  // implements Message ----------------------------------------------

  TGuildFightForceRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildFightForceRankInfo& from);
  void MergeFrom(const TGuildFightForceRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildFightForceRankInfo</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string GuildName = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildFightForceRankInfo</name>
  	<Function>
  		<name>guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint64 FightForce = 3;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildFightForceRankInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional string BannerName = 4;
  inline bool has_bannername() const;
  inline void clear_bannername();
  static const int kBannerNameFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildFightForceRankInfo</name>
  	<Function>
  		<name>bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bannername() const;
  inline void set_bannername(const ::std::string& value);
  inline void set_bannername(const char* value);
  inline void set_bannername(const char* value, size_t size);
  inline ::std::string* mutable_bannername();
  inline ::std::string* release_bannername();
  inline void set_allocated_bannername(::std::string* bannername);

  // optional uint32 BannerBase = 5;
  inline bool has_bannerbase() const;
  inline void clear_bannerbase();
  static const int kBannerBaseFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildFightForceRankInfo</name>
  	<Function>
  		<name>bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerbase() const;
  inline void set_bannerbase(::google::protobuf::uint32 value);

  // optional uint32 Htid = 6;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildFightForceRankInfo</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildFightForceRankInfo)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_bannername();
  inline void clear_has_bannername();
  inline void set_has_bannerbase();
  inline void clear_has_bannerbase();
  inline void set_has_htid();
  inline void clear_has_htid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  ::google::protobuf::uint64 fightforce_;
  ::std::string* bannername_;
  ::google::protobuf::uint32 bannerbase_;
  ::google::protobuf::uint32 htid_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildFightForceRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetFightForceRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetFightForceRankReq : public ::google::protobuf::Message {
 public:
  TGuildGetFightForceRankReq();
  virtual ~TGuildGetFightForceRankReq();

  TGuildGetFightForceRankReq(const TGuildGetFightForceRankReq& from);

  inline TGuildGetFightForceRankReq& operator=(const TGuildGetFightForceRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetFightForceRankReq& default_instance();

  void Swap(TGuildGetFightForceRankReq* other);

  // implements Message ----------------------------------------------

  TGuildGetFightForceRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetFightForceRankReq& from);
  void MergeFrom(const TGuildGetFightForceRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetFightForceRankReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetFightForceRankReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildGetFightForceRankReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetFightForceRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetFightForceRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetFightForceRankRsp : public ::google::protobuf::Message {
 public:
  TGuildGetFightForceRankRsp();
  virtual ~TGuildGetFightForceRankRsp();

  TGuildGetFightForceRankRsp(const TGuildGetFightForceRankRsp& from);

  inline TGuildGetFightForceRankRsp& operator=(const TGuildGetFightForceRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetFightForceRankRsp& default_instance();

  void Swap(TGuildGetFightForceRankRsp* other);

  // implements Message ----------------------------------------------

  TGuildGetFightForceRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetFightForceRankRsp& from);
  void MergeFrom(const TGuildGetFightForceRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildFightForceRankInfo RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetFightForceRankRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildFightForceRankInfo& rankarr(int index) const;
  inline ::pb::TGuildFightForceRankInfo* mutable_rankarr(int index);
  inline ::pb::TGuildFightForceRankInfo* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildFightForceRankInfo >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildFightForceRankInfo >*
      mutable_rankarr();

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetFightForceRankRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildGetFightForceRankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildFightForceRankInfo > rankarr_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetFightForceRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildTreasMapFixReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildTreasMapFixReq : public ::google::protobuf::Message {
 public:
  TGuildTreasMapFixReq();
  virtual ~TGuildTreasMapFixReq();

  TGuildTreasMapFixReq(const TGuildTreasMapFixReq& from);

  inline TGuildTreasMapFixReq& operator=(const TGuildTreasMapFixReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildTreasMapFixReq& default_instance();

  void Swap(TGuildTreasMapFixReq* other);

  // implements Message ----------------------------------------------

  TGuildTreasMapFixReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildTreasMapFixReq& from);
  void MergeFrom(const TGuildTreasMapFixReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FixNum = 1;
  inline bool has_fixnum() const;
  inline void clear_fixnum();
  static const int kFixNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildTreasMapFixReq</name>
  	<Function>
  		<name>fixnum</name>
  		<replaceName>FixNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fixnum</name>
  		<replaceName>FixNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fixnum</name>
  		<replaceName>FixNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fixnum() const;
  inline void set_fixnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildTreasMapFixReq)
 private:
  inline void set_has_fixnum();
  inline void clear_has_fixnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 fixnum_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildTreasMapFixReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildTreasMapFixRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildTreasMapFixRsp : public ::google::protobuf::Message {
 public:
  TGuildTreasMapFixRsp();
  virtual ~TGuildTreasMapFixRsp();

  TGuildTreasMapFixRsp(const TGuildTreasMapFixRsp& from);

  inline TGuildTreasMapFixRsp& operator=(const TGuildTreasMapFixRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildTreasMapFixRsp& default_instance();

  void Swap(TGuildTreasMapFixRsp* other);

  // implements Message ----------------------------------------------

  TGuildTreasMapFixRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildTreasMapFixRsp& from);
  void MergeFrom(const TGuildTreasMapFixRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildTreasMapFix fixInfo = 1;
  inline bool has_fixinfo() const;
  inline void clear_fixinfo();
  static const int kFixInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildTreasMapFixRsp</name>
  	<Function>
  		<name>fixinfo</name>
  		<replaceName>fixInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fixinfo</name>
  		<replaceName>fixInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_fixinfo</name>
  		<replaceName>fixInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fixinfo</name>
  		<replaceName>fixInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildTreasMapFix& fixinfo() const;
  inline ::pb::TGuildTreasMapFix* mutable_fixinfo();
  inline ::pb::TGuildTreasMapFix* release_fixinfo();
  inline void set_allocated_fixinfo(::pb::TGuildTreasMapFix* fixinfo);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildTreasMapFixRsp</name>
  	<Function>
  		<name>ret</name>
  		<replaceName>ret</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ret</name>
  		<replaceName>ret</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ret</name>
  		<replaceName>ret</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildTreasMapFixRsp)
 private:
  inline void set_has_fixinfo();
  inline void clear_has_fixinfo();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildTreasMapFix* fixinfo_;
  ::google::protobuf::uint32 ret_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildTreasMapFixRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildTreasMapFixRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildTreasMapFixRewardRsp : public ::google::protobuf::Message {
 public:
  TGuildTreasMapFixRewardRsp();
  virtual ~TGuildTreasMapFixRewardRsp();

  TGuildTreasMapFixRewardRsp(const TGuildTreasMapFixRewardRsp& from);

  inline TGuildTreasMapFixRewardRsp& operator=(const TGuildTreasMapFixRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildTreasMapFixRewardRsp& default_instance();

  void Swap(TGuildTreasMapFixRewardRsp* other);

  // implements Message ----------------------------------------------

  TGuildTreasMapFixRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildTreasMapFixRewardRsp& from);
  void MergeFrom(const TGuildTreasMapFixRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildTreasMapFix fixInfo = 1;
  inline bool has_fixinfo() const;
  inline void clear_fixinfo();
  static const int kFixInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildTreasMapFixRewardRsp</name>
  	<Function>
  		<name>fixinfo</name>
  		<replaceName>fixInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fixinfo</name>
  		<replaceName>fixInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_fixinfo</name>
  		<replaceName>fixInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fixinfo</name>
  		<replaceName>fixInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildTreasMapFix& fixinfo() const;
  inline ::pb::TGuildTreasMapFix* mutable_fixinfo();
  inline ::pb::TGuildTreasMapFix* release_fixinfo();
  inline void set_allocated_fixinfo(::pb::TGuildTreasMapFix* fixinfo);

  // repeated .pb.TCommonReward RewardArray = 2;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildTreasMapFixRewardRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TGuildTreasMapFixRewardRsp)
 private:
  inline void set_has_fixinfo();
  inline void clear_has_fixinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildTreasMapFix* fixinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildTreasMapFixRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgGuildSyncMember</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgGuildSyncMember : public ::google::protobuf::Message {
 public:
  TSlgGuildSyncMember();
  virtual ~TSlgGuildSyncMember();

  TSlgGuildSyncMember(const TSlgGuildSyncMember& from);

  inline TSlgGuildSyncMember& operator=(const TSlgGuildSyncMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgGuildSyncMember& default_instance();

  void Swap(TSlgGuildSyncMember* other);

  // implements Message ----------------------------------------------

  TSlgGuildSyncMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgGuildSyncMember& from);
  void MergeFrom(const TSlgGuildSyncMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgGuildSyncMember</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional .pb.EGuildPost Post = 2;
  inline bool has_post() const;
  inline void clear_post();
  static const int kPostFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgGuildSyncMember</name>
  	<Function>
  		<name>post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EGuildPost post() const;
  inline void set_post(::pb::EGuildPost value);

  // @@protoc_insertion_point(class_scope:pb.TSlgGuildSyncMember)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_post();
  inline void clear_has_post();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  int post_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TSlgGuildSyncMember* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetSyncInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetSyncInfoReq : public ::google::protobuf::Message {
 public:
  TGuildGetSyncInfoReq();
  virtual ~TGuildGetSyncInfoReq();

  TGuildGetSyncInfoReq(const TGuildGetSyncInfoReq& from);

  inline TGuildGetSyncInfoReq& operator=(const TGuildGetSyncInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetSyncInfoReq& default_instance();

  void Swap(TGuildGetSyncInfoReq* other);

  // implements Message ----------------------------------------------

  TGuildGetSyncInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetSyncInfoReq& from);
  void MergeFrom(const TGuildGetSyncInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetSyncInfoReq</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildGetSyncInfoReq)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetSyncInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetSyncInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetSyncInfoRsp : public ::google::protobuf::Message {
 public:
  TGuildGetSyncInfoRsp();
  virtual ~TGuildGetSyncInfoRsp();

  TGuildGetSyncInfoRsp(const TGuildGetSyncInfoRsp& from);

  inline TGuildGetSyncInfoRsp& operator=(const TGuildGetSyncInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetSyncInfoRsp& default_instance();

  void Swap(TGuildGetSyncInfoRsp* other);

  // implements Message ----------------------------------------------

  TGuildGetSyncInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetSyncInfoRsp& from);
  void MergeFrom(const TGuildGetSyncInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TSlgGuildSyncMember MemberArr = 1;
  inline int memberarr_size() const;
  inline void clear_memberarr();
  static const int kMemberArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetSyncInfoRsp</name>
  	<Function>
  		<name>memberarr</name>
  		<replaceName>MemberArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_memberarr</name>
  		<replaceName>MemberArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_memberarr</name>
  		<replaceName>MemberArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_memberarr</name>
  		<replaceName>MemberArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>memberarr_size</name>
  		<replaceName>MemberArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgGuildSyncMember& memberarr(int index) const;
  inline ::pb::TSlgGuildSyncMember* mutable_memberarr(int index);
  inline ::pb::TSlgGuildSyncMember* add_memberarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgGuildSyncMember >&
      memberarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgGuildSyncMember >*
      mutable_memberarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildGetSyncInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSlgGuildSyncMember > memberarr_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetSyncInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildChangeGnameReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Guild.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildChangeGnameReq : public ::google::protobuf::Message {
 public:
  TGuildChangeGnameReq();
  virtual ~TGuildChangeGnameReq();

  TGuildChangeGnameReq(const TGuildChangeGnameReq& from);

  inline TGuildChangeGnameReq& operator=(const TGuildChangeGnameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildChangeGnameReq& default_instance();

  void Swap(TGuildChangeGnameReq* other);

  // implements Message ----------------------------------------------

  TGuildChangeGnameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildChangeGnameReq& from);
  void MergeFrom(const TGuildChangeGnameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Gname = 1;
  inline bool has_gname() const;
  inline void clear_gname();
  static const int kGnameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildChangeGnameReq</name>
  	<Function>
  		<name>gname</name>
  		<replaceName>Gname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gname</name>
  		<replaceName>Gname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gname</name>
  		<replaceName>Gname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& gname() const;
  inline void set_gname(const ::std::string& value);
  inline void set_gname(const char* value);
  inline void set_gname(const char* value, size_t size);
  inline ::std::string* mutable_gname();
  inline ::std::string* release_gname();
  inline void set_allocated_gname(::std::string* gname);

  // @@protoc_insertion_point(class_scope:pb.TGuildChangeGnameReq)
 private:
  inline void set_has_gname();
  inline void clear_has_gname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gname_;
  friend void  protobuf_AddDesc_net_2fGuild_2eproto();
  friend void protobuf_AssignDesc_net_2fGuild_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuild_2eproto();

  void InitAsDefaultInstance();
  static TGuildChangeGnameReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TGuildLimit

// optional uint64 FightForce = 1;
inline bool TGuildLimit::has_fightforce() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildLimit::set_has_fightforce() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildLimit::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildLimit::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TGuildLimit::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TGuildLimit.FightForce)
  return fightforce_;
}
inline void TGuildLimit::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildLimit.FightForce)
}

// -------------------------------------------------------------------

// TGuildDonate

// optional uint32 Type = 1;
inline bool TGuildDonate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildDonate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildDonate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildDonate::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 TGuildDonate::type() const {
  // @@protoc_insertion_point(field_get:pb.TGuildDonate.Type)
  return type_;
}
inline void TGuildDonate::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildDonate.Type)
}

// optional uint32 Exp = 2;
inline bool TGuildDonate::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildDonate::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildDonate::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildDonate::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 TGuildDonate::exp() const {
  // @@protoc_insertion_point(field_get:pb.TGuildDonate.Exp)
  return exp_;
}
inline void TGuildDonate::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildDonate.Exp)
}

// optional uint32 Level = 3;
inline bool TGuildDonate::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildDonate::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildDonate::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildDonate::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TGuildDonate::level() const {
  // @@protoc_insertion_point(field_get:pb.TGuildDonate.Level)
  return level_;
}
inline void TGuildDonate::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildDonate.Level)
}

// -------------------------------------------------------------------

// TGuildTip

// optional uint64 Time = 1;
inline bool TGuildTip::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildTip::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildTip::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildTip::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 TGuildTip::time() const {
  // @@protoc_insertion_point(field_get:pb.TGuildTip.Time)
  return time_;
}
inline void TGuildTip::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildTip.Time)
}

// optional .pb.ETipType Type = 2;
inline bool TGuildTip::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildTip::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildTip::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildTip::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::pb::ETipType TGuildTip::type() const {
  // @@protoc_insertion_point(field_get:pb.TGuildTip.Type)
  return static_cast< ::pb::ETipType >(type_);
}
inline void TGuildTip::set_type(::pb::ETipType value) {
  assert(::pb::ETipType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildTip.Type)
}

// repeated string ParamArr = 3;
inline int TGuildTip::paramarr_size() const {
  return paramarr_.size();
}
inline void TGuildTip::clear_paramarr() {
  paramarr_.Clear();
}
inline const ::std::string& TGuildTip::paramarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildTip.ParamArr)
  return paramarr_.Get(index);
}
inline ::std::string* TGuildTip::mutable_paramarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildTip.ParamArr)
  return paramarr_.Mutable(index);
}
inline void TGuildTip::set_paramarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TGuildTip.ParamArr)
  paramarr_.Mutable(index)->assign(value);
}
inline void TGuildTip::set_paramarr(int index, const char* value) {
  paramarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildTip.ParamArr)
}
inline void TGuildTip::set_paramarr(int index, const char* value, size_t size) {
  paramarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildTip.ParamArr)
}
inline ::std::string* TGuildTip::add_paramarr() {
  return paramarr_.Add();
}
inline void TGuildTip::add_paramarr(const ::std::string& value) {
  paramarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TGuildTip.ParamArr)
}
inline void TGuildTip::add_paramarr(const char* value) {
  paramarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TGuildTip.ParamArr)
}
inline void TGuildTip::add_paramarr(const char* value, size_t size) {
  paramarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TGuildTip.ParamArr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TGuildTip::paramarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildTip.ParamArr)
  return paramarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TGuildTip::mutable_paramarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildTip.ParamArr)
  return &paramarr_;
}

// -------------------------------------------------------------------

// TGuildApplyInfo

// optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
inline bool TGuildApplyInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildApplyInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildApplyInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildApplyInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfoWithStatus::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfoWithStatus& TGuildApplyInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildApplyInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfoWithStatus* TGuildApplyInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfoWithStatus;
  // @@protoc_insertion_point(field_mutable:pb.TGuildApplyInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfoWithStatus* TGuildApplyInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfoWithStatus* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TGuildApplyInfo::set_allocated_userinfo(::pb::TUserSimpleInfoWithStatus* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildApplyInfo.UserInfo)
}

// optional uint64 ApplyTime = 2;
inline bool TGuildApplyInfo::has_applytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildApplyInfo::set_has_applytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildApplyInfo::clear_has_applytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildApplyInfo::clear_applytime() {
  applytime_ = GOOGLE_ULONGLONG(0);
  clear_has_applytime();
}
inline ::google::protobuf::uint64 TGuildApplyInfo::applytime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildApplyInfo.ApplyTime)
  return applytime_;
}
inline void TGuildApplyInfo::set_applytime(::google::protobuf::uint64 value) {
  set_has_applytime();
  applytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildApplyInfo.ApplyTime)
}

// -------------------------------------------------------------------

// TGuildImpeachInfo

// optional uint64 Uid = 1;
inline bool TGuildImpeachInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildImpeachInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildImpeachInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildImpeachInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TGuildImpeachInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildImpeachInfo.Uid)
  return uid_;
}
inline void TGuildImpeachInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildImpeachInfo.Uid)
}

// optional string Uname = 2;
inline bool TGuildImpeachInfo::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildImpeachInfo::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildImpeachInfo::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildImpeachInfo::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TGuildImpeachInfo::uname() const {
  // @@protoc_insertion_point(field_get:pb.TGuildImpeachInfo.Uname)
  return *uname_;
}
inline void TGuildImpeachInfo::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildImpeachInfo.Uname)
}
inline void TGuildImpeachInfo::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildImpeachInfo.Uname)
}
inline void TGuildImpeachInfo::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildImpeachInfo.Uname)
}
inline ::std::string* TGuildImpeachInfo::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildImpeachInfo.Uname)
  return uname_;
}
inline ::std::string* TGuildImpeachInfo::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildImpeachInfo::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildImpeachInfo.Uname)
}

// optional uint64 Time = 3;
inline bool TGuildImpeachInfo::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildImpeachInfo::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildImpeachInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildImpeachInfo::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 TGuildImpeachInfo::time() const {
  // @@protoc_insertion_point(field_get:pb.TGuildImpeachInfo.Time)
  return time_;
}
inline void TGuildImpeachInfo::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildImpeachInfo.Time)
}

// -------------------------------------------------------------------

// TGuildTreasMapFix

// optional uint64 ResetTime = 1;
inline bool TGuildTreasMapFix::has_resettime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildTreasMapFix::set_has_resettime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildTreasMapFix::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildTreasMapFix::clear_resettime() {
  resettime_ = GOOGLE_ULONGLONG(0);
  clear_has_resettime();
}
inline ::google::protobuf::uint64 TGuildTreasMapFix::resettime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildTreasMapFix.ResetTime)
  return resettime_;
}
inline void TGuildTreasMapFix::set_resettime(::google::protobuf::uint64 value) {
  set_has_resettime();
  resettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildTreasMapFix.ResetTime)
}

// optional uint32 FixProgress = 2;
inline bool TGuildTreasMapFix::has_fixprogress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildTreasMapFix::set_has_fixprogress() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildTreasMapFix::clear_has_fixprogress() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildTreasMapFix::clear_fixprogress() {
  fixprogress_ = 0u;
  clear_has_fixprogress();
}
inline ::google::protobuf::uint32 TGuildTreasMapFix::fixprogress() const {
  // @@protoc_insertion_point(field_get:pb.TGuildTreasMapFix.FixProgress)
  return fixprogress_;
}
inline void TGuildTreasMapFix::set_fixprogress(::google::protobuf::uint32 value) {
  set_has_fixprogress();
  fixprogress_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildTreasMapFix.FixProgress)
}

// optional uint32 DayFixProgress = 3;
inline bool TGuildTreasMapFix::has_dayfixprogress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildTreasMapFix::set_has_dayfixprogress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildTreasMapFix::clear_has_dayfixprogress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildTreasMapFix::clear_dayfixprogress() {
  dayfixprogress_ = 0u;
  clear_has_dayfixprogress();
}
inline ::google::protobuf::uint32 TGuildTreasMapFix::dayfixprogress() const {
  // @@protoc_insertion_point(field_get:pb.TGuildTreasMapFix.DayFixProgress)
  return dayfixprogress_;
}
inline void TGuildTreasMapFix::set_dayfixprogress(::google::protobuf::uint32 value) {
  set_has_dayfixprogress();
  dayfixprogress_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildTreasMapFix.DayFixProgress)
}

// repeated uint64 HistoryResetTimeArr = 4;
inline int TGuildTreasMapFix::historyresettimearr_size() const {
  return historyresettimearr_.size();
}
inline void TGuildTreasMapFix::clear_historyresettimearr() {
  historyresettimearr_.Clear();
}
inline ::google::protobuf::uint64 TGuildTreasMapFix::historyresettimearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildTreasMapFix.HistoryResetTimeArr)
  return historyresettimearr_.Get(index);
}
inline void TGuildTreasMapFix::set_historyresettimearr(int index, ::google::protobuf::uint64 value) {
  historyresettimearr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGuildTreasMapFix.HistoryResetTimeArr)
}
inline void TGuildTreasMapFix::add_historyresettimearr(::google::protobuf::uint64 value) {
  historyresettimearr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGuildTreasMapFix.HistoryResetTimeArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TGuildTreasMapFix::historyresettimearr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildTreasMapFix.HistoryResetTimeArr)
  return historyresettimearr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TGuildTreasMapFix::mutable_historyresettimearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildTreasMapFix.HistoryResetTimeArr)
  return &historyresettimearr_;
}

// -------------------------------------------------------------------

// TGuildMemberInfo

// optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
inline bool TGuildMemberInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildMemberInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildMemberInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildMemberInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfoWithStatus::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfoWithStatus& TGuildMemberInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildMemberInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfoWithStatus* TGuildMemberInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfoWithStatus;
  // @@protoc_insertion_point(field_mutable:pb.TGuildMemberInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfoWithStatus* TGuildMemberInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfoWithStatus* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TGuildMemberInfo::set_allocated_userinfo(::pb::TUserSimpleInfoWithStatus* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildMemberInfo.UserInfo)
}

// optional .pb.EGuildPost RpgPost = 2;
inline bool TGuildMemberInfo::has_rpgpost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildMemberInfo::set_has_rpgpost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildMemberInfo::clear_has_rpgpost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildMemberInfo::clear_rpgpost() {
  rpgpost_ = 0;
  clear_has_rpgpost();
}
inline ::pb::EGuildPost TGuildMemberInfo::rpgpost() const {
  // @@protoc_insertion_point(field_get:pb.TGuildMemberInfo.RpgPost)
  return static_cast< ::pb::EGuildPost >(rpgpost_);
}
inline void TGuildMemberInfo::set_rpgpost(::pb::EGuildPost value) {
  assert(::pb::EGuildPost_IsValid(value));
  set_has_rpgpost();
  rpgpost_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildMemberInfo.RpgPost)
}

// optional uint32 Donate = 3;
inline bool TGuildMemberInfo::has_donate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildMemberInfo::set_has_donate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildMemberInfo::clear_has_donate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildMemberInfo::clear_donate() {
  donate_ = 0u;
  clear_has_donate();
}
inline ::google::protobuf::uint32 TGuildMemberInfo::donate() const {
  // @@protoc_insertion_point(field_get:pb.TGuildMemberInfo.Donate)
  return donate_;
}
inline void TGuildMemberInfo::set_donate(::google::protobuf::uint32 value) {
  set_has_donate();
  donate_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildMemberInfo.Donate)
}

// optional uint32 WeekDonate = 4;
inline bool TGuildMemberInfo::has_weekdonate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildMemberInfo::set_has_weekdonate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildMemberInfo::clear_has_weekdonate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildMemberInfo::clear_weekdonate() {
  weekdonate_ = 0u;
  clear_has_weekdonate();
}
inline ::google::protobuf::uint32 TGuildMemberInfo::weekdonate() const {
  // @@protoc_insertion_point(field_get:pb.TGuildMemberInfo.WeekDonate)
  return weekdonate_;
}
inline void TGuildMemberInfo::set_weekdonate(::google::protobuf::uint32 value) {
  set_has_weekdonate();
  weekdonate_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildMemberInfo.WeekDonate)
}

// -------------------------------------------------------------------

// TBaseGuildInfo

// optional uint64 GuildId = 1;
inline bool TBaseGuildInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBaseGuildInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBaseGuildInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBaseGuildInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TBaseGuildInfo::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.GuildId)
  return guildid_;
}
inline void TBaseGuildInfo::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.GuildId)
}

// optional string Name = 2;
inline bool TBaseGuildInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBaseGuildInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBaseGuildInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBaseGuildInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TBaseGuildInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.Name)
  return *name_;
}
inline void TBaseGuildInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.Name)
}
inline void TBaseGuildInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBaseGuildInfo.Name)
}
inline void TBaseGuildInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBaseGuildInfo.Name)
}
inline ::std::string* TBaseGuildInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBaseGuildInfo.Name)
  return name_;
}
inline ::std::string* TBaseGuildInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBaseGuildInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBaseGuildInfo.Name)
}

// optional string BannerName = 3;
inline bool TBaseGuildInfo::has_bannername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBaseGuildInfo::set_has_bannername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBaseGuildInfo::clear_has_bannername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBaseGuildInfo::clear_bannername() {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_->clear();
  }
  clear_has_bannername();
}
inline const ::std::string& TBaseGuildInfo::bannername() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.BannerName)
  return *bannername_;
}
inline void TBaseGuildInfo::set_bannername(const ::std::string& value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.BannerName)
}
inline void TBaseGuildInfo::set_bannername(const char* value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBaseGuildInfo.BannerName)
}
inline void TBaseGuildInfo::set_bannername(const char* value, size_t size) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBaseGuildInfo.BannerName)
}
inline ::std::string* TBaseGuildInfo::mutable_bannername() {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBaseGuildInfo.BannerName)
  return bannername_;
}
inline ::std::string* TBaseGuildInfo::release_bannername() {
  clear_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bannername_;
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBaseGuildInfo::set_allocated_bannername(::std::string* bannername) {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (bannername) {
    set_has_bannername();
    bannername_ = bannername;
  } else {
    clear_has_bannername();
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBaseGuildInfo.BannerName)
}

// optional uint32 BannerBase = 4;
inline bool TBaseGuildInfo::has_bannerbase() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBaseGuildInfo::set_has_bannerbase() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBaseGuildInfo::clear_has_bannerbase() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBaseGuildInfo::clear_bannerbase() {
  bannerbase_ = 0u;
  clear_has_bannerbase();
}
inline ::google::protobuf::uint32 TBaseGuildInfo::bannerbase() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.BannerBase)
  return bannerbase_;
}
inline void TBaseGuildInfo::set_bannerbase(::google::protobuf::uint32 value) {
  set_has_bannerbase();
  bannerbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.BannerBase)
}

// optional uint32 Level = 5;
inline bool TBaseGuildInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TBaseGuildInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TBaseGuildInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TBaseGuildInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TBaseGuildInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.Level)
  return level_;
}
inline void TBaseGuildInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.Level)
}

// optional uint32 Exp = 6;
inline bool TBaseGuildInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TBaseGuildInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TBaseGuildInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TBaseGuildInfo::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 TBaseGuildInfo::exp() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.Exp)
  return exp_;
}
inline void TBaseGuildInfo::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.Exp)
}

// optional uint32 MemberNum = 7;
inline bool TBaseGuildInfo::has_membernum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TBaseGuildInfo::set_has_membernum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TBaseGuildInfo::clear_has_membernum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TBaseGuildInfo::clear_membernum() {
  membernum_ = 0u;
  clear_has_membernum();
}
inline ::google::protobuf::uint32 TBaseGuildInfo::membernum() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.MemberNum)
  return membernum_;
}
inline void TBaseGuildInfo::set_membernum(::google::protobuf::uint32 value) {
  set_has_membernum();
  membernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.MemberNum)
}

// optional uint64 FightForce = 8;
inline bool TBaseGuildInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TBaseGuildInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TBaseGuildInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TBaseGuildInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TBaseGuildInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.FightForce)
  return fightforce_;
}
inline void TBaseGuildInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.FightForce)
}

// optional string Summary = 9;
inline bool TBaseGuildInfo::has_summary() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TBaseGuildInfo::set_has_summary() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TBaseGuildInfo::clear_has_summary() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TBaseGuildInfo::clear_summary() {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_->clear();
  }
  clear_has_summary();
}
inline const ::std::string& TBaseGuildInfo::summary() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.Summary)
  return *summary_;
}
inline void TBaseGuildInfo::set_summary(const ::std::string& value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.Summary)
}
inline void TBaseGuildInfo::set_summary(const char* value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBaseGuildInfo.Summary)
}
inline void TBaseGuildInfo::set_summary(const char* value, size_t size) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBaseGuildInfo.Summary)
}
inline ::std::string* TBaseGuildInfo::mutable_summary() {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBaseGuildInfo.Summary)
  return summary_;
}
inline ::std::string* TBaseGuildInfo::release_summary() {
  clear_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = summary_;
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBaseGuildInfo::set_allocated_summary(::std::string* summary) {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (summary) {
    set_has_summary();
    summary_ = summary;
  } else {
    clear_has_summary();
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBaseGuildInfo.Summary)
}

// optional .pb.EReviewMode ReviewMode = 10;
inline bool TBaseGuildInfo::has_reviewmode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TBaseGuildInfo::set_has_reviewmode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TBaseGuildInfo::clear_has_reviewmode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TBaseGuildInfo::clear_reviewmode() {
  reviewmode_ = 0;
  clear_has_reviewmode();
}
inline ::pb::EReviewMode TBaseGuildInfo::reviewmode() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.ReviewMode)
  return static_cast< ::pb::EReviewMode >(reviewmode_);
}
inline void TBaseGuildInfo::set_reviewmode(::pb::EReviewMode value) {
  assert(::pb::EReviewMode_IsValid(value));
  set_has_reviewmode();
  reviewmode_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.ReviewMode)
}

// optional .pb.TGuildLimit Limit = 11;
inline bool TBaseGuildInfo::has_limit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TBaseGuildInfo::set_has_limit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TBaseGuildInfo::clear_has_limit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TBaseGuildInfo::clear_limit() {
  if (limit_ != NULL) limit_->::pb::TGuildLimit::Clear();
  clear_has_limit();
}
inline const ::pb::TGuildLimit& TBaseGuildInfo::limit() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.Limit)
  return limit_ != NULL ? *limit_ : *default_instance_->limit_;
}
inline ::pb::TGuildLimit* TBaseGuildInfo::mutable_limit() {
  set_has_limit();
  if (limit_ == NULL) limit_ = new ::pb::TGuildLimit;
  // @@protoc_insertion_point(field_mutable:pb.TBaseGuildInfo.Limit)
  return limit_;
}
inline ::pb::TGuildLimit* TBaseGuildInfo::release_limit() {
  clear_has_limit();
  ::pb::TGuildLimit* temp = limit_;
  limit_ = NULL;
  return temp;
}
inline void TBaseGuildInfo::set_allocated_limit(::pb::TGuildLimit* limit) {
  delete limit_;
  limit_ = limit;
  if (limit) {
    set_has_limit();
  } else {
    clear_has_limit();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBaseGuildInfo.Limit)
}

// optional uint64 LeaderId = 12;
inline bool TBaseGuildInfo::has_leaderid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TBaseGuildInfo::set_has_leaderid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TBaseGuildInfo::clear_has_leaderid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TBaseGuildInfo::clear_leaderid() {
  leaderid_ = GOOGLE_ULONGLONG(0);
  clear_has_leaderid();
}
inline ::google::protobuf::uint64 TBaseGuildInfo::leaderid() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.LeaderId)
  return leaderid_;
}
inline void TBaseGuildInfo::set_leaderid(::google::protobuf::uint64 value) {
  set_has_leaderid();
  leaderid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.LeaderId)
}

// optional string LeaderName = 13;
inline bool TBaseGuildInfo::has_leadername() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TBaseGuildInfo::set_has_leadername() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TBaseGuildInfo::clear_has_leadername() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TBaseGuildInfo::clear_leadername() {
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_->clear();
  }
  clear_has_leadername();
}
inline const ::std::string& TBaseGuildInfo::leadername() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.LeaderName)
  return *leadername_;
}
inline void TBaseGuildInfo::set_leadername(const ::std::string& value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.LeaderName)
}
inline void TBaseGuildInfo::set_leadername(const char* value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBaseGuildInfo.LeaderName)
}
inline void TBaseGuildInfo::set_leadername(const char* value, size_t size) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBaseGuildInfo.LeaderName)
}
inline ::std::string* TBaseGuildInfo::mutable_leadername() {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBaseGuildInfo.LeaderName)
  return leadername_;
}
inline ::std::string* TBaseGuildInfo::release_leadername() {
  clear_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leadername_;
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBaseGuildInfo::set_allocated_leadername(::std::string* leadername) {
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leadername_;
  }
  if (leadername) {
    set_has_leadername();
    leadername_ = leadername;
  } else {
    clear_has_leadername();
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBaseGuildInfo.LeaderName)
}

// optional uint64 QQ = 14;
inline bool TBaseGuildInfo::has_qq() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TBaseGuildInfo::set_has_qq() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TBaseGuildInfo::clear_has_qq() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TBaseGuildInfo::clear_qq() {
  qq_ = GOOGLE_ULONGLONG(0);
  clear_has_qq();
}
inline ::google::protobuf::uint64 TBaseGuildInfo::qq() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.QQ)
  return qq_;
}
inline void TBaseGuildInfo::set_qq(::google::protobuf::uint64 value) {
  set_has_qq();
  qq_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.QQ)
}

// optional uint32 SumDayDonate = 15;
inline bool TBaseGuildInfo::has_sumdaydonate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TBaseGuildInfo::set_has_sumdaydonate() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TBaseGuildInfo::clear_has_sumdaydonate() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TBaseGuildInfo::clear_sumdaydonate() {
  sumdaydonate_ = 0u;
  clear_has_sumdaydonate();
}
inline ::google::protobuf::uint32 TBaseGuildInfo::sumdaydonate() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.SumDayDonate)
  return sumdaydonate_;
}
inline void TBaseGuildInfo::set_sumdaydonate(::google::protobuf::uint32 value) {
  set_has_sumdaydonate();
  sumdaydonate_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.SumDayDonate)
}

// optional uint32 KickOutNum = 16;
inline bool TBaseGuildInfo::has_kickoutnum() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TBaseGuildInfo::set_has_kickoutnum() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TBaseGuildInfo::clear_has_kickoutnum() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TBaseGuildInfo::clear_kickoutnum() {
  kickoutnum_ = 0u;
  clear_has_kickoutnum();
}
inline ::google::protobuf::uint32 TBaseGuildInfo::kickoutnum() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.KickOutNum)
  return kickoutnum_;
}
inline void TBaseGuildInfo::set_kickoutnum(::google::protobuf::uint32 value) {
  set_has_kickoutnum();
  kickoutnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.KickOutNum)
}

// optional uint32 LastWeekScore = 17;
inline bool TBaseGuildInfo::has_lastweekscore() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TBaseGuildInfo::set_has_lastweekscore() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TBaseGuildInfo::clear_has_lastweekscore() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TBaseGuildInfo::clear_lastweekscore() {
  lastweekscore_ = 0u;
  clear_has_lastweekscore();
}
inline ::google::protobuf::uint32 TBaseGuildInfo::lastweekscore() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.LastWeekScore)
  return lastweekscore_;
}
inline void TBaseGuildInfo::set_lastweekscore(::google::protobuf::uint32 value) {
  set_has_lastweekscore();
  lastweekscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.LastWeekScore)
}

// optional uint32 Rank = 18;
inline bool TBaseGuildInfo::has_rank() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TBaseGuildInfo::set_has_rank() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TBaseGuildInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TBaseGuildInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TBaseGuildInfo::rank() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.Rank)
  return rank_;
}
inline void TBaseGuildInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.Rank)
}

// optional string LineGroup = 19;
inline bool TBaseGuildInfo::has_linegroup() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TBaseGuildInfo::set_has_linegroup() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TBaseGuildInfo::clear_has_linegroup() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TBaseGuildInfo::clear_linegroup() {
  if (linegroup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    linegroup_->clear();
  }
  clear_has_linegroup();
}
inline const ::std::string& TBaseGuildInfo::linegroup() const {
  // @@protoc_insertion_point(field_get:pb.TBaseGuildInfo.LineGroup)
  return *linegroup_;
}
inline void TBaseGuildInfo::set_linegroup(const ::std::string& value) {
  set_has_linegroup();
  if (linegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    linegroup_ = new ::std::string;
  }
  linegroup_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBaseGuildInfo.LineGroup)
}
inline void TBaseGuildInfo::set_linegroup(const char* value) {
  set_has_linegroup();
  if (linegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    linegroup_ = new ::std::string;
  }
  linegroup_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBaseGuildInfo.LineGroup)
}
inline void TBaseGuildInfo::set_linegroup(const char* value, size_t size) {
  set_has_linegroup();
  if (linegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    linegroup_ = new ::std::string;
  }
  linegroup_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBaseGuildInfo.LineGroup)
}
inline ::std::string* TBaseGuildInfo::mutable_linegroup() {
  set_has_linegroup();
  if (linegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    linegroup_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBaseGuildInfo.LineGroup)
  return linegroup_;
}
inline ::std::string* TBaseGuildInfo::release_linegroup() {
  clear_has_linegroup();
  if (linegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = linegroup_;
    linegroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBaseGuildInfo::set_allocated_linegroup(::std::string* linegroup) {
  if (linegroup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete linegroup_;
  }
  if (linegroup) {
    set_has_linegroup();
    linegroup_ = linegroup;
  } else {
    clear_has_linegroup();
    linegroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBaseGuildInfo.LineGroup)
}

// -------------------------------------------------------------------

// TGuildSalaryInfo

// optional uint32 Post = 1;
inline bool TGuildSalaryInfo::has_post() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildSalaryInfo::set_has_post() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildSalaryInfo::clear_has_post() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildSalaryInfo::clear_post() {
  post_ = 0u;
  clear_has_post();
}
inline ::google::protobuf::uint32 TGuildSalaryInfo::post() const {
  // @@protoc_insertion_point(field_get:pb.TGuildSalaryInfo.Post)
  return post_;
}
inline void TGuildSalaryInfo::set_post(::google::protobuf::uint32 value) {
  set_has_post();
  post_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildSalaryInfo.Post)
}

// optional uint32 Num = 2;
inline bool TGuildSalaryInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildSalaryInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildSalaryInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildSalaryInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TGuildSalaryInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TGuildSalaryInfo.Num)
  return num_;
}
inline void TGuildSalaryInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildSalaryInfo.Num)
}

// -------------------------------------------------------------------

// TGuildGetInfoRsp

// optional .pb.TGuildMyInfo MyInfo = 1;
inline bool TGuildGetInfoRsp::has_myinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildGetInfoRsp::set_has_myinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildGetInfoRsp::clear_has_myinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildGetInfoRsp::clear_myinfo() {
  if (myinfo_ != NULL) myinfo_->::pb::TGuildMyInfo::Clear();
  clear_has_myinfo();
}
inline const ::pb::TGuildMyInfo& TGuildGetInfoRsp::myinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetInfoRsp.MyInfo)
  return myinfo_ != NULL ? *myinfo_ : *default_instance_->myinfo_;
}
inline ::pb::TGuildMyInfo* TGuildGetInfoRsp::mutable_myinfo() {
  set_has_myinfo();
  if (myinfo_ == NULL) myinfo_ = new ::pb::TGuildMyInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetInfoRsp.MyInfo)
  return myinfo_;
}
inline ::pb::TGuildMyInfo* TGuildGetInfoRsp::release_myinfo() {
  clear_has_myinfo();
  ::pb::TGuildMyInfo* temp = myinfo_;
  myinfo_ = NULL;
  return temp;
}
inline void TGuildGetInfoRsp::set_allocated_myinfo(::pb::TGuildMyInfo* myinfo) {
  delete myinfo_;
  myinfo_ = myinfo;
  if (myinfo) {
    set_has_myinfo();
  } else {
    clear_has_myinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildGetInfoRsp.MyInfo)
}

// optional .pb.TBaseGuildInfo GuildInfo = 2;
inline bool TGuildGetInfoRsp::has_guildinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildGetInfoRsp::set_has_guildinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildGetInfoRsp::clear_has_guildinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildGetInfoRsp::clear_guildinfo() {
  if (guildinfo_ != NULL) guildinfo_->::pb::TBaseGuildInfo::Clear();
  clear_has_guildinfo();
}
inline const ::pb::TBaseGuildInfo& TGuildGetInfoRsp::guildinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetInfoRsp.GuildInfo)
  return guildinfo_ != NULL ? *guildinfo_ : *default_instance_->guildinfo_;
}
inline ::pb::TBaseGuildInfo* TGuildGetInfoRsp::mutable_guildinfo() {
  set_has_guildinfo();
  if (guildinfo_ == NULL) guildinfo_ = new ::pb::TBaseGuildInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetInfoRsp.GuildInfo)
  return guildinfo_;
}
inline ::pb::TBaseGuildInfo* TGuildGetInfoRsp::release_guildinfo() {
  clear_has_guildinfo();
  ::pb::TBaseGuildInfo* temp = guildinfo_;
  guildinfo_ = NULL;
  return temp;
}
inline void TGuildGetInfoRsp::set_allocated_guildinfo(::pb::TBaseGuildInfo* guildinfo) {
  delete guildinfo_;
  guildinfo_ = guildinfo;
  if (guildinfo) {
    set_has_guildinfo();
  } else {
    clear_has_guildinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildGetInfoRsp.GuildInfo)
}

// optional string Notice = 3;
inline bool TGuildGetInfoRsp::has_notice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildGetInfoRsp::set_has_notice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildGetInfoRsp::clear_has_notice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildGetInfoRsp::clear_notice() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& TGuildGetInfoRsp::notice() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetInfoRsp.Notice)
  return *notice_;
}
inline void TGuildGetInfoRsp::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildGetInfoRsp.Notice)
}
inline void TGuildGetInfoRsp::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildGetInfoRsp.Notice)
}
inline void TGuildGetInfoRsp::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildGetInfoRsp.Notice)
}
inline ::std::string* TGuildGetInfoRsp::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetInfoRsp.Notice)
  return notice_;
}
inline ::std::string* TGuildGetInfoRsp::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildGetInfoRsp::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildGetInfoRsp.Notice)
}

// repeated .pb.TGuildTip TipArr = 4;
inline int TGuildGetInfoRsp::tiparr_size() const {
  return tiparr_.size();
}
inline void TGuildGetInfoRsp::clear_tiparr() {
  tiparr_.Clear();
}
inline const ::pb::TGuildTip& TGuildGetInfoRsp::tiparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetInfoRsp.TipArr)
  return tiparr_.Get(index);
}
inline ::pb::TGuildTip* TGuildGetInfoRsp::mutable_tiparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetInfoRsp.TipArr)
  return tiparr_.Mutable(index);
}
inline ::pb::TGuildTip* TGuildGetInfoRsp::add_tiparr() {
  // @@protoc_insertion_point(field_add:pb.TGuildGetInfoRsp.TipArr)
  return tiparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildTip >&
TGuildGetInfoRsp::tiparr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetInfoRsp.TipArr)
  return tiparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildTip >*
TGuildGetInfoRsp::mutable_tiparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetInfoRsp.TipArr)
  return &tiparr_;
}

// repeated .pb.TGuildDonate DonateArr = 5;
inline int TGuildGetInfoRsp::donatearr_size() const {
  return donatearr_.size();
}
inline void TGuildGetInfoRsp::clear_donatearr() {
  donatearr_.Clear();
}
inline const ::pb::TGuildDonate& TGuildGetInfoRsp::donatearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetInfoRsp.DonateArr)
  return donatearr_.Get(index);
}
inline ::pb::TGuildDonate* TGuildGetInfoRsp::mutable_donatearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetInfoRsp.DonateArr)
  return donatearr_.Mutable(index);
}
inline ::pb::TGuildDonate* TGuildGetInfoRsp::add_donatearr() {
  // @@protoc_insertion_point(field_add:pb.TGuildGetInfoRsp.DonateArr)
  return donatearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildDonate >&
TGuildGetInfoRsp::donatearr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetInfoRsp.DonateArr)
  return donatearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildDonate >*
TGuildGetInfoRsp::mutable_donatearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetInfoRsp.DonateArr)
  return &donatearr_;
}

// optional .pb.TGuildImpeachInfo ImpeachInfo = 6;
inline bool TGuildGetInfoRsp::has_impeachinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildGetInfoRsp::set_has_impeachinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildGetInfoRsp::clear_has_impeachinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildGetInfoRsp::clear_impeachinfo() {
  if (impeachinfo_ != NULL) impeachinfo_->::pb::TGuildImpeachInfo::Clear();
  clear_has_impeachinfo();
}
inline const ::pb::TGuildImpeachInfo& TGuildGetInfoRsp::impeachinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetInfoRsp.ImpeachInfo)
  return impeachinfo_ != NULL ? *impeachinfo_ : *default_instance_->impeachinfo_;
}
inline ::pb::TGuildImpeachInfo* TGuildGetInfoRsp::mutable_impeachinfo() {
  set_has_impeachinfo();
  if (impeachinfo_ == NULL) impeachinfo_ = new ::pb::TGuildImpeachInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetInfoRsp.ImpeachInfo)
  return impeachinfo_;
}
inline ::pb::TGuildImpeachInfo* TGuildGetInfoRsp::release_impeachinfo() {
  clear_has_impeachinfo();
  ::pb::TGuildImpeachInfo* temp = impeachinfo_;
  impeachinfo_ = NULL;
  return temp;
}
inline void TGuildGetInfoRsp::set_allocated_impeachinfo(::pb::TGuildImpeachInfo* impeachinfo) {
  delete impeachinfo_;
  impeachinfo_ = impeachinfo;
  if (impeachinfo) {
    set_has_impeachinfo();
  } else {
    clear_has_impeachinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildGetInfoRsp.ImpeachInfo)
}

// optional uint64 DismissTime = 7;
inline bool TGuildGetInfoRsp::has_dismisstime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGuildGetInfoRsp::set_has_dismisstime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGuildGetInfoRsp::clear_has_dismisstime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGuildGetInfoRsp::clear_dismisstime() {
  dismisstime_ = GOOGLE_ULONGLONG(0);
  clear_has_dismisstime();
}
inline ::google::protobuf::uint64 TGuildGetInfoRsp::dismisstime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetInfoRsp.DismissTime)
  return dismisstime_;
}
inline void TGuildGetInfoRsp::set_dismisstime(::google::protobuf::uint64 value) {
  set_has_dismisstime();
  dismisstime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetInfoRsp.DismissTime)
}

// optional .pb.TGuildTreasMapFix TMFInfo = 8;
inline bool TGuildGetInfoRsp::has_tmfinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGuildGetInfoRsp::set_has_tmfinfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGuildGetInfoRsp::clear_has_tmfinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGuildGetInfoRsp::clear_tmfinfo() {
  if (tmfinfo_ != NULL) tmfinfo_->::pb::TGuildTreasMapFix::Clear();
  clear_has_tmfinfo();
}
inline const ::pb::TGuildTreasMapFix& TGuildGetInfoRsp::tmfinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetInfoRsp.TMFInfo)
  return tmfinfo_ != NULL ? *tmfinfo_ : *default_instance_->tmfinfo_;
}
inline ::pb::TGuildTreasMapFix* TGuildGetInfoRsp::mutable_tmfinfo() {
  set_has_tmfinfo();
  if (tmfinfo_ == NULL) tmfinfo_ = new ::pb::TGuildTreasMapFix;
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetInfoRsp.TMFInfo)
  return tmfinfo_;
}
inline ::pb::TGuildTreasMapFix* TGuildGetInfoRsp::release_tmfinfo() {
  clear_has_tmfinfo();
  ::pb::TGuildTreasMapFix* temp = tmfinfo_;
  tmfinfo_ = NULL;
  return temp;
}
inline void TGuildGetInfoRsp::set_allocated_tmfinfo(::pb::TGuildTreasMapFix* tmfinfo) {
  delete tmfinfo_;
  tmfinfo_ = tmfinfo;
  if (tmfinfo) {
    set_has_tmfinfo();
  } else {
    clear_has_tmfinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildGetInfoRsp.TMFInfo)
}

// optional uint32 SendEmailNum = 9;
inline bool TGuildGetInfoRsp::has_sendemailnum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TGuildGetInfoRsp::set_has_sendemailnum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TGuildGetInfoRsp::clear_has_sendemailnum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TGuildGetInfoRsp::clear_sendemailnum() {
  sendemailnum_ = 0u;
  clear_has_sendemailnum();
}
inline ::google::protobuf::uint32 TGuildGetInfoRsp::sendemailnum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetInfoRsp.SendEmailNum)
  return sendemailnum_;
}
inline void TGuildGetInfoRsp::set_sendemailnum(::google::protobuf::uint32 value) {
  set_has_sendemailnum();
  sendemailnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetInfoRsp.SendEmailNum)
}

// repeated .pb.TGuildSalaryInfo SalaryInfoArr = 10;
inline int TGuildGetInfoRsp::salaryinfoarr_size() const {
  return salaryinfoarr_.size();
}
inline void TGuildGetInfoRsp::clear_salaryinfoarr() {
  salaryinfoarr_.Clear();
}
inline const ::pb::TGuildSalaryInfo& TGuildGetInfoRsp::salaryinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetInfoRsp.SalaryInfoArr)
  return salaryinfoarr_.Get(index);
}
inline ::pb::TGuildSalaryInfo* TGuildGetInfoRsp::mutable_salaryinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetInfoRsp.SalaryInfoArr)
  return salaryinfoarr_.Mutable(index);
}
inline ::pb::TGuildSalaryInfo* TGuildGetInfoRsp::add_salaryinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildGetInfoRsp.SalaryInfoArr)
  return salaryinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildSalaryInfo >&
TGuildGetInfoRsp::salaryinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetInfoRsp.SalaryInfoArr)
  return salaryinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildSalaryInfo >*
TGuildGetInfoRsp::mutable_salaryinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetInfoRsp.SalaryInfoArr)
  return &salaryinfoarr_;
}

// -------------------------------------------------------------------

// TGuildUpdateOurGuildNotify

// optional .pb.TBaseGuildInfo GuildInfo = 1;
inline bool TGuildUpdateOurGuildNotify::has_guildinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildUpdateOurGuildNotify::set_has_guildinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildUpdateOurGuildNotify::clear_has_guildinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildUpdateOurGuildNotify::clear_guildinfo() {
  if (guildinfo_ != NULL) guildinfo_->::pb::TBaseGuildInfo::Clear();
  clear_has_guildinfo();
}
inline const ::pb::TBaseGuildInfo& TGuildUpdateOurGuildNotify::guildinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateOurGuildNotify.GuildInfo)
  return guildinfo_ != NULL ? *guildinfo_ : *default_instance_->guildinfo_;
}
inline ::pb::TBaseGuildInfo* TGuildUpdateOurGuildNotify::mutable_guildinfo() {
  set_has_guildinfo();
  if (guildinfo_ == NULL) guildinfo_ = new ::pb::TBaseGuildInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildUpdateOurGuildNotify.GuildInfo)
  return guildinfo_;
}
inline ::pb::TBaseGuildInfo* TGuildUpdateOurGuildNotify::release_guildinfo() {
  clear_has_guildinfo();
  ::pb::TBaseGuildInfo* temp = guildinfo_;
  guildinfo_ = NULL;
  return temp;
}
inline void TGuildUpdateOurGuildNotify::set_allocated_guildinfo(::pb::TBaseGuildInfo* guildinfo) {
  delete guildinfo_;
  guildinfo_ = guildinfo;
  if (guildinfo) {
    set_has_guildinfo();
  } else {
    clear_has_guildinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildUpdateOurGuildNotify.GuildInfo)
}

// optional string Notice = 2;
inline bool TGuildUpdateOurGuildNotify::has_notice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildUpdateOurGuildNotify::set_has_notice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildUpdateOurGuildNotify::clear_has_notice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildUpdateOurGuildNotify::clear_notice() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& TGuildUpdateOurGuildNotify::notice() const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateOurGuildNotify.Notice)
  return *notice_;
}
inline void TGuildUpdateOurGuildNotify::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildUpdateOurGuildNotify.Notice)
}
inline void TGuildUpdateOurGuildNotify::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildUpdateOurGuildNotify.Notice)
}
inline void TGuildUpdateOurGuildNotify::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildUpdateOurGuildNotify.Notice)
}
inline ::std::string* TGuildUpdateOurGuildNotify::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildUpdateOurGuildNotify.Notice)
  return notice_;
}
inline ::std::string* TGuildUpdateOurGuildNotify::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildUpdateOurGuildNotify::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildUpdateOurGuildNotify.Notice)
}

// repeated .pb.TGuildTip TipArr = 3;
inline int TGuildUpdateOurGuildNotify::tiparr_size() const {
  return tiparr_.size();
}
inline void TGuildUpdateOurGuildNotify::clear_tiparr() {
  tiparr_.Clear();
}
inline const ::pb::TGuildTip& TGuildUpdateOurGuildNotify::tiparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateOurGuildNotify.TipArr)
  return tiparr_.Get(index);
}
inline ::pb::TGuildTip* TGuildUpdateOurGuildNotify::mutable_tiparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildUpdateOurGuildNotify.TipArr)
  return tiparr_.Mutable(index);
}
inline ::pb::TGuildTip* TGuildUpdateOurGuildNotify::add_tiparr() {
  // @@protoc_insertion_point(field_add:pb.TGuildUpdateOurGuildNotify.TipArr)
  return tiparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildTip >&
TGuildUpdateOurGuildNotify::tiparr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildUpdateOurGuildNotify.TipArr)
  return tiparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildTip >*
TGuildUpdateOurGuildNotify::mutable_tiparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildUpdateOurGuildNotify.TipArr)
  return &tiparr_;
}

// repeated .pb.TGuildDonate DonateArr = 4;
inline int TGuildUpdateOurGuildNotify::donatearr_size() const {
  return donatearr_.size();
}
inline void TGuildUpdateOurGuildNotify::clear_donatearr() {
  donatearr_.Clear();
}
inline const ::pb::TGuildDonate& TGuildUpdateOurGuildNotify::donatearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateOurGuildNotify.DonateArr)
  return donatearr_.Get(index);
}
inline ::pb::TGuildDonate* TGuildUpdateOurGuildNotify::mutable_donatearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildUpdateOurGuildNotify.DonateArr)
  return donatearr_.Mutable(index);
}
inline ::pb::TGuildDonate* TGuildUpdateOurGuildNotify::add_donatearr() {
  // @@protoc_insertion_point(field_add:pb.TGuildUpdateOurGuildNotify.DonateArr)
  return donatearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildDonate >&
TGuildUpdateOurGuildNotify::donatearr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildUpdateOurGuildNotify.DonateArr)
  return donatearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildDonate >*
TGuildUpdateOurGuildNotify::mutable_donatearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildUpdateOurGuildNotify.DonateArr)
  return &donatearr_;
}

// optional uint32 ApplyNum = 5;
inline bool TGuildUpdateOurGuildNotify::has_applynum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildUpdateOurGuildNotify::set_has_applynum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildUpdateOurGuildNotify::clear_has_applynum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildUpdateOurGuildNotify::clear_applynum() {
  applynum_ = 0u;
  clear_has_applynum();
}
inline ::google::protobuf::uint32 TGuildUpdateOurGuildNotify::applynum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateOurGuildNotify.ApplyNum)
  return applynum_;
}
inline void TGuildUpdateOurGuildNotify::set_applynum(::google::protobuf::uint32 value) {
  set_has_applynum();
  applynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildUpdateOurGuildNotify.ApplyNum)
}

// optional uint64 CreateTime = 6;
inline bool TGuildUpdateOurGuildNotify::has_createtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildUpdateOurGuildNotify::set_has_createtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildUpdateOurGuildNotify::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildUpdateOurGuildNotify::clear_createtime() {
  createtime_ = GOOGLE_ULONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::uint64 TGuildUpdateOurGuildNotify::createtime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateOurGuildNotify.CreateTime)
  return createtime_;
}
inline void TGuildUpdateOurGuildNotify::set_createtime(::google::protobuf::uint64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildUpdateOurGuildNotify.CreateTime)
}

// optional .pb.TGuildImpeachInfo ImpeachInfo = 7;
inline bool TGuildUpdateOurGuildNotify::has_impeachinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGuildUpdateOurGuildNotify::set_has_impeachinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGuildUpdateOurGuildNotify::clear_has_impeachinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGuildUpdateOurGuildNotify::clear_impeachinfo() {
  if (impeachinfo_ != NULL) impeachinfo_->::pb::TGuildImpeachInfo::Clear();
  clear_has_impeachinfo();
}
inline const ::pb::TGuildImpeachInfo& TGuildUpdateOurGuildNotify::impeachinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateOurGuildNotify.ImpeachInfo)
  return impeachinfo_ != NULL ? *impeachinfo_ : *default_instance_->impeachinfo_;
}
inline ::pb::TGuildImpeachInfo* TGuildUpdateOurGuildNotify::mutable_impeachinfo() {
  set_has_impeachinfo();
  if (impeachinfo_ == NULL) impeachinfo_ = new ::pb::TGuildImpeachInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildUpdateOurGuildNotify.ImpeachInfo)
  return impeachinfo_;
}
inline ::pb::TGuildImpeachInfo* TGuildUpdateOurGuildNotify::release_impeachinfo() {
  clear_has_impeachinfo();
  ::pb::TGuildImpeachInfo* temp = impeachinfo_;
  impeachinfo_ = NULL;
  return temp;
}
inline void TGuildUpdateOurGuildNotify::set_allocated_impeachinfo(::pb::TGuildImpeachInfo* impeachinfo) {
  delete impeachinfo_;
  impeachinfo_ = impeachinfo;
  if (impeachinfo) {
    set_has_impeachinfo();
  } else {
    clear_has_impeachinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildUpdateOurGuildNotify.ImpeachInfo)
}

// optional uint64 DismissTime = 8;
inline bool TGuildUpdateOurGuildNotify::has_dismisstime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGuildUpdateOurGuildNotify::set_has_dismisstime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGuildUpdateOurGuildNotify::clear_has_dismisstime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGuildUpdateOurGuildNotify::clear_dismisstime() {
  dismisstime_ = GOOGLE_ULONGLONG(0);
  clear_has_dismisstime();
}
inline ::google::protobuf::uint64 TGuildUpdateOurGuildNotify::dismisstime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateOurGuildNotify.DismissTime)
  return dismisstime_;
}
inline void TGuildUpdateOurGuildNotify::set_dismisstime(::google::protobuf::uint64 value) {
  set_has_dismisstime();
  dismisstime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildUpdateOurGuildNotify.DismissTime)
}

// optional .pb.TGuildTreasMapFix TMFInfo = 9;
inline bool TGuildUpdateOurGuildNotify::has_tmfinfo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TGuildUpdateOurGuildNotify::set_has_tmfinfo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TGuildUpdateOurGuildNotify::clear_has_tmfinfo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TGuildUpdateOurGuildNotify::clear_tmfinfo() {
  if (tmfinfo_ != NULL) tmfinfo_->::pb::TGuildTreasMapFix::Clear();
  clear_has_tmfinfo();
}
inline const ::pb::TGuildTreasMapFix& TGuildUpdateOurGuildNotify::tmfinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateOurGuildNotify.TMFInfo)
  return tmfinfo_ != NULL ? *tmfinfo_ : *default_instance_->tmfinfo_;
}
inline ::pb::TGuildTreasMapFix* TGuildUpdateOurGuildNotify::mutable_tmfinfo() {
  set_has_tmfinfo();
  if (tmfinfo_ == NULL) tmfinfo_ = new ::pb::TGuildTreasMapFix;
  // @@protoc_insertion_point(field_mutable:pb.TGuildUpdateOurGuildNotify.TMFInfo)
  return tmfinfo_;
}
inline ::pb::TGuildTreasMapFix* TGuildUpdateOurGuildNotify::release_tmfinfo() {
  clear_has_tmfinfo();
  ::pb::TGuildTreasMapFix* temp = tmfinfo_;
  tmfinfo_ = NULL;
  return temp;
}
inline void TGuildUpdateOurGuildNotify::set_allocated_tmfinfo(::pb::TGuildTreasMapFix* tmfinfo) {
  delete tmfinfo_;
  tmfinfo_ = tmfinfo;
  if (tmfinfo) {
    set_has_tmfinfo();
  } else {
    clear_has_tmfinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildUpdateOurGuildNotify.TMFInfo)
}

// repeated .pb.TGuildSalaryInfo SalaryInfoArr = 10;
inline int TGuildUpdateOurGuildNotify::salaryinfoarr_size() const {
  return salaryinfoarr_.size();
}
inline void TGuildUpdateOurGuildNotify::clear_salaryinfoarr() {
  salaryinfoarr_.Clear();
}
inline const ::pb::TGuildSalaryInfo& TGuildUpdateOurGuildNotify::salaryinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateOurGuildNotify.SalaryInfoArr)
  return salaryinfoarr_.Get(index);
}
inline ::pb::TGuildSalaryInfo* TGuildUpdateOurGuildNotify::mutable_salaryinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildUpdateOurGuildNotify.SalaryInfoArr)
  return salaryinfoarr_.Mutable(index);
}
inline ::pb::TGuildSalaryInfo* TGuildUpdateOurGuildNotify::add_salaryinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildUpdateOurGuildNotify.SalaryInfoArr)
  return salaryinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildSalaryInfo >&
TGuildUpdateOurGuildNotify::salaryinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildUpdateOurGuildNotify.SalaryInfoArr)
  return salaryinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildSalaryInfo >*
TGuildUpdateOurGuildNotify::mutable_salaryinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildUpdateOurGuildNotify.SalaryInfoArr)
  return &salaryinfoarr_;
}

// -------------------------------------------------------------------

// TGuildGetOtherInfoReq

// optional uint64 GuildId = 1;
inline bool TGuildGetOtherInfoReq::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildGetOtherInfoReq::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildGetOtherInfoReq::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildGetOtherInfoReq::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TGuildGetOtherInfoReq::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetOtherInfoReq.GuildId)
  return guildid_;
}
inline void TGuildGetOtherInfoReq::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetOtherInfoReq.GuildId)
}

// -------------------------------------------------------------------

// TGuildGetOtherInfoRsp

// optional .pb.TBaseGuildInfo GuildInfo = 1;
inline bool TGuildGetOtherInfoRsp::has_guildinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildGetOtherInfoRsp::set_has_guildinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildGetOtherInfoRsp::clear_has_guildinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildGetOtherInfoRsp::clear_guildinfo() {
  if (guildinfo_ != NULL) guildinfo_->::pb::TBaseGuildInfo::Clear();
  clear_has_guildinfo();
}
inline const ::pb::TBaseGuildInfo& TGuildGetOtherInfoRsp::guildinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetOtherInfoRsp.GuildInfo)
  return guildinfo_ != NULL ? *guildinfo_ : *default_instance_->guildinfo_;
}
inline ::pb::TBaseGuildInfo* TGuildGetOtherInfoRsp::mutable_guildinfo() {
  set_has_guildinfo();
  if (guildinfo_ == NULL) guildinfo_ = new ::pb::TBaseGuildInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetOtherInfoRsp.GuildInfo)
  return guildinfo_;
}
inline ::pb::TBaseGuildInfo* TGuildGetOtherInfoRsp::release_guildinfo() {
  clear_has_guildinfo();
  ::pb::TBaseGuildInfo* temp = guildinfo_;
  guildinfo_ = NULL;
  return temp;
}
inline void TGuildGetOtherInfoRsp::set_allocated_guildinfo(::pb::TBaseGuildInfo* guildinfo) {
  delete guildinfo_;
  guildinfo_ = guildinfo;
  if (guildinfo) {
    set_has_guildinfo();
  } else {
    clear_has_guildinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildGetOtherInfoRsp.GuildInfo)
}

// optional uint32 Rank = 2;
inline bool TGuildGetOtherInfoRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildGetOtherInfoRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildGetOtherInfoRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildGetOtherInfoRsp::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TGuildGetOtherInfoRsp::rank() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetOtherInfoRsp.Rank)
  return rank_;
}
inline void TGuildGetOtherInfoRsp::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetOtherInfoRsp.Rank)
}

// -------------------------------------------------------------------

// TGuildGetListReq

// optional uint32 FromRank = 1;
inline bool TGuildGetListReq::has_fromrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildGetListReq::set_has_fromrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildGetListReq::clear_has_fromrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildGetListReq::clear_fromrank() {
  fromrank_ = 0u;
  clear_has_fromrank();
}
inline ::google::protobuf::uint32 TGuildGetListReq::fromrank() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetListReq.FromRank)
  return fromrank_;
}
inline void TGuildGetListReq::set_fromrank(::google::protobuf::uint32 value) {
  set_has_fromrank();
  fromrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetListReq.FromRank)
}

// -------------------------------------------------------------------

// TGuildGetListRsp

// optional uint32 TotalNum = 1;
inline bool TGuildGetListRsp::has_totalnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildGetListRsp::set_has_totalnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildGetListRsp::clear_has_totalnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildGetListRsp::clear_totalnum() {
  totalnum_ = 0u;
  clear_has_totalnum();
}
inline ::google::protobuf::uint32 TGuildGetListRsp::totalnum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetListRsp.TotalNum)
  return totalnum_;
}
inline void TGuildGetListRsp::set_totalnum(::google::protobuf::uint32 value) {
  set_has_totalnum();
  totalnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetListRsp.TotalNum)
}

// repeated .pb.TBaseGuildInfo GuildArr = 2;
inline int TGuildGetListRsp::guildarr_size() const {
  return guildarr_.size();
}
inline void TGuildGetListRsp::clear_guildarr() {
  guildarr_.Clear();
}
inline const ::pb::TBaseGuildInfo& TGuildGetListRsp::guildarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetListRsp.GuildArr)
  return guildarr_.Get(index);
}
inline ::pb::TBaseGuildInfo* TGuildGetListRsp::mutable_guildarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetListRsp.GuildArr)
  return guildarr_.Mutable(index);
}
inline ::pb::TBaseGuildInfo* TGuildGetListRsp::add_guildarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildGetListRsp.GuildArr)
  return guildarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBaseGuildInfo >&
TGuildGetListRsp::guildarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetListRsp.GuildArr)
  return guildarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBaseGuildInfo >*
TGuildGetListRsp::mutable_guildarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetListRsp.GuildArr)
  return &guildarr_;
}

// -------------------------------------------------------------------

// TGuildGetCanApplyListReq

// optional uint32 Offset = 1;
inline bool TGuildGetCanApplyListReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildGetCanApplyListReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildGetCanApplyListReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildGetCanApplyListReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TGuildGetCanApplyListReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetCanApplyListReq.Offset)
  return offset_;
}
inline void TGuildGetCanApplyListReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetCanApplyListReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TGuildGetCanApplyListReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildGetCanApplyListReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildGetCanApplyListReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildGetCanApplyListReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TGuildGetCanApplyListReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetCanApplyListReq.Limit)
  return limit_;
}
inline void TGuildGetCanApplyListReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetCanApplyListReq.Limit)
}

// -------------------------------------------------------------------

// TGuildGetCanApplyListRsp

// repeated .pb.TBaseGuildInfo GuildArr = 1;
inline int TGuildGetCanApplyListRsp::guildarr_size() const {
  return guildarr_.size();
}
inline void TGuildGetCanApplyListRsp::clear_guildarr() {
  guildarr_.Clear();
}
inline const ::pb::TBaseGuildInfo& TGuildGetCanApplyListRsp::guildarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetCanApplyListRsp.GuildArr)
  return guildarr_.Get(index);
}
inline ::pb::TBaseGuildInfo* TGuildGetCanApplyListRsp::mutable_guildarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetCanApplyListRsp.GuildArr)
  return guildarr_.Mutable(index);
}
inline ::pb::TBaseGuildInfo* TGuildGetCanApplyListRsp::add_guildarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildGetCanApplyListRsp.GuildArr)
  return guildarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBaseGuildInfo >&
TGuildGetCanApplyListRsp::guildarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetCanApplyListRsp.GuildArr)
  return guildarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBaseGuildInfo >*
TGuildGetCanApplyListRsp::mutable_guildarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetCanApplyListRsp.GuildArr)
  return &guildarr_;
}

// -------------------------------------------------------------------

// TGuildCreateReq

// optional string Name = 1;
inline bool TGuildCreateReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildCreateReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildCreateReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildCreateReq::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TGuildCreateReq::name() const {
  // @@protoc_insertion_point(field_get:pb.TGuildCreateReq.Name)
  return *name_;
}
inline void TGuildCreateReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildCreateReq.Name)
}
inline void TGuildCreateReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildCreateReq.Name)
}
inline void TGuildCreateReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildCreateReq.Name)
}
inline ::std::string* TGuildCreateReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildCreateReq.Name)
  return name_;
}
inline ::std::string* TGuildCreateReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildCreateReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildCreateReq.Name)
}

// optional string Summary = 2;
inline bool TGuildCreateReq::has_summary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildCreateReq::set_has_summary() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildCreateReq::clear_has_summary() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildCreateReq::clear_summary() {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_->clear();
  }
  clear_has_summary();
}
inline const ::std::string& TGuildCreateReq::summary() const {
  // @@protoc_insertion_point(field_get:pb.TGuildCreateReq.Summary)
  return *summary_;
}
inline void TGuildCreateReq::set_summary(const ::std::string& value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildCreateReq.Summary)
}
inline void TGuildCreateReq::set_summary(const char* value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildCreateReq.Summary)
}
inline void TGuildCreateReq::set_summary(const char* value, size_t size) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildCreateReq.Summary)
}
inline ::std::string* TGuildCreateReq::mutable_summary() {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildCreateReq.Summary)
  return summary_;
}
inline ::std::string* TGuildCreateReq::release_summary() {
  clear_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = summary_;
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildCreateReq::set_allocated_summary(::std::string* summary) {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (summary) {
    set_has_summary();
    summary_ = summary;
  } else {
    clear_has_summary();
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildCreateReq.Summary)
}

// optional string PhoneNumber = 3;
inline bool TGuildCreateReq::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildCreateReq::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildCreateReq::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildCreateReq::clear_phonenumber() {
  if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phonenumber_->clear();
  }
  clear_has_phonenumber();
}
inline const ::std::string& TGuildCreateReq::phonenumber() const {
  // @@protoc_insertion_point(field_get:pb.TGuildCreateReq.PhoneNumber)
  return *phonenumber_;
}
inline void TGuildCreateReq::set_phonenumber(const ::std::string& value) {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phonenumber_ = new ::std::string;
  }
  phonenumber_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildCreateReq.PhoneNumber)
}
inline void TGuildCreateReq::set_phonenumber(const char* value) {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phonenumber_ = new ::std::string;
  }
  phonenumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildCreateReq.PhoneNumber)
}
inline void TGuildCreateReq::set_phonenumber(const char* value, size_t size) {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phonenumber_ = new ::std::string;
  }
  phonenumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildCreateReq.PhoneNumber)
}
inline ::std::string* TGuildCreateReq::mutable_phonenumber() {
  set_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phonenumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildCreateReq.PhoneNumber)
  return phonenumber_;
}
inline ::std::string* TGuildCreateReq::release_phonenumber() {
  clear_has_phonenumber();
  if (phonenumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phonenumber_;
    phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildCreateReq::set_allocated_phonenumber(::std::string* phonenumber) {
  if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenumber_;
  }
  if (phonenumber) {
    set_has_phonenumber();
    phonenumber_ = phonenumber;
  } else {
    clear_has_phonenumber();
    phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildCreateReq.PhoneNumber)
}

// optional string AuthCode = 4;
inline bool TGuildCreateReq::has_authcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildCreateReq::set_has_authcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildCreateReq::clear_has_authcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildCreateReq::clear_authcode() {
  if (authcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authcode_->clear();
  }
  clear_has_authcode();
}
inline const ::std::string& TGuildCreateReq::authcode() const {
  // @@protoc_insertion_point(field_get:pb.TGuildCreateReq.AuthCode)
  return *authcode_;
}
inline void TGuildCreateReq::set_authcode(const ::std::string& value) {
  set_has_authcode();
  if (authcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authcode_ = new ::std::string;
  }
  authcode_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildCreateReq.AuthCode)
}
inline void TGuildCreateReq::set_authcode(const char* value) {
  set_has_authcode();
  if (authcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authcode_ = new ::std::string;
  }
  authcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildCreateReq.AuthCode)
}
inline void TGuildCreateReq::set_authcode(const char* value, size_t size) {
  set_has_authcode();
  if (authcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authcode_ = new ::std::string;
  }
  authcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildCreateReq.AuthCode)
}
inline ::std::string* TGuildCreateReq::mutable_authcode() {
  set_has_authcode();
  if (authcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildCreateReq.AuthCode)
  return authcode_;
}
inline ::std::string* TGuildCreateReq::release_authcode() {
  clear_has_authcode();
  if (authcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = authcode_;
    authcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildCreateReq::set_allocated_authcode(::std::string* authcode) {
  if (authcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authcode_;
  }
  if (authcode) {
    set_has_authcode();
    authcode_ = authcode;
  } else {
    clear_has_authcode();
    authcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildCreateReq.AuthCode)
}

// -------------------------------------------------------------------

// TGuildSearchReq

// optional string Name = 1;
inline bool TGuildSearchReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildSearchReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildSearchReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildSearchReq::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TGuildSearchReq::name() const {
  // @@protoc_insertion_point(field_get:pb.TGuildSearchReq.Name)
  return *name_;
}
inline void TGuildSearchReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildSearchReq.Name)
}
inline void TGuildSearchReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildSearchReq.Name)
}
inline void TGuildSearchReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildSearchReq.Name)
}
inline ::std::string* TGuildSearchReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildSearchReq.Name)
  return name_;
}
inline ::std::string* TGuildSearchReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildSearchReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildSearchReq.Name)
}

// -------------------------------------------------------------------

// TGuildSearchRsp

// repeated .pb.TBaseGuildInfo GuildArr = 1;
inline int TGuildSearchRsp::guildarr_size() const {
  return guildarr_.size();
}
inline void TGuildSearchRsp::clear_guildarr() {
  guildarr_.Clear();
}
inline const ::pb::TBaseGuildInfo& TGuildSearchRsp::guildarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildSearchRsp.GuildArr)
  return guildarr_.Get(index);
}
inline ::pb::TBaseGuildInfo* TGuildSearchRsp::mutable_guildarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildSearchRsp.GuildArr)
  return guildarr_.Mutable(index);
}
inline ::pb::TBaseGuildInfo* TGuildSearchRsp::add_guildarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildSearchRsp.GuildArr)
  return guildarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBaseGuildInfo >&
TGuildSearchRsp::guildarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildSearchRsp.GuildArr)
  return guildarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBaseGuildInfo >*
TGuildSearchRsp::mutable_guildarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildSearchRsp.GuildArr)
  return &guildarr_;
}

// -------------------------------------------------------------------

// TGuildGetApplyListRsp

// repeated .pb.TGuildApplyInfo ApplyArr = 1;
inline int TGuildGetApplyListRsp::applyarr_size() const {
  return applyarr_.size();
}
inline void TGuildGetApplyListRsp::clear_applyarr() {
  applyarr_.Clear();
}
inline const ::pb::TGuildApplyInfo& TGuildGetApplyListRsp::applyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetApplyListRsp.ApplyArr)
  return applyarr_.Get(index);
}
inline ::pb::TGuildApplyInfo* TGuildGetApplyListRsp::mutable_applyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetApplyListRsp.ApplyArr)
  return applyarr_.Mutable(index);
}
inline ::pb::TGuildApplyInfo* TGuildGetApplyListRsp::add_applyarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildGetApplyListRsp.ApplyArr)
  return applyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildApplyInfo >&
TGuildGetApplyListRsp::applyarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetApplyListRsp.ApplyArr)
  return applyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildApplyInfo >*
TGuildGetApplyListRsp::mutable_applyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetApplyListRsp.ApplyArr)
  return &applyarr_;
}

// -------------------------------------------------------------------

// TGuildApplyReq

// optional uint64 GuildId = 1;
inline bool TGuildApplyReq::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildApplyReq::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildApplyReq::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildApplyReq::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TGuildApplyReq::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildApplyReq.GuildId)
  return guildid_;
}
inline void TGuildApplyReq::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildApplyReq.GuildId)
}

// -------------------------------------------------------------------

// TGuildCancelApplyReq

// optional uint64 GuildId = 1;
inline bool TGuildCancelApplyReq::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildCancelApplyReq::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildCancelApplyReq::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildCancelApplyReq::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TGuildCancelApplyReq::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildCancelApplyReq.GuildId)
  return guildid_;
}
inline void TGuildCancelApplyReq::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildCancelApplyReq.GuildId)
}

// -------------------------------------------------------------------

// TGuildVerifyReq

// optional uint64 Uid = 1;
inline bool TGuildVerifyReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildVerifyReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildVerifyReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildVerifyReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TGuildVerifyReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildVerifyReq.Uid)
  return uid_;
}
inline void TGuildVerifyReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildVerifyReq.Uid)
}

// optional .pb.EVerifyRet Ret = 2;
inline bool TGuildVerifyReq::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildVerifyReq::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildVerifyReq::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildVerifyReq::clear_ret() {
  ret_ = 1;
  clear_has_ret();
}
inline ::pb::EVerifyRet TGuildVerifyReq::ret() const {
  // @@protoc_insertion_point(field_get:pb.TGuildVerifyReq.Ret)
  return static_cast< ::pb::EVerifyRet >(ret_);
}
inline void TGuildVerifyReq::set_ret(::pb::EVerifyRet value) {
  assert(::pb::EVerifyRet_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildVerifyReq.Ret)
}

// -------------------------------------------------------------------

// TGuildVerifyAllReq

// optional .pb.EVerifyRet Ret = 1;
inline bool TGuildVerifyAllReq::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildVerifyAllReq::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildVerifyAllReq::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildVerifyAllReq::clear_ret() {
  ret_ = 1;
  clear_has_ret();
}
inline ::pb::EVerifyRet TGuildVerifyAllReq::ret() const {
  // @@protoc_insertion_point(field_get:pb.TGuildVerifyAllReq.Ret)
  return static_cast< ::pb::EVerifyRet >(ret_);
}
inline void TGuildVerifyAllReq::set_ret(::pb::EVerifyRet value) {
  assert(::pb::EVerifyRet_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildVerifyAllReq.Ret)
}

// -------------------------------------------------------------------

// TGuildGetMemberListRsp

// repeated .pb.TGuildMemberInfo MemberArr = 1;
inline int TGuildGetMemberListRsp::memberarr_size() const {
  return memberarr_.size();
}
inline void TGuildGetMemberListRsp::clear_memberarr() {
  memberarr_.Clear();
}
inline const ::pb::TGuildMemberInfo& TGuildGetMemberListRsp::memberarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetMemberListRsp.MemberArr)
  return memberarr_.Get(index);
}
inline ::pb::TGuildMemberInfo* TGuildGetMemberListRsp::mutable_memberarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetMemberListRsp.MemberArr)
  return memberarr_.Mutable(index);
}
inline ::pb::TGuildMemberInfo* TGuildGetMemberListRsp::add_memberarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildGetMemberListRsp.MemberArr)
  return memberarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildMemberInfo >&
TGuildGetMemberListRsp::memberarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetMemberListRsp.MemberArr)
  return memberarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildMemberInfo >*
TGuildGetMemberListRsp::mutable_memberarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetMemberListRsp.MemberArr)
  return &memberarr_;
}

// -------------------------------------------------------------------

// TGuildModifyReq

// optional string BannerName = 1;
inline bool TGuildModifyReq::has_bannername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildModifyReq::set_has_bannername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildModifyReq::clear_has_bannername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildModifyReq::clear_bannername() {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_->clear();
  }
  clear_has_bannername();
}
inline const ::std::string& TGuildModifyReq::bannername() const {
  // @@protoc_insertion_point(field_get:pb.TGuildModifyReq.BannerName)
  return *bannername_;
}
inline void TGuildModifyReq::set_bannername(const ::std::string& value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildModifyReq.BannerName)
}
inline void TGuildModifyReq::set_bannername(const char* value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildModifyReq.BannerName)
}
inline void TGuildModifyReq::set_bannername(const char* value, size_t size) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildModifyReq.BannerName)
}
inline ::std::string* TGuildModifyReq::mutable_bannername() {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildModifyReq.BannerName)
  return bannername_;
}
inline ::std::string* TGuildModifyReq::release_bannername() {
  clear_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bannername_;
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildModifyReq::set_allocated_bannername(::std::string* bannername) {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (bannername) {
    set_has_bannername();
    bannername_ = bannername;
  } else {
    clear_has_bannername();
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildModifyReq.BannerName)
}

// optional uint32 BannerBase = 2;
inline bool TGuildModifyReq::has_bannerbase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildModifyReq::set_has_bannerbase() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildModifyReq::clear_has_bannerbase() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildModifyReq::clear_bannerbase() {
  bannerbase_ = 0u;
  clear_has_bannerbase();
}
inline ::google::protobuf::uint32 TGuildModifyReq::bannerbase() const {
  // @@protoc_insertion_point(field_get:pb.TGuildModifyReq.BannerBase)
  return bannerbase_;
}
inline void TGuildModifyReq::set_bannerbase(::google::protobuf::uint32 value) {
  set_has_bannerbase();
  bannerbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildModifyReq.BannerBase)
}

// optional string Summary = 3;
inline bool TGuildModifyReq::has_summary() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildModifyReq::set_has_summary() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildModifyReq::clear_has_summary() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildModifyReq::clear_summary() {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_->clear();
  }
  clear_has_summary();
}
inline const ::std::string& TGuildModifyReq::summary() const {
  // @@protoc_insertion_point(field_get:pb.TGuildModifyReq.Summary)
  return *summary_;
}
inline void TGuildModifyReq::set_summary(const ::std::string& value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildModifyReq.Summary)
}
inline void TGuildModifyReq::set_summary(const char* value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildModifyReq.Summary)
}
inline void TGuildModifyReq::set_summary(const char* value, size_t size) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildModifyReq.Summary)
}
inline ::std::string* TGuildModifyReq::mutable_summary() {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildModifyReq.Summary)
  return summary_;
}
inline ::std::string* TGuildModifyReq::release_summary() {
  clear_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = summary_;
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildModifyReq::set_allocated_summary(::std::string* summary) {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (summary) {
    set_has_summary();
    summary_ = summary;
  } else {
    clear_has_summary();
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildModifyReq.Summary)
}

// optional string Notice = 4;
inline bool TGuildModifyReq::has_notice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildModifyReq::set_has_notice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildModifyReq::clear_has_notice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildModifyReq::clear_notice() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& TGuildModifyReq::notice() const {
  // @@protoc_insertion_point(field_get:pb.TGuildModifyReq.Notice)
  return *notice_;
}
inline void TGuildModifyReq::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildModifyReq.Notice)
}
inline void TGuildModifyReq::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildModifyReq.Notice)
}
inline void TGuildModifyReq::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildModifyReq.Notice)
}
inline ::std::string* TGuildModifyReq::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildModifyReq.Notice)
  return notice_;
}
inline ::std::string* TGuildModifyReq::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildModifyReq::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildModifyReq.Notice)
}

// optional .pb.EReviewMode ReviewMode = 5;
inline bool TGuildModifyReq::has_reviewmode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildModifyReq::set_has_reviewmode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildModifyReq::clear_has_reviewmode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildModifyReq::clear_reviewmode() {
  reviewmode_ = 0;
  clear_has_reviewmode();
}
inline ::pb::EReviewMode TGuildModifyReq::reviewmode() const {
  // @@protoc_insertion_point(field_get:pb.TGuildModifyReq.ReviewMode)
  return static_cast< ::pb::EReviewMode >(reviewmode_);
}
inline void TGuildModifyReq::set_reviewmode(::pb::EReviewMode value) {
  assert(::pb::EReviewMode_IsValid(value));
  set_has_reviewmode();
  reviewmode_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildModifyReq.ReviewMode)
}

// optional .pb.TGuildLimit Limit = 6;
inline bool TGuildModifyReq::has_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildModifyReq::set_has_limit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildModifyReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildModifyReq::clear_limit() {
  if (limit_ != NULL) limit_->::pb::TGuildLimit::Clear();
  clear_has_limit();
}
inline const ::pb::TGuildLimit& TGuildModifyReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TGuildModifyReq.Limit)
  return limit_ != NULL ? *limit_ : *default_instance_->limit_;
}
inline ::pb::TGuildLimit* TGuildModifyReq::mutable_limit() {
  set_has_limit();
  if (limit_ == NULL) limit_ = new ::pb::TGuildLimit;
  // @@protoc_insertion_point(field_mutable:pb.TGuildModifyReq.Limit)
  return limit_;
}
inline ::pb::TGuildLimit* TGuildModifyReq::release_limit() {
  clear_has_limit();
  ::pb::TGuildLimit* temp = limit_;
  limit_ = NULL;
  return temp;
}
inline void TGuildModifyReq::set_allocated_limit(::pb::TGuildLimit* limit) {
  delete limit_;
  limit_ = limit;
  if (limit) {
    set_has_limit();
  } else {
    clear_has_limit();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildModifyReq.Limit)
}

// optional uint64 QQ = 7;
inline bool TGuildModifyReq::has_qq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGuildModifyReq::set_has_qq() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGuildModifyReq::clear_has_qq() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGuildModifyReq::clear_qq() {
  qq_ = GOOGLE_ULONGLONG(0);
  clear_has_qq();
}
inline ::google::protobuf::uint64 TGuildModifyReq::qq() const {
  // @@protoc_insertion_point(field_get:pb.TGuildModifyReq.QQ)
  return qq_;
}
inline void TGuildModifyReq::set_qq(::google::protobuf::uint64 value) {
  set_has_qq();
  qq_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildModifyReq.QQ)
}

// optional string LineGroup = 8;
inline bool TGuildModifyReq::has_linegroup() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGuildModifyReq::set_has_linegroup() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGuildModifyReq::clear_has_linegroup() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGuildModifyReq::clear_linegroup() {
  if (linegroup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    linegroup_->clear();
  }
  clear_has_linegroup();
}
inline const ::std::string& TGuildModifyReq::linegroup() const {
  // @@protoc_insertion_point(field_get:pb.TGuildModifyReq.LineGroup)
  return *linegroup_;
}
inline void TGuildModifyReq::set_linegroup(const ::std::string& value) {
  set_has_linegroup();
  if (linegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    linegroup_ = new ::std::string;
  }
  linegroup_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildModifyReq.LineGroup)
}
inline void TGuildModifyReq::set_linegroup(const char* value) {
  set_has_linegroup();
  if (linegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    linegroup_ = new ::std::string;
  }
  linegroup_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildModifyReq.LineGroup)
}
inline void TGuildModifyReq::set_linegroup(const char* value, size_t size) {
  set_has_linegroup();
  if (linegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    linegroup_ = new ::std::string;
  }
  linegroup_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildModifyReq.LineGroup)
}
inline ::std::string* TGuildModifyReq::mutable_linegroup() {
  set_has_linegroup();
  if (linegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    linegroup_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildModifyReq.LineGroup)
  return linegroup_;
}
inline ::std::string* TGuildModifyReq::release_linegroup() {
  clear_has_linegroup();
  if (linegroup_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = linegroup_;
    linegroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildModifyReq::set_allocated_linegroup(::std::string* linegroup) {
  if (linegroup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete linegroup_;
  }
  if (linegroup) {
    set_has_linegroup();
    linegroup_ = linegroup;
  } else {
    clear_has_linegroup();
    linegroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildModifyReq.LineGroup)
}

// -------------------------------------------------------------------

// TGuildDismissRsp

// optional uint32 GuildWarSign = 1;
inline bool TGuildDismissRsp::has_guildwarsign() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildDismissRsp::set_has_guildwarsign() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildDismissRsp::clear_has_guildwarsign() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildDismissRsp::clear_guildwarsign() {
  guildwarsign_ = 0u;
  clear_has_guildwarsign();
}
inline ::google::protobuf::uint32 TGuildDismissRsp::guildwarsign() const {
  // @@protoc_insertion_point(field_get:pb.TGuildDismissRsp.GuildWarSign)
  return guildwarsign_;
}
inline void TGuildDismissRsp::set_guildwarsign(::google::protobuf::uint32 value) {
  set_has_guildwarsign();
  guildwarsign_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildDismissRsp.GuildWarSign)
}

// -------------------------------------------------------------------

// TGuildAppointRpgReq

// optional uint64 Uid = 1;
inline bool TGuildAppointRpgReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildAppointRpgReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildAppointRpgReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildAppointRpgReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TGuildAppointRpgReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildAppointRpgReq.Uid)
  return uid_;
}
inline void TGuildAppointRpgReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildAppointRpgReq.Uid)
}

// optional .pb.EGuildPost Post = 2;
inline bool TGuildAppointRpgReq::has_post() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildAppointRpgReq::set_has_post() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildAppointRpgReq::clear_has_post() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildAppointRpgReq::clear_post() {
  post_ = 0;
  clear_has_post();
}
inline ::pb::EGuildPost TGuildAppointRpgReq::post() const {
  // @@protoc_insertion_point(field_get:pb.TGuildAppointRpgReq.Post)
  return static_cast< ::pb::EGuildPost >(post_);
}
inline void TGuildAppointRpgReq::set_post(::pb::EGuildPost value) {
  assert(::pb::EGuildPost_IsValid(value));
  set_has_post();
  post_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildAppointRpgReq.Post)
}

// -------------------------------------------------------------------

// TGuildDemiseReq

// optional uint64 Uid = 1;
inline bool TGuildDemiseReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildDemiseReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildDemiseReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildDemiseReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TGuildDemiseReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildDemiseReq.Uid)
  return uid_;
}
inline void TGuildDemiseReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildDemiseReq.Uid)
}

// -------------------------------------------------------------------

// TGuildRemoveReq

// optional uint64 Uid = 1;
inline bool TGuildRemoveReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildRemoveReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildRemoveReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildRemoveReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TGuildRemoveReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildRemoveReq.Uid)
  return uid_;
}
inline void TGuildRemoveReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildRemoveReq.Uid)
}

// -------------------------------------------------------------------

// TGuildDonateReq

// optional uint32 Type = 1;
inline bool TGuildDonateReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildDonateReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildDonateReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildDonateReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 TGuildDonateReq::type() const {
  // @@protoc_insertion_point(field_get:pb.TGuildDonateReq.Type)
  return type_;
}
inline void TGuildDonateReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildDonateReq.Type)
}

// optional uint32 Index = 2;
inline bool TGuildDonateReq::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildDonateReq::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildDonateReq::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildDonateReq::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 TGuildDonateReq::index() const {
  // @@protoc_insertion_point(field_get:pb.TGuildDonateReq.Index)
  return index_;
}
inline void TGuildDonateReq::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildDonateReq.Index)
}

// -------------------------------------------------------------------

// TGuildLevelRankInfo

// optional uint64 GuildId = 1;
inline bool TGuildLevelRankInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildLevelRankInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildLevelRankInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildLevelRankInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TGuildLevelRankInfo::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildLevelRankInfo.GuildId)
  return guildid_;
}
inline void TGuildLevelRankInfo::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildLevelRankInfo.GuildId)
}

// optional string GuildName = 2;
inline bool TGuildLevelRankInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildLevelRankInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildLevelRankInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildLevelRankInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& TGuildLevelRankInfo::guildname() const {
  // @@protoc_insertion_point(field_get:pb.TGuildLevelRankInfo.GuildName)
  return *guildname_;
}
inline void TGuildLevelRankInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildLevelRankInfo.GuildName)
}
inline void TGuildLevelRankInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildLevelRankInfo.GuildName)
}
inline void TGuildLevelRankInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildLevelRankInfo.GuildName)
}
inline ::std::string* TGuildLevelRankInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildLevelRankInfo.GuildName)
  return guildname_;
}
inline ::std::string* TGuildLevelRankInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildLevelRankInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildLevelRankInfo.GuildName)
}

// optional uint32 GuildLevel = 3;
inline bool TGuildLevelRankInfo::has_guildlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildLevelRankInfo::set_has_guildlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildLevelRankInfo::clear_has_guildlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildLevelRankInfo::clear_guildlevel() {
  guildlevel_ = 0u;
  clear_has_guildlevel();
}
inline ::google::protobuf::uint32 TGuildLevelRankInfo::guildlevel() const {
  // @@protoc_insertion_point(field_get:pb.TGuildLevelRankInfo.GuildLevel)
  return guildlevel_;
}
inline void TGuildLevelRankInfo::set_guildlevel(::google::protobuf::uint32 value) {
  set_has_guildlevel();
  guildlevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildLevelRankInfo.GuildLevel)
}

// optional string BannerName = 4;
inline bool TGuildLevelRankInfo::has_bannername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildLevelRankInfo::set_has_bannername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildLevelRankInfo::clear_has_bannername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildLevelRankInfo::clear_bannername() {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_->clear();
  }
  clear_has_bannername();
}
inline const ::std::string& TGuildLevelRankInfo::bannername() const {
  // @@protoc_insertion_point(field_get:pb.TGuildLevelRankInfo.BannerName)
  return *bannername_;
}
inline void TGuildLevelRankInfo::set_bannername(const ::std::string& value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildLevelRankInfo.BannerName)
}
inline void TGuildLevelRankInfo::set_bannername(const char* value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildLevelRankInfo.BannerName)
}
inline void TGuildLevelRankInfo::set_bannername(const char* value, size_t size) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildLevelRankInfo.BannerName)
}
inline ::std::string* TGuildLevelRankInfo::mutable_bannername() {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildLevelRankInfo.BannerName)
  return bannername_;
}
inline ::std::string* TGuildLevelRankInfo::release_bannername() {
  clear_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bannername_;
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildLevelRankInfo::set_allocated_bannername(::std::string* bannername) {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (bannername) {
    set_has_bannername();
    bannername_ = bannername;
  } else {
    clear_has_bannername();
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildLevelRankInfo.BannerName)
}

// optional uint32 BannerBase = 5;
inline bool TGuildLevelRankInfo::has_bannerbase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildLevelRankInfo::set_has_bannerbase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildLevelRankInfo::clear_has_bannerbase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildLevelRankInfo::clear_bannerbase() {
  bannerbase_ = 0u;
  clear_has_bannerbase();
}
inline ::google::protobuf::uint32 TGuildLevelRankInfo::bannerbase() const {
  // @@protoc_insertion_point(field_get:pb.TGuildLevelRankInfo.BannerBase)
  return bannerbase_;
}
inline void TGuildLevelRankInfo::set_bannerbase(::google::protobuf::uint32 value) {
  set_has_bannerbase();
  bannerbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildLevelRankInfo.BannerBase)
}

// optional uint32 Htid = 6;
inline bool TGuildLevelRankInfo::has_htid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildLevelRankInfo::set_has_htid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildLevelRankInfo::clear_has_htid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildLevelRankInfo::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TGuildLevelRankInfo::htid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildLevelRankInfo.Htid)
  return htid_;
}
inline void TGuildLevelRankInfo::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildLevelRankInfo.Htid)
}

// -------------------------------------------------------------------

// TGuildGetLevelRankReq

// optional uint32 Offset = 1;
inline bool TGuildGetLevelRankReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildGetLevelRankReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildGetLevelRankReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildGetLevelRankReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TGuildGetLevelRankReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetLevelRankReq.Offset)
  return offset_;
}
inline void TGuildGetLevelRankReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetLevelRankReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TGuildGetLevelRankReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildGetLevelRankReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildGetLevelRankReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildGetLevelRankReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TGuildGetLevelRankReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetLevelRankReq.Limit)
  return limit_;
}
inline void TGuildGetLevelRankReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetLevelRankReq.Limit)
}

// -------------------------------------------------------------------

// TGuildGetLevelRankRsp

// repeated .pb.TGuildLevelRankInfo RankArr = 1;
inline int TGuildGetLevelRankRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TGuildGetLevelRankRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TGuildLevelRankInfo& TGuildGetLevelRankRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetLevelRankRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TGuildLevelRankInfo* TGuildGetLevelRankRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetLevelRankRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TGuildLevelRankInfo* TGuildGetLevelRankRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildGetLevelRankRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildLevelRankInfo >&
TGuildGetLevelRankRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetLevelRankRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildLevelRankInfo >*
TGuildGetLevelRankRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetLevelRankRsp.RankArr)
  return &rankarr_;
}

// optional int32 MyRank = 2;
inline bool TGuildGetLevelRankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildGetLevelRankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildGetLevelRankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildGetLevelRankRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TGuildGetLevelRankRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetLevelRankRsp.MyRank)
  return myrank_;
}
inline void TGuildGetLevelRankRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetLevelRankRsp.MyRank)
}

// -------------------------------------------------------------------

// TGuildFightForceRankInfo

// optional uint64 GuildId = 1;
inline bool TGuildFightForceRankInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildFightForceRankInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildFightForceRankInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildFightForceRankInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TGuildFightForceRankInfo::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildFightForceRankInfo.GuildId)
  return guildid_;
}
inline void TGuildFightForceRankInfo::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildFightForceRankInfo.GuildId)
}

// optional string GuildName = 2;
inline bool TGuildFightForceRankInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildFightForceRankInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildFightForceRankInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildFightForceRankInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& TGuildFightForceRankInfo::guildname() const {
  // @@protoc_insertion_point(field_get:pb.TGuildFightForceRankInfo.GuildName)
  return *guildname_;
}
inline void TGuildFightForceRankInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildFightForceRankInfo.GuildName)
}
inline void TGuildFightForceRankInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildFightForceRankInfo.GuildName)
}
inline void TGuildFightForceRankInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildFightForceRankInfo.GuildName)
}
inline ::std::string* TGuildFightForceRankInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildFightForceRankInfo.GuildName)
  return guildname_;
}
inline ::std::string* TGuildFightForceRankInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildFightForceRankInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildFightForceRankInfo.GuildName)
}

// optional uint64 FightForce = 3;
inline bool TGuildFightForceRankInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildFightForceRankInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildFightForceRankInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildFightForceRankInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TGuildFightForceRankInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TGuildFightForceRankInfo.FightForce)
  return fightforce_;
}
inline void TGuildFightForceRankInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildFightForceRankInfo.FightForce)
}

// optional string BannerName = 4;
inline bool TGuildFightForceRankInfo::has_bannername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildFightForceRankInfo::set_has_bannername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildFightForceRankInfo::clear_has_bannername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildFightForceRankInfo::clear_bannername() {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_->clear();
  }
  clear_has_bannername();
}
inline const ::std::string& TGuildFightForceRankInfo::bannername() const {
  // @@protoc_insertion_point(field_get:pb.TGuildFightForceRankInfo.BannerName)
  return *bannername_;
}
inline void TGuildFightForceRankInfo::set_bannername(const ::std::string& value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildFightForceRankInfo.BannerName)
}
inline void TGuildFightForceRankInfo::set_bannername(const char* value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildFightForceRankInfo.BannerName)
}
inline void TGuildFightForceRankInfo::set_bannername(const char* value, size_t size) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildFightForceRankInfo.BannerName)
}
inline ::std::string* TGuildFightForceRankInfo::mutable_bannername() {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildFightForceRankInfo.BannerName)
  return bannername_;
}
inline ::std::string* TGuildFightForceRankInfo::release_bannername() {
  clear_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bannername_;
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildFightForceRankInfo::set_allocated_bannername(::std::string* bannername) {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (bannername) {
    set_has_bannername();
    bannername_ = bannername;
  } else {
    clear_has_bannername();
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildFightForceRankInfo.BannerName)
}

// optional uint32 BannerBase = 5;
inline bool TGuildFightForceRankInfo::has_bannerbase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildFightForceRankInfo::set_has_bannerbase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildFightForceRankInfo::clear_has_bannerbase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildFightForceRankInfo::clear_bannerbase() {
  bannerbase_ = 0u;
  clear_has_bannerbase();
}
inline ::google::protobuf::uint32 TGuildFightForceRankInfo::bannerbase() const {
  // @@protoc_insertion_point(field_get:pb.TGuildFightForceRankInfo.BannerBase)
  return bannerbase_;
}
inline void TGuildFightForceRankInfo::set_bannerbase(::google::protobuf::uint32 value) {
  set_has_bannerbase();
  bannerbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildFightForceRankInfo.BannerBase)
}

// optional uint32 Htid = 6;
inline bool TGuildFightForceRankInfo::has_htid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildFightForceRankInfo::set_has_htid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildFightForceRankInfo::clear_has_htid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildFightForceRankInfo::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TGuildFightForceRankInfo::htid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildFightForceRankInfo.Htid)
  return htid_;
}
inline void TGuildFightForceRankInfo::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildFightForceRankInfo.Htid)
}

// -------------------------------------------------------------------

// TGuildGetFightForceRankReq

// optional uint32 Offset = 1;
inline bool TGuildGetFightForceRankReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildGetFightForceRankReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildGetFightForceRankReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildGetFightForceRankReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TGuildGetFightForceRankReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetFightForceRankReq.Offset)
  return offset_;
}
inline void TGuildGetFightForceRankReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetFightForceRankReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TGuildGetFightForceRankReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildGetFightForceRankReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildGetFightForceRankReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildGetFightForceRankReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TGuildGetFightForceRankReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetFightForceRankReq.Limit)
  return limit_;
}
inline void TGuildGetFightForceRankReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetFightForceRankReq.Limit)
}

// -------------------------------------------------------------------

// TGuildGetFightForceRankRsp

// repeated .pb.TGuildFightForceRankInfo RankArr = 1;
inline int TGuildGetFightForceRankRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TGuildGetFightForceRankRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TGuildFightForceRankInfo& TGuildGetFightForceRankRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetFightForceRankRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TGuildFightForceRankInfo* TGuildGetFightForceRankRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetFightForceRankRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TGuildFightForceRankInfo* TGuildGetFightForceRankRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildGetFightForceRankRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildFightForceRankInfo >&
TGuildGetFightForceRankRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetFightForceRankRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildFightForceRankInfo >*
TGuildGetFightForceRankRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetFightForceRankRsp.RankArr)
  return &rankarr_;
}

// optional int32 MyRank = 2;
inline bool TGuildGetFightForceRankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildGetFightForceRankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildGetFightForceRankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildGetFightForceRankRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TGuildGetFightForceRankRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetFightForceRankRsp.MyRank)
  return myrank_;
}
inline void TGuildGetFightForceRankRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetFightForceRankRsp.MyRank)
}

// -------------------------------------------------------------------

// TGuildTreasMapFixReq

// optional uint32 FixNum = 1;
inline bool TGuildTreasMapFixReq::has_fixnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildTreasMapFixReq::set_has_fixnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildTreasMapFixReq::clear_has_fixnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildTreasMapFixReq::clear_fixnum() {
  fixnum_ = 0u;
  clear_has_fixnum();
}
inline ::google::protobuf::uint32 TGuildTreasMapFixReq::fixnum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildTreasMapFixReq.FixNum)
  return fixnum_;
}
inline void TGuildTreasMapFixReq::set_fixnum(::google::protobuf::uint32 value) {
  set_has_fixnum();
  fixnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildTreasMapFixReq.FixNum)
}

// -------------------------------------------------------------------

// TGuildTreasMapFixRsp

// optional .pb.TGuildTreasMapFix fixInfo = 1;
inline bool TGuildTreasMapFixRsp::has_fixinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildTreasMapFixRsp::set_has_fixinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildTreasMapFixRsp::clear_has_fixinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildTreasMapFixRsp::clear_fixinfo() {
  if (fixinfo_ != NULL) fixinfo_->::pb::TGuildTreasMapFix::Clear();
  clear_has_fixinfo();
}
inline const ::pb::TGuildTreasMapFix& TGuildTreasMapFixRsp::fixinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildTreasMapFixRsp.fixInfo)
  return fixinfo_ != NULL ? *fixinfo_ : *default_instance_->fixinfo_;
}
inline ::pb::TGuildTreasMapFix* TGuildTreasMapFixRsp::mutable_fixinfo() {
  set_has_fixinfo();
  if (fixinfo_ == NULL) fixinfo_ = new ::pb::TGuildTreasMapFix;
  // @@protoc_insertion_point(field_mutable:pb.TGuildTreasMapFixRsp.fixInfo)
  return fixinfo_;
}
inline ::pb::TGuildTreasMapFix* TGuildTreasMapFixRsp::release_fixinfo() {
  clear_has_fixinfo();
  ::pb::TGuildTreasMapFix* temp = fixinfo_;
  fixinfo_ = NULL;
  return temp;
}
inline void TGuildTreasMapFixRsp::set_allocated_fixinfo(::pb::TGuildTreasMapFix* fixinfo) {
  delete fixinfo_;
  fixinfo_ = fixinfo;
  if (fixinfo) {
    set_has_fixinfo();
  } else {
    clear_has_fixinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildTreasMapFixRsp.fixInfo)
}

// optional uint32 ret = 2;
inline bool TGuildTreasMapFixRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildTreasMapFixRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildTreasMapFixRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildTreasMapFixRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 TGuildTreasMapFixRsp::ret() const {
  // @@protoc_insertion_point(field_get:pb.TGuildTreasMapFixRsp.ret)
  return ret_;
}
inline void TGuildTreasMapFixRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildTreasMapFixRsp.ret)
}

// -------------------------------------------------------------------

// TGuildTreasMapFixRewardRsp

// optional .pb.TGuildTreasMapFix fixInfo = 1;
inline bool TGuildTreasMapFixRewardRsp::has_fixinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildTreasMapFixRewardRsp::set_has_fixinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildTreasMapFixRewardRsp::clear_has_fixinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildTreasMapFixRewardRsp::clear_fixinfo() {
  if (fixinfo_ != NULL) fixinfo_->::pb::TGuildTreasMapFix::Clear();
  clear_has_fixinfo();
}
inline const ::pb::TGuildTreasMapFix& TGuildTreasMapFixRewardRsp::fixinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildTreasMapFixRewardRsp.fixInfo)
  return fixinfo_ != NULL ? *fixinfo_ : *default_instance_->fixinfo_;
}
inline ::pb::TGuildTreasMapFix* TGuildTreasMapFixRewardRsp::mutable_fixinfo() {
  set_has_fixinfo();
  if (fixinfo_ == NULL) fixinfo_ = new ::pb::TGuildTreasMapFix;
  // @@protoc_insertion_point(field_mutable:pb.TGuildTreasMapFixRewardRsp.fixInfo)
  return fixinfo_;
}
inline ::pb::TGuildTreasMapFix* TGuildTreasMapFixRewardRsp::release_fixinfo() {
  clear_has_fixinfo();
  ::pb::TGuildTreasMapFix* temp = fixinfo_;
  fixinfo_ = NULL;
  return temp;
}
inline void TGuildTreasMapFixRewardRsp::set_allocated_fixinfo(::pb::TGuildTreasMapFix* fixinfo) {
  delete fixinfo_;
  fixinfo_ = fixinfo;
  if (fixinfo) {
    set_has_fixinfo();
  } else {
    clear_has_fixinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildTreasMapFixRewardRsp.fixInfo)
}

// repeated .pb.TCommonReward RewardArray = 2;
inline int TGuildTreasMapFixRewardRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TGuildTreasMapFixRewardRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TGuildTreasMapFixRewardRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildTreasMapFixRewardRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TGuildTreasMapFixRewardRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildTreasMapFixRewardRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TGuildTreasMapFixRewardRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TGuildTreasMapFixRewardRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TGuildTreasMapFixRewardRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TGuildTreasMapFixRewardRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TGuildTreasMapFixRewardRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildTreasMapFixRewardRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TSlgGuildSyncMember

// optional uint64 Uid = 1;
inline bool TSlgGuildSyncMember::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgGuildSyncMember::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgGuildSyncMember::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgGuildSyncMember::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TSlgGuildSyncMember::uid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgGuildSyncMember.Uid)
  return uid_;
}
inline void TSlgGuildSyncMember::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgGuildSyncMember.Uid)
}

// optional .pb.EGuildPost Post = 2;
inline bool TSlgGuildSyncMember::has_post() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSlgGuildSyncMember::set_has_post() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSlgGuildSyncMember::clear_has_post() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSlgGuildSyncMember::clear_post() {
  post_ = 0;
  clear_has_post();
}
inline ::pb::EGuildPost TSlgGuildSyncMember::post() const {
  // @@protoc_insertion_point(field_get:pb.TSlgGuildSyncMember.Post)
  return static_cast< ::pb::EGuildPost >(post_);
}
inline void TSlgGuildSyncMember::set_post(::pb::EGuildPost value) {
  assert(::pb::EGuildPost_IsValid(value));
  set_has_post();
  post_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgGuildSyncMember.Post)
}

// -------------------------------------------------------------------

// TGuildGetSyncInfoReq

// optional uint64 GuildId = 1;
inline bool TGuildGetSyncInfoReq::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildGetSyncInfoReq::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildGetSyncInfoReq::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildGetSyncInfoReq::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TGuildGetSyncInfoReq::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetSyncInfoReq.GuildId)
  return guildid_;
}
inline void TGuildGetSyncInfoReq::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetSyncInfoReq.GuildId)
}

// -------------------------------------------------------------------

// TGuildGetSyncInfoRsp

// repeated .pb.TSlgGuildSyncMember MemberArr = 1;
inline int TGuildGetSyncInfoRsp::memberarr_size() const {
  return memberarr_.size();
}
inline void TGuildGetSyncInfoRsp::clear_memberarr() {
  memberarr_.Clear();
}
inline const ::pb::TSlgGuildSyncMember& TGuildGetSyncInfoRsp::memberarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetSyncInfoRsp.MemberArr)
  return memberarr_.Get(index);
}
inline ::pb::TSlgGuildSyncMember* TGuildGetSyncInfoRsp::mutable_memberarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetSyncInfoRsp.MemberArr)
  return memberarr_.Mutable(index);
}
inline ::pb::TSlgGuildSyncMember* TGuildGetSyncInfoRsp::add_memberarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildGetSyncInfoRsp.MemberArr)
  return memberarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgGuildSyncMember >&
TGuildGetSyncInfoRsp::memberarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetSyncInfoRsp.MemberArr)
  return memberarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgGuildSyncMember >*
TGuildGetSyncInfoRsp::mutable_memberarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetSyncInfoRsp.MemberArr)
  return &memberarr_;
}

// -------------------------------------------------------------------

// TGuildChangeGnameReq

// optional string Gname = 1;
inline bool TGuildChangeGnameReq::has_gname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildChangeGnameReq::set_has_gname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildChangeGnameReq::clear_has_gname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildChangeGnameReq::clear_gname() {
  if (gname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gname_->clear();
  }
  clear_has_gname();
}
inline const ::std::string& TGuildChangeGnameReq::gname() const {
  // @@protoc_insertion_point(field_get:pb.TGuildChangeGnameReq.Gname)
  return *gname_;
}
inline void TGuildChangeGnameReq::set_gname(const ::std::string& value) {
  set_has_gname();
  if (gname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gname_ = new ::std::string;
  }
  gname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildChangeGnameReq.Gname)
}
inline void TGuildChangeGnameReq::set_gname(const char* value) {
  set_has_gname();
  if (gname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gname_ = new ::std::string;
  }
  gname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildChangeGnameReq.Gname)
}
inline void TGuildChangeGnameReq::set_gname(const char* value, size_t size) {
  set_has_gname();
  if (gname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gname_ = new ::std::string;
  }
  gname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildChangeGnameReq.Gname)
}
inline ::std::string* TGuildChangeGnameReq::mutable_gname() {
  set_has_gname();
  if (gname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildChangeGnameReq.Gname)
  return gname_;
}
inline ::std::string* TGuildChangeGnameReq::release_gname() {
  clear_has_gname();
  if (gname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gname_;
    gname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildChangeGnameReq::set_allocated_gname(::std::string* gname) {
  if (gname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gname_;
  }
  if (gname) {
    set_has_gname();
    gname_ = gname;
  } else {
    clear_has_gname();
    gname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildChangeGnameReq.Gname)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EReviewMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EReviewMode>() {
  return ::pb::EReviewMode_descriptor();
}
template <> struct is_proto_enum< ::pb::EVerifyRet> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EVerifyRet>() {
  return ::pb::EVerifyRet_descriptor();
}
template <> struct is_proto_enum< ::pb::ETipType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ETipType>() {
  return ::pb::ETipType_descriptor();
}
template <> struct is_proto_enum< ::pb::ETMFRet> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ETMFRet>() {
  return ::pb::ETMFRet_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fGuild_2eproto__INCLUDED
