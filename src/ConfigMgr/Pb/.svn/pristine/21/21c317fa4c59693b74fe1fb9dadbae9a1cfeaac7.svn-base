// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActLanternFeatival.proto

#ifndef PROTOBUF_net_2fActLanternFeatival_2eproto__INCLUDED
#define PROTOBUF_net_2fActLanternFeatival_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/OpenActivity.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto();
void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto();

class TActLanternFestivalBuyInfo;
class TActLanternFestivalTaskInfo;
class TActLanternFestivalLanternInfo;
class TActLanternFestivalGrandPrizeInfo;
class TActLanternFestivalGetInfoRsp;
class TActLanternFestivalGetTaskInfoRsp;
class TActLanternFestivalGetTaskRewardReq;
class TActLanternFestivalGetTaskRewardRsp;
class TActLanternFestivalGetScoreRewardReq;
class TActLanternFestivalGetScoreRewardRsp;
class TActLanternFestivalLightUpOrShowLanternReq;
class TActLanternFestivalLightUpOrShowLanternRsp;
class TActLanternFestivalLoopLayerReq;
class TActLanternFestivalSetLayerFinallyRewardReq;
class TActLanternFestivalNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActLanternFestivalBuyInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLanternFeatival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLanternFestivalBuyInfo : public ::google::protobuf::Message {
 public:
  TActLanternFestivalBuyInfo();
  virtual ~TActLanternFestivalBuyInfo();

  TActLanternFestivalBuyInfo(const TActLanternFestivalBuyInfo& from);

  inline TActLanternFestivalBuyInfo& operator=(const TActLanternFestivalBuyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLanternFestivalBuyInfo& default_instance();

  void Swap(TActLanternFestivalBuyInfo* other);

  // implements Message ----------------------------------------------

  TActLanternFestivalBuyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLanternFestivalBuyInfo& from);
  void MergeFrom(const TActLanternFestivalBuyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalBuyInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalBuyInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint64 BuyTime = 3;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalBuyInfo</name>
  	<Function>
  		<name>buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 buytime() const;
  inline void set_buytime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActLanternFestivalBuyInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_buytime();
  inline void clear_has_buytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint64 buytime_;
  friend void  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto();

  void InitAsDefaultInstance();
  static TActLanternFestivalBuyInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLanternFestivalTaskInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLanternFeatival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLanternFestivalTaskInfo : public ::google::protobuf::Message {
 public:
  TActLanternFestivalTaskInfo();
  virtual ~TActLanternFestivalTaskInfo();

  TActLanternFestivalTaskInfo(const TActLanternFestivalTaskInfo& from);

  inline TActLanternFestivalTaskInfo& operator=(const TActLanternFestivalTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLanternFestivalTaskInfo& default_instance();

  void Swap(TActLanternFestivalTaskInfo* other);

  // implements Message ----------------------------------------------

  TActLanternFestivalTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLanternFestivalTaskInfo& from);
  void MergeFrom(const TActLanternFestivalTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskType = 1;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalTaskInfo</name>
  	<Function>
  		<name>tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tasktype() const;
  inline void set_tasktype(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalTaskInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActLanternFestivalTaskInfo)
 private:
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tasktype_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto();

  void InitAsDefaultInstance();
  static TActLanternFestivalTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLanternFestivalLanternInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLanternFeatival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLanternFestivalLanternInfo : public ::google::protobuf::Message {
 public:
  TActLanternFestivalLanternInfo();
  virtual ~TActLanternFestivalLanternInfo();

  TActLanternFestivalLanternInfo(const TActLanternFestivalLanternInfo& from);

  inline TActLanternFestivalLanternInfo& operator=(const TActLanternFestivalLanternInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLanternFestivalLanternInfo& default_instance();

  void Swap(TActLanternFestivalLanternInfo* other);

  // implements Message ----------------------------------------------

  TActLanternFestivalLanternInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLanternFestivalLanternInfo& from);
  void MergeFrom(const TActLanternFestivalLanternInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LanternId = 1;
  inline bool has_lanternid() const;
  inline void clear_lanternid();
  static const int kLanternIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalLanternInfo</name>
  	<Function>
  		<name>lanternid</name>
  		<replaceName>LanternId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lanternid</name>
  		<replaceName>LanternId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lanternid</name>
  		<replaceName>LanternId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 lanternid() const;
  inline void set_lanternid(::google::protobuf::uint32 value);

  // optional .pb.TCommonReward Reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalLanternInfo</name>
  	<Function>
  		<name>reward</name>
  		<replaceName>Reward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reward</name>
  		<replaceName>Reward</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_reward</name>
  		<replaceName>Reward</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reward</name>
  		<replaceName>Reward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& reward() const;
  inline ::pb::TCommonReward* mutable_reward();
  inline ::pb::TCommonReward* release_reward();
  inline void set_allocated_reward(::pb::TCommonReward* reward);

  // @@protoc_insertion_point(class_scope:pb.TActLanternFestivalLanternInfo)
 private:
  inline void set_has_lanternid();
  inline void clear_has_lanternid();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TCommonReward* reward_;
  ::google::protobuf::uint32 lanternid_;
  friend void  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto();

  void InitAsDefaultInstance();
  static TActLanternFestivalLanternInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLanternFestivalGrandPrizeInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLanternFeatival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLanternFestivalGrandPrizeInfo : public ::google::protobuf::Message {
 public:
  TActLanternFestivalGrandPrizeInfo();
  virtual ~TActLanternFestivalGrandPrizeInfo();

  TActLanternFestivalGrandPrizeInfo(const TActLanternFestivalGrandPrizeInfo& from);

  inline TActLanternFestivalGrandPrizeInfo& operator=(const TActLanternFestivalGrandPrizeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLanternFestivalGrandPrizeInfo& default_instance();

  void Swap(TActLanternFestivalGrandPrizeInfo* other);

  // implements Message ----------------------------------------------

  TActLanternFestivalGrandPrizeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLanternFestivalGrandPrizeInfo& from);
  void MergeFrom(const TActLanternFestivalGrandPrizeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerId = 1;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGrandPrizeInfo</name>
  	<Function>
  		<name>layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerid() const;
  inline void set_layerid(::google::protobuf::uint32 value);

  // optional uint32 GrandPrizeIndex = 2;
  inline bool has_grandprizeindex() const;
  inline void clear_grandprizeindex();
  static const int kGrandPrizeIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGrandPrizeInfo</name>
  	<Function>
  		<name>grandprizeindex</name>
  		<replaceName>GrandPrizeIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_grandprizeindex</name>
  		<replaceName>GrandPrizeIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_grandprizeindex</name>
  		<replaceName>GrandPrizeIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 grandprizeindex() const;
  inline void set_grandprizeindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActLanternFestivalGrandPrizeInfo)
 private:
  inline void set_has_layerid();
  inline void clear_has_layerid();
  inline void set_has_grandprizeindex();
  inline void clear_has_grandprizeindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layerid_;
  ::google::protobuf::uint32 grandprizeindex_;
  friend void  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto();

  void InitAsDefaultInstance();
  static TActLanternFestivalGrandPrizeInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLanternFestivalGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLanternFeatival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLanternFestivalGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActLanternFestivalGetInfoRsp();
  virtual ~TActLanternFestivalGetInfoRsp();

  TActLanternFestivalGetInfoRsp(const TActLanternFestivalGetInfoRsp& from);

  inline TActLanternFestivalGetInfoRsp& operator=(const TActLanternFestivalGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLanternFestivalGetInfoRsp& default_instance();

  void Swap(TActLanternFestivalGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActLanternFestivalGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLanternFestivalGetInfoRsp& from);
  void MergeFrom(const TActLanternFestivalGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActLanternFestivalBuyInfo ArrRmbGoodBuyInfo = 1;
  inline int arrrmbgoodbuyinfo_size() const;
  inline void clear_arrrmbgoodbuyinfo();
  static const int kArrRmbGoodBuyInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGetInfoRsp</name>
  	<Function>
  		<name>arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrmbgoodbuyinfo_size</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLanternFestivalBuyInfo& arrrmbgoodbuyinfo(int index) const;
  inline ::pb::TActLanternFestivalBuyInfo* mutable_arrrmbgoodbuyinfo(int index);
  inline ::pb::TActLanternFestivalBuyInfo* add_arrrmbgoodbuyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalBuyInfo >&
      arrrmbgoodbuyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalBuyInfo >*
      mutable_arrrmbgoodbuyinfo();

  // optional uint32 LayerId = 2;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGetInfoRsp</name>
  	<Function>
  		<name>layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerid() const;
  inline void set_layerid(::google::protobuf::uint32 value);

  // repeated .pb.TActLanternFestivalLanternInfo TotalLanternInfo = 3;
  inline int totallanterninfo_size() const;
  inline void clear_totallanterninfo();
  static const int kTotalLanternInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGetInfoRsp</name>
  	<Function>
  		<name>totallanterninfo</name>
  		<replaceName>TotalLanternInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_totallanterninfo</name>
  		<replaceName>TotalLanternInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_totallanterninfo</name>
  		<replaceName>TotalLanternInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totallanterninfo</name>
  		<replaceName>TotalLanternInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>totallanterninfo_size</name>
  		<replaceName>TotalLanternInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLanternFestivalLanternInfo& totallanterninfo(int index) const;
  inline ::pb::TActLanternFestivalLanternInfo* mutable_totallanterninfo(int index);
  inline ::pb::TActLanternFestivalLanternInfo* add_totallanterninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalLanternInfo >&
      totallanterninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalLanternInfo >*
      mutable_totallanterninfo();

  // optional uint32 GrandPrizeStatus = 4;
  inline bool has_grandprizestatus() const;
  inline void clear_grandprizestatus();
  static const int kGrandPrizeStatusFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGetInfoRsp</name>
  	<Function>
  		<name>grandprizestatus</name>
  		<replaceName>GrandPrizeStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_grandprizestatus</name>
  		<replaceName>GrandPrizeStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_grandprizestatus</name>
  		<replaceName>GrandPrizeStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 grandprizestatus() const;
  inline void set_grandprizestatus(::google::protobuf::uint32 value);

  // optional uint32 ResetTime = 5;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResetTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGetInfoRsp</name>
  	<Function>
  		<name>resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 resettime() const;
  inline void set_resettime(::google::protobuf::uint32 value);

  // optional .pb.TActLanternFestivalGrandPrizeInfo GrandPrizeInfo = 6;
  inline bool has_grandprizeinfo() const;
  inline void clear_grandprizeinfo();
  static const int kGrandPrizeInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGetInfoRsp</name>
  	<Function>
  		<name>grandprizeinfo</name>
  		<replaceName>GrandPrizeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_grandprizeinfo</name>
  		<replaceName>GrandPrizeInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_grandprizeinfo</name>
  		<replaceName>GrandPrizeInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_grandprizeinfo</name>
  		<replaceName>GrandPrizeInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLanternFestivalGrandPrizeInfo& grandprizeinfo() const;
  inline ::pb::TActLanternFestivalGrandPrizeInfo* mutable_grandprizeinfo();
  inline ::pb::TActLanternFestivalGrandPrizeInfo* release_grandprizeinfo();
  inline void set_allocated_grandprizeinfo(::pb::TActLanternFestivalGrandPrizeInfo* grandprizeinfo);

  // repeated .pb.TActLanternFestivalGrandPrizeInfo AllGrandPrizeArr = 7;
  inline int allgrandprizearr_size() const;
  inline void clear_allgrandprizearr();
  static const int kAllGrandPrizeArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGetInfoRsp</name>
  	<Function>
  		<name>allgrandprizearr</name>
  		<replaceName>AllGrandPrizeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_allgrandprizearr</name>
  		<replaceName>AllGrandPrizeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_allgrandprizearr</name>
  		<replaceName>AllGrandPrizeArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allgrandprizearr</name>
  		<replaceName>AllGrandPrizeArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>allgrandprizearr_size</name>
  		<replaceName>AllGrandPrizeArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLanternFestivalGrandPrizeInfo& allgrandprizearr(int index) const;
  inline ::pb::TActLanternFestivalGrandPrizeInfo* mutable_allgrandprizearr(int index);
  inline ::pb::TActLanternFestivalGrandPrizeInfo* add_allgrandprizearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalGrandPrizeInfo >&
      allgrandprizearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalGrandPrizeInfo >*
      mutable_allgrandprizearr();

  // @@protoc_insertion_point(class_scope:pb.TActLanternFestivalGetInfoRsp)
 private:
  inline void set_has_layerid();
  inline void clear_has_layerid();
  inline void set_has_grandprizestatus();
  inline void clear_has_grandprizestatus();
  inline void set_has_resettime();
  inline void clear_has_resettime();
  inline void set_has_grandprizeinfo();
  inline void clear_has_grandprizeinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalBuyInfo > arrrmbgoodbuyinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalLanternInfo > totallanterninfo_;
  ::google::protobuf::uint32 layerid_;
  ::google::protobuf::uint32 grandprizestatus_;
  ::pb::TActLanternFestivalGrandPrizeInfo* grandprizeinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalGrandPrizeInfo > allgrandprizearr_;
  ::google::protobuf::uint32 resettime_;
  friend void  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto();

  void InitAsDefaultInstance();
  static TActLanternFestivalGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLanternFestivalGetTaskInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLanternFeatival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLanternFestivalGetTaskInfoRsp : public ::google::protobuf::Message {
 public:
  TActLanternFestivalGetTaskInfoRsp();
  virtual ~TActLanternFestivalGetTaskInfoRsp();

  TActLanternFestivalGetTaskInfoRsp(const TActLanternFestivalGetTaskInfoRsp& from);

  inline TActLanternFestivalGetTaskInfoRsp& operator=(const TActLanternFestivalGetTaskInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLanternFestivalGetTaskInfoRsp& default_instance();

  void Swap(TActLanternFestivalGetTaskInfoRsp* other);

  // implements Message ----------------------------------------------

  TActLanternFestivalGetTaskInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLanternFestivalGetTaskInfoRsp& from);
  void MergeFrom(const TActLanternFestivalGetTaskInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActLanternFestivalTaskInfo TaskInfo = 1;
  inline int taskinfo_size() const;
  inline void clear_taskinfo();
  static const int kTaskInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGetTaskInfoRsp</name>
  	<Function>
  		<name>taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>taskinfo_size</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLanternFestivalTaskInfo& taskinfo(int index) const;
  inline ::pb::TActLanternFestivalTaskInfo* mutable_taskinfo(int index);
  inline ::pb::TActLanternFestivalTaskInfo* add_taskinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalTaskInfo >&
      taskinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalTaskInfo >*
      mutable_taskinfo();

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 2;
  inline int arrtaskrewardinfo_size() const;
  inline void clear_arrtaskrewardinfo();
  static const int kArrTaskRewardInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGetTaskInfoRsp</name>
  	<Function>
  		<name>arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskrewardinfo_size</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityRewardInfo& arrtaskrewardinfo(int index) const;
  inline ::pb::TActivityRewardInfo* mutable_arrtaskrewardinfo(int index);
  inline ::pb::TActivityRewardInfo* add_arrtaskrewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
      arrtaskrewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
      mutable_arrtaskrewardinfo();

  // optional uint32 Score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGetTaskInfoRsp</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // repeated uint32 ScoreAward = 4;
  inline int scoreaward_size() const;
  inline void clear_scoreaward();
  static const int kScoreAwardFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGetTaskInfoRsp</name>
  	<Function>
  		<name>scoreaward</name>
  		<replaceName>ScoreAward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_scoreaward</name>
  		<replaceName>ScoreAward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_scoreaward</name>
  		<replaceName>ScoreAward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scoreaward</name>
  		<replaceName>ScoreAward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>scoreaward_size</name>
  		<replaceName>ScoreAward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scoreaward(int index) const;
  inline void set_scoreaward(int index, ::google::protobuf::uint32 value);
  inline void add_scoreaward(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      scoreaward() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_scoreaward();

  // @@protoc_insertion_point(class_scope:pb.TActLanternFestivalGetTaskInfoRsp)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalTaskInfo > taskinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo > arrtaskrewardinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > scoreaward_;
  ::google::protobuf::uint32 score_;
  friend void  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto();

  void InitAsDefaultInstance();
  static TActLanternFestivalGetTaskInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLanternFestivalGetTaskRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLanternFeatival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLanternFestivalGetTaskRewardReq : public ::google::protobuf::Message {
 public:
  TActLanternFestivalGetTaskRewardReq();
  virtual ~TActLanternFestivalGetTaskRewardReq();

  TActLanternFestivalGetTaskRewardReq(const TActLanternFestivalGetTaskRewardReq& from);

  inline TActLanternFestivalGetTaskRewardReq& operator=(const TActLanternFestivalGetTaskRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLanternFestivalGetTaskRewardReq& default_instance();

  void Swap(TActLanternFestivalGetTaskRewardReq* other);

  // implements Message ----------------------------------------------

  TActLanternFestivalGetTaskRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLanternFestivalGetTaskRewardReq& from);
  void MergeFrom(const TActLanternFestivalGetTaskRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGetTaskRewardReq</name>
  	<Function>
  		<name>taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActLanternFestivalGetTaskRewardReq)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 taskid_;
  friend void  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto();

  void InitAsDefaultInstance();
  static TActLanternFestivalGetTaskRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLanternFestivalGetTaskRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLanternFeatival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLanternFestivalGetTaskRewardRsp : public ::google::protobuf::Message {
 public:
  TActLanternFestivalGetTaskRewardRsp();
  virtual ~TActLanternFestivalGetTaskRewardRsp();

  TActLanternFestivalGetTaskRewardRsp(const TActLanternFestivalGetTaskRewardRsp& from);

  inline TActLanternFestivalGetTaskRewardRsp& operator=(const TActLanternFestivalGetTaskRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLanternFestivalGetTaskRewardRsp& default_instance();

  void Swap(TActLanternFestivalGetTaskRewardRsp* other);

  // implements Message ----------------------------------------------

  TActLanternFestivalGetTaskRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLanternFestivalGetTaskRewardRsp& from);
  void MergeFrom(const TActLanternFestivalGetTaskRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGetTaskRewardRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActLanternFestivalGetTaskRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto();

  void InitAsDefaultInstance();
  static TActLanternFestivalGetTaskRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLanternFestivalGetScoreRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLanternFeatival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLanternFestivalGetScoreRewardReq : public ::google::protobuf::Message {
 public:
  TActLanternFestivalGetScoreRewardReq();
  virtual ~TActLanternFestivalGetScoreRewardReq();

  TActLanternFestivalGetScoreRewardReq(const TActLanternFestivalGetScoreRewardReq& from);

  inline TActLanternFestivalGetScoreRewardReq& operator=(const TActLanternFestivalGetScoreRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLanternFestivalGetScoreRewardReq& default_instance();

  void Swap(TActLanternFestivalGetScoreRewardReq* other);

  // implements Message ----------------------------------------------

  TActLanternFestivalGetScoreRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLanternFestivalGetScoreRewardReq& from);
  void MergeFrom(const TActLanternFestivalGetScoreRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ScoreAwardTid = 1;
  inline bool has_scoreawardtid() const;
  inline void clear_scoreawardtid();
  static const int kScoreAwardTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGetScoreRewardReq</name>
  	<Function>
  		<name>scoreawardtid</name>
  		<replaceName>ScoreAwardTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scoreawardtid</name>
  		<replaceName>ScoreAwardTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scoreawardtid</name>
  		<replaceName>ScoreAwardTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scoreawardtid() const;
  inline void set_scoreawardtid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActLanternFestivalGetScoreRewardReq)
 private:
  inline void set_has_scoreawardtid();
  inline void clear_has_scoreawardtid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 scoreawardtid_;
  friend void  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto();

  void InitAsDefaultInstance();
  static TActLanternFestivalGetScoreRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLanternFestivalGetScoreRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLanternFeatival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLanternFestivalGetScoreRewardRsp : public ::google::protobuf::Message {
 public:
  TActLanternFestivalGetScoreRewardRsp();
  virtual ~TActLanternFestivalGetScoreRewardRsp();

  TActLanternFestivalGetScoreRewardRsp(const TActLanternFestivalGetScoreRewardRsp& from);

  inline TActLanternFestivalGetScoreRewardRsp& operator=(const TActLanternFestivalGetScoreRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLanternFestivalGetScoreRewardRsp& default_instance();

  void Swap(TActLanternFestivalGetScoreRewardRsp* other);

  // implements Message ----------------------------------------------

  TActLanternFestivalGetScoreRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLanternFestivalGetScoreRewardRsp& from);
  void MergeFrom(const TActLanternFestivalGetScoreRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalGetScoreRewardRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActLanternFestivalGetScoreRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto();

  void InitAsDefaultInstance();
  static TActLanternFestivalGetScoreRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLanternFestivalLightUpOrShowLanternReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLanternFeatival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLanternFestivalLightUpOrShowLanternReq : public ::google::protobuf::Message {
 public:
  TActLanternFestivalLightUpOrShowLanternReq();
  virtual ~TActLanternFestivalLightUpOrShowLanternReq();

  TActLanternFestivalLightUpOrShowLanternReq(const TActLanternFestivalLightUpOrShowLanternReq& from);

  inline TActLanternFestivalLightUpOrShowLanternReq& operator=(const TActLanternFestivalLightUpOrShowLanternReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLanternFestivalLightUpOrShowLanternReq& default_instance();

  void Swap(TActLanternFestivalLightUpOrShowLanternReq* other);

  // implements Message ----------------------------------------------

  TActLanternFestivalLightUpOrShowLanternReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLanternFestivalLightUpOrShowLanternReq& from);
  void MergeFrom(const TActLanternFestivalLightUpOrShowLanternReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalLightUpOrShowLanternReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActLanternFestivalLightUpOrShowLanternReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto();

  void InitAsDefaultInstance();
  static TActLanternFestivalLightUpOrShowLanternReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLanternFestivalLightUpOrShowLanternRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLanternFeatival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLanternFestivalLightUpOrShowLanternRsp : public ::google::protobuf::Message {
 public:
  TActLanternFestivalLightUpOrShowLanternRsp();
  virtual ~TActLanternFestivalLightUpOrShowLanternRsp();

  TActLanternFestivalLightUpOrShowLanternRsp(const TActLanternFestivalLightUpOrShowLanternRsp& from);

  inline TActLanternFestivalLightUpOrShowLanternRsp& operator=(const TActLanternFestivalLightUpOrShowLanternRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLanternFestivalLightUpOrShowLanternRsp& default_instance();

  void Swap(TActLanternFestivalLightUpOrShowLanternRsp* other);

  // implements Message ----------------------------------------------

  TActLanternFestivalLightUpOrShowLanternRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLanternFestivalLightUpOrShowLanternRsp& from);
  void MergeFrom(const TActLanternFestivalLightUpOrShowLanternRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalLightUpOrShowLanternRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActLanternFestivalLightUpOrShowLanternRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto();

  void InitAsDefaultInstance();
  static TActLanternFestivalLightUpOrShowLanternRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLanternFestivalLoopLayerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLanternFeatival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLanternFestivalLoopLayerReq : public ::google::protobuf::Message {
 public:
  TActLanternFestivalLoopLayerReq();
  virtual ~TActLanternFestivalLoopLayerReq();

  TActLanternFestivalLoopLayerReq(const TActLanternFestivalLoopLayerReq& from);

  inline TActLanternFestivalLoopLayerReq& operator=(const TActLanternFestivalLoopLayerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLanternFestivalLoopLayerReq& default_instance();

  void Swap(TActLanternFestivalLoopLayerReq* other);

  // implements Message ----------------------------------------------

  TActLanternFestivalLoopLayerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLanternFestivalLoopLayerReq& from);
  void MergeFrom(const TActLanternFestivalLoopLayerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalLoopLayerReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActLanternFestivalLoopLayerReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto();

  void InitAsDefaultInstance();
  static TActLanternFestivalLoopLayerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLanternFestivalSetLayerFinallyRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLanternFeatival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLanternFestivalSetLayerFinallyRewardReq : public ::google::protobuf::Message {
 public:
  TActLanternFestivalSetLayerFinallyRewardReq();
  virtual ~TActLanternFestivalSetLayerFinallyRewardReq();

  TActLanternFestivalSetLayerFinallyRewardReq(const TActLanternFestivalSetLayerFinallyRewardReq& from);

  inline TActLanternFestivalSetLayerFinallyRewardReq& operator=(const TActLanternFestivalSetLayerFinallyRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLanternFestivalSetLayerFinallyRewardReq& default_instance();

  void Swap(TActLanternFestivalSetLayerFinallyRewardReq* other);

  // implements Message ----------------------------------------------

  TActLanternFestivalSetLayerFinallyRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLanternFestivalSetLayerFinallyRewardReq& from);
  void MergeFrom(const TActLanternFestivalSetLayerFinallyRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TActLanternFestivalGrandPrizeInfo rewardInfo = 1;
  inline bool has_rewardinfo() const;
  inline void clear_rewardinfo();
  static const int kRewardInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalSetLayerFinallyRewardReq</name>
  	<Function>
  		<name>rewardinfo</name>
  		<replaceName>rewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardinfo</name>
  		<replaceName>rewardInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_rewardinfo</name>
  		<replaceName>rewardInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardinfo</name>
  		<replaceName>rewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLanternFestivalGrandPrizeInfo& rewardinfo() const;
  inline ::pb::TActLanternFestivalGrandPrizeInfo* mutable_rewardinfo();
  inline ::pb::TActLanternFestivalGrandPrizeInfo* release_rewardinfo();
  inline void set_allocated_rewardinfo(::pb::TActLanternFestivalGrandPrizeInfo* rewardinfo);

  // @@protoc_insertion_point(class_scope:pb.TActLanternFestivalSetLayerFinallyRewardReq)
 private:
  inline void set_has_rewardinfo();
  inline void clear_has_rewardinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TActLanternFestivalGrandPrizeInfo* rewardinfo_;
  friend void  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto();

  void InitAsDefaultInstance();
  static TActLanternFestivalSetLayerFinallyRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActLanternFestivalNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActLanternFeatival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActLanternFestivalNotify : public ::google::protobuf::Message {
 public:
  TActLanternFestivalNotify();
  virtual ~TActLanternFestivalNotify();

  TActLanternFestivalNotify(const TActLanternFestivalNotify& from);

  inline TActLanternFestivalNotify& operator=(const TActLanternFestivalNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActLanternFestivalNotify& default_instance();

  void Swap(TActLanternFestivalNotify* other);

  // implements Message ----------------------------------------------

  TActLanternFestivalNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActLanternFestivalNotify& from);
  void MergeFrom(const TActLanternFestivalNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActLanternFestivalBuyInfo ArrRmbGoodBuyInfo = 1;
  inline int arrrmbgoodbuyinfo_size() const;
  inline void clear_arrrmbgoodbuyinfo();
  static const int kArrRmbGoodBuyInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalNotify</name>
  	<Function>
  		<name>arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrmbgoodbuyinfo_size</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLanternFestivalBuyInfo& arrrmbgoodbuyinfo(int index) const;
  inline ::pb::TActLanternFestivalBuyInfo* mutable_arrrmbgoodbuyinfo(int index);
  inline ::pb::TActLanternFestivalBuyInfo* add_arrrmbgoodbuyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalBuyInfo >&
      arrrmbgoodbuyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalBuyInfo >*
      mutable_arrrmbgoodbuyinfo();

  // repeated .pb.TActLanternFestivalTaskInfo ArrTaskInfo = 2;
  inline int arrtaskinfo_size() const;
  inline void clear_arrtaskinfo();
  static const int kArrTaskInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalNotify</name>
  	<Function>
  		<name>arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskinfo_size</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLanternFestivalTaskInfo& arrtaskinfo(int index) const;
  inline ::pb::TActLanternFestivalTaskInfo* mutable_arrtaskinfo(int index);
  inline ::pb::TActLanternFestivalTaskInfo* add_arrtaskinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalTaskInfo >&
      arrtaskinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalTaskInfo >*
      mutable_arrtaskinfo();

  // optional uint32 GrandPrize = 3;
  inline bool has_grandprize() const;
  inline void clear_grandprize();
  static const int kGrandPrizeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalNotify</name>
  	<Function>
  		<name>grandprize</name>
  		<replaceName>GrandPrize</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_grandprize</name>
  		<replaceName>GrandPrize</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_grandprize</name>
  		<replaceName>GrandPrize</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 grandprize() const;
  inline void set_grandprize(::google::protobuf::uint32 value);

  // repeated .pb.TActLanternFestivalGrandPrizeInfo AllGrandPrizeArr = 4;
  inline int allgrandprizearr_size() const;
  inline void clear_allgrandprizearr();
  static const int kAllGrandPrizeArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActLanternFestivalNotify</name>
  	<Function>
  		<name>allgrandprizearr</name>
  		<replaceName>AllGrandPrizeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_allgrandprizearr</name>
  		<replaceName>AllGrandPrizeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_allgrandprizearr</name>
  		<replaceName>AllGrandPrizeArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allgrandprizearr</name>
  		<replaceName>AllGrandPrizeArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>allgrandprizearr_size</name>
  		<replaceName>AllGrandPrizeArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActLanternFestivalGrandPrizeInfo& allgrandprizearr(int index) const;
  inline ::pb::TActLanternFestivalGrandPrizeInfo* mutable_allgrandprizearr(int index);
  inline ::pb::TActLanternFestivalGrandPrizeInfo* add_allgrandprizearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalGrandPrizeInfo >&
      allgrandprizearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalGrandPrizeInfo >*
      mutable_allgrandprizearr();

  // @@protoc_insertion_point(class_scope:pb.TActLanternFestivalNotify)
 private:
  inline void set_has_grandprize();
  inline void clear_has_grandprize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalBuyInfo > arrrmbgoodbuyinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalTaskInfo > arrtaskinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalGrandPrizeInfo > allgrandprizearr_;
  ::google::protobuf::uint32 grandprize_;
  friend void  protobuf_AddDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_AssignDesc_net_2fActLanternFeatival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActLanternFeatival_2eproto();

  void InitAsDefaultInstance();
  static TActLanternFestivalNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActLanternFestivalBuyInfo

// optional uint32 Id = 1;
inline bool TActLanternFestivalBuyInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLanternFestivalBuyInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLanternFestivalBuyInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLanternFestivalBuyInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActLanternFestivalBuyInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalBuyInfo.Id)
  return id_;
}
inline void TActLanternFestivalBuyInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalBuyInfo.Id)
}

// optional uint32 Num = 2;
inline bool TActLanternFestivalBuyInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActLanternFestivalBuyInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActLanternFestivalBuyInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActLanternFestivalBuyInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActLanternFestivalBuyInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalBuyInfo.Num)
  return num_;
}
inline void TActLanternFestivalBuyInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalBuyInfo.Num)
}

// optional uint64 BuyTime = 3;
inline bool TActLanternFestivalBuyInfo::has_buytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActLanternFestivalBuyInfo::set_has_buytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActLanternFestivalBuyInfo::clear_has_buytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActLanternFestivalBuyInfo::clear_buytime() {
  buytime_ = GOOGLE_ULONGLONG(0);
  clear_has_buytime();
}
inline ::google::protobuf::uint64 TActLanternFestivalBuyInfo::buytime() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalBuyInfo.BuyTime)
  return buytime_;
}
inline void TActLanternFestivalBuyInfo::set_buytime(::google::protobuf::uint64 value) {
  set_has_buytime();
  buytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalBuyInfo.BuyTime)
}

// -------------------------------------------------------------------

// TActLanternFestivalTaskInfo

// optional uint32 TaskType = 1;
inline bool TActLanternFestivalTaskInfo::has_tasktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLanternFestivalTaskInfo::set_has_tasktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLanternFestivalTaskInfo::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLanternFestivalTaskInfo::clear_tasktype() {
  tasktype_ = 0u;
  clear_has_tasktype();
}
inline ::google::protobuf::uint32 TActLanternFestivalTaskInfo::tasktype() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalTaskInfo.TaskType)
  return tasktype_;
}
inline void TActLanternFestivalTaskInfo::set_tasktype(::google::protobuf::uint32 value) {
  set_has_tasktype();
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalTaskInfo.TaskType)
}

// optional uint32 Num = 2;
inline bool TActLanternFestivalTaskInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActLanternFestivalTaskInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActLanternFestivalTaskInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActLanternFestivalTaskInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActLanternFestivalTaskInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalTaskInfo.Num)
  return num_;
}
inline void TActLanternFestivalTaskInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalTaskInfo.Num)
}

// -------------------------------------------------------------------

// TActLanternFestivalLanternInfo

// optional uint32 LanternId = 1;
inline bool TActLanternFestivalLanternInfo::has_lanternid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLanternFestivalLanternInfo::set_has_lanternid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLanternFestivalLanternInfo::clear_has_lanternid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLanternFestivalLanternInfo::clear_lanternid() {
  lanternid_ = 0u;
  clear_has_lanternid();
}
inline ::google::protobuf::uint32 TActLanternFestivalLanternInfo::lanternid() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalLanternInfo.LanternId)
  return lanternid_;
}
inline void TActLanternFestivalLanternInfo::set_lanternid(::google::protobuf::uint32 value) {
  set_has_lanternid();
  lanternid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalLanternInfo.LanternId)
}

// optional .pb.TCommonReward Reward = 2;
inline bool TActLanternFestivalLanternInfo::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActLanternFestivalLanternInfo::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActLanternFestivalLanternInfo::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActLanternFestivalLanternInfo::clear_reward() {
  if (reward_ != NULL) reward_->::pb::TCommonReward::Clear();
  clear_has_reward();
}
inline const ::pb::TCommonReward& TActLanternFestivalLanternInfo::reward() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalLanternInfo.Reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::pb::TCommonReward* TActLanternFestivalLanternInfo::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::pb::TCommonReward;
  // @@protoc_insertion_point(field_mutable:pb.TActLanternFestivalLanternInfo.Reward)
  return reward_;
}
inline ::pb::TCommonReward* TActLanternFestivalLanternInfo::release_reward() {
  clear_has_reward();
  ::pb::TCommonReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void TActLanternFestivalLanternInfo::set_allocated_reward(::pb::TCommonReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActLanternFestivalLanternInfo.Reward)
}

// -------------------------------------------------------------------

// TActLanternFestivalGrandPrizeInfo

// optional uint32 LayerId = 1;
inline bool TActLanternFestivalGrandPrizeInfo::has_layerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLanternFestivalGrandPrizeInfo::set_has_layerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLanternFestivalGrandPrizeInfo::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLanternFestivalGrandPrizeInfo::clear_layerid() {
  layerid_ = 0u;
  clear_has_layerid();
}
inline ::google::protobuf::uint32 TActLanternFestivalGrandPrizeInfo::layerid() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGrandPrizeInfo.LayerId)
  return layerid_;
}
inline void TActLanternFestivalGrandPrizeInfo::set_layerid(::google::protobuf::uint32 value) {
  set_has_layerid();
  layerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalGrandPrizeInfo.LayerId)
}

// optional uint32 GrandPrizeIndex = 2;
inline bool TActLanternFestivalGrandPrizeInfo::has_grandprizeindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActLanternFestivalGrandPrizeInfo::set_has_grandprizeindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActLanternFestivalGrandPrizeInfo::clear_has_grandprizeindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActLanternFestivalGrandPrizeInfo::clear_grandprizeindex() {
  grandprizeindex_ = 0u;
  clear_has_grandprizeindex();
}
inline ::google::protobuf::uint32 TActLanternFestivalGrandPrizeInfo::grandprizeindex() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGrandPrizeInfo.GrandPrizeIndex)
  return grandprizeindex_;
}
inline void TActLanternFestivalGrandPrizeInfo::set_grandprizeindex(::google::protobuf::uint32 value) {
  set_has_grandprizeindex();
  grandprizeindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalGrandPrizeInfo.GrandPrizeIndex)
}

// -------------------------------------------------------------------

// TActLanternFestivalGetInfoRsp

// repeated .pb.TActLanternFestivalBuyInfo ArrRmbGoodBuyInfo = 1;
inline int TActLanternFestivalGetInfoRsp::arrrmbgoodbuyinfo_size() const {
  return arrrmbgoodbuyinfo_.size();
}
inline void TActLanternFestivalGetInfoRsp::clear_arrrmbgoodbuyinfo() {
  arrrmbgoodbuyinfo_.Clear();
}
inline const ::pb::TActLanternFestivalBuyInfo& TActLanternFestivalGetInfoRsp::arrrmbgoodbuyinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGetInfoRsp.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Get(index);
}
inline ::pb::TActLanternFestivalBuyInfo* TActLanternFestivalGetInfoRsp::mutable_arrrmbgoodbuyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLanternFestivalGetInfoRsp.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Mutable(index);
}
inline ::pb::TActLanternFestivalBuyInfo* TActLanternFestivalGetInfoRsp::add_arrrmbgoodbuyinfo() {
  // @@protoc_insertion_point(field_add:pb.TActLanternFestivalGetInfoRsp.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalBuyInfo >&
TActLanternFestivalGetInfoRsp::arrrmbgoodbuyinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActLanternFestivalGetInfoRsp.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalBuyInfo >*
TActLanternFestivalGetInfoRsp::mutable_arrrmbgoodbuyinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLanternFestivalGetInfoRsp.ArrRmbGoodBuyInfo)
  return &arrrmbgoodbuyinfo_;
}

// optional uint32 LayerId = 2;
inline bool TActLanternFestivalGetInfoRsp::has_layerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActLanternFestivalGetInfoRsp::set_has_layerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActLanternFestivalGetInfoRsp::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActLanternFestivalGetInfoRsp::clear_layerid() {
  layerid_ = 0u;
  clear_has_layerid();
}
inline ::google::protobuf::uint32 TActLanternFestivalGetInfoRsp::layerid() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGetInfoRsp.LayerId)
  return layerid_;
}
inline void TActLanternFestivalGetInfoRsp::set_layerid(::google::protobuf::uint32 value) {
  set_has_layerid();
  layerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalGetInfoRsp.LayerId)
}

// repeated .pb.TActLanternFestivalLanternInfo TotalLanternInfo = 3;
inline int TActLanternFestivalGetInfoRsp::totallanterninfo_size() const {
  return totallanterninfo_.size();
}
inline void TActLanternFestivalGetInfoRsp::clear_totallanterninfo() {
  totallanterninfo_.Clear();
}
inline const ::pb::TActLanternFestivalLanternInfo& TActLanternFestivalGetInfoRsp::totallanterninfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGetInfoRsp.TotalLanternInfo)
  return totallanterninfo_.Get(index);
}
inline ::pb::TActLanternFestivalLanternInfo* TActLanternFestivalGetInfoRsp::mutable_totallanterninfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLanternFestivalGetInfoRsp.TotalLanternInfo)
  return totallanterninfo_.Mutable(index);
}
inline ::pb::TActLanternFestivalLanternInfo* TActLanternFestivalGetInfoRsp::add_totallanterninfo() {
  // @@protoc_insertion_point(field_add:pb.TActLanternFestivalGetInfoRsp.TotalLanternInfo)
  return totallanterninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalLanternInfo >&
TActLanternFestivalGetInfoRsp::totallanterninfo() const {
  // @@protoc_insertion_point(field_list:pb.TActLanternFestivalGetInfoRsp.TotalLanternInfo)
  return totallanterninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalLanternInfo >*
TActLanternFestivalGetInfoRsp::mutable_totallanterninfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLanternFestivalGetInfoRsp.TotalLanternInfo)
  return &totallanterninfo_;
}

// optional uint32 GrandPrizeStatus = 4;
inline bool TActLanternFestivalGetInfoRsp::has_grandprizestatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TActLanternFestivalGetInfoRsp::set_has_grandprizestatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TActLanternFestivalGetInfoRsp::clear_has_grandprizestatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TActLanternFestivalGetInfoRsp::clear_grandprizestatus() {
  grandprizestatus_ = 0u;
  clear_has_grandprizestatus();
}
inline ::google::protobuf::uint32 TActLanternFestivalGetInfoRsp::grandprizestatus() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGetInfoRsp.GrandPrizeStatus)
  return grandprizestatus_;
}
inline void TActLanternFestivalGetInfoRsp::set_grandprizestatus(::google::protobuf::uint32 value) {
  set_has_grandprizestatus();
  grandprizestatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalGetInfoRsp.GrandPrizeStatus)
}

// optional uint32 ResetTime = 5;
inline bool TActLanternFestivalGetInfoRsp::has_resettime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TActLanternFestivalGetInfoRsp::set_has_resettime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TActLanternFestivalGetInfoRsp::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TActLanternFestivalGetInfoRsp::clear_resettime() {
  resettime_ = 0u;
  clear_has_resettime();
}
inline ::google::protobuf::uint32 TActLanternFestivalGetInfoRsp::resettime() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGetInfoRsp.ResetTime)
  return resettime_;
}
inline void TActLanternFestivalGetInfoRsp::set_resettime(::google::protobuf::uint32 value) {
  set_has_resettime();
  resettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalGetInfoRsp.ResetTime)
}

// optional .pb.TActLanternFestivalGrandPrizeInfo GrandPrizeInfo = 6;
inline bool TActLanternFestivalGetInfoRsp::has_grandprizeinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TActLanternFestivalGetInfoRsp::set_has_grandprizeinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TActLanternFestivalGetInfoRsp::clear_has_grandprizeinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TActLanternFestivalGetInfoRsp::clear_grandprizeinfo() {
  if (grandprizeinfo_ != NULL) grandprizeinfo_->::pb::TActLanternFestivalGrandPrizeInfo::Clear();
  clear_has_grandprizeinfo();
}
inline const ::pb::TActLanternFestivalGrandPrizeInfo& TActLanternFestivalGetInfoRsp::grandprizeinfo() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGetInfoRsp.GrandPrizeInfo)
  return grandprizeinfo_ != NULL ? *grandprizeinfo_ : *default_instance_->grandprizeinfo_;
}
inline ::pb::TActLanternFestivalGrandPrizeInfo* TActLanternFestivalGetInfoRsp::mutable_grandprizeinfo() {
  set_has_grandprizeinfo();
  if (grandprizeinfo_ == NULL) grandprizeinfo_ = new ::pb::TActLanternFestivalGrandPrizeInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActLanternFestivalGetInfoRsp.GrandPrizeInfo)
  return grandprizeinfo_;
}
inline ::pb::TActLanternFestivalGrandPrizeInfo* TActLanternFestivalGetInfoRsp::release_grandprizeinfo() {
  clear_has_grandprizeinfo();
  ::pb::TActLanternFestivalGrandPrizeInfo* temp = grandprizeinfo_;
  grandprizeinfo_ = NULL;
  return temp;
}
inline void TActLanternFestivalGetInfoRsp::set_allocated_grandprizeinfo(::pb::TActLanternFestivalGrandPrizeInfo* grandprizeinfo) {
  delete grandprizeinfo_;
  grandprizeinfo_ = grandprizeinfo;
  if (grandprizeinfo) {
    set_has_grandprizeinfo();
  } else {
    clear_has_grandprizeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActLanternFestivalGetInfoRsp.GrandPrizeInfo)
}

// repeated .pb.TActLanternFestivalGrandPrizeInfo AllGrandPrizeArr = 7;
inline int TActLanternFestivalGetInfoRsp::allgrandprizearr_size() const {
  return allgrandprizearr_.size();
}
inline void TActLanternFestivalGetInfoRsp::clear_allgrandprizearr() {
  allgrandprizearr_.Clear();
}
inline const ::pb::TActLanternFestivalGrandPrizeInfo& TActLanternFestivalGetInfoRsp::allgrandprizearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGetInfoRsp.AllGrandPrizeArr)
  return allgrandprizearr_.Get(index);
}
inline ::pb::TActLanternFestivalGrandPrizeInfo* TActLanternFestivalGetInfoRsp::mutable_allgrandprizearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLanternFestivalGetInfoRsp.AllGrandPrizeArr)
  return allgrandprizearr_.Mutable(index);
}
inline ::pb::TActLanternFestivalGrandPrizeInfo* TActLanternFestivalGetInfoRsp::add_allgrandprizearr() {
  // @@protoc_insertion_point(field_add:pb.TActLanternFestivalGetInfoRsp.AllGrandPrizeArr)
  return allgrandprizearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalGrandPrizeInfo >&
TActLanternFestivalGetInfoRsp::allgrandprizearr() const {
  // @@protoc_insertion_point(field_list:pb.TActLanternFestivalGetInfoRsp.AllGrandPrizeArr)
  return allgrandprizearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalGrandPrizeInfo >*
TActLanternFestivalGetInfoRsp::mutable_allgrandprizearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLanternFestivalGetInfoRsp.AllGrandPrizeArr)
  return &allgrandprizearr_;
}

// -------------------------------------------------------------------

// TActLanternFestivalGetTaskInfoRsp

// repeated .pb.TActLanternFestivalTaskInfo TaskInfo = 1;
inline int TActLanternFestivalGetTaskInfoRsp::taskinfo_size() const {
  return taskinfo_.size();
}
inline void TActLanternFestivalGetTaskInfoRsp::clear_taskinfo() {
  taskinfo_.Clear();
}
inline const ::pb::TActLanternFestivalTaskInfo& TActLanternFestivalGetTaskInfoRsp::taskinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGetTaskInfoRsp.TaskInfo)
  return taskinfo_.Get(index);
}
inline ::pb::TActLanternFestivalTaskInfo* TActLanternFestivalGetTaskInfoRsp::mutable_taskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLanternFestivalGetTaskInfoRsp.TaskInfo)
  return taskinfo_.Mutable(index);
}
inline ::pb::TActLanternFestivalTaskInfo* TActLanternFestivalGetTaskInfoRsp::add_taskinfo() {
  // @@protoc_insertion_point(field_add:pb.TActLanternFestivalGetTaskInfoRsp.TaskInfo)
  return taskinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalTaskInfo >&
TActLanternFestivalGetTaskInfoRsp::taskinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActLanternFestivalGetTaskInfoRsp.TaskInfo)
  return taskinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalTaskInfo >*
TActLanternFestivalGetTaskInfoRsp::mutable_taskinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLanternFestivalGetTaskInfoRsp.TaskInfo)
  return &taskinfo_;
}

// repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 2;
inline int TActLanternFestivalGetTaskInfoRsp::arrtaskrewardinfo_size() const {
  return arrtaskrewardinfo_.size();
}
inline void TActLanternFestivalGetTaskInfoRsp::clear_arrtaskrewardinfo() {
  arrtaskrewardinfo_.Clear();
}
inline const ::pb::TActivityRewardInfo& TActLanternFestivalGetTaskInfoRsp::arrtaskrewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGetTaskInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_.Get(index);
}
inline ::pb::TActivityRewardInfo* TActLanternFestivalGetTaskInfoRsp::mutable_arrtaskrewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLanternFestivalGetTaskInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_.Mutable(index);
}
inline ::pb::TActivityRewardInfo* TActLanternFestivalGetTaskInfoRsp::add_arrtaskrewardinfo() {
  // @@protoc_insertion_point(field_add:pb.TActLanternFestivalGetTaskInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
TActLanternFestivalGetTaskInfoRsp::arrtaskrewardinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActLanternFestivalGetTaskInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
TActLanternFestivalGetTaskInfoRsp::mutable_arrtaskrewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLanternFestivalGetTaskInfoRsp.ArrTaskRewardInfo)
  return &arrtaskrewardinfo_;
}

// optional uint32 Score = 3;
inline bool TActLanternFestivalGetTaskInfoRsp::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActLanternFestivalGetTaskInfoRsp::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActLanternFestivalGetTaskInfoRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActLanternFestivalGetTaskInfoRsp::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TActLanternFestivalGetTaskInfoRsp::score() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGetTaskInfoRsp.Score)
  return score_;
}
inline void TActLanternFestivalGetTaskInfoRsp::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalGetTaskInfoRsp.Score)
}

// repeated uint32 ScoreAward = 4;
inline int TActLanternFestivalGetTaskInfoRsp::scoreaward_size() const {
  return scoreaward_.size();
}
inline void TActLanternFestivalGetTaskInfoRsp::clear_scoreaward() {
  scoreaward_.Clear();
}
inline ::google::protobuf::uint32 TActLanternFestivalGetTaskInfoRsp::scoreaward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGetTaskInfoRsp.ScoreAward)
  return scoreaward_.Get(index);
}
inline void TActLanternFestivalGetTaskInfoRsp::set_scoreaward(int index, ::google::protobuf::uint32 value) {
  scoreaward_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalGetTaskInfoRsp.ScoreAward)
}
inline void TActLanternFestivalGetTaskInfoRsp::add_scoreaward(::google::protobuf::uint32 value) {
  scoreaward_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActLanternFestivalGetTaskInfoRsp.ScoreAward)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActLanternFestivalGetTaskInfoRsp::scoreaward() const {
  // @@protoc_insertion_point(field_list:pb.TActLanternFestivalGetTaskInfoRsp.ScoreAward)
  return scoreaward_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActLanternFestivalGetTaskInfoRsp::mutable_scoreaward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLanternFestivalGetTaskInfoRsp.ScoreAward)
  return &scoreaward_;
}

// -------------------------------------------------------------------

// TActLanternFestivalGetTaskRewardReq

// optional uint32 TaskId = 1;
inline bool TActLanternFestivalGetTaskRewardReq::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLanternFestivalGetTaskRewardReq::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLanternFestivalGetTaskRewardReq::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLanternFestivalGetTaskRewardReq::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 TActLanternFestivalGetTaskRewardReq::taskid() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGetTaskRewardReq.TaskId)
  return taskid_;
}
inline void TActLanternFestivalGetTaskRewardReq::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalGetTaskRewardReq.TaskId)
}

// -------------------------------------------------------------------

// TActLanternFestivalGetTaskRewardRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActLanternFestivalGetTaskRewardRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActLanternFestivalGetTaskRewardRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActLanternFestivalGetTaskRewardRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGetTaskRewardRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActLanternFestivalGetTaskRewardRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLanternFestivalGetTaskRewardRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActLanternFestivalGetTaskRewardRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActLanternFestivalGetTaskRewardRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActLanternFestivalGetTaskRewardRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActLanternFestivalGetTaskRewardRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActLanternFestivalGetTaskRewardRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLanternFestivalGetTaskRewardRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActLanternFestivalGetScoreRewardReq

// optional uint32 ScoreAwardTid = 1;
inline bool TActLanternFestivalGetScoreRewardReq::has_scoreawardtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLanternFestivalGetScoreRewardReq::set_has_scoreawardtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLanternFestivalGetScoreRewardReq::clear_has_scoreawardtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLanternFestivalGetScoreRewardReq::clear_scoreawardtid() {
  scoreawardtid_ = 0u;
  clear_has_scoreawardtid();
}
inline ::google::protobuf::uint32 TActLanternFestivalGetScoreRewardReq::scoreawardtid() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGetScoreRewardReq.ScoreAwardTid)
  return scoreawardtid_;
}
inline void TActLanternFestivalGetScoreRewardReq::set_scoreawardtid(::google::protobuf::uint32 value) {
  set_has_scoreawardtid();
  scoreawardtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalGetScoreRewardReq.ScoreAwardTid)
}

// -------------------------------------------------------------------

// TActLanternFestivalGetScoreRewardRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActLanternFestivalGetScoreRewardRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActLanternFestivalGetScoreRewardRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActLanternFestivalGetScoreRewardRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalGetScoreRewardRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActLanternFestivalGetScoreRewardRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLanternFestivalGetScoreRewardRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActLanternFestivalGetScoreRewardRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActLanternFestivalGetScoreRewardRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActLanternFestivalGetScoreRewardRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActLanternFestivalGetScoreRewardRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActLanternFestivalGetScoreRewardRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLanternFestivalGetScoreRewardRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActLanternFestivalLightUpOrShowLanternReq

// optional uint32 Id = 1;
inline bool TActLanternFestivalLightUpOrShowLanternReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLanternFestivalLightUpOrShowLanternReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLanternFestivalLightUpOrShowLanternReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLanternFestivalLightUpOrShowLanternReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActLanternFestivalLightUpOrShowLanternReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalLightUpOrShowLanternReq.Id)
  return id_;
}
inline void TActLanternFestivalLightUpOrShowLanternReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalLightUpOrShowLanternReq.Id)
}

// -------------------------------------------------------------------

// TActLanternFestivalLightUpOrShowLanternRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActLanternFestivalLightUpOrShowLanternRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActLanternFestivalLightUpOrShowLanternRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActLanternFestivalLightUpOrShowLanternRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalLightUpOrShowLanternRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActLanternFestivalLightUpOrShowLanternRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLanternFestivalLightUpOrShowLanternRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActLanternFestivalLightUpOrShowLanternRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActLanternFestivalLightUpOrShowLanternRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActLanternFestivalLightUpOrShowLanternRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActLanternFestivalLightUpOrShowLanternRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActLanternFestivalLightUpOrShowLanternRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLanternFestivalLightUpOrShowLanternRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActLanternFestivalLoopLayerReq

// optional uint32 Id = 1;
inline bool TActLanternFestivalLoopLayerReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLanternFestivalLoopLayerReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLanternFestivalLoopLayerReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLanternFestivalLoopLayerReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActLanternFestivalLoopLayerReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalLoopLayerReq.Id)
  return id_;
}
inline void TActLanternFestivalLoopLayerReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalLoopLayerReq.Id)
}

// -------------------------------------------------------------------

// TActLanternFestivalSetLayerFinallyRewardReq

// optional .pb.TActLanternFestivalGrandPrizeInfo rewardInfo = 1;
inline bool TActLanternFestivalSetLayerFinallyRewardReq::has_rewardinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActLanternFestivalSetLayerFinallyRewardReq::set_has_rewardinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActLanternFestivalSetLayerFinallyRewardReq::clear_has_rewardinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActLanternFestivalSetLayerFinallyRewardReq::clear_rewardinfo() {
  if (rewardinfo_ != NULL) rewardinfo_->::pb::TActLanternFestivalGrandPrizeInfo::Clear();
  clear_has_rewardinfo();
}
inline const ::pb::TActLanternFestivalGrandPrizeInfo& TActLanternFestivalSetLayerFinallyRewardReq::rewardinfo() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalSetLayerFinallyRewardReq.rewardInfo)
  return rewardinfo_ != NULL ? *rewardinfo_ : *default_instance_->rewardinfo_;
}
inline ::pb::TActLanternFestivalGrandPrizeInfo* TActLanternFestivalSetLayerFinallyRewardReq::mutable_rewardinfo() {
  set_has_rewardinfo();
  if (rewardinfo_ == NULL) rewardinfo_ = new ::pb::TActLanternFestivalGrandPrizeInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActLanternFestivalSetLayerFinallyRewardReq.rewardInfo)
  return rewardinfo_;
}
inline ::pb::TActLanternFestivalGrandPrizeInfo* TActLanternFestivalSetLayerFinallyRewardReq::release_rewardinfo() {
  clear_has_rewardinfo();
  ::pb::TActLanternFestivalGrandPrizeInfo* temp = rewardinfo_;
  rewardinfo_ = NULL;
  return temp;
}
inline void TActLanternFestivalSetLayerFinallyRewardReq::set_allocated_rewardinfo(::pb::TActLanternFestivalGrandPrizeInfo* rewardinfo) {
  delete rewardinfo_;
  rewardinfo_ = rewardinfo;
  if (rewardinfo) {
    set_has_rewardinfo();
  } else {
    clear_has_rewardinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActLanternFestivalSetLayerFinallyRewardReq.rewardInfo)
}

// -------------------------------------------------------------------

// TActLanternFestivalNotify

// repeated .pb.TActLanternFestivalBuyInfo ArrRmbGoodBuyInfo = 1;
inline int TActLanternFestivalNotify::arrrmbgoodbuyinfo_size() const {
  return arrrmbgoodbuyinfo_.size();
}
inline void TActLanternFestivalNotify::clear_arrrmbgoodbuyinfo() {
  arrrmbgoodbuyinfo_.Clear();
}
inline const ::pb::TActLanternFestivalBuyInfo& TActLanternFestivalNotify::arrrmbgoodbuyinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalNotify.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Get(index);
}
inline ::pb::TActLanternFestivalBuyInfo* TActLanternFestivalNotify::mutable_arrrmbgoodbuyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLanternFestivalNotify.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Mutable(index);
}
inline ::pb::TActLanternFestivalBuyInfo* TActLanternFestivalNotify::add_arrrmbgoodbuyinfo() {
  // @@protoc_insertion_point(field_add:pb.TActLanternFestivalNotify.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalBuyInfo >&
TActLanternFestivalNotify::arrrmbgoodbuyinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActLanternFestivalNotify.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalBuyInfo >*
TActLanternFestivalNotify::mutable_arrrmbgoodbuyinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLanternFestivalNotify.ArrRmbGoodBuyInfo)
  return &arrrmbgoodbuyinfo_;
}

// repeated .pb.TActLanternFestivalTaskInfo ArrTaskInfo = 2;
inline int TActLanternFestivalNotify::arrtaskinfo_size() const {
  return arrtaskinfo_.size();
}
inline void TActLanternFestivalNotify::clear_arrtaskinfo() {
  arrtaskinfo_.Clear();
}
inline const ::pb::TActLanternFestivalTaskInfo& TActLanternFestivalNotify::arrtaskinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalNotify.ArrTaskInfo)
  return arrtaskinfo_.Get(index);
}
inline ::pb::TActLanternFestivalTaskInfo* TActLanternFestivalNotify::mutable_arrtaskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLanternFestivalNotify.ArrTaskInfo)
  return arrtaskinfo_.Mutable(index);
}
inline ::pb::TActLanternFestivalTaskInfo* TActLanternFestivalNotify::add_arrtaskinfo() {
  // @@protoc_insertion_point(field_add:pb.TActLanternFestivalNotify.ArrTaskInfo)
  return arrtaskinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalTaskInfo >&
TActLanternFestivalNotify::arrtaskinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActLanternFestivalNotify.ArrTaskInfo)
  return arrtaskinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalTaskInfo >*
TActLanternFestivalNotify::mutable_arrtaskinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLanternFestivalNotify.ArrTaskInfo)
  return &arrtaskinfo_;
}

// optional uint32 GrandPrize = 3;
inline bool TActLanternFestivalNotify::has_grandprize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActLanternFestivalNotify::set_has_grandprize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActLanternFestivalNotify::clear_has_grandprize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActLanternFestivalNotify::clear_grandprize() {
  grandprize_ = 0u;
  clear_has_grandprize();
}
inline ::google::protobuf::uint32 TActLanternFestivalNotify::grandprize() const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalNotify.GrandPrize)
  return grandprize_;
}
inline void TActLanternFestivalNotify::set_grandprize(::google::protobuf::uint32 value) {
  set_has_grandprize();
  grandprize_ = value;
  // @@protoc_insertion_point(field_set:pb.TActLanternFestivalNotify.GrandPrize)
}

// repeated .pb.TActLanternFestivalGrandPrizeInfo AllGrandPrizeArr = 4;
inline int TActLanternFestivalNotify::allgrandprizearr_size() const {
  return allgrandprizearr_.size();
}
inline void TActLanternFestivalNotify::clear_allgrandprizearr() {
  allgrandprizearr_.Clear();
}
inline const ::pb::TActLanternFestivalGrandPrizeInfo& TActLanternFestivalNotify::allgrandprizearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActLanternFestivalNotify.AllGrandPrizeArr)
  return allgrandprizearr_.Get(index);
}
inline ::pb::TActLanternFestivalGrandPrizeInfo* TActLanternFestivalNotify::mutable_allgrandprizearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActLanternFestivalNotify.AllGrandPrizeArr)
  return allgrandprizearr_.Mutable(index);
}
inline ::pb::TActLanternFestivalGrandPrizeInfo* TActLanternFestivalNotify::add_allgrandprizearr() {
  // @@protoc_insertion_point(field_add:pb.TActLanternFestivalNotify.AllGrandPrizeArr)
  return allgrandprizearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalGrandPrizeInfo >&
TActLanternFestivalNotify::allgrandprizearr() const {
  // @@protoc_insertion_point(field_list:pb.TActLanternFestivalNotify.AllGrandPrizeArr)
  return allgrandprizearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActLanternFestivalGrandPrizeInfo >*
TActLanternFestivalNotify::mutable_allgrandprizearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActLanternFestivalNotify.AllGrandPrizeArr)
  return &allgrandprizearr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActLanternFeatival_2eproto__INCLUDED
