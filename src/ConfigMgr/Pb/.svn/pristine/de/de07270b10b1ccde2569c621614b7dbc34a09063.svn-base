// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/PaintedAudio.proto

#ifndef PROTOBUF_module_2fPaintedAudio_2eproto__INCLUDED
#define PROTOBUF_module_2fPaintedAudio_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/AudioDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fPaintedAudio_2eproto();
void protobuf_AssignDesc_module_2fPaintedAudio_2eproto();
void protobuf_ShutdownFile_module_2fPaintedAudio_2eproto();

class PaintedAudio;
class LayerPaintedAudio;

// ===================================================================

/*FOR2LUA
<Record>
	<name>PaintedAudio</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/PaintedAudio.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class PaintedAudio : public ::google::protobuf::Message {
 public:
  PaintedAudio();
  virtual ~PaintedAudio();

  PaintedAudio(const PaintedAudio& from);

  inline PaintedAudio& operator=(const PaintedAudio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PaintedAudio& default_instance();

  void Swap(PaintedAudio* other);

  // implements Message ----------------------------------------------

  PaintedAudio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PaintedAudio& from);
  void MergeFrom(const PaintedAudio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>PaintedAudio</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string PaintedName = 2;
  inline bool has_paintedname() const;
  inline void clear_paintedname();
  static const int kPaintedNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>PaintedAudio</name>
  	<Function>
  		<name>paintedname</name>
  		<replaceName>PaintedName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_paintedname</name>
  		<replaceName>PaintedName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_paintedname</name>
  		<replaceName>PaintedName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& paintedname() const;
  inline void set_paintedname(const ::std::string& value);
  inline void set_paintedname(const char* value);
  inline void set_paintedname(const char* value, size_t size);
  inline ::std::string* mutable_paintedname();
  inline ::std::string* release_paintedname();
  inline void set_allocated_paintedname(::std::string* paintedname);

  // repeated .pb.LayerPaintedAudio LayerPaintedAudioArr = 3;
  inline int layerpaintedaudioarr_size() const;
  inline void clear_layerpaintedaudioarr();
  static const int kLayerPaintedAudioArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>PaintedAudio</name>
  	<Function>
  		<name>layerpaintedaudioarr</name>
  		<replaceName>LayerPaintedAudioArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_layerpaintedaudioarr</name>
  		<replaceName>LayerPaintedAudioArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_layerpaintedaudioarr</name>
  		<replaceName>LayerPaintedAudioArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerpaintedaudioarr</name>
  		<replaceName>LayerPaintedAudioArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>layerpaintedaudioarr_size</name>
  		<replaceName>LayerPaintedAudioArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::LayerPaintedAudio& layerpaintedaudioarr(int index) const;
  inline ::pb::LayerPaintedAudio* mutable_layerpaintedaudioarr(int index);
  inline ::pb::LayerPaintedAudio* add_layerpaintedaudioarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::LayerPaintedAudio >&
      layerpaintedaudioarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::LayerPaintedAudio >*
      mutable_layerpaintedaudioarr();

  // @@protoc_insertion_point(class_scope:pb.PaintedAudio)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_paintedname();
  inline void clear_has_paintedname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* paintedname_;
  ::google::protobuf::RepeatedPtrField< ::pb::LayerPaintedAudio > layerpaintedaudioarr_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_module_2fPaintedAudio_2eproto();
  friend void protobuf_AssignDesc_module_2fPaintedAudio_2eproto();
  friend void protobuf_ShutdownFile_module_2fPaintedAudio_2eproto();

  void InitAsDefaultInstance();
  static PaintedAudio* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>LayerPaintedAudio</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/PaintedAudio.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class LayerPaintedAudio : public ::google::protobuf::Message {
 public:
  LayerPaintedAudio();
  virtual ~LayerPaintedAudio();

  LayerPaintedAudio(const LayerPaintedAudio& from);

  inline LayerPaintedAudio& operator=(const LayerPaintedAudio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerPaintedAudio& default_instance();

  void Swap(LayerPaintedAudio* other);

  // implements Message ----------------------------------------------

  LayerPaintedAudio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerPaintedAudio& from);
  void MergeFrom(const LayerPaintedAudio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string LayerName = 1;
  inline bool has_layername() const;
  inline void clear_layername();
  static const int kLayerNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>LayerPaintedAudio</name>
  	<Function>
  		<name>layername</name>
  		<replaceName>LayerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layername</name>
  		<replaceName>LayerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layername</name>
  		<replaceName>LayerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& layername() const;
  inline void set_layername(const ::std::string& value);
  inline void set_layername(const char* value);
  inline void set_layername(const char* value, size_t size);
  inline ::std::string* mutable_layername();
  inline ::std::string* release_layername();
  inline void set_allocated_layername(::std::string* layername);

  // optional .pb.AudioInfo AudioInfo = 2;
  inline bool has_audioinfo() const;
  inline void clear_audioinfo();
  static const int kAudioInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>LayerPaintedAudio</name>
  	<Function>
  		<name>audioinfo</name>
  		<replaceName>AudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_audioinfo</name>
  		<replaceName>AudioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_audioinfo</name>
  		<replaceName>AudioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_audioinfo</name>
  		<replaceName>AudioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AudioInfo& audioinfo() const;
  inline ::pb::AudioInfo* mutable_audioinfo();
  inline ::pb::AudioInfo* release_audioinfo();
  inline void set_allocated_audioinfo(::pb::AudioInfo* audioinfo);

  // @@protoc_insertion_point(class_scope:pb.LayerPaintedAudio)
 private:
  inline void set_has_layername();
  inline void clear_has_layername();
  inline void set_has_audioinfo();
  inline void clear_has_audioinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* layername_;
  ::pb::AudioInfo* audioinfo_;
  friend void  protobuf_AddDesc_module_2fPaintedAudio_2eproto();
  friend void protobuf_AssignDesc_module_2fPaintedAudio_2eproto();
  friend void protobuf_ShutdownFile_module_2fPaintedAudio_2eproto();

  void InitAsDefaultInstance();
  static LayerPaintedAudio* default_instance_;
};
// ===================================================================


// ===================================================================

// PaintedAudio

// optional int32 Id = 1;
inline bool PaintedAudio::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaintedAudio::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PaintedAudio::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PaintedAudio::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PaintedAudio::id() const {
  // @@protoc_insertion_point(field_get:pb.PaintedAudio.Id)
  return id_;
}
inline void PaintedAudio::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.PaintedAudio.Id)
}

// optional string PaintedName = 2;
inline bool PaintedAudio::has_paintedname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PaintedAudio::set_has_paintedname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PaintedAudio::clear_has_paintedname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PaintedAudio::clear_paintedname() {
  if (paintedname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    paintedname_->clear();
  }
  clear_has_paintedname();
}
inline const ::std::string& PaintedAudio::paintedname() const {
  // @@protoc_insertion_point(field_get:pb.PaintedAudio.PaintedName)
  return *paintedname_;
}
inline void PaintedAudio::set_paintedname(const ::std::string& value) {
  set_has_paintedname();
  if (paintedname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    paintedname_ = new ::std::string;
  }
  paintedname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.PaintedAudio.PaintedName)
}
inline void PaintedAudio::set_paintedname(const char* value) {
  set_has_paintedname();
  if (paintedname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    paintedname_ = new ::std::string;
  }
  paintedname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.PaintedAudio.PaintedName)
}
inline void PaintedAudio::set_paintedname(const char* value, size_t size) {
  set_has_paintedname();
  if (paintedname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    paintedname_ = new ::std::string;
  }
  paintedname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.PaintedAudio.PaintedName)
}
inline ::std::string* PaintedAudio::mutable_paintedname() {
  set_has_paintedname();
  if (paintedname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    paintedname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.PaintedAudio.PaintedName)
  return paintedname_;
}
inline ::std::string* PaintedAudio::release_paintedname() {
  clear_has_paintedname();
  if (paintedname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = paintedname_;
    paintedname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PaintedAudio::set_allocated_paintedname(::std::string* paintedname) {
  if (paintedname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete paintedname_;
  }
  if (paintedname) {
    set_has_paintedname();
    paintedname_ = paintedname;
  } else {
    clear_has_paintedname();
    paintedname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.PaintedAudio.PaintedName)
}

// repeated .pb.LayerPaintedAudio LayerPaintedAudioArr = 3;
inline int PaintedAudio::layerpaintedaudioarr_size() const {
  return layerpaintedaudioarr_.size();
}
inline void PaintedAudio::clear_layerpaintedaudioarr() {
  layerpaintedaudioarr_.Clear();
}
inline const ::pb::LayerPaintedAudio& PaintedAudio::layerpaintedaudioarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.PaintedAudio.LayerPaintedAudioArr)
  return layerpaintedaudioarr_.Get(index);
}
inline ::pb::LayerPaintedAudio* PaintedAudio::mutable_layerpaintedaudioarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PaintedAudio.LayerPaintedAudioArr)
  return layerpaintedaudioarr_.Mutable(index);
}
inline ::pb::LayerPaintedAudio* PaintedAudio::add_layerpaintedaudioarr() {
  // @@protoc_insertion_point(field_add:pb.PaintedAudio.LayerPaintedAudioArr)
  return layerpaintedaudioarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::LayerPaintedAudio >&
PaintedAudio::layerpaintedaudioarr() const {
  // @@protoc_insertion_point(field_list:pb.PaintedAudio.LayerPaintedAudioArr)
  return layerpaintedaudioarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::LayerPaintedAudio >*
PaintedAudio::mutable_layerpaintedaudioarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.PaintedAudio.LayerPaintedAudioArr)
  return &layerpaintedaudioarr_;
}

// -------------------------------------------------------------------

// LayerPaintedAudio

// optional string LayerName = 1;
inline bool LayerPaintedAudio::has_layername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerPaintedAudio::set_has_layername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerPaintedAudio::clear_has_layername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerPaintedAudio::clear_layername() {
  if (layername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layername_->clear();
  }
  clear_has_layername();
}
inline const ::std::string& LayerPaintedAudio::layername() const {
  // @@protoc_insertion_point(field_get:pb.LayerPaintedAudio.LayerName)
  return *layername_;
}
inline void LayerPaintedAudio::set_layername(const ::std::string& value) {
  set_has_layername();
  if (layername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layername_ = new ::std::string;
  }
  layername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.LayerPaintedAudio.LayerName)
}
inline void LayerPaintedAudio::set_layername(const char* value) {
  set_has_layername();
  if (layername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layername_ = new ::std::string;
  }
  layername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.LayerPaintedAudio.LayerName)
}
inline void LayerPaintedAudio::set_layername(const char* value, size_t size) {
  set_has_layername();
  if (layername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layername_ = new ::std::string;
  }
  layername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.LayerPaintedAudio.LayerName)
}
inline ::std::string* LayerPaintedAudio::mutable_layername() {
  set_has_layername();
  if (layername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.LayerPaintedAudio.LayerName)
  return layername_;
}
inline ::std::string* LayerPaintedAudio::release_layername() {
  clear_has_layername();
  if (layername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layername_;
    layername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerPaintedAudio::set_allocated_layername(::std::string* layername) {
  if (layername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layername_;
  }
  if (layername) {
    set_has_layername();
    layername_ = layername;
  } else {
    clear_has_layername();
    layername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.LayerPaintedAudio.LayerName)
}

// optional .pb.AudioInfo AudioInfo = 2;
inline bool LayerPaintedAudio::has_audioinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerPaintedAudio::set_has_audioinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerPaintedAudio::clear_has_audioinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerPaintedAudio::clear_audioinfo() {
  if (audioinfo_ != NULL) audioinfo_->::pb::AudioInfo::Clear();
  clear_has_audioinfo();
}
inline const ::pb::AudioInfo& LayerPaintedAudio::audioinfo() const {
  // @@protoc_insertion_point(field_get:pb.LayerPaintedAudio.AudioInfo)
  return audioinfo_ != NULL ? *audioinfo_ : *default_instance_->audioinfo_;
}
inline ::pb::AudioInfo* LayerPaintedAudio::mutable_audioinfo() {
  set_has_audioinfo();
  if (audioinfo_ == NULL) audioinfo_ = new ::pb::AudioInfo;
  // @@protoc_insertion_point(field_mutable:pb.LayerPaintedAudio.AudioInfo)
  return audioinfo_;
}
inline ::pb::AudioInfo* LayerPaintedAudio::release_audioinfo() {
  clear_has_audioinfo();
  ::pb::AudioInfo* temp = audioinfo_;
  audioinfo_ = NULL;
  return temp;
}
inline void LayerPaintedAudio::set_allocated_audioinfo(::pb::AudioInfo* audioinfo) {
  delete audioinfo_;
  audioinfo_ = audioinfo;
  if (audioinfo) {
    set_has_audioinfo();
  } else {
    clear_has_audioinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.LayerPaintedAudio.AudioInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fPaintedAudio_2eproto__INCLUDED
