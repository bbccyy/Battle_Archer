// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActLimitedChallenge.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActLimitedChallenge.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActLimitedChallengeBattleArmyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeBattleArmyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeStrongholdInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeStrongholdInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeSquadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeSquadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeBuyItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeBuyItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeBuyGoldItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeBuyGoldItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeEnterBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeEnterBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeEnterBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeEnterBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeReportBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeReportBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeReportBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeReportBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeReceiveAchievementReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeReceiveAchievementReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeAutoReceiveAchievementRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeAutoReceiveAchievementRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeSetSquadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeSetSquadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeSetSquadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeSetSquadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeSweepReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeSweepReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActLimitedChallengeSweepRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActLimitedChallengeSweepRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto() {
  protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActLimitedChallenge.proto");
  GOOGLE_CHECK(file != NULL);
  TActLimitedChallengeBattleArmyInfo_descriptor_ = file->message_type(0);
  static const int TActLimitedChallengeBattleArmyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeBattleArmyInfo, fid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeBattleArmyInfo, armyarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeBattleArmyInfo, fightforce_),
  };
  TActLimitedChallengeBattleArmyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeBattleArmyInfo_descriptor_,
      TActLimitedChallengeBattleArmyInfo::default_instance_,
      TActLimitedChallengeBattleArmyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeBattleArmyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeBattleArmyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeBattleArmyInfo));
  TActLimitedChallengeStrongholdInfo_descriptor_ = file->message_type(1);
  static const int TActLimitedChallengeStrongholdInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeStrongholdInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeStrongholdInfo, battlearmyarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeStrongholdInfo, passlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeStrongholdInfo, atkwinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeStrongholdInfo, selectdebuffarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeStrongholdInfo, sweepdroparr_),
  };
  TActLimitedChallengeStrongholdInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeStrongholdInfo_descriptor_,
      TActLimitedChallengeStrongholdInfo::default_instance_,
      TActLimitedChallengeStrongholdInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeStrongholdInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeStrongholdInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeStrongholdInfo));
  TActLimitedChallengeShopInfo_descriptor_ = file->message_type(2);
  static const int TActLimitedChallengeShopInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeShopInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeShopInfo, buynum_),
  };
  TActLimitedChallengeShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeShopInfo_descriptor_,
      TActLimitedChallengeShopInfo::default_instance_,
      TActLimitedChallengeShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeShopInfo));
  TActLimitedChallengeSquadInfo_descriptor_ = file->message_type(3);
  static const int TActLimitedChallengeSquadInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSquadInfo, fid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSquadInfo, squad_),
  };
  TActLimitedChallengeSquadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeSquadInfo_descriptor_,
      TActLimitedChallengeSquadInfo::default_instance_,
      TActLimitedChallengeSquadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSquadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSquadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeSquadInfo));
  TActLimitedChallengeGetInfoRsp_descriptor_ = file->message_type(4);
  static const int TActLimitedChallengeGetInfoRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeGetInfoRsp, strongholdarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeGetInfoRsp, shoparr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeGetInfoRsp, goldshoparr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeGetInfoRsp, rmbshoparr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeGetInfoRsp, challengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeGetInfoRsp, losenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeGetInfoRsp, squadarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeGetInfoRsp, rewardedtidarr_),
  };
  TActLimitedChallengeGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeGetInfoRsp_descriptor_,
      TActLimitedChallengeGetInfoRsp::default_instance_,
      TActLimitedChallengeGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeGetInfoRsp));
  TActLimitedChallengeBuyItemReq_descriptor_ = file->message_type(5);
  static const int TActLimitedChallengeBuyItemReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeBuyItemReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeBuyItemReq, num_),
  };
  TActLimitedChallengeBuyItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeBuyItemReq_descriptor_,
      TActLimitedChallengeBuyItemReq::default_instance_,
      TActLimitedChallengeBuyItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeBuyItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeBuyItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeBuyItemReq));
  TActLimitedChallengeBuyGoldItemReq_descriptor_ = file->message_type(6);
  static const int TActLimitedChallengeBuyGoldItemReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeBuyGoldItemReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeBuyGoldItemReq, num_),
  };
  TActLimitedChallengeBuyGoldItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeBuyGoldItemReq_descriptor_,
      TActLimitedChallengeBuyGoldItemReq::default_instance_,
      TActLimitedChallengeBuyGoldItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeBuyGoldItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeBuyGoldItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeBuyGoldItemReq));
  TActLimitedChallengeEnterBattleReq_descriptor_ = file->message_type(7);
  static const int TActLimitedChallengeEnterBattleReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeEnterBattleReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeEnterBattleReq, battlecheckparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeEnterBattleReq, debuffarr_),
  };
  TActLimitedChallengeEnterBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeEnterBattleReq_descriptor_,
      TActLimitedChallengeEnterBattleReq::default_instance_,
      TActLimitedChallengeEnterBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeEnterBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeEnterBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeEnterBattleReq));
  TActLimitedChallengeEnterBattleRsp_descriptor_ = file->message_type(8);
  static const int TActLimitedChallengeEnterBattleRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeEnterBattleRsp, battleargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeEnterBattleRsp, challengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeEnterBattleRsp, losenum_),
  };
  TActLimitedChallengeEnterBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeEnterBattleRsp_descriptor_,
      TActLimitedChallengeEnterBattleRsp::default_instance_,
      TActLimitedChallengeEnterBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeEnterBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeEnterBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeEnterBattleRsp));
  TActLimitedChallengeReportBattleReq_descriptor_ = file->message_type(9);
  static const int TActLimitedChallengeReportBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeReportBattleReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeReportBattleReq, battleresult_),
  };
  TActLimitedChallengeReportBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeReportBattleReq_descriptor_,
      TActLimitedChallengeReportBattleReq::default_instance_,
      TActLimitedChallengeReportBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeReportBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeReportBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeReportBattleReq));
  TActLimitedChallengeReportBattleRsp_descriptor_ = file->message_type(10);
  static const int TActLimitedChallengeReportBattleRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeReportBattleRsp, droparr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeReportBattleRsp, strongholdarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeReportBattleRsp, challengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeReportBattleRsp, strongholdwinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeReportBattleRsp, losenum_),
  };
  TActLimitedChallengeReportBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeReportBattleRsp_descriptor_,
      TActLimitedChallengeReportBattleRsp::default_instance_,
      TActLimitedChallengeReportBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeReportBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeReportBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeReportBattleRsp));
  TActLimitedChallengeReceiveAchievementReq_descriptor_ = file->message_type(11);
  static const int TActLimitedChallengeReceiveAchievementReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeReceiveAchievementReq, tid_),
  };
  TActLimitedChallengeReceiveAchievementReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeReceiveAchievementReq_descriptor_,
      TActLimitedChallengeReceiveAchievementReq::default_instance_,
      TActLimitedChallengeReceiveAchievementReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeReceiveAchievementReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeReceiveAchievementReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeReceiveAchievementReq));
  TActLimitedChallengeAutoReceiveAchievementRsp_descriptor_ = file->message_type(12);
  static const int TActLimitedChallengeAutoReceiveAchievementRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeAutoReceiveAchievementRsp, rewardedtidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeAutoReceiveAchievementRsp, rewardarr_),
  };
  TActLimitedChallengeAutoReceiveAchievementRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeAutoReceiveAchievementRsp_descriptor_,
      TActLimitedChallengeAutoReceiveAchievementRsp::default_instance_,
      TActLimitedChallengeAutoReceiveAchievementRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeAutoReceiveAchievementRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeAutoReceiveAchievementRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeAutoReceiveAchievementRsp));
  TActLimitedChallengeNotify_descriptor_ = file->message_type(13);
  static const int TActLimitedChallengeNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeNotify, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeNotify, droparr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeNotify, squadarr_),
  };
  TActLimitedChallengeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeNotify_descriptor_,
      TActLimitedChallengeNotify::default_instance_,
      TActLimitedChallengeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeNotify));
  TActLimitedChallengeSetSquadReq_descriptor_ = file->message_type(14);
  static const int TActLimitedChallengeSetSquadReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSetSquadReq, squadarr_),
  };
  TActLimitedChallengeSetSquadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeSetSquadReq_descriptor_,
      TActLimitedChallengeSetSquadReq::default_instance_,
      TActLimitedChallengeSetSquadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSetSquadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSetSquadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeSetSquadReq));
  TActLimitedChallengeSetSquadRsp_descriptor_ = file->message_type(15);
  static const int TActLimitedChallengeSetSquadRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSetSquadRsp, squadarr_),
  };
  TActLimitedChallengeSetSquadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeSetSquadRsp_descriptor_,
      TActLimitedChallengeSetSquadRsp::default_instance_,
      TActLimitedChallengeSetSquadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSetSquadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSetSquadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeSetSquadRsp));
  TActLimitedChallengeSweepReq_descriptor_ = file->message_type(16);
  static const int TActLimitedChallengeSweepReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSweepReq, id_),
  };
  TActLimitedChallengeSweepReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeSweepReq_descriptor_,
      TActLimitedChallengeSweepReq::default_instance_,
      TActLimitedChallengeSweepReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSweepReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSweepReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeSweepReq));
  TActLimitedChallengeSweepRsp_descriptor_ = file->message_type(17);
  static const int TActLimitedChallengeSweepRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSweepRsp, droparr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSweepRsp, challengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSweepRsp, strongholdwinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSweepRsp, losenum_),
  };
  TActLimitedChallengeSweepRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActLimitedChallengeSweepRsp_descriptor_,
      TActLimitedChallengeSweepRsp::default_instance_,
      TActLimitedChallengeSweepRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSweepRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActLimitedChallengeSweepRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActLimitedChallengeSweepRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActLimitedChallenge_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeBattleArmyInfo_descriptor_, &TActLimitedChallengeBattleArmyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeStrongholdInfo_descriptor_, &TActLimitedChallengeStrongholdInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeShopInfo_descriptor_, &TActLimitedChallengeShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeSquadInfo_descriptor_, &TActLimitedChallengeSquadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeGetInfoRsp_descriptor_, &TActLimitedChallengeGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeBuyItemReq_descriptor_, &TActLimitedChallengeBuyItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeBuyGoldItemReq_descriptor_, &TActLimitedChallengeBuyGoldItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeEnterBattleReq_descriptor_, &TActLimitedChallengeEnterBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeEnterBattleRsp_descriptor_, &TActLimitedChallengeEnterBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeReportBattleReq_descriptor_, &TActLimitedChallengeReportBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeReportBattleRsp_descriptor_, &TActLimitedChallengeReportBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeReceiveAchievementReq_descriptor_, &TActLimitedChallengeReceiveAchievementReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeAutoReceiveAchievementRsp_descriptor_, &TActLimitedChallengeAutoReceiveAchievementRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeNotify_descriptor_, &TActLimitedChallengeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeSetSquadReq_descriptor_, &TActLimitedChallengeSetSquadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeSetSquadRsp_descriptor_, &TActLimitedChallengeSetSquadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeSweepReq_descriptor_, &TActLimitedChallengeSweepReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActLimitedChallengeSweepRsp_descriptor_, &TActLimitedChallengeSweepRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto() {
  delete TActLimitedChallengeBattleArmyInfo::default_instance_;
  delete TActLimitedChallengeBattleArmyInfo_reflection_;
  delete TActLimitedChallengeStrongholdInfo::default_instance_;
  delete TActLimitedChallengeStrongholdInfo_reflection_;
  delete TActLimitedChallengeShopInfo::default_instance_;
  delete TActLimitedChallengeShopInfo_reflection_;
  delete TActLimitedChallengeSquadInfo::default_instance_;
  delete TActLimitedChallengeSquadInfo_reflection_;
  delete TActLimitedChallengeGetInfoRsp::default_instance_;
  delete TActLimitedChallengeGetInfoRsp_reflection_;
  delete TActLimitedChallengeBuyItemReq::default_instance_;
  delete TActLimitedChallengeBuyItemReq_reflection_;
  delete TActLimitedChallengeBuyGoldItemReq::default_instance_;
  delete TActLimitedChallengeBuyGoldItemReq_reflection_;
  delete TActLimitedChallengeEnterBattleReq::default_instance_;
  delete TActLimitedChallengeEnterBattleReq_reflection_;
  delete TActLimitedChallengeEnterBattleRsp::default_instance_;
  delete TActLimitedChallengeEnterBattleRsp_reflection_;
  delete TActLimitedChallengeReportBattleReq::default_instance_;
  delete TActLimitedChallengeReportBattleReq_reflection_;
  delete TActLimitedChallengeReportBattleRsp::default_instance_;
  delete TActLimitedChallengeReportBattleRsp_reflection_;
  delete TActLimitedChallengeReceiveAchievementReq::default_instance_;
  delete TActLimitedChallengeReceiveAchievementReq_reflection_;
  delete TActLimitedChallengeAutoReceiveAchievementRsp::default_instance_;
  delete TActLimitedChallengeAutoReceiveAchievementRsp_reflection_;
  delete TActLimitedChallengeNotify::default_instance_;
  delete TActLimitedChallengeNotify_reflection_;
  delete TActLimitedChallengeSetSquadReq::default_instance_;
  delete TActLimitedChallengeSetSquadReq_reflection_;
  delete TActLimitedChallengeSetSquadRsp::default_instance_;
  delete TActLimitedChallengeSetSquadRsp_reflection_;
  delete TActLimitedChallengeSweepReq::default_instance_;
  delete TActLimitedChallengeSweepReq_reflection_;
  delete TActLimitedChallengeSweepRsp::default_instance_;
  delete TActLimitedChallengeSweepRsp_reflection_;
}

void protobuf_AddDesc_net_2fActLimitedChallenge_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035net/ActLimitedChallenge.proto\022\002pb\032\020net"
    "/Battle.proto\032\026net/CommonReward.proto\"e\n"
    "\"TActLimitedChallengeBattleArmyInfo\022\013\n\003F"
    "id\030\001 \001(\r\022\036\n\007ArmyArr\030\002 \003(\0132\r.pb.TArmyInfo"
    "\022\022\n\nFightForce\030\003 \001(\004\"\324\001\n\"TActLimitedChal"
    "lengeStrongholdInfo\022\n\n\002Id\030\001 \001(\r\022=\n\rBattl"
    "eArmyArr\030\002 \003(\0132&.pb.TActLimitedChallenge"
    "BattleArmyInfo\022\016\n\006PassLv\030\003 \001(\r\022\021\n\tAtkWin"
    "Num\030\004 \001(\r\022\027\n\017SelectDebuffArr\030\005 \003(\r\022\'\n\014Sw"
    "eepDropArr\030\006 \003(\0132\021.pb.TCommonReward\":\n\034T"
    "ActLimitedChallengeShopInfo\022\n\n\002Id\030\001 \001(\r\022"
    "\016\n\006BuyNum\030\002 \001(\r\";\n\035TActLimitedChallengeS"
    "quadInfo\022\013\n\003Fid\030\001 \001(\r\022\r\n\005Squad\030\002 \003(\r\"\363\002\n"
    "\036TActLimitedChallengeGetInfoRsp\022=\n\rStron"
    "gholdArr\030\001 \003(\0132&.pb.TActLimitedChallenge"
    "StrongholdInfo\0221\n\007ShopArr\030\002 \003(\0132 .pb.TAc"
    "tLimitedChallengeShopInfo\0225\n\013GoldShopArr"
    "\030\003 \003(\0132 .pb.TActLimitedChallengeShopInfo"
    "\0224\n\nRmbShopArr\030\004 \003(\0132 .pb.TActLimitedCha"
    "llengeShopInfo\022\024\n\014ChallengeNum\030\005 \001(\r\022\017\n\007"
    "LoseNum\030\006 \001(\r\0223\n\010SquadArr\030\007 \003(\0132!.pb.TAc"
    "tLimitedChallengeSquadInfo\022\026\n\016RewardedTi"
    "dArr\030\010 \003(\r\"9\n\036TActLimitedChallengeBuyIte"
    "mReq\022\n\n\002Id\030\002 \001(\r\022\013\n\003Num\030\003 \001(\r\"=\n\"TActLim"
    "itedChallengeBuyGoldItemReq\022\n\n\002Id\030\002 \001(\r\022"
    "\013\n\003Num\030\003 \001(\r\"t\n\"TActLimitedChallengeEnte"
    "rBattleReq\022\n\n\002ID\030\001 \001(\r\022/\n\020BattleCheckPar"
    "am\030\002 \001(\0132\025.pb.TBattleCheckParam\022\021\n\tDebuf"
    "fArr\030\003 \003(\r\"p\n\"TActLimitedChallengeEnterB"
    "attleRsp\022#\n\nBattleArgs\030\001 \003(\0132\017.pb.TBattl"
    "eArgs\022\024\n\014ChallengeNum\030\002 \001(\r\022\017\n\007LoseNum\030\003"
    " \001(\r\"G\n#TActLimitedChallengeReportBattle"
    "Req\022\n\n\002ID\030\001 \001(\r\022\024\n\014BattleResult\030\002 \003(\014\"\311\001"
    "\n#TActLimitedChallengeReportBattleRsp\022\"\n"
    "\007DropArr\030\001 \003(\0132\021.pb.TCommonReward\022=\n\rStr"
    "ongholdArr\030\002 \003(\0132&.pb.TActLimitedChallen"
    "geStrongholdInfo\022\024\n\014ChallengeNum\030\003 \001(\r\022\030"
    "\n\020StrongholdWinNum\030\004 \001(\r\022\017\n\007LoseNum\030\005 \001("
    "\r\"8\n)TActLimitedChallengeReceiveAchievem"
    "entReq\022\013\n\003Tid\030\001 \001(\r\"m\n-TActLimitedChalle"
    "ngeAutoReceiveAchievementRsp\022\026\n\016Rewarded"
    "TidArr\030\001 \003(\r\022$\n\tRewardArr\030\002 \003(\0132\021.pb.TCo"
    "mmonReward\"\205\001\n\032TActLimitedChallengeNotif"
    "y\022\016\n\006ItemId\030\001 \001(\r\022\"\n\007DropArr\030\002 \003(\0132\021.pb."
    "TCommonReward\0223\n\010SquadArr\030\003 \003(\0132!.pb.TAc"
    "tLimitedChallengeSquadInfo\"V\n\037TActLimite"
    "dChallengeSetSquadReq\0223\n\010SquadArr\030\001 \003(\0132"
    "!.pb.TActLimitedChallengeSquadInfo\"V\n\037TA"
    "ctLimitedChallengeSetSquadRsp\0223\n\010SquadAr"
    "r\030\001 \003(\0132!.pb.TActLimitedChallengeSquadIn"
    "fo\"*\n\034TActLimitedChallengeSweepReq\022\n\n\002ID"
    "\030\001 \001(\r\"\203\001\n\034TActLimitedChallengeSweepRsp\022"
    "\"\n\007DropArr\030\001 \003(\0132\021.pb.TCommonReward\022\024\n\014C"
    "hallengeNum\030\003 \001(\r\022\030\n\020StrongholdWinNum\030\004 "
    "\001(\r\022\017\n\007LoseNum\030\005 \001(\r", 2180);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActLimitedChallenge.proto", &protobuf_RegisterTypes);
  TActLimitedChallengeBattleArmyInfo::default_instance_ = new TActLimitedChallengeBattleArmyInfo();
  TActLimitedChallengeStrongholdInfo::default_instance_ = new TActLimitedChallengeStrongholdInfo();
  TActLimitedChallengeShopInfo::default_instance_ = new TActLimitedChallengeShopInfo();
  TActLimitedChallengeSquadInfo::default_instance_ = new TActLimitedChallengeSquadInfo();
  TActLimitedChallengeGetInfoRsp::default_instance_ = new TActLimitedChallengeGetInfoRsp();
  TActLimitedChallengeBuyItemReq::default_instance_ = new TActLimitedChallengeBuyItemReq();
  TActLimitedChallengeBuyGoldItemReq::default_instance_ = new TActLimitedChallengeBuyGoldItemReq();
  TActLimitedChallengeEnterBattleReq::default_instance_ = new TActLimitedChallengeEnterBattleReq();
  TActLimitedChallengeEnterBattleRsp::default_instance_ = new TActLimitedChallengeEnterBattleRsp();
  TActLimitedChallengeReportBattleReq::default_instance_ = new TActLimitedChallengeReportBattleReq();
  TActLimitedChallengeReportBattleRsp::default_instance_ = new TActLimitedChallengeReportBattleRsp();
  TActLimitedChallengeReceiveAchievementReq::default_instance_ = new TActLimitedChallengeReceiveAchievementReq();
  TActLimitedChallengeAutoReceiveAchievementRsp::default_instance_ = new TActLimitedChallengeAutoReceiveAchievementRsp();
  TActLimitedChallengeNotify::default_instance_ = new TActLimitedChallengeNotify();
  TActLimitedChallengeSetSquadReq::default_instance_ = new TActLimitedChallengeSetSquadReq();
  TActLimitedChallengeSetSquadRsp::default_instance_ = new TActLimitedChallengeSetSquadRsp();
  TActLimitedChallengeSweepReq::default_instance_ = new TActLimitedChallengeSweepReq();
  TActLimitedChallengeSweepRsp::default_instance_ = new TActLimitedChallengeSweepRsp();
  TActLimitedChallengeBattleArmyInfo::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeStrongholdInfo::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeShopInfo::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeSquadInfo::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeBuyItemReq::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeBuyGoldItemReq::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeEnterBattleReq::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeEnterBattleRsp::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeReportBattleReq::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeReportBattleRsp::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeReceiveAchievementReq::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeAutoReceiveAchievementRsp::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeNotify::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeSetSquadReq::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeSetSquadRsp::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeSweepReq::default_instance_->InitAsDefaultInstance();
  TActLimitedChallengeSweepRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActLimitedChallenge_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActLimitedChallenge_2eproto {
  StaticDescriptorInitializer_net_2fActLimitedChallenge_2eproto() {
    protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  }
} static_descriptor_initializer_net_2fActLimitedChallenge_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeBattleArmyInfo::kFidFieldNumber;
const int TActLimitedChallengeBattleArmyInfo::kArmyArrFieldNumber;
const int TActLimitedChallengeBattleArmyInfo::kFightForceFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeBattleArmyInfo::TActLimitedChallengeBattleArmyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeBattleArmyInfo)
}

void TActLimitedChallengeBattleArmyInfo::InitAsDefaultInstance() {
}

TActLimitedChallengeBattleArmyInfo::TActLimitedChallengeBattleArmyInfo(const TActLimitedChallengeBattleArmyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeBattleArmyInfo)
}

void TActLimitedChallengeBattleArmyInfo::SharedCtor() {
  _cached_size_ = 0;
  fid_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeBattleArmyInfo::~TActLimitedChallengeBattleArmyInfo() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeBattleArmyInfo)
  SharedDtor();
}

void TActLimitedChallengeBattleArmyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeBattleArmyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeBattleArmyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeBattleArmyInfo_descriptor_;
}

const TActLimitedChallengeBattleArmyInfo& TActLimitedChallengeBattleArmyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeBattleArmyInfo* TActLimitedChallengeBattleArmyInfo::default_instance_ = NULL;

TActLimitedChallengeBattleArmyInfo* TActLimitedChallengeBattleArmyInfo::New() const {
  return new TActLimitedChallengeBattleArmyInfo;
}

void TActLimitedChallengeBattleArmyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActLimitedChallengeBattleArmyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fightforce_, fid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  armyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeBattleArmyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeBattleArmyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Fid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fid_)));
          set_has_fid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArmyArr;
        break;
      }

      // repeated .pb.TArmyInfo ArmyArr = 2;
      case 2: {
        if (tag == 18) {
         parse_ArmyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_armyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArmyArr;
        if (input->ExpectTag(24)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeBattleArmyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeBattleArmyInfo)
  return false;
#undef DO_
}

void TActLimitedChallengeBattleArmyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeBattleArmyInfo)
  // optional uint32 Fid = 1;
  if (has_fid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fid(), output);
  }

  // repeated .pb.TArmyInfo ArmyArr = 2;
  for (int i = 0; i < this->armyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->armyarr(i), output);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeBattleArmyInfo)
}

::google::protobuf::uint8* TActLimitedChallengeBattleArmyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeBattleArmyInfo)
  // optional uint32 Fid = 1;
  if (has_fid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fid(), target);
  }

  // repeated .pb.TArmyInfo ArmyArr = 2;
  for (int i = 0; i < this->armyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->armyarr(i), target);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeBattleArmyInfo)
  return target;
}

int TActLimitedChallengeBattleArmyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Fid = 1;
    if (has_fid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fid());
    }

    // optional uint64 FightForce = 3;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  // repeated .pb.TArmyInfo ArmyArr = 2;
  total_size += 1 * this->armyarr_size();
  for (int i = 0; i < this->armyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->armyarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeBattleArmyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeBattleArmyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeBattleArmyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeBattleArmyInfo::MergeFrom(const TActLimitedChallengeBattleArmyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  armyarr_.MergeFrom(from.armyarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fid()) {
      set_fid(from.fid());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeBattleArmyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeBattleArmyInfo::CopyFrom(const TActLimitedChallengeBattleArmyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeBattleArmyInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->armyarr())) return false;
  return true;
}

void TActLimitedChallengeBattleArmyInfo::Swap(TActLimitedChallengeBattleArmyInfo* other) {
  if (other != this) {
    std::swap(fid_, other->fid_);
    armyarr_.Swap(&other->armyarr_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeBattleArmyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeBattleArmyInfo_descriptor_;
  metadata.reflection = TActLimitedChallengeBattleArmyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeStrongholdInfo::kIdFieldNumber;
const int TActLimitedChallengeStrongholdInfo::kBattleArmyArrFieldNumber;
const int TActLimitedChallengeStrongholdInfo::kPassLvFieldNumber;
const int TActLimitedChallengeStrongholdInfo::kAtkWinNumFieldNumber;
const int TActLimitedChallengeStrongholdInfo::kSelectDebuffArrFieldNumber;
const int TActLimitedChallengeStrongholdInfo::kSweepDropArrFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeStrongholdInfo::TActLimitedChallengeStrongholdInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeStrongholdInfo)
}

void TActLimitedChallengeStrongholdInfo::InitAsDefaultInstance() {
}

TActLimitedChallengeStrongholdInfo::TActLimitedChallengeStrongholdInfo(const TActLimitedChallengeStrongholdInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeStrongholdInfo)
}

void TActLimitedChallengeStrongholdInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  passlv_ = 0u;
  atkwinnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeStrongholdInfo::~TActLimitedChallengeStrongholdInfo() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeStrongholdInfo)
  SharedDtor();
}

void TActLimitedChallengeStrongholdInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeStrongholdInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeStrongholdInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeStrongholdInfo_descriptor_;
}

const TActLimitedChallengeStrongholdInfo& TActLimitedChallengeStrongholdInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeStrongholdInfo* TActLimitedChallengeStrongholdInfo::default_instance_ = NULL;

TActLimitedChallengeStrongholdInfo* TActLimitedChallengeStrongholdInfo::New() const {
  return new TActLimitedChallengeStrongholdInfo;
}

void TActLimitedChallengeStrongholdInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActLimitedChallengeStrongholdInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(id_, passlv_);
    atkwinnum_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  battlearmyarr_.Clear();
  selectdebuffarr_.Clear();
  sweepdroparr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeStrongholdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeStrongholdInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleArmyArr;
        break;
      }

      // repeated .pb.TActLimitedChallengeBattleArmyInfo BattleArmyArr = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleArmyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battlearmyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleArmyArr;
        if (input->ExpectTag(24)) goto parse_PassLv;
        break;
      }

      // optional uint32 PassLv = 3;
      case 3: {
        if (tag == 24) {
         parse_PassLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passlv_)));
          set_has_passlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AtkWinNum;
        break;
      }

      // optional uint32 AtkWinNum = 4;
      case 4: {
        if (tag == 32) {
         parse_AtkWinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkwinnum_)));
          set_has_atkwinnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SelectDebuffArr;
        break;
      }

      // repeated uint32 SelectDebuffArr = 5;
      case 5: {
        if (tag == 40) {
         parse_SelectDebuffArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_selectdebuffarr())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_selectdebuffarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SelectDebuffArr;
        if (input->ExpectTag(50)) goto parse_SweepDropArr;
        break;
      }

      // repeated .pb.TCommonReward SweepDropArr = 6;
      case 6: {
        if (tag == 50) {
         parse_SweepDropArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sweepdroparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SweepDropArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeStrongholdInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeStrongholdInfo)
  return false;
#undef DO_
}

void TActLimitedChallengeStrongholdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeStrongholdInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .pb.TActLimitedChallengeBattleArmyInfo BattleArmyArr = 2;
  for (int i = 0; i < this->battlearmyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battlearmyarr(i), output);
  }

  // optional uint32 PassLv = 3;
  if (has_passlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->passlv(), output);
  }

  // optional uint32 AtkWinNum = 4;
  if (has_atkwinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->atkwinnum(), output);
  }

  // repeated uint32 SelectDebuffArr = 5;
  for (int i = 0; i < this->selectdebuffarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->selectdebuffarr(i), output);
  }

  // repeated .pb.TCommonReward SweepDropArr = 6;
  for (int i = 0; i < this->sweepdroparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sweepdroparr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeStrongholdInfo)
}

::google::protobuf::uint8* TActLimitedChallengeStrongholdInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeStrongholdInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .pb.TActLimitedChallengeBattleArmyInfo BattleArmyArr = 2;
  for (int i = 0; i < this->battlearmyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battlearmyarr(i), target);
  }

  // optional uint32 PassLv = 3;
  if (has_passlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->passlv(), target);
  }

  // optional uint32 AtkWinNum = 4;
  if (has_atkwinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->atkwinnum(), target);
  }

  // repeated uint32 SelectDebuffArr = 5;
  for (int i = 0; i < this->selectdebuffarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->selectdebuffarr(i), target);
  }

  // repeated .pb.TCommonReward SweepDropArr = 6;
  for (int i = 0; i < this->sweepdroparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sweepdroparr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeStrongholdInfo)
  return target;
}

int TActLimitedChallengeStrongholdInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 PassLv = 3;
    if (has_passlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passlv());
    }

    // optional uint32 AtkWinNum = 4;
    if (has_atkwinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkwinnum());
    }

  }
  // repeated .pb.TActLimitedChallengeBattleArmyInfo BattleArmyArr = 2;
  total_size += 1 * this->battlearmyarr_size();
  for (int i = 0; i < this->battlearmyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battlearmyarr(i));
  }

  // repeated uint32 SelectDebuffArr = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->selectdebuffarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->selectdebuffarr(i));
    }
    total_size += 1 * this->selectdebuffarr_size() + data_size;
  }

  // repeated .pb.TCommonReward SweepDropArr = 6;
  total_size += 1 * this->sweepdroparr_size();
  for (int i = 0; i < this->sweepdroparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sweepdroparr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeStrongholdInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeStrongholdInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeStrongholdInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeStrongholdInfo::MergeFrom(const TActLimitedChallengeStrongholdInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  battlearmyarr_.MergeFrom(from.battlearmyarr_);
  selectdebuffarr_.MergeFrom(from.selectdebuffarr_);
  sweepdroparr_.MergeFrom(from.sweepdroparr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_passlv()) {
      set_passlv(from.passlv());
    }
    if (from.has_atkwinnum()) {
      set_atkwinnum(from.atkwinnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeStrongholdInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeStrongholdInfo::CopyFrom(const TActLimitedChallengeStrongholdInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeStrongholdInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->battlearmyarr())) return false;
  return true;
}

void TActLimitedChallengeStrongholdInfo::Swap(TActLimitedChallengeStrongholdInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    battlearmyarr_.Swap(&other->battlearmyarr_);
    std::swap(passlv_, other->passlv_);
    std::swap(atkwinnum_, other->atkwinnum_);
    selectdebuffarr_.Swap(&other->selectdebuffarr_);
    sweepdroparr_.Swap(&other->sweepdroparr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeStrongholdInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeStrongholdInfo_descriptor_;
  metadata.reflection = TActLimitedChallengeStrongholdInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeShopInfo::kIdFieldNumber;
const int TActLimitedChallengeShopInfo::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeShopInfo::TActLimitedChallengeShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeShopInfo)
}

void TActLimitedChallengeShopInfo::InitAsDefaultInstance() {
}

TActLimitedChallengeShopInfo::TActLimitedChallengeShopInfo(const TActLimitedChallengeShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeShopInfo)
}

void TActLimitedChallengeShopInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeShopInfo::~TActLimitedChallengeShopInfo() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeShopInfo)
  SharedDtor();
}

void TActLimitedChallengeShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeShopInfo_descriptor_;
}

const TActLimitedChallengeShopInfo& TActLimitedChallengeShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeShopInfo* TActLimitedChallengeShopInfo::default_instance_ = NULL;

TActLimitedChallengeShopInfo* TActLimitedChallengeShopInfo::New() const {
  return new TActLimitedChallengeShopInfo;
}

void TActLimitedChallengeShopInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActLimitedChallengeShopInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeShopInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeShopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeShopInfo)
  return false;
#undef DO_
}

void TActLimitedChallengeShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeShopInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeShopInfo)
}

::google::protobuf::uint8* TActLimitedChallengeShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeShopInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeShopInfo)
  return target;
}

int TActLimitedChallengeShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 BuyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeShopInfo::MergeFrom(const TActLimitedChallengeShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeShopInfo::CopyFrom(const TActLimitedChallengeShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeShopInfo::IsInitialized() const {

  return true;
}

void TActLimitedChallengeShopInfo::Swap(TActLimitedChallengeShopInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeShopInfo_descriptor_;
  metadata.reflection = TActLimitedChallengeShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeSquadInfo::kFidFieldNumber;
const int TActLimitedChallengeSquadInfo::kSquadFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeSquadInfo::TActLimitedChallengeSquadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeSquadInfo)
}

void TActLimitedChallengeSquadInfo::InitAsDefaultInstance() {
}

TActLimitedChallengeSquadInfo::TActLimitedChallengeSquadInfo(const TActLimitedChallengeSquadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeSquadInfo)
}

void TActLimitedChallengeSquadInfo::SharedCtor() {
  _cached_size_ = 0;
  fid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeSquadInfo::~TActLimitedChallengeSquadInfo() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeSquadInfo)
  SharedDtor();
}

void TActLimitedChallengeSquadInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeSquadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeSquadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeSquadInfo_descriptor_;
}

const TActLimitedChallengeSquadInfo& TActLimitedChallengeSquadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeSquadInfo* TActLimitedChallengeSquadInfo::default_instance_ = NULL;

TActLimitedChallengeSquadInfo* TActLimitedChallengeSquadInfo::New() const {
  return new TActLimitedChallengeSquadInfo;
}

void TActLimitedChallengeSquadInfo::Clear() {
  fid_ = 0u;
  squad_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeSquadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeSquadInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Fid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fid_)));
          set_has_fid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Squad;
        break;
      }

      // repeated uint32 Squad = 2;
      case 2: {
        if (tag == 16) {
         parse_Squad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_squad())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_squad())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Squad;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeSquadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeSquadInfo)
  return false;
#undef DO_
}

void TActLimitedChallengeSquadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeSquadInfo)
  // optional uint32 Fid = 1;
  if (has_fid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fid(), output);
  }

  // repeated uint32 Squad = 2;
  for (int i = 0; i < this->squad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->squad(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeSquadInfo)
}

::google::protobuf::uint8* TActLimitedChallengeSquadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeSquadInfo)
  // optional uint32 Fid = 1;
  if (has_fid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fid(), target);
  }

  // repeated uint32 Squad = 2;
  for (int i = 0; i < this->squad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->squad(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeSquadInfo)
  return target;
}

int TActLimitedChallengeSquadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Fid = 1;
    if (has_fid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fid());
    }

  }
  // repeated uint32 Squad = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->squad_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->squad(i));
    }
    total_size += 1 * this->squad_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeSquadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeSquadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeSquadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeSquadInfo::MergeFrom(const TActLimitedChallengeSquadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  squad_.MergeFrom(from.squad_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fid()) {
      set_fid(from.fid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeSquadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeSquadInfo::CopyFrom(const TActLimitedChallengeSquadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeSquadInfo::IsInitialized() const {

  return true;
}

void TActLimitedChallengeSquadInfo::Swap(TActLimitedChallengeSquadInfo* other) {
  if (other != this) {
    std::swap(fid_, other->fid_);
    squad_.Swap(&other->squad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeSquadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeSquadInfo_descriptor_;
  metadata.reflection = TActLimitedChallengeSquadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeGetInfoRsp::kStrongholdArrFieldNumber;
const int TActLimitedChallengeGetInfoRsp::kShopArrFieldNumber;
const int TActLimitedChallengeGetInfoRsp::kGoldShopArrFieldNumber;
const int TActLimitedChallengeGetInfoRsp::kRmbShopArrFieldNumber;
const int TActLimitedChallengeGetInfoRsp::kChallengeNumFieldNumber;
const int TActLimitedChallengeGetInfoRsp::kLoseNumFieldNumber;
const int TActLimitedChallengeGetInfoRsp::kSquadArrFieldNumber;
const int TActLimitedChallengeGetInfoRsp::kRewardedTidArrFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeGetInfoRsp::TActLimitedChallengeGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeGetInfoRsp)
}

void TActLimitedChallengeGetInfoRsp::InitAsDefaultInstance() {
}

TActLimitedChallengeGetInfoRsp::TActLimitedChallengeGetInfoRsp(const TActLimitedChallengeGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeGetInfoRsp)
}

void TActLimitedChallengeGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  challengenum_ = 0u;
  losenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeGetInfoRsp::~TActLimitedChallengeGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeGetInfoRsp)
  SharedDtor();
}

void TActLimitedChallengeGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeGetInfoRsp_descriptor_;
}

const TActLimitedChallengeGetInfoRsp& TActLimitedChallengeGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeGetInfoRsp* TActLimitedChallengeGetInfoRsp::default_instance_ = NULL;

TActLimitedChallengeGetInfoRsp* TActLimitedChallengeGetInfoRsp::New() const {
  return new TActLimitedChallengeGetInfoRsp;
}

void TActLimitedChallengeGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActLimitedChallengeGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(challengenum_, losenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  strongholdarr_.Clear();
  shoparr_.Clear();
  goldshoparr_.Clear();
  rmbshoparr_.Clear();
  squadarr_.Clear();
  rewardedtidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActLimitedChallengeStrongholdInfo StrongholdArr = 1;
      case 1: {
        if (tag == 10) {
         parse_StrongholdArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strongholdarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_StrongholdArr;
        if (input->ExpectTag(18)) goto parse_ShopArr;
        break;
      }

      // repeated .pb.TActLimitedChallengeShopInfo ShopArr = 2;
      case 2: {
        if (tag == 18) {
         parse_ShopArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shoparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ShopArr;
        if (input->ExpectTag(26)) goto parse_GoldShopArr;
        break;
      }

      // repeated .pb.TActLimitedChallengeShopInfo GoldShopArr = 3;
      case 3: {
        if (tag == 26) {
         parse_GoldShopArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goldshoparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GoldShopArr;
        if (input->ExpectTag(34)) goto parse_RmbShopArr;
        break;
      }

      // repeated .pb.TActLimitedChallengeShopInfo RmbShopArr = 4;
      case 4: {
        if (tag == 34) {
         parse_RmbShopArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rmbshoparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RmbShopArr;
        if (input->ExpectTag(40)) goto parse_ChallengeNum;
        break;
      }

      // optional uint32 ChallengeNum = 5;
      case 5: {
        if (tag == 40) {
         parse_ChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengenum_)));
          set_has_challengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_LoseNum;
        break;
      }

      // optional uint32 LoseNum = 6;
      case 6: {
        if (tag == 48) {
         parse_LoseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losenum_)));
          set_has_losenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_SquadArr;
        break;
      }

      // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 7;
      case 7: {
        if (tag == 58) {
         parse_SquadArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_squadarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_SquadArr;
        if (input->ExpectTag(64)) goto parse_RewardedTidArr;
        break;
      }

      // repeated uint32 RewardedTidArr = 8;
      case 8: {
        if (tag == 64) {
         parse_RewardedTidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_rewardedtidarr())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewardedtidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_RewardedTidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeGetInfoRsp)
  return false;
#undef DO_
}

void TActLimitedChallengeGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeGetInfoRsp)
  // repeated .pb.TActLimitedChallengeStrongholdInfo StrongholdArr = 1;
  for (int i = 0; i < this->strongholdarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->strongholdarr(i), output);
  }

  // repeated .pb.TActLimitedChallengeShopInfo ShopArr = 2;
  for (int i = 0; i < this->shoparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shoparr(i), output);
  }

  // repeated .pb.TActLimitedChallengeShopInfo GoldShopArr = 3;
  for (int i = 0; i < this->goldshoparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->goldshoparr(i), output);
  }

  // repeated .pb.TActLimitedChallengeShopInfo RmbShopArr = 4;
  for (int i = 0; i < this->rmbshoparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rmbshoparr(i), output);
  }

  // optional uint32 ChallengeNum = 5;
  if (has_challengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->challengenum(), output);
  }

  // optional uint32 LoseNum = 6;
  if (has_losenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->losenum(), output);
  }

  // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 7;
  for (int i = 0; i < this->squadarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->squadarr(i), output);
  }

  // repeated uint32 RewardedTidArr = 8;
  for (int i = 0; i < this->rewardedtidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->rewardedtidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeGetInfoRsp)
}

::google::protobuf::uint8* TActLimitedChallengeGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeGetInfoRsp)
  // repeated .pb.TActLimitedChallengeStrongholdInfo StrongholdArr = 1;
  for (int i = 0; i < this->strongholdarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->strongholdarr(i), target);
  }

  // repeated .pb.TActLimitedChallengeShopInfo ShopArr = 2;
  for (int i = 0; i < this->shoparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shoparr(i), target);
  }

  // repeated .pb.TActLimitedChallengeShopInfo GoldShopArr = 3;
  for (int i = 0; i < this->goldshoparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->goldshoparr(i), target);
  }

  // repeated .pb.TActLimitedChallengeShopInfo RmbShopArr = 4;
  for (int i = 0; i < this->rmbshoparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rmbshoparr(i), target);
  }

  // optional uint32 ChallengeNum = 5;
  if (has_challengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->challengenum(), target);
  }

  // optional uint32 LoseNum = 6;
  if (has_losenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->losenum(), target);
  }

  // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 7;
  for (int i = 0; i < this->squadarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->squadarr(i), target);
  }

  // repeated uint32 RewardedTidArr = 8;
  for (int i = 0; i < this->rewardedtidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->rewardedtidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeGetInfoRsp)
  return target;
}

int TActLimitedChallengeGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional uint32 ChallengeNum = 5;
    if (has_challengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengenum());
    }

    // optional uint32 LoseNum = 6;
    if (has_losenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losenum());
    }

  }
  // repeated .pb.TActLimitedChallengeStrongholdInfo StrongholdArr = 1;
  total_size += 1 * this->strongholdarr_size();
  for (int i = 0; i < this->strongholdarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strongholdarr(i));
  }

  // repeated .pb.TActLimitedChallengeShopInfo ShopArr = 2;
  total_size += 1 * this->shoparr_size();
  for (int i = 0; i < this->shoparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shoparr(i));
  }

  // repeated .pb.TActLimitedChallengeShopInfo GoldShopArr = 3;
  total_size += 1 * this->goldshoparr_size();
  for (int i = 0; i < this->goldshoparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goldshoparr(i));
  }

  // repeated .pb.TActLimitedChallengeShopInfo RmbShopArr = 4;
  total_size += 1 * this->rmbshoparr_size();
  for (int i = 0; i < this->rmbshoparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rmbshoparr(i));
  }

  // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 7;
  total_size += 1 * this->squadarr_size();
  for (int i = 0; i < this->squadarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->squadarr(i));
  }

  // repeated uint32 RewardedTidArr = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardedtidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewardedtidarr(i));
    }
    total_size += 1 * this->rewardedtidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeGetInfoRsp::MergeFrom(const TActLimitedChallengeGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  strongholdarr_.MergeFrom(from.strongholdarr_);
  shoparr_.MergeFrom(from.shoparr_);
  goldshoparr_.MergeFrom(from.goldshoparr_);
  rmbshoparr_.MergeFrom(from.rmbshoparr_);
  squadarr_.MergeFrom(from.squadarr_);
  rewardedtidarr_.MergeFrom(from.rewardedtidarr_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_challengenum()) {
      set_challengenum(from.challengenum());
    }
    if (from.has_losenum()) {
      set_losenum(from.losenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeGetInfoRsp::CopyFrom(const TActLimitedChallengeGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeGetInfoRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->strongholdarr())) return false;
  return true;
}

void TActLimitedChallengeGetInfoRsp::Swap(TActLimitedChallengeGetInfoRsp* other) {
  if (other != this) {
    strongholdarr_.Swap(&other->strongholdarr_);
    shoparr_.Swap(&other->shoparr_);
    goldshoparr_.Swap(&other->goldshoparr_);
    rmbshoparr_.Swap(&other->rmbshoparr_);
    std::swap(challengenum_, other->challengenum_);
    std::swap(losenum_, other->losenum_);
    squadarr_.Swap(&other->squadarr_);
    rewardedtidarr_.Swap(&other->rewardedtidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeGetInfoRsp_descriptor_;
  metadata.reflection = TActLimitedChallengeGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeBuyItemReq::kIdFieldNumber;
const int TActLimitedChallengeBuyItemReq::kNumFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeBuyItemReq::TActLimitedChallengeBuyItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeBuyItemReq)
}

void TActLimitedChallengeBuyItemReq::InitAsDefaultInstance() {
}

TActLimitedChallengeBuyItemReq::TActLimitedChallengeBuyItemReq(const TActLimitedChallengeBuyItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeBuyItemReq)
}

void TActLimitedChallengeBuyItemReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeBuyItemReq::~TActLimitedChallengeBuyItemReq() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeBuyItemReq)
  SharedDtor();
}

void TActLimitedChallengeBuyItemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeBuyItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeBuyItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeBuyItemReq_descriptor_;
}

const TActLimitedChallengeBuyItemReq& TActLimitedChallengeBuyItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeBuyItemReq* TActLimitedChallengeBuyItemReq::default_instance_ = NULL;

TActLimitedChallengeBuyItemReq* TActLimitedChallengeBuyItemReq::New() const {
  return new TActLimitedChallengeBuyItemReq;
}

void TActLimitedChallengeBuyItemReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActLimitedChallengeBuyItemReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeBuyItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeBuyItemReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 3;
      case 3: {
        if (tag == 24) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeBuyItemReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeBuyItemReq)
  return false;
#undef DO_
}

void TActLimitedChallengeBuyItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeBuyItemReq)
  // optional uint32 Id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 Num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeBuyItemReq)
}

::google::protobuf::uint8* TActLimitedChallengeBuyItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeBuyItemReq)
  // optional uint32 Id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 Num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeBuyItemReq)
  return target;
}

int TActLimitedChallengeBuyItemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeBuyItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeBuyItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeBuyItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeBuyItemReq::MergeFrom(const TActLimitedChallengeBuyItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeBuyItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeBuyItemReq::CopyFrom(const TActLimitedChallengeBuyItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeBuyItemReq::IsInitialized() const {

  return true;
}

void TActLimitedChallengeBuyItemReq::Swap(TActLimitedChallengeBuyItemReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeBuyItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeBuyItemReq_descriptor_;
  metadata.reflection = TActLimitedChallengeBuyItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeBuyGoldItemReq::kIdFieldNumber;
const int TActLimitedChallengeBuyGoldItemReq::kNumFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeBuyGoldItemReq::TActLimitedChallengeBuyGoldItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeBuyGoldItemReq)
}

void TActLimitedChallengeBuyGoldItemReq::InitAsDefaultInstance() {
}

TActLimitedChallengeBuyGoldItemReq::TActLimitedChallengeBuyGoldItemReq(const TActLimitedChallengeBuyGoldItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeBuyGoldItemReq)
}

void TActLimitedChallengeBuyGoldItemReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeBuyGoldItemReq::~TActLimitedChallengeBuyGoldItemReq() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeBuyGoldItemReq)
  SharedDtor();
}

void TActLimitedChallengeBuyGoldItemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeBuyGoldItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeBuyGoldItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeBuyGoldItemReq_descriptor_;
}

const TActLimitedChallengeBuyGoldItemReq& TActLimitedChallengeBuyGoldItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeBuyGoldItemReq* TActLimitedChallengeBuyGoldItemReq::default_instance_ = NULL;

TActLimitedChallengeBuyGoldItemReq* TActLimitedChallengeBuyGoldItemReq::New() const {
  return new TActLimitedChallengeBuyGoldItemReq;
}

void TActLimitedChallengeBuyGoldItemReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActLimitedChallengeBuyGoldItemReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeBuyGoldItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeBuyGoldItemReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 3;
      case 3: {
        if (tag == 24) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeBuyGoldItemReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeBuyGoldItemReq)
  return false;
#undef DO_
}

void TActLimitedChallengeBuyGoldItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeBuyGoldItemReq)
  // optional uint32 Id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 Num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeBuyGoldItemReq)
}

::google::protobuf::uint8* TActLimitedChallengeBuyGoldItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeBuyGoldItemReq)
  // optional uint32 Id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 Num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeBuyGoldItemReq)
  return target;
}

int TActLimitedChallengeBuyGoldItemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeBuyGoldItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeBuyGoldItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeBuyGoldItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeBuyGoldItemReq::MergeFrom(const TActLimitedChallengeBuyGoldItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeBuyGoldItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeBuyGoldItemReq::CopyFrom(const TActLimitedChallengeBuyGoldItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeBuyGoldItemReq::IsInitialized() const {

  return true;
}

void TActLimitedChallengeBuyGoldItemReq::Swap(TActLimitedChallengeBuyGoldItemReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeBuyGoldItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeBuyGoldItemReq_descriptor_;
  metadata.reflection = TActLimitedChallengeBuyGoldItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeEnterBattleReq::kIDFieldNumber;
const int TActLimitedChallengeEnterBattleReq::kBattleCheckParamFieldNumber;
const int TActLimitedChallengeEnterBattleReq::kDebuffArrFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeEnterBattleReq::TActLimitedChallengeEnterBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeEnterBattleReq)
}

void TActLimitedChallengeEnterBattleReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TActLimitedChallengeEnterBattleReq::TActLimitedChallengeEnterBattleReq(const TActLimitedChallengeEnterBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeEnterBattleReq)
}

void TActLimitedChallengeEnterBattleReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeEnterBattleReq::~TActLimitedChallengeEnterBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeEnterBattleReq)
  SharedDtor();
}

void TActLimitedChallengeEnterBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TActLimitedChallengeEnterBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeEnterBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeEnterBattleReq_descriptor_;
}

const TActLimitedChallengeEnterBattleReq& TActLimitedChallengeEnterBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeEnterBattleReq* TActLimitedChallengeEnterBattleReq::default_instance_ = NULL;

TActLimitedChallengeEnterBattleReq* TActLimitedChallengeEnterBattleReq::New() const {
  return new TActLimitedChallengeEnterBattleReq;
}

void TActLimitedChallengeEnterBattleReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }
  debuffarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeEnterBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeEnterBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DebuffArr;
        break;
      }

      // repeated uint32 DebuffArr = 3;
      case 3: {
        if (tag == 24) {
         parse_DebuffArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_debuffarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_debuffarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DebuffArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeEnterBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeEnterBattleReq)
  return false;
#undef DO_
}

void TActLimitedChallengeEnterBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeEnterBattleReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battlecheckparam(), output);
  }

  // repeated uint32 DebuffArr = 3;
  for (int i = 0; i < this->debuffarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->debuffarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeEnterBattleReq)
}

::google::protobuf::uint8* TActLimitedChallengeEnterBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeEnterBattleReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battlecheckparam(), target);
  }

  // repeated uint32 DebuffArr = 3;
  for (int i = 0; i < this->debuffarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->debuffarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeEnterBattleReq)
  return target;
}

int TActLimitedChallengeEnterBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 2;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  // repeated uint32 DebuffArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->debuffarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->debuffarr(i));
    }
    total_size += 1 * this->debuffarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeEnterBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeEnterBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeEnterBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeEnterBattleReq::MergeFrom(const TActLimitedChallengeEnterBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  debuffarr_.MergeFrom(from.debuffarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeEnterBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeEnterBattleReq::CopyFrom(const TActLimitedChallengeEnterBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeEnterBattleReq::IsInitialized() const {

  return true;
}

void TActLimitedChallengeEnterBattleReq::Swap(TActLimitedChallengeEnterBattleReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    debuffarr_.Swap(&other->debuffarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeEnterBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeEnterBattleReq_descriptor_;
  metadata.reflection = TActLimitedChallengeEnterBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeEnterBattleRsp::kBattleArgsFieldNumber;
const int TActLimitedChallengeEnterBattleRsp::kChallengeNumFieldNumber;
const int TActLimitedChallengeEnterBattleRsp::kLoseNumFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeEnterBattleRsp::TActLimitedChallengeEnterBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeEnterBattleRsp)
}

void TActLimitedChallengeEnterBattleRsp::InitAsDefaultInstance() {
}

TActLimitedChallengeEnterBattleRsp::TActLimitedChallengeEnterBattleRsp(const TActLimitedChallengeEnterBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeEnterBattleRsp)
}

void TActLimitedChallengeEnterBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  challengenum_ = 0u;
  losenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeEnterBattleRsp::~TActLimitedChallengeEnterBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeEnterBattleRsp)
  SharedDtor();
}

void TActLimitedChallengeEnterBattleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeEnterBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeEnterBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeEnterBattleRsp_descriptor_;
}

const TActLimitedChallengeEnterBattleRsp& TActLimitedChallengeEnterBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeEnterBattleRsp* TActLimitedChallengeEnterBattleRsp::default_instance_ = NULL;

TActLimitedChallengeEnterBattleRsp* TActLimitedChallengeEnterBattleRsp::New() const {
  return new TActLimitedChallengeEnterBattleRsp;
}

void TActLimitedChallengeEnterBattleRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActLimitedChallengeEnterBattleRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(challengenum_, losenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  battleargs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeEnterBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeEnterBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBattleArgs BattleArgs = 1;
      case 1: {
        if (tag == 10) {
         parse_BattleArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BattleArgs;
        if (input->ExpectTag(16)) goto parse_ChallengeNum;
        break;
      }

      // optional uint32 ChallengeNum = 2;
      case 2: {
        if (tag == 16) {
         parse_ChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengenum_)));
          set_has_challengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LoseNum;
        break;
      }

      // optional uint32 LoseNum = 3;
      case 3: {
        if (tag == 24) {
         parse_LoseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losenum_)));
          set_has_losenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeEnterBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeEnterBattleRsp)
  return false;
#undef DO_
}

void TActLimitedChallengeEnterBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeEnterBattleRsp)
  // repeated .pb.TBattleArgs BattleArgs = 1;
  for (int i = 0; i < this->battleargs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleargs(i), output);
  }

  // optional uint32 ChallengeNum = 2;
  if (has_challengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challengenum(), output);
  }

  // optional uint32 LoseNum = 3;
  if (has_losenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->losenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeEnterBattleRsp)
}

::google::protobuf::uint8* TActLimitedChallengeEnterBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeEnterBattleRsp)
  // repeated .pb.TBattleArgs BattleArgs = 1;
  for (int i = 0; i < this->battleargs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleargs(i), target);
  }

  // optional uint32 ChallengeNum = 2;
  if (has_challengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->challengenum(), target);
  }

  // optional uint32 LoseNum = 3;
  if (has_losenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->losenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeEnterBattleRsp)
  return target;
}

int TActLimitedChallengeEnterBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 ChallengeNum = 2;
    if (has_challengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengenum());
    }

    // optional uint32 LoseNum = 3;
    if (has_losenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losenum());
    }

  }
  // repeated .pb.TBattleArgs BattleArgs = 1;
  total_size += 1 * this->battleargs_size();
  for (int i = 0; i < this->battleargs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battleargs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeEnterBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeEnterBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeEnterBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeEnterBattleRsp::MergeFrom(const TActLimitedChallengeEnterBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  battleargs_.MergeFrom(from.battleargs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_challengenum()) {
      set_challengenum(from.challengenum());
    }
    if (from.has_losenum()) {
      set_losenum(from.losenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeEnterBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeEnterBattleRsp::CopyFrom(const TActLimitedChallengeEnterBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeEnterBattleRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->battleargs())) return false;
  return true;
}

void TActLimitedChallengeEnterBattleRsp::Swap(TActLimitedChallengeEnterBattleRsp* other) {
  if (other != this) {
    battleargs_.Swap(&other->battleargs_);
    std::swap(challengenum_, other->challengenum_);
    std::swap(losenum_, other->losenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeEnterBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeEnterBattleRsp_descriptor_;
  metadata.reflection = TActLimitedChallengeEnterBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeReportBattleReq::kIDFieldNumber;
const int TActLimitedChallengeReportBattleReq::kBattleResultFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeReportBattleReq::TActLimitedChallengeReportBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeReportBattleReq)
}

void TActLimitedChallengeReportBattleReq::InitAsDefaultInstance() {
}

TActLimitedChallengeReportBattleReq::TActLimitedChallengeReportBattleReq(const TActLimitedChallengeReportBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeReportBattleReq)
}

void TActLimitedChallengeReportBattleReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeReportBattleReq::~TActLimitedChallengeReportBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeReportBattleReq)
  SharedDtor();
}

void TActLimitedChallengeReportBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeReportBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeReportBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeReportBattleReq_descriptor_;
}

const TActLimitedChallengeReportBattleReq& TActLimitedChallengeReportBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeReportBattleReq* TActLimitedChallengeReportBattleReq::default_instance_ = NULL;

TActLimitedChallengeReportBattleReq* TActLimitedChallengeReportBattleReq::New() const {
  return new TActLimitedChallengeReportBattleReq;
}

void TActLimitedChallengeReportBattleReq::Clear() {
  id_ = 0u;
  battleresult_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeReportBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeReportBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleResult;
        break;
      }

      // repeated bytes BattleResult = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_battleresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleResult;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeReportBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeReportBattleReq)
  return false;
#undef DO_
}

void TActLimitedChallengeReportBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeReportBattleReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated bytes BattleResult = 2;
  for (int i = 0; i < this->battleresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->battleresult(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeReportBattleReq)
}

::google::protobuf::uint8* TActLimitedChallengeReportBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeReportBattleReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated bytes BattleResult = 2;
  for (int i = 0; i < this->battleresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->battleresult(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeReportBattleReq)
  return target;
}

int TActLimitedChallengeReportBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated bytes BattleResult = 2;
  total_size += 1 * this->battleresult_size();
  for (int i = 0; i < this->battleresult_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->battleresult(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeReportBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeReportBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeReportBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeReportBattleReq::MergeFrom(const TActLimitedChallengeReportBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  battleresult_.MergeFrom(from.battleresult_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeReportBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeReportBattleReq::CopyFrom(const TActLimitedChallengeReportBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeReportBattleReq::IsInitialized() const {

  return true;
}

void TActLimitedChallengeReportBattleReq::Swap(TActLimitedChallengeReportBattleReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    battleresult_.Swap(&other->battleresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeReportBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeReportBattleReq_descriptor_;
  metadata.reflection = TActLimitedChallengeReportBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeReportBattleRsp::kDropArrFieldNumber;
const int TActLimitedChallengeReportBattleRsp::kStrongholdArrFieldNumber;
const int TActLimitedChallengeReportBattleRsp::kChallengeNumFieldNumber;
const int TActLimitedChallengeReportBattleRsp::kStrongholdWinNumFieldNumber;
const int TActLimitedChallengeReportBattleRsp::kLoseNumFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeReportBattleRsp::TActLimitedChallengeReportBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeReportBattleRsp)
}

void TActLimitedChallengeReportBattleRsp::InitAsDefaultInstance() {
}

TActLimitedChallengeReportBattleRsp::TActLimitedChallengeReportBattleRsp(const TActLimitedChallengeReportBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeReportBattleRsp)
}

void TActLimitedChallengeReportBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  challengenum_ = 0u;
  strongholdwinnum_ = 0u;
  losenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeReportBattleRsp::~TActLimitedChallengeReportBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeReportBattleRsp)
  SharedDtor();
}

void TActLimitedChallengeReportBattleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeReportBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeReportBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeReportBattleRsp_descriptor_;
}

const TActLimitedChallengeReportBattleRsp& TActLimitedChallengeReportBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeReportBattleRsp* TActLimitedChallengeReportBattleRsp::default_instance_ = NULL;

TActLimitedChallengeReportBattleRsp* TActLimitedChallengeReportBattleRsp::New() const {
  return new TActLimitedChallengeReportBattleRsp;
}

void TActLimitedChallengeReportBattleRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActLimitedChallengeReportBattleRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(challengenum_, losenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  droparr_.Clear();
  strongholdarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeReportBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeReportBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward DropArr = 1;
      case 1: {
        if (tag == 10) {
         parse_DropArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DropArr;
        if (input->ExpectTag(18)) goto parse_StrongholdArr;
        break;
      }

      // repeated .pb.TActLimitedChallengeStrongholdInfo StrongholdArr = 2;
      case 2: {
        if (tag == 18) {
         parse_StrongholdArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strongholdarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StrongholdArr;
        if (input->ExpectTag(24)) goto parse_ChallengeNum;
        break;
      }

      // optional uint32 ChallengeNum = 3;
      case 3: {
        if (tag == 24) {
         parse_ChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengenum_)));
          set_has_challengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_StrongholdWinNum;
        break;
      }

      // optional uint32 StrongholdWinNum = 4;
      case 4: {
        if (tag == 32) {
         parse_StrongholdWinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strongholdwinnum_)));
          set_has_strongholdwinnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_LoseNum;
        break;
      }

      // optional uint32 LoseNum = 5;
      case 5: {
        if (tag == 40) {
         parse_LoseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losenum_)));
          set_has_losenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeReportBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeReportBattleRsp)
  return false;
#undef DO_
}

void TActLimitedChallengeReportBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeReportBattleRsp)
  // repeated .pb.TCommonReward DropArr = 1;
  for (int i = 0; i < this->droparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->droparr(i), output);
  }

  // repeated .pb.TActLimitedChallengeStrongholdInfo StrongholdArr = 2;
  for (int i = 0; i < this->strongholdarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strongholdarr(i), output);
  }

  // optional uint32 ChallengeNum = 3;
  if (has_challengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->challengenum(), output);
  }

  // optional uint32 StrongholdWinNum = 4;
  if (has_strongholdwinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->strongholdwinnum(), output);
  }

  // optional uint32 LoseNum = 5;
  if (has_losenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->losenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeReportBattleRsp)
}

::google::protobuf::uint8* TActLimitedChallengeReportBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeReportBattleRsp)
  // repeated .pb.TCommonReward DropArr = 1;
  for (int i = 0; i < this->droparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->droparr(i), target);
  }

  // repeated .pb.TActLimitedChallengeStrongholdInfo StrongholdArr = 2;
  for (int i = 0; i < this->strongholdarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strongholdarr(i), target);
  }

  // optional uint32 ChallengeNum = 3;
  if (has_challengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->challengenum(), target);
  }

  // optional uint32 StrongholdWinNum = 4;
  if (has_strongholdwinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->strongholdwinnum(), target);
  }

  // optional uint32 LoseNum = 5;
  if (has_losenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->losenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeReportBattleRsp)
  return target;
}

int TActLimitedChallengeReportBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 ChallengeNum = 3;
    if (has_challengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengenum());
    }

    // optional uint32 StrongholdWinNum = 4;
    if (has_strongholdwinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strongholdwinnum());
    }

    // optional uint32 LoseNum = 5;
    if (has_losenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losenum());
    }

  }
  // repeated .pb.TCommonReward DropArr = 1;
  total_size += 1 * this->droparr_size();
  for (int i = 0; i < this->droparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparr(i));
  }

  // repeated .pb.TActLimitedChallengeStrongholdInfo StrongholdArr = 2;
  total_size += 1 * this->strongholdarr_size();
  for (int i = 0; i < this->strongholdarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strongholdarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeReportBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeReportBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeReportBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeReportBattleRsp::MergeFrom(const TActLimitedChallengeReportBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparr_.MergeFrom(from.droparr_);
  strongholdarr_.MergeFrom(from.strongholdarr_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_challengenum()) {
      set_challengenum(from.challengenum());
    }
    if (from.has_strongholdwinnum()) {
      set_strongholdwinnum(from.strongholdwinnum());
    }
    if (from.has_losenum()) {
      set_losenum(from.losenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeReportBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeReportBattleRsp::CopyFrom(const TActLimitedChallengeReportBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeReportBattleRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->strongholdarr())) return false;
  return true;
}

void TActLimitedChallengeReportBattleRsp::Swap(TActLimitedChallengeReportBattleRsp* other) {
  if (other != this) {
    droparr_.Swap(&other->droparr_);
    strongholdarr_.Swap(&other->strongholdarr_);
    std::swap(challengenum_, other->challengenum_);
    std::swap(strongholdwinnum_, other->strongholdwinnum_);
    std::swap(losenum_, other->losenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeReportBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeReportBattleRsp_descriptor_;
  metadata.reflection = TActLimitedChallengeReportBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeReceiveAchievementReq::kTidFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeReceiveAchievementReq::TActLimitedChallengeReceiveAchievementReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeReceiveAchievementReq)
}

void TActLimitedChallengeReceiveAchievementReq::InitAsDefaultInstance() {
}

TActLimitedChallengeReceiveAchievementReq::TActLimitedChallengeReceiveAchievementReq(const TActLimitedChallengeReceiveAchievementReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeReceiveAchievementReq)
}

void TActLimitedChallengeReceiveAchievementReq::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeReceiveAchievementReq::~TActLimitedChallengeReceiveAchievementReq() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeReceiveAchievementReq)
  SharedDtor();
}

void TActLimitedChallengeReceiveAchievementReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeReceiveAchievementReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeReceiveAchievementReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeReceiveAchievementReq_descriptor_;
}

const TActLimitedChallengeReceiveAchievementReq& TActLimitedChallengeReceiveAchievementReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeReceiveAchievementReq* TActLimitedChallengeReceiveAchievementReq::default_instance_ = NULL;

TActLimitedChallengeReceiveAchievementReq* TActLimitedChallengeReceiveAchievementReq::New() const {
  return new TActLimitedChallengeReceiveAchievementReq;
}

void TActLimitedChallengeReceiveAchievementReq::Clear() {
  tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeReceiveAchievementReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeReceiveAchievementReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeReceiveAchievementReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeReceiveAchievementReq)
  return false;
#undef DO_
}

void TActLimitedChallengeReceiveAchievementReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeReceiveAchievementReq)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeReceiveAchievementReq)
}

::google::protobuf::uint8* TActLimitedChallengeReceiveAchievementReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeReceiveAchievementReq)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeReceiveAchievementReq)
  return target;
}

int TActLimitedChallengeReceiveAchievementReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeReceiveAchievementReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeReceiveAchievementReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeReceiveAchievementReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeReceiveAchievementReq::MergeFrom(const TActLimitedChallengeReceiveAchievementReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeReceiveAchievementReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeReceiveAchievementReq::CopyFrom(const TActLimitedChallengeReceiveAchievementReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeReceiveAchievementReq::IsInitialized() const {

  return true;
}

void TActLimitedChallengeReceiveAchievementReq::Swap(TActLimitedChallengeReceiveAchievementReq* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeReceiveAchievementReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeReceiveAchievementReq_descriptor_;
  metadata.reflection = TActLimitedChallengeReceiveAchievementReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeAutoReceiveAchievementRsp::kRewardedTidArrFieldNumber;
const int TActLimitedChallengeAutoReceiveAchievementRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeAutoReceiveAchievementRsp::TActLimitedChallengeAutoReceiveAchievementRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeAutoReceiveAchievementRsp)
}

void TActLimitedChallengeAutoReceiveAchievementRsp::InitAsDefaultInstance() {
}

TActLimitedChallengeAutoReceiveAchievementRsp::TActLimitedChallengeAutoReceiveAchievementRsp(const TActLimitedChallengeAutoReceiveAchievementRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeAutoReceiveAchievementRsp)
}

void TActLimitedChallengeAutoReceiveAchievementRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeAutoReceiveAchievementRsp::~TActLimitedChallengeAutoReceiveAchievementRsp() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeAutoReceiveAchievementRsp)
  SharedDtor();
}

void TActLimitedChallengeAutoReceiveAchievementRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeAutoReceiveAchievementRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeAutoReceiveAchievementRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeAutoReceiveAchievementRsp_descriptor_;
}

const TActLimitedChallengeAutoReceiveAchievementRsp& TActLimitedChallengeAutoReceiveAchievementRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeAutoReceiveAchievementRsp* TActLimitedChallengeAutoReceiveAchievementRsp::default_instance_ = NULL;

TActLimitedChallengeAutoReceiveAchievementRsp* TActLimitedChallengeAutoReceiveAchievementRsp::New() const {
  return new TActLimitedChallengeAutoReceiveAchievementRsp;
}

void TActLimitedChallengeAutoReceiveAchievementRsp::Clear() {
  rewardedtidarr_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeAutoReceiveAchievementRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeAutoReceiveAchievementRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 RewardedTidArr = 1;
      case 1: {
        if (tag == 8) {
         parse_RewardedTidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_rewardedtidarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewardedtidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_RewardedTidArr;
        if (input->ExpectTag(18)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeAutoReceiveAchievementRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeAutoReceiveAchievementRsp)
  return false;
#undef DO_
}

void TActLimitedChallengeAutoReceiveAchievementRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeAutoReceiveAchievementRsp)
  // repeated uint32 RewardedTidArr = 1;
  for (int i = 0; i < this->rewardedtidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->rewardedtidarr(i), output);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeAutoReceiveAchievementRsp)
}

::google::protobuf::uint8* TActLimitedChallengeAutoReceiveAchievementRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeAutoReceiveAchievementRsp)
  // repeated uint32 RewardedTidArr = 1;
  for (int i = 0; i < this->rewardedtidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->rewardedtidarr(i), target);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeAutoReceiveAchievementRsp)
  return target;
}

int TActLimitedChallengeAutoReceiveAchievementRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 RewardedTidArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardedtidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewardedtidarr(i));
    }
    total_size += 1 * this->rewardedtidarr_size() + data_size;
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeAutoReceiveAchievementRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeAutoReceiveAchievementRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeAutoReceiveAchievementRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeAutoReceiveAchievementRsp::MergeFrom(const TActLimitedChallengeAutoReceiveAchievementRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardedtidarr_.MergeFrom(from.rewardedtidarr_);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeAutoReceiveAchievementRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeAutoReceiveAchievementRsp::CopyFrom(const TActLimitedChallengeAutoReceiveAchievementRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeAutoReceiveAchievementRsp::IsInitialized() const {

  return true;
}

void TActLimitedChallengeAutoReceiveAchievementRsp::Swap(TActLimitedChallengeAutoReceiveAchievementRsp* other) {
  if (other != this) {
    rewardedtidarr_.Swap(&other->rewardedtidarr_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeAutoReceiveAchievementRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeAutoReceiveAchievementRsp_descriptor_;
  metadata.reflection = TActLimitedChallengeAutoReceiveAchievementRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeNotify::kItemIdFieldNumber;
const int TActLimitedChallengeNotify::kDropArrFieldNumber;
const int TActLimitedChallengeNotify::kSquadArrFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeNotify::TActLimitedChallengeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeNotify)
}

void TActLimitedChallengeNotify::InitAsDefaultInstance() {
}

TActLimitedChallengeNotify::TActLimitedChallengeNotify(const TActLimitedChallengeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeNotify)
}

void TActLimitedChallengeNotify::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeNotify::~TActLimitedChallengeNotify() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeNotify)
  SharedDtor();
}

void TActLimitedChallengeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeNotify_descriptor_;
}

const TActLimitedChallengeNotify& TActLimitedChallengeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeNotify* TActLimitedChallengeNotify::default_instance_ = NULL;

TActLimitedChallengeNotify* TActLimitedChallengeNotify::New() const {
  return new TActLimitedChallengeNotify;
}

void TActLimitedChallengeNotify::Clear() {
  itemid_ = 0u;
  droparr_.Clear();
  squadarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DropArr;
        break;
      }

      // repeated .pb.TCommonReward DropArr = 2;
      case 2: {
        if (tag == 18) {
         parse_DropArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DropArr;
        if (input->ExpectTag(26)) goto parse_SquadArr;
        break;
      }

      // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 3;
      case 3: {
        if (tag == 26) {
         parse_SquadArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_squadarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SquadArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeNotify)
  return false;
#undef DO_
}

void TActLimitedChallengeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeNotify)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // repeated .pb.TCommonReward DropArr = 2;
  for (int i = 0; i < this->droparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->droparr(i), output);
  }

  // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 3;
  for (int i = 0; i < this->squadarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->squadarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeNotify)
}

::google::protobuf::uint8* TActLimitedChallengeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeNotify)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // repeated .pb.TCommonReward DropArr = 2;
  for (int i = 0; i < this->droparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->droparr(i), target);
  }

  // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 3;
  for (int i = 0; i < this->squadarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->squadarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeNotify)
  return target;
}

int TActLimitedChallengeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  // repeated .pb.TCommonReward DropArr = 2;
  total_size += 1 * this->droparr_size();
  for (int i = 0; i < this->droparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparr(i));
  }

  // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 3;
  total_size += 1 * this->squadarr_size();
  for (int i = 0; i < this->squadarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->squadarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeNotify::MergeFrom(const TActLimitedChallengeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparr_.MergeFrom(from.droparr_);
  squadarr_.MergeFrom(from.squadarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeNotify::CopyFrom(const TActLimitedChallengeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeNotify::IsInitialized() const {

  return true;
}

void TActLimitedChallengeNotify::Swap(TActLimitedChallengeNotify* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    droparr_.Swap(&other->droparr_);
    squadarr_.Swap(&other->squadarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeNotify_descriptor_;
  metadata.reflection = TActLimitedChallengeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeSetSquadReq::kSquadArrFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeSetSquadReq::TActLimitedChallengeSetSquadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeSetSquadReq)
}

void TActLimitedChallengeSetSquadReq::InitAsDefaultInstance() {
}

TActLimitedChallengeSetSquadReq::TActLimitedChallengeSetSquadReq(const TActLimitedChallengeSetSquadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeSetSquadReq)
}

void TActLimitedChallengeSetSquadReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeSetSquadReq::~TActLimitedChallengeSetSquadReq() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeSetSquadReq)
  SharedDtor();
}

void TActLimitedChallengeSetSquadReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeSetSquadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeSetSquadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeSetSquadReq_descriptor_;
}

const TActLimitedChallengeSetSquadReq& TActLimitedChallengeSetSquadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeSetSquadReq* TActLimitedChallengeSetSquadReq::default_instance_ = NULL;

TActLimitedChallengeSetSquadReq* TActLimitedChallengeSetSquadReq::New() const {
  return new TActLimitedChallengeSetSquadReq;
}

void TActLimitedChallengeSetSquadReq::Clear() {
  squadarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeSetSquadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeSetSquadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 1;
      case 1: {
        if (tag == 10) {
         parse_SquadArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_squadarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_SquadArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeSetSquadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeSetSquadReq)
  return false;
#undef DO_
}

void TActLimitedChallengeSetSquadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeSetSquadReq)
  // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 1;
  for (int i = 0; i < this->squadarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->squadarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeSetSquadReq)
}

::google::protobuf::uint8* TActLimitedChallengeSetSquadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeSetSquadReq)
  // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 1;
  for (int i = 0; i < this->squadarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->squadarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeSetSquadReq)
  return target;
}

int TActLimitedChallengeSetSquadReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 1;
  total_size += 1 * this->squadarr_size();
  for (int i = 0; i < this->squadarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->squadarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeSetSquadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeSetSquadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeSetSquadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeSetSquadReq::MergeFrom(const TActLimitedChallengeSetSquadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  squadarr_.MergeFrom(from.squadarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeSetSquadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeSetSquadReq::CopyFrom(const TActLimitedChallengeSetSquadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeSetSquadReq::IsInitialized() const {

  return true;
}

void TActLimitedChallengeSetSquadReq::Swap(TActLimitedChallengeSetSquadReq* other) {
  if (other != this) {
    squadarr_.Swap(&other->squadarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeSetSquadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeSetSquadReq_descriptor_;
  metadata.reflection = TActLimitedChallengeSetSquadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeSetSquadRsp::kSquadArrFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeSetSquadRsp::TActLimitedChallengeSetSquadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeSetSquadRsp)
}

void TActLimitedChallengeSetSquadRsp::InitAsDefaultInstance() {
}

TActLimitedChallengeSetSquadRsp::TActLimitedChallengeSetSquadRsp(const TActLimitedChallengeSetSquadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeSetSquadRsp)
}

void TActLimitedChallengeSetSquadRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeSetSquadRsp::~TActLimitedChallengeSetSquadRsp() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeSetSquadRsp)
  SharedDtor();
}

void TActLimitedChallengeSetSquadRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeSetSquadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeSetSquadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeSetSquadRsp_descriptor_;
}

const TActLimitedChallengeSetSquadRsp& TActLimitedChallengeSetSquadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeSetSquadRsp* TActLimitedChallengeSetSquadRsp::default_instance_ = NULL;

TActLimitedChallengeSetSquadRsp* TActLimitedChallengeSetSquadRsp::New() const {
  return new TActLimitedChallengeSetSquadRsp;
}

void TActLimitedChallengeSetSquadRsp::Clear() {
  squadarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeSetSquadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeSetSquadRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 1;
      case 1: {
        if (tag == 10) {
         parse_SquadArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_squadarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_SquadArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeSetSquadRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeSetSquadRsp)
  return false;
#undef DO_
}

void TActLimitedChallengeSetSquadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeSetSquadRsp)
  // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 1;
  for (int i = 0; i < this->squadarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->squadarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeSetSquadRsp)
}

::google::protobuf::uint8* TActLimitedChallengeSetSquadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeSetSquadRsp)
  // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 1;
  for (int i = 0; i < this->squadarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->squadarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeSetSquadRsp)
  return target;
}

int TActLimitedChallengeSetSquadRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActLimitedChallengeSquadInfo SquadArr = 1;
  total_size += 1 * this->squadarr_size();
  for (int i = 0; i < this->squadarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->squadarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeSetSquadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeSetSquadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeSetSquadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeSetSquadRsp::MergeFrom(const TActLimitedChallengeSetSquadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  squadarr_.MergeFrom(from.squadarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeSetSquadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeSetSquadRsp::CopyFrom(const TActLimitedChallengeSetSquadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeSetSquadRsp::IsInitialized() const {

  return true;
}

void TActLimitedChallengeSetSquadRsp::Swap(TActLimitedChallengeSetSquadRsp* other) {
  if (other != this) {
    squadarr_.Swap(&other->squadarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeSetSquadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeSetSquadRsp_descriptor_;
  metadata.reflection = TActLimitedChallengeSetSquadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeSweepReq::kIDFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeSweepReq::TActLimitedChallengeSweepReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeSweepReq)
}

void TActLimitedChallengeSweepReq::InitAsDefaultInstance() {
}

TActLimitedChallengeSweepReq::TActLimitedChallengeSweepReq(const TActLimitedChallengeSweepReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeSweepReq)
}

void TActLimitedChallengeSweepReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeSweepReq::~TActLimitedChallengeSweepReq() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeSweepReq)
  SharedDtor();
}

void TActLimitedChallengeSweepReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeSweepReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeSweepReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeSweepReq_descriptor_;
}

const TActLimitedChallengeSweepReq& TActLimitedChallengeSweepReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeSweepReq* TActLimitedChallengeSweepReq::default_instance_ = NULL;

TActLimitedChallengeSweepReq* TActLimitedChallengeSweepReq::New() const {
  return new TActLimitedChallengeSweepReq;
}

void TActLimitedChallengeSweepReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeSweepReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeSweepReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeSweepReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeSweepReq)
  return false;
#undef DO_
}

void TActLimitedChallengeSweepReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeSweepReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeSweepReq)
}

::google::protobuf::uint8* TActLimitedChallengeSweepReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeSweepReq)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeSweepReq)
  return target;
}

int TActLimitedChallengeSweepReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeSweepReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeSweepReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeSweepReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeSweepReq::MergeFrom(const TActLimitedChallengeSweepReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeSweepReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeSweepReq::CopyFrom(const TActLimitedChallengeSweepReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeSweepReq::IsInitialized() const {

  return true;
}

void TActLimitedChallengeSweepReq::Swap(TActLimitedChallengeSweepReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeSweepReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeSweepReq_descriptor_;
  metadata.reflection = TActLimitedChallengeSweepReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActLimitedChallengeSweepRsp::kDropArrFieldNumber;
const int TActLimitedChallengeSweepRsp::kChallengeNumFieldNumber;
const int TActLimitedChallengeSweepRsp::kStrongholdWinNumFieldNumber;
const int TActLimitedChallengeSweepRsp::kLoseNumFieldNumber;
#endif  // !_MSC_VER

TActLimitedChallengeSweepRsp::TActLimitedChallengeSweepRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActLimitedChallengeSweepRsp)
}

void TActLimitedChallengeSweepRsp::InitAsDefaultInstance() {
}

TActLimitedChallengeSweepRsp::TActLimitedChallengeSweepRsp(const TActLimitedChallengeSweepRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActLimitedChallengeSweepRsp)
}

void TActLimitedChallengeSweepRsp::SharedCtor() {
  _cached_size_ = 0;
  challengenum_ = 0u;
  strongholdwinnum_ = 0u;
  losenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActLimitedChallengeSweepRsp::~TActLimitedChallengeSweepRsp() {
  // @@protoc_insertion_point(destructor:pb.TActLimitedChallengeSweepRsp)
  SharedDtor();
}

void TActLimitedChallengeSweepRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActLimitedChallengeSweepRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActLimitedChallengeSweepRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActLimitedChallengeSweepRsp_descriptor_;
}

const TActLimitedChallengeSweepRsp& TActLimitedChallengeSweepRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActLimitedChallenge_2eproto();
  return *default_instance_;
}

TActLimitedChallengeSweepRsp* TActLimitedChallengeSweepRsp::default_instance_ = NULL;

TActLimitedChallengeSweepRsp* TActLimitedChallengeSweepRsp::New() const {
  return new TActLimitedChallengeSweepRsp;
}

void TActLimitedChallengeSweepRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActLimitedChallengeSweepRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(challengenum_, losenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  droparr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActLimitedChallengeSweepRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActLimitedChallengeSweepRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward DropArr = 1;
      case 1: {
        if (tag == 10) {
         parse_DropArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DropArr;
        if (input->ExpectTag(24)) goto parse_ChallengeNum;
        break;
      }

      // optional uint32 ChallengeNum = 3;
      case 3: {
        if (tag == 24) {
         parse_ChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengenum_)));
          set_has_challengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_StrongholdWinNum;
        break;
      }

      // optional uint32 StrongholdWinNum = 4;
      case 4: {
        if (tag == 32) {
         parse_StrongholdWinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strongholdwinnum_)));
          set_has_strongholdwinnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_LoseNum;
        break;
      }

      // optional uint32 LoseNum = 5;
      case 5: {
        if (tag == 40) {
         parse_LoseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losenum_)));
          set_has_losenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActLimitedChallengeSweepRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActLimitedChallengeSweepRsp)
  return false;
#undef DO_
}

void TActLimitedChallengeSweepRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActLimitedChallengeSweepRsp)
  // repeated .pb.TCommonReward DropArr = 1;
  for (int i = 0; i < this->droparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->droparr(i), output);
  }

  // optional uint32 ChallengeNum = 3;
  if (has_challengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->challengenum(), output);
  }

  // optional uint32 StrongholdWinNum = 4;
  if (has_strongholdwinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->strongholdwinnum(), output);
  }

  // optional uint32 LoseNum = 5;
  if (has_losenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->losenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActLimitedChallengeSweepRsp)
}

::google::protobuf::uint8* TActLimitedChallengeSweepRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActLimitedChallengeSweepRsp)
  // repeated .pb.TCommonReward DropArr = 1;
  for (int i = 0; i < this->droparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->droparr(i), target);
  }

  // optional uint32 ChallengeNum = 3;
  if (has_challengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->challengenum(), target);
  }

  // optional uint32 StrongholdWinNum = 4;
  if (has_strongholdwinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->strongholdwinnum(), target);
  }

  // optional uint32 LoseNum = 5;
  if (has_losenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->losenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActLimitedChallengeSweepRsp)
  return target;
}

int TActLimitedChallengeSweepRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 ChallengeNum = 3;
    if (has_challengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengenum());
    }

    // optional uint32 StrongholdWinNum = 4;
    if (has_strongholdwinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strongholdwinnum());
    }

    // optional uint32 LoseNum = 5;
    if (has_losenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losenum());
    }

  }
  // repeated .pb.TCommonReward DropArr = 1;
  total_size += 1 * this->droparr_size();
  for (int i = 0; i < this->droparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActLimitedChallengeSweepRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActLimitedChallengeSweepRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActLimitedChallengeSweepRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActLimitedChallengeSweepRsp::MergeFrom(const TActLimitedChallengeSweepRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparr_.MergeFrom(from.droparr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_challengenum()) {
      set_challengenum(from.challengenum());
    }
    if (from.has_strongholdwinnum()) {
      set_strongholdwinnum(from.strongholdwinnum());
    }
    if (from.has_losenum()) {
      set_losenum(from.losenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActLimitedChallengeSweepRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActLimitedChallengeSweepRsp::CopyFrom(const TActLimitedChallengeSweepRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActLimitedChallengeSweepRsp::IsInitialized() const {

  return true;
}

void TActLimitedChallengeSweepRsp::Swap(TActLimitedChallengeSweepRsp* other) {
  if (other != this) {
    droparr_.Swap(&other->droparr_);
    std::swap(challengenum_, other->challengenum_);
    std::swap(strongholdwinnum_, other->strongholdwinnum_);
    std::swap(losenum_, other->losenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActLimitedChallengeSweepRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActLimitedChallengeSweepRsp_descriptor_;
  metadata.reflection = TActLimitedChallengeSweepRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
