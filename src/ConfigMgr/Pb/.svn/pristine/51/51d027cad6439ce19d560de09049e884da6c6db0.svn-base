// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActRotaryDraw.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActRotaryDraw.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActRotaryDrawGiftBagPurchaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActRotaryDrawGiftBagPurchaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActRotaryDrawInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActRotaryDrawInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActRotaryDrawLuckyDrawReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActRotaryDrawLuckyDrawReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActRotaryDrawLuckyDrawRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActRotaryDrawLuckyDrawRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActRotaryDrawLuckyDrawInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActRotaryDrawLuckyDrawInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActRotaryDrawGetGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActRotaryDrawGetGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActRotaryDrawNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActRotaryDrawNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActRotaryDraw_2eproto() {
  protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActRotaryDraw.proto");
  GOOGLE_CHECK(file != NULL);
  TActRotaryDrawGiftBagPurchaseInfo_descriptor_ = file->message_type(0);
  static const int TActRotaryDrawGiftBagPurchaseInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawGiftBagPurchaseInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawGiftBagPurchaseInfo, buynum_),
  };
  TActRotaryDrawGiftBagPurchaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActRotaryDrawGiftBagPurchaseInfo_descriptor_,
      TActRotaryDrawGiftBagPurchaseInfo::default_instance_,
      TActRotaryDrawGiftBagPurchaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawGiftBagPurchaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawGiftBagPurchaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActRotaryDrawGiftBagPurchaseInfo));
  TActRotaryDrawInfoRsp_descriptor_ = file->message_type(1);
  static const int TActRotaryDrawInfoRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawInfoRsp, dailydrawnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawInfoRsp, totaldrawnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawInfoRsp, rewardidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawInfoRsp, usedfreenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawInfoRsp, giftbagpurchaseinfoarr_),
  };
  TActRotaryDrawInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActRotaryDrawInfoRsp_descriptor_,
      TActRotaryDrawInfoRsp::default_instance_,
      TActRotaryDrawInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActRotaryDrawInfoRsp));
  TActRotaryDrawLuckyDrawReq_descriptor_ = file->message_type(2);
  static const int TActRotaryDrawLuckyDrawReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawLuckyDrawReq, num_),
  };
  TActRotaryDrawLuckyDrawReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActRotaryDrawLuckyDrawReq_descriptor_,
      TActRotaryDrawLuckyDrawReq::default_instance_,
      TActRotaryDrawLuckyDrawReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawLuckyDrawReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawLuckyDrawReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActRotaryDrawLuckyDrawReq));
  TActRotaryDrawLuckyDrawRsp_descriptor_ = file->message_type(3);
  static const int TActRotaryDrawLuckyDrawRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawLuckyDrawRsp, infoarr_),
  };
  TActRotaryDrawLuckyDrawRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActRotaryDrawLuckyDrawRsp_descriptor_,
      TActRotaryDrawLuckyDrawRsp::default_instance_,
      TActRotaryDrawLuckyDrawRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawLuckyDrawRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawLuckyDrawRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActRotaryDrawLuckyDrawRsp));
  TActRotaryDrawLuckyDrawInfo_descriptor_ = file->message_type(4);
  static const int TActRotaryDrawLuckyDrawInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawLuckyDrawInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawLuckyDrawInfo, rewardarr_),
  };
  TActRotaryDrawLuckyDrawInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActRotaryDrawLuckyDrawInfo_descriptor_,
      TActRotaryDrawLuckyDrawInfo::default_instance_,
      TActRotaryDrawLuckyDrawInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawLuckyDrawInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawLuckyDrawInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActRotaryDrawLuckyDrawInfo));
  TActRotaryDrawGetGiftReq_descriptor_ = file->message_type(5);
  static const int TActRotaryDrawGetGiftReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawGetGiftReq, id_),
  };
  TActRotaryDrawGetGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActRotaryDrawGetGiftReq_descriptor_,
      TActRotaryDrawGetGiftReq::default_instance_,
      TActRotaryDrawGetGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawGetGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawGetGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActRotaryDrawGetGiftReq));
  TActRotaryDrawNotify_descriptor_ = file->message_type(6);
  static const int TActRotaryDrawNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawNotify, giftbagpurchaseinfoarr_),
  };
  TActRotaryDrawNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActRotaryDrawNotify_descriptor_,
      TActRotaryDrawNotify::default_instance_,
      TActRotaryDrawNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActRotaryDrawNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActRotaryDrawNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActRotaryDraw_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActRotaryDrawGiftBagPurchaseInfo_descriptor_, &TActRotaryDrawGiftBagPurchaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActRotaryDrawInfoRsp_descriptor_, &TActRotaryDrawInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActRotaryDrawLuckyDrawReq_descriptor_, &TActRotaryDrawLuckyDrawReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActRotaryDrawLuckyDrawRsp_descriptor_, &TActRotaryDrawLuckyDrawRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActRotaryDrawLuckyDrawInfo_descriptor_, &TActRotaryDrawLuckyDrawInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActRotaryDrawGetGiftReq_descriptor_, &TActRotaryDrawGetGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActRotaryDrawNotify_descriptor_, &TActRotaryDrawNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActRotaryDraw_2eproto() {
  delete TActRotaryDrawGiftBagPurchaseInfo::default_instance_;
  delete TActRotaryDrawGiftBagPurchaseInfo_reflection_;
  delete TActRotaryDrawInfoRsp::default_instance_;
  delete TActRotaryDrawInfoRsp_reflection_;
  delete TActRotaryDrawLuckyDrawReq::default_instance_;
  delete TActRotaryDrawLuckyDrawReq_reflection_;
  delete TActRotaryDrawLuckyDrawRsp::default_instance_;
  delete TActRotaryDrawLuckyDrawRsp_reflection_;
  delete TActRotaryDrawLuckyDrawInfo::default_instance_;
  delete TActRotaryDrawLuckyDrawInfo_reflection_;
  delete TActRotaryDrawGetGiftReq::default_instance_;
  delete TActRotaryDrawGetGiftReq_reflection_;
  delete TActRotaryDrawNotify::default_instance_;
  delete TActRotaryDrawNotify_reflection_;
}

void protobuf_AddDesc_net_2fActRotaryDraw_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027net/ActRotaryDraw.proto\022\002pb\032\026net/Commo"
    "nReward.proto\"\?\n!TActRotaryDrawGiftBagPu"
    "rchaseInfo\022\n\n\002Id\030\001 \001(\r\022\016\n\006BuyNum\030\002 \001(\r\"\264"
    "\001\n\025TActRotaryDrawInfoRsp\022\024\n\014DailyDrawNum"
    "\030\001 \001(\r\022\024\n\014TotalDrawNum\030\002 \001(\r\022\023\n\013RewardId"
    "Arr\030\003 \003(\r\022\023\n\013UsedFreeNum\030\004 \001(\r\022E\n\026GiftBa"
    "gPurchaseInfoArr\030\005 \003(\0132%.pb.TActRotaryDr"
    "awGiftBagPurchaseInfo\")\n\032TActRotaryDrawL"
    "uckyDrawReq\022\013\n\003Num\030\001 \001(\r\"N\n\032TActRotaryDr"
    "awLuckyDrawRsp\0220\n\007InfoArr\030\001 \003(\0132\037.pb.TAc"
    "tRotaryDrawLuckyDrawInfo\"P\n\033TActRotaryDr"
    "awLuckyDrawInfo\022\013\n\003Pos\030\001 \001(\r\022$\n\tRewardAr"
    "r\030\002 \003(\0132\021.pb.TCommonReward\"&\n\030TActRotary"
    "DrawGetGiftReq\022\n\n\002Id\030\001 \001(\r\"]\n\024TActRotary"
    "DrawNotify\022E\n\026GiftBagPurchaseInfoArr\030\001 \003"
    "(\0132%.pb.TActRotaryDrawGiftBagPurchaseInf"
    "o", 641);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActRotaryDraw.proto", &protobuf_RegisterTypes);
  TActRotaryDrawGiftBagPurchaseInfo::default_instance_ = new TActRotaryDrawGiftBagPurchaseInfo();
  TActRotaryDrawInfoRsp::default_instance_ = new TActRotaryDrawInfoRsp();
  TActRotaryDrawLuckyDrawReq::default_instance_ = new TActRotaryDrawLuckyDrawReq();
  TActRotaryDrawLuckyDrawRsp::default_instance_ = new TActRotaryDrawLuckyDrawRsp();
  TActRotaryDrawLuckyDrawInfo::default_instance_ = new TActRotaryDrawLuckyDrawInfo();
  TActRotaryDrawGetGiftReq::default_instance_ = new TActRotaryDrawGetGiftReq();
  TActRotaryDrawNotify::default_instance_ = new TActRotaryDrawNotify();
  TActRotaryDrawGiftBagPurchaseInfo::default_instance_->InitAsDefaultInstance();
  TActRotaryDrawInfoRsp::default_instance_->InitAsDefaultInstance();
  TActRotaryDrawLuckyDrawReq::default_instance_->InitAsDefaultInstance();
  TActRotaryDrawLuckyDrawRsp::default_instance_->InitAsDefaultInstance();
  TActRotaryDrawLuckyDrawInfo::default_instance_->InitAsDefaultInstance();
  TActRotaryDrawGetGiftReq::default_instance_->InitAsDefaultInstance();
  TActRotaryDrawNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActRotaryDraw_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActRotaryDraw_2eproto {
  StaticDescriptorInitializer_net_2fActRotaryDraw_2eproto() {
    protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
  }
} static_descriptor_initializer_net_2fActRotaryDraw_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActRotaryDrawGiftBagPurchaseInfo::kIdFieldNumber;
const int TActRotaryDrawGiftBagPurchaseInfo::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TActRotaryDrawGiftBagPurchaseInfo::TActRotaryDrawGiftBagPurchaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActRotaryDrawGiftBagPurchaseInfo)
}

void TActRotaryDrawGiftBagPurchaseInfo::InitAsDefaultInstance() {
}

TActRotaryDrawGiftBagPurchaseInfo::TActRotaryDrawGiftBagPurchaseInfo(const TActRotaryDrawGiftBagPurchaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActRotaryDrawGiftBagPurchaseInfo)
}

void TActRotaryDrawGiftBagPurchaseInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActRotaryDrawGiftBagPurchaseInfo::~TActRotaryDrawGiftBagPurchaseInfo() {
  // @@protoc_insertion_point(destructor:pb.TActRotaryDrawGiftBagPurchaseInfo)
  SharedDtor();
}

void TActRotaryDrawGiftBagPurchaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActRotaryDrawGiftBagPurchaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActRotaryDrawGiftBagPurchaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActRotaryDrawGiftBagPurchaseInfo_descriptor_;
}

const TActRotaryDrawGiftBagPurchaseInfo& TActRotaryDrawGiftBagPurchaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
  return *default_instance_;
}

TActRotaryDrawGiftBagPurchaseInfo* TActRotaryDrawGiftBagPurchaseInfo::default_instance_ = NULL;

TActRotaryDrawGiftBagPurchaseInfo* TActRotaryDrawGiftBagPurchaseInfo::New() const {
  return new TActRotaryDrawGiftBagPurchaseInfo;
}

void TActRotaryDrawGiftBagPurchaseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActRotaryDrawGiftBagPurchaseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActRotaryDrawGiftBagPurchaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActRotaryDrawGiftBagPurchaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActRotaryDrawGiftBagPurchaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActRotaryDrawGiftBagPurchaseInfo)
  return false;
#undef DO_
}

void TActRotaryDrawGiftBagPurchaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActRotaryDrawGiftBagPurchaseInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActRotaryDrawGiftBagPurchaseInfo)
}

::google::protobuf::uint8* TActRotaryDrawGiftBagPurchaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActRotaryDrawGiftBagPurchaseInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActRotaryDrawGiftBagPurchaseInfo)
  return target;
}

int TActRotaryDrawGiftBagPurchaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 BuyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActRotaryDrawGiftBagPurchaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActRotaryDrawGiftBagPurchaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActRotaryDrawGiftBagPurchaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActRotaryDrawGiftBagPurchaseInfo::MergeFrom(const TActRotaryDrawGiftBagPurchaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActRotaryDrawGiftBagPurchaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActRotaryDrawGiftBagPurchaseInfo::CopyFrom(const TActRotaryDrawGiftBagPurchaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActRotaryDrawGiftBagPurchaseInfo::IsInitialized() const {

  return true;
}

void TActRotaryDrawGiftBagPurchaseInfo::Swap(TActRotaryDrawGiftBagPurchaseInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActRotaryDrawGiftBagPurchaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActRotaryDrawGiftBagPurchaseInfo_descriptor_;
  metadata.reflection = TActRotaryDrawGiftBagPurchaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActRotaryDrawInfoRsp::kDailyDrawNumFieldNumber;
const int TActRotaryDrawInfoRsp::kTotalDrawNumFieldNumber;
const int TActRotaryDrawInfoRsp::kRewardIdArrFieldNumber;
const int TActRotaryDrawInfoRsp::kUsedFreeNumFieldNumber;
const int TActRotaryDrawInfoRsp::kGiftBagPurchaseInfoArrFieldNumber;
#endif  // !_MSC_VER

TActRotaryDrawInfoRsp::TActRotaryDrawInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActRotaryDrawInfoRsp)
}

void TActRotaryDrawInfoRsp::InitAsDefaultInstance() {
}

TActRotaryDrawInfoRsp::TActRotaryDrawInfoRsp(const TActRotaryDrawInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActRotaryDrawInfoRsp)
}

void TActRotaryDrawInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  dailydrawnum_ = 0u;
  totaldrawnum_ = 0u;
  usedfreenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActRotaryDrawInfoRsp::~TActRotaryDrawInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActRotaryDrawInfoRsp)
  SharedDtor();
}

void TActRotaryDrawInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActRotaryDrawInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActRotaryDrawInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActRotaryDrawInfoRsp_descriptor_;
}

const TActRotaryDrawInfoRsp& TActRotaryDrawInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
  return *default_instance_;
}

TActRotaryDrawInfoRsp* TActRotaryDrawInfoRsp::default_instance_ = NULL;

TActRotaryDrawInfoRsp* TActRotaryDrawInfoRsp::New() const {
  return new TActRotaryDrawInfoRsp;
}

void TActRotaryDrawInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActRotaryDrawInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(dailydrawnum_, totaldrawnum_);
    usedfreenum_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewardidarr_.Clear();
  giftbagpurchaseinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActRotaryDrawInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActRotaryDrawInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 DailyDrawNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailydrawnum_)));
          set_has_dailydrawnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TotalDrawNum;
        break;
      }

      // optional uint32 TotalDrawNum = 2;
      case 2: {
        if (tag == 16) {
         parse_TotalDrawNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totaldrawnum_)));
          set_has_totaldrawnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RewardIdArr;
        break;
      }

      // repeated uint32 RewardIdArr = 3;
      case 3: {
        if (tag == 24) {
         parse_RewardIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_rewardidarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewardidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RewardIdArr;
        if (input->ExpectTag(32)) goto parse_UsedFreeNum;
        break;
      }

      // optional uint32 UsedFreeNum = 4;
      case 4: {
        if (tag == 32) {
         parse_UsedFreeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedfreenum_)));
          set_has_usedfreenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_GiftBagPurchaseInfoArr;
        break;
      }

      // repeated .pb.TActRotaryDrawGiftBagPurchaseInfo GiftBagPurchaseInfoArr = 5;
      case 5: {
        if (tag == 42) {
         parse_GiftBagPurchaseInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_giftbagpurchaseinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_GiftBagPurchaseInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActRotaryDrawInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActRotaryDrawInfoRsp)
  return false;
#undef DO_
}

void TActRotaryDrawInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActRotaryDrawInfoRsp)
  // optional uint32 DailyDrawNum = 1;
  if (has_dailydrawnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dailydrawnum(), output);
  }

  // optional uint32 TotalDrawNum = 2;
  if (has_totaldrawnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totaldrawnum(), output);
  }

  // repeated uint32 RewardIdArr = 3;
  for (int i = 0; i < this->rewardidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->rewardidarr(i), output);
  }

  // optional uint32 UsedFreeNum = 4;
  if (has_usedfreenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->usedfreenum(), output);
  }

  // repeated .pb.TActRotaryDrawGiftBagPurchaseInfo GiftBagPurchaseInfoArr = 5;
  for (int i = 0; i < this->giftbagpurchaseinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->giftbagpurchaseinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActRotaryDrawInfoRsp)
}

::google::protobuf::uint8* TActRotaryDrawInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActRotaryDrawInfoRsp)
  // optional uint32 DailyDrawNum = 1;
  if (has_dailydrawnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dailydrawnum(), target);
  }

  // optional uint32 TotalDrawNum = 2;
  if (has_totaldrawnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->totaldrawnum(), target);
  }

  // repeated uint32 RewardIdArr = 3;
  for (int i = 0; i < this->rewardidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->rewardidarr(i), target);
  }

  // optional uint32 UsedFreeNum = 4;
  if (has_usedfreenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->usedfreenum(), target);
  }

  // repeated .pb.TActRotaryDrawGiftBagPurchaseInfo GiftBagPurchaseInfoArr = 5;
  for (int i = 0; i < this->giftbagpurchaseinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->giftbagpurchaseinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActRotaryDrawInfoRsp)
  return target;
}

int TActRotaryDrawInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DailyDrawNum = 1;
    if (has_dailydrawnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailydrawnum());
    }

    // optional uint32 TotalDrawNum = 2;
    if (has_totaldrawnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totaldrawnum());
    }

    // optional uint32 UsedFreeNum = 4;
    if (has_usedfreenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedfreenum());
    }

  }
  // repeated uint32 RewardIdArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewardidarr(i));
    }
    total_size += 1 * this->rewardidarr_size() + data_size;
  }

  // repeated .pb.TActRotaryDrawGiftBagPurchaseInfo GiftBagPurchaseInfoArr = 5;
  total_size += 1 * this->giftbagpurchaseinfoarr_size();
  for (int i = 0; i < this->giftbagpurchaseinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->giftbagpurchaseinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActRotaryDrawInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActRotaryDrawInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActRotaryDrawInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActRotaryDrawInfoRsp::MergeFrom(const TActRotaryDrawInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardidarr_.MergeFrom(from.rewardidarr_);
  giftbagpurchaseinfoarr_.MergeFrom(from.giftbagpurchaseinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dailydrawnum()) {
      set_dailydrawnum(from.dailydrawnum());
    }
    if (from.has_totaldrawnum()) {
      set_totaldrawnum(from.totaldrawnum());
    }
    if (from.has_usedfreenum()) {
      set_usedfreenum(from.usedfreenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActRotaryDrawInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActRotaryDrawInfoRsp::CopyFrom(const TActRotaryDrawInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActRotaryDrawInfoRsp::IsInitialized() const {

  return true;
}

void TActRotaryDrawInfoRsp::Swap(TActRotaryDrawInfoRsp* other) {
  if (other != this) {
    std::swap(dailydrawnum_, other->dailydrawnum_);
    std::swap(totaldrawnum_, other->totaldrawnum_);
    rewardidarr_.Swap(&other->rewardidarr_);
    std::swap(usedfreenum_, other->usedfreenum_);
    giftbagpurchaseinfoarr_.Swap(&other->giftbagpurchaseinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActRotaryDrawInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActRotaryDrawInfoRsp_descriptor_;
  metadata.reflection = TActRotaryDrawInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActRotaryDrawLuckyDrawReq::kNumFieldNumber;
#endif  // !_MSC_VER

TActRotaryDrawLuckyDrawReq::TActRotaryDrawLuckyDrawReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActRotaryDrawLuckyDrawReq)
}

void TActRotaryDrawLuckyDrawReq::InitAsDefaultInstance() {
}

TActRotaryDrawLuckyDrawReq::TActRotaryDrawLuckyDrawReq(const TActRotaryDrawLuckyDrawReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActRotaryDrawLuckyDrawReq)
}

void TActRotaryDrawLuckyDrawReq::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActRotaryDrawLuckyDrawReq::~TActRotaryDrawLuckyDrawReq() {
  // @@protoc_insertion_point(destructor:pb.TActRotaryDrawLuckyDrawReq)
  SharedDtor();
}

void TActRotaryDrawLuckyDrawReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActRotaryDrawLuckyDrawReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActRotaryDrawLuckyDrawReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActRotaryDrawLuckyDrawReq_descriptor_;
}

const TActRotaryDrawLuckyDrawReq& TActRotaryDrawLuckyDrawReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
  return *default_instance_;
}

TActRotaryDrawLuckyDrawReq* TActRotaryDrawLuckyDrawReq::default_instance_ = NULL;

TActRotaryDrawLuckyDrawReq* TActRotaryDrawLuckyDrawReq::New() const {
  return new TActRotaryDrawLuckyDrawReq;
}

void TActRotaryDrawLuckyDrawReq::Clear() {
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActRotaryDrawLuckyDrawReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActRotaryDrawLuckyDrawReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActRotaryDrawLuckyDrawReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActRotaryDrawLuckyDrawReq)
  return false;
#undef DO_
}

void TActRotaryDrawLuckyDrawReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActRotaryDrawLuckyDrawReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActRotaryDrawLuckyDrawReq)
}

::google::protobuf::uint8* TActRotaryDrawLuckyDrawReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActRotaryDrawLuckyDrawReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActRotaryDrawLuckyDrawReq)
  return target;
}

int TActRotaryDrawLuckyDrawReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActRotaryDrawLuckyDrawReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActRotaryDrawLuckyDrawReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActRotaryDrawLuckyDrawReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActRotaryDrawLuckyDrawReq::MergeFrom(const TActRotaryDrawLuckyDrawReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActRotaryDrawLuckyDrawReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActRotaryDrawLuckyDrawReq::CopyFrom(const TActRotaryDrawLuckyDrawReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActRotaryDrawLuckyDrawReq::IsInitialized() const {

  return true;
}

void TActRotaryDrawLuckyDrawReq::Swap(TActRotaryDrawLuckyDrawReq* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActRotaryDrawLuckyDrawReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActRotaryDrawLuckyDrawReq_descriptor_;
  metadata.reflection = TActRotaryDrawLuckyDrawReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActRotaryDrawLuckyDrawRsp::kInfoArrFieldNumber;
#endif  // !_MSC_VER

TActRotaryDrawLuckyDrawRsp::TActRotaryDrawLuckyDrawRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActRotaryDrawLuckyDrawRsp)
}

void TActRotaryDrawLuckyDrawRsp::InitAsDefaultInstance() {
}

TActRotaryDrawLuckyDrawRsp::TActRotaryDrawLuckyDrawRsp(const TActRotaryDrawLuckyDrawRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActRotaryDrawLuckyDrawRsp)
}

void TActRotaryDrawLuckyDrawRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActRotaryDrawLuckyDrawRsp::~TActRotaryDrawLuckyDrawRsp() {
  // @@protoc_insertion_point(destructor:pb.TActRotaryDrawLuckyDrawRsp)
  SharedDtor();
}

void TActRotaryDrawLuckyDrawRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActRotaryDrawLuckyDrawRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActRotaryDrawLuckyDrawRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActRotaryDrawLuckyDrawRsp_descriptor_;
}

const TActRotaryDrawLuckyDrawRsp& TActRotaryDrawLuckyDrawRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
  return *default_instance_;
}

TActRotaryDrawLuckyDrawRsp* TActRotaryDrawLuckyDrawRsp::default_instance_ = NULL;

TActRotaryDrawLuckyDrawRsp* TActRotaryDrawLuckyDrawRsp::New() const {
  return new TActRotaryDrawLuckyDrawRsp;
}

void TActRotaryDrawLuckyDrawRsp::Clear() {
  infoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActRotaryDrawLuckyDrawRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActRotaryDrawLuckyDrawRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActRotaryDrawLuckyDrawInfo InfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_InfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_InfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActRotaryDrawLuckyDrawRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActRotaryDrawLuckyDrawRsp)
  return false;
#undef DO_
}

void TActRotaryDrawLuckyDrawRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActRotaryDrawLuckyDrawRsp)
  // repeated .pb.TActRotaryDrawLuckyDrawInfo InfoArr = 1;
  for (int i = 0; i < this->infoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActRotaryDrawLuckyDrawRsp)
}

::google::protobuf::uint8* TActRotaryDrawLuckyDrawRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActRotaryDrawLuckyDrawRsp)
  // repeated .pb.TActRotaryDrawLuckyDrawInfo InfoArr = 1;
  for (int i = 0; i < this->infoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActRotaryDrawLuckyDrawRsp)
  return target;
}

int TActRotaryDrawLuckyDrawRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActRotaryDrawLuckyDrawInfo InfoArr = 1;
  total_size += 1 * this->infoarr_size();
  for (int i = 0; i < this->infoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActRotaryDrawLuckyDrawRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActRotaryDrawLuckyDrawRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActRotaryDrawLuckyDrawRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActRotaryDrawLuckyDrawRsp::MergeFrom(const TActRotaryDrawLuckyDrawRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infoarr_.MergeFrom(from.infoarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActRotaryDrawLuckyDrawRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActRotaryDrawLuckyDrawRsp::CopyFrom(const TActRotaryDrawLuckyDrawRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActRotaryDrawLuckyDrawRsp::IsInitialized() const {

  return true;
}

void TActRotaryDrawLuckyDrawRsp::Swap(TActRotaryDrawLuckyDrawRsp* other) {
  if (other != this) {
    infoarr_.Swap(&other->infoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActRotaryDrawLuckyDrawRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActRotaryDrawLuckyDrawRsp_descriptor_;
  metadata.reflection = TActRotaryDrawLuckyDrawRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActRotaryDrawLuckyDrawInfo::kPosFieldNumber;
const int TActRotaryDrawLuckyDrawInfo::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TActRotaryDrawLuckyDrawInfo::TActRotaryDrawLuckyDrawInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActRotaryDrawLuckyDrawInfo)
}

void TActRotaryDrawLuckyDrawInfo::InitAsDefaultInstance() {
}

TActRotaryDrawLuckyDrawInfo::TActRotaryDrawLuckyDrawInfo(const TActRotaryDrawLuckyDrawInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActRotaryDrawLuckyDrawInfo)
}

void TActRotaryDrawLuckyDrawInfo::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActRotaryDrawLuckyDrawInfo::~TActRotaryDrawLuckyDrawInfo() {
  // @@protoc_insertion_point(destructor:pb.TActRotaryDrawLuckyDrawInfo)
  SharedDtor();
}

void TActRotaryDrawLuckyDrawInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActRotaryDrawLuckyDrawInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActRotaryDrawLuckyDrawInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActRotaryDrawLuckyDrawInfo_descriptor_;
}

const TActRotaryDrawLuckyDrawInfo& TActRotaryDrawLuckyDrawInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
  return *default_instance_;
}

TActRotaryDrawLuckyDrawInfo* TActRotaryDrawLuckyDrawInfo::default_instance_ = NULL;

TActRotaryDrawLuckyDrawInfo* TActRotaryDrawLuckyDrawInfo::New() const {
  return new TActRotaryDrawLuckyDrawInfo;
}

void TActRotaryDrawLuckyDrawInfo::Clear() {
  pos_ = 0u;
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActRotaryDrawLuckyDrawInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActRotaryDrawLuckyDrawInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActRotaryDrawLuckyDrawInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActRotaryDrawLuckyDrawInfo)
  return false;
#undef DO_
}

void TActRotaryDrawLuckyDrawInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActRotaryDrawLuckyDrawInfo)
  // optional uint32 Pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActRotaryDrawLuckyDrawInfo)
}

::google::protobuf::uint8* TActRotaryDrawLuckyDrawInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActRotaryDrawLuckyDrawInfo)
  // optional uint32 Pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActRotaryDrawLuckyDrawInfo)
  return target;
}

int TActRotaryDrawLuckyDrawInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 2;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActRotaryDrawLuckyDrawInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActRotaryDrawLuckyDrawInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActRotaryDrawLuckyDrawInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActRotaryDrawLuckyDrawInfo::MergeFrom(const TActRotaryDrawLuckyDrawInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActRotaryDrawLuckyDrawInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActRotaryDrawLuckyDrawInfo::CopyFrom(const TActRotaryDrawLuckyDrawInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActRotaryDrawLuckyDrawInfo::IsInitialized() const {

  return true;
}

void TActRotaryDrawLuckyDrawInfo::Swap(TActRotaryDrawLuckyDrawInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActRotaryDrawLuckyDrawInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActRotaryDrawLuckyDrawInfo_descriptor_;
  metadata.reflection = TActRotaryDrawLuckyDrawInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActRotaryDrawGetGiftReq::kIdFieldNumber;
#endif  // !_MSC_VER

TActRotaryDrawGetGiftReq::TActRotaryDrawGetGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActRotaryDrawGetGiftReq)
}

void TActRotaryDrawGetGiftReq::InitAsDefaultInstance() {
}

TActRotaryDrawGetGiftReq::TActRotaryDrawGetGiftReq(const TActRotaryDrawGetGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActRotaryDrawGetGiftReq)
}

void TActRotaryDrawGetGiftReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActRotaryDrawGetGiftReq::~TActRotaryDrawGetGiftReq() {
  // @@protoc_insertion_point(destructor:pb.TActRotaryDrawGetGiftReq)
  SharedDtor();
}

void TActRotaryDrawGetGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActRotaryDrawGetGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActRotaryDrawGetGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActRotaryDrawGetGiftReq_descriptor_;
}

const TActRotaryDrawGetGiftReq& TActRotaryDrawGetGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
  return *default_instance_;
}

TActRotaryDrawGetGiftReq* TActRotaryDrawGetGiftReq::default_instance_ = NULL;

TActRotaryDrawGetGiftReq* TActRotaryDrawGetGiftReq::New() const {
  return new TActRotaryDrawGetGiftReq;
}

void TActRotaryDrawGetGiftReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActRotaryDrawGetGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActRotaryDrawGetGiftReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActRotaryDrawGetGiftReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActRotaryDrawGetGiftReq)
  return false;
#undef DO_
}

void TActRotaryDrawGetGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActRotaryDrawGetGiftReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActRotaryDrawGetGiftReq)
}

::google::protobuf::uint8* TActRotaryDrawGetGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActRotaryDrawGetGiftReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActRotaryDrawGetGiftReq)
  return target;
}

int TActRotaryDrawGetGiftReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActRotaryDrawGetGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActRotaryDrawGetGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActRotaryDrawGetGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActRotaryDrawGetGiftReq::MergeFrom(const TActRotaryDrawGetGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActRotaryDrawGetGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActRotaryDrawGetGiftReq::CopyFrom(const TActRotaryDrawGetGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActRotaryDrawGetGiftReq::IsInitialized() const {

  return true;
}

void TActRotaryDrawGetGiftReq::Swap(TActRotaryDrawGetGiftReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActRotaryDrawGetGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActRotaryDrawGetGiftReq_descriptor_;
  metadata.reflection = TActRotaryDrawGetGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActRotaryDrawNotify::kGiftBagPurchaseInfoArrFieldNumber;
#endif  // !_MSC_VER

TActRotaryDrawNotify::TActRotaryDrawNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActRotaryDrawNotify)
}

void TActRotaryDrawNotify::InitAsDefaultInstance() {
}

TActRotaryDrawNotify::TActRotaryDrawNotify(const TActRotaryDrawNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActRotaryDrawNotify)
}

void TActRotaryDrawNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActRotaryDrawNotify::~TActRotaryDrawNotify() {
  // @@protoc_insertion_point(destructor:pb.TActRotaryDrawNotify)
  SharedDtor();
}

void TActRotaryDrawNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActRotaryDrawNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActRotaryDrawNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActRotaryDrawNotify_descriptor_;
}

const TActRotaryDrawNotify& TActRotaryDrawNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
  return *default_instance_;
}

TActRotaryDrawNotify* TActRotaryDrawNotify::default_instance_ = NULL;

TActRotaryDrawNotify* TActRotaryDrawNotify::New() const {
  return new TActRotaryDrawNotify;
}

void TActRotaryDrawNotify::Clear() {
  giftbagpurchaseinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActRotaryDrawNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActRotaryDrawNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActRotaryDrawGiftBagPurchaseInfo GiftBagPurchaseInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_GiftBagPurchaseInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_giftbagpurchaseinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_GiftBagPurchaseInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActRotaryDrawNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActRotaryDrawNotify)
  return false;
#undef DO_
}

void TActRotaryDrawNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActRotaryDrawNotify)
  // repeated .pb.TActRotaryDrawGiftBagPurchaseInfo GiftBagPurchaseInfoArr = 1;
  for (int i = 0; i < this->giftbagpurchaseinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->giftbagpurchaseinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActRotaryDrawNotify)
}

::google::protobuf::uint8* TActRotaryDrawNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActRotaryDrawNotify)
  // repeated .pb.TActRotaryDrawGiftBagPurchaseInfo GiftBagPurchaseInfoArr = 1;
  for (int i = 0; i < this->giftbagpurchaseinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->giftbagpurchaseinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActRotaryDrawNotify)
  return target;
}

int TActRotaryDrawNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActRotaryDrawGiftBagPurchaseInfo GiftBagPurchaseInfoArr = 1;
  total_size += 1 * this->giftbagpurchaseinfoarr_size();
  for (int i = 0; i < this->giftbagpurchaseinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->giftbagpurchaseinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActRotaryDrawNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActRotaryDrawNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActRotaryDrawNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActRotaryDrawNotify::MergeFrom(const TActRotaryDrawNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  giftbagpurchaseinfoarr_.MergeFrom(from.giftbagpurchaseinfoarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActRotaryDrawNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActRotaryDrawNotify::CopyFrom(const TActRotaryDrawNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActRotaryDrawNotify::IsInitialized() const {

  return true;
}

void TActRotaryDrawNotify::Swap(TActRotaryDrawNotify* other) {
  if (other != this) {
    giftbagpurchaseinfoarr_.Swap(&other->giftbagpurchaseinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActRotaryDrawNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActRotaryDrawNotify_descriptor_;
  metadata.reflection = TActRotaryDrawNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
