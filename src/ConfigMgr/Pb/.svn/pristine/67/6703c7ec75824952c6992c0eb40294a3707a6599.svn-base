// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CampTower.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/CampTower.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TCampTowerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCampTowerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCampTowerRandAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCampTowerRandAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCampTowerGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCampTowerGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCampTowerStartChallengeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCampTowerStartChallengeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCampTowerStartChallengeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCampTowerStartChallengeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCampTowerReportChallengeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCampTowerReportChallengeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCampTowerReportChallengeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCampTowerReportChallengeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCampTowerReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCampTowerReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCampTowerGetReportInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCampTowerGetReportInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCampTowerGetReportInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCampTowerGetReportInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCampTowerReceiveWelfareReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCampTowerReceiveWelfareReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCampTowerReceiveWelfareRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCampTowerReceiveWelfareRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCampTowerPassedRankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCampTowerPassedRankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCampTowerGetCampRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCampTowerGetCampRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCampTowerGetCampRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCampTowerGetCampRankRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fCampTower_2eproto() {
  protobuf_AddDesc_net_2fCampTower_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/CampTower.proto");
  GOOGLE_CHECK(file != NULL);
  TCampTowerInfo_descriptor_ = file->message_type(0);
  static const int TCampTowerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerInfo, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerInfo, passedlayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerInfo, curpassednum_),
  };
  TCampTowerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCampTowerInfo_descriptor_,
      TCampTowerInfo::default_instance_,
      TCampTowerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCampTowerInfo));
  TCampTowerRandAttr_descriptor_ = file->message_type(1);
  static const int TCampTowerRandAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerRandAttr, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerRandAttr, htidarr_),
  };
  TCampTowerRandAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCampTowerRandAttr_descriptor_,
      TCampTowerRandAttr::default_instance_,
      TCampTowerRandAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerRandAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerRandAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCampTowerRandAttr));
  TCampTowerGetInfoRsp_descriptor_ = file->message_type(2);
  static const int TCampTowerGetInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetInfoRsp, towerinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetInfoRsp, receivewelfarearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetInfoRsp, randattrarr_),
  };
  TCampTowerGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCampTowerGetInfoRsp_descriptor_,
      TCampTowerGetInfoRsp::default_instance_,
      TCampTowerGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCampTowerGetInfoRsp));
  TCampTowerStartChallengeReq_descriptor_ = file->message_type(3);
  static const int TCampTowerStartChallengeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerStartChallengeReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerStartChallengeReq, layerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerStartChallengeReq, battlecheckparam_),
  };
  TCampTowerStartChallengeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCampTowerStartChallengeReq_descriptor_,
      TCampTowerStartChallengeReq::default_instance_,
      TCampTowerStartChallengeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerStartChallengeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerStartChallengeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCampTowerStartChallengeReq));
  TCampTowerStartChallengeRsp_descriptor_ = file->message_type(4);
  static const int TCampTowerStartChallengeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerStartChallengeRsp, battleargs_),
  };
  TCampTowerStartChallengeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCampTowerStartChallengeRsp_descriptor_,
      TCampTowerStartChallengeRsp::default_instance_,
      TCampTowerStartChallengeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerStartChallengeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerStartChallengeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCampTowerStartChallengeRsp));
  TCampTowerReportChallengeReq_descriptor_ = file->message_type(5);
  static const int TCampTowerReportChallengeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReportChallengeReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReportChallengeReq, layerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReportChallengeReq, battlereport_),
  };
  TCampTowerReportChallengeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCampTowerReportChallengeReq_descriptor_,
      TCampTowerReportChallengeReq::default_instance_,
      TCampTowerReportChallengeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReportChallengeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReportChallengeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCampTowerReportChallengeReq));
  TCampTowerReportChallengeRsp_descriptor_ = file->message_type(6);
  static const int TCampTowerReportChallengeRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReportChallengeRsp, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReportChallengeRsp, passedlayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReportChallengeRsp, curpassednum_),
  };
  TCampTowerReportChallengeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCampTowerReportChallengeRsp_descriptor_,
      TCampTowerReportChallengeRsp::default_instance_,
      TCampTowerReportChallengeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReportChallengeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReportChallengeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCampTowerReportChallengeRsp));
  TCampTowerReport_descriptor_ = file->message_type(7);
  static const int TCampTowerReport_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReport, reportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReport, passtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReport, userinfo_),
  };
  TCampTowerReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCampTowerReport_descriptor_,
      TCampTowerReport::default_instance_,
      TCampTowerReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCampTowerReport));
  TCampTowerGetReportInfoReq_descriptor_ = file->message_type(8);
  static const int TCampTowerGetReportInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetReportInfoReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetReportInfoReq, layerid_),
  };
  TCampTowerGetReportInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCampTowerGetReportInfoReq_descriptor_,
      TCampTowerGetReportInfoReq::default_instance_,
      TCampTowerGetReportInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetReportInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetReportInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCampTowerGetReportInfoReq));
  TCampTowerGetReportInfoRsp_descriptor_ = file->message_type(9);
  static const int TCampTowerGetReportInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetReportInfoRsp, reportarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetReportInfoRsp, recentreportarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetReportInfoRsp, extremereportarr_),
  };
  TCampTowerGetReportInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCampTowerGetReportInfoRsp_descriptor_,
      TCampTowerGetReportInfoRsp::default_instance_,
      TCampTowerGetReportInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetReportInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetReportInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCampTowerGetReportInfoRsp));
  TCampTowerReceiveWelfareReq_descriptor_ = file->message_type(10);
  static const int TCampTowerReceiveWelfareReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReceiveWelfareReq, welfareid_),
  };
  TCampTowerReceiveWelfareReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCampTowerReceiveWelfareReq_descriptor_,
      TCampTowerReceiveWelfareReq::default_instance_,
      TCampTowerReceiveWelfareReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReceiveWelfareReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReceiveWelfareReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCampTowerReceiveWelfareReq));
  TCampTowerReceiveWelfareRsp_descriptor_ = file->message_type(11);
  static const int TCampTowerReceiveWelfareRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReceiveWelfareRsp, rewardarray_),
  };
  TCampTowerReceiveWelfareRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCampTowerReceiveWelfareRsp_descriptor_,
      TCampTowerReceiveWelfareRsp::default_instance_,
      TCampTowerReceiveWelfareRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReceiveWelfareRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerReceiveWelfareRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCampTowerReceiveWelfareRsp));
  TCampTowerPassedRankItem_descriptor_ = file->message_type(12);
  static const int TCampTowerPassedRankItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerPassedRankItem, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerPassedRankItem, passedlayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerPassedRankItem, passedtime_),
  };
  TCampTowerPassedRankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCampTowerPassedRankItem_descriptor_,
      TCampTowerPassedRankItem::default_instance_,
      TCampTowerPassedRankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerPassedRankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerPassedRankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCampTowerPassedRankItem));
  TCampTowerGetCampRankReq_descriptor_ = file->message_type(13);
  static const int TCampTowerGetCampRankReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetCampRankReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetCampRankReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetCampRankReq, limit_),
  };
  TCampTowerGetCampRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCampTowerGetCampRankReq_descriptor_,
      TCampTowerGetCampRankReq::default_instance_,
      TCampTowerGetCampRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetCampRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetCampRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCampTowerGetCampRankReq));
  TCampTowerGetCampRankRsp_descriptor_ = file->message_type(14);
  static const int TCampTowerGetCampRankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetCampRankRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetCampRankRsp, myrank_),
  };
  TCampTowerGetCampRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCampTowerGetCampRankRsp_descriptor_,
      TCampTowerGetCampRankRsp::default_instance_,
      TCampTowerGetCampRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetCampRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCampTowerGetCampRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCampTowerGetCampRankRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fCampTower_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCampTowerInfo_descriptor_, &TCampTowerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCampTowerRandAttr_descriptor_, &TCampTowerRandAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCampTowerGetInfoRsp_descriptor_, &TCampTowerGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCampTowerStartChallengeReq_descriptor_, &TCampTowerStartChallengeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCampTowerStartChallengeRsp_descriptor_, &TCampTowerStartChallengeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCampTowerReportChallengeReq_descriptor_, &TCampTowerReportChallengeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCampTowerReportChallengeRsp_descriptor_, &TCampTowerReportChallengeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCampTowerReport_descriptor_, &TCampTowerReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCampTowerGetReportInfoReq_descriptor_, &TCampTowerGetReportInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCampTowerGetReportInfoRsp_descriptor_, &TCampTowerGetReportInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCampTowerReceiveWelfareReq_descriptor_, &TCampTowerReceiveWelfareReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCampTowerReceiveWelfareRsp_descriptor_, &TCampTowerReceiveWelfareRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCampTowerPassedRankItem_descriptor_, &TCampTowerPassedRankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCampTowerGetCampRankReq_descriptor_, &TCampTowerGetCampRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCampTowerGetCampRankRsp_descriptor_, &TCampTowerGetCampRankRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fCampTower_2eproto() {
  delete TCampTowerInfo::default_instance_;
  delete TCampTowerInfo_reflection_;
  delete TCampTowerRandAttr::default_instance_;
  delete TCampTowerRandAttr_reflection_;
  delete TCampTowerGetInfoRsp::default_instance_;
  delete TCampTowerGetInfoRsp_reflection_;
  delete TCampTowerStartChallengeReq::default_instance_;
  delete TCampTowerStartChallengeReq_reflection_;
  delete TCampTowerStartChallengeRsp::default_instance_;
  delete TCampTowerStartChallengeRsp_reflection_;
  delete TCampTowerReportChallengeReq::default_instance_;
  delete TCampTowerReportChallengeReq_reflection_;
  delete TCampTowerReportChallengeRsp::default_instance_;
  delete TCampTowerReportChallengeRsp_reflection_;
  delete TCampTowerReport::default_instance_;
  delete TCampTowerReport_reflection_;
  delete TCampTowerGetReportInfoReq::default_instance_;
  delete TCampTowerGetReportInfoReq_reflection_;
  delete TCampTowerGetReportInfoRsp::default_instance_;
  delete TCampTowerGetReportInfoRsp_reflection_;
  delete TCampTowerReceiveWelfareReq::default_instance_;
  delete TCampTowerReceiveWelfareReq_reflection_;
  delete TCampTowerReceiveWelfareRsp::default_instance_;
  delete TCampTowerReceiveWelfareRsp_reflection_;
  delete TCampTowerPassedRankItem::default_instance_;
  delete TCampTowerPassedRankItem_reflection_;
  delete TCampTowerGetCampRankReq::default_instance_;
  delete TCampTowerGetCampRankReq_reflection_;
  delete TCampTowerGetCampRankRsp::default_instance_;
  delete TCampTowerGetCampRankRsp_reflection_;
}

void protobuf_AddDesc_net_2fCampTower_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/CampTower.proto\022\002pb\032\016net/User.prot"
    "o\032\020net/Battle.proto\032\026net/CommonReward.pr"
    "oto\032\033net/LocalBattleReport.proto\"M\n\016TCam"
    "pTowerInfo\022\016\n\006CampId\030\001 \001(\r\022\025\n\rPassedLaye"
    "rId\030\002 \001(\r\022\024\n\014CurPassedNum\030\003 \001(\r\"5\n\022TCamp"
    "TowerRandAttr\022\016\n\006CampId\030\001 \001(\r\022\017\n\007HtidArr"
    "\030\002 \003(\r\"\210\001\n\024TCampTowerGetInfoRsp\022(\n\014Tower"
    "InfoArr\030\001 \003(\0132\022.pb.TCampTowerInfo\022\031\n\021Rec"
    "eiveWelfareArr\030\002 \003(\r\022+\n\013RandAttrArr\030\003 \003("
    "\0132\026.pb.TCampTowerRandAttr\"o\n\033TCampTowerS"
    "tartChallengeReq\022\016\n\006CampId\030\001 \001(\r\022\017\n\007Laye"
    "rId\030\002 \001(\r\022/\n\020BattleCheckParam\030\003 \001(\0132\025.pb"
    ".TBattleCheckParam\"B\n\033TCampTowerStartCha"
    "llengeRsp\022#\n\nBattleArgs\030\001 \001(\0132\017.pb.TBatt"
    "leArgs\"h\n\034TCampTowerReportChallengeReq\022\016"
    "\n\006CampId\030\001 \001(\r\022\017\n\007LayerId\030\002 \001(\r\022\'\n\014Battl"
    "eReport\030\003 \001(\0132\021.pb.TBattleResult\"Z\n\034TCam"
    "pTowerReportChallengeRsp\022\r\n\005IsWin\030\001 \001(\010\022"
    "\025\n\rPassedLayerId\030\002 \001(\r\022\024\n\014CurPassedNum\030\003"
    " \001(\r\"]\n\020TCampTowerReport\022\020\n\010ReportId\030\001 \001"
    "(\004\022\020\n\010PassTime\030\002 \001(\004\022%\n\010UserInfo\030\003 \001(\0132\023"
    ".pb.TUserSimpleInfo\"=\n\032TCampTowerGetRepo"
    "rtInfoReq\022\016\n\006CampId\030\001 \001(\r\022\017\n\007LayerId\030\002 \001"
    "(\r\"\310\001\n\032TCampTowerGetReportInfoRsp\0223\n\tRep"
    "ortArr\030\001 \003(\0132 .pb.TLocalBattleReportSimp"
    "leInfo\0229\n\017RecentReportArr\030\002 \003(\0132 .pb.TLo"
    "calBattleReportSimpleInfo\022:\n\020ExtremeRepo"
    "rtArr\030\003 \003(\0132 .pb.TLocalBattleReportSimpl"
    "eInfo\"0\n\033TCampTowerReceiveWelfareReq\022\021\n\t"
    "WelfareId\030\001 \001(\r\"E\n\033TCampTowerReceiveWelf"
    "areRsp\022&\n\013RewardArray\030\001 \003(\0132\021.pb.TCommon"
    "Reward\"l\n\030TCampTowerPassedRankItem\022%\n\010Us"
    "erInfo\030\001 \001(\0132\023.pb.TUserSimpleInfo\022\025\n\rPas"
    "sedLayerId\030\002 \001(\r\022\022\n\nPassedTime\030\003 \001(\004\"I\n\030"
    "TCampTowerGetCampRankReq\022\016\n\006CampId\030\001 \001(\r"
    "\022\016\n\006Offset\030\002 \001(\005\022\r\n\005Limit\030\003 \001(\005\"Y\n\030TCamp"
    "TowerGetCampRankRsp\022-\n\007RankArr\030\001 \003(\0132\034.p"
    "b.TCampTowerPassedRankItem\022\016\n\006MyRank\030\002 \001"
    "(\005", 1522);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/CampTower.proto", &protobuf_RegisterTypes);
  TCampTowerInfo::default_instance_ = new TCampTowerInfo();
  TCampTowerRandAttr::default_instance_ = new TCampTowerRandAttr();
  TCampTowerGetInfoRsp::default_instance_ = new TCampTowerGetInfoRsp();
  TCampTowerStartChallengeReq::default_instance_ = new TCampTowerStartChallengeReq();
  TCampTowerStartChallengeRsp::default_instance_ = new TCampTowerStartChallengeRsp();
  TCampTowerReportChallengeReq::default_instance_ = new TCampTowerReportChallengeReq();
  TCampTowerReportChallengeRsp::default_instance_ = new TCampTowerReportChallengeRsp();
  TCampTowerReport::default_instance_ = new TCampTowerReport();
  TCampTowerGetReportInfoReq::default_instance_ = new TCampTowerGetReportInfoReq();
  TCampTowerGetReportInfoRsp::default_instance_ = new TCampTowerGetReportInfoRsp();
  TCampTowerReceiveWelfareReq::default_instance_ = new TCampTowerReceiveWelfareReq();
  TCampTowerReceiveWelfareRsp::default_instance_ = new TCampTowerReceiveWelfareRsp();
  TCampTowerPassedRankItem::default_instance_ = new TCampTowerPassedRankItem();
  TCampTowerGetCampRankReq::default_instance_ = new TCampTowerGetCampRankReq();
  TCampTowerGetCampRankRsp::default_instance_ = new TCampTowerGetCampRankRsp();
  TCampTowerInfo::default_instance_->InitAsDefaultInstance();
  TCampTowerRandAttr::default_instance_->InitAsDefaultInstance();
  TCampTowerGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TCampTowerStartChallengeReq::default_instance_->InitAsDefaultInstance();
  TCampTowerStartChallengeRsp::default_instance_->InitAsDefaultInstance();
  TCampTowerReportChallengeReq::default_instance_->InitAsDefaultInstance();
  TCampTowerReportChallengeRsp::default_instance_->InitAsDefaultInstance();
  TCampTowerReport::default_instance_->InitAsDefaultInstance();
  TCampTowerGetReportInfoReq::default_instance_->InitAsDefaultInstance();
  TCampTowerGetReportInfoRsp::default_instance_->InitAsDefaultInstance();
  TCampTowerReceiveWelfareReq::default_instance_->InitAsDefaultInstance();
  TCampTowerReceiveWelfareRsp::default_instance_->InitAsDefaultInstance();
  TCampTowerPassedRankItem::default_instance_->InitAsDefaultInstance();
  TCampTowerGetCampRankReq::default_instance_->InitAsDefaultInstance();
  TCampTowerGetCampRankRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fCampTower_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fCampTower_2eproto {
  StaticDescriptorInitializer_net_2fCampTower_2eproto() {
    protobuf_AddDesc_net_2fCampTower_2eproto();
  }
} static_descriptor_initializer_net_2fCampTower_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TCampTowerInfo::kCampIdFieldNumber;
const int TCampTowerInfo::kPassedLayerIdFieldNumber;
const int TCampTowerInfo::kCurPassedNumFieldNumber;
#endif  // !_MSC_VER

TCampTowerInfo::TCampTowerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCampTowerInfo)
}

void TCampTowerInfo::InitAsDefaultInstance() {
}

TCampTowerInfo::TCampTowerInfo(const TCampTowerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCampTowerInfo)
}

void TCampTowerInfo::SharedCtor() {
  _cached_size_ = 0;
  campid_ = 0u;
  passedlayerid_ = 0u;
  curpassednum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCampTowerInfo::~TCampTowerInfo() {
  // @@protoc_insertion_point(destructor:pb.TCampTowerInfo)
  SharedDtor();
}

void TCampTowerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCampTowerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCampTowerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCampTowerInfo_descriptor_;
}

const TCampTowerInfo& TCampTowerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCampTower_2eproto();
  return *default_instance_;
}

TCampTowerInfo* TCampTowerInfo::default_instance_ = NULL;

TCampTowerInfo* TCampTowerInfo::New() const {
  return new TCampTowerInfo;
}

void TCampTowerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCampTowerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(campid_, curpassednum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCampTowerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCampTowerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CampId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PassedLayerId;
        break;
      }

      // optional uint32 PassedLayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_PassedLayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passedlayerid_)));
          set_has_passedlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurPassedNum;
        break;
      }

      // optional uint32 CurPassedNum = 3;
      case 3: {
        if (tag == 24) {
         parse_CurPassedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpassednum_)));
          set_has_curpassednum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCampTowerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCampTowerInfo)
  return false;
#undef DO_
}

void TCampTowerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCampTowerInfo)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->campid(), output);
  }

  // optional uint32 PassedLayerId = 2;
  if (has_passedlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->passedlayerid(), output);
  }

  // optional uint32 CurPassedNum = 3;
  if (has_curpassednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curpassednum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCampTowerInfo)
}

::google::protobuf::uint8* TCampTowerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCampTowerInfo)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->campid(), target);
  }

  // optional uint32 PassedLayerId = 2;
  if (has_passedlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->passedlayerid(), target);
  }

  // optional uint32 CurPassedNum = 3;
  if (has_curpassednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curpassednum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCampTowerInfo)
  return target;
}

int TCampTowerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CampId = 1;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint32 PassedLayerId = 2;
    if (has_passedlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passedlayerid());
    }

    // optional uint32 CurPassedNum = 3;
    if (has_curpassednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpassednum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCampTowerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCampTowerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCampTowerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCampTowerInfo::MergeFrom(const TCampTowerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_passedlayerid()) {
      set_passedlayerid(from.passedlayerid());
    }
    if (from.has_curpassednum()) {
      set_curpassednum(from.curpassednum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCampTowerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCampTowerInfo::CopyFrom(const TCampTowerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCampTowerInfo::IsInitialized() const {

  return true;
}

void TCampTowerInfo::Swap(TCampTowerInfo* other) {
  if (other != this) {
    std::swap(campid_, other->campid_);
    std::swap(passedlayerid_, other->passedlayerid_);
    std::swap(curpassednum_, other->curpassednum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCampTowerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCampTowerInfo_descriptor_;
  metadata.reflection = TCampTowerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCampTowerRandAttr::kCampIdFieldNumber;
const int TCampTowerRandAttr::kHtidArrFieldNumber;
#endif  // !_MSC_VER

TCampTowerRandAttr::TCampTowerRandAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCampTowerRandAttr)
}

void TCampTowerRandAttr::InitAsDefaultInstance() {
}

TCampTowerRandAttr::TCampTowerRandAttr(const TCampTowerRandAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCampTowerRandAttr)
}

void TCampTowerRandAttr::SharedCtor() {
  _cached_size_ = 0;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCampTowerRandAttr::~TCampTowerRandAttr() {
  // @@protoc_insertion_point(destructor:pb.TCampTowerRandAttr)
  SharedDtor();
}

void TCampTowerRandAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCampTowerRandAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCampTowerRandAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCampTowerRandAttr_descriptor_;
}

const TCampTowerRandAttr& TCampTowerRandAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCampTower_2eproto();
  return *default_instance_;
}

TCampTowerRandAttr* TCampTowerRandAttr::default_instance_ = NULL;

TCampTowerRandAttr* TCampTowerRandAttr::New() const {
  return new TCampTowerRandAttr;
}

void TCampTowerRandAttr::Clear() {
  campid_ = 0u;
  htidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCampTowerRandAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCampTowerRandAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CampId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HtidArr;
        break;
      }

      // repeated uint32 HtidArr = 2;
      case 2: {
        if (tag == 16) {
         parse_HtidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_htidarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_htidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HtidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCampTowerRandAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCampTowerRandAttr)
  return false;
#undef DO_
}

void TCampTowerRandAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCampTowerRandAttr)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->campid(), output);
  }

  // repeated uint32 HtidArr = 2;
  for (int i = 0; i < this->htidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->htidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCampTowerRandAttr)
}

::google::protobuf::uint8* TCampTowerRandAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCampTowerRandAttr)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->campid(), target);
  }

  // repeated uint32 HtidArr = 2;
  for (int i = 0; i < this->htidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->htidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCampTowerRandAttr)
  return target;
}

int TCampTowerRandAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CampId = 1;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

  }
  // repeated uint32 HtidArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->htidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->htidarr(i));
    }
    total_size += 1 * this->htidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCampTowerRandAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCampTowerRandAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCampTowerRandAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCampTowerRandAttr::MergeFrom(const TCampTowerRandAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  htidarr_.MergeFrom(from.htidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCampTowerRandAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCampTowerRandAttr::CopyFrom(const TCampTowerRandAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCampTowerRandAttr::IsInitialized() const {

  return true;
}

void TCampTowerRandAttr::Swap(TCampTowerRandAttr* other) {
  if (other != this) {
    std::swap(campid_, other->campid_);
    htidarr_.Swap(&other->htidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCampTowerRandAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCampTowerRandAttr_descriptor_;
  metadata.reflection = TCampTowerRandAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCampTowerGetInfoRsp::kTowerInfoArrFieldNumber;
const int TCampTowerGetInfoRsp::kReceiveWelfareArrFieldNumber;
const int TCampTowerGetInfoRsp::kRandAttrArrFieldNumber;
#endif  // !_MSC_VER

TCampTowerGetInfoRsp::TCampTowerGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCampTowerGetInfoRsp)
}

void TCampTowerGetInfoRsp::InitAsDefaultInstance() {
}

TCampTowerGetInfoRsp::TCampTowerGetInfoRsp(const TCampTowerGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCampTowerGetInfoRsp)
}

void TCampTowerGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCampTowerGetInfoRsp::~TCampTowerGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCampTowerGetInfoRsp)
  SharedDtor();
}

void TCampTowerGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCampTowerGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCampTowerGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCampTowerGetInfoRsp_descriptor_;
}

const TCampTowerGetInfoRsp& TCampTowerGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCampTower_2eproto();
  return *default_instance_;
}

TCampTowerGetInfoRsp* TCampTowerGetInfoRsp::default_instance_ = NULL;

TCampTowerGetInfoRsp* TCampTowerGetInfoRsp::New() const {
  return new TCampTowerGetInfoRsp;
}

void TCampTowerGetInfoRsp::Clear() {
  towerinfoarr_.Clear();
  receivewelfarearr_.Clear();
  randattrarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCampTowerGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCampTowerGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCampTowerInfo TowerInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_TowerInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_towerinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TowerInfoArr;
        if (input->ExpectTag(16)) goto parse_ReceiveWelfareArr;
        break;
      }

      // repeated uint32 ReceiveWelfareArr = 2;
      case 2: {
        if (tag == 16) {
         parse_ReceiveWelfareArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_receivewelfarearr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_receivewelfarearr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReceiveWelfareArr;
        if (input->ExpectTag(26)) goto parse_RandAttrArr;
        break;
      }

      // repeated .pb.TCampTowerRandAttr RandAttrArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RandAttrArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_randattrarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RandAttrArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCampTowerGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCampTowerGetInfoRsp)
  return false;
#undef DO_
}

void TCampTowerGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCampTowerGetInfoRsp)
  // repeated .pb.TCampTowerInfo TowerInfoArr = 1;
  for (int i = 0; i < this->towerinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->towerinfoarr(i), output);
  }

  // repeated uint32 ReceiveWelfareArr = 2;
  for (int i = 0; i < this->receivewelfarearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->receivewelfarearr(i), output);
  }

  // repeated .pb.TCampTowerRandAttr RandAttrArr = 3;
  for (int i = 0; i < this->randattrarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->randattrarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCampTowerGetInfoRsp)
}

::google::protobuf::uint8* TCampTowerGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCampTowerGetInfoRsp)
  // repeated .pb.TCampTowerInfo TowerInfoArr = 1;
  for (int i = 0; i < this->towerinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->towerinfoarr(i), target);
  }

  // repeated uint32 ReceiveWelfareArr = 2;
  for (int i = 0; i < this->receivewelfarearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->receivewelfarearr(i), target);
  }

  // repeated .pb.TCampTowerRandAttr RandAttrArr = 3;
  for (int i = 0; i < this->randattrarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->randattrarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCampTowerGetInfoRsp)
  return target;
}

int TCampTowerGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCampTowerInfo TowerInfoArr = 1;
  total_size += 1 * this->towerinfoarr_size();
  for (int i = 0; i < this->towerinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->towerinfoarr(i));
  }

  // repeated uint32 ReceiveWelfareArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->receivewelfarearr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->receivewelfarearr(i));
    }
    total_size += 1 * this->receivewelfarearr_size() + data_size;
  }

  // repeated .pb.TCampTowerRandAttr RandAttrArr = 3;
  total_size += 1 * this->randattrarr_size();
  for (int i = 0; i < this->randattrarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->randattrarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCampTowerGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCampTowerGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCampTowerGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCampTowerGetInfoRsp::MergeFrom(const TCampTowerGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  towerinfoarr_.MergeFrom(from.towerinfoarr_);
  receivewelfarearr_.MergeFrom(from.receivewelfarearr_);
  randattrarr_.MergeFrom(from.randattrarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCampTowerGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCampTowerGetInfoRsp::CopyFrom(const TCampTowerGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCampTowerGetInfoRsp::IsInitialized() const {

  return true;
}

void TCampTowerGetInfoRsp::Swap(TCampTowerGetInfoRsp* other) {
  if (other != this) {
    towerinfoarr_.Swap(&other->towerinfoarr_);
    receivewelfarearr_.Swap(&other->receivewelfarearr_);
    randattrarr_.Swap(&other->randattrarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCampTowerGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCampTowerGetInfoRsp_descriptor_;
  metadata.reflection = TCampTowerGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCampTowerStartChallengeReq::kCampIdFieldNumber;
const int TCampTowerStartChallengeReq::kLayerIdFieldNumber;
const int TCampTowerStartChallengeReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TCampTowerStartChallengeReq::TCampTowerStartChallengeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCampTowerStartChallengeReq)
}

void TCampTowerStartChallengeReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TCampTowerStartChallengeReq::TCampTowerStartChallengeReq(const TCampTowerStartChallengeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCampTowerStartChallengeReq)
}

void TCampTowerStartChallengeReq::SharedCtor() {
  _cached_size_ = 0;
  campid_ = 0u;
  layerid_ = 0u;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCampTowerStartChallengeReq::~TCampTowerStartChallengeReq() {
  // @@protoc_insertion_point(destructor:pb.TCampTowerStartChallengeReq)
  SharedDtor();
}

void TCampTowerStartChallengeReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TCampTowerStartChallengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCampTowerStartChallengeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCampTowerStartChallengeReq_descriptor_;
}

const TCampTowerStartChallengeReq& TCampTowerStartChallengeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCampTower_2eproto();
  return *default_instance_;
}

TCampTowerStartChallengeReq* TCampTowerStartChallengeReq::default_instance_ = NULL;

TCampTowerStartChallengeReq* TCampTowerStartChallengeReq::New() const {
  return new TCampTowerStartChallengeReq;
}

void TCampTowerStartChallengeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCampTowerStartChallengeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(campid_, layerid_);
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCampTowerStartChallengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCampTowerStartChallengeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CampId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LayerId;
        break;
      }

      // optional uint32 LayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_LayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCampTowerStartChallengeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCampTowerStartChallengeReq)
  return false;
#undef DO_
}

void TCampTowerStartChallengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCampTowerStartChallengeReq)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->campid(), output);
  }

  // optional uint32 LayerId = 2;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layerid(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCampTowerStartChallengeReq)
}

::google::protobuf::uint8* TCampTowerStartChallengeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCampTowerStartChallengeReq)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->campid(), target);
  }

  // optional uint32 LayerId = 2;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layerid(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCampTowerStartChallengeReq)
  return target;
}

int TCampTowerStartChallengeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CampId = 1;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint32 LayerId = 2;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerid());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 3;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCampTowerStartChallengeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCampTowerStartChallengeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCampTowerStartChallengeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCampTowerStartChallengeReq::MergeFrom(const TCampTowerStartChallengeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCampTowerStartChallengeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCampTowerStartChallengeReq::CopyFrom(const TCampTowerStartChallengeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCampTowerStartChallengeReq::IsInitialized() const {

  return true;
}

void TCampTowerStartChallengeReq::Swap(TCampTowerStartChallengeReq* other) {
  if (other != this) {
    std::swap(campid_, other->campid_);
    std::swap(layerid_, other->layerid_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCampTowerStartChallengeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCampTowerStartChallengeReq_descriptor_;
  metadata.reflection = TCampTowerStartChallengeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCampTowerStartChallengeRsp::kBattleArgsFieldNumber;
#endif  // !_MSC_VER

TCampTowerStartChallengeRsp::TCampTowerStartChallengeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCampTowerStartChallengeRsp)
}

void TCampTowerStartChallengeRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TCampTowerStartChallengeRsp::TCampTowerStartChallengeRsp(const TCampTowerStartChallengeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCampTowerStartChallengeRsp)
}

void TCampTowerStartChallengeRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCampTowerStartChallengeRsp::~TCampTowerStartChallengeRsp() {
  // @@protoc_insertion_point(destructor:pb.TCampTowerStartChallengeRsp)
  SharedDtor();
}

void TCampTowerStartChallengeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TCampTowerStartChallengeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCampTowerStartChallengeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCampTowerStartChallengeRsp_descriptor_;
}

const TCampTowerStartChallengeRsp& TCampTowerStartChallengeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCampTower_2eproto();
  return *default_instance_;
}

TCampTowerStartChallengeRsp* TCampTowerStartChallengeRsp::default_instance_ = NULL;

TCampTowerStartChallengeRsp* TCampTowerStartChallengeRsp::New() const {
  return new TCampTowerStartChallengeRsp;
}

void TCampTowerStartChallengeRsp::Clear() {
  if (has_battleargs()) {
    if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCampTowerStartChallengeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCampTowerStartChallengeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleArgs BattleArgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCampTowerStartChallengeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCampTowerStartChallengeRsp)
  return false;
#undef DO_
}

void TCampTowerStartChallengeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCampTowerStartChallengeRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCampTowerStartChallengeRsp)
}

::google::protobuf::uint8* TCampTowerStartChallengeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCampTowerStartChallengeRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCampTowerStartChallengeRsp)
  return target;
}

int TCampTowerStartChallengeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleArgs BattleArgs = 1;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCampTowerStartChallengeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCampTowerStartChallengeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCampTowerStartChallengeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCampTowerStartChallengeRsp::MergeFrom(const TCampTowerStartChallengeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCampTowerStartChallengeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCampTowerStartChallengeRsp::CopyFrom(const TCampTowerStartChallengeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCampTowerStartChallengeRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TCampTowerStartChallengeRsp::Swap(TCampTowerStartChallengeRsp* other) {
  if (other != this) {
    std::swap(battleargs_, other->battleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCampTowerStartChallengeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCampTowerStartChallengeRsp_descriptor_;
  metadata.reflection = TCampTowerStartChallengeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCampTowerReportChallengeReq::kCampIdFieldNumber;
const int TCampTowerReportChallengeReq::kLayerIdFieldNumber;
const int TCampTowerReportChallengeReq::kBattleReportFieldNumber;
#endif  // !_MSC_VER

TCampTowerReportChallengeReq::TCampTowerReportChallengeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCampTowerReportChallengeReq)
}

void TCampTowerReportChallengeReq::InitAsDefaultInstance() {
  battlereport_ = const_cast< ::pb::TBattleResult*>(&::pb::TBattleResult::default_instance());
}

TCampTowerReportChallengeReq::TCampTowerReportChallengeReq(const TCampTowerReportChallengeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCampTowerReportChallengeReq)
}

void TCampTowerReportChallengeReq::SharedCtor() {
  _cached_size_ = 0;
  campid_ = 0u;
  layerid_ = 0u;
  battlereport_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCampTowerReportChallengeReq::~TCampTowerReportChallengeReq() {
  // @@protoc_insertion_point(destructor:pb.TCampTowerReportChallengeReq)
  SharedDtor();
}

void TCampTowerReportChallengeReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlereport_;
  }
}

void TCampTowerReportChallengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCampTowerReportChallengeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCampTowerReportChallengeReq_descriptor_;
}

const TCampTowerReportChallengeReq& TCampTowerReportChallengeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCampTower_2eproto();
  return *default_instance_;
}

TCampTowerReportChallengeReq* TCampTowerReportChallengeReq::default_instance_ = NULL;

TCampTowerReportChallengeReq* TCampTowerReportChallengeReq::New() const {
  return new TCampTowerReportChallengeReq;
}

void TCampTowerReportChallengeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCampTowerReportChallengeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(campid_, layerid_);
    if (has_battlereport()) {
      if (battlereport_ != NULL) battlereport_->::pb::TBattleResult::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCampTowerReportChallengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCampTowerReportChallengeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CampId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LayerId;
        break;
      }

      // optional uint32 LayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_LayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleReport;
        break;
      }

      // optional .pb.TBattleResult BattleReport = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleReport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlereport()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCampTowerReportChallengeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCampTowerReportChallengeReq)
  return false;
#undef DO_
}

void TCampTowerReportChallengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCampTowerReportChallengeReq)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->campid(), output);
  }

  // optional uint32 LayerId = 2;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layerid(), output);
  }

  // optional .pb.TBattleResult BattleReport = 3;
  if (has_battlereport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battlereport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCampTowerReportChallengeReq)
}

::google::protobuf::uint8* TCampTowerReportChallengeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCampTowerReportChallengeReq)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->campid(), target);
  }

  // optional uint32 LayerId = 2;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layerid(), target);
  }

  // optional .pb.TBattleResult BattleReport = 3;
  if (has_battlereport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battlereport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCampTowerReportChallengeReq)
  return target;
}

int TCampTowerReportChallengeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CampId = 1;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint32 LayerId = 2;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerid());
    }

    // optional .pb.TBattleResult BattleReport = 3;
    if (has_battlereport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlereport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCampTowerReportChallengeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCampTowerReportChallengeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCampTowerReportChallengeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCampTowerReportChallengeReq::MergeFrom(const TCampTowerReportChallengeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
    if (from.has_battlereport()) {
      mutable_battlereport()->::pb::TBattleResult::MergeFrom(from.battlereport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCampTowerReportChallengeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCampTowerReportChallengeReq::CopyFrom(const TCampTowerReportChallengeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCampTowerReportChallengeReq::IsInitialized() const {

  if (has_battlereport()) {
    if (!this->battlereport().IsInitialized()) return false;
  }
  return true;
}

void TCampTowerReportChallengeReq::Swap(TCampTowerReportChallengeReq* other) {
  if (other != this) {
    std::swap(campid_, other->campid_);
    std::swap(layerid_, other->layerid_);
    std::swap(battlereport_, other->battlereport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCampTowerReportChallengeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCampTowerReportChallengeReq_descriptor_;
  metadata.reflection = TCampTowerReportChallengeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCampTowerReportChallengeRsp::kIsWinFieldNumber;
const int TCampTowerReportChallengeRsp::kPassedLayerIdFieldNumber;
const int TCampTowerReportChallengeRsp::kCurPassedNumFieldNumber;
#endif  // !_MSC_VER

TCampTowerReportChallengeRsp::TCampTowerReportChallengeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCampTowerReportChallengeRsp)
}

void TCampTowerReportChallengeRsp::InitAsDefaultInstance() {
}

TCampTowerReportChallengeRsp::TCampTowerReportChallengeRsp(const TCampTowerReportChallengeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCampTowerReportChallengeRsp)
}

void TCampTowerReportChallengeRsp::SharedCtor() {
  _cached_size_ = 0;
  iswin_ = false;
  passedlayerid_ = 0u;
  curpassednum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCampTowerReportChallengeRsp::~TCampTowerReportChallengeRsp() {
  // @@protoc_insertion_point(destructor:pb.TCampTowerReportChallengeRsp)
  SharedDtor();
}

void TCampTowerReportChallengeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCampTowerReportChallengeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCampTowerReportChallengeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCampTowerReportChallengeRsp_descriptor_;
}

const TCampTowerReportChallengeRsp& TCampTowerReportChallengeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCampTower_2eproto();
  return *default_instance_;
}

TCampTowerReportChallengeRsp* TCampTowerReportChallengeRsp::default_instance_ = NULL;

TCampTowerReportChallengeRsp* TCampTowerReportChallengeRsp::New() const {
  return new TCampTowerReportChallengeRsp;
}

void TCampTowerReportChallengeRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCampTowerReportChallengeRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(iswin_, curpassednum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCampTowerReportChallengeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCampTowerReportChallengeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsWin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PassedLayerId;
        break;
      }

      // optional uint32 PassedLayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_PassedLayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passedlayerid_)));
          set_has_passedlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurPassedNum;
        break;
      }

      // optional uint32 CurPassedNum = 3;
      case 3: {
        if (tag == 24) {
         parse_CurPassedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpassednum_)));
          set_has_curpassednum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCampTowerReportChallengeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCampTowerReportChallengeRsp)
  return false;
#undef DO_
}

void TCampTowerReportChallengeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCampTowerReportChallengeRsp)
  // optional bool IsWin = 1;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iswin(), output);
  }

  // optional uint32 PassedLayerId = 2;
  if (has_passedlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->passedlayerid(), output);
  }

  // optional uint32 CurPassedNum = 3;
  if (has_curpassednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curpassednum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCampTowerReportChallengeRsp)
}

::google::protobuf::uint8* TCampTowerReportChallengeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCampTowerReportChallengeRsp)
  // optional bool IsWin = 1;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iswin(), target);
  }

  // optional uint32 PassedLayerId = 2;
  if (has_passedlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->passedlayerid(), target);
  }

  // optional uint32 CurPassedNum = 3;
  if (has_curpassednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curpassednum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCampTowerReportChallengeRsp)
  return target;
}

int TCampTowerReportChallengeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsWin = 1;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

    // optional uint32 PassedLayerId = 2;
    if (has_passedlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passedlayerid());
    }

    // optional uint32 CurPassedNum = 3;
    if (has_curpassednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpassednum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCampTowerReportChallengeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCampTowerReportChallengeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCampTowerReportChallengeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCampTowerReportChallengeRsp::MergeFrom(const TCampTowerReportChallengeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_passedlayerid()) {
      set_passedlayerid(from.passedlayerid());
    }
    if (from.has_curpassednum()) {
      set_curpassednum(from.curpassednum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCampTowerReportChallengeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCampTowerReportChallengeRsp::CopyFrom(const TCampTowerReportChallengeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCampTowerReportChallengeRsp::IsInitialized() const {

  return true;
}

void TCampTowerReportChallengeRsp::Swap(TCampTowerReportChallengeRsp* other) {
  if (other != this) {
    std::swap(iswin_, other->iswin_);
    std::swap(passedlayerid_, other->passedlayerid_);
    std::swap(curpassednum_, other->curpassednum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCampTowerReportChallengeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCampTowerReportChallengeRsp_descriptor_;
  metadata.reflection = TCampTowerReportChallengeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCampTowerReport::kReportIdFieldNumber;
const int TCampTowerReport::kPassTimeFieldNumber;
const int TCampTowerReport::kUserInfoFieldNumber;
#endif  // !_MSC_VER

TCampTowerReport::TCampTowerReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCampTowerReport)
}

void TCampTowerReport::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TCampTowerReport::TCampTowerReport(const TCampTowerReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCampTowerReport)
}

void TCampTowerReport::SharedCtor() {
  _cached_size_ = 0;
  reportid_ = GOOGLE_ULONGLONG(0);
  passtime_ = GOOGLE_ULONGLONG(0);
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCampTowerReport::~TCampTowerReport() {
  // @@protoc_insertion_point(destructor:pb.TCampTowerReport)
  SharedDtor();
}

void TCampTowerReport::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TCampTowerReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCampTowerReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCampTowerReport_descriptor_;
}

const TCampTowerReport& TCampTowerReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCampTower_2eproto();
  return *default_instance_;
}

TCampTowerReport* TCampTowerReport::default_instance_ = NULL;

TCampTowerReport* TCampTowerReport::New() const {
  return new TCampTowerReport;
}

void TCampTowerReport::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCampTowerReport*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(reportid_, passtime_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCampTowerReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCampTowerReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ReportId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PassTime;
        break;
      }

      // optional uint64 PassTime = 2;
      case 2: {
        if (tag == 16) {
         parse_PassTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &passtime_)));
          set_has_passtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCampTowerReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCampTowerReport)
  return false;
#undef DO_
}

void TCampTowerReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCampTowerReport)
  // optional uint64 ReportId = 1;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reportid(), output);
  }

  // optional uint64 PassTime = 2;
  if (has_passtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->passtime(), output);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCampTowerReport)
}

::google::protobuf::uint8* TCampTowerReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCampTowerReport)
  // optional uint64 ReportId = 1;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reportid(), target);
  }

  // optional uint64 PassTime = 2;
  if (has_passtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->passtime(), target);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCampTowerReport)
  return target;
}

int TCampTowerReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ReportId = 1;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reportid());
    }

    // optional uint64 PassTime = 2;
    if (has_passtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->passtime());
    }

    // optional .pb.TUserSimpleInfo UserInfo = 3;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCampTowerReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCampTowerReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCampTowerReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCampTowerReport::MergeFrom(const TCampTowerReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
    if (from.has_passtime()) {
      set_passtime(from.passtime());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCampTowerReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCampTowerReport::CopyFrom(const TCampTowerReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCampTowerReport::IsInitialized() const {

  return true;
}

void TCampTowerReport::Swap(TCampTowerReport* other) {
  if (other != this) {
    std::swap(reportid_, other->reportid_);
    std::swap(passtime_, other->passtime_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCampTowerReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCampTowerReport_descriptor_;
  metadata.reflection = TCampTowerReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCampTowerGetReportInfoReq::kCampIdFieldNumber;
const int TCampTowerGetReportInfoReq::kLayerIdFieldNumber;
#endif  // !_MSC_VER

TCampTowerGetReportInfoReq::TCampTowerGetReportInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCampTowerGetReportInfoReq)
}

void TCampTowerGetReportInfoReq::InitAsDefaultInstance() {
}

TCampTowerGetReportInfoReq::TCampTowerGetReportInfoReq(const TCampTowerGetReportInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCampTowerGetReportInfoReq)
}

void TCampTowerGetReportInfoReq::SharedCtor() {
  _cached_size_ = 0;
  campid_ = 0u;
  layerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCampTowerGetReportInfoReq::~TCampTowerGetReportInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TCampTowerGetReportInfoReq)
  SharedDtor();
}

void TCampTowerGetReportInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCampTowerGetReportInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCampTowerGetReportInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCampTowerGetReportInfoReq_descriptor_;
}

const TCampTowerGetReportInfoReq& TCampTowerGetReportInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCampTower_2eproto();
  return *default_instance_;
}

TCampTowerGetReportInfoReq* TCampTowerGetReportInfoReq::default_instance_ = NULL;

TCampTowerGetReportInfoReq* TCampTowerGetReportInfoReq::New() const {
  return new TCampTowerGetReportInfoReq;
}

void TCampTowerGetReportInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCampTowerGetReportInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(campid_, layerid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCampTowerGetReportInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCampTowerGetReportInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CampId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LayerId;
        break;
      }

      // optional uint32 LayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_LayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCampTowerGetReportInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCampTowerGetReportInfoReq)
  return false;
#undef DO_
}

void TCampTowerGetReportInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCampTowerGetReportInfoReq)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->campid(), output);
  }

  // optional uint32 LayerId = 2;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCampTowerGetReportInfoReq)
}

::google::protobuf::uint8* TCampTowerGetReportInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCampTowerGetReportInfoReq)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->campid(), target);
  }

  // optional uint32 LayerId = 2;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCampTowerGetReportInfoReq)
  return target;
}

int TCampTowerGetReportInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CampId = 1;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint32 LayerId = 2;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCampTowerGetReportInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCampTowerGetReportInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCampTowerGetReportInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCampTowerGetReportInfoReq::MergeFrom(const TCampTowerGetReportInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCampTowerGetReportInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCampTowerGetReportInfoReq::CopyFrom(const TCampTowerGetReportInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCampTowerGetReportInfoReq::IsInitialized() const {

  return true;
}

void TCampTowerGetReportInfoReq::Swap(TCampTowerGetReportInfoReq* other) {
  if (other != this) {
    std::swap(campid_, other->campid_);
    std::swap(layerid_, other->layerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCampTowerGetReportInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCampTowerGetReportInfoReq_descriptor_;
  metadata.reflection = TCampTowerGetReportInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCampTowerGetReportInfoRsp::kReportArrFieldNumber;
const int TCampTowerGetReportInfoRsp::kRecentReportArrFieldNumber;
const int TCampTowerGetReportInfoRsp::kExtremeReportArrFieldNumber;
#endif  // !_MSC_VER

TCampTowerGetReportInfoRsp::TCampTowerGetReportInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCampTowerGetReportInfoRsp)
}

void TCampTowerGetReportInfoRsp::InitAsDefaultInstance() {
}

TCampTowerGetReportInfoRsp::TCampTowerGetReportInfoRsp(const TCampTowerGetReportInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCampTowerGetReportInfoRsp)
}

void TCampTowerGetReportInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCampTowerGetReportInfoRsp::~TCampTowerGetReportInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCampTowerGetReportInfoRsp)
  SharedDtor();
}

void TCampTowerGetReportInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCampTowerGetReportInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCampTowerGetReportInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCampTowerGetReportInfoRsp_descriptor_;
}

const TCampTowerGetReportInfoRsp& TCampTowerGetReportInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCampTower_2eproto();
  return *default_instance_;
}

TCampTowerGetReportInfoRsp* TCampTowerGetReportInfoRsp::default_instance_ = NULL;

TCampTowerGetReportInfoRsp* TCampTowerGetReportInfoRsp::New() const {
  return new TCampTowerGetReportInfoRsp;
}

void TCampTowerGetReportInfoRsp::Clear() {
  reportarr_.Clear();
  recentreportarr_.Clear();
  extremereportarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCampTowerGetReportInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCampTowerGetReportInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
      case 1: {
        if (tag == 10) {
         parse_ReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ReportArr;
        if (input->ExpectTag(18)) goto parse_RecentReportArr;
        break;
      }

      // repeated .pb.TLocalBattleReportSimpleInfo RecentReportArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RecentReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recentreportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RecentReportArr;
        if (input->ExpectTag(26)) goto parse_ExtremeReportArr;
        break;
      }

      // repeated .pb.TLocalBattleReportSimpleInfo ExtremeReportArr = 3;
      case 3: {
        if (tag == 26) {
         parse_ExtremeReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extremereportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ExtremeReportArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCampTowerGetReportInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCampTowerGetReportInfoRsp)
  return false;
#undef DO_
}

void TCampTowerGetReportInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCampTowerGetReportInfoRsp)
  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
  for (int i = 0; i < this->reportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reportarr(i), output);
  }

  // repeated .pb.TLocalBattleReportSimpleInfo RecentReportArr = 2;
  for (int i = 0; i < this->recentreportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recentreportarr(i), output);
  }

  // repeated .pb.TLocalBattleReportSimpleInfo ExtremeReportArr = 3;
  for (int i = 0; i < this->extremereportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->extremereportarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCampTowerGetReportInfoRsp)
}

::google::protobuf::uint8* TCampTowerGetReportInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCampTowerGetReportInfoRsp)
  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
  for (int i = 0; i < this->reportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reportarr(i), target);
  }

  // repeated .pb.TLocalBattleReportSimpleInfo RecentReportArr = 2;
  for (int i = 0; i < this->recentreportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recentreportarr(i), target);
  }

  // repeated .pb.TLocalBattleReportSimpleInfo ExtremeReportArr = 3;
  for (int i = 0; i < this->extremereportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->extremereportarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCampTowerGetReportInfoRsp)
  return target;
}

int TCampTowerGetReportInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
  total_size += 1 * this->reportarr_size();
  for (int i = 0; i < this->reportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reportarr(i));
  }

  // repeated .pb.TLocalBattleReportSimpleInfo RecentReportArr = 2;
  total_size += 1 * this->recentreportarr_size();
  for (int i = 0; i < this->recentreportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recentreportarr(i));
  }

  // repeated .pb.TLocalBattleReportSimpleInfo ExtremeReportArr = 3;
  total_size += 1 * this->extremereportarr_size();
  for (int i = 0; i < this->extremereportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extremereportarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCampTowerGetReportInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCampTowerGetReportInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCampTowerGetReportInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCampTowerGetReportInfoRsp::MergeFrom(const TCampTowerGetReportInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reportarr_.MergeFrom(from.reportarr_);
  recentreportarr_.MergeFrom(from.recentreportarr_);
  extremereportarr_.MergeFrom(from.extremereportarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCampTowerGetReportInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCampTowerGetReportInfoRsp::CopyFrom(const TCampTowerGetReportInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCampTowerGetReportInfoRsp::IsInitialized() const {

  return true;
}

void TCampTowerGetReportInfoRsp::Swap(TCampTowerGetReportInfoRsp* other) {
  if (other != this) {
    reportarr_.Swap(&other->reportarr_);
    recentreportarr_.Swap(&other->recentreportarr_);
    extremereportarr_.Swap(&other->extremereportarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCampTowerGetReportInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCampTowerGetReportInfoRsp_descriptor_;
  metadata.reflection = TCampTowerGetReportInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCampTowerReceiveWelfareReq::kWelfareIdFieldNumber;
#endif  // !_MSC_VER

TCampTowerReceiveWelfareReq::TCampTowerReceiveWelfareReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCampTowerReceiveWelfareReq)
}

void TCampTowerReceiveWelfareReq::InitAsDefaultInstance() {
}

TCampTowerReceiveWelfareReq::TCampTowerReceiveWelfareReq(const TCampTowerReceiveWelfareReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCampTowerReceiveWelfareReq)
}

void TCampTowerReceiveWelfareReq::SharedCtor() {
  _cached_size_ = 0;
  welfareid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCampTowerReceiveWelfareReq::~TCampTowerReceiveWelfareReq() {
  // @@protoc_insertion_point(destructor:pb.TCampTowerReceiveWelfareReq)
  SharedDtor();
}

void TCampTowerReceiveWelfareReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCampTowerReceiveWelfareReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCampTowerReceiveWelfareReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCampTowerReceiveWelfareReq_descriptor_;
}

const TCampTowerReceiveWelfareReq& TCampTowerReceiveWelfareReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCampTower_2eproto();
  return *default_instance_;
}

TCampTowerReceiveWelfareReq* TCampTowerReceiveWelfareReq::default_instance_ = NULL;

TCampTowerReceiveWelfareReq* TCampTowerReceiveWelfareReq::New() const {
  return new TCampTowerReceiveWelfareReq;
}

void TCampTowerReceiveWelfareReq::Clear() {
  welfareid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCampTowerReceiveWelfareReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCampTowerReceiveWelfareReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 WelfareId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &welfareid_)));
          set_has_welfareid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCampTowerReceiveWelfareReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCampTowerReceiveWelfareReq)
  return false;
#undef DO_
}

void TCampTowerReceiveWelfareReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCampTowerReceiveWelfareReq)
  // optional uint32 WelfareId = 1;
  if (has_welfareid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->welfareid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCampTowerReceiveWelfareReq)
}

::google::protobuf::uint8* TCampTowerReceiveWelfareReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCampTowerReceiveWelfareReq)
  // optional uint32 WelfareId = 1;
  if (has_welfareid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->welfareid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCampTowerReceiveWelfareReq)
  return target;
}

int TCampTowerReceiveWelfareReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WelfareId = 1;
    if (has_welfareid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->welfareid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCampTowerReceiveWelfareReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCampTowerReceiveWelfareReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCampTowerReceiveWelfareReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCampTowerReceiveWelfareReq::MergeFrom(const TCampTowerReceiveWelfareReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_welfareid()) {
      set_welfareid(from.welfareid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCampTowerReceiveWelfareReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCampTowerReceiveWelfareReq::CopyFrom(const TCampTowerReceiveWelfareReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCampTowerReceiveWelfareReq::IsInitialized() const {

  return true;
}

void TCampTowerReceiveWelfareReq::Swap(TCampTowerReceiveWelfareReq* other) {
  if (other != this) {
    std::swap(welfareid_, other->welfareid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCampTowerReceiveWelfareReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCampTowerReceiveWelfareReq_descriptor_;
  metadata.reflection = TCampTowerReceiveWelfareReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCampTowerReceiveWelfareRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TCampTowerReceiveWelfareRsp::TCampTowerReceiveWelfareRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCampTowerReceiveWelfareRsp)
}

void TCampTowerReceiveWelfareRsp::InitAsDefaultInstance() {
}

TCampTowerReceiveWelfareRsp::TCampTowerReceiveWelfareRsp(const TCampTowerReceiveWelfareRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCampTowerReceiveWelfareRsp)
}

void TCampTowerReceiveWelfareRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCampTowerReceiveWelfareRsp::~TCampTowerReceiveWelfareRsp() {
  // @@protoc_insertion_point(destructor:pb.TCampTowerReceiveWelfareRsp)
  SharedDtor();
}

void TCampTowerReceiveWelfareRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCampTowerReceiveWelfareRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCampTowerReceiveWelfareRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCampTowerReceiveWelfareRsp_descriptor_;
}

const TCampTowerReceiveWelfareRsp& TCampTowerReceiveWelfareRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCampTower_2eproto();
  return *default_instance_;
}

TCampTowerReceiveWelfareRsp* TCampTowerReceiveWelfareRsp::default_instance_ = NULL;

TCampTowerReceiveWelfareRsp* TCampTowerReceiveWelfareRsp::New() const {
  return new TCampTowerReceiveWelfareRsp;
}

void TCampTowerReceiveWelfareRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCampTowerReceiveWelfareRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCampTowerReceiveWelfareRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCampTowerReceiveWelfareRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCampTowerReceiveWelfareRsp)
  return false;
#undef DO_
}

void TCampTowerReceiveWelfareRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCampTowerReceiveWelfareRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCampTowerReceiveWelfareRsp)
}

::google::protobuf::uint8* TCampTowerReceiveWelfareRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCampTowerReceiveWelfareRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCampTowerReceiveWelfareRsp)
  return target;
}

int TCampTowerReceiveWelfareRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCampTowerReceiveWelfareRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCampTowerReceiveWelfareRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCampTowerReceiveWelfareRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCampTowerReceiveWelfareRsp::MergeFrom(const TCampTowerReceiveWelfareRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCampTowerReceiveWelfareRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCampTowerReceiveWelfareRsp::CopyFrom(const TCampTowerReceiveWelfareRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCampTowerReceiveWelfareRsp::IsInitialized() const {

  return true;
}

void TCampTowerReceiveWelfareRsp::Swap(TCampTowerReceiveWelfareRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCampTowerReceiveWelfareRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCampTowerReceiveWelfareRsp_descriptor_;
  metadata.reflection = TCampTowerReceiveWelfareRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCampTowerPassedRankItem::kUserInfoFieldNumber;
const int TCampTowerPassedRankItem::kPassedLayerIdFieldNumber;
const int TCampTowerPassedRankItem::kPassedTimeFieldNumber;
#endif  // !_MSC_VER

TCampTowerPassedRankItem::TCampTowerPassedRankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCampTowerPassedRankItem)
}

void TCampTowerPassedRankItem::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TCampTowerPassedRankItem::TCampTowerPassedRankItem(const TCampTowerPassedRankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCampTowerPassedRankItem)
}

void TCampTowerPassedRankItem::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  passedlayerid_ = 0u;
  passedtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCampTowerPassedRankItem::~TCampTowerPassedRankItem() {
  // @@protoc_insertion_point(destructor:pb.TCampTowerPassedRankItem)
  SharedDtor();
}

void TCampTowerPassedRankItem::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TCampTowerPassedRankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCampTowerPassedRankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCampTowerPassedRankItem_descriptor_;
}

const TCampTowerPassedRankItem& TCampTowerPassedRankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCampTower_2eproto();
  return *default_instance_;
}

TCampTowerPassedRankItem* TCampTowerPassedRankItem::default_instance_ = NULL;

TCampTowerPassedRankItem* TCampTowerPassedRankItem::New() const {
  return new TCampTowerPassedRankItem;
}

void TCampTowerPassedRankItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCampTowerPassedRankItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(passedtime_, passedlayerid_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCampTowerPassedRankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCampTowerPassedRankItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PassedLayerId;
        break;
      }

      // optional uint32 PassedLayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_PassedLayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passedlayerid_)));
          set_has_passedlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PassedTime;
        break;
      }

      // optional uint64 PassedTime = 3;
      case 3: {
        if (tag == 24) {
         parse_PassedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &passedtime_)));
          set_has_passedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCampTowerPassedRankItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCampTowerPassedRankItem)
  return false;
#undef DO_
}

void TCampTowerPassedRankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCampTowerPassedRankItem)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 PassedLayerId = 2;
  if (has_passedlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->passedlayerid(), output);
  }

  // optional uint64 PassedTime = 3;
  if (has_passedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->passedtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCampTowerPassedRankItem)
}

::google::protobuf::uint8* TCampTowerPassedRankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCampTowerPassedRankItem)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 PassedLayerId = 2;
  if (has_passedlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->passedlayerid(), target);
  }

  // optional uint64 PassedTime = 3;
  if (has_passedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->passedtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCampTowerPassedRankItem)
  return target;
}

int TCampTowerPassedRankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 PassedLayerId = 2;
    if (has_passedlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passedlayerid());
    }

    // optional uint64 PassedTime = 3;
    if (has_passedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->passedtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCampTowerPassedRankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCampTowerPassedRankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCampTowerPassedRankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCampTowerPassedRankItem::MergeFrom(const TCampTowerPassedRankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_passedlayerid()) {
      set_passedlayerid(from.passedlayerid());
    }
    if (from.has_passedtime()) {
      set_passedtime(from.passedtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCampTowerPassedRankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCampTowerPassedRankItem::CopyFrom(const TCampTowerPassedRankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCampTowerPassedRankItem::IsInitialized() const {

  return true;
}

void TCampTowerPassedRankItem::Swap(TCampTowerPassedRankItem* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(passedlayerid_, other->passedlayerid_);
    std::swap(passedtime_, other->passedtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCampTowerPassedRankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCampTowerPassedRankItem_descriptor_;
  metadata.reflection = TCampTowerPassedRankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCampTowerGetCampRankReq::kCampIdFieldNumber;
const int TCampTowerGetCampRankReq::kOffsetFieldNumber;
const int TCampTowerGetCampRankReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TCampTowerGetCampRankReq::TCampTowerGetCampRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCampTowerGetCampRankReq)
}

void TCampTowerGetCampRankReq::InitAsDefaultInstance() {
}

TCampTowerGetCampRankReq::TCampTowerGetCampRankReq(const TCampTowerGetCampRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCampTowerGetCampRankReq)
}

void TCampTowerGetCampRankReq::SharedCtor() {
  _cached_size_ = 0;
  campid_ = 0u;
  offset_ = 0;
  limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCampTowerGetCampRankReq::~TCampTowerGetCampRankReq() {
  // @@protoc_insertion_point(destructor:pb.TCampTowerGetCampRankReq)
  SharedDtor();
}

void TCampTowerGetCampRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCampTowerGetCampRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCampTowerGetCampRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCampTowerGetCampRankReq_descriptor_;
}

const TCampTowerGetCampRankReq& TCampTowerGetCampRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCampTower_2eproto();
  return *default_instance_;
}

TCampTowerGetCampRankReq* TCampTowerGetCampRankReq::default_instance_ = NULL;

TCampTowerGetCampRankReq* TCampTowerGetCampRankReq::New() const {
  return new TCampTowerGetCampRankReq;
}

void TCampTowerGetCampRankReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCampTowerGetCampRankReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(campid_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCampTowerGetCampRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCampTowerGetCampRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CampId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Offset;
        break;
      }

      // optional int32 Offset = 2;
      case 2: {
        if (tag == 16) {
         parse_Offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Limit;
        break;
      }

      // optional int32 Limit = 3;
      case 3: {
        if (tag == 24) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCampTowerGetCampRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCampTowerGetCampRankReq)
  return false;
#undef DO_
}

void TCampTowerGetCampRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCampTowerGetCampRankReq)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->campid(), output);
  }

  // optional int32 Offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // optional int32 Limit = 3;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCampTowerGetCampRankReq)
}

::google::protobuf::uint8* TCampTowerGetCampRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCampTowerGetCampRankReq)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->campid(), target);
  }

  // optional int32 Offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // optional int32 Limit = 3;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCampTowerGetCampRankReq)
  return target;
}

int TCampTowerGetCampRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CampId = 1;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional int32 Offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional int32 Limit = 3;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCampTowerGetCampRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCampTowerGetCampRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCampTowerGetCampRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCampTowerGetCampRankReq::MergeFrom(const TCampTowerGetCampRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCampTowerGetCampRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCampTowerGetCampRankReq::CopyFrom(const TCampTowerGetCampRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCampTowerGetCampRankReq::IsInitialized() const {

  return true;
}

void TCampTowerGetCampRankReq::Swap(TCampTowerGetCampRankReq* other) {
  if (other != this) {
    std::swap(campid_, other->campid_);
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCampTowerGetCampRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCampTowerGetCampRankReq_descriptor_;
  metadata.reflection = TCampTowerGetCampRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCampTowerGetCampRankRsp::kRankArrFieldNumber;
const int TCampTowerGetCampRankRsp::kMyRankFieldNumber;
#endif  // !_MSC_VER

TCampTowerGetCampRankRsp::TCampTowerGetCampRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCampTowerGetCampRankRsp)
}

void TCampTowerGetCampRankRsp::InitAsDefaultInstance() {
}

TCampTowerGetCampRankRsp::TCampTowerGetCampRankRsp(const TCampTowerGetCampRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCampTowerGetCampRankRsp)
}

void TCampTowerGetCampRankRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCampTowerGetCampRankRsp::~TCampTowerGetCampRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TCampTowerGetCampRankRsp)
  SharedDtor();
}

void TCampTowerGetCampRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCampTowerGetCampRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCampTowerGetCampRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCampTowerGetCampRankRsp_descriptor_;
}

const TCampTowerGetCampRankRsp& TCampTowerGetCampRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCampTower_2eproto();
  return *default_instance_;
}

TCampTowerGetCampRankRsp* TCampTowerGetCampRankRsp::default_instance_ = NULL;

TCampTowerGetCampRankRsp* TCampTowerGetCampRankRsp::New() const {
  return new TCampTowerGetCampRankRsp;
}

void TCampTowerGetCampRankRsp::Clear() {
  myrank_ = 0;
  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCampTowerGetCampRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCampTowerGetCampRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCampTowerPassedRankItem RankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankArr;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional int32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCampTowerGetCampRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCampTowerGetCampRankRsp)
  return false;
#undef DO_
}

void TCampTowerGetCampRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCampTowerGetCampRankRsp)
  // repeated .pb.TCampTowerPassedRankItem RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankarr(i), output);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCampTowerGetCampRankRsp)
}

::google::protobuf::uint8* TCampTowerGetCampRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCampTowerGetCampRankRsp)
  // repeated .pb.TCampTowerPassedRankItem RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankarr(i), target);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCampTowerGetCampRankRsp)
  return target;
}

int TCampTowerGetCampRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

  }
  // repeated .pb.TCampTowerPassedRankItem RankArr = 1;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCampTowerGetCampRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCampTowerGetCampRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCampTowerGetCampRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCampTowerGetCampRankRsp::MergeFrom(const TCampTowerGetCampRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCampTowerGetCampRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCampTowerGetCampRankRsp::CopyFrom(const TCampTowerGetCampRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCampTowerGetCampRankRsp::IsInitialized() const {

  return true;
}

void TCampTowerGetCampRankRsp::Swap(TCampTowerGetCampRankRsp* other) {
  if (other != this) {
    rankarr_.Swap(&other->rankarr_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCampTowerGetCampRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCampTowerGetCampRankRsp_descriptor_;
  metadata.reflection = TCampTowerGetCampRankRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
