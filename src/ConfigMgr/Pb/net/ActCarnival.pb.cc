// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActCarnival.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActCarnival.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActCarnivalGoodsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCarnivalGoodsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCarnivalGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCarnivalGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCarnivalBuyGoodsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCarnivalBuyGoodsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCarnivalExchangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCarnivalExchangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCarnivalNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCarnivalNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActCarnival_2eproto() {
  protobuf_AddDesc_net_2fActCarnival_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActCarnival.proto");
  GOOGLE_CHECK(file != NULL);
  TActCarnivalGoodsInfo_descriptor_ = file->message_type(0);
  static const int TActCarnivalGoodsInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalGoodsInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalGoodsInfo, num_),
  };
  TActCarnivalGoodsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCarnivalGoodsInfo_descriptor_,
      TActCarnivalGoodsInfo::default_instance_,
      TActCarnivalGoodsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalGoodsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalGoodsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCarnivalGoodsInfo));
  TActCarnivalGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TActCarnivalGetInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalGetInfoRsp, arrrmbgoodsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalGetInfoRsp, arrgoodsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalGetInfoRsp, arrexchangeinfo_),
  };
  TActCarnivalGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCarnivalGetInfoRsp_descriptor_,
      TActCarnivalGetInfoRsp::default_instance_,
      TActCarnivalGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCarnivalGetInfoRsp));
  TActCarnivalBuyGoodsReq_descriptor_ = file->message_type(2);
  static const int TActCarnivalBuyGoodsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalBuyGoodsReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalBuyGoodsReq, num_),
  };
  TActCarnivalBuyGoodsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCarnivalBuyGoodsReq_descriptor_,
      TActCarnivalBuyGoodsReq::default_instance_,
      TActCarnivalBuyGoodsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalBuyGoodsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalBuyGoodsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCarnivalBuyGoodsReq));
  TActCarnivalExchangeReq_descriptor_ = file->message_type(3);
  static const int TActCarnivalExchangeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalExchangeReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalExchangeReq, num_),
  };
  TActCarnivalExchangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCarnivalExchangeReq_descriptor_,
      TActCarnivalExchangeReq::default_instance_,
      TActCarnivalExchangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalExchangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalExchangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCarnivalExchangeReq));
  TActCarnivalNotify_descriptor_ = file->message_type(4);
  static const int TActCarnivalNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalNotify, arrrmbgoodsinfo_),
  };
  TActCarnivalNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCarnivalNotify_descriptor_,
      TActCarnivalNotify::default_instance_,
      TActCarnivalNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCarnivalNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCarnivalNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActCarnival_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCarnivalGoodsInfo_descriptor_, &TActCarnivalGoodsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCarnivalGetInfoRsp_descriptor_, &TActCarnivalGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCarnivalBuyGoodsReq_descriptor_, &TActCarnivalBuyGoodsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCarnivalExchangeReq_descriptor_, &TActCarnivalExchangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCarnivalNotify_descriptor_, &TActCarnivalNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActCarnival_2eproto() {
  delete TActCarnivalGoodsInfo::default_instance_;
  delete TActCarnivalGoodsInfo_reflection_;
  delete TActCarnivalGetInfoRsp::default_instance_;
  delete TActCarnivalGetInfoRsp_reflection_;
  delete TActCarnivalBuyGoodsReq::default_instance_;
  delete TActCarnivalBuyGoodsReq_reflection_;
  delete TActCarnivalExchangeReq::default_instance_;
  delete TActCarnivalExchangeReq_reflection_;
  delete TActCarnivalNotify::default_instance_;
  delete TActCarnivalNotify_reflection_;
}

void protobuf_AddDesc_net_2fActCarnival_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025net/ActCarnival.proto\022\002pb\"0\n\025TActCarni"
    "valGoodsInfo\022\n\n\002Id\030\001 \001(\r\022\013\n\003Num\030\002 \001(\r\"\261\001"
    "\n\026TActCarnivalGetInfoRsp\0222\n\017ArrRmbGoodsI"
    "nfo\030\001 \003(\0132\031.pb.TActCarnivalGoodsInfo\022/\n\014"
    "ArrGoodsInfo\030\002 \003(\0132\031.pb.TActCarnivalGood"
    "sInfo\0222\n\017ArrExchangeInfo\030\003 \003(\0132\031.pb.TAct"
    "CarnivalGoodsInfo\"2\n\027TActCarnivalBuyGood"
    "sReq\022\n\n\002Id\030\001 \001(\r\022\013\n\003Num\030\002 \001(\r\"2\n\027TActCar"
    "nivalExchangeReq\022\n\n\002Id\030\001 \001(\r\022\013\n\003Num\030\002 \001("
    "\r\"H\n\022TActCarnivalNotify\0222\n\017ArrRmbGoodsIn"
    "fo\030\001 \003(\0132\031.pb.TActCarnivalGoodsInfo", 435);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActCarnival.proto", &protobuf_RegisterTypes);
  TActCarnivalGoodsInfo::default_instance_ = new TActCarnivalGoodsInfo();
  TActCarnivalGetInfoRsp::default_instance_ = new TActCarnivalGetInfoRsp();
  TActCarnivalBuyGoodsReq::default_instance_ = new TActCarnivalBuyGoodsReq();
  TActCarnivalExchangeReq::default_instance_ = new TActCarnivalExchangeReq();
  TActCarnivalNotify::default_instance_ = new TActCarnivalNotify();
  TActCarnivalGoodsInfo::default_instance_->InitAsDefaultInstance();
  TActCarnivalGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActCarnivalBuyGoodsReq::default_instance_->InitAsDefaultInstance();
  TActCarnivalExchangeReq::default_instance_->InitAsDefaultInstance();
  TActCarnivalNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActCarnival_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActCarnival_2eproto {
  StaticDescriptorInitializer_net_2fActCarnival_2eproto() {
    protobuf_AddDesc_net_2fActCarnival_2eproto();
  }
} static_descriptor_initializer_net_2fActCarnival_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActCarnivalGoodsInfo::kIdFieldNumber;
const int TActCarnivalGoodsInfo::kNumFieldNumber;
#endif  // !_MSC_VER

TActCarnivalGoodsInfo::TActCarnivalGoodsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCarnivalGoodsInfo)
}

void TActCarnivalGoodsInfo::InitAsDefaultInstance() {
}

TActCarnivalGoodsInfo::TActCarnivalGoodsInfo(const TActCarnivalGoodsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCarnivalGoodsInfo)
}

void TActCarnivalGoodsInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCarnivalGoodsInfo::~TActCarnivalGoodsInfo() {
  // @@protoc_insertion_point(destructor:pb.TActCarnivalGoodsInfo)
  SharedDtor();
}

void TActCarnivalGoodsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCarnivalGoodsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCarnivalGoodsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCarnivalGoodsInfo_descriptor_;
}

const TActCarnivalGoodsInfo& TActCarnivalGoodsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCarnival_2eproto();
  return *default_instance_;
}

TActCarnivalGoodsInfo* TActCarnivalGoodsInfo::default_instance_ = NULL;

TActCarnivalGoodsInfo* TActCarnivalGoodsInfo::New() const {
  return new TActCarnivalGoodsInfo;
}

void TActCarnivalGoodsInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActCarnivalGoodsInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCarnivalGoodsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCarnivalGoodsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCarnivalGoodsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCarnivalGoodsInfo)
  return false;
#undef DO_
}

void TActCarnivalGoodsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCarnivalGoodsInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCarnivalGoodsInfo)
}

::google::protobuf::uint8* TActCarnivalGoodsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCarnivalGoodsInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCarnivalGoodsInfo)
  return target;
}

int TActCarnivalGoodsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCarnivalGoodsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCarnivalGoodsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCarnivalGoodsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCarnivalGoodsInfo::MergeFrom(const TActCarnivalGoodsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCarnivalGoodsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCarnivalGoodsInfo::CopyFrom(const TActCarnivalGoodsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCarnivalGoodsInfo::IsInitialized() const {

  return true;
}

void TActCarnivalGoodsInfo::Swap(TActCarnivalGoodsInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCarnivalGoodsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCarnivalGoodsInfo_descriptor_;
  metadata.reflection = TActCarnivalGoodsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCarnivalGetInfoRsp::kArrRmbGoodsInfoFieldNumber;
const int TActCarnivalGetInfoRsp::kArrGoodsInfoFieldNumber;
const int TActCarnivalGetInfoRsp::kArrExchangeInfoFieldNumber;
#endif  // !_MSC_VER

TActCarnivalGetInfoRsp::TActCarnivalGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCarnivalGetInfoRsp)
}

void TActCarnivalGetInfoRsp::InitAsDefaultInstance() {
}

TActCarnivalGetInfoRsp::TActCarnivalGetInfoRsp(const TActCarnivalGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCarnivalGetInfoRsp)
}

void TActCarnivalGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCarnivalGetInfoRsp::~TActCarnivalGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActCarnivalGetInfoRsp)
  SharedDtor();
}

void TActCarnivalGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCarnivalGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCarnivalGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCarnivalGetInfoRsp_descriptor_;
}

const TActCarnivalGetInfoRsp& TActCarnivalGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCarnival_2eproto();
  return *default_instance_;
}

TActCarnivalGetInfoRsp* TActCarnivalGetInfoRsp::default_instance_ = NULL;

TActCarnivalGetInfoRsp* TActCarnivalGetInfoRsp::New() const {
  return new TActCarnivalGetInfoRsp;
}

void TActCarnivalGetInfoRsp::Clear() {
  arrrmbgoodsinfo_.Clear();
  arrgoodsinfo_.Clear();
  arrexchangeinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCarnivalGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCarnivalGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActCarnivalGoodsInfo ArrRmbGoodsInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRmbGoodsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrmbgoodsinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRmbGoodsInfo;
        if (input->ExpectTag(18)) goto parse_ArrGoodsInfo;
        break;
      }

      // repeated .pb.TActCarnivalGoodsInfo ArrGoodsInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrGoodsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrgoodsinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrGoodsInfo;
        if (input->ExpectTag(26)) goto parse_ArrExchangeInfo;
        break;
      }

      // repeated .pb.TActCarnivalGoodsInfo ArrExchangeInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrExchangeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrexchangeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrExchangeInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCarnivalGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCarnivalGetInfoRsp)
  return false;
#undef DO_
}

void TActCarnivalGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCarnivalGetInfoRsp)
  // repeated .pb.TActCarnivalGoodsInfo ArrRmbGoodsInfo = 1;
  for (int i = 0; i < this->arrrmbgoodsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrmbgoodsinfo(i), output);
  }

  // repeated .pb.TActCarnivalGoodsInfo ArrGoodsInfo = 2;
  for (int i = 0; i < this->arrgoodsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrgoodsinfo(i), output);
  }

  // repeated .pb.TActCarnivalGoodsInfo ArrExchangeInfo = 3;
  for (int i = 0; i < this->arrexchangeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrexchangeinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCarnivalGetInfoRsp)
}

::google::protobuf::uint8* TActCarnivalGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCarnivalGetInfoRsp)
  // repeated .pb.TActCarnivalGoodsInfo ArrRmbGoodsInfo = 1;
  for (int i = 0; i < this->arrrmbgoodsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrmbgoodsinfo(i), target);
  }

  // repeated .pb.TActCarnivalGoodsInfo ArrGoodsInfo = 2;
  for (int i = 0; i < this->arrgoodsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrgoodsinfo(i), target);
  }

  // repeated .pb.TActCarnivalGoodsInfo ArrExchangeInfo = 3;
  for (int i = 0; i < this->arrexchangeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrexchangeinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCarnivalGetInfoRsp)
  return target;
}

int TActCarnivalGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActCarnivalGoodsInfo ArrRmbGoodsInfo = 1;
  total_size += 1 * this->arrrmbgoodsinfo_size();
  for (int i = 0; i < this->arrrmbgoodsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrmbgoodsinfo(i));
  }

  // repeated .pb.TActCarnivalGoodsInfo ArrGoodsInfo = 2;
  total_size += 1 * this->arrgoodsinfo_size();
  for (int i = 0; i < this->arrgoodsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrgoodsinfo(i));
  }

  // repeated .pb.TActCarnivalGoodsInfo ArrExchangeInfo = 3;
  total_size += 1 * this->arrexchangeinfo_size();
  for (int i = 0; i < this->arrexchangeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrexchangeinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCarnivalGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCarnivalGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCarnivalGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCarnivalGetInfoRsp::MergeFrom(const TActCarnivalGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrmbgoodsinfo_.MergeFrom(from.arrrmbgoodsinfo_);
  arrgoodsinfo_.MergeFrom(from.arrgoodsinfo_);
  arrexchangeinfo_.MergeFrom(from.arrexchangeinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCarnivalGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCarnivalGetInfoRsp::CopyFrom(const TActCarnivalGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCarnivalGetInfoRsp::IsInitialized() const {

  return true;
}

void TActCarnivalGetInfoRsp::Swap(TActCarnivalGetInfoRsp* other) {
  if (other != this) {
    arrrmbgoodsinfo_.Swap(&other->arrrmbgoodsinfo_);
    arrgoodsinfo_.Swap(&other->arrgoodsinfo_);
    arrexchangeinfo_.Swap(&other->arrexchangeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCarnivalGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCarnivalGetInfoRsp_descriptor_;
  metadata.reflection = TActCarnivalGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCarnivalBuyGoodsReq::kIdFieldNumber;
const int TActCarnivalBuyGoodsReq::kNumFieldNumber;
#endif  // !_MSC_VER

TActCarnivalBuyGoodsReq::TActCarnivalBuyGoodsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCarnivalBuyGoodsReq)
}

void TActCarnivalBuyGoodsReq::InitAsDefaultInstance() {
}

TActCarnivalBuyGoodsReq::TActCarnivalBuyGoodsReq(const TActCarnivalBuyGoodsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCarnivalBuyGoodsReq)
}

void TActCarnivalBuyGoodsReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCarnivalBuyGoodsReq::~TActCarnivalBuyGoodsReq() {
  // @@protoc_insertion_point(destructor:pb.TActCarnivalBuyGoodsReq)
  SharedDtor();
}

void TActCarnivalBuyGoodsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCarnivalBuyGoodsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCarnivalBuyGoodsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCarnivalBuyGoodsReq_descriptor_;
}

const TActCarnivalBuyGoodsReq& TActCarnivalBuyGoodsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCarnival_2eproto();
  return *default_instance_;
}

TActCarnivalBuyGoodsReq* TActCarnivalBuyGoodsReq::default_instance_ = NULL;

TActCarnivalBuyGoodsReq* TActCarnivalBuyGoodsReq::New() const {
  return new TActCarnivalBuyGoodsReq;
}

void TActCarnivalBuyGoodsReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActCarnivalBuyGoodsReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCarnivalBuyGoodsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCarnivalBuyGoodsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCarnivalBuyGoodsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCarnivalBuyGoodsReq)
  return false;
#undef DO_
}

void TActCarnivalBuyGoodsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCarnivalBuyGoodsReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCarnivalBuyGoodsReq)
}

::google::protobuf::uint8* TActCarnivalBuyGoodsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCarnivalBuyGoodsReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCarnivalBuyGoodsReq)
  return target;
}

int TActCarnivalBuyGoodsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCarnivalBuyGoodsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCarnivalBuyGoodsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCarnivalBuyGoodsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCarnivalBuyGoodsReq::MergeFrom(const TActCarnivalBuyGoodsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCarnivalBuyGoodsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCarnivalBuyGoodsReq::CopyFrom(const TActCarnivalBuyGoodsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCarnivalBuyGoodsReq::IsInitialized() const {

  return true;
}

void TActCarnivalBuyGoodsReq::Swap(TActCarnivalBuyGoodsReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCarnivalBuyGoodsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCarnivalBuyGoodsReq_descriptor_;
  metadata.reflection = TActCarnivalBuyGoodsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCarnivalExchangeReq::kIdFieldNumber;
const int TActCarnivalExchangeReq::kNumFieldNumber;
#endif  // !_MSC_VER

TActCarnivalExchangeReq::TActCarnivalExchangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCarnivalExchangeReq)
}

void TActCarnivalExchangeReq::InitAsDefaultInstance() {
}

TActCarnivalExchangeReq::TActCarnivalExchangeReq(const TActCarnivalExchangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCarnivalExchangeReq)
}

void TActCarnivalExchangeReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCarnivalExchangeReq::~TActCarnivalExchangeReq() {
  // @@protoc_insertion_point(destructor:pb.TActCarnivalExchangeReq)
  SharedDtor();
}

void TActCarnivalExchangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCarnivalExchangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCarnivalExchangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCarnivalExchangeReq_descriptor_;
}

const TActCarnivalExchangeReq& TActCarnivalExchangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCarnival_2eproto();
  return *default_instance_;
}

TActCarnivalExchangeReq* TActCarnivalExchangeReq::default_instance_ = NULL;

TActCarnivalExchangeReq* TActCarnivalExchangeReq::New() const {
  return new TActCarnivalExchangeReq;
}

void TActCarnivalExchangeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActCarnivalExchangeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCarnivalExchangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCarnivalExchangeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCarnivalExchangeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCarnivalExchangeReq)
  return false;
#undef DO_
}

void TActCarnivalExchangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCarnivalExchangeReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCarnivalExchangeReq)
}

::google::protobuf::uint8* TActCarnivalExchangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCarnivalExchangeReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCarnivalExchangeReq)
  return target;
}

int TActCarnivalExchangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCarnivalExchangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCarnivalExchangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCarnivalExchangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCarnivalExchangeReq::MergeFrom(const TActCarnivalExchangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCarnivalExchangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCarnivalExchangeReq::CopyFrom(const TActCarnivalExchangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCarnivalExchangeReq::IsInitialized() const {

  return true;
}

void TActCarnivalExchangeReq::Swap(TActCarnivalExchangeReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCarnivalExchangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCarnivalExchangeReq_descriptor_;
  metadata.reflection = TActCarnivalExchangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCarnivalNotify::kArrRmbGoodsInfoFieldNumber;
#endif  // !_MSC_VER

TActCarnivalNotify::TActCarnivalNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCarnivalNotify)
}

void TActCarnivalNotify::InitAsDefaultInstance() {
}

TActCarnivalNotify::TActCarnivalNotify(const TActCarnivalNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCarnivalNotify)
}

void TActCarnivalNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCarnivalNotify::~TActCarnivalNotify() {
  // @@protoc_insertion_point(destructor:pb.TActCarnivalNotify)
  SharedDtor();
}

void TActCarnivalNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCarnivalNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCarnivalNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCarnivalNotify_descriptor_;
}

const TActCarnivalNotify& TActCarnivalNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCarnival_2eproto();
  return *default_instance_;
}

TActCarnivalNotify* TActCarnivalNotify::default_instance_ = NULL;

TActCarnivalNotify* TActCarnivalNotify::New() const {
  return new TActCarnivalNotify;
}

void TActCarnivalNotify::Clear() {
  arrrmbgoodsinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCarnivalNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCarnivalNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActCarnivalGoodsInfo ArrRmbGoodsInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRmbGoodsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrmbgoodsinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRmbGoodsInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCarnivalNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCarnivalNotify)
  return false;
#undef DO_
}

void TActCarnivalNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCarnivalNotify)
  // repeated .pb.TActCarnivalGoodsInfo ArrRmbGoodsInfo = 1;
  for (int i = 0; i < this->arrrmbgoodsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrmbgoodsinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCarnivalNotify)
}

::google::protobuf::uint8* TActCarnivalNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCarnivalNotify)
  // repeated .pb.TActCarnivalGoodsInfo ArrRmbGoodsInfo = 1;
  for (int i = 0; i < this->arrrmbgoodsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrmbgoodsinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCarnivalNotify)
  return target;
}

int TActCarnivalNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActCarnivalGoodsInfo ArrRmbGoodsInfo = 1;
  total_size += 1 * this->arrrmbgoodsinfo_size();
  for (int i = 0; i < this->arrrmbgoodsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrmbgoodsinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCarnivalNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCarnivalNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCarnivalNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCarnivalNotify::MergeFrom(const TActCarnivalNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrmbgoodsinfo_.MergeFrom(from.arrrmbgoodsinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCarnivalNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCarnivalNotify::CopyFrom(const TActCarnivalNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCarnivalNotify::IsInitialized() const {

  return true;
}

void TActCarnivalNotify::Swap(TActCarnivalNotify* other) {
  if (other != this) {
    arrrmbgoodsinfo_.Swap(&other->arrrmbgoodsinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCarnivalNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCarnivalNotify_descriptor_;
  metadata.reflection = TActCarnivalNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
