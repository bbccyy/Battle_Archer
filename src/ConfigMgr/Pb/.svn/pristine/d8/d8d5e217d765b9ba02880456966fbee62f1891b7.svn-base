// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Funcopen.proto

#ifndef PROTOBUF_net_2fFuncopen_2eproto__INCLUDED
#define PROTOBUF_net_2fFuncopen_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fFuncopen_2eproto();
void protobuf_AssignDesc_net_2fFuncopen_2eproto();
void protobuf_ShutdownFile_net_2fFuncopen_2eproto();

class TOpenFuncSingleInfo;
class TFuncOpenGetInfoRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TOpenFuncSingleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Funcopen.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOpenFuncSingleInfo : public ::google::protobuf::Message {
 public:
  TOpenFuncSingleInfo();
  virtual ~TOpenFuncSingleInfo();

  TOpenFuncSingleInfo(const TOpenFuncSingleInfo& from);

  inline TOpenFuncSingleInfo& operator=(const TOpenFuncSingleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOpenFuncSingleInfo& default_instance();

  void Swap(TOpenFuncSingleInfo* other);

  // implements Message ----------------------------------------------

  TOpenFuncSingleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOpenFuncSingleInfo& from);
  void MergeFrom(const TOpenFuncSingleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FuncId = 1;
  inline bool has_funcid() const;
  inline void clear_funcid();
  static const int kFuncIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOpenFuncSingleInfo</name>
  	<Function>
  		<name>funcid</name>
  		<replaceName>FuncId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_funcid</name>
  		<replaceName>FuncId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_funcid</name>
  		<replaceName>FuncId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 funcid() const;
  inline void set_funcid(::google::protobuf::uint32 value);

  // optional uint64 OpenTime = 2;
  inline bool has_opentime() const;
  inline void clear_opentime();
  static const int kOpenTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TOpenFuncSingleInfo</name>
  	<Function>
  		<name>opentime</name>
  		<replaceName>OpenTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_opentime</name>
  		<replaceName>OpenTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_opentime</name>
  		<replaceName>OpenTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 opentime() const;
  inline void set_opentime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TOpenFuncSingleInfo)
 private:
  inline void set_has_funcid();
  inline void clear_has_funcid();
  inline void set_has_opentime();
  inline void clear_has_opentime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 opentime_;
  ::google::protobuf::uint32 funcid_;
  friend void  protobuf_AddDesc_net_2fFuncopen_2eproto();
  friend void protobuf_AssignDesc_net_2fFuncopen_2eproto();
  friend void protobuf_ShutdownFile_net_2fFuncopen_2eproto();

  void InitAsDefaultInstance();
  static TOpenFuncSingleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFuncOpenGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Funcopen.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFuncOpenGetInfoRsp : public ::google::protobuf::Message {
 public:
  TFuncOpenGetInfoRsp();
  virtual ~TFuncOpenGetInfoRsp();

  TFuncOpenGetInfoRsp(const TFuncOpenGetInfoRsp& from);

  inline TFuncOpenGetInfoRsp& operator=(const TFuncOpenGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFuncOpenGetInfoRsp& default_instance();

  void Swap(TFuncOpenGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TFuncOpenGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFuncOpenGetInfoRsp& from);
  void MergeFrom(const TFuncOpenGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TOpenFuncSingleInfo OpenFuncArr = 1;
  inline int openfuncarr_size() const;
  inline void clear_openfuncarr();
  static const int kOpenFuncArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFuncOpenGetInfoRsp</name>
  	<Function>
  		<name>openfuncarr</name>
  		<replaceName>OpenFuncArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_openfuncarr</name>
  		<replaceName>OpenFuncArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_openfuncarr</name>
  		<replaceName>OpenFuncArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_openfuncarr</name>
  		<replaceName>OpenFuncArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>openfuncarr_size</name>
  		<replaceName>OpenFuncArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TOpenFuncSingleInfo& openfuncarr(int index) const;
  inline ::pb::TOpenFuncSingleInfo* mutable_openfuncarr(int index);
  inline ::pb::TOpenFuncSingleInfo* add_openfuncarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TOpenFuncSingleInfo >&
      openfuncarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TOpenFuncSingleInfo >*
      mutable_openfuncarr();

  // @@protoc_insertion_point(class_scope:pb.TFuncOpenGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TOpenFuncSingleInfo > openfuncarr_;
  friend void  protobuf_AddDesc_net_2fFuncopen_2eproto();
  friend void protobuf_AssignDesc_net_2fFuncopen_2eproto();
  friend void protobuf_ShutdownFile_net_2fFuncopen_2eproto();

  void InitAsDefaultInstance();
  static TFuncOpenGetInfoRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TOpenFuncSingleInfo

// optional uint32 FuncId = 1;
inline bool TOpenFuncSingleInfo::has_funcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TOpenFuncSingleInfo::set_has_funcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TOpenFuncSingleInfo::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TOpenFuncSingleInfo::clear_funcid() {
  funcid_ = 0u;
  clear_has_funcid();
}
inline ::google::protobuf::uint32 TOpenFuncSingleInfo::funcid() const {
  // @@protoc_insertion_point(field_get:pb.TOpenFuncSingleInfo.FuncId)
  return funcid_;
}
inline void TOpenFuncSingleInfo::set_funcid(::google::protobuf::uint32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:pb.TOpenFuncSingleInfo.FuncId)
}

// optional uint64 OpenTime = 2;
inline bool TOpenFuncSingleInfo::has_opentime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TOpenFuncSingleInfo::set_has_opentime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TOpenFuncSingleInfo::clear_has_opentime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TOpenFuncSingleInfo::clear_opentime() {
  opentime_ = GOOGLE_ULONGLONG(0);
  clear_has_opentime();
}
inline ::google::protobuf::uint64 TOpenFuncSingleInfo::opentime() const {
  // @@protoc_insertion_point(field_get:pb.TOpenFuncSingleInfo.OpenTime)
  return opentime_;
}
inline void TOpenFuncSingleInfo::set_opentime(::google::protobuf::uint64 value) {
  set_has_opentime();
  opentime_ = value;
  // @@protoc_insertion_point(field_set:pb.TOpenFuncSingleInfo.OpenTime)
}

// -------------------------------------------------------------------

// TFuncOpenGetInfoRsp

// repeated .pb.TOpenFuncSingleInfo OpenFuncArr = 1;
inline int TFuncOpenGetInfoRsp::openfuncarr_size() const {
  return openfuncarr_.size();
}
inline void TFuncOpenGetInfoRsp::clear_openfuncarr() {
  openfuncarr_.Clear();
}
inline const ::pb::TOpenFuncSingleInfo& TFuncOpenGetInfoRsp::openfuncarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFuncOpenGetInfoRsp.OpenFuncArr)
  return openfuncarr_.Get(index);
}
inline ::pb::TOpenFuncSingleInfo* TFuncOpenGetInfoRsp::mutable_openfuncarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TFuncOpenGetInfoRsp.OpenFuncArr)
  return openfuncarr_.Mutable(index);
}
inline ::pb::TOpenFuncSingleInfo* TFuncOpenGetInfoRsp::add_openfuncarr() {
  // @@protoc_insertion_point(field_add:pb.TFuncOpenGetInfoRsp.OpenFuncArr)
  return openfuncarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TOpenFuncSingleInfo >&
TFuncOpenGetInfoRsp::openfuncarr() const {
  // @@protoc_insertion_point(field_list:pb.TFuncOpenGetInfoRsp.OpenFuncArr)
  return openfuncarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TOpenFuncSingleInfo >*
TFuncOpenGetInfoRsp::mutable_openfuncarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFuncOpenGetInfoRsp.OpenFuncArr)
  return &openfuncarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fFuncopen_2eproto__INCLUDED
