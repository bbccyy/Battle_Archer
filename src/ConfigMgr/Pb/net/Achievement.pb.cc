// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Achievement.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Achievement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TAchievementCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAchievementCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAchievementInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAchievementInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAchievementReceiveSingleAwardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAchievementReceiveSingleAwardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAchievementReceivePointAwardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAchievementReceivePointAwardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAchievementInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAchievementInfoNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fAchievement_2eproto() {
  protobuf_AddDesc_net_2fAchievement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Achievement.proto");
  GOOGLE_CHECK(file != NULL);
  TAchievementCell_descriptor_ = file->message_type(0);
  static const int TAchievementCell_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementCell, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementCell, status_),
  };
  TAchievementCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAchievementCell_descriptor_,
      TAchievementCell::default_instance_,
      TAchievementCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAchievementCell));
  TAchievementInfoRsp_descriptor_ = file->message_type(1);
  static const int TAchievementInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementInfoRsp, taskstatusarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementInfoRsp, receivedawardtidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementInfoRsp, pointnum_),
  };
  TAchievementInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAchievementInfoRsp_descriptor_,
      TAchievementInfoRsp::default_instance_,
      TAchievementInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAchievementInfoRsp));
  TAchievementReceiveSingleAwardReq_descriptor_ = file->message_type(2);
  static const int TAchievementReceiveSingleAwardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementReceiveSingleAwardReq, achievementtid_),
  };
  TAchievementReceiveSingleAwardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAchievementReceiveSingleAwardReq_descriptor_,
      TAchievementReceiveSingleAwardReq::default_instance_,
      TAchievementReceiveSingleAwardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementReceiveSingleAwardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementReceiveSingleAwardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAchievementReceiveSingleAwardReq));
  TAchievementReceivePointAwardReq_descriptor_ = file->message_type(3);
  static const int TAchievementReceivePointAwardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementReceivePointAwardReq, achipointtid_),
  };
  TAchievementReceivePointAwardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAchievementReceivePointAwardReq_descriptor_,
      TAchievementReceivePointAwardReq::default_instance_,
      TAchievementReceivePointAwardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementReceivePointAwardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementReceivePointAwardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAchievementReceivePointAwardReq));
  TAchievementInfoNotify_descriptor_ = file->message_type(4);
  static const int TAchievementInfoNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementInfoNotify, taskstatusarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementInfoNotify, receivedawardtidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementInfoNotify, pointnum_),
  };
  TAchievementInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAchievementInfoNotify_descriptor_,
      TAchievementInfoNotify::default_instance_,
      TAchievementInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAchievementInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAchievementInfoNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fAchievement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAchievementCell_descriptor_, &TAchievementCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAchievementInfoRsp_descriptor_, &TAchievementInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAchievementReceiveSingleAwardReq_descriptor_, &TAchievementReceiveSingleAwardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAchievementReceivePointAwardReq_descriptor_, &TAchievementReceivePointAwardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAchievementInfoNotify_descriptor_, &TAchievementInfoNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fAchievement_2eproto() {
  delete TAchievementCell::default_instance_;
  delete TAchievementCell_reflection_;
  delete TAchievementInfoRsp::default_instance_;
  delete TAchievementInfoRsp_reflection_;
  delete TAchievementReceiveSingleAwardReq::default_instance_;
  delete TAchievementReceiveSingleAwardReq_reflection_;
  delete TAchievementReceivePointAwardReq::default_instance_;
  delete TAchievementReceivePointAwardReq_reflection_;
  delete TAchievementInfoNotify::default_instance_;
  delete TAchievementInfoNotify_reflection_;
}

void protobuf_AddDesc_net_2fAchievement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fTaskBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025net/Achievement.proto\022\002pb\032\022net/TaskBas"
    "e.proto\"@\n\020TAchievementCell\022\013\n\003Tid\030\001 \001(\r"
    "\022\037\n\006Status\030\002 \001(\0162\017.pb.ETaskStatus\"q\n\023TAc"
    "hievementInfoRsp\022+\n\rTaskStatusArr\030\001 \003(\0132"
    "\024.pb.TAchievementCell\022\033\n\023ReceivedAwardTi"
    "dArr\030\002 \003(\r\022\020\n\010PointNum\030\003 \001(\r\";\n!TAchieve"
    "mentReceiveSingleAwardReq\022\026\n\016Achievement"
    "Tid\030\001 \001(\r\"8\n TAchievementReceivePointAwa"
    "rdReq\022\024\n\014AchiPointTid\030\001 \001(\r\"t\n\026TAchievem"
    "entInfoNotify\022+\n\rTaskStatusArr\030\001 \003(\0132\024.p"
    "b.TAchievementCell\022\033\n\023ReceivedAwardTidAr"
    "r\030\002 \003(\r\022\020\n\010PointNum\030\003 \001(\r", 465);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Achievement.proto", &protobuf_RegisterTypes);
  TAchievementCell::default_instance_ = new TAchievementCell();
  TAchievementInfoRsp::default_instance_ = new TAchievementInfoRsp();
  TAchievementReceiveSingleAwardReq::default_instance_ = new TAchievementReceiveSingleAwardReq();
  TAchievementReceivePointAwardReq::default_instance_ = new TAchievementReceivePointAwardReq();
  TAchievementInfoNotify::default_instance_ = new TAchievementInfoNotify();
  TAchievementCell::default_instance_->InitAsDefaultInstance();
  TAchievementInfoRsp::default_instance_->InitAsDefaultInstance();
  TAchievementReceiveSingleAwardReq::default_instance_->InitAsDefaultInstance();
  TAchievementReceivePointAwardReq::default_instance_->InitAsDefaultInstance();
  TAchievementInfoNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fAchievement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fAchievement_2eproto {
  StaticDescriptorInitializer_net_2fAchievement_2eproto() {
    protobuf_AddDesc_net_2fAchievement_2eproto();
  }
} static_descriptor_initializer_net_2fAchievement_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TAchievementCell::kTidFieldNumber;
const int TAchievementCell::kStatusFieldNumber;
#endif  // !_MSC_VER

TAchievementCell::TAchievementCell()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAchievementCell)
}

void TAchievementCell::InitAsDefaultInstance() {
}

TAchievementCell::TAchievementCell(const TAchievementCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAchievementCell)
}

void TAchievementCell::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAchievementCell::~TAchievementCell() {
  // @@protoc_insertion_point(destructor:pb.TAchievementCell)
  SharedDtor();
}

void TAchievementCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAchievementCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAchievementCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAchievementCell_descriptor_;
}

const TAchievementCell& TAchievementCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAchievement_2eproto();
  return *default_instance_;
}

TAchievementCell* TAchievementCell::default_instance_ = NULL;

TAchievementCell* TAchievementCell::New() const {
  return new TAchievementCell;
}

void TAchievementCell::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    tid_ = 0u;
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAchievementCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAchievementCell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional .pb.ETaskStatus Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETaskStatus_IsValid(value)) {
            set_status(static_cast< ::pb::ETaskStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAchievementCell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAchievementCell)
  return false;
#undef DO_
}

void TAchievementCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAchievementCell)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  // optional .pb.ETaskStatus Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAchievementCell)
}

::google::protobuf::uint8* TAchievementCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAchievementCell)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  // optional .pb.ETaskStatus Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAchievementCell)
  return target;
}

int TAchievementCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional .pb.ETaskStatus Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAchievementCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAchievementCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAchievementCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAchievementCell::MergeFrom(const TAchievementCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAchievementCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAchievementCell::CopyFrom(const TAchievementCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAchievementCell::IsInitialized() const {

  return true;
}

void TAchievementCell::Swap(TAchievementCell* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAchievementCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAchievementCell_descriptor_;
  metadata.reflection = TAchievementCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAchievementInfoRsp::kTaskStatusArrFieldNumber;
const int TAchievementInfoRsp::kReceivedAwardTidArrFieldNumber;
const int TAchievementInfoRsp::kPointNumFieldNumber;
#endif  // !_MSC_VER

TAchievementInfoRsp::TAchievementInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAchievementInfoRsp)
}

void TAchievementInfoRsp::InitAsDefaultInstance() {
}

TAchievementInfoRsp::TAchievementInfoRsp(const TAchievementInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAchievementInfoRsp)
}

void TAchievementInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  pointnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAchievementInfoRsp::~TAchievementInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TAchievementInfoRsp)
  SharedDtor();
}

void TAchievementInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAchievementInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAchievementInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAchievementInfoRsp_descriptor_;
}

const TAchievementInfoRsp& TAchievementInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAchievement_2eproto();
  return *default_instance_;
}

TAchievementInfoRsp* TAchievementInfoRsp::default_instance_ = NULL;

TAchievementInfoRsp* TAchievementInfoRsp::New() const {
  return new TAchievementInfoRsp;
}

void TAchievementInfoRsp::Clear() {
  pointnum_ = 0u;
  taskstatusarr_.Clear();
  receivedawardtidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAchievementInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAchievementInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAchievementCell TaskStatusArr = 1;
      case 1: {
        if (tag == 10) {
         parse_TaskStatusArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskstatusarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TaskStatusArr;
        if (input->ExpectTag(16)) goto parse_ReceivedAwardTidArr;
        break;
      }

      // repeated uint32 ReceivedAwardTidArr = 2;
      case 2: {
        if (tag == 16) {
         parse_ReceivedAwardTidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_receivedawardtidarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_receivedawardtidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReceivedAwardTidArr;
        if (input->ExpectTag(24)) goto parse_PointNum;
        break;
      }

      // optional uint32 PointNum = 3;
      case 3: {
        if (tag == 24) {
         parse_PointNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointnum_)));
          set_has_pointnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAchievementInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAchievementInfoRsp)
  return false;
#undef DO_
}

void TAchievementInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAchievementInfoRsp)
  // repeated .pb.TAchievementCell TaskStatusArr = 1;
  for (int i = 0; i < this->taskstatusarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskstatusarr(i), output);
  }

  // repeated uint32 ReceivedAwardTidArr = 2;
  for (int i = 0; i < this->receivedawardtidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->receivedawardtidarr(i), output);
  }

  // optional uint32 PointNum = 3;
  if (has_pointnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pointnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAchievementInfoRsp)
}

::google::protobuf::uint8* TAchievementInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAchievementInfoRsp)
  // repeated .pb.TAchievementCell TaskStatusArr = 1;
  for (int i = 0; i < this->taskstatusarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskstatusarr(i), target);
  }

  // repeated uint32 ReceivedAwardTidArr = 2;
  for (int i = 0; i < this->receivedawardtidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->receivedawardtidarr(i), target);
  }

  // optional uint32 PointNum = 3;
  if (has_pointnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pointnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAchievementInfoRsp)
  return target;
}

int TAchievementInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 PointNum = 3;
    if (has_pointnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pointnum());
    }

  }
  // repeated .pb.TAchievementCell TaskStatusArr = 1;
  total_size += 1 * this->taskstatusarr_size();
  for (int i = 0; i < this->taskstatusarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskstatusarr(i));
  }

  // repeated uint32 ReceivedAwardTidArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->receivedawardtidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->receivedawardtidarr(i));
    }
    total_size += 1 * this->receivedawardtidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAchievementInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAchievementInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAchievementInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAchievementInfoRsp::MergeFrom(const TAchievementInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskstatusarr_.MergeFrom(from.taskstatusarr_);
  receivedawardtidarr_.MergeFrom(from.receivedawardtidarr_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_pointnum()) {
      set_pointnum(from.pointnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAchievementInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAchievementInfoRsp::CopyFrom(const TAchievementInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAchievementInfoRsp::IsInitialized() const {

  return true;
}

void TAchievementInfoRsp::Swap(TAchievementInfoRsp* other) {
  if (other != this) {
    taskstatusarr_.Swap(&other->taskstatusarr_);
    receivedawardtidarr_.Swap(&other->receivedawardtidarr_);
    std::swap(pointnum_, other->pointnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAchievementInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAchievementInfoRsp_descriptor_;
  metadata.reflection = TAchievementInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAchievementReceiveSingleAwardReq::kAchievementTidFieldNumber;
#endif  // !_MSC_VER

TAchievementReceiveSingleAwardReq::TAchievementReceiveSingleAwardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAchievementReceiveSingleAwardReq)
}

void TAchievementReceiveSingleAwardReq::InitAsDefaultInstance() {
}

TAchievementReceiveSingleAwardReq::TAchievementReceiveSingleAwardReq(const TAchievementReceiveSingleAwardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAchievementReceiveSingleAwardReq)
}

void TAchievementReceiveSingleAwardReq::SharedCtor() {
  _cached_size_ = 0;
  achievementtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAchievementReceiveSingleAwardReq::~TAchievementReceiveSingleAwardReq() {
  // @@protoc_insertion_point(destructor:pb.TAchievementReceiveSingleAwardReq)
  SharedDtor();
}

void TAchievementReceiveSingleAwardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAchievementReceiveSingleAwardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAchievementReceiveSingleAwardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAchievementReceiveSingleAwardReq_descriptor_;
}

const TAchievementReceiveSingleAwardReq& TAchievementReceiveSingleAwardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAchievement_2eproto();
  return *default_instance_;
}

TAchievementReceiveSingleAwardReq* TAchievementReceiveSingleAwardReq::default_instance_ = NULL;

TAchievementReceiveSingleAwardReq* TAchievementReceiveSingleAwardReq::New() const {
  return new TAchievementReceiveSingleAwardReq;
}

void TAchievementReceiveSingleAwardReq::Clear() {
  achievementtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAchievementReceiveSingleAwardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAchievementReceiveSingleAwardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AchievementTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievementtid_)));
          set_has_achievementtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAchievementReceiveSingleAwardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAchievementReceiveSingleAwardReq)
  return false;
#undef DO_
}

void TAchievementReceiveSingleAwardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAchievementReceiveSingleAwardReq)
  // optional uint32 AchievementTid = 1;
  if (has_achievementtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievementtid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAchievementReceiveSingleAwardReq)
}

::google::protobuf::uint8* TAchievementReceiveSingleAwardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAchievementReceiveSingleAwardReq)
  // optional uint32 AchievementTid = 1;
  if (has_achievementtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievementtid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAchievementReceiveSingleAwardReq)
  return target;
}

int TAchievementReceiveSingleAwardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AchievementTid = 1;
    if (has_achievementtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievementtid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAchievementReceiveSingleAwardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAchievementReceiveSingleAwardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAchievementReceiveSingleAwardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAchievementReceiveSingleAwardReq::MergeFrom(const TAchievementReceiveSingleAwardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievementtid()) {
      set_achievementtid(from.achievementtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAchievementReceiveSingleAwardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAchievementReceiveSingleAwardReq::CopyFrom(const TAchievementReceiveSingleAwardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAchievementReceiveSingleAwardReq::IsInitialized() const {

  return true;
}

void TAchievementReceiveSingleAwardReq::Swap(TAchievementReceiveSingleAwardReq* other) {
  if (other != this) {
    std::swap(achievementtid_, other->achievementtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAchievementReceiveSingleAwardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAchievementReceiveSingleAwardReq_descriptor_;
  metadata.reflection = TAchievementReceiveSingleAwardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAchievementReceivePointAwardReq::kAchiPointTidFieldNumber;
#endif  // !_MSC_VER

TAchievementReceivePointAwardReq::TAchievementReceivePointAwardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAchievementReceivePointAwardReq)
}

void TAchievementReceivePointAwardReq::InitAsDefaultInstance() {
}

TAchievementReceivePointAwardReq::TAchievementReceivePointAwardReq(const TAchievementReceivePointAwardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAchievementReceivePointAwardReq)
}

void TAchievementReceivePointAwardReq::SharedCtor() {
  _cached_size_ = 0;
  achipointtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAchievementReceivePointAwardReq::~TAchievementReceivePointAwardReq() {
  // @@protoc_insertion_point(destructor:pb.TAchievementReceivePointAwardReq)
  SharedDtor();
}

void TAchievementReceivePointAwardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAchievementReceivePointAwardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAchievementReceivePointAwardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAchievementReceivePointAwardReq_descriptor_;
}

const TAchievementReceivePointAwardReq& TAchievementReceivePointAwardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAchievement_2eproto();
  return *default_instance_;
}

TAchievementReceivePointAwardReq* TAchievementReceivePointAwardReq::default_instance_ = NULL;

TAchievementReceivePointAwardReq* TAchievementReceivePointAwardReq::New() const {
  return new TAchievementReceivePointAwardReq;
}

void TAchievementReceivePointAwardReq::Clear() {
  achipointtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAchievementReceivePointAwardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAchievementReceivePointAwardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AchiPointTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achipointtid_)));
          set_has_achipointtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAchievementReceivePointAwardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAchievementReceivePointAwardReq)
  return false;
#undef DO_
}

void TAchievementReceivePointAwardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAchievementReceivePointAwardReq)
  // optional uint32 AchiPointTid = 1;
  if (has_achipointtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achipointtid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAchievementReceivePointAwardReq)
}

::google::protobuf::uint8* TAchievementReceivePointAwardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAchievementReceivePointAwardReq)
  // optional uint32 AchiPointTid = 1;
  if (has_achipointtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achipointtid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAchievementReceivePointAwardReq)
  return target;
}

int TAchievementReceivePointAwardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AchiPointTid = 1;
    if (has_achipointtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achipointtid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAchievementReceivePointAwardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAchievementReceivePointAwardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAchievementReceivePointAwardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAchievementReceivePointAwardReq::MergeFrom(const TAchievementReceivePointAwardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achipointtid()) {
      set_achipointtid(from.achipointtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAchievementReceivePointAwardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAchievementReceivePointAwardReq::CopyFrom(const TAchievementReceivePointAwardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAchievementReceivePointAwardReq::IsInitialized() const {

  return true;
}

void TAchievementReceivePointAwardReq::Swap(TAchievementReceivePointAwardReq* other) {
  if (other != this) {
    std::swap(achipointtid_, other->achipointtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAchievementReceivePointAwardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAchievementReceivePointAwardReq_descriptor_;
  metadata.reflection = TAchievementReceivePointAwardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAchievementInfoNotify::kTaskStatusArrFieldNumber;
const int TAchievementInfoNotify::kReceivedAwardTidArrFieldNumber;
const int TAchievementInfoNotify::kPointNumFieldNumber;
#endif  // !_MSC_VER

TAchievementInfoNotify::TAchievementInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAchievementInfoNotify)
}

void TAchievementInfoNotify::InitAsDefaultInstance() {
}

TAchievementInfoNotify::TAchievementInfoNotify(const TAchievementInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAchievementInfoNotify)
}

void TAchievementInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  pointnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAchievementInfoNotify::~TAchievementInfoNotify() {
  // @@protoc_insertion_point(destructor:pb.TAchievementInfoNotify)
  SharedDtor();
}

void TAchievementInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAchievementInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAchievementInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAchievementInfoNotify_descriptor_;
}

const TAchievementInfoNotify& TAchievementInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAchievement_2eproto();
  return *default_instance_;
}

TAchievementInfoNotify* TAchievementInfoNotify::default_instance_ = NULL;

TAchievementInfoNotify* TAchievementInfoNotify::New() const {
  return new TAchievementInfoNotify;
}

void TAchievementInfoNotify::Clear() {
  pointnum_ = 0u;
  taskstatusarr_.Clear();
  receivedawardtidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAchievementInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAchievementInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAchievementCell TaskStatusArr = 1;
      case 1: {
        if (tag == 10) {
         parse_TaskStatusArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskstatusarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TaskStatusArr;
        if (input->ExpectTag(16)) goto parse_ReceivedAwardTidArr;
        break;
      }

      // repeated uint32 ReceivedAwardTidArr = 2;
      case 2: {
        if (tag == 16) {
         parse_ReceivedAwardTidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_receivedawardtidarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_receivedawardtidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReceivedAwardTidArr;
        if (input->ExpectTag(24)) goto parse_PointNum;
        break;
      }

      // optional uint32 PointNum = 3;
      case 3: {
        if (tag == 24) {
         parse_PointNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointnum_)));
          set_has_pointnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAchievementInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAchievementInfoNotify)
  return false;
#undef DO_
}

void TAchievementInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAchievementInfoNotify)
  // repeated .pb.TAchievementCell TaskStatusArr = 1;
  for (int i = 0; i < this->taskstatusarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskstatusarr(i), output);
  }

  // repeated uint32 ReceivedAwardTidArr = 2;
  for (int i = 0; i < this->receivedawardtidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->receivedawardtidarr(i), output);
  }

  // optional uint32 PointNum = 3;
  if (has_pointnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pointnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAchievementInfoNotify)
}

::google::protobuf::uint8* TAchievementInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAchievementInfoNotify)
  // repeated .pb.TAchievementCell TaskStatusArr = 1;
  for (int i = 0; i < this->taskstatusarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskstatusarr(i), target);
  }

  // repeated uint32 ReceivedAwardTidArr = 2;
  for (int i = 0; i < this->receivedawardtidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->receivedawardtidarr(i), target);
  }

  // optional uint32 PointNum = 3;
  if (has_pointnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pointnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAchievementInfoNotify)
  return target;
}

int TAchievementInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 PointNum = 3;
    if (has_pointnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pointnum());
    }

  }
  // repeated .pb.TAchievementCell TaskStatusArr = 1;
  total_size += 1 * this->taskstatusarr_size();
  for (int i = 0; i < this->taskstatusarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskstatusarr(i));
  }

  // repeated uint32 ReceivedAwardTidArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->receivedawardtidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->receivedawardtidarr(i));
    }
    total_size += 1 * this->receivedawardtidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAchievementInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAchievementInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAchievementInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAchievementInfoNotify::MergeFrom(const TAchievementInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskstatusarr_.MergeFrom(from.taskstatusarr_);
  receivedawardtidarr_.MergeFrom(from.receivedawardtidarr_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_pointnum()) {
      set_pointnum(from.pointnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAchievementInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAchievementInfoNotify::CopyFrom(const TAchievementInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAchievementInfoNotify::IsInitialized() const {

  return true;
}

void TAchievementInfoNotify::Swap(TAchievementInfoNotify* other) {
  if (other != this) {
    taskstatusarr_.Swap(&other->taskstatusarr_);
    receivedawardtidarr_.Swap(&other->receivedawardtidarr_);
    std::swap(pointnum_, other->pointnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAchievementInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAchievementInfoNotify_descriptor_;
  metadata.reflection = TAchievementInfoNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
