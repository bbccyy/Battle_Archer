// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Cmd.proto

#ifndef PROTOBUF_net_2fCmd_2eproto__INCLUDED
#define PROTOBUF_net_2fCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fCmd_2eproto();
void protobuf_AssignDesc_net_2fCmd_2eproto();
void protobuf_ShutdownFile_net_2fCmd_2eproto();

class TCmdReq;
class TCmdRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TCmdReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Cmd.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCmdReq : public ::google::protobuf::Message {
 public:
  TCmdReq();
  virtual ~TCmdReq();

  TCmdReq(const TCmdReq& from);

  inline TCmdReq& operator=(const TCmdReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCmdReq& default_instance();

  void Swap(TCmdReq* other);

  // implements Message ----------------------------------------------

  TCmdReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCmdReq& from);
  void MergeFrom(const TCmdReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string CmdMsg = 1;
  inline bool has_cmdmsg() const;
  inline void clear_cmdmsg();
  static const int kCmdMsgFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCmdReq</name>
  	<Function>
  		<name>cmdmsg</name>
  		<replaceName>CmdMsg</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cmdmsg</name>
  		<replaceName>CmdMsg</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cmdmsg</name>
  		<replaceName>CmdMsg</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& cmdmsg() const;
  inline void set_cmdmsg(const ::std::string& value);
  inline void set_cmdmsg(const char* value);
  inline void set_cmdmsg(const char* value, size_t size);
  inline ::std::string* mutable_cmdmsg();
  inline ::std::string* release_cmdmsg();
  inline void set_allocated_cmdmsg(::std::string* cmdmsg);

  // @@protoc_insertion_point(class_scope:pb.TCmdReq)
 private:
  inline void set_has_cmdmsg();
  inline void clear_has_cmdmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cmdmsg_;
  friend void  protobuf_AddDesc_net_2fCmd_2eproto();
  friend void protobuf_AssignDesc_net_2fCmd_2eproto();
  friend void protobuf_ShutdownFile_net_2fCmd_2eproto();

  void InitAsDefaultInstance();
  static TCmdReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCmdRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Cmd.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCmdRsp : public ::google::protobuf::Message {
 public:
  TCmdRsp();
  virtual ~TCmdRsp();

  TCmdRsp(const TCmdRsp& from);

  inline TCmdRsp& operator=(const TCmdRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCmdRsp& default_instance();

  void Swap(TCmdRsp* other);

  // implements Message ----------------------------------------------

  TCmdRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCmdRsp& from);
  void MergeFrom(const TCmdRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string CmdMsg = 1;
  inline bool has_cmdmsg() const;
  inline void clear_cmdmsg();
  static const int kCmdMsgFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCmdRsp</name>
  	<Function>
  		<name>cmdmsg</name>
  		<replaceName>CmdMsg</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cmdmsg</name>
  		<replaceName>CmdMsg</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cmdmsg</name>
  		<replaceName>CmdMsg</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& cmdmsg() const;
  inline void set_cmdmsg(const ::std::string& value);
  inline void set_cmdmsg(const char* value);
  inline void set_cmdmsg(const char* value, size_t size);
  inline ::std::string* mutable_cmdmsg();
  inline ::std::string* release_cmdmsg();
  inline void set_allocated_cmdmsg(::std::string* cmdmsg);

  // @@protoc_insertion_point(class_scope:pb.TCmdRsp)
 private:
  inline void set_has_cmdmsg();
  inline void clear_has_cmdmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cmdmsg_;
  friend void  protobuf_AddDesc_net_2fCmd_2eproto();
  friend void protobuf_AssignDesc_net_2fCmd_2eproto();
  friend void protobuf_ShutdownFile_net_2fCmd_2eproto();

  void InitAsDefaultInstance();
  static TCmdRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TCmdReq

// optional string CmdMsg = 1;
inline bool TCmdReq::has_cmdmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCmdReq::set_has_cmdmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCmdReq::clear_has_cmdmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCmdReq::clear_cmdmsg() {
  if (cmdmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdmsg_->clear();
  }
  clear_has_cmdmsg();
}
inline const ::std::string& TCmdReq::cmdmsg() const {
  // @@protoc_insertion_point(field_get:pb.TCmdReq.CmdMsg)
  return *cmdmsg_;
}
inline void TCmdReq::set_cmdmsg(const ::std::string& value) {
  set_has_cmdmsg();
  if (cmdmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdmsg_ = new ::std::string;
  }
  cmdmsg_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCmdReq.CmdMsg)
}
inline void TCmdReq::set_cmdmsg(const char* value) {
  set_has_cmdmsg();
  if (cmdmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdmsg_ = new ::std::string;
  }
  cmdmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCmdReq.CmdMsg)
}
inline void TCmdReq::set_cmdmsg(const char* value, size_t size) {
  set_has_cmdmsg();
  if (cmdmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdmsg_ = new ::std::string;
  }
  cmdmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCmdReq.CmdMsg)
}
inline ::std::string* TCmdReq::mutable_cmdmsg() {
  set_has_cmdmsg();
  if (cmdmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCmdReq.CmdMsg)
  return cmdmsg_;
}
inline ::std::string* TCmdReq::release_cmdmsg() {
  clear_has_cmdmsg();
  if (cmdmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cmdmsg_;
    cmdmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCmdReq::set_allocated_cmdmsg(::std::string* cmdmsg) {
  if (cmdmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmdmsg_;
  }
  if (cmdmsg) {
    set_has_cmdmsg();
    cmdmsg_ = cmdmsg;
  } else {
    clear_has_cmdmsg();
    cmdmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCmdReq.CmdMsg)
}

// -------------------------------------------------------------------

// TCmdRsp

// optional string CmdMsg = 1;
inline bool TCmdRsp::has_cmdmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCmdRsp::set_has_cmdmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCmdRsp::clear_has_cmdmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCmdRsp::clear_cmdmsg() {
  if (cmdmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdmsg_->clear();
  }
  clear_has_cmdmsg();
}
inline const ::std::string& TCmdRsp::cmdmsg() const {
  // @@protoc_insertion_point(field_get:pb.TCmdRsp.CmdMsg)
  return *cmdmsg_;
}
inline void TCmdRsp::set_cmdmsg(const ::std::string& value) {
  set_has_cmdmsg();
  if (cmdmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdmsg_ = new ::std::string;
  }
  cmdmsg_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCmdRsp.CmdMsg)
}
inline void TCmdRsp::set_cmdmsg(const char* value) {
  set_has_cmdmsg();
  if (cmdmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdmsg_ = new ::std::string;
  }
  cmdmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCmdRsp.CmdMsg)
}
inline void TCmdRsp::set_cmdmsg(const char* value, size_t size) {
  set_has_cmdmsg();
  if (cmdmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdmsg_ = new ::std::string;
  }
  cmdmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCmdRsp.CmdMsg)
}
inline ::std::string* TCmdRsp::mutable_cmdmsg() {
  set_has_cmdmsg();
  if (cmdmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCmdRsp.CmdMsg)
  return cmdmsg_;
}
inline ::std::string* TCmdRsp::release_cmdmsg() {
  clear_has_cmdmsg();
  if (cmdmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cmdmsg_;
    cmdmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCmdRsp::set_allocated_cmdmsg(::std::string* cmdmsg) {
  if (cmdmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmdmsg_;
  }
  if (cmdmsg) {
    set_has_cmdmsg();
    cmdmsg_ = cmdmsg;
  } else {
    clear_has_cmdmsg();
    cmdmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCmdRsp.CmdMsg)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fCmd_2eproto__INCLUDED
